!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports["vue-unicorn-log"]=t():e["vue-unicorn-log"]=t()}(self,(function(){return function(){var e={"../node_modules/ansi-html-community/index.js":function(e){"use strict";e.exports=i;var t=/(?:(?:\u001b\[)|\u009b)(?:(?:[0-9]{1,3})?(?:(?:;[0-9]{0,3})*)?[A-M|f-m])|\u001b[A-M]/,n={reset:["fff","000"],black:"000",red:"ff0000",green:"209805",yellow:"e8bf03",blue:"0000ff",magenta:"ff00ff",cyan:"00ffee",lightgrey:"f0f0f0",darkgrey:"888"},r={30:"black",31:"red",32:"green",33:"yellow",34:"blue",35:"magenta",36:"cyan",37:"lightgrey"},o={1:"font-weight:bold",2:"opacity:0.5",3:"<i>",4:"<u>",8:"display:none",9:"<del>"},a={23:"</i>",24:"</u>",29:"</del>"};function i(e){if(!t.test(e))return e;var n=[],r=e.replace(/\033\[(\d+)m/g,(function(e,t){var r=o[t];if(r)return~n.indexOf(t)?(n.pop(),"</span>"):(n.push(t),"<"===r[0]?r:'<span style="'+r+';">');var i=a[t];return i?(n.pop(),i):""})),i=n.length;return i>0&&(r+=Array(i+1).join("</span>")),r}function s(e){for(var t in o[0]="font-weight:normal;opacity:1;color:#"+e.reset[0]+";background:#"+e.reset[1],o[7]="color:#"+e.reset[1]+";background:#"+e.reset[0],o[90]="color:#"+e.darkgrey,r){var n=e[r[t]]||"000";o[t]="color:#"+n,t=parseInt(t),o[(t+10).toString()]="background:#"+n}}[0,21,22,27,28,39,49].forEach((function(e){a[e]="</span>"})),i.setColors=function(e){if("object"!=typeof e)throw new Error("`colors` parameter must be an Object.");var t={};for(var r in n){var o=e.hasOwnProperty(r)?e[r]:null;if(o){if("reset"===r){if("string"==typeof o&&(o=[o]),!Array.isArray(o)||0===o.length||o.some((function(e){return"string"!=typeof e})))throw new Error("The value of `"+r+"` property must be an Array and each item could only be a hex string, e.g.: FF0000");var a=n[r];o[0]||(o[0]=a[0]),1!==o.length&&o[1]||(o=[o[0]]).push(a[1]),o=o.slice(0,2)}else if("string"!=typeof o)throw new Error("The value of `"+r+"` property must be a hex string, e.g.: FF0000");t[r]=o}else t[r]=n[r]}s(t)},i.reset=function(){s(n)},i.tags={},Object.defineProperty?(Object.defineProperty(i.tags,"open",{get:function(){return o}}),Object.defineProperty(i.tags,"close",{get:function(){return a}})):(i.tags.open=o,i.tags.close=a),i.reset()},"../node_modules/babel-loader/lib/index.js??clonedRuleSet-1[0].rules[0].use!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=script&lang=js&":function(e,t,n){"use strict";n.r(t);var r=n("../node_modules/vue/dist/vue.runtime.esm.js"),o=n("./docs/UnicornLog.vue"),a=new r.default;Object.defineProperties(r.default.prototype,{$bus:{get:function(){return a}}}),t.default={name:"App",components:{UnicornLog:o.default}}},"../node_modules/babel-loader/lib/index.js??clonedRuleSet-1[0].rules[0].use!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/Nav.vue?vue&type=script&lang=js&":function(e,t,n){"use strict";n.r(t),t.default={name:"Nav",data:function(){return{links:{github:"https://github.com/webdevnerdstuff/vue-unicorn-log",npm:"https://github.com/webdevnerdstuff/vue-unicorn-log"}}}}},"../node_modules/babel-loader/lib/index.js??clonedRuleSet-1[0].rules[0].use!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/Arrays.vue?vue&type=script&lang=js&":function(e,t,n){"use strict";n.r(t);var r=n("../node_modules/vue/dist/vue.runtime.esm.js"),o=n("./plugins/UnicornLog.js"),a=n("../node_modules/vue-code-highlight/dist/vue-code-highlight.esm.js");r.default.use(o.default),t.default={name:"ArraysExample",components:{VueCodeHighlight:a.component},data:function(){return{}},methods:{simpleExample:function(){this.$unicornLog({text:"Hello World",array:["foo","bar"]})},objectArray:function(){this.$unicornLog({text:"Hello World",array:[{foo:"foo "},{bar:"bar "}]})},arraySpreadOperator:function(){this.$unicornLog({text:"Hello World",array:[].concat(["foo"],["bar"])})}}}},"../node_modules/babel-loader/lib/index.js??clonedRuleSet-1[0].rules[0].use!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/Disabled.vue?vue&type=script&lang=js&":function(e,t,n){"use strict";n.r(t);var r=n("../node_modules/vue/dist/vue.runtime.esm.js"),o=n("./plugins/UnicornLog.js"),a=n("../node_modules/vue-code-highlight/dist/vue-code-highlight.esm.js");r.default.use(o.default),t.default={name:"DisabledExample",components:{VueCodeHighlight:a.component},data:function(){return{isDisabled:!0}},methods:{simpleExample:function(){this.$unicornLog({text:"Hello World",disabled:this.isDisabled})}}}},"../node_modules/babel-loader/lib/index.js??clonedRuleSet-1[0].rules[0].use!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/LogPrefix.vue?vue&type=script&lang=js&":function(e,t,n){"use strict";n.r(t);var r=n("../node_modules/vue/dist/vue.runtime.esm.js"),o=n("./plugins/UnicornLog.js"),a=n("../node_modules/vue-code-highlight/dist/vue-code-highlight.esm.js");r.default.use(o.default),t.default={name:"LogPrefixExample",props:{isNameOption:{type:Boolean,default:!1}},components:{VueCodeHighlight:a.component},data:function(){return{logPrefix:"[Bunnies]:",withName:!0}},methods:{exampleName:function(){this.$unicornLog({text:"Hello World",logPrefix:this.withName,name:this.isNameOption?"Susan":"Bob"})},exampleNameDefault:function(){this.$unicornLog({text:"Hello World",logPrefix:this.withName})},simpleExample:function(){this.$unicornLog({text:"Hello World",logPrefix:this.logPrefix})}}}},"../node_modules/babel-loader/lib/index.js??clonedRuleSet-1[0].rules[0].use!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/Magical.vue?vue&type=script&lang=js&":function(e,t,n){"use strict";n.r(t);var r=n("../node_modules/vue/dist/vue.runtime.esm.js"),o=n("./plugins/UnicornLog.js"),a=n("../node_modules/vue-code-highlight/dist/vue-code-highlight.esm.js");r.default.use(o.default),t.default={name:"MagicalExample",components:{VueCodeHighlight:a.component},data:function(){return{magical:!0}},methods:{simpleExample:function(){this.$unicornLog({text:"Hello World",magical:this.magical})}}}},"../node_modules/babel-loader/lib/index.js??clonedRuleSet-1[0].rules[0].use!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/Objects.vue?vue&type=script&lang=js&":function(e,t,n){"use strict";n.r(t);var r=n("../node_modules/vue/dist/vue.runtime.esm.js"),o=n("./plugins/UnicornLog.js"),a=n("../node_modules/vue-code-highlight/dist/vue-code-highlight.esm.js");function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}r.default.use(o.default),t.default={name:"ObjectsExample",components:{VueCodeHighlight:a.component},data:function(){return{}},methods:{simpleExample:function(){this.$unicornLog({text:"Hello World",objects:{foo:"bar"}})},multipleObjects:function(){this.$unicornLog({text:"Hello World",objects:{foo:{foo:"foo "},bar:{bar:"bar "}}})},objectSpreadOperator:function(){this.$unicornLog({text:"Hello World",objects:s(s({},{foo:"foo"}),{bar:"bar"})})}}}},"../node_modules/babel-loader/lib/index.js??clonedRuleSet-1[0].rules[0].use!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/Simple.vue?vue&type=script&lang=js&":function(e,t,n){"use strict";n.r(t);var r=n("../node_modules/vue/dist/vue.runtime.esm.js"),o=n("./plugins/UnicornLog.js"),a=n("../node_modules/vue-code-highlight/dist/vue-code-highlight.esm.js");r.default.use(o.default),t.default={name:"SimpleExample",components:{VueCodeHighlight:a.component},data:function(){return{}},methods:{simpleExample:function(){this.$unicornLog()}}}},"../node_modules/babel-loader/lib/index.js??clonedRuleSet-1[0].rules[0].use!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/Styles.vue?vue&type=script&lang=js&":function(e,t,n){"use strict";n.r(t);var r=n("../node_modules/vue/dist/vue.runtime.esm.js"),o=n("./plugins/UnicornLog.js"),a=n("../node_modules/vue-code-highlight/dist/vue-code-highlight.esm.js");r.default.use(o.default),t.default={name:"StylesExample",components:{VueCodeHighlight:a.component},data:function(){return{defaultStyles:"color: DeepPink; font-size: 2rem;",magicalWord:"unicorn",magicalWords:["magic","magical","prism","psychedelic","rainbow","trippy","unicorn"]}},methods:{arrayExample:function(){this.$unicornLog({text:"Hello World",styles:["background: black","border: 1px dashed magenta","color: magenta","font-family: monospace","font-size: 2em","padding: 10px"]})},simpleExample:function(){this.$unicornLog({text:"Hello World",styles:this.defaultStyles})},wordExample:function(){this.$unicornLog({text:"Using the word ".concat(this.magicalWord),styles:this.magicalWord})}}}},"../node_modules/babel-loader/lib/index.js??clonedRuleSet-1[0].rules[0].use!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/Text.vue?vue&type=script&lang=js&":function(e,t,n){"use strict";n.r(t);var r=n("../node_modules/vue/dist/vue.runtime.esm.js"),o=n("./plugins/UnicornLog.js"),a=n("../node_modules/vue-code-highlight/dist/vue-code-highlight.esm.js");r.default.use(o.default),t.default={name:"TextExample",components:{VueCodeHighlight:a.component},data:function(){return{text:"Hello World"}},methods:{simpleExample:function(){return""!==this.text?(this.$unicornLog({text:this.text}),!1):(this.$unicornLog(),!1)}}}},"../node_modules/babel-loader/lib/index.js??clonedRuleSet-1[0].rules[0].use!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/Type.vue?vue&type=script&lang=js&":function(e,t,n){"use strict";n.r(t);var r=n("../node_modules/vue/dist/vue.runtime.esm.js"),o=n("./plugins/UnicornLog.js"),a=n("../node_modules/vue-code-highlight/dist/vue-code-highlight.esm.js");r.default.use(o.default),t.default={name:"TypeExample",components:{VueCodeHighlight:a.component},data:function(){return{logNote:"",logType:"log",types:["clear","debug","dir","error","group","groupCollapsed","groupEnd","info","log","table","trace","warn"]}},methods:{checkType:function(){this.logNote="";var e="\n\t\t\t".concat('\n\t\t\t\t<svg xmlns="http://www.w3.org/2000/svg" style="display: none;">\n\t\t\t\t\t<symbol id="info-fill" fill="currentColor" viewBox="0 0 16 16">\n\t\t\t\t\t\t<path d="M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16zm.93-9.412-1 4.705c-.07.34.029.533.304.533.194 0 .487-.07.686-.246l-.088.416c-.287.346-.92.598-1.465.598-.703 0-1.002-.422-.808-1.319l.738-3.468c.064-.293.006-.399-.287-.47l-.451-.081.082-.381 2.29-.287zM8 5.5a1 1 0 1 1 0-2 1 1 0 0 1 0 2z"/>\n\t\t\t\t\t</symbol>\n\t\t\t\t</svg>\n\t\t\t','\n\t\t\t <svg class="bi flex-shrink-0 me-2" width="24" height="24" role="img" aria-label="Info:"><use xlink:href="#info-fill"></use></svg>\n\t\t\t');return"dir"===this.logType||"table"===this.logType?(this.logNote="".concat(e,"<div>Console method <code>").concat(this.logType,"</code> will work, but does not support colors.</div>"),!1):"groupEnd"===this.logType&&(this.logNote="".concat(e,"<div><code>groupEnd</code> only works when used with <code>group</code> or <code>groupCollapsed</code><div>"),!1)},simpleExample:function(){return"dir"===this.logType?(this.$unicornLog({text:"Hello World",type:"dir",objects:{foo:"bar"}}),!1):"table"===this.logType||"debug"===this.logType?(this.$unicornLog({text:"Hello World",type:this.logType,array:[{foo:"foo"},{foo:"bar"}]}),!1):"group"===this.logType||"groupCollapsed"===this.logType?(this.$unicornLog({text:"".concat(this.logType),type:this.logType}),this.$unicornLog({text:"Foo",type:"log"}),this.$unicornLog({text:"Bar",type:"log"}),this.$unicornLog({type:"groupEnd",array:[{foo:"foo"},{foo:"bar"}]}),!1):(this.$unicornLog({text:"Hello World",type:this.logType}),!1)}}}},"../node_modules/babel-loader/lib/index.js??clonedRuleSet-1[0].rules[0].use!../node_modules/vue-loader/lib/index.js??vue-loader-options!./docs/UnicornLog.vue?vue&type=script&lang=js&":function(e,t,n){"use strict";n.r(t);var r=n("../node_modules/vue/dist/vue.runtime.esm.js"),o=n("./components/Nav.vue"),a=n("./components/examples/Arrays.vue"),i=n("./components/examples/Disabled.vue"),s=n("./components/examples/LogPrefix.vue"),l=n("./components/examples/Magical.vue"),c=n("./components/examples/Objects.vue"),u=n("./components/examples/Simple.vue"),d=n("./components/examples/Styles.vue"),p=n("./components/examples/Text.vue"),f=n("./components/examples/Type.vue"),v=n("./plugins/UnicornLog.js"),m=n("../node_modules/vue-code-highlight/dist/vue-code-highlight.esm.js");function g(e){return function(e){if(Array.isArray(e))return h(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return h(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return h(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function h(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}r.default.use(v.default),t.default={name:"UnicornLog",props:{},components:{ArraysExample:a.default,DisabledExample:i.default,LogPrefixExample:s.default,MagicalExample:l.default,Nav:o.default,ObjectsExamples:c.default,SimpleExample:u.default,StylesExample:d.default,TextExample:p.default,TypeExample:f.default,VueCodeHighlight:m.component},data:function(){return{copy:{array:"Used to include an array in the log.",defaultStyles:"Used to adjust the default styles.",disabled:"Disables the output of the log in the console. This works best when using an environment to conditionally set so it \t\t\t\t\t\t\t\t\t\twill log in development, but not on the production site.",logPrefix:"Prepends a string to to the output.",magical:"Adds a magical style to the output.",object:"Used to include objects in the log.",styles:"Sets the styles for the log.",text:"Used to include a string in the log.",type:"Specifies which console method should be used."},options:{boolean:'<span class="boolean-style">true<br />false</span>',styles:'<a href="https://developer.mozilla.org/en-US/docs/Web/API/console#styling_console_output" target="_blank"\t\t\t\t\t\t\t\t\t\t\t>Styling Console Output</a>',type:"\n\t\t\t\tclear\n\t\t\t\t<br />\n\t\t\t\tdebug\n\t\t\t\t<br />\n\t\t\t\tdir\n\t\t\t\t<br />\n\t\t\t\terror\n\t\t\t\t<br />\n\t\t\t\tgroup\n\t\t\t\t<br />\n\t\t\t\tgroupCollapsed\n\t\t\t\t<br />\n\t\t\t\tgroupEnd\n\t\t\t\t<br />\n\t\t\t\tinfo\n\t\t\t\t<br />\n\t\t\t\tlog\n\t\t\t\t<br />\n\t\t\t\ttable\n\t\t\t\t<br />\n\t\t\t\ttrace\n\t\t\t\t<br />\n\t\t\t\twarn\n\t\t\t"},rainbowLinearGradient:"linear-gradient(to right,\n\t\t\thsl(0, 100%, 50%),\n\t\t\thsl(39, 100%, 50%),\n\t\t\thsl(60, 100%, 50%),\n\t\t\thsl(120, 100%, 50%),\n\t\t\thsl(180, 100%, 50%),\n\t\t\thsl(240, 100%, 50%),\n\t\t\thsl(300, 100%, 50%),\n\t\t\thsl(360, 100%, 50%)\n\t\t)",testArrays:[["foo","bar"],["bar","foo"]],testObjects:[{foo:"foo",bar:"bar"},{fooTwo:"fooTwo",barTwo:"barTwo"}]}},mounted:function(){this.welcomeLog()},methods:{testingLogs:function(){var e=this.testArrays[0],t=this.testArrays[1],n=this.testObjects[0],r=this.testObjects[1];this.$unicornLog({array:[].concat(g(e),g(t),[["foobar"]]),logPrefix:!0,objects:{testObj1:n,testObj2:r,testObj3:{barThree:"barThree",fooThree:"fooThree"}},text:"Testing Log",type:"log"})},welcomeLog:function(){this.$unicornLog({text:"Vue Unicorn Log... It's magical!",styles:["background: ".concat(this.rainbowLinearGradient),"color: #f7f7f7","display: block",'font-family: "Helvetica", "Arial"',"font-size: 25px","font-weight: bold","margin: 5px 0","padding: 15px","text-align: center","text-shadow: 1px 1px 2px #000"],type:"log"})}}}},"./plugins/UnicornLog.js":function(e,t,n){"use strict";n.r(t);var r=n("./plugins/UnicornLogCore.js");function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var s={install:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e;e.prototype.$unicornLog||e.prototype.$uniLog||(this.options=a(a({},this.options),t),n.prototype.$unicornLog=function(t){return r.default.init(e,s.options,t),!1},n.prototype.$uniLog=function(t){return r.default.init(e,s.options,t),!1})},options:{defaultStyles:{},disabled:!1,logPrefix:!1,styles:"",type:"log"}};t.default=s},"./plugins/UnicornLogCore.js":function(e,t,n){"use strict";function r(e){return function(e){if(Array.isArray(e))return o(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return o(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return o(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function o(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function a(e){return a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a(e)}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}n.r(t);var c="linear-gradient(to right,\n\thsl(0, 100%, 50%),\n\thsl(39, 100%, 50%),\n\thsl(60, 100%, 50%),\n\thsl(120, 100%, 50%),\n\thsl(180, 100%, 50%),\n\thsl(240, 100%, 50%),\n\thsl(300, 100%, 50%),\n\thsl(360, 100%, 50%)\n)",u={errors:0,logOptions:{},name:"UnicornLog",output:null,pluginOptions:{},types:["clear","count","countReset","debug","dir","error","group","groupCollapsed","groupEnd","info","log","table","time","timeEnd","timeLog","trace","warn"],defaultStyles:{log:["background-color: black","border-image: ".concat(c," 1"),"border-style: solid","border-width: 4px","color: #fff","font-weight: normal","padding: 8px"],info:["background-color: hsla(225, 100%, 8%, 1)","box-shadow: 999px 0 0 hsla(225, 100%, 8%, 1)","color: hsla(225, 100%, 85%, 1)","display: block","padding: 2px"],goNuts:["background: ".concat(c),"color: #f7f7f7","display: block",'font-family: "Helvetica", "Arial"',"font-size: 15px","font-weight: bold","margin: 5px 0","padding: 10px","text-shadow: 1px 1px 2px #000"]},magicalStyleNames:["magic","magical","prism","psychedelic","rainbow","trippy","unicorn"],defaultOptions:{array:[],defaultStyles:{},disabled:!0,logPrefix:!1,magical:!1,name:"[UnicornLog]:",objects:{},styles:"",text:"🦄",type:"log"},init:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return!t.disabled&&!n.disabled&&(this.pluginOptions=t,this.logOptions=s(s(s({},this.defaultOptions),this.pluginOptions),n),this.defaultStyles=s(s(s({},this.defaultStyles),this.pluginOptions.defaultStyles),n.defaultStyles),Object.values(this.validateOptions).map((function(e){return"function"==typeof e&&e.call()})),Object.values(this.build).map((function(e){return"function"==typeof e&&e.call()})),this.errors||this.consoleOutput(this.logOptions.type),!1)},validateOptions:{type:function(){var e=u.logOptions.type;return!u.types.includes(e)&&(u.errors+=1,"dirXml"===e?(u.logger("console.dir() is not supported console method.","warn"),!1):(u.logger("console.".concat(e,"() is not supported at this time or is not a valid console method."),"warn"),!1))},styles:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:u.logOptions.styles;e instanceof Array||"object"!==a(e)&&!Number.isInteger(e)||u.logger('The "styles" option is not a String or an Array.',"error")},logPrefix:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:u.logOptions.logPrefix;("object"===a(e)||e instanceof Boolean)&&u.logger('The "logPrefix" option is not a string or boolean.',"error")},text:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:u.logOptions.text;"string"!=typeof e&&u.logger('The "text" option is not a string.',"error")},objects:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:u.logOptions.objects;(e instanceof Array||"string"==typeof e||Number.isInteger(e))&&u.logger('The "objects" option is not an object.',"error")},array:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:u.logOptions.array;e instanceof Array&&"string"!=typeof e&&!Number.isInteger(e)||u.logger('The "array" option is not an array.',"error")}},build:{prefix:function(){var e=u.logOptions;e.logPrefix&&("string"==typeof e.logPrefix?e.text="".concat(e.logPrefix," ").concat(e.text):e.text="".concat(e.name," ").concat(e.text))},styles:function(){var e=u.logOptions,t=e.styles;t=!1===t?"":"log"!==e.type&&"info"!==e.type||!u.magicalStyleNames.includes(e.styles)&&!e.magical?""!==t&&!0!==t||"info"!==e.type?t||u.defaultStyles.log.join(";"):u.defaultStyles.info.join(";"):u.defaultStyles.goNuts.join(";"),Array.isArray(t)&&(t=t.join(";")),e.styles=t},output:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:u.logOptions,t=["%c%s",e.styles];e.text&&t.push(e.text),e.array.length&&t.push(e.array),Object.keys(e.objects).length&&t.push(e.objects),u.output=t}},consoleDir:function(){var e={};return Object.keys(this.logOptions.objects).length&&(Object.keys(this.logOptions.array).length?e.objects=this.logOptions.objects:Object.assign(e,this.logOptions.objects)),Object.keys(this.logOptions.array).length&&(Object.keys(this.logOptions.objects).length?e.array=this.logOptions.array:Object.assign(e,this.logOptions.array)),Object.keys(e).length?(u.logger("console.dir() does not support colors.","info"),e):u.logger('console.dir() expects the "objects" and/or array option value to be set.',"error")},consoleTable:function(){return u.logger("console.table() does not support colors.","info"),this.logOptions.array},consoleMethodNotSupported:function(e){this.errors+=1,u.logger("console.".concat(e,"() does not support colors."),"info")},consoleOutput:function(e){var t;("dir"===e&&(this.output=[this.consoleDir()]),"table"===e&&(this.output=[this.consoleTable()]),"count"!==e&&"countReset"!==e&&"time"!==e&&"timeEnd"!==e&&"timeLog"!==e||(this.output=[this.consoleMethodNotSupported(e)]),this.errors)||(t=console)[e].apply(t,r(this.output))},logger:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"An error has occurred.",t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"log",n=t.charAt(0).toUpperCase()+t.slice(1),r="";return"error"===t&&(this.errors+=1),"info"===t&&(r=this.defaultStyles.info.join(";")),console[t]("%c%s",r,"[".concat(u.name," ").concat(n,"]: ").concat(e)),!1}};t.default=u},"../node_modules/css-loader/dist/cjs.js!../node_modules/vue-code-highlight/themes/prism-tomorrow.css":function(e,t,n){"use strict";n.r(t);var r=n("../node_modules/css-loader/dist/runtime/sourceMaps.js"),o=n.n(r),a=n("../node_modules/css-loader/dist/runtime/api.js"),i=n.n(a)()(o());i.push([e.id,'/**\n * prism.js tomorrow night eighties for JavaScript, CoffeeScript, CSS and HTML\n * Based on https://github.com/chriskempson/tomorrow-theme\n * @author Rose Pritchard\n */\n\ncode[class*="language-"],\npre[class*="language-"] {\n\tcolor: #ccc;\n\tbackground: none;\n\tfont-family: Consolas, Monaco, \'Andale Mono\', \'Ubuntu Mono\', monospace;\n\ttext-align: left;\n\twhite-space: pre;\n\tword-spacing: normal;\n\tword-break: normal;\n\tword-wrap: normal;\n\tline-height: 1.5;\n\n\t-moz-tab-size: 4;\n\t-o-tab-size: 4;\n\ttab-size: 4;\n\n\t-webkit-hyphens: none;\n\t-moz-hyphens: none;\n\t-ms-hyphens: none;\n\thyphens: none;\n\n}\n\n/* Code blocks */\npre[class*="language-"] {\n\tpadding: 1em;\n\tmargin: .5em 0;\n\toverflow: auto;\n}\n\n:not(pre) > code[class*="language-"],\npre[class*="language-"] {\n\tbackground: #2d2d2d;\n}\n\n/* Inline code */\n:not(pre) > code[class*="language-"] {\n\tpadding: .1em;\n\tborder-radius: .3em;\n\twhite-space: normal;\n}\n\n.token.comment,\n.token.block-comment,\n.token.prolog,\n.token.doctype,\n.token.cdata {\n\tcolor: #999;\n}\n\n.token.punctuation {\n\tcolor: #ccc;\n}\n\n.token.tag,\n.token.attr-name,\n.token.namespace,\n.token.deleted {\n\tcolor: #e2777a;\n}\n\n.token.function-name {\n\tcolor: #6196cc;\n}\n\n.token.boolean,\n.token.number,\n.token.function {\n\tcolor: #f08d49;\n}\n\n.token.property,\n.token.class-name,\n.token.constant,\n.token.symbol {\n\tcolor: #f8c555;\n}\n\n.token.selector,\n.token.important,\n.token.atrule,\n.token.keyword,\n.token.builtin {\n\tcolor: #cc99cd;\n}\n\n.token.string,\n.token.char,\n.token.attr-value,\n.token.regex,\n.token.variable {\n\tcolor: #7ec699;\n}\n\n.token.operator,\n.token.entity,\n.token.url {\n\tcolor: #67cdcc;\n}\n\n.token.important,\n.token.bold {\n\tfont-weight: bold;\n}\n.token.italic {\n\tfont-style: italic;\n}\n\n.token.entity {\n\tcursor: help;\n}\n\n.token.inserted {\n\tcolor: green;\n}\n',"",{version:3,sources:["webpack://./../node_modules/vue-code-highlight/themes/prism-tomorrow.css"],names:[],mappings:"AAAA;;;;EAIE;;AAEF;;CAEC,WAAW;CACX,gBAAgB;CAChB,sEAAsE;CACtE,gBAAgB;CAChB,gBAAgB;CAChB,oBAAoB;CACpB,kBAAkB;CAClB,iBAAiB;CACjB,gBAAgB;;CAEhB,gBAAgB;CAChB,cAAc;CACd,WAAW;;CAEX,qBAAqB;CACrB,kBAAkB;CAClB,iBAAiB;CACjB,aAAa;;AAEd;;AAEA,gBAAgB;AAChB;CACC,YAAY;CACZ,cAAc;CACd,cAAc;AACf;;AAEA;;CAEC,mBAAmB;AACpB;;AAEA,gBAAgB;AAChB;CACC,aAAa;CACb,mBAAmB;CACnB,mBAAmB;AACpB;;AAEA;;;;;CAKC,WAAW;AACZ;;AAEA;CACC,WAAW;AACZ;;AAEA;;;;CAIC,cAAc;AACf;;AAEA;CACC,cAAc;AACf;;AAEA;;;CAGC,cAAc;AACf;;AAEA;;;;CAIC,cAAc;AACf;;AAEA;;;;;CAKC,cAAc;AACf;;AAEA;;;;;CAKC,cAAc;AACf;;AAEA;;;CAGC,cAAc;AACf;;AAEA;;CAEC,iBAAiB;AAClB;AACA;CACC,kBAAkB;AACnB;;AAEA;CACC,YAAY;AACb;;AAEA;CACC,YAAY;AACb",sourcesContent:['/**\n * prism.js tomorrow night eighties for JavaScript, CoffeeScript, CSS and HTML\n * Based on https://github.com/chriskempson/tomorrow-theme\n * @author Rose Pritchard\n */\n\ncode[class*="language-"],\npre[class*="language-"] {\n\tcolor: #ccc;\n\tbackground: none;\n\tfont-family: Consolas, Monaco, \'Andale Mono\', \'Ubuntu Mono\', monospace;\n\ttext-align: left;\n\twhite-space: pre;\n\tword-spacing: normal;\n\tword-break: normal;\n\tword-wrap: normal;\n\tline-height: 1.5;\n\n\t-moz-tab-size: 4;\n\t-o-tab-size: 4;\n\ttab-size: 4;\n\n\t-webkit-hyphens: none;\n\t-moz-hyphens: none;\n\t-ms-hyphens: none;\n\thyphens: none;\n\n}\n\n/* Code blocks */\npre[class*="language-"] {\n\tpadding: 1em;\n\tmargin: .5em 0;\n\toverflow: auto;\n}\n\n:not(pre) > code[class*="language-"],\npre[class*="language-"] {\n\tbackground: #2d2d2d;\n}\n\n/* Inline code */\n:not(pre) > code[class*="language-"] {\n\tpadding: .1em;\n\tborder-radius: .3em;\n\twhite-space: normal;\n}\n\n.token.comment,\n.token.block-comment,\n.token.prolog,\n.token.doctype,\n.token.cdata {\n\tcolor: #999;\n}\n\n.token.punctuation {\n\tcolor: #ccc;\n}\n\n.token.tag,\n.token.attr-name,\n.token.namespace,\n.token.deleted {\n\tcolor: #e2777a;\n}\n\n.token.function-name {\n\tcolor: #6196cc;\n}\n\n.token.boolean,\n.token.number,\n.token.function {\n\tcolor: #f08d49;\n}\n\n.token.property,\n.token.class-name,\n.token.constant,\n.token.symbol {\n\tcolor: #f8c555;\n}\n\n.token.selector,\n.token.important,\n.token.atrule,\n.token.keyword,\n.token.builtin {\n\tcolor: #cc99cd;\n}\n\n.token.string,\n.token.char,\n.token.attr-value,\n.token.regex,\n.token.variable {\n\tcolor: #7ec699;\n}\n\n.token.operator,\n.token.entity,\n.token.url {\n\tcolor: #67cdcc;\n}\n\n.token.important,\n.token.bold {\n\tfont-weight: bold;\n}\n.token.italic {\n\tfont-style: italic;\n}\n\n.token.entity {\n\tcursor: help;\n}\n\n.token.inserted {\n\tcolor: green;\n}\n'],sourceRoot:""}]),t.default=i},"../node_modules/css-loader/dist/cjs.js!../node_modules/vue-code-highlight/themes/window.css":function(e,t,n){"use strict";n.r(t);var r=n("../node_modules/css-loader/dist/runtime/sourceMaps.js"),o=n.n(r),a=n("../node_modules/css-loader/dist/runtime/api.js"),i=n.n(a),s=n("../node_modules/css-loader/dist/runtime/getUrl.js"),l=n.n(s),c=new URL(n('data:image/svg+xml;utf8, <svg xmlns="http://www.w3.org/2000/svg" width="54" height="14" viewBox="0 0 54 14"><g fill="none" fillRule="evenodd" transform="translate%281 1%29"><circle cx="6" cy="6" r="6" fill="%23FF5F56" stroke="%23E0443E" strokeWidth=".5" /><circle cx="26" cy="6" r="6" fill="%23FFBD2E" stroke="%23DEA123" strokeWidth=".5" /><circle cx="46" cy="6" r="6" fill="%2327C93F" stroke="%231AAB29" strokeWidth=".5" /></g></svg>'),n.b),u=i()(o()),d=l()(c);u.push([e.id,'div pre[class*="language-"] {\n  display: inline-block;\n  width: 100%;\n  padding-right: 10em;\n  padding-top: 3rem;\n  border-radius: 6px;\n  background-image: url('+d+");\n  background-repeat: no-repeat;\n  background-position: 16px 16px;\n  box-shadow: 5px 5px 15px 0px rgba(50, 50, 50, 0.75);\n}\n","",{version:3,sources:["webpack://./../node_modules/vue-code-highlight/themes/window.css"],names:[],mappings:"AAAA;EACE,qBAAqB;EACrB,WAAW;EACX,mBAAmB;EACnB,iBAAiB;EACjB,kBAAkB;EAClB,yDAAuc;EACvc,4BAA4B;EAC5B,8BAA8B;EAC9B,mDAAmD;AACrD",sourcesContent:['div pre[class*="language-"] {\n  display: inline-block;\n  width: 100%;\n  padding-right: 10em;\n  padding-top: 3rem;\n  border-radius: 6px;\n  background-image: url(\'data:image/svg+xml;utf8, <svg xmlns="http://www.w3.org/2000/svg" width="54" height="14" viewBox="0 0 54 14"><g fill="none" fillRule="evenodd" transform="translate(1 1)"><circle cx="6" cy="6" r="6" fill="%23FF5F56" stroke="%23E0443E" strokeWidth=".5" /><circle cx="26" cy="6" r="6" fill="%23FFBD2E" stroke="%23DEA123" strokeWidth=".5" /><circle cx="46" cy="6" r="6" fill="%2327C93F" stroke="%231AAB29" strokeWidth=".5" /></g></svg>\');\n  background-repeat: no-repeat;\n  background-position: 16px 16px;\n  box-shadow: 5px 5px 15px 0px rgba(50, 50, 50, 0.75);\n}\n'],sourceRoot:""}]),t.default=u},"../node_modules/css-loader/dist/cjs.js!../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../node_modules/sass-loader/dist/cjs.js??clonedRuleSet-3[0].rules[0].use[2]!../node_modules/vue-loader/lib/index.js??vue-loader-options!./docs/UnicornLog.vue?vue&type=style&index=0&lang=scss&":function(e,t,n){"use strict";n.r(t);var r=n("../node_modules/css-loader/dist/runtime/sourceMaps.js"),o=n.n(r),a=n("../node_modules/css-loader/dist/runtime/api.js"),i=n.n(a),s=n("../node_modules/css-loader/dist/cjs.js!../node_modules/vue-code-highlight/themes/prism-tomorrow.css"),l=n("../node_modules/css-loader/dist/cjs.js!../node_modules/vue-code-highlight/themes/window.css"),c=i()(o());c.i(s.default),c.i(l.default),c.push([e.id,'html {\n  scroll-padding-top: 70px;\n}\nh1 {\n  font-family: "Henny Penny", cursive;\n  font-weight: bold;\n  font-size: 3em;\n}\nh2 {\n  font-family: "Indie Flower", cursive;\n}\nh2::after {\n  content: " ";\n  background-image: linear-gradient(to right, red, #ffa600, yellow, lime, aqua, blue, fuchsia, red);\n  border-radius: 5px;\n  display: block;\n  height: 2px;\n}\n.table tbody td pre {\n  background-color: #fafafa !important;\n  border-radius: 5px;\n  padding: 1rem;\n  tab-size: 2;\n}\n.option-type {\n  color: #7b1fa3 !important;\n  font-weight: 500;\n}\n.boolean-style {\n  color: blue !important;\n  font-weight: 500;\n}\n.rainbow-text {\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n  background-clip: text;\n  background-image: linear-gradient(to right, red, #ffa600, yellow, lime, aqua, blue, fuchsia, red);\n  border-radius: 5px;\n  color: transparent;\n  display: inline-block;\n  font-weight: bold;\n  height: 100%;\n  text-shadow: 0 2px 3px rgba(255, 255, 255, 0.3), 0 -1px 2px rgba(0, 0, 0, 0.2);\n}\n.rainbow-border {\n  background-color: #000;\n  border-image: linear-gradient(to right, red, #ffa600, yellow, lime, aqua, blue, fuchsia, red) 1;\n  border-style: solid;\n  border-width: 4px;\n  padding: 2rem;\n}',"",{version:3,sources:["webpack://./docs/UnicornLog.vue","webpack://./../UnicornLog.vue"],names:[],mappings:"AAmnBA;EACC,wBAAA;AChnBD;ADmnBA;EACC,mCAAA;EACA,iBAAA;EACA,cAAA;AChnBD;ADmnBA;EACC,oCAAA;AChnBD;ADknBC;EACC,YAAA;EACA,iGA3BiB;EA4BjB,kBAAA;EACA,cAAA;EACA,WAAA;AChnBF;ADunBG;EACC,oCAAA;EACA,kBAAA;EACA,aAAA;EACA,WAAA;ACpnBJ;AD0nBA;EACC,yBAAA;EACA,gBAAA;ACvnBD;AD0nBA;EACC,sBAAA;EACA,gBAAA;ACvnBD;AD0nBA;EACC,6BAAA;EACA,oCAAA;EACA,qBAAA;EACA,iGA7DkB;EA8DlB,kBAAA;EACA,kBAAA;EACA,qBAAA;EACA,iBAAA;EACA,YAAA;EACA,8EAAA;ACvnBD;AD0nBA;EACC,sBAAA;EACA,+FAAA;EACA,mBAAA;EACA,iBAAA;EACA,aAAA;ACvnBD",sourcesContent:["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n@import 'vue-code-highlight/themes/prism-tomorrow.css';\n@import 'vue-code-highlight/themes/window.css';\n\n$rainbow-gradient: linear-gradient(\n\tto right,\n\thsl(0, 100%, 50%),\n\thsl(39, 100%, 50%),\n\thsl(60, 100%, 50%),\n\thsl(120, 100%, 50%),\n\thsl(180, 100%, 50%),\n\thsl(240, 100%, 50%),\n\thsl(300, 100%, 50%),\n\thsl(0, 100%, 50%)\n);\n\nhtml {\n\tscroll-padding-top: 70px;\n}\n\nh1 {\n\tfont-family: 'Henny Penny', cursive;\n\tfont-weight: bold;\n\tfont-size: 3em;\n}\n\nh2 {\n\tfont-family: 'Indie Flower', cursive;\n\n\t&::after {\n\t\tcontent: ' ';\n\t\tbackground-image: $rainbow-gradient;\n\t\tborder-radius: 5px;\n\t\tdisplay: block;\n\t\theight: 2px;\n\t}\n}\n\n.table {\n\ttbody {\n\t\ttd {\n\t\t\tpre {\n\t\t\t\tbackground-color: #fafafa !important;\n\t\t\t\tborder-radius: 5px;\n\t\t\t\tpadding: 1rem;\n\t\t\t\ttab-size: 2;\n\t\t\t}\n\t\t}\n\t}\n}\n\n.option-type {\n\tcolor: hsl(282, 68%, 38%) !important;\n\tfont-weight: 500;\n}\n\n.boolean-style {\n\tcolor: hsl(240, 100%, 50%) !important;\n\tfont-weight: 500;\n}\n\n.rainbow-text {\n\t-webkit-background-clip: text;\n\t-webkit-text-fill-color: transparent;\n\tbackground-clip: text;\n\tbackground-image: $rainbow-gradient;\n\tborder-radius: 5px;\n\tcolor: transparent;\n\tdisplay: inline-block;\n\tfont-weight: bold;\n\theight: 100%;\n\ttext-shadow: 0 2px 3px rgba(255, 255, 255, 0.3), 0 -1px 2px rgba(0, 0, 0, 0.2);\n}\n\n.rainbow-border {\n\tbackground-color: #000;\n\tborder-image: $rainbow-gradient 1;\n\tborder-style: solid;\n\tborder-width: 4px;\n\tpadding: 2rem;\n}\n",'@import \'vue-code-highlight/themes/prism-tomorrow.css\';\n@import \'vue-code-highlight/themes/window.css\';\nhtml {\n  scroll-padding-top: 70px;\n}\n\nh1 {\n  font-family: "Henny Penny", cursive;\n  font-weight: bold;\n  font-size: 3em;\n}\n\nh2 {\n  font-family: "Indie Flower", cursive;\n}\nh2::after {\n  content: " ";\n  background-image: linear-gradient(to right, red, #ffa600, yellow, lime, aqua, blue, fuchsia, red);\n  border-radius: 5px;\n  display: block;\n  height: 2px;\n}\n\n.table tbody td pre {\n  background-color: #fafafa !important;\n  border-radius: 5px;\n  padding: 1rem;\n  tab-size: 2;\n}\n\n.option-type {\n  color: #7b1fa3 !important;\n  font-weight: 500;\n}\n\n.boolean-style {\n  color: blue !important;\n  font-weight: 500;\n}\n\n.rainbow-text {\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n  background-clip: text;\n  background-image: linear-gradient(to right, red, #ffa600, yellow, lime, aqua, blue, fuchsia, red);\n  border-radius: 5px;\n  color: transparent;\n  display: inline-block;\n  font-weight: bold;\n  height: 100%;\n  text-shadow: 0 2px 3px rgba(255, 255, 255, 0.3), 0 -1px 2px rgba(0, 0, 0, 0.2);\n}\n\n.rainbow-border {\n  background-color: #000;\n  border-image: linear-gradient(to right, red, #ffa600, yellow, lime, aqua, blue, fuchsia, red) 1;\n  border-style: solid;\n  border-width: 4px;\n  padding: 2rem;\n}'],sourceRoot:""}]),t.default=c},"../node_modules/css-loader/dist/runtime/api.js":function(e){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(i[l]=!0)}for(var c=0;c<e.length;c++){var u=[].concat(e[c]);r&&i[u[0]]||(void 0!==a&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=a),n&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=n):u[2]=n),o&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=o):u[4]="".concat(o)),t.push(u))}},t}},"../node_modules/css-loader/dist/runtime/getUrl.js":function(e){"use strict";e.exports=function(e,t){return t||(t={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),t.hash&&(e+=t.hash),/["'() \t\n]|(%20)/.test(e)||t.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},"../node_modules/css-loader/dist/runtime/sourceMaps.js":function(e){"use strict";e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */"),i=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[t].concat(i).concat([a]).join("\n")}return[t].join("\n")}},"../node_modules/events/events.js":function(e){"use strict";var t,n="object"==typeof Reflect?Reflect:null,r=n&&"function"==typeof n.apply?n.apply:function(e,t,n){return Function.prototype.apply.call(e,t,n)};t=n&&"function"==typeof n.ownKeys?n.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var o=Number.isNaN||function(e){return e!=e};function a(){a.init.call(this)}e.exports=a,e.exports.once=function(e,t){return new Promise((function(n,r){function o(n){e.removeListener(t,a),r(n)}function a(){"function"==typeof e.removeListener&&e.removeListener("error",o),n([].slice.call(arguments))}m(e,t,a,{once:!0}),"error"!==t&&function(e,t,n){"function"==typeof e.on&&m(e,"error",t,n)}(e,o,{once:!0})}))},a.EventEmitter=a,a.prototype._events=void 0,a.prototype._eventsCount=0,a.prototype._maxListeners=void 0;var i=10;function s(e){if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e)}function l(e){return void 0===e._maxListeners?a.defaultMaxListeners:e._maxListeners}function c(e,t,n,r){var o,a,i,c;if(s(n),void 0===(a=e._events)?(a=e._events=Object.create(null),e._eventsCount=0):(void 0!==a.newListener&&(e.emit("newListener",t,n.listener?n.listener:n),a=e._events),i=a[t]),void 0===i)i=a[t]=n,++e._eventsCount;else if("function"==typeof i?i=a[t]=r?[n,i]:[i,n]:r?i.unshift(n):i.push(n),(o=l(e))>0&&i.length>o&&!i.warned){i.warned=!0;var u=new Error("Possible EventEmitter memory leak detected. "+i.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");u.name="MaxListenersExceededWarning",u.emitter=e,u.type=t,u.count=i.length,c=u,console&&console.warn&&console.warn(c)}return e}function u(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function d(e,t,n){var r={fired:!1,wrapFn:void 0,target:e,type:t,listener:n},o=u.bind(r);return o.listener=n,r.wrapFn=o,o}function p(e,t,n){var r=e._events;if(void 0===r)return[];var o=r[t];return void 0===o?[]:"function"==typeof o?n?[o.listener||o]:[o]:n?function(e){for(var t=new Array(e.length),n=0;n<t.length;++n)t[n]=e[n].listener||e[n];return t}(o):v(o,o.length)}function f(e){var t=this._events;if(void 0!==t){var n=t[e];if("function"==typeof n)return 1;if(void 0!==n)return n.length}return 0}function v(e,t){for(var n=new Array(t),r=0;r<t;++r)n[r]=e[r];return n}function m(e,t,n,r){if("function"==typeof e.on)r.once?e.once(t,n):e.on(t,n);else{if("function"!=typeof e.addEventListener)throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof e);e.addEventListener(t,(function o(a){r.once&&e.removeEventListener(t,o),n(a)}))}}Object.defineProperty(a,"defaultMaxListeners",{enumerable:!0,get:function(){return i},set:function(e){if("number"!=typeof e||e<0||o(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");i=e}}),a.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},a.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||o(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},a.prototype.getMaxListeners=function(){return l(this)},a.prototype.emit=function(e){for(var t=[],n=1;n<arguments.length;n++)t.push(arguments[n]);var o="error"===e,a=this._events;if(void 0!==a)o=o&&void 0===a.error;else if(!o)return!1;if(o){var i;if(t.length>0&&(i=t[0]),i instanceof Error)throw i;var s=new Error("Unhandled error."+(i?" ("+i.message+")":""));throw s.context=i,s}var l=a[e];if(void 0===l)return!1;if("function"==typeof l)r(l,this,t);else{var c=l.length,u=v(l,c);for(n=0;n<c;++n)r(u[n],this,t)}return!0},a.prototype.addListener=function(e,t){return c(this,e,t,!1)},a.prototype.on=a.prototype.addListener,a.prototype.prependListener=function(e,t){return c(this,e,t,!0)},a.prototype.once=function(e,t){return s(t),this.on(e,d(this,e,t)),this},a.prototype.prependOnceListener=function(e,t){return s(t),this.prependListener(e,d(this,e,t)),this},a.prototype.removeListener=function(e,t){var n,r,o,a,i;if(s(t),void 0===(r=this._events))return this;if(void 0===(n=r[e]))return this;if(n===t||n.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete r[e],r.removeListener&&this.emit("removeListener",e,n.listener||t));else if("function"!=typeof n){for(o=-1,a=n.length-1;a>=0;a--)if(n[a]===t||n[a].listener===t){i=n[a].listener,o=a;break}if(o<0)return this;0===o?n.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(n,o),1===n.length&&(r[e]=n[0]),void 0!==r.removeListener&&this.emit("removeListener",e,i||t)}return this},a.prototype.off=a.prototype.removeListener,a.prototype.removeAllListeners=function(e){var t,n,r;if(void 0===(n=this._events))return this;if(void 0===n.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==n[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete n[e]),this;if(0===arguments.length){var o,a=Object.keys(n);for(r=0;r<a.length;++r)"removeListener"!==(o=a[r])&&this.removeAllListeners(o);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=n[e]))this.removeListener(e,t);else if(void 0!==t)for(r=t.length-1;r>=0;r--)this.removeListener(e,t[r]);return this},a.prototype.listeners=function(e){return p(this,e,!0)},a.prototype.rawListeners=function(e){return p(this,e,!1)},a.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):f.call(e,t)},a.prototype.listenerCount=f,a.prototype.eventNames=function(){return this._eventsCount>0?t(this._events):[]}},"../node_modules/html-entities/lib/index.js":function(e,t,n){"use strict";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},r.apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0});var o=n("../node_modules/html-entities/lib/named-references.js"),a=n("../node_modules/html-entities/lib/numeric-unicode-map.js"),i=n("../node_modules/html-entities/lib/surrogate-pairs.js"),s=r(r({},o.namedReferences),{all:o.namedReferences.html5}),l={specialChars:/[<>'"&]/g,nonAscii:/(?:[<>'"&\u0080-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/g,nonAsciiPrintable:/(?:[<>'"&\x01-\x08\x11-\x15\x17-\x1F\x7f-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/g,extensive:/(?:[\x01-\x0c\x0e-\x1f\x21-\x2c\x2e-\x2f\x3a-\x40\x5b-\x60\x7b-\x7d\x7f-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/g},c={mode:"specialChars",level:"all",numeric:"decimal"};t.encode=function(e,t){var n=void 0===(u=(a=void 0===t?c:t).mode)?"specialChars":u,r=void 0===(v=a.numeric)?"decimal":v,o=a.level;if(!e)return"";var a,u,d=l[n],p=s[void 0===o?"all":o].characters,f="hexadecimal"===r;if(d.lastIndex=0,a=d.exec(e)){u="";var v=0;do{v!==a.index&&(u+=e.substring(v,a.index));var m=p[o=a[0]];if(!m){var g=o.length>1?i.getCodePoint(o,0):o.charCodeAt(0);m=(f?"&#x"+g.toString(16):"&#"+g)+";"}u+=m,v=a.index+o.length}while(a=d.exec(e));v!==e.length&&(u+=e.substring(v))}else u=e;return u};var u={scope:"body",level:"all"},d=/&(?:#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+);/g,p=/&(?:#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+)[;=]?/g,f={xml:{strict:d,attribute:p,body:o.bodyRegExps.xml},html4:{strict:d,attribute:p,body:o.bodyRegExps.html4},html5:{strict:d,attribute:p,body:o.bodyRegExps.html5}},v=r(r({},f),{all:f.html5}),m=String.fromCharCode,g=m(65533),h={level:"all"};t.decodeEntity=function(e,t){var n=void 0===(r=(void 0===t?h:t).level)?"all":r;if(!e)return"";var r=e,o=(e[e.length-1],s[n].entities[e]);if(o)r=o;else if("&"===e[0]&&"#"===e[1]){var l=e[2],c="x"==l||"X"==l?parseInt(e.substr(3),16):parseInt(e.substr(2));r=c>=1114111?g:c>65535?i.fromCodePoint(c):m(a.numericUnicodeMap[c]||c)}return r},t.decode=function(e,t){var n=void 0===t?u:t,r=n.level,o=void 0===r?"all":r,l=n.scope,c=void 0===l?"xml"===o?"strict":"body":l;if(!e)return"";var d=v[o][c],p=s[o].entities,f="attribute"===c,h="strict"===c;d.lastIndex=0;var b,y=d.exec(e);if(y){b="";var _=0;do{_!==y.index&&(b+=e.substring(_,y.index));var x=y[0],w=x,A=x[x.length-1];if(f&&"="===A)w=x;else if(h&&";"!==A)w=x;else{var C=p[x];if(C)w=C;else if("&"===x[0]&&"#"===x[1]){var k=x[2],j="x"==k||"X"==k?parseInt(x.substr(3),16):parseInt(x.substr(2));w=j>=1114111?g:j>65535?i.fromCodePoint(j):m(a.numericUnicodeMap[j]||j)}}b+=w,_=y.index+x.length}while(y=d.exec(e));_!==e.length&&(b+=e.substring(_))}else b=e;return b}},"../node_modules/html-entities/lib/named-references.js":function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.bodyRegExps={xml:/&(?:#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+);?/g,html4:/&(?:nbsp|iexcl|cent|pound|curren|yen|brvbar|sect|uml|copy|ordf|laquo|not|shy|reg|macr|deg|plusmn|sup2|sup3|acute|micro|para|middot|cedil|sup1|ordm|raquo|frac14|frac12|frac34|iquest|Agrave|Aacute|Acirc|Atilde|Auml|Aring|AElig|Ccedil|Egrave|Eacute|Ecirc|Euml|Igrave|Iacute|Icirc|Iuml|ETH|Ntilde|Ograve|Oacute|Ocirc|Otilde|Ouml|times|Oslash|Ugrave|Uacute|Ucirc|Uuml|Yacute|THORN|szlig|agrave|aacute|acirc|atilde|auml|aring|aelig|ccedil|egrave|eacute|ecirc|euml|igrave|iacute|icirc|iuml|eth|ntilde|ograve|oacute|ocirc|otilde|ouml|divide|oslash|ugrave|uacute|ucirc|uuml|yacute|thorn|yuml|quot|amp|lt|gt|#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+);?/g,html5:/&(?:AElig|AMP|Aacute|Acirc|Agrave|Aring|Atilde|Auml|COPY|Ccedil|ETH|Eacute|Ecirc|Egrave|Euml|GT|Iacute|Icirc|Igrave|Iuml|LT|Ntilde|Oacute|Ocirc|Ograve|Oslash|Otilde|Ouml|QUOT|REG|THORN|Uacute|Ucirc|Ugrave|Uuml|Yacute|aacute|acirc|acute|aelig|agrave|amp|aring|atilde|auml|brvbar|ccedil|cedil|cent|copy|curren|deg|divide|eacute|ecirc|egrave|eth|euml|frac12|frac14|frac34|gt|iacute|icirc|iexcl|igrave|iquest|iuml|laquo|lt|macr|micro|middot|nbsp|not|ntilde|oacute|ocirc|ograve|ordf|ordm|oslash|otilde|ouml|para|plusmn|pound|quot|raquo|reg|sect|shy|sup1|sup2|sup3|szlig|thorn|times|uacute|ucirc|ugrave|uml|uuml|yacute|yen|yuml|#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+);?/g},t.namedReferences={xml:{entities:{"&lt;":"<","&gt;":">","&quot;":'"',"&apos;":"'","&amp;":"&"},characters:{"<":"&lt;",">":"&gt;",'"':"&quot;","'":"&apos;","&":"&amp;"}},html4:{entities:{"&apos;":"'","&nbsp":" ","&nbsp;":" ","&iexcl":"¡","&iexcl;":"¡","&cent":"¢","&cent;":"¢","&pound":"£","&pound;":"£","&curren":"¤","&curren;":"¤","&yen":"¥","&yen;":"¥","&brvbar":"¦","&brvbar;":"¦","&sect":"§","&sect;":"§","&uml":"¨","&uml;":"¨","&copy":"©","&copy;":"©","&ordf":"ª","&ordf;":"ª","&laquo":"«","&laquo;":"«","&not":"¬","&not;":"¬","&shy":"­","&shy;":"­","&reg":"®","&reg;":"®","&macr":"¯","&macr;":"¯","&deg":"°","&deg;":"°","&plusmn":"±","&plusmn;":"±","&sup2":"²","&sup2;":"²","&sup3":"³","&sup3;":"³","&acute":"´","&acute;":"´","&micro":"µ","&micro;":"µ","&para":"¶","&para;":"¶","&middot":"·","&middot;":"·","&cedil":"¸","&cedil;":"¸","&sup1":"¹","&sup1;":"¹","&ordm":"º","&ordm;":"º","&raquo":"»","&raquo;":"»","&frac14":"¼","&frac14;":"¼","&frac12":"½","&frac12;":"½","&frac34":"¾","&frac34;":"¾","&iquest":"¿","&iquest;":"¿","&Agrave":"À","&Agrave;":"À","&Aacute":"Á","&Aacute;":"Á","&Acirc":"Â","&Acirc;":"Â","&Atilde":"Ã","&Atilde;":"Ã","&Auml":"Ä","&Auml;":"Ä","&Aring":"Å","&Aring;":"Å","&AElig":"Æ","&AElig;":"Æ","&Ccedil":"Ç","&Ccedil;":"Ç","&Egrave":"È","&Egrave;":"È","&Eacute":"É","&Eacute;":"É","&Ecirc":"Ê","&Ecirc;":"Ê","&Euml":"Ë","&Euml;":"Ë","&Igrave":"Ì","&Igrave;":"Ì","&Iacute":"Í","&Iacute;":"Í","&Icirc":"Î","&Icirc;":"Î","&Iuml":"Ï","&Iuml;":"Ï","&ETH":"Ð","&ETH;":"Ð","&Ntilde":"Ñ","&Ntilde;":"Ñ","&Ograve":"Ò","&Ograve;":"Ò","&Oacute":"Ó","&Oacute;":"Ó","&Ocirc":"Ô","&Ocirc;":"Ô","&Otilde":"Õ","&Otilde;":"Õ","&Ouml":"Ö","&Ouml;":"Ö","&times":"×","&times;":"×","&Oslash":"Ø","&Oslash;":"Ø","&Ugrave":"Ù","&Ugrave;":"Ù","&Uacute":"Ú","&Uacute;":"Ú","&Ucirc":"Û","&Ucirc;":"Û","&Uuml":"Ü","&Uuml;":"Ü","&Yacute":"Ý","&Yacute;":"Ý","&THORN":"Þ","&THORN;":"Þ","&szlig":"ß","&szlig;":"ß","&agrave":"à","&agrave;":"à","&aacute":"á","&aacute;":"á","&acirc":"â","&acirc;":"â","&atilde":"ã","&atilde;":"ã","&auml":"ä","&auml;":"ä","&aring":"å","&aring;":"å","&aelig":"æ","&aelig;":"æ","&ccedil":"ç","&ccedil;":"ç","&egrave":"è","&egrave;":"è","&eacute":"é","&eacute;":"é","&ecirc":"ê","&ecirc;":"ê","&euml":"ë","&euml;":"ë","&igrave":"ì","&igrave;":"ì","&iacute":"í","&iacute;":"í","&icirc":"î","&icirc;":"î","&iuml":"ï","&iuml;":"ï","&eth":"ð","&eth;":"ð","&ntilde":"ñ","&ntilde;":"ñ","&ograve":"ò","&ograve;":"ò","&oacute":"ó","&oacute;":"ó","&ocirc":"ô","&ocirc;":"ô","&otilde":"õ","&otilde;":"õ","&ouml":"ö","&ouml;":"ö","&divide":"÷","&divide;":"÷","&oslash":"ø","&oslash;":"ø","&ugrave":"ù","&ugrave;":"ù","&uacute":"ú","&uacute;":"ú","&ucirc":"û","&ucirc;":"û","&uuml":"ü","&uuml;":"ü","&yacute":"ý","&yacute;":"ý","&thorn":"þ","&thorn;":"þ","&yuml":"ÿ","&yuml;":"ÿ","&quot":'"',"&quot;":'"',"&amp":"&","&amp;":"&","&lt":"<","&lt;":"<","&gt":">","&gt;":">","&OElig;":"Œ","&oelig;":"œ","&Scaron;":"Š","&scaron;":"š","&Yuml;":"Ÿ","&circ;":"ˆ","&tilde;":"˜","&ensp;":" ","&emsp;":" ","&thinsp;":" ","&zwnj;":"‌","&zwj;":"‍","&lrm;":"‎","&rlm;":"‏","&ndash;":"–","&mdash;":"—","&lsquo;":"‘","&rsquo;":"’","&sbquo;":"‚","&ldquo;":"“","&rdquo;":"”","&bdquo;":"„","&dagger;":"†","&Dagger;":"‡","&permil;":"‰","&lsaquo;":"‹","&rsaquo;":"›","&euro;":"€","&fnof;":"ƒ","&Alpha;":"Α","&Beta;":"Β","&Gamma;":"Γ","&Delta;":"Δ","&Epsilon;":"Ε","&Zeta;":"Ζ","&Eta;":"Η","&Theta;":"Θ","&Iota;":"Ι","&Kappa;":"Κ","&Lambda;":"Λ","&Mu;":"Μ","&Nu;":"Ν","&Xi;":"Ξ","&Omicron;":"Ο","&Pi;":"Π","&Rho;":"Ρ","&Sigma;":"Σ","&Tau;":"Τ","&Upsilon;":"Υ","&Phi;":"Φ","&Chi;":"Χ","&Psi;":"Ψ","&Omega;":"Ω","&alpha;":"α","&beta;":"β","&gamma;":"γ","&delta;":"δ","&epsilon;":"ε","&zeta;":"ζ","&eta;":"η","&theta;":"θ","&iota;":"ι","&kappa;":"κ","&lambda;":"λ","&mu;":"μ","&nu;":"ν","&xi;":"ξ","&omicron;":"ο","&pi;":"π","&rho;":"ρ","&sigmaf;":"ς","&sigma;":"σ","&tau;":"τ","&upsilon;":"υ","&phi;":"φ","&chi;":"χ","&psi;":"ψ","&omega;":"ω","&thetasym;":"ϑ","&upsih;":"ϒ","&piv;":"ϖ","&bull;":"•","&hellip;":"…","&prime;":"′","&Prime;":"″","&oline;":"‾","&frasl;":"⁄","&weierp;":"℘","&image;":"ℑ","&real;":"ℜ","&trade;":"™","&alefsym;":"ℵ","&larr;":"←","&uarr;":"↑","&rarr;":"→","&darr;":"↓","&harr;":"↔","&crarr;":"↵","&lArr;":"⇐","&uArr;":"⇑","&rArr;":"⇒","&dArr;":"⇓","&hArr;":"⇔","&forall;":"∀","&part;":"∂","&exist;":"∃","&empty;":"∅","&nabla;":"∇","&isin;":"∈","&notin;":"∉","&ni;":"∋","&prod;":"∏","&sum;":"∑","&minus;":"−","&lowast;":"∗","&radic;":"√","&prop;":"∝","&infin;":"∞","&ang;":"∠","&and;":"∧","&or;":"∨","&cap;":"∩","&cup;":"∪","&int;":"∫","&there4;":"∴","&sim;":"∼","&cong;":"≅","&asymp;":"≈","&ne;":"≠","&equiv;":"≡","&le;":"≤","&ge;":"≥","&sub;":"⊂","&sup;":"⊃","&nsub;":"⊄","&sube;":"⊆","&supe;":"⊇","&oplus;":"⊕","&otimes;":"⊗","&perp;":"⊥","&sdot;":"⋅","&lceil;":"⌈","&rceil;":"⌉","&lfloor;":"⌊","&rfloor;":"⌋","&lang;":"〈","&rang;":"〉","&loz;":"◊","&spades;":"♠","&clubs;":"♣","&hearts;":"♥","&diams;":"♦"},characters:{"'":"&apos;"," ":"&nbsp;","¡":"&iexcl;","¢":"&cent;","£":"&pound;","¤":"&curren;","¥":"&yen;","¦":"&brvbar;","§":"&sect;","¨":"&uml;","©":"&copy;","ª":"&ordf;","«":"&laquo;","¬":"&not;","­":"&shy;","®":"&reg;","¯":"&macr;","°":"&deg;","±":"&plusmn;","²":"&sup2;","³":"&sup3;","´":"&acute;","µ":"&micro;","¶":"&para;","·":"&middot;","¸":"&cedil;","¹":"&sup1;","º":"&ordm;","»":"&raquo;","¼":"&frac14;","½":"&frac12;","¾":"&frac34;","¿":"&iquest;","À":"&Agrave;","Á":"&Aacute;","Â":"&Acirc;","Ã":"&Atilde;","Ä":"&Auml;","Å":"&Aring;","Æ":"&AElig;","Ç":"&Ccedil;","È":"&Egrave;","É":"&Eacute;","Ê":"&Ecirc;","Ë":"&Euml;","Ì":"&Igrave;","Í":"&Iacute;","Î":"&Icirc;","Ï":"&Iuml;","Ð":"&ETH;","Ñ":"&Ntilde;","Ò":"&Ograve;","Ó":"&Oacute;","Ô":"&Ocirc;","Õ":"&Otilde;","Ö":"&Ouml;","×":"&times;","Ø":"&Oslash;","Ù":"&Ugrave;","Ú":"&Uacute;","Û":"&Ucirc;","Ü":"&Uuml;","Ý":"&Yacute;","Þ":"&THORN;","ß":"&szlig;","à":"&agrave;","á":"&aacute;","â":"&acirc;","ã":"&atilde;","ä":"&auml;","å":"&aring;","æ":"&aelig;","ç":"&ccedil;","è":"&egrave;","é":"&eacute;","ê":"&ecirc;","ë":"&euml;","ì":"&igrave;","í":"&iacute;","î":"&icirc;","ï":"&iuml;","ð":"&eth;","ñ":"&ntilde;","ò":"&ograve;","ó":"&oacute;","ô":"&ocirc;","õ":"&otilde;","ö":"&ouml;","÷":"&divide;","ø":"&oslash;","ù":"&ugrave;","ú":"&uacute;","û":"&ucirc;","ü":"&uuml;","ý":"&yacute;","þ":"&thorn;","ÿ":"&yuml;",'"':"&quot;","&":"&amp;","<":"&lt;",">":"&gt;","Œ":"&OElig;","œ":"&oelig;","Š":"&Scaron;","š":"&scaron;","Ÿ":"&Yuml;","ˆ":"&circ;","˜":"&tilde;"," ":"&ensp;"," ":"&emsp;"," ":"&thinsp;","‌":"&zwnj;","‍":"&zwj;","‎":"&lrm;","‏":"&rlm;","–":"&ndash;","—":"&mdash;","‘":"&lsquo;","’":"&rsquo;","‚":"&sbquo;","“":"&ldquo;","”":"&rdquo;","„":"&bdquo;","†":"&dagger;","‡":"&Dagger;","‰":"&permil;","‹":"&lsaquo;","›":"&rsaquo;","€":"&euro;","ƒ":"&fnof;","Α":"&Alpha;","Β":"&Beta;","Γ":"&Gamma;","Δ":"&Delta;","Ε":"&Epsilon;","Ζ":"&Zeta;","Η":"&Eta;","Θ":"&Theta;","Ι":"&Iota;","Κ":"&Kappa;","Λ":"&Lambda;","Μ":"&Mu;","Ν":"&Nu;","Ξ":"&Xi;","Ο":"&Omicron;","Π":"&Pi;","Ρ":"&Rho;","Σ":"&Sigma;","Τ":"&Tau;","Υ":"&Upsilon;","Φ":"&Phi;","Χ":"&Chi;","Ψ":"&Psi;","Ω":"&Omega;","α":"&alpha;","β":"&beta;","γ":"&gamma;","δ":"&delta;","ε":"&epsilon;","ζ":"&zeta;","η":"&eta;","θ":"&theta;","ι":"&iota;","κ":"&kappa;","λ":"&lambda;","μ":"&mu;","ν":"&nu;","ξ":"&xi;","ο":"&omicron;","π":"&pi;","ρ":"&rho;","ς":"&sigmaf;","σ":"&sigma;","τ":"&tau;","υ":"&upsilon;","φ":"&phi;","χ":"&chi;","ψ":"&psi;","ω":"&omega;","ϑ":"&thetasym;","ϒ":"&upsih;","ϖ":"&piv;","•":"&bull;","…":"&hellip;","′":"&prime;","″":"&Prime;","‾":"&oline;","⁄":"&frasl;","℘":"&weierp;","ℑ":"&image;","ℜ":"&real;","™":"&trade;","ℵ":"&alefsym;","←":"&larr;","↑":"&uarr;","→":"&rarr;","↓":"&darr;","↔":"&harr;","↵":"&crarr;","⇐":"&lArr;","⇑":"&uArr;","⇒":"&rArr;","⇓":"&dArr;","⇔":"&hArr;","∀":"&forall;","∂":"&part;","∃":"&exist;","∅":"&empty;","∇":"&nabla;","∈":"&isin;","∉":"&notin;","∋":"&ni;","∏":"&prod;","∑":"&sum;","−":"&minus;","∗":"&lowast;","√":"&radic;","∝":"&prop;","∞":"&infin;","∠":"&ang;","∧":"&and;","∨":"&or;","∩":"&cap;","∪":"&cup;","∫":"&int;","∴":"&there4;","∼":"&sim;","≅":"&cong;","≈":"&asymp;","≠":"&ne;","≡":"&equiv;","≤":"&le;","≥":"&ge;","⊂":"&sub;","⊃":"&sup;","⊄":"&nsub;","⊆":"&sube;","⊇":"&supe;","⊕":"&oplus;","⊗":"&otimes;","⊥":"&perp;","⋅":"&sdot;","⌈":"&lceil;","⌉":"&rceil;","⌊":"&lfloor;","⌋":"&rfloor;","〈":"&lang;","〉":"&rang;","◊":"&loz;","♠":"&spades;","♣":"&clubs;","♥":"&hearts;","♦":"&diams;"}},html5:{entities:{"&AElig":"Æ","&AElig;":"Æ","&AMP":"&","&AMP;":"&","&Aacute":"Á","&Aacute;":"Á","&Abreve;":"Ă","&Acirc":"Â","&Acirc;":"Â","&Acy;":"А","&Afr;":"𝔄","&Agrave":"À","&Agrave;":"À","&Alpha;":"Α","&Amacr;":"Ā","&And;":"⩓","&Aogon;":"Ą","&Aopf;":"𝔸","&ApplyFunction;":"⁡","&Aring":"Å","&Aring;":"Å","&Ascr;":"𝒜","&Assign;":"≔","&Atilde":"Ã","&Atilde;":"Ã","&Auml":"Ä","&Auml;":"Ä","&Backslash;":"∖","&Barv;":"⫧","&Barwed;":"⌆","&Bcy;":"Б","&Because;":"∵","&Bernoullis;":"ℬ","&Beta;":"Β","&Bfr;":"𝔅","&Bopf;":"𝔹","&Breve;":"˘","&Bscr;":"ℬ","&Bumpeq;":"≎","&CHcy;":"Ч","&COPY":"©","&COPY;":"©","&Cacute;":"Ć","&Cap;":"⋒","&CapitalDifferentialD;":"ⅅ","&Cayleys;":"ℭ","&Ccaron;":"Č","&Ccedil":"Ç","&Ccedil;":"Ç","&Ccirc;":"Ĉ","&Cconint;":"∰","&Cdot;":"Ċ","&Cedilla;":"¸","&CenterDot;":"·","&Cfr;":"ℭ","&Chi;":"Χ","&CircleDot;":"⊙","&CircleMinus;":"⊖","&CirclePlus;":"⊕","&CircleTimes;":"⊗","&ClockwiseContourIntegral;":"∲","&CloseCurlyDoubleQuote;":"”","&CloseCurlyQuote;":"’","&Colon;":"∷","&Colone;":"⩴","&Congruent;":"≡","&Conint;":"∯","&ContourIntegral;":"∮","&Copf;":"ℂ","&Coproduct;":"∐","&CounterClockwiseContourIntegral;":"∳","&Cross;":"⨯","&Cscr;":"𝒞","&Cup;":"⋓","&CupCap;":"≍","&DD;":"ⅅ","&DDotrahd;":"⤑","&DJcy;":"Ђ","&DScy;":"Ѕ","&DZcy;":"Џ","&Dagger;":"‡","&Darr;":"↡","&Dashv;":"⫤","&Dcaron;":"Ď","&Dcy;":"Д","&Del;":"∇","&Delta;":"Δ","&Dfr;":"𝔇","&DiacriticalAcute;":"´","&DiacriticalDot;":"˙","&DiacriticalDoubleAcute;":"˝","&DiacriticalGrave;":"`","&DiacriticalTilde;":"˜","&Diamond;":"⋄","&DifferentialD;":"ⅆ","&Dopf;":"𝔻","&Dot;":"¨","&DotDot;":"⃜","&DotEqual;":"≐","&DoubleContourIntegral;":"∯","&DoubleDot;":"¨","&DoubleDownArrow;":"⇓","&DoubleLeftArrow;":"⇐","&DoubleLeftRightArrow;":"⇔","&DoubleLeftTee;":"⫤","&DoubleLongLeftArrow;":"⟸","&DoubleLongLeftRightArrow;":"⟺","&DoubleLongRightArrow;":"⟹","&DoubleRightArrow;":"⇒","&DoubleRightTee;":"⊨","&DoubleUpArrow;":"⇑","&DoubleUpDownArrow;":"⇕","&DoubleVerticalBar;":"∥","&DownArrow;":"↓","&DownArrowBar;":"⤓","&DownArrowUpArrow;":"⇵","&DownBreve;":"̑","&DownLeftRightVector;":"⥐","&DownLeftTeeVector;":"⥞","&DownLeftVector;":"↽","&DownLeftVectorBar;":"⥖","&DownRightTeeVector;":"⥟","&DownRightVector;":"⇁","&DownRightVectorBar;":"⥗","&DownTee;":"⊤","&DownTeeArrow;":"↧","&Downarrow;":"⇓","&Dscr;":"𝒟","&Dstrok;":"Đ","&ENG;":"Ŋ","&ETH":"Ð","&ETH;":"Ð","&Eacute":"É","&Eacute;":"É","&Ecaron;":"Ě","&Ecirc":"Ê","&Ecirc;":"Ê","&Ecy;":"Э","&Edot;":"Ė","&Efr;":"𝔈","&Egrave":"È","&Egrave;":"È","&Element;":"∈","&Emacr;":"Ē","&EmptySmallSquare;":"◻","&EmptyVerySmallSquare;":"▫","&Eogon;":"Ę","&Eopf;":"𝔼","&Epsilon;":"Ε","&Equal;":"⩵","&EqualTilde;":"≂","&Equilibrium;":"⇌","&Escr;":"ℰ","&Esim;":"⩳","&Eta;":"Η","&Euml":"Ë","&Euml;":"Ë","&Exists;":"∃","&ExponentialE;":"ⅇ","&Fcy;":"Ф","&Ffr;":"𝔉","&FilledSmallSquare;":"◼","&FilledVerySmallSquare;":"▪","&Fopf;":"𝔽","&ForAll;":"∀","&Fouriertrf;":"ℱ","&Fscr;":"ℱ","&GJcy;":"Ѓ","&GT":">","&GT;":">","&Gamma;":"Γ","&Gammad;":"Ϝ","&Gbreve;":"Ğ","&Gcedil;":"Ģ","&Gcirc;":"Ĝ","&Gcy;":"Г","&Gdot;":"Ġ","&Gfr;":"𝔊","&Gg;":"⋙","&Gopf;":"𝔾","&GreaterEqual;":"≥","&GreaterEqualLess;":"⋛","&GreaterFullEqual;":"≧","&GreaterGreater;":"⪢","&GreaterLess;":"≷","&GreaterSlantEqual;":"⩾","&GreaterTilde;":"≳","&Gscr;":"𝒢","&Gt;":"≫","&HARDcy;":"Ъ","&Hacek;":"ˇ","&Hat;":"^","&Hcirc;":"Ĥ","&Hfr;":"ℌ","&HilbertSpace;":"ℋ","&Hopf;":"ℍ","&HorizontalLine;":"─","&Hscr;":"ℋ","&Hstrok;":"Ħ","&HumpDownHump;":"≎","&HumpEqual;":"≏","&IEcy;":"Е","&IJlig;":"Ĳ","&IOcy;":"Ё","&Iacute":"Í","&Iacute;":"Í","&Icirc":"Î","&Icirc;":"Î","&Icy;":"И","&Idot;":"İ","&Ifr;":"ℑ","&Igrave":"Ì","&Igrave;":"Ì","&Im;":"ℑ","&Imacr;":"Ī","&ImaginaryI;":"ⅈ","&Implies;":"⇒","&Int;":"∬","&Integral;":"∫","&Intersection;":"⋂","&InvisibleComma;":"⁣","&InvisibleTimes;":"⁢","&Iogon;":"Į","&Iopf;":"𝕀","&Iota;":"Ι","&Iscr;":"ℐ","&Itilde;":"Ĩ","&Iukcy;":"І","&Iuml":"Ï","&Iuml;":"Ï","&Jcirc;":"Ĵ","&Jcy;":"Й","&Jfr;":"𝔍","&Jopf;":"𝕁","&Jscr;":"𝒥","&Jsercy;":"Ј","&Jukcy;":"Є","&KHcy;":"Х","&KJcy;":"Ќ","&Kappa;":"Κ","&Kcedil;":"Ķ","&Kcy;":"К","&Kfr;":"𝔎","&Kopf;":"𝕂","&Kscr;":"𝒦","&LJcy;":"Љ","&LT":"<","&LT;":"<","&Lacute;":"Ĺ","&Lambda;":"Λ","&Lang;":"⟪","&Laplacetrf;":"ℒ","&Larr;":"↞","&Lcaron;":"Ľ","&Lcedil;":"Ļ","&Lcy;":"Л","&LeftAngleBracket;":"⟨","&LeftArrow;":"←","&LeftArrowBar;":"⇤","&LeftArrowRightArrow;":"⇆","&LeftCeiling;":"⌈","&LeftDoubleBracket;":"⟦","&LeftDownTeeVector;":"⥡","&LeftDownVector;":"⇃","&LeftDownVectorBar;":"⥙","&LeftFloor;":"⌊","&LeftRightArrow;":"↔","&LeftRightVector;":"⥎","&LeftTee;":"⊣","&LeftTeeArrow;":"↤","&LeftTeeVector;":"⥚","&LeftTriangle;":"⊲","&LeftTriangleBar;":"⧏","&LeftTriangleEqual;":"⊴","&LeftUpDownVector;":"⥑","&LeftUpTeeVector;":"⥠","&LeftUpVector;":"↿","&LeftUpVectorBar;":"⥘","&LeftVector;":"↼","&LeftVectorBar;":"⥒","&Leftarrow;":"⇐","&Leftrightarrow;":"⇔","&LessEqualGreater;":"⋚","&LessFullEqual;":"≦","&LessGreater;":"≶","&LessLess;":"⪡","&LessSlantEqual;":"⩽","&LessTilde;":"≲","&Lfr;":"𝔏","&Ll;":"⋘","&Lleftarrow;":"⇚","&Lmidot;":"Ŀ","&LongLeftArrow;":"⟵","&LongLeftRightArrow;":"⟷","&LongRightArrow;":"⟶","&Longleftarrow;":"⟸","&Longleftrightarrow;":"⟺","&Longrightarrow;":"⟹","&Lopf;":"𝕃","&LowerLeftArrow;":"↙","&LowerRightArrow;":"↘","&Lscr;":"ℒ","&Lsh;":"↰","&Lstrok;":"Ł","&Lt;":"≪","&Map;":"⤅","&Mcy;":"М","&MediumSpace;":" ","&Mellintrf;":"ℳ","&Mfr;":"𝔐","&MinusPlus;":"∓","&Mopf;":"𝕄","&Mscr;":"ℳ","&Mu;":"Μ","&NJcy;":"Њ","&Nacute;":"Ń","&Ncaron;":"Ň","&Ncedil;":"Ņ","&Ncy;":"Н","&NegativeMediumSpace;":"​","&NegativeThickSpace;":"​","&NegativeThinSpace;":"​","&NegativeVeryThinSpace;":"​","&NestedGreaterGreater;":"≫","&NestedLessLess;":"≪","&NewLine;":"\n","&Nfr;":"𝔑","&NoBreak;":"⁠","&NonBreakingSpace;":" ","&Nopf;":"ℕ","&Not;":"⫬","&NotCongruent;":"≢","&NotCupCap;":"≭","&NotDoubleVerticalBar;":"∦","&NotElement;":"∉","&NotEqual;":"≠","&NotEqualTilde;":"≂̸","&NotExists;":"∄","&NotGreater;":"≯","&NotGreaterEqual;":"≱","&NotGreaterFullEqual;":"≧̸","&NotGreaterGreater;":"≫̸","&NotGreaterLess;":"≹","&NotGreaterSlantEqual;":"⩾̸","&NotGreaterTilde;":"≵","&NotHumpDownHump;":"≎̸","&NotHumpEqual;":"≏̸","&NotLeftTriangle;":"⋪","&NotLeftTriangleBar;":"⧏̸","&NotLeftTriangleEqual;":"⋬","&NotLess;":"≮","&NotLessEqual;":"≰","&NotLessGreater;":"≸","&NotLessLess;":"≪̸","&NotLessSlantEqual;":"⩽̸","&NotLessTilde;":"≴","&NotNestedGreaterGreater;":"⪢̸","&NotNestedLessLess;":"⪡̸","&NotPrecedes;":"⊀","&NotPrecedesEqual;":"⪯̸","&NotPrecedesSlantEqual;":"⋠","&NotReverseElement;":"∌","&NotRightTriangle;":"⋫","&NotRightTriangleBar;":"⧐̸","&NotRightTriangleEqual;":"⋭","&NotSquareSubset;":"⊏̸","&NotSquareSubsetEqual;":"⋢","&NotSquareSuperset;":"⊐̸","&NotSquareSupersetEqual;":"⋣","&NotSubset;":"⊂⃒","&NotSubsetEqual;":"⊈","&NotSucceeds;":"⊁","&NotSucceedsEqual;":"⪰̸","&NotSucceedsSlantEqual;":"⋡","&NotSucceedsTilde;":"≿̸","&NotSuperset;":"⊃⃒","&NotSupersetEqual;":"⊉","&NotTilde;":"≁","&NotTildeEqual;":"≄","&NotTildeFullEqual;":"≇","&NotTildeTilde;":"≉","&NotVerticalBar;":"∤","&Nscr;":"𝒩","&Ntilde":"Ñ","&Ntilde;":"Ñ","&Nu;":"Ν","&OElig;":"Œ","&Oacute":"Ó","&Oacute;":"Ó","&Ocirc":"Ô","&Ocirc;":"Ô","&Ocy;":"О","&Odblac;":"Ő","&Ofr;":"𝔒","&Ograve":"Ò","&Ograve;":"Ò","&Omacr;":"Ō","&Omega;":"Ω","&Omicron;":"Ο","&Oopf;":"𝕆","&OpenCurlyDoubleQuote;":"“","&OpenCurlyQuote;":"‘","&Or;":"⩔","&Oscr;":"𝒪","&Oslash":"Ø","&Oslash;":"Ø","&Otilde":"Õ","&Otilde;":"Õ","&Otimes;":"⨷","&Ouml":"Ö","&Ouml;":"Ö","&OverBar;":"‾","&OverBrace;":"⏞","&OverBracket;":"⎴","&OverParenthesis;":"⏜","&PartialD;":"∂","&Pcy;":"П","&Pfr;":"𝔓","&Phi;":"Φ","&Pi;":"Π","&PlusMinus;":"±","&Poincareplane;":"ℌ","&Popf;":"ℙ","&Pr;":"⪻","&Precedes;":"≺","&PrecedesEqual;":"⪯","&PrecedesSlantEqual;":"≼","&PrecedesTilde;":"≾","&Prime;":"″","&Product;":"∏","&Proportion;":"∷","&Proportional;":"∝","&Pscr;":"𝒫","&Psi;":"Ψ","&QUOT":'"',"&QUOT;":'"',"&Qfr;":"𝔔","&Qopf;":"ℚ","&Qscr;":"𝒬","&RBarr;":"⤐","&REG":"®","&REG;":"®","&Racute;":"Ŕ","&Rang;":"⟫","&Rarr;":"↠","&Rarrtl;":"⤖","&Rcaron;":"Ř","&Rcedil;":"Ŗ","&Rcy;":"Р","&Re;":"ℜ","&ReverseElement;":"∋","&ReverseEquilibrium;":"⇋","&ReverseUpEquilibrium;":"⥯","&Rfr;":"ℜ","&Rho;":"Ρ","&RightAngleBracket;":"⟩","&RightArrow;":"→","&RightArrowBar;":"⇥","&RightArrowLeftArrow;":"⇄","&RightCeiling;":"⌉","&RightDoubleBracket;":"⟧","&RightDownTeeVector;":"⥝","&RightDownVector;":"⇂","&RightDownVectorBar;":"⥕","&RightFloor;":"⌋","&RightTee;":"⊢","&RightTeeArrow;":"↦","&RightTeeVector;":"⥛","&RightTriangle;":"⊳","&RightTriangleBar;":"⧐","&RightTriangleEqual;":"⊵","&RightUpDownVector;":"⥏","&RightUpTeeVector;":"⥜","&RightUpVector;":"↾","&RightUpVectorBar;":"⥔","&RightVector;":"⇀","&RightVectorBar;":"⥓","&Rightarrow;":"⇒","&Ropf;":"ℝ","&RoundImplies;":"⥰","&Rrightarrow;":"⇛","&Rscr;":"ℛ","&Rsh;":"↱","&RuleDelayed;":"⧴","&SHCHcy;":"Щ","&SHcy;":"Ш","&SOFTcy;":"Ь","&Sacute;":"Ś","&Sc;":"⪼","&Scaron;":"Š","&Scedil;":"Ş","&Scirc;":"Ŝ","&Scy;":"С","&Sfr;":"𝔖","&ShortDownArrow;":"↓","&ShortLeftArrow;":"←","&ShortRightArrow;":"→","&ShortUpArrow;":"↑","&Sigma;":"Σ","&SmallCircle;":"∘","&Sopf;":"𝕊","&Sqrt;":"√","&Square;":"□","&SquareIntersection;":"⊓","&SquareSubset;":"⊏","&SquareSubsetEqual;":"⊑","&SquareSuperset;":"⊐","&SquareSupersetEqual;":"⊒","&SquareUnion;":"⊔","&Sscr;":"𝒮","&Star;":"⋆","&Sub;":"⋐","&Subset;":"⋐","&SubsetEqual;":"⊆","&Succeeds;":"≻","&SucceedsEqual;":"⪰","&SucceedsSlantEqual;":"≽","&SucceedsTilde;":"≿","&SuchThat;":"∋","&Sum;":"∑","&Sup;":"⋑","&Superset;":"⊃","&SupersetEqual;":"⊇","&Supset;":"⋑","&THORN":"Þ","&THORN;":"Þ","&TRADE;":"™","&TSHcy;":"Ћ","&TScy;":"Ц","&Tab;":"\t","&Tau;":"Τ","&Tcaron;":"Ť","&Tcedil;":"Ţ","&Tcy;":"Т","&Tfr;":"𝔗","&Therefore;":"∴","&Theta;":"Θ","&ThickSpace;":"  ","&ThinSpace;":" ","&Tilde;":"∼","&TildeEqual;":"≃","&TildeFullEqual;":"≅","&TildeTilde;":"≈","&Topf;":"𝕋","&TripleDot;":"⃛","&Tscr;":"𝒯","&Tstrok;":"Ŧ","&Uacute":"Ú","&Uacute;":"Ú","&Uarr;":"↟","&Uarrocir;":"⥉","&Ubrcy;":"Ў","&Ubreve;":"Ŭ","&Ucirc":"Û","&Ucirc;":"Û","&Ucy;":"У","&Udblac;":"Ű","&Ufr;":"𝔘","&Ugrave":"Ù","&Ugrave;":"Ù","&Umacr;":"Ū","&UnderBar;":"_","&UnderBrace;":"⏟","&UnderBracket;":"⎵","&UnderParenthesis;":"⏝","&Union;":"⋃","&UnionPlus;":"⊎","&Uogon;":"Ų","&Uopf;":"𝕌","&UpArrow;":"↑","&UpArrowBar;":"⤒","&UpArrowDownArrow;":"⇅","&UpDownArrow;":"↕","&UpEquilibrium;":"⥮","&UpTee;":"⊥","&UpTeeArrow;":"↥","&Uparrow;":"⇑","&Updownarrow;":"⇕","&UpperLeftArrow;":"↖","&UpperRightArrow;":"↗","&Upsi;":"ϒ","&Upsilon;":"Υ","&Uring;":"Ů","&Uscr;":"𝒰","&Utilde;":"Ũ","&Uuml":"Ü","&Uuml;":"Ü","&VDash;":"⊫","&Vbar;":"⫫","&Vcy;":"В","&Vdash;":"⊩","&Vdashl;":"⫦","&Vee;":"⋁","&Verbar;":"‖","&Vert;":"‖","&VerticalBar;":"∣","&VerticalLine;":"|","&VerticalSeparator;":"❘","&VerticalTilde;":"≀","&VeryThinSpace;":" ","&Vfr;":"𝔙","&Vopf;":"𝕍","&Vscr;":"𝒱","&Vvdash;":"⊪","&Wcirc;":"Ŵ","&Wedge;":"⋀","&Wfr;":"𝔚","&Wopf;":"𝕎","&Wscr;":"𝒲","&Xfr;":"𝔛","&Xi;":"Ξ","&Xopf;":"𝕏","&Xscr;":"𝒳","&YAcy;":"Я","&YIcy;":"Ї","&YUcy;":"Ю","&Yacute":"Ý","&Yacute;":"Ý","&Ycirc;":"Ŷ","&Ycy;":"Ы","&Yfr;":"𝔜","&Yopf;":"𝕐","&Yscr;":"𝒴","&Yuml;":"Ÿ","&ZHcy;":"Ж","&Zacute;":"Ź","&Zcaron;":"Ž","&Zcy;":"З","&Zdot;":"Ż","&ZeroWidthSpace;":"​","&Zeta;":"Ζ","&Zfr;":"ℨ","&Zopf;":"ℤ","&Zscr;":"𝒵","&aacute":"á","&aacute;":"á","&abreve;":"ă","&ac;":"∾","&acE;":"∾̳","&acd;":"∿","&acirc":"â","&acirc;":"â","&acute":"´","&acute;":"´","&acy;":"а","&aelig":"æ","&aelig;":"æ","&af;":"⁡","&afr;":"𝔞","&agrave":"à","&agrave;":"à","&alefsym;":"ℵ","&aleph;":"ℵ","&alpha;":"α","&amacr;":"ā","&amalg;":"⨿","&amp":"&","&amp;":"&","&and;":"∧","&andand;":"⩕","&andd;":"⩜","&andslope;":"⩘","&andv;":"⩚","&ang;":"∠","&ange;":"⦤","&angle;":"∠","&angmsd;":"∡","&angmsdaa;":"⦨","&angmsdab;":"⦩","&angmsdac;":"⦪","&angmsdad;":"⦫","&angmsdae;":"⦬","&angmsdaf;":"⦭","&angmsdag;":"⦮","&angmsdah;":"⦯","&angrt;":"∟","&angrtvb;":"⊾","&angrtvbd;":"⦝","&angsph;":"∢","&angst;":"Å","&angzarr;":"⍼","&aogon;":"ą","&aopf;":"𝕒","&ap;":"≈","&apE;":"⩰","&apacir;":"⩯","&ape;":"≊","&apid;":"≋","&apos;":"'","&approx;":"≈","&approxeq;":"≊","&aring":"å","&aring;":"å","&ascr;":"𝒶","&ast;":"*","&asymp;":"≈","&asympeq;":"≍","&atilde":"ã","&atilde;":"ã","&auml":"ä","&auml;":"ä","&awconint;":"∳","&awint;":"⨑","&bNot;":"⫭","&backcong;":"≌","&backepsilon;":"϶","&backprime;":"‵","&backsim;":"∽","&backsimeq;":"⋍","&barvee;":"⊽","&barwed;":"⌅","&barwedge;":"⌅","&bbrk;":"⎵","&bbrktbrk;":"⎶","&bcong;":"≌","&bcy;":"б","&bdquo;":"„","&becaus;":"∵","&because;":"∵","&bemptyv;":"⦰","&bepsi;":"϶","&bernou;":"ℬ","&beta;":"β","&beth;":"ℶ","&between;":"≬","&bfr;":"𝔟","&bigcap;":"⋂","&bigcirc;":"◯","&bigcup;":"⋃","&bigodot;":"⨀","&bigoplus;":"⨁","&bigotimes;":"⨂","&bigsqcup;":"⨆","&bigstar;":"★","&bigtriangledown;":"▽","&bigtriangleup;":"△","&biguplus;":"⨄","&bigvee;":"⋁","&bigwedge;":"⋀","&bkarow;":"⤍","&blacklozenge;":"⧫","&blacksquare;":"▪","&blacktriangle;":"▴","&blacktriangledown;":"▾","&blacktriangleleft;":"◂","&blacktriangleright;":"▸","&blank;":"␣","&blk12;":"▒","&blk14;":"░","&blk34;":"▓","&block;":"█","&bne;":"=⃥","&bnequiv;":"≡⃥","&bnot;":"⌐","&bopf;":"𝕓","&bot;":"⊥","&bottom;":"⊥","&bowtie;":"⋈","&boxDL;":"╗","&boxDR;":"╔","&boxDl;":"╖","&boxDr;":"╓","&boxH;":"═","&boxHD;":"╦","&boxHU;":"╩","&boxHd;":"╤","&boxHu;":"╧","&boxUL;":"╝","&boxUR;":"╚","&boxUl;":"╜","&boxUr;":"╙","&boxV;":"║","&boxVH;":"╬","&boxVL;":"╣","&boxVR;":"╠","&boxVh;":"╫","&boxVl;":"╢","&boxVr;":"╟","&boxbox;":"⧉","&boxdL;":"╕","&boxdR;":"╒","&boxdl;":"┐","&boxdr;":"┌","&boxh;":"─","&boxhD;":"╥","&boxhU;":"╨","&boxhd;":"┬","&boxhu;":"┴","&boxminus;":"⊟","&boxplus;":"⊞","&boxtimes;":"⊠","&boxuL;":"╛","&boxuR;":"╘","&boxul;":"┘","&boxur;":"└","&boxv;":"│","&boxvH;":"╪","&boxvL;":"╡","&boxvR;":"╞","&boxvh;":"┼","&boxvl;":"┤","&boxvr;":"├","&bprime;":"‵","&breve;":"˘","&brvbar":"¦","&brvbar;":"¦","&bscr;":"𝒷","&bsemi;":"⁏","&bsim;":"∽","&bsime;":"⋍","&bsol;":"\\","&bsolb;":"⧅","&bsolhsub;":"⟈","&bull;":"•","&bullet;":"•","&bump;":"≎","&bumpE;":"⪮","&bumpe;":"≏","&bumpeq;":"≏","&cacute;":"ć","&cap;":"∩","&capand;":"⩄","&capbrcup;":"⩉","&capcap;":"⩋","&capcup;":"⩇","&capdot;":"⩀","&caps;":"∩︀","&caret;":"⁁","&caron;":"ˇ","&ccaps;":"⩍","&ccaron;":"č","&ccedil":"ç","&ccedil;":"ç","&ccirc;":"ĉ","&ccups;":"⩌","&ccupssm;":"⩐","&cdot;":"ċ","&cedil":"¸","&cedil;":"¸","&cemptyv;":"⦲","&cent":"¢","&cent;":"¢","&centerdot;":"·","&cfr;":"𝔠","&chcy;":"ч","&check;":"✓","&checkmark;":"✓","&chi;":"χ","&cir;":"○","&cirE;":"⧃","&circ;":"ˆ","&circeq;":"≗","&circlearrowleft;":"↺","&circlearrowright;":"↻","&circledR;":"®","&circledS;":"Ⓢ","&circledast;":"⊛","&circledcirc;":"⊚","&circleddash;":"⊝","&cire;":"≗","&cirfnint;":"⨐","&cirmid;":"⫯","&cirscir;":"⧂","&clubs;":"♣","&clubsuit;":"♣","&colon;":":","&colone;":"≔","&coloneq;":"≔","&comma;":",","&commat;":"@","&comp;":"∁","&compfn;":"∘","&complement;":"∁","&complexes;":"ℂ","&cong;":"≅","&congdot;":"⩭","&conint;":"∮","&copf;":"𝕔","&coprod;":"∐","&copy":"©","&copy;":"©","&copysr;":"℗","&crarr;":"↵","&cross;":"✗","&cscr;":"𝒸","&csub;":"⫏","&csube;":"⫑","&csup;":"⫐","&csupe;":"⫒","&ctdot;":"⋯","&cudarrl;":"⤸","&cudarrr;":"⤵","&cuepr;":"⋞","&cuesc;":"⋟","&cularr;":"↶","&cularrp;":"⤽","&cup;":"∪","&cupbrcap;":"⩈","&cupcap;":"⩆","&cupcup;":"⩊","&cupdot;":"⊍","&cupor;":"⩅","&cups;":"∪︀","&curarr;":"↷","&curarrm;":"⤼","&curlyeqprec;":"⋞","&curlyeqsucc;":"⋟","&curlyvee;":"⋎","&curlywedge;":"⋏","&curren":"¤","&curren;":"¤","&curvearrowleft;":"↶","&curvearrowright;":"↷","&cuvee;":"⋎","&cuwed;":"⋏","&cwconint;":"∲","&cwint;":"∱","&cylcty;":"⌭","&dArr;":"⇓","&dHar;":"⥥","&dagger;":"†","&daleth;":"ℸ","&darr;":"↓","&dash;":"‐","&dashv;":"⊣","&dbkarow;":"⤏","&dblac;":"˝","&dcaron;":"ď","&dcy;":"д","&dd;":"ⅆ","&ddagger;":"‡","&ddarr;":"⇊","&ddotseq;":"⩷","&deg":"°","&deg;":"°","&delta;":"δ","&demptyv;":"⦱","&dfisht;":"⥿","&dfr;":"𝔡","&dharl;":"⇃","&dharr;":"⇂","&diam;":"⋄","&diamond;":"⋄","&diamondsuit;":"♦","&diams;":"♦","&die;":"¨","&digamma;":"ϝ","&disin;":"⋲","&div;":"÷","&divide":"÷","&divide;":"÷","&divideontimes;":"⋇","&divonx;":"⋇","&djcy;":"ђ","&dlcorn;":"⌞","&dlcrop;":"⌍","&dollar;":"$","&dopf;":"𝕕","&dot;":"˙","&doteq;":"≐","&doteqdot;":"≑","&dotminus;":"∸","&dotplus;":"∔","&dotsquare;":"⊡","&doublebarwedge;":"⌆","&downarrow;":"↓","&downdownarrows;":"⇊","&downharpoonleft;":"⇃","&downharpoonright;":"⇂","&drbkarow;":"⤐","&drcorn;":"⌟","&drcrop;":"⌌","&dscr;":"𝒹","&dscy;":"ѕ","&dsol;":"⧶","&dstrok;":"đ","&dtdot;":"⋱","&dtri;":"▿","&dtrif;":"▾","&duarr;":"⇵","&duhar;":"⥯","&dwangle;":"⦦","&dzcy;":"џ","&dzigrarr;":"⟿","&eDDot;":"⩷","&eDot;":"≑","&eacute":"é","&eacute;":"é","&easter;":"⩮","&ecaron;":"ě","&ecir;":"≖","&ecirc":"ê","&ecirc;":"ê","&ecolon;":"≕","&ecy;":"э","&edot;":"ė","&ee;":"ⅇ","&efDot;":"≒","&efr;":"𝔢","&eg;":"⪚","&egrave":"è","&egrave;":"è","&egs;":"⪖","&egsdot;":"⪘","&el;":"⪙","&elinters;":"⏧","&ell;":"ℓ","&els;":"⪕","&elsdot;":"⪗","&emacr;":"ē","&empty;":"∅","&emptyset;":"∅","&emptyv;":"∅","&emsp13;":" ","&emsp14;":" ","&emsp;":" ","&eng;":"ŋ","&ensp;":" ","&eogon;":"ę","&eopf;":"𝕖","&epar;":"⋕","&eparsl;":"⧣","&eplus;":"⩱","&epsi;":"ε","&epsilon;":"ε","&epsiv;":"ϵ","&eqcirc;":"≖","&eqcolon;":"≕","&eqsim;":"≂","&eqslantgtr;":"⪖","&eqslantless;":"⪕","&equals;":"=","&equest;":"≟","&equiv;":"≡","&equivDD;":"⩸","&eqvparsl;":"⧥","&erDot;":"≓","&erarr;":"⥱","&escr;":"ℯ","&esdot;":"≐","&esim;":"≂","&eta;":"η","&eth":"ð","&eth;":"ð","&euml":"ë","&euml;":"ë","&euro;":"€","&excl;":"!","&exist;":"∃","&expectation;":"ℰ","&exponentiale;":"ⅇ","&fallingdotseq;":"≒","&fcy;":"ф","&female;":"♀","&ffilig;":"ﬃ","&fflig;":"ﬀ","&ffllig;":"ﬄ","&ffr;":"𝔣","&filig;":"ﬁ","&fjlig;":"fj","&flat;":"♭","&fllig;":"ﬂ","&fltns;":"▱","&fnof;":"ƒ","&fopf;":"𝕗","&forall;":"∀","&fork;":"⋔","&forkv;":"⫙","&fpartint;":"⨍","&frac12":"½","&frac12;":"½","&frac13;":"⅓","&frac14":"¼","&frac14;":"¼","&frac15;":"⅕","&frac16;":"⅙","&frac18;":"⅛","&frac23;":"⅔","&frac25;":"⅖","&frac34":"¾","&frac34;":"¾","&frac35;":"⅗","&frac38;":"⅜","&frac45;":"⅘","&frac56;":"⅚","&frac58;":"⅝","&frac78;":"⅞","&frasl;":"⁄","&frown;":"⌢","&fscr;":"𝒻","&gE;":"≧","&gEl;":"⪌","&gacute;":"ǵ","&gamma;":"γ","&gammad;":"ϝ","&gap;":"⪆","&gbreve;":"ğ","&gcirc;":"ĝ","&gcy;":"г","&gdot;":"ġ","&ge;":"≥","&gel;":"⋛","&geq;":"≥","&geqq;":"≧","&geqslant;":"⩾","&ges;":"⩾","&gescc;":"⪩","&gesdot;":"⪀","&gesdoto;":"⪂","&gesdotol;":"⪄","&gesl;":"⋛︀","&gesles;":"⪔","&gfr;":"𝔤","&gg;":"≫","&ggg;":"⋙","&gimel;":"ℷ","&gjcy;":"ѓ","&gl;":"≷","&glE;":"⪒","&gla;":"⪥","&glj;":"⪤","&gnE;":"≩","&gnap;":"⪊","&gnapprox;":"⪊","&gne;":"⪈","&gneq;":"⪈","&gneqq;":"≩","&gnsim;":"⋧","&gopf;":"𝕘","&grave;":"`","&gscr;":"ℊ","&gsim;":"≳","&gsime;":"⪎","&gsiml;":"⪐","&gt":">","&gt;":">","&gtcc;":"⪧","&gtcir;":"⩺","&gtdot;":"⋗","&gtlPar;":"⦕","&gtquest;":"⩼","&gtrapprox;":"⪆","&gtrarr;":"⥸","&gtrdot;":"⋗","&gtreqless;":"⋛","&gtreqqless;":"⪌","&gtrless;":"≷","&gtrsim;":"≳","&gvertneqq;":"≩︀","&gvnE;":"≩︀","&hArr;":"⇔","&hairsp;":" ","&half;":"½","&hamilt;":"ℋ","&hardcy;":"ъ","&harr;":"↔","&harrcir;":"⥈","&harrw;":"↭","&hbar;":"ℏ","&hcirc;":"ĥ","&hearts;":"♥","&heartsuit;":"♥","&hellip;":"…","&hercon;":"⊹","&hfr;":"𝔥","&hksearow;":"⤥","&hkswarow;":"⤦","&hoarr;":"⇿","&homtht;":"∻","&hookleftarrow;":"↩","&hookrightarrow;":"↪","&hopf;":"𝕙","&horbar;":"―","&hscr;":"𝒽","&hslash;":"ℏ","&hstrok;":"ħ","&hybull;":"⁃","&hyphen;":"‐","&iacute":"í","&iacute;":"í","&ic;":"⁣","&icirc":"î","&icirc;":"î","&icy;":"и","&iecy;":"е","&iexcl":"¡","&iexcl;":"¡","&iff;":"⇔","&ifr;":"𝔦","&igrave":"ì","&igrave;":"ì","&ii;":"ⅈ","&iiiint;":"⨌","&iiint;":"∭","&iinfin;":"⧜","&iiota;":"℩","&ijlig;":"ĳ","&imacr;":"ī","&image;":"ℑ","&imagline;":"ℐ","&imagpart;":"ℑ","&imath;":"ı","&imof;":"⊷","&imped;":"Ƶ","&in;":"∈","&incare;":"℅","&infin;":"∞","&infintie;":"⧝","&inodot;":"ı","&int;":"∫","&intcal;":"⊺","&integers;":"ℤ","&intercal;":"⊺","&intlarhk;":"⨗","&intprod;":"⨼","&iocy;":"ё","&iogon;":"į","&iopf;":"𝕚","&iota;":"ι","&iprod;":"⨼","&iquest":"¿","&iquest;":"¿","&iscr;":"𝒾","&isin;":"∈","&isinE;":"⋹","&isindot;":"⋵","&isins;":"⋴","&isinsv;":"⋳","&isinv;":"∈","&it;":"⁢","&itilde;":"ĩ","&iukcy;":"і","&iuml":"ï","&iuml;":"ï","&jcirc;":"ĵ","&jcy;":"й","&jfr;":"𝔧","&jmath;":"ȷ","&jopf;":"𝕛","&jscr;":"𝒿","&jsercy;":"ј","&jukcy;":"є","&kappa;":"κ","&kappav;":"ϰ","&kcedil;":"ķ","&kcy;":"к","&kfr;":"𝔨","&kgreen;":"ĸ","&khcy;":"х","&kjcy;":"ќ","&kopf;":"𝕜","&kscr;":"𝓀","&lAarr;":"⇚","&lArr;":"⇐","&lAtail;":"⤛","&lBarr;":"⤎","&lE;":"≦","&lEg;":"⪋","&lHar;":"⥢","&lacute;":"ĺ","&laemptyv;":"⦴","&lagran;":"ℒ","&lambda;":"λ","&lang;":"⟨","&langd;":"⦑","&langle;":"⟨","&lap;":"⪅","&laquo":"«","&laquo;":"«","&larr;":"←","&larrb;":"⇤","&larrbfs;":"⤟","&larrfs;":"⤝","&larrhk;":"↩","&larrlp;":"↫","&larrpl;":"⤹","&larrsim;":"⥳","&larrtl;":"↢","&lat;":"⪫","&latail;":"⤙","&late;":"⪭","&lates;":"⪭︀","&lbarr;":"⤌","&lbbrk;":"❲","&lbrace;":"{","&lbrack;":"[","&lbrke;":"⦋","&lbrksld;":"⦏","&lbrkslu;":"⦍","&lcaron;":"ľ","&lcedil;":"ļ","&lceil;":"⌈","&lcub;":"{","&lcy;":"л","&ldca;":"⤶","&ldquo;":"“","&ldquor;":"„","&ldrdhar;":"⥧","&ldrushar;":"⥋","&ldsh;":"↲","&le;":"≤","&leftarrow;":"←","&leftarrowtail;":"↢","&leftharpoondown;":"↽","&leftharpoonup;":"↼","&leftleftarrows;":"⇇","&leftrightarrow;":"↔","&leftrightarrows;":"⇆","&leftrightharpoons;":"⇋","&leftrightsquigarrow;":"↭","&leftthreetimes;":"⋋","&leg;":"⋚","&leq;":"≤","&leqq;":"≦","&leqslant;":"⩽","&les;":"⩽","&lescc;":"⪨","&lesdot;":"⩿","&lesdoto;":"⪁","&lesdotor;":"⪃","&lesg;":"⋚︀","&lesges;":"⪓","&lessapprox;":"⪅","&lessdot;":"⋖","&lesseqgtr;":"⋚","&lesseqqgtr;":"⪋","&lessgtr;":"≶","&lesssim;":"≲","&lfisht;":"⥼","&lfloor;":"⌊","&lfr;":"𝔩","&lg;":"≶","&lgE;":"⪑","&lhard;":"↽","&lharu;":"↼","&lharul;":"⥪","&lhblk;":"▄","&ljcy;":"љ","&ll;":"≪","&llarr;":"⇇","&llcorner;":"⌞","&llhard;":"⥫","&lltri;":"◺","&lmidot;":"ŀ","&lmoust;":"⎰","&lmoustache;":"⎰","&lnE;":"≨","&lnap;":"⪉","&lnapprox;":"⪉","&lne;":"⪇","&lneq;":"⪇","&lneqq;":"≨","&lnsim;":"⋦","&loang;":"⟬","&loarr;":"⇽","&lobrk;":"⟦","&longleftarrow;":"⟵","&longleftrightarrow;":"⟷","&longmapsto;":"⟼","&longrightarrow;":"⟶","&looparrowleft;":"↫","&looparrowright;":"↬","&lopar;":"⦅","&lopf;":"𝕝","&loplus;":"⨭","&lotimes;":"⨴","&lowast;":"∗","&lowbar;":"_","&loz;":"◊","&lozenge;":"◊","&lozf;":"⧫","&lpar;":"(","&lparlt;":"⦓","&lrarr;":"⇆","&lrcorner;":"⌟","&lrhar;":"⇋","&lrhard;":"⥭","&lrm;":"‎","&lrtri;":"⊿","&lsaquo;":"‹","&lscr;":"𝓁","&lsh;":"↰","&lsim;":"≲","&lsime;":"⪍","&lsimg;":"⪏","&lsqb;":"[","&lsquo;":"‘","&lsquor;":"‚","&lstrok;":"ł","&lt":"<","&lt;":"<","&ltcc;":"⪦","&ltcir;":"⩹","&ltdot;":"⋖","&lthree;":"⋋","&ltimes;":"⋉","&ltlarr;":"⥶","&ltquest;":"⩻","&ltrPar;":"⦖","&ltri;":"◃","&ltrie;":"⊴","&ltrif;":"◂","&lurdshar;":"⥊","&luruhar;":"⥦","&lvertneqq;":"≨︀","&lvnE;":"≨︀","&mDDot;":"∺","&macr":"¯","&macr;":"¯","&male;":"♂","&malt;":"✠","&maltese;":"✠","&map;":"↦","&mapsto;":"↦","&mapstodown;":"↧","&mapstoleft;":"↤","&mapstoup;":"↥","&marker;":"▮","&mcomma;":"⨩","&mcy;":"м","&mdash;":"—","&measuredangle;":"∡","&mfr;":"𝔪","&mho;":"℧","&micro":"µ","&micro;":"µ","&mid;":"∣","&midast;":"*","&midcir;":"⫰","&middot":"·","&middot;":"·","&minus;":"−","&minusb;":"⊟","&minusd;":"∸","&minusdu;":"⨪","&mlcp;":"⫛","&mldr;":"…","&mnplus;":"∓","&models;":"⊧","&mopf;":"𝕞","&mp;":"∓","&mscr;":"𝓂","&mstpos;":"∾","&mu;":"μ","&multimap;":"⊸","&mumap;":"⊸","&nGg;":"⋙̸","&nGt;":"≫⃒","&nGtv;":"≫̸","&nLeftarrow;":"⇍","&nLeftrightarrow;":"⇎","&nLl;":"⋘̸","&nLt;":"≪⃒","&nLtv;":"≪̸","&nRightarrow;":"⇏","&nVDash;":"⊯","&nVdash;":"⊮","&nabla;":"∇","&nacute;":"ń","&nang;":"∠⃒","&nap;":"≉","&napE;":"⩰̸","&napid;":"≋̸","&napos;":"ŉ","&napprox;":"≉","&natur;":"♮","&natural;":"♮","&naturals;":"ℕ","&nbsp":" ","&nbsp;":" ","&nbump;":"≎̸","&nbumpe;":"≏̸","&ncap;":"⩃","&ncaron;":"ň","&ncedil;":"ņ","&ncong;":"≇","&ncongdot;":"⩭̸","&ncup;":"⩂","&ncy;":"н","&ndash;":"–","&ne;":"≠","&neArr;":"⇗","&nearhk;":"⤤","&nearr;":"↗","&nearrow;":"↗","&nedot;":"≐̸","&nequiv;":"≢","&nesear;":"⤨","&nesim;":"≂̸","&nexist;":"∄","&nexists;":"∄","&nfr;":"𝔫","&ngE;":"≧̸","&nge;":"≱","&ngeq;":"≱","&ngeqq;":"≧̸","&ngeqslant;":"⩾̸","&nges;":"⩾̸","&ngsim;":"≵","&ngt;":"≯","&ngtr;":"≯","&nhArr;":"⇎","&nharr;":"↮","&nhpar;":"⫲","&ni;":"∋","&nis;":"⋼","&nisd;":"⋺","&niv;":"∋","&njcy;":"њ","&nlArr;":"⇍","&nlE;":"≦̸","&nlarr;":"↚","&nldr;":"‥","&nle;":"≰","&nleftarrow;":"↚","&nleftrightarrow;":"↮","&nleq;":"≰","&nleqq;":"≦̸","&nleqslant;":"⩽̸","&nles;":"⩽̸","&nless;":"≮","&nlsim;":"≴","&nlt;":"≮","&nltri;":"⋪","&nltrie;":"⋬","&nmid;":"∤","&nopf;":"𝕟","&not":"¬","&not;":"¬","&notin;":"∉","&notinE;":"⋹̸","&notindot;":"⋵̸","&notinva;":"∉","&notinvb;":"⋷","&notinvc;":"⋶","&notni;":"∌","&notniva;":"∌","&notnivb;":"⋾","&notnivc;":"⋽","&npar;":"∦","&nparallel;":"∦","&nparsl;":"⫽⃥","&npart;":"∂̸","&npolint;":"⨔","&npr;":"⊀","&nprcue;":"⋠","&npre;":"⪯̸","&nprec;":"⊀","&npreceq;":"⪯̸","&nrArr;":"⇏","&nrarr;":"↛","&nrarrc;":"⤳̸","&nrarrw;":"↝̸","&nrightarrow;":"↛","&nrtri;":"⋫","&nrtrie;":"⋭","&nsc;":"⊁","&nsccue;":"⋡","&nsce;":"⪰̸","&nscr;":"𝓃","&nshortmid;":"∤","&nshortparallel;":"∦","&nsim;":"≁","&nsime;":"≄","&nsimeq;":"≄","&nsmid;":"∤","&nspar;":"∦","&nsqsube;":"⋢","&nsqsupe;":"⋣","&nsub;":"⊄","&nsubE;":"⫅̸","&nsube;":"⊈","&nsubset;":"⊂⃒","&nsubseteq;":"⊈","&nsubseteqq;":"⫅̸","&nsucc;":"⊁","&nsucceq;":"⪰̸","&nsup;":"⊅","&nsupE;":"⫆̸","&nsupe;":"⊉","&nsupset;":"⊃⃒","&nsupseteq;":"⊉","&nsupseteqq;":"⫆̸","&ntgl;":"≹","&ntilde":"ñ","&ntilde;":"ñ","&ntlg;":"≸","&ntriangleleft;":"⋪","&ntrianglelefteq;":"⋬","&ntriangleright;":"⋫","&ntrianglerighteq;":"⋭","&nu;":"ν","&num;":"#","&numero;":"№","&numsp;":" ","&nvDash;":"⊭","&nvHarr;":"⤄","&nvap;":"≍⃒","&nvdash;":"⊬","&nvge;":"≥⃒","&nvgt;":">⃒","&nvinfin;":"⧞","&nvlArr;":"⤂","&nvle;":"≤⃒","&nvlt;":"<⃒","&nvltrie;":"⊴⃒","&nvrArr;":"⤃","&nvrtrie;":"⊵⃒","&nvsim;":"∼⃒","&nwArr;":"⇖","&nwarhk;":"⤣","&nwarr;":"↖","&nwarrow;":"↖","&nwnear;":"⤧","&oS;":"Ⓢ","&oacute":"ó","&oacute;":"ó","&oast;":"⊛","&ocir;":"⊚","&ocirc":"ô","&ocirc;":"ô","&ocy;":"о","&odash;":"⊝","&odblac;":"ő","&odiv;":"⨸","&odot;":"⊙","&odsold;":"⦼","&oelig;":"œ","&ofcir;":"⦿","&ofr;":"𝔬","&ogon;":"˛","&ograve":"ò","&ograve;":"ò","&ogt;":"⧁","&ohbar;":"⦵","&ohm;":"Ω","&oint;":"∮","&olarr;":"↺","&olcir;":"⦾","&olcross;":"⦻","&oline;":"‾","&olt;":"⧀","&omacr;":"ō","&omega;":"ω","&omicron;":"ο","&omid;":"⦶","&ominus;":"⊖","&oopf;":"𝕠","&opar;":"⦷","&operp;":"⦹","&oplus;":"⊕","&or;":"∨","&orarr;":"↻","&ord;":"⩝","&order;":"ℴ","&orderof;":"ℴ","&ordf":"ª","&ordf;":"ª","&ordm":"º","&ordm;":"º","&origof;":"⊶","&oror;":"⩖","&orslope;":"⩗","&orv;":"⩛","&oscr;":"ℴ","&oslash":"ø","&oslash;":"ø","&osol;":"⊘","&otilde":"õ","&otilde;":"õ","&otimes;":"⊗","&otimesas;":"⨶","&ouml":"ö","&ouml;":"ö","&ovbar;":"⌽","&par;":"∥","&para":"¶","&para;":"¶","&parallel;":"∥","&parsim;":"⫳","&parsl;":"⫽","&part;":"∂","&pcy;":"п","&percnt;":"%","&period;":".","&permil;":"‰","&perp;":"⊥","&pertenk;":"‱","&pfr;":"𝔭","&phi;":"φ","&phiv;":"ϕ","&phmmat;":"ℳ","&phone;":"☎","&pi;":"π","&pitchfork;":"⋔","&piv;":"ϖ","&planck;":"ℏ","&planckh;":"ℎ","&plankv;":"ℏ","&plus;":"+","&plusacir;":"⨣","&plusb;":"⊞","&pluscir;":"⨢","&plusdo;":"∔","&plusdu;":"⨥","&pluse;":"⩲","&plusmn":"±","&plusmn;":"±","&plussim;":"⨦","&plustwo;":"⨧","&pm;":"±","&pointint;":"⨕","&popf;":"𝕡","&pound":"£","&pound;":"£","&pr;":"≺","&prE;":"⪳","&prap;":"⪷","&prcue;":"≼","&pre;":"⪯","&prec;":"≺","&precapprox;":"⪷","&preccurlyeq;":"≼","&preceq;":"⪯","&precnapprox;":"⪹","&precneqq;":"⪵","&precnsim;":"⋨","&precsim;":"≾","&prime;":"′","&primes;":"ℙ","&prnE;":"⪵","&prnap;":"⪹","&prnsim;":"⋨","&prod;":"∏","&profalar;":"⌮","&profline;":"⌒","&profsurf;":"⌓","&prop;":"∝","&propto;":"∝","&prsim;":"≾","&prurel;":"⊰","&pscr;":"𝓅","&psi;":"ψ","&puncsp;":" ","&qfr;":"𝔮","&qint;":"⨌","&qopf;":"𝕢","&qprime;":"⁗","&qscr;":"𝓆","&quaternions;":"ℍ","&quatint;":"⨖","&quest;":"?","&questeq;":"≟","&quot":'"',"&quot;":'"',"&rAarr;":"⇛","&rArr;":"⇒","&rAtail;":"⤜","&rBarr;":"⤏","&rHar;":"⥤","&race;":"∽̱","&racute;":"ŕ","&radic;":"√","&raemptyv;":"⦳","&rang;":"⟩","&rangd;":"⦒","&range;":"⦥","&rangle;":"⟩","&raquo":"»","&raquo;":"»","&rarr;":"→","&rarrap;":"⥵","&rarrb;":"⇥","&rarrbfs;":"⤠","&rarrc;":"⤳","&rarrfs;":"⤞","&rarrhk;":"↪","&rarrlp;":"↬","&rarrpl;":"⥅","&rarrsim;":"⥴","&rarrtl;":"↣","&rarrw;":"↝","&ratail;":"⤚","&ratio;":"∶","&rationals;":"ℚ","&rbarr;":"⤍","&rbbrk;":"❳","&rbrace;":"}","&rbrack;":"]","&rbrke;":"⦌","&rbrksld;":"⦎","&rbrkslu;":"⦐","&rcaron;":"ř","&rcedil;":"ŗ","&rceil;":"⌉","&rcub;":"}","&rcy;":"р","&rdca;":"⤷","&rdldhar;":"⥩","&rdquo;":"”","&rdquor;":"”","&rdsh;":"↳","&real;":"ℜ","&realine;":"ℛ","&realpart;":"ℜ","&reals;":"ℝ","&rect;":"▭","&reg":"®","&reg;":"®","&rfisht;":"⥽","&rfloor;":"⌋","&rfr;":"𝔯","&rhard;":"⇁","&rharu;":"⇀","&rharul;":"⥬","&rho;":"ρ","&rhov;":"ϱ","&rightarrow;":"→","&rightarrowtail;":"↣","&rightharpoondown;":"⇁","&rightharpoonup;":"⇀","&rightleftarrows;":"⇄","&rightleftharpoons;":"⇌","&rightrightarrows;":"⇉","&rightsquigarrow;":"↝","&rightthreetimes;":"⋌","&ring;":"˚","&risingdotseq;":"≓","&rlarr;":"⇄","&rlhar;":"⇌","&rlm;":"‏","&rmoust;":"⎱","&rmoustache;":"⎱","&rnmid;":"⫮","&roang;":"⟭","&roarr;":"⇾","&robrk;":"⟧","&ropar;":"⦆","&ropf;":"𝕣","&roplus;":"⨮","&rotimes;":"⨵","&rpar;":")","&rpargt;":"⦔","&rppolint;":"⨒","&rrarr;":"⇉","&rsaquo;":"›","&rscr;":"𝓇","&rsh;":"↱","&rsqb;":"]","&rsquo;":"’","&rsquor;":"’","&rthree;":"⋌","&rtimes;":"⋊","&rtri;":"▹","&rtrie;":"⊵","&rtrif;":"▸","&rtriltri;":"⧎","&ruluhar;":"⥨","&rx;":"℞","&sacute;":"ś","&sbquo;":"‚","&sc;":"≻","&scE;":"⪴","&scap;":"⪸","&scaron;":"š","&sccue;":"≽","&sce;":"⪰","&scedil;":"ş","&scirc;":"ŝ","&scnE;":"⪶","&scnap;":"⪺","&scnsim;":"⋩","&scpolint;":"⨓","&scsim;":"≿","&scy;":"с","&sdot;":"⋅","&sdotb;":"⊡","&sdote;":"⩦","&seArr;":"⇘","&searhk;":"⤥","&searr;":"↘","&searrow;":"↘","&sect":"§","&sect;":"§","&semi;":";","&seswar;":"⤩","&setminus;":"∖","&setmn;":"∖","&sext;":"✶","&sfr;":"𝔰","&sfrown;":"⌢","&sharp;":"♯","&shchcy;":"щ","&shcy;":"ш","&shortmid;":"∣","&shortparallel;":"∥","&shy":"­","&shy;":"­","&sigma;":"σ","&sigmaf;":"ς","&sigmav;":"ς","&sim;":"∼","&simdot;":"⩪","&sime;":"≃","&simeq;":"≃","&simg;":"⪞","&simgE;":"⪠","&siml;":"⪝","&simlE;":"⪟","&simne;":"≆","&simplus;":"⨤","&simrarr;":"⥲","&slarr;":"←","&smallsetminus;":"∖","&smashp;":"⨳","&smeparsl;":"⧤","&smid;":"∣","&smile;":"⌣","&smt;":"⪪","&smte;":"⪬","&smtes;":"⪬︀","&softcy;":"ь","&sol;":"/","&solb;":"⧄","&solbar;":"⌿","&sopf;":"𝕤","&spades;":"♠","&spadesuit;":"♠","&spar;":"∥","&sqcap;":"⊓","&sqcaps;":"⊓︀","&sqcup;":"⊔","&sqcups;":"⊔︀","&sqsub;":"⊏","&sqsube;":"⊑","&sqsubset;":"⊏","&sqsubseteq;":"⊑","&sqsup;":"⊐","&sqsupe;":"⊒","&sqsupset;":"⊐","&sqsupseteq;":"⊒","&squ;":"□","&square;":"□","&squarf;":"▪","&squf;":"▪","&srarr;":"→","&sscr;":"𝓈","&ssetmn;":"∖","&ssmile;":"⌣","&sstarf;":"⋆","&star;":"☆","&starf;":"★","&straightepsilon;":"ϵ","&straightphi;":"ϕ","&strns;":"¯","&sub;":"⊂","&subE;":"⫅","&subdot;":"⪽","&sube;":"⊆","&subedot;":"⫃","&submult;":"⫁","&subnE;":"⫋","&subne;":"⊊","&subplus;":"⪿","&subrarr;":"⥹","&subset;":"⊂","&subseteq;":"⊆","&subseteqq;":"⫅","&subsetneq;":"⊊","&subsetneqq;":"⫋","&subsim;":"⫇","&subsub;":"⫕","&subsup;":"⫓","&succ;":"≻","&succapprox;":"⪸","&succcurlyeq;":"≽","&succeq;":"⪰","&succnapprox;":"⪺","&succneqq;":"⪶","&succnsim;":"⋩","&succsim;":"≿","&sum;":"∑","&sung;":"♪","&sup1":"¹","&sup1;":"¹","&sup2":"²","&sup2;":"²","&sup3":"³","&sup3;":"³","&sup;":"⊃","&supE;":"⫆","&supdot;":"⪾","&supdsub;":"⫘","&supe;":"⊇","&supedot;":"⫄","&suphsol;":"⟉","&suphsub;":"⫗","&suplarr;":"⥻","&supmult;":"⫂","&supnE;":"⫌","&supne;":"⊋","&supplus;":"⫀","&supset;":"⊃","&supseteq;":"⊇","&supseteqq;":"⫆","&supsetneq;":"⊋","&supsetneqq;":"⫌","&supsim;":"⫈","&supsub;":"⫔","&supsup;":"⫖","&swArr;":"⇙","&swarhk;":"⤦","&swarr;":"↙","&swarrow;":"↙","&swnwar;":"⤪","&szlig":"ß","&szlig;":"ß","&target;":"⌖","&tau;":"τ","&tbrk;":"⎴","&tcaron;":"ť","&tcedil;":"ţ","&tcy;":"т","&tdot;":"⃛","&telrec;":"⌕","&tfr;":"𝔱","&there4;":"∴","&therefore;":"∴","&theta;":"θ","&thetasym;":"ϑ","&thetav;":"ϑ","&thickapprox;":"≈","&thicksim;":"∼","&thinsp;":" ","&thkap;":"≈","&thksim;":"∼","&thorn":"þ","&thorn;":"þ","&tilde;":"˜","&times":"×","&times;":"×","&timesb;":"⊠","&timesbar;":"⨱","&timesd;":"⨰","&tint;":"∭","&toea;":"⤨","&top;":"⊤","&topbot;":"⌶","&topcir;":"⫱","&topf;":"𝕥","&topfork;":"⫚","&tosa;":"⤩","&tprime;":"‴","&trade;":"™","&triangle;":"▵","&triangledown;":"▿","&triangleleft;":"◃","&trianglelefteq;":"⊴","&triangleq;":"≜","&triangleright;":"▹","&trianglerighteq;":"⊵","&tridot;":"◬","&trie;":"≜","&triminus;":"⨺","&triplus;":"⨹","&trisb;":"⧍","&tritime;":"⨻","&trpezium;":"⏢","&tscr;":"𝓉","&tscy;":"ц","&tshcy;":"ћ","&tstrok;":"ŧ","&twixt;":"≬","&twoheadleftarrow;":"↞","&twoheadrightarrow;":"↠","&uArr;":"⇑","&uHar;":"⥣","&uacute":"ú","&uacute;":"ú","&uarr;":"↑","&ubrcy;":"ў","&ubreve;":"ŭ","&ucirc":"û","&ucirc;":"û","&ucy;":"у","&udarr;":"⇅","&udblac;":"ű","&udhar;":"⥮","&ufisht;":"⥾","&ufr;":"𝔲","&ugrave":"ù","&ugrave;":"ù","&uharl;":"↿","&uharr;":"↾","&uhblk;":"▀","&ulcorn;":"⌜","&ulcorner;":"⌜","&ulcrop;":"⌏","&ultri;":"◸","&umacr;":"ū","&uml":"¨","&uml;":"¨","&uogon;":"ų","&uopf;":"𝕦","&uparrow;":"↑","&updownarrow;":"↕","&upharpoonleft;":"↿","&upharpoonright;":"↾","&uplus;":"⊎","&upsi;":"υ","&upsih;":"ϒ","&upsilon;":"υ","&upuparrows;":"⇈","&urcorn;":"⌝","&urcorner;":"⌝","&urcrop;":"⌎","&uring;":"ů","&urtri;":"◹","&uscr;":"𝓊","&utdot;":"⋰","&utilde;":"ũ","&utri;":"▵","&utrif;":"▴","&uuarr;":"⇈","&uuml":"ü","&uuml;":"ü","&uwangle;":"⦧","&vArr;":"⇕","&vBar;":"⫨","&vBarv;":"⫩","&vDash;":"⊨","&vangrt;":"⦜","&varepsilon;":"ϵ","&varkappa;":"ϰ","&varnothing;":"∅","&varphi;":"ϕ","&varpi;":"ϖ","&varpropto;":"∝","&varr;":"↕","&varrho;":"ϱ","&varsigma;":"ς","&varsubsetneq;":"⊊︀","&varsubsetneqq;":"⫋︀","&varsupsetneq;":"⊋︀","&varsupsetneqq;":"⫌︀","&vartheta;":"ϑ","&vartriangleleft;":"⊲","&vartriangleright;":"⊳","&vcy;":"в","&vdash;":"⊢","&vee;":"∨","&veebar;":"⊻","&veeeq;":"≚","&vellip;":"⋮","&verbar;":"|","&vert;":"|","&vfr;":"𝔳","&vltri;":"⊲","&vnsub;":"⊂⃒","&vnsup;":"⊃⃒","&vopf;":"𝕧","&vprop;":"∝","&vrtri;":"⊳","&vscr;":"𝓋","&vsubnE;":"⫋︀","&vsubne;":"⊊︀","&vsupnE;":"⫌︀","&vsupne;":"⊋︀","&vzigzag;":"⦚","&wcirc;":"ŵ","&wedbar;":"⩟","&wedge;":"∧","&wedgeq;":"≙","&weierp;":"℘","&wfr;":"𝔴","&wopf;":"𝕨","&wp;":"℘","&wr;":"≀","&wreath;":"≀","&wscr;":"𝓌","&xcap;":"⋂","&xcirc;":"◯","&xcup;":"⋃","&xdtri;":"▽","&xfr;":"𝔵","&xhArr;":"⟺","&xharr;":"⟷","&xi;":"ξ","&xlArr;":"⟸","&xlarr;":"⟵","&xmap;":"⟼","&xnis;":"⋻","&xodot;":"⨀","&xopf;":"𝕩","&xoplus;":"⨁","&xotime;":"⨂","&xrArr;":"⟹","&xrarr;":"⟶","&xscr;":"𝓍","&xsqcup;":"⨆","&xuplus;":"⨄","&xutri;":"△","&xvee;":"⋁","&xwedge;":"⋀","&yacute":"ý","&yacute;":"ý","&yacy;":"я","&ycirc;":"ŷ","&ycy;":"ы","&yen":"¥","&yen;":"¥","&yfr;":"𝔶","&yicy;":"ї","&yopf;":"𝕪","&yscr;":"𝓎","&yucy;":"ю","&yuml":"ÿ","&yuml;":"ÿ","&zacute;":"ź","&zcaron;":"ž","&zcy;":"з","&zdot;":"ż","&zeetrf;":"ℨ","&zeta;":"ζ","&zfr;":"𝔷","&zhcy;":"ж","&zigrarr;":"⇝","&zopf;":"𝕫","&zscr;":"𝓏","&zwj;":"‍","&zwnj;":"‌"},characters:{"Æ":"&AElig;","&":"&amp;","Á":"&Aacute;","Ă":"&Abreve;","Â":"&Acirc;","А":"&Acy;","𝔄":"&Afr;","À":"&Agrave;","Α":"&Alpha;","Ā":"&Amacr;","⩓":"&And;","Ą":"&Aogon;","𝔸":"&Aopf;","⁡":"&af;","Å":"&angst;","𝒜":"&Ascr;","≔":"&coloneq;","Ã":"&Atilde;","Ä":"&Auml;","∖":"&ssetmn;","⫧":"&Barv;","⌆":"&doublebarwedge;","Б":"&Bcy;","∵":"&because;","ℬ":"&bernou;","Β":"&Beta;","𝔅":"&Bfr;","𝔹":"&Bopf;","˘":"&breve;","≎":"&bump;","Ч":"&CHcy;","©":"&copy;","Ć":"&Cacute;","⋒":"&Cap;","ⅅ":"&DD;","ℭ":"&Cfr;","Č":"&Ccaron;","Ç":"&Ccedil;","Ĉ":"&Ccirc;","∰":"&Cconint;","Ċ":"&Cdot;","¸":"&cedil;","·":"&middot;","Χ":"&Chi;","⊙":"&odot;","⊖":"&ominus;","⊕":"&oplus;","⊗":"&otimes;","∲":"&cwconint;","”":"&rdquor;","’":"&rsquor;","∷":"&Proportion;","⩴":"&Colone;","≡":"&equiv;","∯":"&DoubleContourIntegral;","∮":"&oint;","ℂ":"&complexes;","∐":"&coprod;","∳":"&awconint;","⨯":"&Cross;","𝒞":"&Cscr;","⋓":"&Cup;","≍":"&asympeq;","⤑":"&DDotrahd;","Ђ":"&DJcy;","Ѕ":"&DScy;","Џ":"&DZcy;","‡":"&ddagger;","↡":"&Darr;","⫤":"&DoubleLeftTee;","Ď":"&Dcaron;","Д":"&Dcy;","∇":"&nabla;","Δ":"&Delta;","𝔇":"&Dfr;","´":"&acute;","˙":"&dot;","˝":"&dblac;","`":"&grave;","˜":"&tilde;","⋄":"&diamond;","ⅆ":"&dd;","𝔻":"&Dopf;","¨":"&uml;","⃜":"&DotDot;","≐":"&esdot;","⇓":"&dArr;","⇐":"&lArr;","⇔":"&iff;","⟸":"&xlArr;","⟺":"&xhArr;","⟹":"&xrArr;","⇒":"&rArr;","⊨":"&vDash;","⇑":"&uArr;","⇕":"&vArr;","∥":"&spar;","↓":"&downarrow;","⤓":"&DownArrowBar;","⇵":"&duarr;","̑":"&DownBreve;","⥐":"&DownLeftRightVector;","⥞":"&DownLeftTeeVector;","↽":"&lhard;","⥖":"&DownLeftVectorBar;","⥟":"&DownRightTeeVector;","⇁":"&rightharpoondown;","⥗":"&DownRightVectorBar;","⊤":"&top;","↧":"&mapstodown;","𝒟":"&Dscr;","Đ":"&Dstrok;","Ŋ":"&ENG;","Ð":"&ETH;","É":"&Eacute;","Ě":"&Ecaron;","Ê":"&Ecirc;","Э":"&Ecy;","Ė":"&Edot;","𝔈":"&Efr;","È":"&Egrave;","∈":"&isinv;","Ē":"&Emacr;","◻":"&EmptySmallSquare;","▫":"&EmptyVerySmallSquare;","Ę":"&Eogon;","𝔼":"&Eopf;","Ε":"&Epsilon;","⩵":"&Equal;","≂":"&esim;","⇌":"&rlhar;","ℰ":"&expectation;","⩳":"&Esim;","Η":"&Eta;","Ë":"&Euml;","∃":"&exist;","ⅇ":"&exponentiale;","Ф":"&Fcy;","𝔉":"&Ffr;","◼":"&FilledSmallSquare;","▪":"&squf;","𝔽":"&Fopf;","∀":"&forall;","ℱ":"&Fscr;","Ѓ":"&GJcy;",">":"&gt;","Γ":"&Gamma;","Ϝ":"&Gammad;","Ğ":"&Gbreve;","Ģ":"&Gcedil;","Ĝ":"&Gcirc;","Г":"&Gcy;","Ġ":"&Gdot;","𝔊":"&Gfr;","⋙":"&ggg;","𝔾":"&Gopf;","≥":"&geq;","⋛":"&gtreqless;","≧":"&geqq;","⪢":"&GreaterGreater;","≷":"&gtrless;","⩾":"&ges;","≳":"&gtrsim;","𝒢":"&Gscr;","≫":"&gg;","Ъ":"&HARDcy;","ˇ":"&caron;","^":"&Hat;","Ĥ":"&Hcirc;","ℌ":"&Poincareplane;","ℋ":"&hamilt;","ℍ":"&quaternions;","─":"&boxh;","Ħ":"&Hstrok;","≏":"&bumpeq;","Е":"&IEcy;","Ĳ":"&IJlig;","Ё":"&IOcy;","Í":"&Iacute;","Î":"&Icirc;","И":"&Icy;","İ":"&Idot;","ℑ":"&imagpart;","Ì":"&Igrave;","Ī":"&Imacr;","ⅈ":"&ii;","∬":"&Int;","∫":"&int;","⋂":"&xcap;","⁣":"&ic;","⁢":"&it;","Į":"&Iogon;","𝕀":"&Iopf;","Ι":"&Iota;","ℐ":"&imagline;","Ĩ":"&Itilde;","І":"&Iukcy;","Ï":"&Iuml;","Ĵ":"&Jcirc;","Й":"&Jcy;","𝔍":"&Jfr;","𝕁":"&Jopf;","𝒥":"&Jscr;","Ј":"&Jsercy;","Є":"&Jukcy;","Х":"&KHcy;","Ќ":"&KJcy;","Κ":"&Kappa;","Ķ":"&Kcedil;","К":"&Kcy;","𝔎":"&Kfr;","𝕂":"&Kopf;","𝒦":"&Kscr;","Љ":"&LJcy;","<":"&lt;","Ĺ":"&Lacute;","Λ":"&Lambda;","⟪":"&Lang;","ℒ":"&lagran;","↞":"&twoheadleftarrow;","Ľ":"&Lcaron;","Ļ":"&Lcedil;","Л":"&Lcy;","⟨":"&langle;","←":"&slarr;","⇤":"&larrb;","⇆":"&lrarr;","⌈":"&lceil;","⟦":"&lobrk;","⥡":"&LeftDownTeeVector;","⇃":"&downharpoonleft;","⥙":"&LeftDownVectorBar;","⌊":"&lfloor;","↔":"&leftrightarrow;","⥎":"&LeftRightVector;","⊣":"&dashv;","↤":"&mapstoleft;","⥚":"&LeftTeeVector;","⊲":"&vltri;","⧏":"&LeftTriangleBar;","⊴":"&trianglelefteq;","⥑":"&LeftUpDownVector;","⥠":"&LeftUpTeeVector;","↿":"&upharpoonleft;","⥘":"&LeftUpVectorBar;","↼":"&lharu;","⥒":"&LeftVectorBar;","⋚":"&lesseqgtr;","≦":"&leqq;","≶":"&lg;","⪡":"&LessLess;","⩽":"&les;","≲":"&lsim;","𝔏":"&Lfr;","⋘":"&Ll;","⇚":"&lAarr;","Ŀ":"&Lmidot;","⟵":"&xlarr;","⟷":"&xharr;","⟶":"&xrarr;","𝕃":"&Lopf;","↙":"&swarrow;","↘":"&searrow;","↰":"&lsh;","Ł":"&Lstrok;","≪":"&ll;","⤅":"&Map;","М":"&Mcy;"," ":"&MediumSpace;","ℳ":"&phmmat;","𝔐":"&Mfr;","∓":"&mp;","𝕄":"&Mopf;","Μ":"&Mu;","Њ":"&NJcy;","Ń":"&Nacute;","Ň":"&Ncaron;","Ņ":"&Ncedil;","Н":"&Ncy;","​":"&ZeroWidthSpace;","\n":"&NewLine;","𝔑":"&Nfr;","⁠":"&NoBreak;"," ":"&nbsp;","ℕ":"&naturals;","⫬":"&Not;","≢":"&nequiv;","≭":"&NotCupCap;","∦":"&nspar;","∉":"&notinva;","≠":"&ne;","≂̸":"&nesim;","∄":"&nexists;","≯":"&ngtr;","≱":"&ngeq;","≧̸":"&ngeqq;","≫̸":"&nGtv;","≹":"&ntgl;","⩾̸":"&nges;","≵":"&ngsim;","≎̸":"&nbump;","≏̸":"&nbumpe;","⋪":"&ntriangleleft;","⧏̸":"&NotLeftTriangleBar;","⋬":"&ntrianglelefteq;","≮":"&nlt;","≰":"&nleq;","≸":"&ntlg;","≪̸":"&nLtv;","⩽̸":"&nles;","≴":"&nlsim;","⪢̸":"&NotNestedGreaterGreater;","⪡̸":"&NotNestedLessLess;","⊀":"&nprec;","⪯̸":"&npreceq;","⋠":"&nprcue;","∌":"&notniva;","⋫":"&ntriangleright;","⧐̸":"&NotRightTriangleBar;","⋭":"&ntrianglerighteq;","⊏̸":"&NotSquareSubset;","⋢":"&nsqsube;","⊐̸":"&NotSquareSuperset;","⋣":"&nsqsupe;","⊂⃒":"&vnsub;","⊈":"&nsubseteq;","⊁":"&nsucc;","⪰̸":"&nsucceq;","⋡":"&nsccue;","≿̸":"&NotSucceedsTilde;","⊃⃒":"&vnsup;","⊉":"&nsupseteq;","≁":"&nsim;","≄":"&nsimeq;","≇":"&ncong;","≉":"&napprox;","∤":"&nsmid;","𝒩":"&Nscr;","Ñ":"&Ntilde;","Ν":"&Nu;","Œ":"&OElig;","Ó":"&Oacute;","Ô":"&Ocirc;","О":"&Ocy;","Ő":"&Odblac;","𝔒":"&Ofr;","Ò":"&Ograve;","Ō":"&Omacr;","Ω":"&ohm;","Ο":"&Omicron;","𝕆":"&Oopf;","“":"&ldquo;","‘":"&lsquo;","⩔":"&Or;","𝒪":"&Oscr;","Ø":"&Oslash;","Õ":"&Otilde;","⨷":"&Otimes;","Ö":"&Ouml;","‾":"&oline;","⏞":"&OverBrace;","⎴":"&tbrk;","⏜":"&OverParenthesis;","∂":"&part;","П":"&Pcy;","𝔓":"&Pfr;","Φ":"&Phi;","Π":"&Pi;","±":"&pm;","ℙ":"&primes;","⪻":"&Pr;","≺":"&prec;","⪯":"&preceq;","≼":"&preccurlyeq;","≾":"&prsim;","″":"&Prime;","∏":"&prod;","∝":"&vprop;","𝒫":"&Pscr;","Ψ":"&Psi;",'"':"&quot;","𝔔":"&Qfr;","ℚ":"&rationals;","𝒬":"&Qscr;","⤐":"&drbkarow;","®":"&reg;","Ŕ":"&Racute;","⟫":"&Rang;","↠":"&twoheadrightarrow;","⤖":"&Rarrtl;","Ř":"&Rcaron;","Ŗ":"&Rcedil;","Р":"&Rcy;","ℜ":"&realpart;","∋":"&niv;","⇋":"&lrhar;","⥯":"&duhar;","Ρ":"&Rho;","⟩":"&rangle;","→":"&srarr;","⇥":"&rarrb;","⇄":"&rlarr;","⌉":"&rceil;","⟧":"&robrk;","⥝":"&RightDownTeeVector;","⇂":"&downharpoonright;","⥕":"&RightDownVectorBar;","⌋":"&rfloor;","⊢":"&vdash;","↦":"&mapsto;","⥛":"&RightTeeVector;","⊳":"&vrtri;","⧐":"&RightTriangleBar;","⊵":"&trianglerighteq;","⥏":"&RightUpDownVector;","⥜":"&RightUpTeeVector;","↾":"&upharpoonright;","⥔":"&RightUpVectorBar;","⇀":"&rightharpoonup;","⥓":"&RightVectorBar;","ℝ":"&reals;","⥰":"&RoundImplies;","⇛":"&rAarr;","ℛ":"&realine;","↱":"&rsh;","⧴":"&RuleDelayed;","Щ":"&SHCHcy;","Ш":"&SHcy;","Ь":"&SOFTcy;","Ś":"&Sacute;","⪼":"&Sc;","Š":"&Scaron;","Ş":"&Scedil;","Ŝ":"&Scirc;","С":"&Scy;","𝔖":"&Sfr;","↑":"&uparrow;","Σ":"&Sigma;","∘":"&compfn;","𝕊":"&Sopf;","√":"&radic;","□":"&square;","⊓":"&sqcap;","⊏":"&sqsubset;","⊑":"&sqsubseteq;","⊐":"&sqsupset;","⊒":"&sqsupseteq;","⊔":"&sqcup;","𝒮":"&Sscr;","⋆":"&sstarf;","⋐":"&Subset;","⊆":"&subseteq;","≻":"&succ;","⪰":"&succeq;","≽":"&succcurlyeq;","≿":"&succsim;","∑":"&sum;","⋑":"&Supset;","⊃":"&supset;","⊇":"&supseteq;","Þ":"&THORN;","™":"&trade;","Ћ":"&TSHcy;","Ц":"&TScy;","\t":"&Tab;","Τ":"&Tau;","Ť":"&Tcaron;","Ţ":"&Tcedil;","Т":"&Tcy;","𝔗":"&Tfr;","∴":"&therefore;","Θ":"&Theta;","  ":"&ThickSpace;"," ":"&thinsp;","∼":"&thksim;","≃":"&simeq;","≅":"&cong;","≈":"&thkap;","𝕋":"&Topf;","⃛":"&tdot;","𝒯":"&Tscr;","Ŧ":"&Tstrok;","Ú":"&Uacute;","↟":"&Uarr;","⥉":"&Uarrocir;","Ў":"&Ubrcy;","Ŭ":"&Ubreve;","Û":"&Ucirc;","У":"&Ucy;","Ű":"&Udblac;","𝔘":"&Ufr;","Ù":"&Ugrave;","Ū":"&Umacr;",_:"&lowbar;","⏟":"&UnderBrace;","⎵":"&bbrk;","⏝":"&UnderParenthesis;","⋃":"&xcup;","⊎":"&uplus;","Ų":"&Uogon;","𝕌":"&Uopf;","⤒":"&UpArrowBar;","⇅":"&udarr;","↕":"&varr;","⥮":"&udhar;","⊥":"&perp;","↥":"&mapstoup;","↖":"&nwarrow;","↗":"&nearrow;","ϒ":"&upsih;","Υ":"&Upsilon;","Ů":"&Uring;","𝒰":"&Uscr;","Ũ":"&Utilde;","Ü":"&Uuml;","⊫":"&VDash;","⫫":"&Vbar;","В":"&Vcy;","⊩":"&Vdash;","⫦":"&Vdashl;","⋁":"&xvee;","‖":"&Vert;","∣":"&smid;","|":"&vert;","❘":"&VerticalSeparator;","≀":"&wreath;"," ":"&hairsp;","𝔙":"&Vfr;","𝕍":"&Vopf;","𝒱":"&Vscr;","⊪":"&Vvdash;","Ŵ":"&Wcirc;","⋀":"&xwedge;","𝔚":"&Wfr;","𝕎":"&Wopf;","𝒲":"&Wscr;","𝔛":"&Xfr;","Ξ":"&Xi;","𝕏":"&Xopf;","𝒳":"&Xscr;","Я":"&YAcy;","Ї":"&YIcy;","Ю":"&YUcy;","Ý":"&Yacute;","Ŷ":"&Ycirc;","Ы":"&Ycy;","𝔜":"&Yfr;","𝕐":"&Yopf;","𝒴":"&Yscr;","Ÿ":"&Yuml;","Ж":"&ZHcy;","Ź":"&Zacute;","Ž":"&Zcaron;","З":"&Zcy;","Ż":"&Zdot;","Ζ":"&Zeta;","ℨ":"&zeetrf;","ℤ":"&integers;","𝒵":"&Zscr;","á":"&aacute;","ă":"&abreve;","∾":"&mstpos;","∾̳":"&acE;","∿":"&acd;","â":"&acirc;","а":"&acy;","æ":"&aelig;","𝔞":"&afr;","à":"&agrave;","ℵ":"&aleph;","α":"&alpha;","ā":"&amacr;","⨿":"&amalg;","∧":"&wedge;","⩕":"&andand;","⩜":"&andd;","⩘":"&andslope;","⩚":"&andv;","∠":"&angle;","⦤":"&ange;","∡":"&measuredangle;","⦨":"&angmsdaa;","⦩":"&angmsdab;","⦪":"&angmsdac;","⦫":"&angmsdad;","⦬":"&angmsdae;","⦭":"&angmsdaf;","⦮":"&angmsdag;","⦯":"&angmsdah;","∟":"&angrt;","⊾":"&angrtvb;","⦝":"&angrtvbd;","∢":"&angsph;","⍼":"&angzarr;","ą":"&aogon;","𝕒":"&aopf;","⩰":"&apE;","⩯":"&apacir;","≊":"&approxeq;","≋":"&apid;","'":"&apos;","å":"&aring;","𝒶":"&ascr;","*":"&midast;","ã":"&atilde;","ä":"&auml;","⨑":"&awint;","⫭":"&bNot;","≌":"&bcong;","϶":"&bepsi;","‵":"&bprime;","∽":"&bsim;","⋍":"&bsime;","⊽":"&barvee;","⌅":"&barwedge;","⎶":"&bbrktbrk;","б":"&bcy;","„":"&ldquor;","⦰":"&bemptyv;","β":"&beta;","ℶ":"&beth;","≬":"&twixt;","𝔟":"&bfr;","◯":"&xcirc;","⨀":"&xodot;","⨁":"&xoplus;","⨂":"&xotime;","⨆":"&xsqcup;","★":"&starf;","▽":"&xdtri;","△":"&xutri;","⨄":"&xuplus;","⤍":"&rbarr;","⧫":"&lozf;","▴":"&utrif;","▾":"&dtrif;","◂":"&ltrif;","▸":"&rtrif;","␣":"&blank;","▒":"&blk12;","░":"&blk14;","▓":"&blk34;","█":"&block;","=⃥":"&bne;","≡⃥":"&bnequiv;","⌐":"&bnot;","𝕓":"&bopf;","⋈":"&bowtie;","╗":"&boxDL;","╔":"&boxDR;","╖":"&boxDl;","╓":"&boxDr;","═":"&boxH;","╦":"&boxHD;","╩":"&boxHU;","╤":"&boxHd;","╧":"&boxHu;","╝":"&boxUL;","╚":"&boxUR;","╜":"&boxUl;","╙":"&boxUr;","║":"&boxV;","╬":"&boxVH;","╣":"&boxVL;","╠":"&boxVR;","╫":"&boxVh;","╢":"&boxVl;","╟":"&boxVr;","⧉":"&boxbox;","╕":"&boxdL;","╒":"&boxdR;","┐":"&boxdl;","┌":"&boxdr;","╥":"&boxhD;","╨":"&boxhU;","┬":"&boxhd;","┴":"&boxhu;","⊟":"&minusb;","⊞":"&plusb;","⊠":"&timesb;","╛":"&boxuL;","╘":"&boxuR;","┘":"&boxul;","└":"&boxur;","│":"&boxv;","╪":"&boxvH;","╡":"&boxvL;","╞":"&boxvR;","┼":"&boxvh;","┤":"&boxvl;","├":"&boxvr;","¦":"&brvbar;","𝒷":"&bscr;","⁏":"&bsemi;","\\":"&bsol;","⧅":"&bsolb;","⟈":"&bsolhsub;","•":"&bullet;","⪮":"&bumpE;","ć":"&cacute;","∩":"&cap;","⩄":"&capand;","⩉":"&capbrcup;","⩋":"&capcap;","⩇":"&capcup;","⩀":"&capdot;","∩︀":"&caps;","⁁":"&caret;","⩍":"&ccaps;","č":"&ccaron;","ç":"&ccedil;","ĉ":"&ccirc;","⩌":"&ccups;","⩐":"&ccupssm;","ċ":"&cdot;","⦲":"&cemptyv;","¢":"&cent;","𝔠":"&cfr;","ч":"&chcy;","✓":"&checkmark;","χ":"&chi;","○":"&cir;","⧃":"&cirE;","ˆ":"&circ;","≗":"&cire;","↺":"&olarr;","↻":"&orarr;","Ⓢ":"&oS;","⊛":"&oast;","⊚":"&ocir;","⊝":"&odash;","⨐":"&cirfnint;","⫯":"&cirmid;","⧂":"&cirscir;","♣":"&clubsuit;",":":"&colon;",",":"&comma;","@":"&commat;","∁":"&complement;","⩭":"&congdot;","𝕔":"&copf;","℗":"&copysr;","↵":"&crarr;","✗":"&cross;","𝒸":"&cscr;","⫏":"&csub;","⫑":"&csube;","⫐":"&csup;","⫒":"&csupe;","⋯":"&ctdot;","⤸":"&cudarrl;","⤵":"&cudarrr;","⋞":"&curlyeqprec;","⋟":"&curlyeqsucc;","↶":"&curvearrowleft;","⤽":"&cularrp;","∪":"&cup;","⩈":"&cupbrcap;","⩆":"&cupcap;","⩊":"&cupcup;","⊍":"&cupdot;","⩅":"&cupor;","∪︀":"&cups;","↷":"&curvearrowright;","⤼":"&curarrm;","⋎":"&cuvee;","⋏":"&cuwed;","¤":"&curren;","∱":"&cwint;","⌭":"&cylcty;","⥥":"&dHar;","†":"&dagger;","ℸ":"&daleth;","‐":"&hyphen;","⤏":"&rBarr;","ď":"&dcaron;","д":"&dcy;","⇊":"&downdownarrows;","⩷":"&eDDot;","°":"&deg;","δ":"&delta;","⦱":"&demptyv;","⥿":"&dfisht;","𝔡":"&dfr;","♦":"&diams;","ϝ":"&gammad;","⋲":"&disin;","÷":"&divide;","⋇":"&divonx;","ђ":"&djcy;","⌞":"&llcorner;","⌍":"&dlcrop;",$:"&dollar;","𝕕":"&dopf;","≑":"&eDot;","∸":"&minusd;","∔":"&plusdo;","⊡":"&sdotb;","⌟":"&lrcorner;","⌌":"&drcrop;","𝒹":"&dscr;","ѕ":"&dscy;","⧶":"&dsol;","đ":"&dstrok;","⋱":"&dtdot;","▿":"&triangledown;","⦦":"&dwangle;","џ":"&dzcy;","⟿":"&dzigrarr;","é":"&eacute;","⩮":"&easter;","ě":"&ecaron;","≖":"&eqcirc;","ê":"&ecirc;","≕":"&eqcolon;","э":"&ecy;","ė":"&edot;","≒":"&fallingdotseq;","𝔢":"&efr;","⪚":"&eg;","è":"&egrave;","⪖":"&eqslantgtr;","⪘":"&egsdot;","⪙":"&el;","⏧":"&elinters;","ℓ":"&ell;","⪕":"&eqslantless;","⪗":"&elsdot;","ē":"&emacr;","∅":"&varnothing;"," ":"&emsp13;"," ":"&emsp14;"," ":"&emsp;","ŋ":"&eng;"," ":"&ensp;","ę":"&eogon;","𝕖":"&eopf;","⋕":"&epar;","⧣":"&eparsl;","⩱":"&eplus;","ε":"&epsilon;","ϵ":"&varepsilon;","=":"&equals;","≟":"&questeq;","⩸":"&equivDD;","⧥":"&eqvparsl;","≓":"&risingdotseq;","⥱":"&erarr;","ℯ":"&escr;","η":"&eta;","ð":"&eth;","ë":"&euml;","€":"&euro;","!":"&excl;","ф":"&fcy;","♀":"&female;","ﬃ":"&ffilig;","ﬀ":"&fflig;","ﬄ":"&ffllig;","𝔣":"&ffr;","ﬁ":"&filig;",fj:"&fjlig;","♭":"&flat;","ﬂ":"&fllig;","▱":"&fltns;","ƒ":"&fnof;","𝕗":"&fopf;","⋔":"&pitchfork;","⫙":"&forkv;","⨍":"&fpartint;","½":"&half;","⅓":"&frac13;","¼":"&frac14;","⅕":"&frac15;","⅙":"&frac16;","⅛":"&frac18;","⅔":"&frac23;","⅖":"&frac25;","¾":"&frac34;","⅗":"&frac35;","⅜":"&frac38;","⅘":"&frac45;","⅚":"&frac56;","⅝":"&frac58;","⅞":"&frac78;","⁄":"&frasl;","⌢":"&sfrown;","𝒻":"&fscr;","⪌":"&gtreqqless;","ǵ":"&gacute;","γ":"&gamma;","⪆":"&gtrapprox;","ğ":"&gbreve;","ĝ":"&gcirc;","г":"&gcy;","ġ":"&gdot;","⪩":"&gescc;","⪀":"&gesdot;","⪂":"&gesdoto;","⪄":"&gesdotol;","⋛︀":"&gesl;","⪔":"&gesles;","𝔤":"&gfr;","ℷ":"&gimel;","ѓ":"&gjcy;","⪒":"&glE;","⪥":"&gla;","⪤":"&glj;","≩":"&gneqq;","⪊":"&gnapprox;","⪈":"&gneq;","⋧":"&gnsim;","𝕘":"&gopf;","ℊ":"&gscr;","⪎":"&gsime;","⪐":"&gsiml;","⪧":"&gtcc;","⩺":"&gtcir;","⋗":"&gtrdot;","⦕":"&gtlPar;","⩼":"&gtquest;","⥸":"&gtrarr;","≩︀":"&gvnE;","ъ":"&hardcy;","⥈":"&harrcir;","↭":"&leftrightsquigarrow;","ℏ":"&plankv;","ĥ":"&hcirc;","♥":"&heartsuit;","…":"&mldr;","⊹":"&hercon;","𝔥":"&hfr;","⤥":"&searhk;","⤦":"&swarhk;","⇿":"&hoarr;","∻":"&homtht;","↩":"&larrhk;","↪":"&rarrhk;","𝕙":"&hopf;","―":"&horbar;","𝒽":"&hscr;","ħ":"&hstrok;","⁃":"&hybull;","í":"&iacute;","î":"&icirc;","и":"&icy;","е":"&iecy;","¡":"&iexcl;","𝔦":"&ifr;","ì":"&igrave;","⨌":"&qint;","∭":"&tint;","⧜":"&iinfin;","℩":"&iiota;","ĳ":"&ijlig;","ī":"&imacr;","ı":"&inodot;","⊷":"&imof;","Ƶ":"&imped;","℅":"&incare;","∞":"&infin;","⧝":"&infintie;","⊺":"&intercal;","⨗":"&intlarhk;","⨼":"&iprod;","ё":"&iocy;","į":"&iogon;","𝕚":"&iopf;","ι":"&iota;","¿":"&iquest;","𝒾":"&iscr;","⋹":"&isinE;","⋵":"&isindot;","⋴":"&isins;","⋳":"&isinsv;","ĩ":"&itilde;","і":"&iukcy;","ï":"&iuml;","ĵ":"&jcirc;","й":"&jcy;","𝔧":"&jfr;","ȷ":"&jmath;","𝕛":"&jopf;","𝒿":"&jscr;","ј":"&jsercy;","є":"&jukcy;","κ":"&kappa;","ϰ":"&varkappa;","ķ":"&kcedil;","к":"&kcy;","𝔨":"&kfr;","ĸ":"&kgreen;","х":"&khcy;","ќ":"&kjcy;","𝕜":"&kopf;","𝓀":"&kscr;","⤛":"&lAtail;","⤎":"&lBarr;","⪋":"&lesseqqgtr;","⥢":"&lHar;","ĺ":"&lacute;","⦴":"&laemptyv;","λ":"&lambda;","⦑":"&langd;","⪅":"&lessapprox;","«":"&laquo;","⤟":"&larrbfs;","⤝":"&larrfs;","↫":"&looparrowleft;","⤹":"&larrpl;","⥳":"&larrsim;","↢":"&leftarrowtail;","⪫":"&lat;","⤙":"&latail;","⪭":"&late;","⪭︀":"&lates;","⤌":"&lbarr;","❲":"&lbbrk;","{":"&lcub;","[":"&lsqb;","⦋":"&lbrke;","⦏":"&lbrksld;","⦍":"&lbrkslu;","ľ":"&lcaron;","ļ":"&lcedil;","л":"&lcy;","⤶":"&ldca;","⥧":"&ldrdhar;","⥋":"&ldrushar;","↲":"&ldsh;","≤":"&leq;","⇇":"&llarr;","⋋":"&lthree;","⪨":"&lescc;","⩿":"&lesdot;","⪁":"&lesdoto;","⪃":"&lesdotor;","⋚︀":"&lesg;","⪓":"&lesges;","⋖":"&ltdot;","⥼":"&lfisht;","𝔩":"&lfr;","⪑":"&lgE;","⥪":"&lharul;","▄":"&lhblk;","љ":"&ljcy;","⥫":"&llhard;","◺":"&lltri;","ŀ":"&lmidot;","⎰":"&lmoustache;","≨":"&lneqq;","⪉":"&lnapprox;","⪇":"&lneq;","⋦":"&lnsim;","⟬":"&loang;","⇽":"&loarr;","⟼":"&xmap;","↬":"&rarrlp;","⦅":"&lopar;","𝕝":"&lopf;","⨭":"&loplus;","⨴":"&lotimes;","∗":"&lowast;","◊":"&lozenge;","(":"&lpar;","⦓":"&lparlt;","⥭":"&lrhard;","‎":"&lrm;","⊿":"&lrtri;","‹":"&lsaquo;","𝓁":"&lscr;","⪍":"&lsime;","⪏":"&lsimg;","‚":"&sbquo;","ł":"&lstrok;","⪦":"&ltcc;","⩹":"&ltcir;","⋉":"&ltimes;","⥶":"&ltlarr;","⩻":"&ltquest;","⦖":"&ltrPar;","◃":"&triangleleft;","⥊":"&lurdshar;","⥦":"&luruhar;","≨︀":"&lvnE;","∺":"&mDDot;","¯":"&strns;","♂":"&male;","✠":"&maltese;","▮":"&marker;","⨩":"&mcomma;","м":"&mcy;","—":"&mdash;","𝔪":"&mfr;","℧":"&mho;","µ":"&micro;","⫰":"&midcir;","−":"&minus;","⨪":"&minusdu;","⫛":"&mlcp;","⊧":"&models;","𝕞":"&mopf;","𝓂":"&mscr;","μ":"&mu;","⊸":"&mumap;","⋙̸":"&nGg;","≫⃒":"&nGt;","⇍":"&nlArr;","⇎":"&nhArr;","⋘̸":"&nLl;","≪⃒":"&nLt;","⇏":"&nrArr;","⊯":"&nVDash;","⊮":"&nVdash;","ń":"&nacute;","∠⃒":"&nang;","⩰̸":"&napE;","≋̸":"&napid;","ŉ":"&napos;","♮":"&natural;","⩃":"&ncap;","ň":"&ncaron;","ņ":"&ncedil;","⩭̸":"&ncongdot;","⩂":"&ncup;","н":"&ncy;","–":"&ndash;","⇗":"&neArr;","⤤":"&nearhk;","≐̸":"&nedot;","⤨":"&toea;","𝔫":"&nfr;","↮":"&nleftrightarrow;","⫲":"&nhpar;","⋼":"&nis;","⋺":"&nisd;","њ":"&njcy;","≦̸":"&nleqq;","↚":"&nleftarrow;","‥":"&nldr;","𝕟":"&nopf;","¬":"&not;","⋹̸":"&notinE;","⋵̸":"&notindot;","⋷":"&notinvb;","⋶":"&notinvc;","⋾":"&notnivb;","⋽":"&notnivc;","⫽⃥":"&nparsl;","∂̸":"&npart;","⨔":"&npolint;","↛":"&nrightarrow;","⤳̸":"&nrarrc;","↝̸":"&nrarrw;","𝓃":"&nscr;","⊄":"&nsub;","⫅̸":"&nsubseteqq;","⊅":"&nsup;","⫆̸":"&nsupseteqq;","ñ":"&ntilde;","ν":"&nu;","#":"&num;","№":"&numero;"," ":"&numsp;","⊭":"&nvDash;","⤄":"&nvHarr;","≍⃒":"&nvap;","⊬":"&nvdash;","≥⃒":"&nvge;",">⃒":"&nvgt;","⧞":"&nvinfin;","⤂":"&nvlArr;","≤⃒":"&nvle;","<⃒":"&nvlt;","⊴⃒":"&nvltrie;","⤃":"&nvrArr;","⊵⃒":"&nvrtrie;","∼⃒":"&nvsim;","⇖":"&nwArr;","⤣":"&nwarhk;","⤧":"&nwnear;","ó":"&oacute;","ô":"&ocirc;","о":"&ocy;","ő":"&odblac;","⨸":"&odiv;","⦼":"&odsold;","œ":"&oelig;","⦿":"&ofcir;","𝔬":"&ofr;","˛":"&ogon;","ò":"&ograve;","⧁":"&ogt;","⦵":"&ohbar;","⦾":"&olcir;","⦻":"&olcross;","⧀":"&olt;","ō":"&omacr;","ω":"&omega;","ο":"&omicron;","⦶":"&omid;","𝕠":"&oopf;","⦷":"&opar;","⦹":"&operp;","∨":"&vee;","⩝":"&ord;","ℴ":"&oscr;","ª":"&ordf;","º":"&ordm;","⊶":"&origof;","⩖":"&oror;","⩗":"&orslope;","⩛":"&orv;","ø":"&oslash;","⊘":"&osol;","õ":"&otilde;","⨶":"&otimesas;","ö":"&ouml;","⌽":"&ovbar;","¶":"&para;","⫳":"&parsim;","⫽":"&parsl;","п":"&pcy;","%":"&percnt;",".":"&period;","‰":"&permil;","‱":"&pertenk;","𝔭":"&pfr;","φ":"&phi;","ϕ":"&varphi;","☎":"&phone;","π":"&pi;","ϖ":"&varpi;","ℎ":"&planckh;","+":"&plus;","⨣":"&plusacir;","⨢":"&pluscir;","⨥":"&plusdu;","⩲":"&pluse;","⨦":"&plussim;","⨧":"&plustwo;","⨕":"&pointint;","𝕡":"&popf;","£":"&pound;","⪳":"&prE;","⪷":"&precapprox;","⪹":"&prnap;","⪵":"&prnE;","⋨":"&prnsim;","′":"&prime;","⌮":"&profalar;","⌒":"&profline;","⌓":"&profsurf;","⊰":"&prurel;","𝓅":"&pscr;","ψ":"&psi;"," ":"&puncsp;","𝔮":"&qfr;","𝕢":"&qopf;","⁗":"&qprime;","𝓆":"&qscr;","⨖":"&quatint;","?":"&quest;","⤜":"&rAtail;","⥤":"&rHar;","∽̱":"&race;","ŕ":"&racute;","⦳":"&raemptyv;","⦒":"&rangd;","⦥":"&range;","»":"&raquo;","⥵":"&rarrap;","⤠":"&rarrbfs;","⤳":"&rarrc;","⤞":"&rarrfs;","⥅":"&rarrpl;","⥴":"&rarrsim;","↣":"&rightarrowtail;","↝":"&rightsquigarrow;","⤚":"&ratail;","∶":"&ratio;","❳":"&rbbrk;","}":"&rcub;","]":"&rsqb;","⦌":"&rbrke;","⦎":"&rbrksld;","⦐":"&rbrkslu;","ř":"&rcaron;","ŗ":"&rcedil;","р":"&rcy;","⤷":"&rdca;","⥩":"&rdldhar;","↳":"&rdsh;","▭":"&rect;","⥽":"&rfisht;","𝔯":"&rfr;","⥬":"&rharul;","ρ":"&rho;","ϱ":"&varrho;","⇉":"&rrarr;","⋌":"&rthree;","˚":"&ring;","‏":"&rlm;","⎱":"&rmoustache;","⫮":"&rnmid;","⟭":"&roang;","⇾":"&roarr;","⦆":"&ropar;","𝕣":"&ropf;","⨮":"&roplus;","⨵":"&rotimes;",")":"&rpar;","⦔":"&rpargt;","⨒":"&rppolint;","›":"&rsaquo;","𝓇":"&rscr;","⋊":"&rtimes;","▹":"&triangleright;","⧎":"&rtriltri;","⥨":"&ruluhar;","℞":"&rx;","ś":"&sacute;","⪴":"&scE;","⪸":"&succapprox;","š":"&scaron;","ş":"&scedil;","ŝ":"&scirc;","⪶":"&succneqq;","⪺":"&succnapprox;","⋩":"&succnsim;","⨓":"&scpolint;","с":"&scy;","⋅":"&sdot;","⩦":"&sdote;","⇘":"&seArr;","§":"&sect;",";":"&semi;","⤩":"&tosa;","✶":"&sext;","𝔰":"&sfr;","♯":"&sharp;","щ":"&shchcy;","ш":"&shcy;","­":"&shy;","σ":"&sigma;","ς":"&varsigma;","⩪":"&simdot;","⪞":"&simg;","⪠":"&simgE;","⪝":"&siml;","⪟":"&simlE;","≆":"&simne;","⨤":"&simplus;","⥲":"&simrarr;","⨳":"&smashp;","⧤":"&smeparsl;","⌣":"&ssmile;","⪪":"&smt;","⪬":"&smte;","⪬︀":"&smtes;","ь":"&softcy;","/":"&sol;","⧄":"&solb;","⌿":"&solbar;","𝕤":"&sopf;","♠":"&spadesuit;","⊓︀":"&sqcaps;","⊔︀":"&sqcups;","𝓈":"&sscr;","☆":"&star;","⊂":"&subset;","⫅":"&subseteqq;","⪽":"&subdot;","⫃":"&subedot;","⫁":"&submult;","⫋":"&subsetneqq;","⊊":"&subsetneq;","⪿":"&subplus;","⥹":"&subrarr;","⫇":"&subsim;","⫕":"&subsub;","⫓":"&subsup;","♪":"&sung;","¹":"&sup1;","²":"&sup2;","³":"&sup3;","⫆":"&supseteqq;","⪾":"&supdot;","⫘":"&supdsub;","⫄":"&supedot;","⟉":"&suphsol;","⫗":"&suphsub;","⥻":"&suplarr;","⫂":"&supmult;","⫌":"&supsetneqq;","⊋":"&supsetneq;","⫀":"&supplus;","⫈":"&supsim;","⫔":"&supsub;","⫖":"&supsup;","⇙":"&swArr;","⤪":"&swnwar;","ß":"&szlig;","⌖":"&target;","τ":"&tau;","ť":"&tcaron;","ţ":"&tcedil;","т":"&tcy;","⌕":"&telrec;","𝔱":"&tfr;","θ":"&theta;","ϑ":"&vartheta;","þ":"&thorn;","×":"&times;","⨱":"&timesbar;","⨰":"&timesd;","⌶":"&topbot;","⫱":"&topcir;","𝕥":"&topf;","⫚":"&topfork;","‴":"&tprime;","▵":"&utri;","≜":"&trie;","◬":"&tridot;","⨺":"&triminus;","⨹":"&triplus;","⧍":"&trisb;","⨻":"&tritime;","⏢":"&trpezium;","𝓉":"&tscr;","ц":"&tscy;","ћ":"&tshcy;","ŧ":"&tstrok;","⥣":"&uHar;","ú":"&uacute;","ў":"&ubrcy;","ŭ":"&ubreve;","û":"&ucirc;","у":"&ucy;","ű":"&udblac;","⥾":"&ufisht;","𝔲":"&ufr;","ù":"&ugrave;","▀":"&uhblk;","⌜":"&ulcorner;","⌏":"&ulcrop;","◸":"&ultri;","ū":"&umacr;","ų":"&uogon;","𝕦":"&uopf;","υ":"&upsilon;","⇈":"&uuarr;","⌝":"&urcorner;","⌎":"&urcrop;","ů":"&uring;","◹":"&urtri;","𝓊":"&uscr;","⋰":"&utdot;","ũ":"&utilde;","ü":"&uuml;","⦧":"&uwangle;","⫨":"&vBar;","⫩":"&vBarv;","⦜":"&vangrt;","⊊︀":"&vsubne;","⫋︀":"&vsubnE;","⊋︀":"&vsupne;","⫌︀":"&vsupnE;","в":"&vcy;","⊻":"&veebar;","≚":"&veeeq;","⋮":"&vellip;","𝔳":"&vfr;","𝕧":"&vopf;","𝓋":"&vscr;","⦚":"&vzigzag;","ŵ":"&wcirc;","⩟":"&wedbar;","≙":"&wedgeq;","℘":"&wp;","𝔴":"&wfr;","𝕨":"&wopf;","𝓌":"&wscr;","𝔵":"&xfr;","ξ":"&xi;","⋻":"&xnis;","𝕩":"&xopf;","𝓍":"&xscr;","ý":"&yacute;","я":"&yacy;","ŷ":"&ycirc;","ы":"&ycy;","¥":"&yen;","𝔶":"&yfr;","ї":"&yicy;","𝕪":"&yopf;","𝓎":"&yscr;","ю":"&yucy;","ÿ":"&yuml;","ź":"&zacute;","ž":"&zcaron;","з":"&zcy;","ż":"&zdot;","ζ":"&zeta;","𝔷":"&zfr;","ж":"&zhcy;","⇝":"&zigrarr;","𝕫":"&zopf;","𝓏":"&zscr;","‍":"&zwj;","‌":"&zwnj;"}}}},"../node_modules/html-entities/lib/numeric-unicode-map.js":function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.numericUnicodeMap={0:65533,128:8364,130:8218,131:402,132:8222,133:8230,134:8224,135:8225,136:710,137:8240,138:352,139:8249,140:338,142:381,145:8216,146:8217,147:8220,148:8221,149:8226,150:8211,151:8212,152:732,153:8482,154:353,155:8250,156:339,158:382,159:376}},"../node_modules/html-entities/lib/surrogate-pairs.js":function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.fromCodePoint=String.fromCodePoint||function(e){return String.fromCharCode(Math.floor((e-65536)/1024)+55296,(e-65536)%1024+56320)},t.getCodePoint=String.prototype.codePointAt?function(e,t){return e.codePointAt(t)}:function(e,t){return 1024*(e.charCodeAt(t)-55296)+e.charCodeAt(t+1)-56320+65536},t.highSurrogateFrom=55296,t.highSurrogateTo=56319},"../node_modules/vue-code-highlight/dist/vue-code-highlight.esm.js":function(e,t,n){"use strict";n.r(t),n.d(t,{component:function(){return c}}),e=n.hmd(e);var r,o,a,i,s={},l=(r=/\blang(?:uage)?-([\w-]+)\b/i,o=0,a=s.Prism={manual:s.Prism&&s.Prism.manual,disableWorkerMessageHandler:s.Prism&&s.Prism.disableWorkerMessageHandler,util:{encode:function(e){return e instanceof i?new i(e.type,a.util.encode(e.content),e.alias):"Array"===a.util.type(e)?e.map(a.util.encode):e.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/\u00a0/g," ")},type:function(e){return Object.prototype.toString.call(e).match(/\[object (\w+)\]/)[1]},objId:function(e){return e.__id||Object.defineProperty(e,"__id",{value:++o}),e.__id},clone:function(e,t){var n=a.util.type(e);switch(t=t||{},n){case"Object":if(t[a.util.objId(e)])return t[a.util.objId(e)];for(var r in o={},t[a.util.objId(e)]=o,e)e.hasOwnProperty(r)&&(o[r]=a.util.clone(e[r],t));return o;case"Array":if(t[a.util.objId(e)])return t[a.util.objId(e)];var o=[];return t[a.util.objId(e)]=o,e.forEach((function(e,n){o[n]=a.util.clone(e,t)})),o}return e}},languages:{extend:function(e,t){var n=a.util.clone(a.languages[e]);for(var r in t)n[r]=t[r];return n},insertBefore:function(e,t,n,r){var o=(r=r||a.languages)[e];if(2==arguments.length){for(var i in n=arguments[1])n.hasOwnProperty(i)&&(o[i]=n[i]);return o}var s={};for(var l in o)if(o.hasOwnProperty(l)){if(l==t)for(var i in n)n.hasOwnProperty(i)&&(s[i]=n[i]);s[l]=o[l]}return a.languages.DFS(a.languages,(function(t,n){n===r[e]&&t!=e&&(this[t]=s)})),r[e]=s},DFS:function(e,t,n,r){for(var o in r=r||{},e)e.hasOwnProperty(o)&&(t.call(e,o,e[o],n||o),"Object"!==a.util.type(e[o])||r[a.util.objId(e[o])]?"Array"!==a.util.type(e[o])||r[a.util.objId(e[o])]||(r[a.util.objId(e[o])]=!0,a.languages.DFS(e[o],t,o,r)):(r[a.util.objId(e[o])]=!0,a.languages.DFS(e[o],t,null,r)))}},plugins:{},highlightAll:function(e,t){a.highlightAllUnder(document,e,t)},highlightAllUnder:function(e,t,n){var r={callback:n,selector:'code[class*="language-"], [class*="language-"] code, code[class*="lang-"], [class*="lang-"] code'};a.hooks.run("before-highlightall",r);for(var o,i=r.elements||e.querySelectorAll(r.selector),s=0;o=i[s++];)a.highlightElement(o,!0===t,r.callback)},highlightElement:function(e,t,n){for(var o,i,l=e;l&&!r.test(l.className);)l=l.parentNode;l&&(o=(l.className.match(r)||[,""])[1].toLowerCase(),i=a.languages[o]),e.className=e.className.replace(r,"").replace(/\s+/g," ")+" language-"+o,e.parentNode&&(l=e.parentNode,/pre/i.test(l.nodeName)&&(l.className=l.className.replace(r,"").replace(/\s+/g," ")+" language-"+o));var c={element:e,language:o,grammar:i,code:e.textContent};if(a.hooks.run("before-sanity-check",c),!c.code||!c.grammar)return c.code&&(a.hooks.run("before-highlight",c),c.element.textContent=c.code,a.hooks.run("after-highlight",c)),void a.hooks.run("complete",c);if(a.hooks.run("before-highlight",c),t&&s.Worker){var u=new Worker(a.filename);u.onmessage=function(e){c.highlightedCode=e.data,a.hooks.run("before-insert",c),c.element.innerHTML=c.highlightedCode,n&&n.call(c.element),a.hooks.run("after-highlight",c),a.hooks.run("complete",c)},u.postMessage(JSON.stringify({language:c.language,code:c.code,immediateClose:!0}))}else c.highlightedCode=a.highlight(c.code,c.grammar,c.language),a.hooks.run("before-insert",c),c.element.innerHTML=c.highlightedCode,n&&n.call(e),a.hooks.run("after-highlight",c),a.hooks.run("complete",c)},highlight:function(e,t,n){var r={code:e,grammar:t,language:n};return a.hooks.run("before-tokenize",r),r.tokens=a.tokenize(r.code,r.grammar),a.hooks.run("after-tokenize",r),i.stringify(a.util.encode(r.tokens),r.language)},matchGrammar:function(e,t,n,r,o,i,s){var l=a.Token;for(var c in n)if(n.hasOwnProperty(c)&&n[c]){if(c==s)return;var u=n[c];u="Array"===a.util.type(u)?u:[u];for(var d=0;d<u.length;++d){var p=u[d],f=p.inside,v=!!p.lookbehind,m=!!p.greedy,g=0,h=p.alias;if(m&&!p.pattern.global){var b=p.pattern.toString().match(/[imuy]*$/)[0];p.pattern=RegExp(p.pattern.source,b+"g")}p=p.pattern||p;for(var y=r,_=o;y<t.length;_+=t[y].length,++y){var x=t[y];if(t.length>e.length)return;if(!(x instanceof l)){if(m&&y!=t.length-1){if(p.lastIndex=_,!(E=p.exec(e)))break;for(var w=E.index+(v?E[1].length:0),A=E.index+E[0].length,C=y,k=_,j=t.length;C<j&&(k<A||!t[C].type&&!t[C-1].greedy);++C)w>=(k+=t[C].length)&&(++y,_=k);if(t[y]instanceof l)continue;S=C-y,x=e.slice(_,k),E.index-=_}else{p.lastIndex=0;var E=p.exec(x),S=1}if(E){v&&(g=E[1]?E[1].length:0),A=(w=E.index+g)+(E=E[0].slice(g)).length;var O=x.slice(0,w),L=x.slice(A),q=[y,S];O&&(++y,_+=O.length,q.push(O));var D=new l(c,f?a.tokenize(E,f):E,h,E,m);if(q.push(D),L&&q.push(L),Array.prototype.splice.apply(t,q),1!=S&&a.matchGrammar(e,t,n,y,_,!0,c),i)break}else if(i)break}}}}},tokenize:function(e,t,n){var r=[e],o=t.rest;if(o){for(var i in o)t[i]=o[i];delete t.rest}return a.matchGrammar(e,r,t,0,0,!1),r},hooks:{all:{},add:function(e,t){var n=a.hooks.all;n[e]=n[e]||[],n[e].push(t)},run:function(e,t){var n=a.hooks.all[e];if(n&&n.length)for(var r,o=0;r=n[o++];)r(t)}}},(i=a.Token=function(e,t,n,r,o){this.type=e,this.content=t,this.alias=n,this.length=0|(r||"").length,this.greedy=!!o}).stringify=function(e,t,n){if("string"==typeof e)return e;if("Array"===a.util.type(e))return e.map((function(n){return i.stringify(n,t,e)})).join("");var r={type:e.type,content:i.stringify(e.content,t,n),tag:"span",classes:["token",e.type],attributes:{},language:t,parent:n};if(e.alias){var o="Array"===a.util.type(e.alias)?e.alias:[e.alias];Array.prototype.push.apply(r.classes,o)}a.hooks.run("wrap",r);var s=Object.keys(r.attributes).map((function(e){return e+'="'+(r.attributes[e]||"").replace(/"/g,"&quot;")+'"'})).join(" ");return"<"+r.tag+' class="'+r.classes.join(" ")+'"'+(s?" "+s:"")+">"+r.content+"</"+r.tag+">"},s.document?s.Prism:s.addEventListener?(a.disableWorkerMessageHandler||s.addEventListener("message",(function(e){var t=JSON.parse(e.data),n=t.language,r=t.code,o=t.immediateClose;s.postMessage(a.highlight(r,a.languages[n],n)),o&&s.close()}),!1),s.Prism):s.Prism);e.exports&&(e.exports=l),void 0!==n.g&&(n.g.Prism=l),l.languages.markup={comment:/<!--[\s\S]*?-->/,prolog:/<\?[\s\S]+?\?>/,doctype:/<!DOCTYPE[\s\S]+?>/i,cdata:/<!\[CDATA\[[\s\S]*?]]>/i,tag:{pattern:/<\/?(?!\d)[^\s>\/=$<%]+(?:\s+[^\s>\/=]+(?:=(?:("|')(?:\\[\s\S]|(?!\1)[^\\])*\1|[^\s'">=]+))?)*\s*\/?>/i,greedy:!0,inside:{tag:{pattern:/^<\/?[^\s>\/]+/i,inside:{punctuation:/^<\/?/,namespace:/^[^\s>\/:]+:/}},"attr-value":{pattern:/=(?:("|')(?:\\[\s\S]|(?!\1)[^\\])*\1|[^\s'">=]+)/i,inside:{punctuation:[/^=/,{pattern:/(^|[^\\])["']/,lookbehind:!0}]}},punctuation:/\/?>/,"attr-name":{pattern:/[^\s>\/]+/,inside:{namespace:/^[^\s>\/:]+:/}}}},entity:/&#?[\da-z]{1,8};/i},l.languages.markup.tag.inside["attr-value"].inside.entity=l.languages.markup.entity,l.hooks.add("wrap",(function(e){"entity"===e.type&&(e.attributes.title=e.content.replace(/&amp;/,"&"))})),l.languages.xml=l.languages.markup,l.languages.html=l.languages.markup,l.languages.mathml=l.languages.markup,l.languages.svg=l.languages.markup,l.languages.css={comment:/\/\*[\s\S]*?\*\//,atrule:{pattern:/@[\w-]+?.*?(?:;|(?=\s*\{))/i,inside:{rule:/@[\w-]+/}},url:/url\((?:(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1|.*?)\)/i,selector:/[^{}\s][^{};]*?(?=\s*\{)/,string:{pattern:/("|')(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,greedy:!0},property:/[-_a-z\xA0-\uFFFF][-\w\xA0-\uFFFF]*(?=\s*:)/i,important:/\B!important\b/i,function:/[-a-z0-9]+(?=\()/i,punctuation:/[(){};:]/},l.languages.css.atrule.inside.rest=l.languages.css,l.languages.markup&&(l.languages.insertBefore("markup","tag",{style:{pattern:/(<style[\s\S]*?>)[\s\S]*?(?=<\/style>)/i,lookbehind:!0,inside:l.languages.css,alias:"language-css",greedy:!0}}),l.languages.insertBefore("inside","attr-value",{"style-attr":{pattern:/\s*style=("|')(?:\\[\s\S]|(?!\1)[^\\])*\1/i,inside:{"attr-name":{pattern:/^\s*style/i,inside:l.languages.markup.tag.inside},punctuation:/^\s*=\s*['"]|['"]\s*$/,"attr-value":{pattern:/.+/i,inside:l.languages.css}},alias:"language-css"}},l.languages.markup.tag)),l.languages.clike={comment:[{pattern:/(^|[^\\])\/\*[\s\S]*?(?:\*\/|$)/,lookbehind:!0},{pattern:/(^|[^\\:])\/\/.*/,lookbehind:!0,greedy:!0}],string:{pattern:/(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,greedy:!0},"class-name":{pattern:/((?:\b(?:class|interface|extends|implements|trait|instanceof|new)\s+)|(?:catch\s+\())[\w.\\]+/i,lookbehind:!0,inside:{punctuation:/[.\\]/}},keyword:/\b(?:if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\b/,boolean:/\b(?:true|false)\b/,function:/[a-z0-9_]+(?=\()/i,number:/\b0x[\da-f]+\b|(?:\b\d+\.?\d*|\B\.\d+)(?:e[+-]?\d+)?/i,operator:/--?|\+\+?|!=?=?|<=?|>=?|==?=?|&&?|\|\|?|\?|\*|\/|~|\^|%/,punctuation:/[{}[\];(),.:]/},l.languages.javascript=l.languages.extend("clike",{keyword:/\b(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|var|void|while|with|yield)\b/,number:/\b(?:0[xX][\dA-Fa-f]+|0[bB][01]+|0[oO][0-7]+|NaN|Infinity)\b|(?:\b\d+\.?\d*|\B\.\d+)(?:[Ee][+-]?\d+)?/,function:/[_$a-z\xA0-\uFFFF][$\w\xA0-\uFFFF]*(?=\s*\()/i,operator:/-[-=]?|\+[+=]?|!=?=?|<<?=?|>>?>?=?|=(?:==?|>)?|&[&=]?|\|[|=]?|\*\*?=?|\/=?|~|\^=?|%=?|\?|\.{3}/}),l.languages.insertBefore("javascript","keyword",{regex:{pattern:/((?:^|[^$\w\xA0-\uFFFF."'\])\s])\s*)\/(\[[^\]\r\n]+]|\\.|[^/\\\[\r\n])+\/[gimyu]{0,5}(?=\s*($|[\r\n,.;})\]]))/,lookbehind:!0,greedy:!0},"function-variable":{pattern:/[_$a-z\xA0-\uFFFF][$\w\xA0-\uFFFF]*(?=\s*=\s*(?:function\b|(?:\([^()]*\)|[_$a-z\xA0-\uFFFF][$\w\xA0-\uFFFF]*)\s*=>))/i,alias:"function"},constant:/\b[A-Z][A-Z\d_]*\b/}),l.languages.insertBefore("javascript","string",{"template-string":{pattern:/`(?:\\[\s\S]|\${[^}]+}|[^\\`])*`/,greedy:!0,inside:{interpolation:{pattern:/\${[^}]+}/,inside:{"interpolation-punctuation":{pattern:/^\${|}$/,alias:"punctuation"},rest:null}},string:/[\s\S]+/}}}),l.languages.javascript["template-string"].inside.interpolation.inside.rest=l.languages.javascript,l.languages.markup&&l.languages.insertBefore("markup","tag",{script:{pattern:/(<script[\s\S]*?>)[\s\S]*?(?=<\/script>)/i,lookbehind:!0,inside:l.languages.javascript,alias:"language-javascript",greedy:!0}}),l.languages.js=l.languages.javascript,function(){if("undefined"!=typeof document){var e=document.head||document.getElementsByTagName("head")[0],t=document.createElement("style");t.type="text/css",t.styleSheet?t.styleSheet.cssText="":t.appendChild(document.createTextNode("")),e.appendChild(t)}}();var c={render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{ref:"codeBlock"},[n("pre",{class:e.languageClass},[n("code",[e._t("default")],2)])])},staticRenderFns:[],name:"code-highlight",props:{language:{type:String,default:"javascript"}},computed:{languageClass:function(){return"language-"+this.language}},mounted:function(){l.highlightAllUnder(this.$refs.codeBlock)},beforeUpdate:function(){if(this.$slots.default[0].text){var e=this.$slots.default[0].text.replace(/^[\r\n\s]*|[\r\n\s]*$/g,"");this.$el.querySelector("code").textContent=e,l.highlightAllUnder(this.$refs.codeBlock)}}};function u(e){l.highlightAllUnder(e)}function d(e){d.installed||(d.installed=!0,e.directive("highlight",u))}var p={install:d},f=null;"undefined"!=typeof window?f=window.Vue:void 0!==n.g&&(f=n.g.Vue),f&&f.use(p),t.default=d},"./App.vue":function(e,t,n){"use strict";n.r(t);var r=n("./App.vue?vue&type=template&id=472cff63&"),o=n("./App.vue?vue&type=script&lang=js&"),a=(0,n("../node_modules/vue-loader/lib/runtime/componentNormalizer.js").default)(o.default,r.render,r.staticRenderFns,!1,null,null,null);a.options.__file="App.vue",t.default=a.exports},"./components/Nav.vue":function(e,t,n){"use strict";n.r(t);var r=n("./components/Nav.vue?vue&type=template&id=738fae98&"),o=n("./components/Nav.vue?vue&type=script&lang=js&"),a=(0,n("../node_modules/vue-loader/lib/runtime/componentNormalizer.js").default)(o.default,r.render,r.staticRenderFns,!1,null,null,null);a.options.__file="components/Nav.vue",t.default=a.exports},"./components/examples/Arrays.vue":function(e,t,n){"use strict";n.r(t);var r=n("./components/examples/Arrays.vue?vue&type=template&id=3807c975&"),o=n("./components/examples/Arrays.vue?vue&type=script&lang=js&"),a=(0,n("../node_modules/vue-loader/lib/runtime/componentNormalizer.js").default)(o.default,r.render,r.staticRenderFns,!1,null,null,null);a.options.__file="components/examples/Arrays.vue",t.default=a.exports},"./components/examples/Disabled.vue":function(e,t,n){"use strict";n.r(t);var r=n("./components/examples/Disabled.vue?vue&type=template&id=8c74c612&"),o=n("./components/examples/Disabled.vue?vue&type=script&lang=js&"),a=(0,n("../node_modules/vue-loader/lib/runtime/componentNormalizer.js").default)(o.default,r.render,r.staticRenderFns,!1,null,null,null);a.options.__file="components/examples/Disabled.vue",t.default=a.exports},"./components/examples/LogPrefix.vue":function(e,t,n){"use strict";n.r(t);var r=n("./components/examples/LogPrefix.vue?vue&type=template&id=c7d315ea&"),o=n("./components/examples/LogPrefix.vue?vue&type=script&lang=js&"),a=(0,n("../node_modules/vue-loader/lib/runtime/componentNormalizer.js").default)(o.default,r.render,r.staticRenderFns,!1,null,null,null);a.options.__file="components/examples/LogPrefix.vue",t.default=a.exports},"./components/examples/Magical.vue":function(e,t,n){"use strict";n.r(t);var r=n("./components/examples/Magical.vue?vue&type=template&id=78aae226&"),o=n("./components/examples/Magical.vue?vue&type=script&lang=js&"),a=(0,n("../node_modules/vue-loader/lib/runtime/componentNormalizer.js").default)(o.default,r.render,r.staticRenderFns,!1,null,null,null);a.options.__file="components/examples/Magical.vue",t.default=a.exports},"./components/examples/Objects.vue":function(e,t,n){"use strict";n.r(t);var r=n("./components/examples/Objects.vue?vue&type=template&id=1fd4b769&"),o=n("./components/examples/Objects.vue?vue&type=script&lang=js&"),a=(0,n("../node_modules/vue-loader/lib/runtime/componentNormalizer.js").default)(o.default,r.render,r.staticRenderFns,!1,null,null,null);a.options.__file="components/examples/Objects.vue",t.default=a.exports},"./components/examples/Simple.vue":function(e,t,n){"use strict";n.r(t);var r=n("./components/examples/Simple.vue?vue&type=template&id=29ed25ed&"),o=n("./components/examples/Simple.vue?vue&type=script&lang=js&"),a=(0,n("../node_modules/vue-loader/lib/runtime/componentNormalizer.js").default)(o.default,r.render,r.staticRenderFns,!1,null,null,null);a.options.__file="components/examples/Simple.vue",t.default=a.exports},"./components/examples/Styles.vue":function(e,t,n){"use strict";n.r(t);var r=n("./components/examples/Styles.vue?vue&type=template&id=eeb315c6&"),o=n("./components/examples/Styles.vue?vue&type=script&lang=js&"),a=(0,n("../node_modules/vue-loader/lib/runtime/componentNormalizer.js").default)(o.default,r.render,r.staticRenderFns,!1,null,null,null);a.options.__file="components/examples/Styles.vue",t.default=a.exports},"./components/examples/Text.vue":function(e,t,n){"use strict";n.r(t);var r=n("./components/examples/Text.vue?vue&type=template&id=013f50a8&"),o=n("./components/examples/Text.vue?vue&type=script&lang=js&"),a=(0,n("../node_modules/vue-loader/lib/runtime/componentNormalizer.js").default)(o.default,r.render,r.staticRenderFns,!1,null,null,null);a.options.__file="components/examples/Text.vue",t.default=a.exports},"./components/examples/Type.vue":function(e,t,n){"use strict";n.r(t);var r=n("./components/examples/Type.vue?vue&type=template&id=14c1cc35&"),o=n("./components/examples/Type.vue?vue&type=script&lang=js&"),a=(0,n("../node_modules/vue-loader/lib/runtime/componentNormalizer.js").default)(o.default,r.render,r.staticRenderFns,!1,null,null,null);a.options.__file="components/examples/Type.vue",t.default=a.exports},"./docs/UnicornLog.vue":function(e,t,n){"use strict";n.r(t);var r=n("./docs/UnicornLog.vue?vue&type=template&id=92ac123c&"),o=n("./docs/UnicornLog.vue?vue&type=script&lang=js&"),a=(n("./docs/UnicornLog.vue?vue&type=style&index=0&lang=scss&"),(0,n("../node_modules/vue-loader/lib/runtime/componentNormalizer.js").default)(o.default,r.render,r.staticRenderFns,!1,null,null,null));a.options.__file="docs/UnicornLog.vue",t.default=a.exports},"./App.vue?vue&type=script&lang=js&":function(e,t,n){"use strict";n.r(t);var r=n("../node_modules/babel-loader/lib/index.js??clonedRuleSet-1[0].rules[0].use!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=script&lang=js&");t.default=r.default},"./components/Nav.vue?vue&type=script&lang=js&":function(e,t,n){"use strict";n.r(t);var r=n("../node_modules/babel-loader/lib/index.js??clonedRuleSet-1[0].rules[0].use!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/Nav.vue?vue&type=script&lang=js&");t.default=r.default},"./components/examples/Arrays.vue?vue&type=script&lang=js&":function(e,t,n){"use strict";n.r(t);var r=n("../node_modules/babel-loader/lib/index.js??clonedRuleSet-1[0].rules[0].use!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/Arrays.vue?vue&type=script&lang=js&");t.default=r.default},"./components/examples/Disabled.vue?vue&type=script&lang=js&":function(e,t,n){"use strict";n.r(t);var r=n("../node_modules/babel-loader/lib/index.js??clonedRuleSet-1[0].rules[0].use!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/Disabled.vue?vue&type=script&lang=js&");t.default=r.default},"./components/examples/LogPrefix.vue?vue&type=script&lang=js&":function(e,t,n){"use strict";n.r(t);var r=n("../node_modules/babel-loader/lib/index.js??clonedRuleSet-1[0].rules[0].use!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/LogPrefix.vue?vue&type=script&lang=js&");t.default=r.default},"./components/examples/Magical.vue?vue&type=script&lang=js&":function(e,t,n){"use strict";n.r(t);var r=n("../node_modules/babel-loader/lib/index.js??clonedRuleSet-1[0].rules[0].use!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/Magical.vue?vue&type=script&lang=js&");t.default=r.default},"./components/examples/Objects.vue?vue&type=script&lang=js&":function(e,t,n){"use strict";n.r(t);var r=n("../node_modules/babel-loader/lib/index.js??clonedRuleSet-1[0].rules[0].use!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/Objects.vue?vue&type=script&lang=js&");t.default=r.default},"./components/examples/Simple.vue?vue&type=script&lang=js&":function(e,t,n){"use strict";n.r(t);var r=n("../node_modules/babel-loader/lib/index.js??clonedRuleSet-1[0].rules[0].use!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/Simple.vue?vue&type=script&lang=js&");t.default=r.default},"./components/examples/Styles.vue?vue&type=script&lang=js&":function(e,t,n){"use strict";n.r(t);var r=n("../node_modules/babel-loader/lib/index.js??clonedRuleSet-1[0].rules[0].use!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/Styles.vue?vue&type=script&lang=js&");t.default=r.default},"./components/examples/Text.vue?vue&type=script&lang=js&":function(e,t,n){"use strict";n.r(t);var r=n("../node_modules/babel-loader/lib/index.js??clonedRuleSet-1[0].rules[0].use!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/Text.vue?vue&type=script&lang=js&");t.default=r.default},"./components/examples/Type.vue?vue&type=script&lang=js&":function(e,t,n){"use strict";n.r(t);var r=n("../node_modules/babel-loader/lib/index.js??clonedRuleSet-1[0].rules[0].use!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/Type.vue?vue&type=script&lang=js&");t.default=r.default},"./docs/UnicornLog.vue?vue&type=script&lang=js&":function(e,t,n){"use strict";n.r(t);var r=n("../node_modules/babel-loader/lib/index.js??clonedRuleSet-1[0].rules[0].use!../node_modules/vue-loader/lib/index.js??vue-loader-options!./docs/UnicornLog.vue?vue&type=script&lang=js&");t.default=r.default},"./App.vue?vue&type=template&id=472cff63&":function(e,t,n){"use strict";n.r(t),n.d(t,{render:function(){return r.render},staticRenderFns:function(){return r.staticRenderFns}});var r=n("../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=template&id=472cff63&")},"./components/Nav.vue?vue&type=template&id=738fae98&":function(e,t,n){"use strict";n.r(t),n.d(t,{render:function(){return r.render},staticRenderFns:function(){return r.staticRenderFns}});var r=n("../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/Nav.vue?vue&type=template&id=738fae98&")},"./components/examples/Arrays.vue?vue&type=template&id=3807c975&":function(e,t,n){"use strict";n.r(t),n.d(t,{render:function(){return r.render},staticRenderFns:function(){return r.staticRenderFns}});var r=n("../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/Arrays.vue?vue&type=template&id=3807c975&")},"./components/examples/Disabled.vue?vue&type=template&id=8c74c612&":function(e,t,n){"use strict";n.r(t),n.d(t,{render:function(){return r.render},staticRenderFns:function(){return r.staticRenderFns}});var r=n("../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/Disabled.vue?vue&type=template&id=8c74c612&")},"./components/examples/LogPrefix.vue?vue&type=template&id=c7d315ea&":function(e,t,n){"use strict";n.r(t),n.d(t,{render:function(){return r.render},staticRenderFns:function(){return r.staticRenderFns}});var r=n("../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/LogPrefix.vue?vue&type=template&id=c7d315ea&")},"./components/examples/Magical.vue?vue&type=template&id=78aae226&":function(e,t,n){"use strict";n.r(t),n.d(t,{render:function(){return r.render},staticRenderFns:function(){return r.staticRenderFns}});var r=n("../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/Magical.vue?vue&type=template&id=78aae226&")},"./components/examples/Objects.vue?vue&type=template&id=1fd4b769&":function(e,t,n){"use strict";n.r(t),n.d(t,{render:function(){return r.render},staticRenderFns:function(){return r.staticRenderFns}});var r=n("../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/Objects.vue?vue&type=template&id=1fd4b769&")},"./components/examples/Simple.vue?vue&type=template&id=29ed25ed&":function(e,t,n){"use strict";n.r(t),n.d(t,{render:function(){return r.render},staticRenderFns:function(){return r.staticRenderFns}});var r=n("../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/Simple.vue?vue&type=template&id=29ed25ed&")},"./components/examples/Styles.vue?vue&type=template&id=eeb315c6&":function(e,t,n){"use strict";n.r(t),n.d(t,{render:function(){return r.render},staticRenderFns:function(){return r.staticRenderFns}});var r=n("../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/Styles.vue?vue&type=template&id=eeb315c6&")},"./components/examples/Text.vue?vue&type=template&id=013f50a8&":function(e,t,n){"use strict";n.r(t),n.d(t,{render:function(){return r.render},staticRenderFns:function(){return r.staticRenderFns}});var r=n("../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/Text.vue?vue&type=template&id=013f50a8&")},"./components/examples/Type.vue?vue&type=template&id=14c1cc35&":function(e,t,n){"use strict";n.r(t),n.d(t,{render:function(){return r.render},staticRenderFns:function(){return r.staticRenderFns}});var r=n("../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/Type.vue?vue&type=template&id=14c1cc35&")},"./docs/UnicornLog.vue?vue&type=template&id=92ac123c&":function(e,t,n){"use strict";n.r(t),n.d(t,{render:function(){return r.render},staticRenderFns:function(){return r.staticRenderFns}});var r=n("../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../node_modules/vue-loader/lib/index.js??vue-loader-options!./docs/UnicornLog.vue?vue&type=template&id=92ac123c&")},"./docs/UnicornLog.vue?vue&type=style&index=0&lang=scss&":function(e,t,n){"use strict";n.r(t);var r=n("../node_modules/vue-style-loader/index.js!../node_modules/css-loader/dist/cjs.js!../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../node_modules/sass-loader/dist/cjs.js??clonedRuleSet-3[0].rules[0].use[2]!../node_modules/vue-loader/lib/index.js??vue-loader-options!./docs/UnicornLog.vue?vue&type=style&index=0&lang=scss&"),o={};for(var a in r)"default"!==a&&(o[a]=function(e){return r[e]}.bind(0,a));n.d(t,o)},"../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=template&id=472cff63&":function(e,t,n){"use strict";n.r(t),n.d(t,{render:function(){return r},staticRenderFns:function(){return o}});var r=function(){var e=this.$createElement,t=this._self._c||e;return t("div",[t("UnicornLog")],1)},o=[];r._withStripped=!0},"../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/Nav.vue?vue&type=template&id=738fae98&":function(e,t,n){"use strict";n.r(t),n.d(t,{render:function(){return r},staticRenderFns:function(){return o}});var r=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("nav",{staticClass:"navbar sticky-top navbar-expand-lg navbar-dark bg-dark mb-5"},[n("div",{staticClass:"container"},[n("a",{staticClass:"navbar-brand",attrs:{href:"/"}},[e._v("🦄 Vue UnicornLog")]),e._v(" "),e._m(0),e._v(" "),n("div",{staticClass:"collapse navbar-collapse",attrs:{id:"navbarSupportedContent"}},[e._m(1),e._v(" "),n("div",{staticClass:"d-flex"},[n("ul",{staticClass:"navbar-nav me-auto mb-2 mb-lg-0"},[n("li",{staticClass:"nav-item"},[n("a",{staticClass:"nav-link",attrs:{href:e.links.github}},[e._v("GitHub")])]),e._v(" "),n("li",{staticClass:"nav-item"},[n("a",{staticClass:"nav-link",attrs:{href:e.links.npm}},[e._v("NPM Package")])])])])])])])},o=[function(){var e=this.$createElement,t=this._self._c||e;return t("button",{staticClass:"navbar-toggler",attrs:{type:"button","data-bs-toggle":"collapse","data-bs-target":"#navbarSupportedContent","aria-controls":"navbarSupportedContent","aria-expanded":"false","aria-label":"Toggle navigation"}},[t("span",{staticClass:"navbar-toggler-icon"})])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ul",{staticClass:"navbar-nav me-auto mb-2 mb-lg-0"},[n("li",{staticClass:"nav-item"},[n("a",{staticClass:"nav-link active",attrs:{"aria-current":"page",href:"/"}},[e._v("Home")])]),e._v(" "),n("li",{staticClass:"nav-item dropdown"},[n("a",{staticClass:"nav-link dropdown-toggle",attrs:{href:"#",id:"docs-dropdown",role:"button","data-bs-toggle":"dropdown","aria-expanded":"false"}},[e._v("\n\t\t\t\t\t\tDocs\n\t\t\t\t\t")]),e._v(" "),n("ul",{staticClass:"dropdown-menu dropdown-menu-dark",attrs:{"aria-labelledby":"docs-dropdown"}},[n("li",[n("a",{staticClass:"dropdown-item",attrs:{href:"#ul-installation"}},[e._v("\n\t\t\t\t\t\t\t\tInstallation\n\t\t\t\t\t\t\t")])]),e._v(" "),n("li",[n("a",{staticClass:"dropdown-item",attrs:{href:"#ul-usage"}},[e._v("Usage")])]),e._v(" "),n("li",[n("hr",{staticClass:"dropdown-divider"})]),e._v(" "),n("li",[n("h6",{staticClass:"dropdown-header"},[e._v("Options")])]),e._v(" "),n("li",[n("a",{staticClass:"dropdown-item",attrs:{href:"#ul-plugin-options"}},[e._v("\n\t\t\t\t\t\t\t\tPlugin Options\n\t\t\t\t\t\t\t")])]),e._v(" "),n("li",[n("a",{staticClass:"dropdown-item",attrs:{href:"#ul-log-options"}},[e._v("Log Options")])]),e._v(" "),n("li",[n("hr",{staticClass:"dropdown-divider"})]),e._v(" "),n("li",[n("h6",{staticClass:"dropdown-header"},[e._v("Methods")])]),e._v(" "),n("li",[n("a",{staticClass:"dropdown-item",attrs:{href:"#ul-instance-methods"}},[e._v("\n\t\t\t\t\t\t\t\tInstance Methods\n\t\t\t\t\t\t\t")])]),e._v(" "),n("li",[n("a",{staticClass:"dropdown-item",attrs:{href:"#ul-console-methods"}},[e._v("\n\t\t\t\t\t\t\t\tConsole Methods\n\t\t\t\t\t\t\t")])]),e._v(" "),n("li",[n("hr",{staticClass:"dropdown-divider"})]),e._v(" "),n("li",[n("a",{staticClass:"dropdown-item",attrs:{href:"#ul-examples"}},[e._v("Examples")])])])]),e._v(" "),n("li",{staticClass:"nav-item dropdown"},[n("a",{staticClass:"nav-link dropdown-toggle",attrs:{href:"#",id:"examples-dropdown",role:"button","data-bs-toggle":"dropdown","aria-expanded":"false"}},[e._v("\n\t\t\t\t\t\tExamples\n\t\t\t\t\t")]),e._v(" "),n("ul",{staticClass:"dropdown-menu dropdown-menu-dark",attrs:{"aria-labelledby":"examples-dropdown"}},[n("li",[n("a",{staticClass:"dropdown-item",attrs:{href:"#simple-examples"}},[e._v("Simple")])]),e._v(" "),n("li",[n("h6",{staticClass:"dropdown-header"},[e._v("Options")])]),e._v(" "),n("li",[n("a",{staticClass:"dropdown-item",attrs:{href:"#text-examples"}},[e._v("text")])]),e._v(" "),n("li",[n("a",{staticClass:"dropdown-item",attrs:{href:"#type-examples"}},[e._v("type")])]),e._v(" "),n("li",[n("a",{staticClass:"dropdown-item",attrs:{href:"#styles-examples"}},[e._v("styles")])]),e._v(" "),n("li",[n("a",{staticClass:"dropdown-item",attrs:{href:"#disabled-examples"}},[e._v("disabled")])]),e._v(" "),n("li",[n("a",{staticClass:"dropdown-item",attrs:{href:"#logPrefix-examples"}},[e._v("\n\t\t\t\t\t\t\t\tlogPrefix\n\t\t\t\t\t\t\t")])]),e._v(" "),n("li",[n("a",{staticClass:"dropdown-item",attrs:{href:"#magical-examples"}},[e._v("magical")])]),e._v(" "),n("li",[n("a",{staticClass:"dropdown-item",attrs:{href:"#name-examples"}},[e._v("name")])]),e._v(" "),n("li",[n("a",{staticClass:"dropdown-item",attrs:{href:"#objects-examples"}},[e._v("objects")])]),e._v(" "),n("li",[n("a",{staticClass:"dropdown-item",attrs:{href:"#array-examples"}},[e._v("array")])])])])])}];r._withStripped=!0},"../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/Arrays.vue?vue&type=template&id=3807c975&":function(e,t,n){"use strict";n.r(t),n.d(t,{render:function(){return r},staticRenderFns:function(){return o}});var r=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",[e._m(0),e._v(" "),n("div",{staticClass:"row mb-4",attrs:{id:"array-simple-example"}},[e._m(1),e._v(" "),n("div",{staticClass:"col-xl-4 col-6 d-flex align-items-center justify-content-end"},[n("button",{staticClass:"btn btn-outline-primary btn-sm",attrs:{type:"button"},on:{click:e.simpleExample}},[e._v("\n\t\t\t\t\tRun\n\t\t\t\t")])]),e._v(" "),n("div",{staticClass:"col-xl-8 col-lg-12"},[n("vue-code-highlight",{attrs:{language:"js"}},[n("pre",[e._v("this.$unicornLog({\n\ttext: 'Hello World',\n\tarray: ['foo', 'bar'],\n});\n\t\t\t\t\t\t")])])],1)]),e._v(" "),n("div",{staticClass:"row mb-4",attrs:{id:"array-objects-example"}},[e._m(2),e._v(" "),n("div",{staticClass:"col-xl-4 col-6 d-flex align-items-center justify-content-end"},[n("button",{staticClass:"btn btn-outline-primary btn-sm",attrs:{type:"button"},on:{click:e.objectArray}},[e._v("\n\t\t\t\t\tRun\n\t\t\t\t")])]),e._v(" "),n("div",{staticClass:"col-xl-8 col-lg-12"},[n("vue-code-highlight",{attrs:{language:"js"}},[n("pre",[e._v("const foo = { foo: 'foo ' };\nconst bar = { bar: 'bar ' };\n\nthis.$unicornLog({\n\ttext: 'Hello World',\n\tarray: [foo, bar],\n});\n\t\t\t\t\t\t")])])],1)]),e._v(" "),n("div",{staticClass:"row mb-4",attrs:{id:"array-spread-example"}},[e._m(3),e._v(" "),n("div",{staticClass:"col-xl-4 col-6 d-flex align-items-center justify-content-end"},[n("button",{staticClass:"btn btn-outline-primary btn-sm",attrs:{type:"button"},on:{click:e.arraySpreadOperator}},[e._v("\n\t\t\t\t\tRun\n\t\t\t\t")])]),e._v(" "),n("div",{staticClass:"col-xl-8 col-lg-12"},[n("vue-code-highlight",{attrs:{language:"js"}},[n("pre",[e._v("const foo = ['foo'];\nconst bar = ['bar'];\n\nthis.$unicornLog({\n\ttext: 'Hello World',\n\tarray: [...foo, ...bar],\n});\n\t\t\t\t\t\t")])])],1)])])},o=[function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"row mb-2"},[n("div",{staticClass:"col-12"},[n("h5",{staticClass:"my-0"},[n("code",[e._v("array")])])])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"col-xl-4 col-6 d-flex align-items-center"},[n("h6",{staticClass:"my-0"},[e._v("Single array")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"col-xl-4 col-6 d-flex align-items-center"},[n("h6",{staticClass:"my-0"},[e._v("Using an array of objects")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"col-xl-4 col-6 d-flex align-items-center"},[n("h6",{staticClass:"my-0"},[e._v("Using array spread Operator")])])}];r._withStripped=!0},"../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/Disabled.vue?vue&type=template&id=8c74c612&":function(e,t,n){"use strict";n.r(t),n.d(t,{render:function(){return r},staticRenderFns:function(){return o}});var r=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",[e._m(0),e._v(" "),n("div",{staticClass:"row mb-4",attrs:{id:"disabled-simple-example"}},[n("div",{staticClass:"col-xl-4 col-6 d-flex align-items-center"},[n("div",{staticClass:"form-check form-switch"},[n("input",{directives:[{name:"model",rawName:"v-model",value:e.isDisabled,expression:"isDisabled"}],staticClass:"form-check-input",attrs:{type:"checkbox",role:"switch",checked:""},domProps:{checked:Array.isArray(e.isDisabled)?e._i(e.isDisabled,null)>-1:e.isDisabled},on:{change:function(t){var n=e.isDisabled,r=t.target,o=!!r.checked;if(Array.isArray(n)){var a=e._i(n,null);r.checked?a<0&&(e.isDisabled=n.concat([null])):a>-1&&(e.isDisabled=n.slice(0,a).concat(n.slice(a+1)))}else e.isDisabled=o}}}),e._v(" "),n("label",{staticClass:"form-check-label"},[e._v("disabled =\n\t\t\t\t\t\t"),n("span",{staticClass:"boolean-style"},[e._v(e._s(e.isDisabled))])])])]),e._v(" "),n("div",{staticClass:"col-xl-4 col-6 d-flex align-items-center justify-content-end"},[n("button",{staticClass:"btn btn-outline-primary btn-sm",attrs:{type:"button"},on:{click:e.simpleExample}},[e._v("\n\t\t\t\t\tRun\n\t\t\t\t")])]),e._v(" "),n("div",{staticClass:"col-xl-8 col-lg-12"},[n("vue-code-highlight",{attrs:{language:"js"}},[n("pre",[e._v("this.$unicornLog({\n\ttext: 'Hello World',\n\tdisabled: true,\n});\n\t\t\t\t\t\t")])])],1)]),e._v(" "),n("div",{staticClass:"row mb-4",attrs:{id:"disabled-conditional-example"}},[e._m(1),e._v(" "),n("div",{staticClass:"col-xl-8 col-lg-12"},[n("vue-code-highlight",{attrs:{language:"js"}},[n("pre",[e._v("this.$unicornLog({\n\ttext: 'Hello World',\n\tdisabled: process.env.UNICORN_LOG !== 'true',\n});\n\t\t\t\t\t\t")])])],1)])])},o=[function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"row mb-2"},[n("div",{staticClass:"col-12"},[n("h5",{staticClass:"my-0"},[n("code",[e._v("disabled")])])])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"col-12"},[n("h6",{staticClass:"my-0"},[e._v("Using an .env variable")]),e._v(" "),n("div",{staticClass:"fst-italic"},[e._v("\n\t\t\t\t\tConditionally set so it will log in development, but not on the\n\t\t\t\t\tproduction site.\n\t\t\t\t")])])}];r._withStripped=!0},"../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/LogPrefix.vue?vue&type=template&id=c7d315ea&":function(e,t,n){"use strict";n.r(t),n.d(t,{render:function(){return r},staticRenderFns:function(){return o}});var r=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",[n("div",{staticClass:"row mb-2"},[n("div",{staticClass:"col-12"},[n("h5",{staticClass:"my-0"},[n("code",[e._v(e._s(e.isNameOption?"name":"logPrefix"))])])])]),e._v(" "),e.isNameOption?e._e():n("div",{staticClass:"row mb-4",attrs:{id:"logPrefix-simple-example"}},[n("div",{staticClass:"col-xl-4 col-6 d-flex align-items-center"},[n("input",{directives:[{name:"model",rawName:"v-model",value:e.logPrefix,expression:"logPrefix"}],staticClass:"form-control",attrs:{type:"text",value:"[Bunnies]:",placeholder:"[Bunnies]:"},domProps:{value:e.logPrefix},on:{input:function(t){t.target.composing||(e.logPrefix=t.target.value)}}})]),e._v(" "),n("div",{staticClass:"col-xl-4 col-6 d-flex align-items-center justify-content-end"},[n("button",{staticClass:"btn btn-outline-primary btn-sm",attrs:{type:"button"},on:{click:e.simpleExample}},[e._v("\n\t\t\t\t\tRun\n\t\t\t\t")])]),e._v(" "),n("div",{staticClass:"col-xl-8 col-lg-12"},[n("vue-code-highlight",{attrs:{language:"js"}},[n("pre",[e._v("this.$unicornLog({\n\ttext: 'Hello World',\n\tlogPrefix: '[Bunnies]:',\n});\n\t\t\t\t\t\t")])])],1)]),e._v(" "),e.isNameOption?e._e():n("div",{staticClass:"row mb-4",attrs:{id:"name-default-example"}},[e._m(0),e._v(" "),n("div",{staticClass:"col-xl-4 col-6 d-flex align-items-center"},[n("div",{staticClass:"form-check form-switch"},[n("input",{directives:[{name:"model",rawName:"v-model",value:e.withName,expression:"withName"}],staticClass:"form-check-input",attrs:{type:"checkbox",role:"switch",checked:""},domProps:{checked:Array.isArray(e.withName)?e._i(e.withName,null)>-1:e.withName},on:{change:function(t){var n=e.withName,r=t.target,o=!!r.checked;if(Array.isArray(n)){var a=e._i(n,null);r.checked?a<0&&(e.withName=n.concat([null])):a>-1&&(e.withName=n.slice(0,a).concat(n.slice(a+1)))}else e.withName=o}}}),e._v(" "),n("label",{staticClass:"form-check-label"},[e._v("logPrefix option =\n\t\t\t\t\t\t"),n("span",{staticClass:"boolean-style"},[e._v(e._s(e.withName))]),e._v(" with default\n\t\t\t\t\t\t"),n("code",[e._v("name")]),e._v(" option\n\t\t\t\t\t")])])]),e._v(" "),n("div",{staticClass:"col-xl-4 col-6 d-flex align-items-center justify-content-end"},[n("button",{staticClass:"btn btn-outline-primary btn-sm",attrs:{type:"button"},on:{click:e.exampleNameDefault}},[e._v("\n\t\t\t\t\tRun\n\t\t\t\t")])]),e._v(" "),n("div",{staticClass:"col-xl-8 col-lg-12"},[n("vue-code-highlight",{attrs:{language:"js"}},[n("pre",[e._v("this.$unicornLog({\n\ttext: 'Hello World',\n\tlogPrefix: true,\n});\n\t\t\t\t\t\t")])])],1)]),e._v(" "),n("div",{staticClass:"row mb-4",attrs:{id:"name-example"}},[n("div",{staticClass:"col-xl-4 col-6 d-flex align-items-center"},[n("div",{staticClass:"form-check form-switch"},[n("input",{directives:[{name:"model",rawName:"v-model",value:e.withName,expression:"withName"}],staticClass:"form-check-input",attrs:{type:"checkbox",role:"switch",checked:""},domProps:{checked:Array.isArray(e.withName)?e._i(e.withName,null)>-1:e.withName},on:{change:function(t){var n=e.withName,r=t.target,o=!!r.checked;if(Array.isArray(n)){var a=e._i(n,null);r.checked?a<0&&(e.withName=n.concat([null])):a>-1&&(e.withName=n.slice(0,a).concat(n.slice(a+1)))}else e.withName=o}}}),e._v(" "),n("label",{staticClass:"form-check-label"},[e._v("logPrefix = "),n("span",{staticClass:"boolean-style"},[e._v(e._s(e.withName))]),e._v(" with\n\t\t\t\t\t\t"),n("code",[e._v("name")]),e._v(" option set\n\t\t\t\t\t")])])]),e._v(" "),n("div",{staticClass:"col-xl-4 col-6 d-flex align-items-center justify-content-end"},[n("button",{staticClass:"btn btn-outline-primary btn-sm",attrs:{type:"button"},on:{click:e.exampleName}},[e._v("\n\t\t\t\t\tRun\n\t\t\t\t")])]),e._v(" "),n("div",{staticClass:"col-xl-8 col-lg-12"},[n("vue-code-highlight",{attrs:{language:"js"}},[n("pre",[e._v("this.$unicornLog({\n\ttext: 'Hello World',\n\tlogPrefix: true,\n\tname: '"+e._s(e.isNameOption?"Susan":"Bob")+"',\n});\n\t\t\t\t\t\t")])])],1)])])},o=[function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"col-12 mb-2"},[e._v("\n\t\t\t\tIf "),n("code",[e._v("logPrefix")]),e._v(" option is set as a\n\t\t\t\t"),n("span",{staticClass:"option-type"},[e._v("Boolean")]),e._v(" of\n\t\t\t\t"),n("span",{staticClass:"boolean-style"},[e._v("true")]),e._v(", it will use the\n\t\t\t\t"),n("code",[e._v("name")]),e._v(" option for the prefix.\n\t\t\t")])}];r._withStripped=!0},"../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/Magical.vue?vue&type=template&id=78aae226&":function(e,t,n){"use strict";n.r(t),n.d(t,{render:function(){return r},staticRenderFns:function(){return o}});var r=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",[e._m(0),e._v(" "),n("div",{staticClass:"row mb-4",attrs:{id:"magical-simple-example"}},[n("div",{staticClass:"col-xl-4 col-6 d-flex align-items-center"},[n("div",{staticClass:"form-check form-switch"},[n("input",{directives:[{name:"model",rawName:"v-model",value:e.magical,expression:"magical"}],staticClass:"form-check-input",attrs:{type:"checkbox",role:"switch",checked:""},domProps:{checked:Array.isArray(e.magical)?e._i(e.magical,null)>-1:e.magical},on:{change:function(t){var n=e.magical,r=t.target,o=!!r.checked;if(Array.isArray(n)){var a=e._i(n,null);r.checked?a<0&&(e.magical=n.concat([null])):a>-1&&(e.magical=n.slice(0,a).concat(n.slice(a+1)))}else e.magical=o}}}),e._v(" "),n("label",{staticClass:"form-check-label"},[e._v("magical =\n\t\t\t\t\t\t"),n("span",{staticClass:"boolean-style"},[e._v(e._s(e.magical))])])])]),e._v(" "),n("div",{staticClass:"col-xl-4 col-6 d-flex align-items-center justify-content-end"},[n("button",{staticClass:"btn btn-outline-primary btn-sm",attrs:{type:"button"},on:{click:e.simpleExample}},[e._v("\n\t\t\t\t\tRun\n\t\t\t\t")])]),e._v(" "),n("div",{staticClass:"col-xl-8 col-lg-12"},[n("vue-code-highlight",{attrs:{language:"js"}},[n("pre",[e._v("this.$unicornLog({\n\ttext: 'Hello World',\n\tmagical: true,\n});\n\t\t\t\t\t\t")])])],1)])])},o=[function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"row mb-2"},[n("div",{staticClass:"col-12"},[n("h5",{staticClass:"my-0"},[n("code",[e._v("magical")])])])])}];r._withStripped=!0},"../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/Objects.vue?vue&type=template&id=1fd4b769&":function(e,t,n){"use strict";n.r(t),n.d(t,{render:function(){return r},staticRenderFns:function(){return o}});var r=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",[e._m(0),e._v(" "),n("div",{staticClass:"row mb-4",attrs:{id:"objects-simple-example"}},[e._m(1),e._v(" "),n("div",{staticClass:"col-xl-4 col-6 d-flex align-items-center justify-content-end"},[n("button",{staticClass:"btn btn-outline-primary btn-sm",attrs:{type:"button"},on:{click:e.simpleExample}},[e._v("\n\t\t\t\t\tRun\n\t\t\t\t")])]),e._v(" "),n("div",{staticClass:"col-xl-8 col-lg-12"},[n("vue-code-highlight",{attrs:{language:"js"}},[n("pre",[e._v("this.$unicornLog({\n\ttext: 'Hello World',\n\tobjects: { foo: 'bar' },\n});\n\t\t\t\t\t\t")])])],1)]),e._v(" "),n("div",{staticClass:"row mb-4",attrs:{id:"objects-multiple-example"}},[e._m(2),e._v(" "),n("div",{staticClass:"col-xl-4 col-6 d-flex align-items-center justify-content-end"},[n("button",{staticClass:"btn btn-outline-primary btn-sm",attrs:{type:"button"},on:{click:e.multipleObjects}},[e._v("\n\t\t\t\t\tRun\n\t\t\t\t")])]),e._v(" "),n("div",{staticClass:"col-xl-8 col-lg-12"},[n("vue-code-highlight",{attrs:{language:"js"}},[n("pre",[e._v("const foo = { foo: 'foo ' };\nconst bar = { bar: 'bar ' };\n\nthis.$unicornLog({\n\ttext: 'Hello World',\n\tobjects: { foo, bar },\n});\n\t\t\t\t\t\t")])])],1)]),e._v(" "),n("div",{staticClass:"row mb-4",attrs:{id:"objects-spread-example"}},[e._m(3),e._v(" "),n("div",{staticClass:"col-xl-4 col-6 d-flex align-items-center justify-content-end"},[n("button",{staticClass:"btn btn-outline-primary btn-sm",attrs:{type:"button"},on:{click:e.objectSpreadOperator}},[e._v("\n\t\t\t\t\tRun\n\t\t\t\t")])]),e._v(" "),n("div",{staticClass:"col-xl-8 col-lg-12"},[n("vue-code-highlight",{attrs:{language:"js"}},[n("pre",[e._v("const foo = { foo: 'foo ' };\nconst bar = { bar: 'bar ' };\n\nthis.$unicornLog({\n\ttext: 'Hello World',\n\tobjects: { ...foo, ...bar },\n});\n\t\t\t\t\t\t")])])],1)])])},o=[function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"row mb-2"},[n("div",{staticClass:"col-12"},[n("h5",{staticClass:"my-0"},[n("code",[e._v("objects")])])])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"col-xl-4 col-6 d-flex align-items-center"},[n("h6",{staticClass:"my-0"},[e._v("Single object")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"col-xl-4 col-6 d-flex align-items-center"},[n("h6",{staticClass:"my-0"},[e._v("Multiple objects")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"col-xl-4 col-6 d-flex align-items-center"},[n("h6",{staticClass:"my-0"},[e._v("Using object spread Operator")])])}];r._withStripped=!0},"../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/Simple.vue?vue&type=template&id=29ed25ed&":function(e,t,n){"use strict";n.r(t),n.d(t,{render:function(){return r},staticRenderFns:function(){return o}});var r=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",[n("div",{staticClass:"row mb-4"},[e._m(0),e._v(" "),n("div",{staticClass:"col-xl-4 col-6 d-flex justify-content-end"},[n("button",{staticClass:"btn btn-outline-primary btn-sm",attrs:{type:"button"},on:{click:e.simpleExample}},[e._v("\n\t\t\t\t\tRun\n\t\t\t\t")])]),e._v(" "),n("div",{staticClass:"col-xl-8 col-lg-12"},[n("vue-code-highlight",{attrs:{language:"js"}},[n("pre",[e._v("this.$unicornLog();\n\t\t\t\t\t\t")])])],1)])])},o=[function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"col-xl-4 col-6 d-flex align-items-center"},[n("h5",{staticClass:"my-0"},[e._v("Simple Example")])])}];r._withStripped=!0},"../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/Styles.vue?vue&type=template&id=eeb315c6&":function(e,t,n){"use strict";n.r(t),n.d(t,{render:function(){return r},staticRenderFns:function(){return o}});var r=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",[e._m(0),e._v(" "),n("div",{staticClass:"row mb-4",attrs:{id:"defaultStyles-simple-example"}},[n("div",{staticClass:"col-xl-4 col-6 d-flex align-items-center"},[n("div",{staticClass:"col-xl-8 col-lg-12 mt-2"},[n("input",{directives:[{name:"model",rawName:"v-model",value:e.defaultStyles,expression:"defaultStyles"}],staticClass:"form-control",attrs:{type:"text",value:"[Bunnies]:",placeholder:"[Bunnies]:"},domProps:{value:e.defaultStyles},on:{input:function(t){t.target.composing||(e.defaultStyles=t.target.value)}}})])]),e._v(" "),n("div",{staticClass:"col-xl-4 col-6 d-flex align-items-center justify-content-end"},[n("button",{staticClass:"btn btn-outline-primary btn-sm",attrs:{type:"button"},on:{click:e.simpleExample}},[e._v("\n\t\t\t\t\tRun\n\t\t\t\t")])]),e._v(" "),n("div",{staticClass:"col-xl-8 col-lg-12"},[n("vue-code-highlight",{attrs:{language:"js"}},[n("pre",[e._v("this.$unicornLog({\n\ttext: 'Hello World',\n\tstyles: '"+e._s(this.defaultStyles)+"',\n});\n\t\t\t\t\t\t")])])],1)]),e._v(" "),n("div",{staticClass:"row mb-4",attrs:{id:"defaultStyles-simple-example"}},[e._m(1),e._v(" "),n("div",{staticClass:"col-xl-4 col-6 d-flex align-items-center justify-content-end"},[n("button",{staticClass:"btn btn-outline-primary btn-sm",attrs:{type:"button"},on:{click:e.arrayExample}},[e._v("\n\t\t\t\t\tRun\n\t\t\t\t")])]),e._v(" "),n("div",{staticClass:"col-xl-8 col-lg-12"},[n("vue-code-highlight",{attrs:{language:"js"}},[n("pre",[e._v("this.$unicornLog({\n\ttext: 'Hello World',\n\tstyles: [\n\t\t'background: black',\n\t\t'border: 1px dashed magenta',\n\t\t'color: magenta',\n\t\t'font-family: monospace',\n\t\t'font-size: 2em',\n\t\t'padding: 10px',\n\t],\n});\n\t\t\t\t\t\t")])])],1)]),e._v(" "),e._m(2),e._v(" "),n("div",{staticClass:"row mb-4",attrs:{id:"defaultStyles-word-example"}},[n("div",{staticClass:"col-xl-4 col-6 d-flex align-items-center"},[n("div",{staticClass:"col-xl-8 col-lg-12 mt-2"},[n("select",{directives:[{name:"model",rawName:"v-model",value:e.magicalWord,expression:"magicalWord"}],staticClass:"form-select",on:{change:function(t){var n=Array.prototype.filter.call(t.target.options,(function(e){return e.selected})).map((function(e){return"_value"in e?e._value:e.value}));e.magicalWord=t.target.multiple?n:n[0]}}},e._l(e.magicalWords,(function(t){return n("option",{key:t},[e._v(e._s(t))])})),0)])]),e._v(" "),n("div",{staticClass:"col-xl-4 col-6 d-flex align-items-center justify-content-end"},[n("button",{staticClass:"btn btn-outline-primary btn-sm",attrs:{type:"button"},on:{click:e.wordExample}},[e._v("\n\t\t\t\t\tRun\n\t\t\t\t")])]),e._v(" "),n("div",{staticClass:"col-xl-8 col-lg-12"},[n("vue-code-highlight",{attrs:{language:"js"}},[n("pre",[e._v("this.$unicornLog({\n\ttext: 'Hello World',\n\tstyles: '"+e._s(this.magicalWord)+"',\n});\n\t\t\t\t\t\t")])])],1)])])},o=[function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"row mb-2"},[n("div",{staticClass:"col-12"},[n("h5",{staticClass:"my-0"},[n("code",[e._v("styles")])])]),e._v(" "),n("div",{staticClass:"col-xl-8 col-lg-12"},[e._v("\n\t\t\t\tFor a list of the different available styles, refer to the\n\t\t\t\t"),n("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/API/console#styling_console_output",target:"_blank"}},[e._v("Web APIs MDN Styling Console Output\n\t\t\t\t")]),e._v("\n\t\t\t\tdeveloper documentation. Depending on the browser, some styles may not\n\t\t\t\twork.\n\t\t\t")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"col-xl-4 col-6 d-flex align-items-center"},[n("div",{staticClass:"col-xl-8 col-lg-12"},[n("h6",{staticClass:"my-0"},[e._v("Using an Array.")])])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"row mb-2",attrs:{id:"defaultStyles-word-example"}},[n("div",{staticClass:"col-xl-8 col-lg-12"},[e._v("\n\t\t\t\tYou can also set the "),n("code",[e._v("style")]),e._v(" option to a magical word to make\n\t\t\t\tthe magic happen. This can also be set with the\n\t\t\t\t"),n("code",[e._v("magical")]),e._v(" option to "),n("span",{staticClass:"boolean-style"},[e._v("true")]),e._v(".\n\t\t\t")])])}];r._withStripped=!0},"../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/Text.vue?vue&type=template&id=013f50a8&":function(e,t,n){"use strict";n.r(t),n.d(t,{render:function(){return r},staticRenderFns:function(){return o}});var r=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",[e._m(0),e._v(" "),n("div",{staticClass:"row mb-4",attrs:{id:"text-simple-example"}},[n("div",{staticClass:"col-xl-4 col-6 d-flex align-items-center"},[n("div",{staticClass:"col-xl-8 col-lg-12 mt-2"},[n("input",{directives:[{name:"model",rawName:"v-model",value:e.text,expression:"text"}],staticClass:"form-control",attrs:{type:"text",value:"[Bunnies]:",placeholder:"[Bunnies]:"},domProps:{value:e.text},on:{input:function(t){t.target.composing||(e.text=t.target.value)}}})])]),e._v(" "),n("div",{staticClass:"col-xl-4 col-6 d-flex align-items-center justify-content-end"},[n("button",{staticClass:"btn btn-outline-primary btn-sm",attrs:{type:"button"},on:{click:e.simpleExample}},[e._v("\n\t\t\t\t\tRun\n\t\t\t\t")])]),e._v(" "),n("div",{staticClass:"col-xl-8 col-lg-12"},[n("vue-code-highlight",{attrs:{language:"js"}},[n("pre",[e._v("this.$unicornLog({\n\ttext: 'Hello World',\n});\n\t\t\t\t\t\t")])])],1)])])},o=[function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"row mb-2"},[n("div",{staticClass:"col-12"},[n("h5",{staticClass:"my-0"},[n("code",[e._v("text")])])])])}];r._withStripped=!0},"../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/Type.vue?vue&type=template&id=14c1cc35&":function(e,t,n){"use strict";n.r(t),n.d(t,{render:function(){return r},staticRenderFns:function(){return o}});var r=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",[e._m(0),e._v(" "),n("div",{staticClass:"row mb-4",attrs:{id:"defaultStyles-simple-example"}},[n("div",{staticClass:"col-xl-4 col-6 d-flex align-items-center"},[n("div",{staticClass:"col-xl-8 col-lg-12 mt-2"},[n("select",{directives:[{name:"model",rawName:"v-model",value:e.logType,expression:"logType"}],staticClass:"form-select",on:{change:[function(t){var n=Array.prototype.filter.call(t.target.options,(function(e){return e.selected})).map((function(e){return"_value"in e?e._value:e.value}));e.logType=t.target.multiple?n:n[0]},e.checkType]}},e._l(e.types,(function(t){return n("option",{key:t},[e._v(e._s(t))])})),0)])]),e._v(" "),n("div",{staticClass:"col-xl-4 col-6 d-flex align-items-center justify-content-end"},[n("button",{staticClass:"btn btn-outline-primary btn-sm",attrs:{type:"button",disabled:"groupEnd"===this.logType},on:{click:e.simpleExample}},[e._v("\n\t\t\t\t\tRun\n\t\t\t\t")])]),e._v(" "),e.logNote?n("div",{staticClass:"col-xl-8 col-lg-12 my-2"},[n("div",{staticClass:"alert alert-primary d-flex align-items-center mb-0",attrs:{role:"alert"},domProps:{innerHTML:e._s(e.logNote)}})]):e._e(),e._v(" "),n("div",{staticClass:"col-xl-8 col-lg-12"},[n("vue-code-highlight",{attrs:{language:"js"}},[n("pre",[e._v("this.$unicornLog({\n\ttext: 'Hello World',\n\ttype: 'log',\n});\n\t\t\t\t\t\t")])])],1)])])},o=[function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"row mb-2"},[n("div",{staticClass:"col-12"},[n("h5",{staticClass:"my-0"},[n("code",[e._v("type")])])])])}];r._withStripped=!0},"../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../node_modules/vue-loader/lib/index.js??vue-loader-options!./docs/UnicornLog.vue?vue&type=template&id=92ac123c&":function(e,t,n){"use strict";n.r(t),n.d(t,{render:function(){return r},staticRenderFns:function(){return o}});var r=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",[n("Nav"),e._v(" "),e._m(0),e._v(" "),n("div",{staticClass:"container"},[n("div",{staticClass:"row mb-5",attrs:{id:"ul-installation"}},[e._m(1),e._v(" "),n("div",{staticClass:"col-xl-8 col-lg-12"},[n("vue-code-highlight",{attrs:{language:"shell"}},[n("pre",[e._v("npm i -D vue-unicorn-log\n\t\t\t\t\t\t")])])],1)]),e._v(" "),n("div",{staticClass:"row mb-5",attrs:{id:"ul-usage"}},[e._m(2),e._v(" "),n("div",{staticClass:"col-xl-8 col-lg-12"},[n("vue-code-highlight",{attrs:{language:"js"}},[n("pre",[e._v("import Vue from 'vue';\nimport UnicornLog from 'vue-unicorn-log';\n\nVue.use(UnicornLog);\n\t\t\t\t\t\t\t\t")])])],1)]),e._v(" "),n("div",{staticClass:"row mb-5",attrs:{id:"ul-plugin-options"}},[e._m(3),e._v(" "),n("div",{staticClass:"col-12 mb-3"},[n("div",{staticClass:"table-responsive"},[n("table",{staticClass:"table table-striped table-bordered"},[e._m(4),e._v(" "),n("tbody",[n("tr",[n("td",{attrs:{valign:"top"}},[e._v("defaultStyles")]),e._v(" "),n("td",{staticClass:"option-type",attrs:{valign:"top"}},[e._v("Object")]),e._v(" "),e._m(5),e._v(" "),e._m(6),e._v(" "),n("td",{attrs:{valign:"top"}},[e._v(e._s(e.copy.defaultStyles))])]),e._v(" "),n("tr",[n("td",{attrs:{valign:"top"}},[e._v("disabled")]),e._v(" "),n("td",{staticClass:"option-type",attrs:{valign:"top"}},[e._v("Boolean")]),e._v(" "),n("td",{staticClass:"boolean-style",attrs:{valign:"top"}},[e._v("false")]),e._v(" "),n("td",{attrs:{valign:"top"},domProps:{innerHTML:e._s(e.options.boolean)}}),e._v(" "),n("td",{attrs:{valign:"top"}},[e._v(e._s(e.copy.disabled))])]),e._v(" "),n("tr",[n("td",{attrs:{valign:"top"}},[e._v("logPrefix")]),e._v(" "),n("td",{staticClass:"option-type",attrs:{valign:"top"}},[e._v("Boolean | String")]),e._v(" "),n("td",{staticClass:"boolean-style",attrs:{valign:"top"}},[e._v("false")]),e._v(" "),n("td",{attrs:{valign:"top"}},[e._v("-")]),e._v(" "),n("td",{attrs:{valign:"top"}},[e._v(e._s(e.copy.logPrefix))])]),e._v(" "),n("tr",[n("td",{attrs:{valign:"top"}},[e._v("styles")]),e._v(" "),n("td",{staticClass:"option-type",attrs:{valign:"top"}},[e._v("String | Array")]),e._v(" "),n("td",{attrs:{valign:"top"}},[e._v("-")]),e._v(" "),n("td",{attrs:{valign:"top"},domProps:{innerHTML:e._s(e.options.styles)}}),e._v(" "),n("td",{attrs:{valign:"top"}},[e._v(e._s(e.copy.styles))])]),e._v(" "),n("tr",[n("td",{attrs:{valign:"top"}},[e._v("type")]),e._v(" "),n("td",{staticClass:"option-type",attrs:{valign:"top"}},[e._v("String")]),e._v(" "),n("td",{attrs:{valign:"top"}},[e._v("log")]),e._v(" "),n("td",{attrs:{valign:"top"},domProps:{innerHTML:e._s(e.options.type)}}),e._v(" "),n("td",{attrs:{valign:"top"}},[e._v(e._s(e.copy.type))])])])])])]),e._v(" "),e._m(7),e._v(" "),n("div",{staticClass:"col-xl-8 col-lg-12"},[n("vue-code-highlight",{attrs:{language:"js"}},[n("pre",[e._v("import Vue from 'vue';\nimport UnicornLog from 'vue-unicorn-log';\n\nVue.use(UnicornLog, {\n  defaultStyles: {},\n  disabled: process.env.UNICORN_LOG !== 'true',\n  logPrefix: '[OMG LOOK HERE!]',\n  styles: 'font-weight: bold;',\n  type: 'info'\n});\n\t\t\t\t\t\t\t\t")])])],1),e._v(" "),n("div",{staticClass:"col-12"},[n("svg",{staticStyle:{display:"none"},attrs:{xmlns:"http://www.w3.org/2000/svg"}},[n("symbol",{attrs:{id:"exclamation-triangle-fill",fill:"currentColor",viewBox:"0 0 16 16"}},[n("path",{attrs:{d:"M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"}})])]),e._v(" "),n("div",{staticClass:"alert alert-primary d-flex align-items-center my-2",attrs:{role:"alert"}},[n("svg",{staticClass:"bi flex-shrink-0 me-2",attrs:{width:"24",height:"24",role:"img","aria-label":"Info:"}},[n("use",{attrs:{"xlink:href":"#exclamation-triangle-fill"}})]),e._v(" "),e._m(8)])])]),e._v(" "),n("div",{staticClass:"row mb-5",attrs:{id:"ul-log-options"}},[e._m(9),e._v(" "),n("div",{staticClass:"col-lg-12"},[n("div",{staticClass:"table-responsive"},[n("table",{staticClass:"table table-striped table-bordered"},[e._m(10),e._v(" "),n("tbody",[n("tr",[n("td",{attrs:{valign:"top"}},[e._v("array")]),e._v(" "),n("td",{staticClass:"option-type",attrs:{valign:"top"}},[e._v("Array")]),e._v(" "),e._m(11),e._v(" "),n("td",{attrs:{valign:"top"}},[e._v("-")]),e._v(" "),n("td",{attrs:{valign:"top"}},[e._v(e._s(e.copy.array))])]),e._v(" "),n("tr",[n("td",{attrs:{valign:"top"}},[e._v("disabled")]),e._v(" "),n("td",{staticClass:"option-type",attrs:{valign:"top"}},[e._v("Boolean")]),e._v(" "),n("td",{staticClass:"boolean-style",attrs:{valign:"top"}},[e._v("false")]),e._v(" "),n("td",{attrs:{valign:"top"},domProps:{innerHTML:e._s(e.options.boolean)}}),e._v(" "),n("td",{attrs:{valign:"top"}},[e._v(e._s(e.copy.disabled))])]),e._v(" "),n("tr",[n("td",{attrs:{valign:"top"}},[e._v("logPrefix")]),e._v(" "),n("td",{staticClass:"option-type",attrs:{valign:"top"}},[e._v("Boolean | String")]),e._v(" "),n("td",{staticClass:"boolean-style",attrs:{valign:"top"}},[e._v("false")]),e._v(" "),n("td",{attrs:{valign:"top"}},[e._v("-")]),e._v(" "),n("td",{attrs:{valign:"top"}},[e._v(e._s(e.copy.logPrefix))])]),e._v(" "),n("tr",[n("td",{attrs:{valign:"top"}},[e._v("magical")]),e._v(" "),n("td",{staticClass:"option-type",attrs:{valign:"top"}},[e._v("Boolean")]),e._v(" "),n("td",{staticClass:"boolean-style",attrs:{valign:"top"}},[e._v("false")]),e._v(" "),n("td",{attrs:{valign:"top"},domProps:{innerHTML:e._s(e.options.boolean)}}),e._v(" "),n("td",{attrs:{valign:"top"}},[e._v(e._s(e.copy.magical))])]),e._v(" "),e._m(12),e._v(" "),n("tr",[n("td",{attrs:{valign:"top"}},[e._v("objects")]),e._v(" "),n("td",{staticClass:"option-type",attrs:{valign:"top"}},[e._v("Object")]),e._v(" "),e._m(13),e._v(" "),n("td",{attrs:{valign:"top"}},[e._v("-")]),e._v(" "),n("td",{attrs:{valign:"top"}},[e._v(e._s(e.copy.object))])]),e._v(" "),n("tr",[n("td",{attrs:{valign:"top"}},[e._v("styles")]),e._v(" "),n("td",{staticClass:"option-type",attrs:{valign:"top"}},[e._v("String | Array")]),e._v(" "),n("td",{attrs:{valign:"top"}},[e._v("-")]),e._v(" "),n("td",{attrs:{valign:"top"},domProps:{innerHTML:e._s(e.options.styles)}}),e._v(" "),n("td",{attrs:{valign:"top"}},[e._v(e._s(e.copy.styles))])]),e._v(" "),n("tr",[n("td",{attrs:{valign:"top"}},[e._v("text")]),e._v(" "),n("td",{staticClass:"option-type",attrs:{valign:"top"}},[e._v("String")]),e._v(" "),n("td",{attrs:{valign:"top"}},[e._v("🦄")]),e._v(" "),n("td",{attrs:{valign:"top"}},[e._v("-")]),e._v(" "),n("td",{attrs:{valign:"top"}},[e._v(e._s(e.copy.text))])]),e._v(" "),n("tr",[n("td",{attrs:{valign:"top"}},[e._v("type")]),e._v(" "),n("td",{staticClass:"option-type",attrs:{valign:"top"}},[e._v("String")]),e._v(" "),n("td",{attrs:{valign:"top"}},[e._v("log")]),e._v(" "),n("td",{attrs:{valign:"top"},domProps:{innerHTML:e._s(e.options.type)}}),e._v(" "),n("td",{attrs:{valign:"top"}},[e._v(e._s(e.copy.type))])])])])])])]),e._v(" "),e._m(14),e._v(" "),e._m(15),e._v(" "),n("div",{staticClass:"mb-5",attrs:{id:"ul-examples"}},[e._m(16),e._v(" "),n("SimpleExample",{attrs:{id:"simple-examples"}}),e._v(" "),n("TextExample",{attrs:{id:"text-examples"}}),e._v(" "),n("TypeExample",{attrs:{id:"type-examples"}}),e._v(" "),n("StylesExample",{attrs:{id:"styles-examples"}}),e._v(" "),n("DisabledExample",{attrs:{id:"disabled-examples"}}),e._v(" "),n("LogPrefixExample",{attrs:{id:"logPrefix-examples"}}),e._v(" "),n("MagicalExample",{attrs:{id:"magical-examples"}}),e._v(" "),n("LogPrefixExample",{attrs:{id:"name-examples",isNameOption:!0}}),e._v(" "),n("ObjectsExamples",{attrs:{id:"objects-examples"}}),e._v(" "),n("ArraysExample",{attrs:{id:"array-examples"}})],1),e._v(" "),e._m(17),e._v(" "),e._m(18),e._v(" "),e._m(19),e._v(" "),e._m(20)])],1)},o=[function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"container mb-5"},[n("div",{staticClass:"row mb-3"},[n("div",{staticClass:"col-12 text-center"},[n("h1",{staticClass:"rainbow-text"},[e._v("Vue Unicorn Log")])])]),e._v(" "),n("div",{staticClass:"row"},[n("div",{staticClass:"col-12 mb-4"},[n("h3",{staticClass:"text-center mb-4"},[e._v("\n\t\t\t\t\t\tA "),n("span",{staticClass:"rainbow-text"},[e._v("magical")]),e._v(" 🦄 plugin to make\n\t\t\t\t\t\tcoloring the console output easier and more flexible.\n\t\t\t\t\t")]),e._v(" "),n("p",[e._v("\n\t\t\t\t\t\tSometimes when building your application/site you don't want to see\n\t\t\t\t\t\tyour linter complaining about using console functions. This helps to\n\t\t\t\t\t\tkeep your linter happy so you can concentrate on writing bug free\n\t\t\t\t\t\tmagical code.\n\t\t\t\t\t")]),e._v(" "),n("p",[e._v("\n\t\t\t\t\t\tIt also has the ability to run the console functions depending on\n\t\t\t\t\t\tenvironment variables so you can keep your production site's console\n\t\t\t\t\t\tquiet.\n\t\t\t\t\t")])]),e._v(" "),n("div",{staticClass:"col-12"},[n("h5",[e._v("Demo")])]),e._v(" "),n("div",{staticClass:"col-12"},[e._v('\n\t\t\t\t\tOpen DevTools and click on the "Console" tab and try out some\n\t\t\t\t\t'),n("a",{attrs:{href:"#ul-examples"}},[e._v("Examples")]),e._v(".\n\t\t\t\t")])])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"col-12"},[n("h2",[e._v("Installation")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"col-12"},[n("h2",[e._v("Usage")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"col-12 mb-3"},[n("h2",[e._v("Plugin Options")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("thead",[n("tr",[n("th",[e._v("Name")]),e._v(" "),n("th",[e._v("Type")]),e._v(" "),n("th",[e._v("Default")]),e._v(" "),n("th",[e._v("Options")]),e._v(" "),n("th",[e._v("Description")])])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("td",{attrs:{valign:"top"}},[n("code",[n("pre",[e._v("const rainbowLinearGradient = `linear-gradient(to right,\n\thsl(0, 100%, 50%),\n\thsl(60, 100%, 50%),\n\thsl(120, 100%, 50%),\n\thsl(180, 100%, 50%),\n\thsl(240, 100%, 50%),\n\thsl(300, 100%, 50%),\n\thsl(360, 100%, 50%)\n)`;\n\ndefaultStyles: {\n\tlog: [\n\t\t'background-color: black',\n\t\t`border-image: ${rainbowLinearGradient} 1`,\n\t\t'border-style: solid',\n\t\t'border-width: 4px',\n\t\t'color: #fff',\n\t\t'font-weight: normal',\n\t\t'padding: 8px',\n\t],\n\tinfo: [\n\t\t'background-color: hsla(225, 100%, 8%, 1)',\n\t\t'box-shadow: 999px 0 0 hsla(225, 100%, 8%, 1)',\n\t\t'color: hsla(225, 100%, 85%, 1)',\n\t\t'display: block',\n\t\t'padding: 2px',\n\t],\n}")])])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("td",{attrs:{valign:"top"}},[n("code",[n("pre",[e._v("{\n\tlog: [],\n\tinfo: [],\n}")])])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"col-12"},[n("h5",[e._v("Overriding the plugin default options")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",[e._v("\n\t\t\t\t\t\t\tIt is recommended to set the "),n("code",[e._v("disabled")]),e._v(" option to use a\n\t\t\t\t\t\t\t"),n("span",{staticClass:"fst-italic"},[e._v(".env")]),e._v(" variable when possible. This\n\t\t\t\t\t\t\tway you will not have your logs exposed to the public when on a\n\t\t\t\t\t\t\tproduction site.\n\t\t\t\t\t\t")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"col-12 mb-3"},[n("h2",[e._v("Log Options")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("thead",[n("tr",[n("th",[e._v("Name")]),e._v(" "),n("th",[e._v("Type")]),e._v(" "),n("th",[e._v("Default")]),e._v(" "),n("th",[e._v("Options")]),e._v(" "),n("th",[e._v("Description")])])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("td",{attrs:{valign:"top"}},[n("code",[e._v("[]")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("tr",[n("td",{attrs:{valign:"top"}},[e._v("name")]),e._v(" "),n("td",{staticClass:"option-type",attrs:{valign:"top"}},[e._v("String")]),e._v(" "),n("td",{attrs:{valign:"top"}},[e._v("[UnicornLog]:")]),e._v(" "),n("td",{attrs:{valign:"top"}},[e._v("-")]),e._v(" "),n("td",{attrs:{valign:"top"}},[e._v("\n\t\t\t\t\t\t\t\t\t\tIf "),n("code",[e._v("logPrefix")]),e._v(" option is set as a\n\t\t\t\t\t\t\t\t\t\t"),n("span",{staticClass:"option-type"},[e._v("Boolean")]),e._v(" of\n\t\t\t\t\t\t\t\t\t\t"),n("span",{staticClass:"boolean-style"},[e._v("true")]),e._v(", it will use the\n\t\t\t\t\t\t\t\t\t\t"),n("code",[e._v("name")]),e._v(" option for the prefix.\n\t\t\t\t\t\t\t\t\t")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("td",{attrs:{valign:"top"}},[n("code",[e._v("{}")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"row mb-5",attrs:{id:"ul-instance-methods"}},[n("div",{staticClass:"col-12"},[n("h2",[e._v("Instance Methods")])]),e._v(" "),n("div",{staticClass:"col-12"},[e._v("\n\t\t\t\t\tThere are two instance methods available to use:\n\t\t\t\t\t"),n("br"),e._v(" "),n("code",[e._v("$unicornLog")]),e._v(" "),n("br"),e._v(" "),n("code",[e._v("$uniLog")])])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"row mb-5",attrs:{id:"ul-console-methods"}},[n("div",{staticClass:"col-12"},[n("h2",[e._v("Console Methods")])]),e._v(" "),n("div",{staticClass:"col-12"},[e._v("\n\t\t\t\t\tFor a description of the different log methods, refer to the\n\t\t\t\t\t"),n("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/API/console",target:"_blank"}},[e._v("Web APIs MDN")]),e._v("\n\t\t\t\t\tdeveloper documentation for console.\n\t\t\t\t")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"row"},[n("div",{staticClass:"col-12 mb-3"},[n("h2",[e._v("Examples")]),e._v(" "),n("p",{staticClass:"fst-italic"},[e._v('\n\t\t\t\t\t\t\tOpen DevTools and click on the "Console" tab to view example\n\t\t\t\t\t\t\tresults.\n\t\t\t\t\t\t')])])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"row mb-5",attrs:{id:"ul-dependencies"}},[n("div",{staticClass:"col-12"},[n("h2",[e._v("Dependencies")])]),e._v(" "),n("div",{staticClass:"col-xl-8 col-lg-12"},[n("a",{attrs:{href:"https://v2.vuejs.org/",target:"_blank"}},[e._v("Vue 2")])])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"row mb-5",attrs:{id:"ul-change-log"}},[n("div",{staticClass:"col-12"},[n("h2",[e._v("Change Log")])]),e._v(" "),n("div",{staticClass:"col-12"},[n("a",{attrs:{href:"https://github.com/webdevnerdstuff/vue-unicorn-log/blob/master/CHANGELOG.md",target:"_blank"}},[e._v("CHANGELOG.md")])])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"row mb-5",attrs:{id:"ul-license"}},[n("div",{staticClass:"col-12"},[n("h2",[e._v("License")])]),e._v(" "),n("div",{staticClass:"col-12"},[n("p",[e._v("\n\t\t\t\t\t\tCopyright © 2022 WebDevNerdStuff\n\t\t\t\t\t\t"),n("br"),e._v("\n\t\t\t\t\t\tLicensed under the MIT license.\n\t\t\t\t\t")]),e._v(" "),n("p",[n("a",{attrs:{href:"https://github.com/webdevnerdstuff/vue-unicorn-log/blob/master/LICENSE.md",target:"_blank"}},[e._v("\n\t\t\t\t\t\t\tLICENSE.md\n\t\t\t\t\t\t")])])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"row mb-5"},[t("div",{staticClass:"col-12 text-center"},[t("img",{attrs:{src:"/images/vue-unicorn-log-social.jpg",alt:"Vue Unicorn Log by @WebDevNerdStuff"}})])])}];r._withStripped=!0},"../node_modules/vue-loader/lib/runtime/componentNormalizer.js":function(e,t,n){"use strict";function r(e,t,n,r,o,a,i,s){var l,c="function"==typeof e?e.options:e;if(t&&(c.render=t,c.staticRenderFns=n,c._compiled=!0),r&&(c.functional=!0),a&&(c._scopeId="data-v-"+a),i?(l=function(e){(e=e||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(e=__VUE_SSR_CONTEXT__),o&&o.call(this,e),e&&e._registeredComponents&&e._registeredComponents.add(i)},c._ssrRegister=l):o&&(l=s?function(){o.call(this,(c.functional?this.parent:this).$root.$options.shadowRoot)}:o),l)if(c.functional){c._injectStyles=l;var u=c.render;c.render=function(e,t){return l.call(t),u(e,t)}}else{var d=c.beforeCreate;c.beforeCreate=d?[].concat(d,l):[l]}return{exports:e,options:c}}n.r(t),n.d(t,{default:function(){return r}})},"../node_modules/vue-style-loader/index.js!../node_modules/css-loader/dist/cjs.js!../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../node_modules/sass-loader/dist/cjs.js??clonedRuleSet-3[0].rules[0].use[2]!../node_modules/vue-loader/lib/index.js??vue-loader-options!./docs/UnicornLog.vue?vue&type=style&index=0&lang=scss&":function(e,t,n){var r=n("../node_modules/css-loader/dist/cjs.js!../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../node_modules/sass-loader/dist/cjs.js??clonedRuleSet-3[0].rules[0].use[2]!../node_modules/vue-loader/lib/index.js??vue-loader-options!./docs/UnicornLog.vue?vue&type=style&index=0&lang=scss&");r.__esModule&&(r=r.default),"string"==typeof r&&(r=[[e.id,r,""]]),r.locals&&(e.exports=r.locals);(0,n("../node_modules/vue-style-loader/lib/addStylesClient.js").default)("1ef731c9",r,!1,{})},"../node_modules/vue-style-loader/lib/addStylesClient.js":function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return v}});var r=n("../node_modules/vue-style-loader/lib/listToStyles.js"),o="undefined"!=typeof document;if("undefined"!=typeof DEBUG&&DEBUG&&!o)throw new Error("vue-style-loader cannot be used in a non-browser environment. Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.");var a={},i=o&&(document.head||document.getElementsByTagName("head")[0]),s=null,l=0,c=!1,u=function(){},d=null,p="data-vue-ssr-id",f="undefined"!=typeof navigator&&/msie [6-9]\b/.test(navigator.userAgent.toLowerCase());function v(e,t,n,o){c=n,d=o||{};var i=(0,r.default)(e,t);return m(i),function(t){for(var n=[],o=0;o<i.length;o++){var s=i[o];(l=a[s.id]).refs--,n.push(l)}t?m(i=(0,r.default)(e,t)):i=[];for(o=0;o<n.length;o++){var l;if(0===(l=n[o]).refs){for(var c=0;c<l.parts.length;c++)l.parts[c]();delete a[l.id]}}}}function m(e){for(var t=0;t<e.length;t++){var n=e[t],r=a[n.id];if(r){r.refs++;for(var o=0;o<r.parts.length;o++)r.parts[o](n.parts[o]);for(;o<n.parts.length;o++)r.parts.push(h(n.parts[o]));r.parts.length>n.parts.length&&(r.parts.length=n.parts.length)}else{var i=[];for(o=0;o<n.parts.length;o++)i.push(h(n.parts[o]));a[n.id]={id:n.id,refs:1,parts:i}}}}function g(){var e=document.createElement("style");return e.type="text/css",i.appendChild(e),e}function h(e){var t,n,r=document.querySelector("style["+p+'~="'+e.id+'"]');if(r){if(c)return u;r.parentNode.removeChild(r)}if(f){var o=l++;r=s||(s=g()),t=_.bind(null,r,o,!1),n=_.bind(null,r,o,!0)}else r=g(),t=x.bind(null,r),n=function(){r.parentNode.removeChild(r)};return t(e),function(r){if(r){if(r.css===e.css&&r.media===e.media&&r.sourceMap===e.sourceMap)return;t(e=r)}else n()}}var b,y=(b=[],function(e,t){return b[e]=t,b.filter(Boolean).join("\n")});function _(e,t,n,r){var o=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=y(t,o);else{var a=document.createTextNode(o),i=e.childNodes;i[t]&&e.removeChild(i[t]),i.length?e.insertBefore(a,i[t]):e.appendChild(a)}}function x(e,t){var n=t.css,r=t.media,o=t.sourceMap;if(r&&e.setAttribute("media",r),d.ssrId&&e.setAttribute(p,t.id),o&&(n+="\n/*# sourceURL="+o.sources[0]+" */",n+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */"),e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}},"../node_modules/vue-style-loader/lib/listToStyles.js":function(e,t,n){"use strict";function r(e,t){for(var n=[],r={},o=0;o<t.length;o++){var a=t[o],i=a[0],s={id:e+":"+o,css:a[1],media:a[2],sourceMap:a[3]};r[i]?r[i].parts.push(s):n.push(r[i]={id:i,parts:[s]})}return n}n.r(t),n.d(t,{default:function(){return r}})},"../node_modules/vue/dist/vue.runtime.esm.js":function(e,t,n){"use strict";n.r(t);var r=Object.freeze({});function o(e){return null==e}function a(e){return null!=e}function i(e){return!0===e}function s(e){return"string"==typeof e||"number"==typeof e||"symbol"==typeof e||"boolean"==typeof e}function l(e){return null!==e&&"object"==typeof e}var c=Object.prototype.toString;function u(e){return c.call(e).slice(8,-1)}function d(e){return"[object Object]"===c.call(e)}function p(e){return"[object RegExp]"===c.call(e)}function f(e){var t=parseFloat(String(e));return t>=0&&Math.floor(t)===t&&isFinite(e)}function v(e){return a(e)&&"function"==typeof e.then&&"function"==typeof e.catch}function m(e){return null==e?"":Array.isArray(e)||d(e)&&e.toString===c?JSON.stringify(e,null,2):String(e)}function g(e){var t=parseFloat(e);return isNaN(t)?e:t}function h(e,t){for(var n=Object.create(null),r=e.split(","),o=0;o<r.length;o++)n[r[o]]=!0;return t?function(e){return n[e.toLowerCase()]}:function(e){return n[e]}}var b=h("slot,component",!0),y=h("key,ref,slot,slot-scope,is");function _(e,t){if(e.length){var n=e.indexOf(t);if(n>-1)return e.splice(n,1)}}var x=Object.prototype.hasOwnProperty;function w(e,t){return x.call(e,t)}function A(e){var t=Object.create(null);return function(n){return t[n]||(t[n]=e(n))}}var C=/-(\w)/g,k=A((function(e){return e.replace(C,(function(e,t){return t?t.toUpperCase():""}))})),j=A((function(e){return e.charAt(0).toUpperCase()+e.slice(1)})),E=/\B([A-Z])/g,S=A((function(e){return e.replace(E,"-$1").toLowerCase()}));var O=Function.prototype.bind?function(e,t){return e.bind(t)}:function(e,t){function n(n){var r=arguments.length;return r?r>1?e.apply(t,arguments):e.call(t,n):e.call(t)}return n._length=e.length,n};function L(e,t){t=t||0;for(var n=e.length-t,r=new Array(n);n--;)r[n]=e[n+t];return r}function q(e,t){for(var n in t)e[n]=t[n];return e}function D(e){for(var t={},n=0;n<e.length;n++)e[n]&&q(t,e[n]);return t}function T(e,t,n){}var $=function(e,t,n){return!1},N=function(e){return e};function R(e,t){if(e===t)return!0;var n=l(e),r=l(t);if(!n||!r)return!n&&!r&&String(e)===String(t);try{var o=Array.isArray(e),a=Array.isArray(t);if(o&&a)return e.length===t.length&&e.every((function(e,n){return R(e,t[n])}));if(e instanceof Date&&t instanceof Date)return e.getTime()===t.getTime();if(o||a)return!1;var i=Object.keys(e),s=Object.keys(t);return i.length===s.length&&i.every((function(n){return R(e[n],t[n])}))}catch(e){return!1}}function P(e,t){for(var n=0;n<e.length;n++)if(R(e[n],t))return n;return-1}function F(e){var t=!1;return function(){t||(t=!0,e.apply(this,arguments))}}var B="data-server-rendered",U=["component","directive","filter"],I=["beforeCreate","created","beforeMount","mounted","beforeUpdate","updated","beforeDestroy","destroyed","activated","deactivated","errorCaptured","serverPrefetch"],M={optionMergeStrategies:Object.create(null),silent:!1,productionTip:!0,devtools:!0,performance:!1,errorHandler:null,warnHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:$,isReservedAttr:$,isUnknownElement:$,getTagNamespace:T,parsePlatformTagName:N,mustUseProp:$,async:!0,_lifecycleHooks:I},H=/a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;function V(e){var t=(e+"").charCodeAt(0);return 36===t||95===t}function z(e,t,n,r){Object.defineProperty(e,t,{value:n,enumerable:!!r,writable:!0,configurable:!0})}var W=new RegExp("[^"+H.source+".$_\\d]");var G,Y="__proto__"in{},Z="undefined"!=typeof window,J="undefined"!=typeof WXEnvironment&&!!WXEnvironment.platform,K=J&&WXEnvironment.platform.toLowerCase(),X=Z&&window.navigator.userAgent.toLowerCase(),Q=X&&/msie|trident/.test(X),ee=X&&X.indexOf("msie 9.0")>0,te=X&&X.indexOf("edge/")>0,ne=(X&&X.indexOf("android"),X&&/iphone|ipad|ipod|ios/.test(X)||"ios"===K),re=(X&&/chrome\/\d+/.test(X),X&&/phantomjs/.test(X),X&&X.match(/firefox\/(\d+)/)),oe={}.watch,ae=!1;if(Z)try{var ie={};Object.defineProperty(ie,"passive",{get:function(){ae=!0}}),window.addEventListener("test-passive",null,ie)}catch(e){}var se=function(){return void 0===G&&(G=!Z&&!J&&void 0!==n.g&&(n.g.process&&"server"===n.g.process.env.VUE_ENV)),G},le=Z&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__;function ce(e){return"function"==typeof e&&/native code/.test(e.toString())}var ue,de="undefined"!=typeof Symbol&&ce(Symbol)&&"undefined"!=typeof Reflect&&ce(Reflect.ownKeys);ue="undefined"!=typeof Set&&ce(Set)?Set:function(){function e(){this.set=Object.create(null)}return e.prototype.has=function(e){return!0===this.set[e]},e.prototype.add=function(e){this.set[e]=!0},e.prototype.clear=function(){this.set=Object.create(null)},e}();var pe=T,fe=T,ve=T,me=T,ge="undefined"!=typeof console,he=/(?:^|[-_])(\w)/g;pe=function(e,t){var n=t?ve(t):"";M.warnHandler?M.warnHandler.call(null,e,t,n):ge&&!M.silent&&console.error("[Vue warn]: "+e+n)},fe=function(e,t){ge&&!M.silent&&console.warn("[Vue tip]: "+e+(t?ve(t):""))},me=function(e,t){if(e.$root===e)return"<Root>";var n="function"==typeof e&&null!=e.cid?e.options:e._isVue?e.$options||e.constructor.options:e,r=n.name||n._componentTag,o=n.__file;if(!r&&o){var a=o.match(/([^/\\]+)\.vue$/);r=a&&a[1]}return(r?"<"+(r.replace(he,(function(e){return e.toUpperCase()})).replace(/[-_]/g,"")+">"):"<Anonymous>")+(o&&!1!==t?" at "+o:"")};ve=function(e){if(e._isVue&&e.$parent){for(var t=[],n=0;e;){if(t.length>0){var r=t[t.length-1];if(r.constructor===e.constructor){n++,e=e.$parent;continue}n>0&&(t[t.length-1]=[r,n],n=0)}t.push(e),e=e.$parent}return"\n\nfound in\n\n"+t.map((function(e,t){return""+(0===t?"---\x3e ":function(e,t){for(var n="";t;)t%2==1&&(n+=e),t>1&&(e+=e),t>>=1;return n}(" ",5+2*t))+(Array.isArray(e)?me(e[0])+"... ("+e[1]+" recursive calls)":me(e))})).join("\n")}return"\n\n(found in "+me(e)+")"};var be=0,ye=function(){this.id=be++,this.subs=[]};ye.prototype.addSub=function(e){this.subs.push(e)},ye.prototype.removeSub=function(e){_(this.subs,e)},ye.prototype.depend=function(){ye.target&&ye.target.addDep(this)},ye.prototype.notify=function(){var e=this.subs.slice();M.async||e.sort((function(e,t){return e.id-t.id}));for(var t=0,n=e.length;t<n;t++)e[t].update()},ye.target=null;var _e=[];function xe(e){_e.push(e),ye.target=e}function we(){_e.pop(),ye.target=_e[_e.length-1]}var Ae=function(e,t,n,r,o,a,i,s){this.tag=e,this.data=t,this.children=n,this.text=r,this.elm=o,this.ns=void 0,this.context=a,this.fnContext=void 0,this.fnOptions=void 0,this.fnScopeId=void 0,this.key=t&&t.key,this.componentOptions=i,this.componentInstance=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1,this.asyncFactory=s,this.asyncMeta=void 0,this.isAsyncPlaceholder=!1},Ce={child:{configurable:!0}};Ce.child.get=function(){return this.componentInstance},Object.defineProperties(Ae.prototype,Ce);var ke=function(e){void 0===e&&(e="");var t=new Ae;return t.text=e,t.isComment=!0,t};function je(e){return new Ae(void 0,void 0,void 0,String(e))}function Ee(e){var t=new Ae(e.tag,e.data,e.children&&e.children.slice(),e.text,e.elm,e.context,e.componentOptions,e.asyncFactory);return t.ns=e.ns,t.isStatic=e.isStatic,t.key=e.key,t.isComment=e.isComment,t.fnContext=e.fnContext,t.fnOptions=e.fnOptions,t.fnScopeId=e.fnScopeId,t.asyncMeta=e.asyncMeta,t.isCloned=!0,t}var Se=Array.prototype,Oe=Object.create(Se);["push","pop","shift","unshift","splice","sort","reverse"].forEach((function(e){var t=Se[e];z(Oe,e,(function(){for(var n=[],r=arguments.length;r--;)n[r]=arguments[r];var o,a=t.apply(this,n),i=this.__ob__;switch(e){case"push":case"unshift":o=n;break;case"splice":o=n.slice(2)}return o&&i.observeArray(o),i.dep.notify(),a}))}));var Le=Object.getOwnPropertyNames(Oe),qe=!0;function De(e){qe=e}var Te=function(e){this.value=e,this.dep=new ye,this.vmCount=0,z(e,"__ob__",this),Array.isArray(e)?(Y?function(e,t){e.__proto__=t}(e,Oe):function(e,t,n){for(var r=0,o=n.length;r<o;r++){var a=n[r];z(e,a,t[a])}}(e,Oe,Le),this.observeArray(e)):this.walk(e)};function $e(e,t){var n;if(l(e)&&!(e instanceof Ae))return w(e,"__ob__")&&e.__ob__ instanceof Te?n=e.__ob__:qe&&!se()&&(Array.isArray(e)||d(e))&&Object.isExtensible(e)&&!e._isVue&&(n=new Te(e)),t&&n&&n.vmCount++,n}function Ne(e,t,n,r,o){var a=new ye,i=Object.getOwnPropertyDescriptor(e,t);if(!i||!1!==i.configurable){var s=i&&i.get,l=i&&i.set;s&&!l||2!==arguments.length||(n=e[t]);var c=!o&&$e(n);Object.defineProperty(e,t,{enumerable:!0,configurable:!0,get:function(){var t=s?s.call(e):n;return ye.target&&(a.depend(),c&&(c.dep.depend(),Array.isArray(t)&&Fe(t))),t},set:function(t){var i=s?s.call(e):n;t===i||t!=t&&i!=i||(r&&r(),s&&!l||(l?l.call(e,t):n=t,c=!o&&$e(t),a.notify()))}})}}function Re(e,t,n){if((o(e)||s(e))&&pe("Cannot set reactive property on undefined, null, or primitive value: "+e),Array.isArray(e)&&f(t))return e.length=Math.max(e.length,t),e.splice(t,1,n),n;if(t in e&&!(t in Object.prototype))return e[t]=n,n;var r=e.__ob__;return e._isVue||r&&r.vmCount?(pe("Avoid adding reactive properties to a Vue instance or its root $data at runtime - declare it upfront in the data option."),n):r?(Ne(r.value,t,n),r.dep.notify(),n):(e[t]=n,n)}function Pe(e,t){if((o(e)||s(e))&&pe("Cannot delete reactive property on undefined, null, or primitive value: "+e),Array.isArray(e)&&f(t))e.splice(t,1);else{var n=e.__ob__;e._isVue||n&&n.vmCount?pe("Avoid deleting properties on a Vue instance or its root $data - just set it to null."):w(e,t)&&(delete e[t],n&&n.dep.notify())}}function Fe(e){for(var t=void 0,n=0,r=e.length;n<r;n++)(t=e[n])&&t.__ob__&&t.__ob__.dep.depend(),Array.isArray(t)&&Fe(t)}Te.prototype.walk=function(e){for(var t=Object.keys(e),n=0;n<t.length;n++)Ne(e,t[n])},Te.prototype.observeArray=function(e){for(var t=0,n=e.length;t<n;t++)$e(e[t])};var Be=M.optionMergeStrategies;function Ue(e,t){if(!t)return e;for(var n,r,o,a=de?Reflect.ownKeys(t):Object.keys(t),i=0;i<a.length;i++)"__ob__"!==(n=a[i])&&(r=e[n],o=t[n],w(e,n)?r!==o&&d(r)&&d(o)&&Ue(r,o):Re(e,n,o));return e}function Ie(e,t,n){return n?function(){var r="function"==typeof t?t.call(n,n):t,o="function"==typeof e?e.call(n,n):e;return r?Ue(r,o):o}:t?e?function(){return Ue("function"==typeof t?t.call(this,this):t,"function"==typeof e?e.call(this,this):e)}:t:e}function Me(e,t){var n=t?e?e.concat(t):Array.isArray(t)?t:[t]:e;return n?function(e){for(var t=[],n=0;n<e.length;n++)-1===t.indexOf(e[n])&&t.push(e[n]);return t}(n):n}function He(e,t,n,r){var o=Object.create(e||null);return t?(We(r,t,n),q(o,t)):o}Be.el=Be.propsData=function(e,t,n,r){return n||pe('option "'+r+'" can only be used during instance creation with the `new` keyword.'),Ve(e,t)},Be.data=function(e,t,n){return n?Ie(e,t,n):t&&"function"!=typeof t?(pe('The "data" option should be a function that returns a per-instance value in component definitions.',n),e):Ie(e,t)},I.forEach((function(e){Be[e]=Me})),U.forEach((function(e){Be[e+"s"]=He})),Be.watch=function(e,t,n,r){if(e===oe&&(e=void 0),t===oe&&(t=void 0),!t)return Object.create(e||null);if(We(r,t,n),!e)return t;var o={};for(var a in q(o,e),t){var i=o[a],s=t[a];i&&!Array.isArray(i)&&(i=[i]),o[a]=i?i.concat(s):Array.isArray(s)?s:[s]}return o},Be.props=Be.methods=Be.inject=Be.computed=function(e,t,n,r){if(t&&We(r,t,n),!e)return t;var o=Object.create(null);return q(o,e),t&&q(o,t),o},Be.provide=Ie;var Ve=function(e,t){return void 0===t?e:t};function ze(e){new RegExp("^[a-zA-Z][\\-\\.0-9_"+H.source+"]*$").test(e)||pe('Invalid component name: "'+e+'". Component names should conform to valid custom element name in html5 specification.'),(b(e)||M.isReservedTag(e))&&pe("Do not use built-in or reserved HTML elements as component id: "+e)}function We(e,t,n){d(t)||pe('Invalid value for option "'+e+'": expected an Object, but got '+u(t)+".",n)}function Ge(e,t,n){if(function(e){for(var t in e.components)ze(t)}(t),"function"==typeof t&&(t=t.options),function(e,t){var n=e.props;if(n){var r,o,a={};if(Array.isArray(n))for(r=n.length;r--;)"string"==typeof(o=n[r])?a[k(o)]={type:null}:pe("props must be strings when using array syntax.");else if(d(n))for(var i in n)o=n[i],a[k(i)]=d(o)?o:{type:o};else pe('Invalid value for option "props": expected an Array or an Object, but got '+u(n)+".",t);e.props=a}}(t,n),function(e,t){var n=e.inject;if(n){var r=e.inject={};if(Array.isArray(n))for(var o=0;o<n.length;o++)r[n[o]]={from:n[o]};else if(d(n))for(var a in n){var i=n[a];r[a]=d(i)?q({from:a},i):{from:i}}else pe('Invalid value for option "inject": expected an Array or an Object, but got '+u(n)+".",t)}}(t,n),function(e){var t=e.directives;if(t)for(var n in t){var r=t[n];"function"==typeof r&&(t[n]={bind:r,update:r})}}(t),!t._base&&(t.extends&&(e=Ge(e,t.extends,n)),t.mixins))for(var r=0,o=t.mixins.length;r<o;r++)e=Ge(e,t.mixins[r],n);var a,i={};for(a in e)s(a);for(a in t)w(e,a)||s(a);function s(r){var o=Be[r]||Ve;i[r]=o(e[r],t[r],n,r)}return i}function Ye(e,t,n,r){if("string"==typeof n){var o=e[t];if(w(o,n))return o[n];var a=k(n);if(w(o,a))return o[a];var i=j(a);if(w(o,i))return o[i];var s=o[n]||o[a]||o[i];return r&&!s&&pe("Failed to resolve "+t.slice(0,-1)+": "+n,e),s}}function Ze(e,t,n,r){var o=t[e],a=!w(n,e),i=n[e],s=tt(Boolean,o.type);if(s>-1)if(a&&!w(o,"default"))i=!1;else if(""===i||i===S(e)){var c=tt(String,o.type);(c<0||s<c)&&(i=!0)}if(void 0===i){i=function(e,t,n){if(!w(t,"default"))return;var r=t.default;l(r)&&pe('Invalid default value for prop "'+n+'": Props with type Object/Array must use a factory function to return the default value.',e);if(e&&e.$options.propsData&&void 0===e.$options.propsData[n]&&void 0!==e._props[n])return e._props[n];return"function"==typeof r&&"Function"!==Qe(t.type)?r.call(e):r}(r,o,e);var d=qe;De(!0),$e(i),De(d)}return function(e,t,n,r,o){if(e.required&&o)return void pe('Missing required prop: "'+t+'"',r);if(null==n&&!e.required)return;var a=e.type,i=!a||!0===a,s=[];if(a){Array.isArray(a)||(a=[a]);for(var l=0;l<a.length&&!i;l++){var c=Ke(n,a[l],r);s.push(c.expectedType||""),i=c.valid}}var d=s.some((function(e){return e}));if(!i&&d)return void pe(function(e,t,n){var r='Invalid prop: type check failed for prop "'+e+'". Expected '+n.map(j).join(", "),o=n[0],a=u(t);1===n.length&&ot(o)&&ot(typeof t)&&!function(){var e=[],t=arguments.length;for(;t--;)e[t]=arguments[t];return e.some((function(e){return"boolean"===e.toLowerCase()}))}(o,a)&&(r+=" with value "+nt(t,o));r+=", got "+a+" ",ot(a)&&(r+="with value "+nt(t,a)+".");return r}(t,n,s),r);var p=e.validator;p&&(p(n)||pe('Invalid prop: custom validator check failed for prop "'+t+'".',r))}(o,e,i,r,a),i}var Je=/^(String|Number|Boolean|Function|Symbol|BigInt)$/;function Ke(e,t,n){var r,o=Qe(t);if(Je.test(o)){var a=typeof e;(r=a===o.toLowerCase())||"object"!==a||(r=e instanceof t)}else if("Object"===o)r=d(e);else if("Array"===o)r=Array.isArray(e);else try{r=e instanceof t}catch(e){pe('Invalid prop type: "'+String(t)+'" is not a constructor',n),r=!1}return{valid:r,expectedType:o}}var Xe=/^\s*function (\w+)/;function Qe(e){var t=e&&e.toString().match(Xe);return t?t[1]:""}function et(e,t){return Qe(e)===Qe(t)}function tt(e,t){if(!Array.isArray(t))return et(t,e)?0:-1;for(var n=0,r=t.length;n<r;n++)if(et(t[n],e))return n;return-1}function nt(e,t){return"String"===t?'"'+e+'"':"Number"===t?""+Number(e):""+e}var rt=["string","number","boolean"];function ot(e){return rt.some((function(t){return e.toLowerCase()===t}))}function at(e,t,n){xe();try{if(t)for(var r=t;r=r.$parent;){var o=r.$options.errorCaptured;if(o)for(var a=0;a<o.length;a++)try{if(!1===o[a].call(r,e,t,n))return}catch(e){st(e,r,"errorCaptured hook")}}st(e,t,n)}finally{we()}}function it(e,t,n,r,o){var a;try{(a=n?e.apply(t,n):e.call(t))&&!a._isVue&&v(a)&&!a._handled&&(a.catch((function(e){return at(e,r,o+" (Promise/async)")})),a._handled=!0)}catch(e){at(e,r,o)}return a}function st(e,t,n){if(M.errorHandler)try{return M.errorHandler.call(null,e,t,n)}catch(t){t!==e&&lt(t,null,"config.errorHandler")}lt(e,t,n)}function lt(e,t,n){if(pe("Error in "+n+': "'+e.toString()+'"',t),!Z&&!J||"undefined"==typeof console)throw e;console.error(e)}var ct,ut,dt=!1,pt=[],ft=!1;function vt(){ft=!1;var e=pt.slice(0);pt.length=0;for(var t=0;t<e.length;t++)e[t]()}if("undefined"!=typeof Promise&&ce(Promise)){var mt=Promise.resolve();ct=function(){mt.then(vt),ne&&setTimeout(T)},dt=!0}else if(Q||"undefined"==typeof MutationObserver||!ce(MutationObserver)&&"[object MutationObserverConstructor]"!==MutationObserver.toString())ct="undefined"!=typeof setImmediate&&ce(setImmediate)?function(){setImmediate(vt)}:function(){setTimeout(vt,0)};else{var gt=1,ht=new MutationObserver(vt),bt=document.createTextNode(String(gt));ht.observe(bt,{characterData:!0}),ct=function(){gt=(gt+1)%2,bt.data=String(gt)},dt=!0}function yt(e,t){var n;if(pt.push((function(){if(e)try{e.call(t)}catch(e){at(e,t,"nextTick")}else n&&n(t)})),ft||(ft=!0,ct()),!e&&"undefined"!=typeof Promise)return new Promise((function(e){n=e}))}var _t=h("Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,BigInt,require"),xt=function(e,t){pe('Property or method "'+t+'" is not defined on the instance but referenced during render. Make sure that this property is reactive, either in the data option, or for class-based components, by initializing the property. See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.',e)},wt=function(e,t){pe('Property "'+t+'" must be accessed with "$data.'+t+'" because properties starting with "$" or "_" are not proxied in the Vue instance to prevent conflicts with Vue internals. See: https://vuejs.org/v2/api/#data',e)},At="undefined"!=typeof Proxy&&ce(Proxy);if(At){var Ct=h("stop,prevent,self,ctrl,shift,alt,meta,exact");M.keyCodes=new Proxy(M.keyCodes,{set:function(e,t,n){return Ct(t)?(pe("Avoid overwriting built-in modifier in config.keyCodes: ."+t),!1):(e[t]=n,!0)}})}var kt={has:function(e,t){var n=t in e,r=_t(t)||"string"==typeof t&&"_"===t.charAt(0)&&!(t in e.$data);return n||r||(t in e.$data?wt(e,t):xt(e,t)),n||!r}},jt={get:function(e,t){return"string"!=typeof t||t in e||(t in e.$data?wt(e,t):xt(e,t)),e[t]}};ut=function(e){if(At){var t=e.$options,n=t.render&&t.render._withStripped?jt:kt;e._renderProxy=new Proxy(e,n)}else e._renderProxy=e};var Et,St,Ot=new ue;function Lt(e){qt(e,Ot),Ot.clear()}function qt(e,t){var n,r,o=Array.isArray(e);if(!(!o&&!l(e)||Object.isFrozen(e)||e instanceof Ae)){if(e.__ob__){var a=e.__ob__.dep.id;if(t.has(a))return;t.add(a)}if(o)for(n=e.length;n--;)qt(e[n],t);else for(n=(r=Object.keys(e)).length;n--;)qt(e[r[n]],t)}}var Dt=Z&&window.performance;Dt&&Dt.mark&&Dt.measure&&Dt.clearMarks&&Dt.clearMeasures&&(Et=function(e){return Dt.mark(e)},St=function(e,t,n){Dt.measure(e,t,n),Dt.clearMarks(t),Dt.clearMarks(n)});var Tt=A((function(e){var t="&"===e.charAt(0),n="~"===(e=t?e.slice(1):e).charAt(0),r="!"===(e=n?e.slice(1):e).charAt(0);return{name:e=r?e.slice(1):e,once:n,capture:r,passive:t}}));function $t(e,t){function n(){var e=arguments,r=n.fns;if(!Array.isArray(r))return it(r,null,arguments,t,"v-on handler");for(var o=r.slice(),a=0;a<o.length;a++)it(o[a],null,e,t,"v-on handler")}return n.fns=e,n}function Nt(e,t,n,r,a,s){var l,c,u,d;for(l in e)c=e[l],u=t[l],d=Tt(l),o(c)?pe('Invalid handler for event "'+d.name+'": got '+String(c),s):o(u)?(o(c.fns)&&(c=e[l]=$t(c,s)),i(d.once)&&(c=e[l]=a(d.name,c,d.capture)),n(d.name,c,d.capture,d.passive,d.params)):c!==u&&(u.fns=c,e[l]=u);for(l in t)o(e[l])&&r((d=Tt(l)).name,t[l],d.capture)}function Rt(e,t,n){var r;e instanceof Ae&&(e=e.data.hook||(e.data.hook={}));var s=e[t];function l(){n.apply(this,arguments),_(r.fns,l)}o(s)?r=$t([l]):a(s.fns)&&i(s.merged)?(r=s).fns.push(l):r=$t([s,l]),r.merged=!0,e[t]=r}function Pt(e,t,n,r,o){if(a(t)){if(w(t,n))return e[n]=t[n],o||delete t[n],!0;if(w(t,r))return e[n]=t[r],o||delete t[r],!0}return!1}function Ft(e){return s(e)?[je(e)]:Array.isArray(e)?Ut(e):void 0}function Bt(e){return a(e)&&a(e.text)&&!1===e.isComment}function Ut(e,t){var n,r,l,c,u=[];for(n=0;n<e.length;n++)o(r=e[n])||"boolean"==typeof r||(c=u[l=u.length-1],Array.isArray(r)?r.length>0&&(Bt((r=Ut(r,(t||"")+"_"+n))[0])&&Bt(c)&&(u[l]=je(c.text+r[0].text),r.shift()),u.push.apply(u,r)):s(r)?Bt(c)?u[l]=je(c.text+r):""!==r&&u.push(je(r)):Bt(r)&&Bt(c)?u[l]=je(c.text+r.text):(i(e._isVList)&&a(r.tag)&&o(r.key)&&a(t)&&(r.key="__vlist"+t+"_"+n+"__"),u.push(r)));return u}function It(e,t){if(e){for(var n=Object.create(null),r=de?Reflect.ownKeys(e):Object.keys(e),o=0;o<r.length;o++){var a=r[o];if("__ob__"!==a){for(var i=e[a].from,s=t;s;){if(s._provided&&w(s._provided,i)){n[a]=s._provided[i];break}s=s.$parent}if(!s)if("default"in e[a]){var l=e[a].default;n[a]="function"==typeof l?l.call(t):l}else pe('Injection "'+a+'" not found',t)}}return n}}function Mt(e,t){if(!e||!e.length)return{};for(var n={},r=0,o=e.length;r<o;r++){var a=e[r],i=a.data;if(i&&i.attrs&&i.attrs.slot&&delete i.attrs.slot,a.context!==t&&a.fnContext!==t||!i||null==i.slot)(n.default||(n.default=[])).push(a);else{var s=i.slot,l=n[s]||(n[s]=[]);"template"===a.tag?l.push.apply(l,a.children||[]):l.push(a)}}for(var c in n)n[c].every(Ht)&&delete n[c];return n}function Ht(e){return e.isComment&&!e.asyncFactory||" "===e.text}function Vt(e){return e.isComment&&e.asyncFactory}function zt(e,t,n){var o,a=Object.keys(t).length>0,i=e?!!e.$stable:!a,s=e&&e.$key;if(e){if(e._normalized)return e._normalized;if(i&&n&&n!==r&&s===n.$key&&!a&&!n.$hasNormal)return n;for(var l in o={},e)e[l]&&"$"!==l[0]&&(o[l]=Wt(t,l,e[l]))}else o={};for(var c in t)c in o||(o[c]=Gt(t,c));return e&&Object.isExtensible(e)&&(e._normalized=o),z(o,"$stable",i),z(o,"$key",s),z(o,"$hasNormal",a),o}function Wt(e,t,n){var r=function(){var e=arguments.length?n.apply(null,arguments):n({}),t=(e=e&&"object"==typeof e&&!Array.isArray(e)?[e]:Ft(e))&&e[0];return e&&(!t||1===e.length&&t.isComment&&!Vt(t))?void 0:e};return n.proxy&&Object.defineProperty(e,t,{get:r,enumerable:!0,configurable:!0}),r}function Gt(e,t){return function(){return e[t]}}function Yt(e,t){var n,r,o,i,s;if(Array.isArray(e)||"string"==typeof e)for(n=new Array(e.length),r=0,o=e.length;r<o;r++)n[r]=t(e[r],r);else if("number"==typeof e)for(n=new Array(e),r=0;r<e;r++)n[r]=t(r+1,r);else if(l(e))if(de&&e[Symbol.iterator]){n=[];for(var c=e[Symbol.iterator](),u=c.next();!u.done;)n.push(t(u.value,n.length)),u=c.next()}else for(i=Object.keys(e),n=new Array(i.length),r=0,o=i.length;r<o;r++)s=i[r],n[r]=t(e[s],s,r);return a(n)||(n=[]),n._isVList=!0,n}function Zt(e,t,n,r){var o,a=this.$scopedSlots[e];a?(n=n||{},r&&(l(r)||pe("slot v-bind without argument expects an Object",this),n=q(q({},r),n)),o=a(n)||("function"==typeof t?t():t)):o=this.$slots[e]||("function"==typeof t?t():t);var i=n&&n.slot;return i?this.$createElement("template",{slot:i},o):o}function Jt(e){return Ye(this.$options,"filters",e,!0)||N}function Kt(e,t){return Array.isArray(e)?-1===e.indexOf(t):e!==t}function Xt(e,t,n,r,o){var a=M.keyCodes[t]||n;return o&&r&&!M.keyCodes[t]?Kt(o,r):a?Kt(a,e):r?S(r)!==t:void 0===e}function Qt(e,t,n,r,o){if(n)if(l(n)){var a;Array.isArray(n)&&(n=D(n));var i=function(i){if("class"===i||"style"===i||y(i))a=e;else{var s=e.attrs&&e.attrs.type;a=r||M.mustUseProp(t,s,i)?e.domProps||(e.domProps={}):e.attrs||(e.attrs={})}var l=k(i),c=S(i);l in a||c in a||(a[i]=n[i],o&&((e.on||(e.on={}))["update:"+i]=function(e){n[i]=e}))};for(var s in n)i(s)}else pe("v-bind without argument expects an Object or Array value",this);return e}function en(e,t){var n=this._staticTrees||(this._staticTrees=[]),r=n[e];return r&&!t||nn(r=n[e]=this.$options.staticRenderFns[e].call(this._renderProxy,null,this),"__static__"+e,!1),r}function tn(e,t,n){return nn(e,"__once__"+t+(n?"_"+n:""),!0),e}function nn(e,t,n){if(Array.isArray(e))for(var r=0;r<e.length;r++)e[r]&&"string"!=typeof e[r]&&rn(e[r],t+"_"+r,n);else rn(e,t,n)}function rn(e,t,n){e.isStatic=!0,e.key=t,e.isOnce=n}function on(e,t){if(t)if(d(t)){var n=e.on=e.on?q({},e.on):{};for(var r in t){var o=n[r],a=t[r];n[r]=o?[].concat(o,a):a}}else pe("v-on without argument expects an Object value",this);return e}function an(e,t,n,r){t=t||{$stable:!n};for(var o=0;o<e.length;o++){var a=e[o];Array.isArray(a)?an(a,t,n):a&&(a.proxy&&(a.fn.proxy=!0),t[a.key]=a.fn)}return r&&(t.$key=r),t}function sn(e,t){for(var n=0;n<t.length;n+=2){var r=t[n];"string"==typeof r&&r?e[t[n]]=t[n+1]:""!==r&&null!==r&&pe("Invalid value for dynamic directive argument (expected string or null): "+r,this)}return e}function ln(e,t){return"string"==typeof e?t+e:e}function cn(e){e._o=tn,e._n=g,e._s=m,e._l=Yt,e._t=Zt,e._q=R,e._i=P,e._m=en,e._f=Jt,e._k=Xt,e._b=Qt,e._v=je,e._e=ke,e._u=an,e._g=on,e._d=sn,e._p=ln}function un(e,t,n,o,a){var s,l=this,c=a.options;w(o,"_uid")?(s=Object.create(o))._original=o:(s=o,o=o._original);var u=i(c._compiled),d=!u;this.data=e,this.props=t,this.children=n,this.parent=o,this.listeners=e.on||r,this.injections=It(c.inject,o),this.slots=function(){return l.$slots||zt(e.scopedSlots,l.$slots=Mt(n,o)),l.$slots},Object.defineProperty(this,"scopedSlots",{enumerable:!0,get:function(){return zt(e.scopedSlots,this.slots())}}),u&&(this.$options=c,this.$slots=this.slots(),this.$scopedSlots=zt(e.scopedSlots,this.$slots)),c._scopeId?this._c=function(e,t,n,r){var a=hn(s,e,t,n,r,d);return a&&!Array.isArray(a)&&(a.fnScopeId=c._scopeId,a.fnContext=o),a}:this._c=function(e,t,n,r){return hn(s,e,t,n,r,d)}}function dn(e,t,n,r,o){var a=Ee(e);return a.fnContext=n,a.fnOptions=r,(a.devtoolsMeta=a.devtoolsMeta||{}).renderContext=o,t.slot&&((a.data||(a.data={})).slot=t.slot),a}function pn(e,t){for(var n in t)e[k(n)]=t[n]}cn(un.prototype);var fn={init:function(e,t){if(e.componentInstance&&!e.componentInstance._isDestroyed&&e.data.keepAlive){var n=e;fn.prepatch(n,n)}else{(e.componentInstance=function(e,t){var n={_isComponent:!0,_parentVnode:e,parent:t},r=e.data.inlineTemplate;a(r)&&(n.render=r.render,n.staticRenderFns=r.staticRenderFns);return new e.componentOptions.Ctor(n)}(e,En)).$mount(t?e.elm:void 0,t)}},prepatch:function(e,t){var n=t.componentOptions;!function(e,t,n,o,a){Sn=!0;var i=o.data.scopedSlots,s=e.$scopedSlots,l=!!(i&&!i.$stable||s!==r&&!s.$stable||i&&e.$scopedSlots.$key!==i.$key||!i&&e.$scopedSlots.$key),c=!!(a||e.$options._renderChildren||l);e.$options._parentVnode=o,e.$vnode=o,e._vnode&&(e._vnode.parent=o);if(e.$options._renderChildren=a,e.$attrs=o.data.attrs||r,e.$listeners=n||r,t&&e.$options.props){De(!1);for(var u=e._props,d=e.$options._propKeys||[],p=0;p<d.length;p++){var f=d[p],v=e.$options.props;u[f]=Ze(f,v,t,e)}De(!0),e.$options.propsData=t}n=n||r;var m=e.$options._parentListeners;e.$options._parentListeners=n,jn(e,n,m),c&&(e.$slots=Mt(a,o.context),e.$forceUpdate());Sn=!1}(t.componentInstance=e.componentInstance,n.propsData,n.listeners,t,n.children)},insert:function(e){var t,n=e.context,r=e.componentInstance;r._isMounted||(r._isMounted=!0,Tn(r,"mounted")),e.data.keepAlive&&(n._isMounted?((t=r)._inactive=!1,Nn.push(t)):qn(r,!0))},destroy:function(e){var t=e.componentInstance;t._isDestroyed||(e.data.keepAlive?Dn(t,!0):t.$destroy())}},vn=Object.keys(fn);function mn(e,t,n,s,c){if(!o(e)){var u=n.$options._base;if(l(e)&&(e=u.extend(e)),"function"==typeof e){var d;if(o(e.cid)&&(e=function(e,t){if(i(e.error)&&a(e.errorComp))return e.errorComp;if(a(e.resolved))return e.resolved;var n=_n;n&&a(e.owners)&&-1===e.owners.indexOf(n)&&e.owners.push(n);if(i(e.loading)&&a(e.loadingComp))return e.loadingComp;if(n&&!a(e.owners)){var r=e.owners=[n],s=!0,c=null,u=null;n.$on("hook:destroyed",(function(){return _(r,n)}));var d=function(e){for(var t=0,n=r.length;t<n;t++)r[t].$forceUpdate();e&&(r.length=0,null!==c&&(clearTimeout(c),c=null),null!==u&&(clearTimeout(u),u=null))},p=F((function(n){e.resolved=xn(n,t),s?r.length=0:d(!0)})),f=F((function(t){pe("Failed to resolve async component: "+String(e)+(t?"\nReason: "+t:"")),a(e.errorComp)&&(e.error=!0,d(!0))})),m=e(p,f);return l(m)&&(v(m)?o(e.resolved)&&m.then(p,f):v(m.component)&&(m.component.then(p,f),a(m.error)&&(e.errorComp=xn(m.error,t)),a(m.loading)&&(e.loadingComp=xn(m.loading,t),0===m.delay?e.loading=!0:c=setTimeout((function(){c=null,o(e.resolved)&&o(e.error)&&(e.loading=!0,d(!1))}),m.delay||200)),a(m.timeout)&&(u=setTimeout((function(){u=null,o(e.resolved)&&f("timeout ("+m.timeout+"ms)")}),m.timeout)))),s=!1,e.loading?e.loadingComp:e.resolved}}(d=e,u),void 0===e))return function(e,t,n,r,o){var a=ke();return a.asyncFactory=e,a.asyncMeta={data:t,context:n,children:r,tag:o},a}(d,t,n,s,c);t=t||{},nr(e),a(t.model)&&function(e,t){var n=e.model&&e.model.prop||"value",r=e.model&&e.model.event||"input";(t.attrs||(t.attrs={}))[n]=t.model.value;var o=t.on||(t.on={}),i=o[r],s=t.model.callback;a(i)?(Array.isArray(i)?-1===i.indexOf(s):i!==s)&&(o[r]=[s].concat(i)):o[r]=s}(e.options,t);var p=function(e,t,n){var r=t.options.props;if(!o(r)){var i={},s=e.attrs,l=e.props;if(a(s)||a(l))for(var c in r){var u=S(c),d=c.toLowerCase();c!==d&&s&&w(s,d)&&fe('Prop "'+d+'" is passed to component '+me(n||t)+', but the declared prop name is "'+c+'". Note that HTML attributes are case-insensitive and camelCased props need to use their kebab-case equivalents when using in-DOM templates. You should probably use "'+u+'" instead of "'+c+'".'),Pt(i,l,c,u,!0)||Pt(i,s,c,u,!1)}return i}}(t,e,c);if(i(e.options.functional))return function(e,t,n,o,i){var s=e.options,l={},c=s.props;if(a(c))for(var u in c)l[u]=Ze(u,c,t||r);else a(n.attrs)&&pn(l,n.attrs),a(n.props)&&pn(l,n.props);var d=new un(n,l,i,o,e),p=s.render.call(null,d._c,d);if(p instanceof Ae)return dn(p,n,d.parent,s,d);if(Array.isArray(p)){for(var f=Ft(p)||[],v=new Array(f.length),m=0;m<f.length;m++)v[m]=dn(f[m],n,d.parent,s,d);return v}}(e,p,t,n,s);var f=t.on;if(t.on=t.nativeOn,i(e.options.abstract)){var m=t.slot;t={},m&&(t.slot=m)}!function(e){for(var t=e.hook||(e.hook={}),n=0;n<vn.length;n++){var r=vn[n],o=t[r],a=fn[r];o===a||o&&o._merged||(t[r]=o?gn(a,o):a)}}(t);var g=e.options.name||c;return new Ae("vue-component-"+e.cid+(g?"-"+g:""),t,void 0,void 0,void 0,n,{Ctor:e,propsData:p,listeners:f,tag:c,children:s},d)}pe("Invalid Component definition: "+String(e),n)}}function gn(e,t){var n=function(n,r){e(n,r),t(n,r)};return n._merged=!0,n}function hn(e,t,n,r,o,c){return(Array.isArray(n)||s(n))&&(o=r,r=n,n=void 0),i(c)&&(o=2),function(e,t,n,r,o){if(a(n)&&a(n.__ob__))return pe("Avoid using observed data object as vnode data: "+JSON.stringify(n)+"\nAlways create fresh vnode data objects in each render!",e),ke();a(n)&&a(n.is)&&(t=n.is);if(!t)return ke();a(n)&&a(n.key)&&!s(n.key)&&pe("Avoid using non-primitive value as key, use string/number value instead.",e);Array.isArray(r)&&"function"==typeof r[0]&&((n=n||{}).scopedSlots={default:r[0]},r.length=0);2===o?r=Ft(r):1===o&&(r=function(e){for(var t=0;t<e.length;t++)if(Array.isArray(e[t]))return Array.prototype.concat.apply([],e);return e}(r));var i,c;if("string"==typeof t){var u;c=e.$vnode&&e.$vnode.ns||M.getTagNamespace(t),M.isReservedTag(t)?(a(n)&&a(n.nativeOn)&&"component"!==n.tag&&pe("The .native modifier for v-on is only valid on components but it was used on <"+t+">.",e),i=new Ae(M.parsePlatformTagName(t),n,r,void 0,void 0,e)):i=n&&n.pre||!a(u=Ye(e.$options,"components",t))?new Ae(t,n,r,void 0,void 0,e):mn(u,n,e,r,t)}else i=mn(t,n,e,r);return Array.isArray(i)?i:a(i)?(a(c)&&bn(i,c),a(n)&&function(e){l(e.style)&&Lt(e.style);l(e.class)&&Lt(e.class)}(n),i):ke()}(e,t,n,r,o)}function bn(e,t,n){if(e.ns=t,"foreignObject"===e.tag&&(t=void 0,n=!0),a(e.children))for(var r=0,s=e.children.length;r<s;r++){var l=e.children[r];a(l.tag)&&(o(l.ns)||i(n)&&"svg"!==l.tag)&&bn(l,t,n)}}var yn,_n=null;function xn(e,t){return(e.__esModule||de&&"Module"===e[Symbol.toStringTag])&&(e=e.default),l(e)?t.extend(e):e}function wn(e){if(Array.isArray(e))for(var t=0;t<e.length;t++){var n=e[t];if(a(n)&&(a(n.componentOptions)||Vt(n)))return n}}function An(e,t){yn.$on(e,t)}function Cn(e,t){yn.$off(e,t)}function kn(e,t){var n=yn;return function r(){var o=t.apply(null,arguments);null!==o&&n.$off(e,r)}}function jn(e,t,n){yn=e,Nt(t,n||{},An,Cn,kn,e),yn=void 0}var En=null,Sn=!1;function On(e){var t=En;return En=e,function(){En=t}}function Ln(e){for(;e&&(e=e.$parent);)if(e._inactive)return!0;return!1}function qn(e,t){if(t){if(e._directInactive=!1,Ln(e))return}else if(e._directInactive)return;if(e._inactive||null===e._inactive){e._inactive=!1;for(var n=0;n<e.$children.length;n++)qn(e.$children[n]);Tn(e,"activated")}}function Dn(e,t){if(!(t&&(e._directInactive=!0,Ln(e))||e._inactive)){e._inactive=!0;for(var n=0;n<e.$children.length;n++)Dn(e.$children[n]);Tn(e,"deactivated")}}function Tn(e,t){xe();var n=e.$options[t],r=t+" hook";if(n)for(var o=0,a=n.length;o<a;o++)it(n[o],e,null,e,r);e._hasHookEvent&&e.$emit("hook:"+t),we()}var $n=[],Nn=[],Rn={},Pn={},Fn=!1,Bn=!1,Un=0;var In=0,Mn=Date.now;if(Z&&!Q){var Hn=window.performance;Hn&&"function"==typeof Hn.now&&Mn()>document.createEvent("Event").timeStamp&&(Mn=function(){return Hn.now()})}function Vn(){var e,t;for(In=Mn(),Bn=!0,$n.sort((function(e,t){return e.id-t.id})),Un=0;Un<$n.length;Un++)if((e=$n[Un]).before&&e.before(),t=e.id,Rn[t]=null,e.run(),null!=Rn[t]&&(Pn[t]=(Pn[t]||0)+1,Pn[t]>100)){pe("You may have an infinite update loop "+(e.user?'in watcher with expression "'+e.expression+'"':"in a component render function."),e.vm);break}var n=Nn.slice(),r=$n.slice();Un=$n.length=Nn.length=0,Rn={},Pn={},Fn=Bn=!1,function(e){for(var t=0;t<e.length;t++)e[t]._inactive=!0,qn(e[t],!0)}(n),function(e){var t=e.length;for(;t--;){var n=e[t],r=n.vm;r._watcher===n&&r._isMounted&&!r._isDestroyed&&Tn(r,"updated")}}(r),le&&M.devtools&&le.emit("flush")}var zn=0,Wn=function(e,t,n,r,o){this.vm=e,o&&(e._watcher=this),e._watchers.push(this),r?(this.deep=!!r.deep,this.user=!!r.user,this.lazy=!!r.lazy,this.sync=!!r.sync,this.before=r.before):this.deep=this.user=this.lazy=this.sync=!1,this.cb=n,this.id=++zn,this.active=!0,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new ue,this.newDepIds=new ue,this.expression=t.toString(),"function"==typeof t?this.getter=t:(this.getter=function(e){if(!W.test(e)){var t=e.split(".");return function(e){for(var n=0;n<t.length;n++){if(!e)return;e=e[t[n]]}return e}}}(t),this.getter||(this.getter=T,pe('Failed watching path: "'+t+'" Watcher only accepts simple dot-delimited paths. For full control, use a function instead.',e))),this.value=this.lazy?void 0:this.get()};Wn.prototype.get=function(){var e;xe(this);var t=this.vm;try{e=this.getter.call(t,t)}catch(e){if(!this.user)throw e;at(e,t,'getter for watcher "'+this.expression+'"')}finally{this.deep&&Lt(e),we(),this.cleanupDeps()}return e},Wn.prototype.addDep=function(e){var t=e.id;this.newDepIds.has(t)||(this.newDepIds.add(t),this.newDeps.push(e),this.depIds.has(t)||e.addSub(this))},Wn.prototype.cleanupDeps=function(){for(var e=this.deps.length;e--;){var t=this.deps[e];this.newDepIds.has(t.id)||t.removeSub(this)}var n=this.depIds;this.depIds=this.newDepIds,this.newDepIds=n,this.newDepIds.clear(),n=this.deps,this.deps=this.newDeps,this.newDeps=n,this.newDeps.length=0},Wn.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():function(e){var t=e.id;if(null==Rn[t]){if(Rn[t]=!0,Bn){for(var n=$n.length-1;n>Un&&$n[n].id>e.id;)n--;$n.splice(n+1,0,e)}else $n.push(e);if(!Fn){if(Fn=!0,!M.async)return void Vn();yt(Vn)}}}(this)},Wn.prototype.run=function(){if(this.active){var e=this.get();if(e!==this.value||l(e)||this.deep){var t=this.value;if(this.value=e,this.user){var n='callback for watcher "'+this.expression+'"';it(this.cb,this.vm,[e,t],this.vm,n)}else this.cb.call(this.vm,e,t)}}},Wn.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},Wn.prototype.depend=function(){for(var e=this.deps.length;e--;)this.deps[e].depend()},Wn.prototype.teardown=function(){if(this.active){this.vm._isBeingDestroyed||_(this.vm._watchers,this);for(var e=this.deps.length;e--;)this.deps[e].removeSub(this);this.active=!1}};var Gn={enumerable:!0,configurable:!0,get:T,set:T};function Yn(e,t,n){Gn.get=function(){return this[t][n]},Gn.set=function(e){this[t][n]=e},Object.defineProperty(e,n,Gn)}function Zn(e){e._watchers=[];var t=e.$options;t.props&&function(e,t){var n=e.$options.propsData||{},r=e._props={},o=e.$options._propKeys=[],a=!e.$parent;a||De(!1);var i=function(i){o.push(i);var s=Ze(i,t,n,e),l=S(i);(y(l)||M.isReservedAttr(l))&&pe('"'+l+'" is a reserved attribute and cannot be used as component prop.',e),Ne(r,i,s,(function(){a||Sn||pe("Avoid mutating a prop directly since the value will be overwritten whenever the parent component re-renders. Instead, use a data or computed property based on the prop's value. Prop being mutated: \""+i+'"',e)})),i in e||Yn(e,"_props",i)};for(var s in t)i(s);De(!0)}(e,t.props),t.methods&&function(e,t){var n=e.$options.props;for(var r in t)"function"!=typeof t[r]&&pe('Method "'+r+'" has type "'+typeof t[r]+'" in the component definition. Did you reference the function correctly?',e),n&&w(n,r)&&pe('Method "'+r+'" has already been defined as a prop.',e),r in e&&V(r)&&pe('Method "'+r+'" conflicts with an existing Vue instance method. Avoid defining component methods that start with _ or $.'),e[r]="function"!=typeof t[r]?T:O(t[r],e)}(e,t.methods),t.data?function(e){var t=e.$options.data;d(t=e._data="function"==typeof t?function(e,t){xe();try{return e.call(t,t)}catch(e){return at(e,t,"data()"),{}}finally{we()}}(t,e):t||{})||(t={},pe("data functions should return an object:\nhttps://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function",e));var n=Object.keys(t),r=e.$options.props,o=e.$options.methods,a=n.length;for(;a--;){var i=n[a];o&&w(o,i)&&pe('Method "'+i+'" has already been defined as a data property.',e),r&&w(r,i)?pe('The data property "'+i+'" is already declared as a prop. Use prop default value instead.',e):V(i)||Yn(e,"_data",i)}$e(t,!0)}(e):$e(e._data={},!0),t.computed&&function(e,t){var n=e._computedWatchers=Object.create(null),r=se();for(var o in t){var a=t[o],i="function"==typeof a?a:a.get;null==i&&pe('Getter is missing for computed property "'+o+'".',e),r||(n[o]=new Wn(e,i||T,T,Jn)),o in e?o in e.$data?pe('The computed property "'+o+'" is already defined in data.',e):e.$options.props&&o in e.$options.props?pe('The computed property "'+o+'" is already defined as a prop.',e):e.$options.methods&&o in e.$options.methods&&pe('The computed property "'+o+'" is already defined as a method.',e):Kn(e,o,a)}}(e,t.computed),t.watch&&t.watch!==oe&&function(e,t){for(var n in t){var r=t[n];if(Array.isArray(r))for(var o=0;o<r.length;o++)er(e,n,r[o]);else er(e,n,r)}}(e,t.watch)}var Jn={lazy:!0};function Kn(e,t,n){var r=!se();"function"==typeof n?(Gn.get=r?Xn(t):Qn(n),Gn.set=T):(Gn.get=n.get?r&&!1!==n.cache?Xn(t):Qn(n.get):T,Gn.set=n.set||T),Gn.set===T&&(Gn.set=function(){pe('Computed property "'+t+'" was assigned to but it has no setter.',this)}),Object.defineProperty(e,t,Gn)}function Xn(e){return function(){var t=this._computedWatchers&&this._computedWatchers[e];if(t)return t.dirty&&t.evaluate(),ye.target&&t.depend(),t.value}}function Qn(e){return function(){return e.call(this,this)}}function er(e,t,n,r){return d(n)&&(r=n,n=n.handler),"string"==typeof n&&(n=e[n]),e.$watch(t,n,r)}var tr=0;function nr(e){var t=e.options;if(e.super){var n=nr(e.super);if(n!==e.superOptions){e.superOptions=n;var r=function(e){var t,n=e.options,r=e.sealedOptions;for(var o in n)n[o]!==r[o]&&(t||(t={}),t[o]=n[o]);return t}(e);r&&q(e.extendOptions,r),(t=e.options=Ge(n,e.extendOptions)).name&&(t.components[t.name]=e)}}return t}function rr(e){this instanceof rr||pe("Vue is a constructor and should be called with the `new` keyword"),this._init(e)}function or(e){e.cid=0;var t=1;e.extend=function(e){e=e||{};var n=this,r=n.cid,o=e._Ctor||(e._Ctor={});if(o[r])return o[r];var a=e.name||n.options.name;a&&ze(a);var i=function(e){this._init(e)};return(i.prototype=Object.create(n.prototype)).constructor=i,i.cid=t++,i.options=Ge(n.options,e),i.super=n,i.options.props&&function(e){var t=e.options.props;for(var n in t)Yn(e.prototype,"_props",n)}(i),i.options.computed&&function(e){var t=e.options.computed;for(var n in t)Kn(e.prototype,n,t[n])}(i),i.extend=n.extend,i.mixin=n.mixin,i.use=n.use,U.forEach((function(e){i[e]=n[e]})),a&&(i.options.components[a]=i),i.superOptions=n.options,i.extendOptions=e,i.sealedOptions=q({},i.options),o[r]=i,i}}function ar(e){return e&&(e.Ctor.options.name||e.tag)}function ir(e,t){return Array.isArray(e)?e.indexOf(t)>-1:"string"==typeof e?e.split(",").indexOf(t)>-1:!!p(e)&&e.test(t)}function sr(e,t){var n=e.cache,r=e.keys,o=e._vnode;for(var a in n){var i=n[a];if(i){var s=i.name;s&&!t(s)&&lr(n,a,r,o)}}}function lr(e,t,n,r){var o=e[t];!o||r&&o.tag===r.tag||o.componentInstance.$destroy(),e[t]=null,_(n,t)}!function(e){e.prototype._init=function(e){var t,n,o=this;o._uid=tr++,M.performance&&Et&&(t="vue-perf-start:"+o._uid,n="vue-perf-end:"+o._uid,Et(t)),o._isVue=!0,e&&e._isComponent?function(e,t){var n=e.$options=Object.create(e.constructor.options),r=t._parentVnode;n.parent=t.parent,n._parentVnode=r;var o=r.componentOptions;n.propsData=o.propsData,n._parentListeners=o.listeners,n._renderChildren=o.children,n._componentTag=o.tag,t.render&&(n.render=t.render,n.staticRenderFns=t.staticRenderFns)}(o,e):o.$options=Ge(nr(o.constructor),e||{},o),ut(o),o._self=o,function(e){var t=e.$options,n=t.parent;if(n&&!t.abstract){for(;n.$options.abstract&&n.$parent;)n=n.$parent;n.$children.push(e)}e.$parent=n,e.$root=n?n.$root:e,e.$children=[],e.$refs={},e._watcher=null,e._inactive=null,e._directInactive=!1,e._isMounted=!1,e._isDestroyed=!1,e._isBeingDestroyed=!1}(o),function(e){e._events=Object.create(null),e._hasHookEvent=!1;var t=e.$options._parentListeners;t&&jn(e,t)}(o),function(e){e._vnode=null,e._staticTrees=null;var t=e.$options,n=e.$vnode=t._parentVnode,o=n&&n.context;e.$slots=Mt(t._renderChildren,o),e.$scopedSlots=r,e._c=function(t,n,r,o){return hn(e,t,n,r,o,!1)},e.$createElement=function(t,n,r,o){return hn(e,t,n,r,o,!0)};var a=n&&n.data;Ne(e,"$attrs",a&&a.attrs||r,(function(){!Sn&&pe("$attrs is readonly.",e)}),!0),Ne(e,"$listeners",t._parentListeners||r,(function(){!Sn&&pe("$listeners is readonly.",e)}),!0)}(o),Tn(o,"beforeCreate"),function(e){var t=It(e.$options.inject,e);t&&(De(!1),Object.keys(t).forEach((function(n){Ne(e,n,t[n],(function(){pe('Avoid mutating an injected value directly since the changes will be overwritten whenever the provided component re-renders. injection being mutated: "'+n+'"',e)}))})),De(!0))}(o),Zn(o),function(e){var t=e.$options.provide;t&&(e._provided="function"==typeof t?t.call(e):t)}(o),Tn(o,"created"),M.performance&&Et&&(o._name=me(o,!1),Et(n),St("vue "+o._name+" init",t,n)),o.$options.el&&o.$mount(o.$options.el)}}(rr),function(e){var t={get:function(){return this._data}},n={get:function(){return this._props}};t.set=function(){pe("Avoid replacing instance root $data. Use nested data properties instead.",this)},n.set=function(){pe("$props is readonly.",this)},Object.defineProperty(e.prototype,"$data",t),Object.defineProperty(e.prototype,"$props",n),e.prototype.$set=Re,e.prototype.$delete=Pe,e.prototype.$watch=function(e,t,n){var r=this;if(d(t))return er(r,e,t,n);(n=n||{}).user=!0;var o=new Wn(r,e,t,n);if(n.immediate){var a='callback for immediate watcher "'+o.expression+'"';xe(),it(t,r,[o.value],r,a),we()}return function(){o.teardown()}}}(rr),function(e){var t=/^hook:/;e.prototype.$on=function(e,n){var r=this;if(Array.isArray(e))for(var o=0,a=e.length;o<a;o++)r.$on(e[o],n);else(r._events[e]||(r._events[e]=[])).push(n),t.test(e)&&(r._hasHookEvent=!0);return r},e.prototype.$once=function(e,t){var n=this;function r(){n.$off(e,r),t.apply(n,arguments)}return r.fn=t,n.$on(e,r),n},e.prototype.$off=function(e,t){var n=this;if(!arguments.length)return n._events=Object.create(null),n;if(Array.isArray(e)){for(var r=0,o=e.length;r<o;r++)n.$off(e[r],t);return n}var a,i=n._events[e];if(!i)return n;if(!t)return n._events[e]=null,n;for(var s=i.length;s--;)if((a=i[s])===t||a.fn===t){i.splice(s,1);break}return n},e.prototype.$emit=function(e){var t=this,n=e.toLowerCase();n!==e&&t._events[n]&&fe('Event "'+n+'" is emitted in component '+me(t)+' but the handler is registered for "'+e+'". Note that HTML attributes are case-insensitive and you cannot use v-on to listen to camelCase events when using in-DOM templates. You should probably use "'+S(e)+'" instead of "'+e+'".');var r=t._events[e];if(r){r=r.length>1?L(r):r;for(var o=L(arguments,1),a='event handler for "'+e+'"',i=0,s=r.length;i<s;i++)it(r[i],t,o,t,a)}return t}}(rr),function(e){e.prototype._update=function(e,t){var n=this,r=n.$el,o=n._vnode,a=On(n);n._vnode=e,n.$el=o?n.__patch__(o,e):n.__patch__(n.$el,e,t,!1),a(),r&&(r.__vue__=null),n.$el&&(n.$el.__vue__=n),n.$vnode&&n.$parent&&n.$vnode===n.$parent._vnode&&(n.$parent.$el=n.$el)},e.prototype.$forceUpdate=function(){this._watcher&&this._watcher.update()},e.prototype.$destroy=function(){var e=this;if(!e._isBeingDestroyed){Tn(e,"beforeDestroy"),e._isBeingDestroyed=!0;var t=e.$parent;!t||t._isBeingDestroyed||e.$options.abstract||_(t.$children,e),e._watcher&&e._watcher.teardown();for(var n=e._watchers.length;n--;)e._watchers[n].teardown();e._data.__ob__&&e._data.__ob__.vmCount--,e._isDestroyed=!0,e.__patch__(e._vnode,null),Tn(e,"destroyed"),e.$off(),e.$el&&(e.$el.__vue__=null),e.$vnode&&(e.$vnode.parent=null)}}}(rr),function(e){cn(e.prototype),e.prototype.$nextTick=function(e){return yt(e,this)},e.prototype._render=function(){var e,t=this,n=t.$options,r=n.render,o=n._parentVnode;o&&(t.$scopedSlots=zt(o.data.scopedSlots,t.$slots,t.$scopedSlots)),t.$vnode=o;try{_n=t,e=r.call(t._renderProxy,t.$createElement)}catch(n){if(at(n,t,"render"),t.$options.renderError)try{e=t.$options.renderError.call(t._renderProxy,t.$createElement,n)}catch(n){at(n,t,"renderError"),e=t._vnode}else e=t._vnode}finally{_n=null}return Array.isArray(e)&&1===e.length&&(e=e[0]),e instanceof Ae||(Array.isArray(e)&&pe("Multiple root nodes returned from render function. Render function should return a single root node.",t),e=ke()),e.parent=o,e}}(rr);var cr=[String,RegExp,Array],ur={name:"keep-alive",abstract:!0,props:{include:cr,exclude:cr,max:[String,Number]},methods:{cacheVNode:function(){var e=this,t=e.cache,n=e.keys,r=e.vnodeToCache,o=e.keyToCache;if(r){var a=r.tag,i=r.componentInstance,s=r.componentOptions;t[o]={name:ar(s),tag:a,componentInstance:i},n.push(o),this.max&&n.length>parseInt(this.max)&&lr(t,n[0],n,this._vnode),this.vnodeToCache=null}}},created:function(){this.cache=Object.create(null),this.keys=[]},destroyed:function(){for(var e in this.cache)lr(this.cache,e,this.keys)},mounted:function(){var e=this;this.cacheVNode(),this.$watch("include",(function(t){sr(e,(function(e){return ir(t,e)}))})),this.$watch("exclude",(function(t){sr(e,(function(e){return!ir(t,e)}))}))},updated:function(){this.cacheVNode()},render:function(){var e=this.$slots.default,t=wn(e),n=t&&t.componentOptions;if(n){var r=ar(n),o=this.include,a=this.exclude;if(o&&(!r||!ir(o,r))||a&&r&&ir(a,r))return t;var i=this.cache,s=this.keys,l=null==t.key?n.Ctor.cid+(n.tag?"::"+n.tag:""):t.key;i[l]?(t.componentInstance=i[l].componentInstance,_(s,l),s.push(l)):(this.vnodeToCache=t,this.keyToCache=l),t.data.keepAlive=!0}return t||e&&e[0]}},dr={KeepAlive:ur};!function(e){var t={get:function(){return M},set:function(){pe("Do not replace the Vue.config object, set individual fields instead.")}};Object.defineProperty(e,"config",t),e.util={warn:pe,extend:q,mergeOptions:Ge,defineReactive:Ne},e.set=Re,e.delete=Pe,e.nextTick=yt,e.observable=function(e){return $e(e),e},e.options=Object.create(null),U.forEach((function(t){e.options[t+"s"]=Object.create(null)})),e.options._base=e,q(e.options.components,dr),function(e){e.use=function(e){var t=this._installedPlugins||(this._installedPlugins=[]);if(t.indexOf(e)>-1)return this;var n=L(arguments,1);return n.unshift(this),"function"==typeof e.install?e.install.apply(e,n):"function"==typeof e&&e.apply(null,n),t.push(e),this}}(e),function(e){e.mixin=function(e){return this.options=Ge(this.options,e),this}}(e),or(e),function(e){U.forEach((function(t){e[t]=function(e,n){return n?("component"===t&&ze(e),"component"===t&&d(n)&&(n.name=n.name||e,n=this.options._base.extend(n)),"directive"===t&&"function"==typeof n&&(n={bind:n,update:n}),this.options[t+"s"][e]=n,n):this.options[t+"s"][e]}}))}(e)}(rr),Object.defineProperty(rr.prototype,"$isServer",{get:se}),Object.defineProperty(rr.prototype,"$ssrContext",{get:function(){return this.$vnode&&this.$vnode.ssrContext}}),Object.defineProperty(rr,"FunctionalRenderContext",{value:un}),rr.version="2.6.14";var pr=h("style,class"),fr=h("input,textarea,option,select,progress"),vr=h("contenteditable,draggable,spellcheck"),mr=h("events,caret,typing,plaintext-only"),gr=h("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,truespeed,typemustmatch,visible"),hr="http://www.w3.org/1999/xlink",br=function(e){return":"===e.charAt(5)&&"xlink"===e.slice(0,5)},yr=function(e){return br(e)?e.slice(6,e.length):""},_r=function(e){return null==e||!1===e};function xr(e){for(var t=e.data,n=e,r=e;a(r.componentInstance);)(r=r.componentInstance._vnode)&&r.data&&(t=wr(r.data,t));for(;a(n=n.parent);)n&&n.data&&(t=wr(t,n.data));return function(e,t){if(a(e)||a(t))return Ar(e,Cr(t));return""}(t.staticClass,t.class)}function wr(e,t){return{staticClass:Ar(e.staticClass,t.staticClass),class:a(e.class)?[e.class,t.class]:t.class}}function Ar(e,t){return e?t?e+" "+t:e:t||""}function Cr(e){return Array.isArray(e)?function(e){for(var t,n="",r=0,o=e.length;r<o;r++)a(t=Cr(e[r]))&&""!==t&&(n&&(n+=" "),n+=t);return n}(e):l(e)?function(e){var t="";for(var n in e)e[n]&&(t&&(t+=" "),t+=n);return t}(e):"string"==typeof e?e:""}var kr={svg:"http://www.w3.org/2000/svg",math:"http://www.w3.org/1998/Math/MathML"},jr=h("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot"),Er=h("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignobject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view",!0),Sr=function(e){return jr(e)||Er(e)};var Or=Object.create(null);var Lr=h("text,number,password,search,email,tel,url");var qr=Object.freeze({createElement:function(e,t){var n=document.createElement(e);return"select"!==e||t.data&&t.data.attrs&&void 0!==t.data.attrs.multiple&&n.setAttribute("multiple","multiple"),n},createElementNS:function(e,t){return document.createElementNS(kr[e],t)},createTextNode:function(e){return document.createTextNode(e)},createComment:function(e){return document.createComment(e)},insertBefore:function(e,t,n){e.insertBefore(t,n)},removeChild:function(e,t){e.removeChild(t)},appendChild:function(e,t){e.appendChild(t)},parentNode:function(e){return e.parentNode},nextSibling:function(e){return e.nextSibling},tagName:function(e){return e.tagName},setTextContent:function(e,t){e.textContent=t},setStyleScope:function(e,t){e.setAttribute(t,"")}}),Dr={create:function(e,t){Tr(t)},update:function(e,t){e.data.ref!==t.data.ref&&(Tr(e,!0),Tr(t))},destroy:function(e){Tr(e,!0)}};function Tr(e,t){var n=e.data.ref;if(a(n)){var r=e.context,o=e.componentInstance||e.elm,i=r.$refs;t?Array.isArray(i[n])?_(i[n],o):i[n]===o&&(i[n]=void 0):e.data.refInFor?Array.isArray(i[n])?i[n].indexOf(o)<0&&i[n].push(o):i[n]=[o]:i[n]=o}}var $r=new Ae("",{},[]),Nr=["create","activate","update","remove","destroy"];function Rr(e,t){return e.key===t.key&&e.asyncFactory===t.asyncFactory&&(e.tag===t.tag&&e.isComment===t.isComment&&a(e.data)===a(t.data)&&function(e,t){if("input"!==e.tag)return!0;var n,r=a(n=e.data)&&a(n=n.attrs)&&n.type,o=a(n=t.data)&&a(n=n.attrs)&&n.type;return r===o||Lr(r)&&Lr(o)}(e,t)||i(e.isAsyncPlaceholder)&&o(t.asyncFactory.error))}function Pr(e,t,n){var r,o,i={};for(r=t;r<=n;++r)a(o=e[r].key)&&(i[o]=r);return i}var Fr={create:Br,update:Br,destroy:function(e){Br(e,$r)}};function Br(e,t){(e.data.directives||t.data.directives)&&function(e,t){var n,r,o,a=e===$r,i=t===$r,s=Ir(e.data.directives,e.context),l=Ir(t.data.directives,t.context),c=[],u=[];for(n in l)r=s[n],o=l[n],r?(o.oldValue=r.value,o.oldArg=r.arg,Hr(o,"update",t,e),o.def&&o.def.componentUpdated&&u.push(o)):(Hr(o,"bind",t,e),o.def&&o.def.inserted&&c.push(o));if(c.length){var d=function(){for(var n=0;n<c.length;n++)Hr(c[n],"inserted",t,e)};a?Rt(t,"insert",d):d()}u.length&&Rt(t,"postpatch",(function(){for(var n=0;n<u.length;n++)Hr(u[n],"componentUpdated",t,e)}));if(!a)for(n in s)l[n]||Hr(s[n],"unbind",e,e,i)}(e,t)}var Ur=Object.create(null);function Ir(e,t){var n,r,o=Object.create(null);if(!e)return o;for(n=0;n<e.length;n++)(r=e[n]).modifiers||(r.modifiers=Ur),o[Mr(r)]=r,r.def=Ye(t.$options,"directives",r.name,!0);return o}function Mr(e){return e.rawName||e.name+"."+Object.keys(e.modifiers||{}).join(".")}function Hr(e,t,n,r,o){var a=e.def&&e.def[t];if(a)try{a(n.elm,e,n,r,o)}catch(r){at(r,n.context,"directive "+e.name+" "+t+" hook")}}var Vr=[Dr,Fr];function zr(e,t){var n=t.componentOptions;if(!(a(n)&&!1===n.Ctor.options.inheritAttrs||o(e.data.attrs)&&o(t.data.attrs))){var r,i,s=t.elm,l=e.data.attrs||{},c=t.data.attrs||{};for(r in a(c.__ob__)&&(c=t.data.attrs=q({},c)),c)i=c[r],l[r]!==i&&Wr(s,r,i,t.data.pre);for(r in(Q||te)&&c.value!==l.value&&Wr(s,"value",c.value),l)o(c[r])&&(br(r)?s.removeAttributeNS(hr,yr(r)):vr(r)||s.removeAttribute(r))}}function Wr(e,t,n,r){r||e.tagName.indexOf("-")>-1?Gr(e,t,n):gr(t)?_r(n)?e.removeAttribute(t):(n="allowfullscreen"===t&&"EMBED"===e.tagName?"true":t,e.setAttribute(t,n)):vr(t)?e.setAttribute(t,function(e,t){return _r(t)||"false"===t?"false":"contenteditable"===e&&mr(t)?t:"true"}(t,n)):br(t)?_r(n)?e.removeAttributeNS(hr,yr(t)):e.setAttributeNS(hr,t,n):Gr(e,t,n)}function Gr(e,t,n){if(_r(n))e.removeAttribute(t);else{if(Q&&!ee&&"TEXTAREA"===e.tagName&&"placeholder"===t&&""!==n&&!e.__ieph){var r=function(t){t.stopImmediatePropagation(),e.removeEventListener("input",r)};e.addEventListener("input",r),e.__ieph=!0}e.setAttribute(t,n)}}var Yr={create:zr,update:zr};function Zr(e,t){var n=t.elm,r=t.data,i=e.data;if(!(o(r.staticClass)&&o(r.class)&&(o(i)||o(i.staticClass)&&o(i.class)))){var s=xr(t),l=n._transitionClasses;a(l)&&(s=Ar(s,Cr(l))),s!==n._prevClass&&(n.setAttribute("class",s),n._prevClass=s)}}var Jr,Kr={create:Zr,update:Zr};function Xr(e,t,n){var r=Jr;return function o(){var a=t.apply(null,arguments);null!==a&&to(e,o,n,r)}}var Qr=dt&&!(re&&Number(re[1])<=53);function eo(e,t,n,r){if(Qr){var o=In,a=t;t=a._wrapper=function(e){if(e.target===e.currentTarget||e.timeStamp>=o||e.timeStamp<=0||e.target.ownerDocument!==document)return a.apply(this,arguments)}}Jr.addEventListener(e,t,ae?{capture:n,passive:r}:n)}function to(e,t,n,r){(r||Jr).removeEventListener(e,t._wrapper||t,n)}function no(e,t){if(!o(e.data.on)||!o(t.data.on)){var n=t.data.on||{},r=e.data.on||{};Jr=t.elm,function(e){if(a(e.__r)){var t=Q?"change":"input";e[t]=[].concat(e.__r,e[t]||[]),delete e.__r}a(e.__c)&&(e.change=[].concat(e.__c,e.change||[]),delete e.__c)}(n),Nt(n,r,eo,to,Xr,t.context),Jr=void 0}}var ro,oo={create:no,update:no};function ao(e,t){if(!o(e.data.domProps)||!o(t.data.domProps)){var n,r,i=t.elm,s=e.data.domProps||{},l=t.data.domProps||{};for(n in a(l.__ob__)&&(l=t.data.domProps=q({},l)),s)n in l||(i[n]="");for(n in l){if(r=l[n],"textContent"===n||"innerHTML"===n){if(t.children&&(t.children.length=0),r===s[n])continue;1===i.childNodes.length&&i.removeChild(i.childNodes[0])}if("value"===n&&"PROGRESS"!==i.tagName){i._value=r;var c=o(r)?"":String(r);io(i,c)&&(i.value=c)}else if("innerHTML"===n&&Er(i.tagName)&&o(i.innerHTML)){(ro=ro||document.createElement("div")).innerHTML="<svg>"+r+"</svg>";for(var u=ro.firstChild;i.firstChild;)i.removeChild(i.firstChild);for(;u.firstChild;)i.appendChild(u.firstChild)}else if(r!==s[n])try{i[n]=r}catch(e){}}}}function io(e,t){return!e.composing&&("OPTION"===e.tagName||function(e,t){var n=!0;try{n=document.activeElement!==e}catch(e){}return n&&e.value!==t}(e,t)||function(e,t){var n=e.value,r=e._vModifiers;if(a(r)){if(r.number)return g(n)!==g(t);if(r.trim)return n.trim()!==t.trim()}return n!==t}(e,t))}var so={create:ao,update:ao},lo=A((function(e){var t={},n=/:(.+)/;return e.split(/;(?![^(]*\))/g).forEach((function(e){if(e){var r=e.split(n);r.length>1&&(t[r[0].trim()]=r[1].trim())}})),t}));function co(e){var t=uo(e.style);return e.staticStyle?q(e.staticStyle,t):t}function uo(e){return Array.isArray(e)?D(e):"string"==typeof e?lo(e):e}var po,fo=/^--/,vo=/\s*!important$/,mo=function(e,t,n){if(fo.test(t))e.style.setProperty(t,n);else if(vo.test(n))e.style.setProperty(S(t),n.replace(vo,""),"important");else{var r=ho(t);if(Array.isArray(n))for(var o=0,a=n.length;o<a;o++)e.style[r]=n[o];else e.style[r]=n}},go=["Webkit","Moz","ms"],ho=A((function(e){if(po=po||document.createElement("div").style,"filter"!==(e=k(e))&&e in po)return e;for(var t=e.charAt(0).toUpperCase()+e.slice(1),n=0;n<go.length;n++){var r=go[n]+t;if(r in po)return r}}));function bo(e,t){var n=t.data,r=e.data;if(!(o(n.staticStyle)&&o(n.style)&&o(r.staticStyle)&&o(r.style))){var i,s,l=t.elm,c=r.staticStyle,u=r.normalizedStyle||r.style||{},d=c||u,p=uo(t.data.style)||{};t.data.normalizedStyle=a(p.__ob__)?q({},p):p;var f=function(e,t){var n,r={};if(t)for(var o=e;o.componentInstance;)(o=o.componentInstance._vnode)&&o.data&&(n=co(o.data))&&q(r,n);(n=co(e.data))&&q(r,n);for(var a=e;a=a.parent;)a.data&&(n=co(a.data))&&q(r,n);return r}(t,!0);for(s in d)o(f[s])&&mo(l,s,"");for(s in f)(i=f[s])!==d[s]&&mo(l,s,null==i?"":i)}}var yo={create:bo,update:bo},_o=/\s+/;function xo(e,t){if(t&&(t=t.trim()))if(e.classList)t.indexOf(" ")>-1?t.split(_o).forEach((function(t){return e.classList.add(t)})):e.classList.add(t);else{var n=" "+(e.getAttribute("class")||"")+" ";n.indexOf(" "+t+" ")<0&&e.setAttribute("class",(n+t).trim())}}function wo(e,t){if(t&&(t=t.trim()))if(e.classList)t.indexOf(" ")>-1?t.split(_o).forEach((function(t){return e.classList.remove(t)})):e.classList.remove(t),e.classList.length||e.removeAttribute("class");else{for(var n=" "+(e.getAttribute("class")||"")+" ",r=" "+t+" ";n.indexOf(r)>=0;)n=n.replace(r," ");(n=n.trim())?e.setAttribute("class",n):e.removeAttribute("class")}}function Ao(e){if(e){if("object"==typeof e){var t={};return!1!==e.css&&q(t,Co(e.name||"v")),q(t,e),t}return"string"==typeof e?Co(e):void 0}}var Co=A((function(e){return{enterClass:e+"-enter",enterToClass:e+"-enter-to",enterActiveClass:e+"-enter-active",leaveClass:e+"-leave",leaveToClass:e+"-leave-to",leaveActiveClass:e+"-leave-active"}})),ko=Z&&!ee,jo="transition",Eo="animation",So="transition",Oo="transitionend",Lo="animation",qo="animationend";ko&&(void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend&&(So="WebkitTransition",Oo="webkitTransitionEnd"),void 0===window.onanimationend&&void 0!==window.onwebkitanimationend&&(Lo="WebkitAnimation",qo="webkitAnimationEnd"));var Do=Z?window.requestAnimationFrame?window.requestAnimationFrame.bind(window):setTimeout:function(e){return e()};function To(e){Do((function(){Do(e)}))}function $o(e,t){var n=e._transitionClasses||(e._transitionClasses=[]);n.indexOf(t)<0&&(n.push(t),xo(e,t))}function No(e,t){e._transitionClasses&&_(e._transitionClasses,t),wo(e,t)}function Ro(e,t,n){var r=Fo(e,t),o=r.type,a=r.timeout,i=r.propCount;if(!o)return n();var s=o===jo?Oo:qo,l=0,c=function(){e.removeEventListener(s,u),n()},u=function(t){t.target===e&&++l>=i&&c()};setTimeout((function(){l<i&&c()}),a+1),e.addEventListener(s,u)}var Po=/\b(transform|all)(,|$)/;function Fo(e,t){var n,r=window.getComputedStyle(e),o=(r[So+"Delay"]||"").split(", "),a=(r[So+"Duration"]||"").split(", "),i=Bo(o,a),s=(r[Lo+"Delay"]||"").split(", "),l=(r[Lo+"Duration"]||"").split(", "),c=Bo(s,l),u=0,d=0;return t===jo?i>0&&(n=jo,u=i,d=a.length):t===Eo?c>0&&(n=Eo,u=c,d=l.length):d=(n=(u=Math.max(i,c))>0?i>c?jo:Eo:null)?n===jo?a.length:l.length:0,{type:n,timeout:u,propCount:d,hasTransform:n===jo&&Po.test(r[So+"Property"])}}function Bo(e,t){for(;e.length<t.length;)e=e.concat(e);return Math.max.apply(null,t.map((function(t,n){return Uo(t)+Uo(e[n])})))}function Uo(e){return 1e3*Number(e.slice(0,-1).replace(",","."))}function Io(e,t){var n=e.elm;a(n._leaveCb)&&(n._leaveCb.cancelled=!0,n._leaveCb());var r=Ao(e.data.transition);if(!o(r)&&!a(n._enterCb)&&1===n.nodeType){for(var i=r.css,s=r.type,c=r.enterClass,u=r.enterToClass,d=r.enterActiveClass,p=r.appearClass,f=r.appearToClass,v=r.appearActiveClass,m=r.beforeEnter,h=r.enter,b=r.afterEnter,y=r.enterCancelled,_=r.beforeAppear,x=r.appear,w=r.afterAppear,A=r.appearCancelled,C=r.duration,k=En,j=En.$vnode;j&&j.parent;)k=j.context,j=j.parent;var E=!k._isMounted||!e.isRootInsert;if(!E||x||""===x){var S=E&&p?p:c,O=E&&v?v:d,L=E&&f?f:u,q=E&&_||m,D=E&&"function"==typeof x?x:h,T=E&&w||b,$=E&&A||y,N=g(l(C)?C.enter:C);null!=N&&Ho(N,"enter",e);var R=!1!==i&&!ee,P=zo(D),B=n._enterCb=F((function(){R&&(No(n,L),No(n,O)),B.cancelled?(R&&No(n,S),$&&$(n)):T&&T(n),n._enterCb=null}));e.data.show||Rt(e,"insert",(function(){var t=n.parentNode,r=t&&t._pending&&t._pending[e.key];r&&r.tag===e.tag&&r.elm._leaveCb&&r.elm._leaveCb(),D&&D(n,B)})),q&&q(n),R&&($o(n,S),$o(n,O),To((function(){No(n,S),B.cancelled||($o(n,L),P||(Vo(N)?setTimeout(B,N):Ro(n,s,B)))}))),e.data.show&&(t&&t(),D&&D(n,B)),R||P||B()}}}function Mo(e,t){var n=e.elm;a(n._enterCb)&&(n._enterCb.cancelled=!0,n._enterCb());var r=Ao(e.data.transition);if(o(r)||1!==n.nodeType)return t();if(!a(n._leaveCb)){var i=r.css,s=r.type,c=r.leaveClass,u=r.leaveToClass,d=r.leaveActiveClass,p=r.beforeLeave,f=r.leave,v=r.afterLeave,m=r.leaveCancelled,h=r.delayLeave,b=r.duration,y=!1!==i&&!ee,_=zo(f),x=g(l(b)?b.leave:b);a(x)&&Ho(x,"leave",e);var w=n._leaveCb=F((function(){n.parentNode&&n.parentNode._pending&&(n.parentNode._pending[e.key]=null),y&&(No(n,u),No(n,d)),w.cancelled?(y&&No(n,c),m&&m(n)):(t(),v&&v(n)),n._leaveCb=null}));h?h(A):A()}function A(){w.cancelled||(!e.data.show&&n.parentNode&&((n.parentNode._pending||(n.parentNode._pending={}))[e.key]=e),p&&p(n),y&&($o(n,c),$o(n,d),To((function(){No(n,c),w.cancelled||($o(n,u),_||(Vo(x)?setTimeout(w,x):Ro(n,s,w)))}))),f&&f(n,w),y||_||w())}}function Ho(e,t,n){"number"!=typeof e?pe("<transition> explicit "+t+" duration is not a valid number - got "+JSON.stringify(e)+".",n.context):isNaN(e)&&pe("<transition> explicit "+t+" duration is NaN - the duration expression might be incorrect.",n.context)}function Vo(e){return"number"==typeof e&&!isNaN(e)}function zo(e){if(o(e))return!1;var t=e.fns;return a(t)?zo(Array.isArray(t)?t[0]:t):(e._length||e.length)>1}function Wo(e,t){!0!==t.data.show&&Io(t)}var Go=function(e){var t,n,r={},l=e.modules,c=e.nodeOps;for(t=0;t<Nr.length;++t)for(r[Nr[t]]=[],n=0;n<l.length;++n)a(l[n][Nr[t]])&&r[Nr[t]].push(l[n][Nr[t]]);function u(e){var t=c.parentNode(e);a(t)&&c.removeChild(t,e)}function d(e,t){return!t&&!e.ns&&!(M.ignoredElements.length&&M.ignoredElements.some((function(t){return p(t)?t.test(e.tag):t===e.tag})))&&M.isUnknownElement(e.tag)}var f=0;function v(e,t,n,o,s,l,u){if(a(e.elm)&&a(l)&&(e=l[u]=Ee(e)),e.isRootInsert=!s,!function(e,t,n,o){var s=e.data;if(a(s)){var l=a(e.componentInstance)&&s.keepAlive;if(a(s=s.hook)&&a(s=s.init)&&s(e,!1),a(e.componentInstance))return m(e,t),g(n,e.elm,o),i(l)&&function(e,t,n,o){var i,s=e;for(;s.componentInstance;)if(a(i=(s=s.componentInstance._vnode).data)&&a(i=i.transition)){for(i=0;i<r.activate.length;++i)r.activate[i]($r,s);t.push(s);break}g(n,e.elm,o)}(e,t,n,o),!0}}(e,t,n,o)){var p=e.data,v=e.children,h=e.tag;a(h)?(p&&p.pre&&f++,d(e,f)&&pe("Unknown custom element: <"+h+'> - did you register the component correctly? For recursive components, make sure to provide the "name" option.',e.context),e.elm=e.ns?c.createElementNS(e.ns,h):c.createElement(h,e),x(e),b(e,v,t),a(p)&&_(e,t),g(n,e.elm,o),p&&p.pre&&f--):i(e.isComment)?(e.elm=c.createComment(e.text),g(n,e.elm,o)):(e.elm=c.createTextNode(e.text),g(n,e.elm,o))}}function m(e,t){a(e.data.pendingInsert)&&(t.push.apply(t,e.data.pendingInsert),e.data.pendingInsert=null),e.elm=e.componentInstance.$el,y(e)?(_(e,t),x(e)):(Tr(e),t.push(e))}function g(e,t,n){a(e)&&(a(n)?c.parentNode(n)===e&&c.insertBefore(e,t,n):c.appendChild(e,t))}function b(e,t,n){if(Array.isArray(t)){j(t);for(var r=0;r<t.length;++r)v(t[r],n,e.elm,null,!0,t,r)}else s(e.text)&&c.appendChild(e.elm,c.createTextNode(String(e.text)))}function y(e){for(;e.componentInstance;)e=e.componentInstance._vnode;return a(e.tag)}function _(e,n){for(var o=0;o<r.create.length;++o)r.create[o]($r,e);a(t=e.data.hook)&&(a(t.create)&&t.create($r,e),a(t.insert)&&n.push(e))}function x(e){var t;if(a(t=e.fnScopeId))c.setStyleScope(e.elm,t);else for(var n=e;n;)a(t=n.context)&&a(t=t.$options._scopeId)&&c.setStyleScope(e.elm,t),n=n.parent;a(t=En)&&t!==e.context&&t!==e.fnContext&&a(t=t.$options._scopeId)&&c.setStyleScope(e.elm,t)}function w(e,t,n,r,o,a){for(;r<=o;++r)v(n[r],a,e,t,!1,n,r)}function A(e){var t,n,o=e.data;if(a(o))for(a(t=o.hook)&&a(t=t.destroy)&&t(e),t=0;t<r.destroy.length;++t)r.destroy[t](e);if(a(t=e.children))for(n=0;n<e.children.length;++n)A(e.children[n])}function C(e,t,n){for(;t<=n;++t){var r=e[t];a(r)&&(a(r.tag)?(k(r),A(r)):u(r.elm))}}function k(e,t){if(a(t)||a(e.data)){var n,o=r.remove.length+1;for(a(t)?t.listeners+=o:t=function(e,t){function n(){0==--n.listeners&&u(e)}return n.listeners=t,n}(e.elm,o),a(n=e.componentInstance)&&a(n=n._vnode)&&a(n.data)&&k(n,t),n=0;n<r.remove.length;++n)r.remove[n](e,t);a(n=e.data.hook)&&a(n=n.remove)?n(e,t):t()}else u(e.elm)}function j(e){for(var t={},n=0;n<e.length;n++){var r=e[n],o=r.key;a(o)&&(t[o]?pe("Duplicate keys detected: '"+o+"'. This may cause an update error.",r.context):t[o]=!0)}}function E(e,t,n,r){for(var o=n;o<r;o++){var i=t[o];if(a(i)&&Rr(e,i))return o}}function S(e,t,n,s,l,u){if(e!==t){a(t.elm)&&a(s)&&(t=s[l]=Ee(t));var d=t.elm=e.elm;if(i(e.isAsyncPlaceholder))a(t.asyncFactory.resolved)?D(e.elm,t,n):t.isAsyncPlaceholder=!0;else if(i(t.isStatic)&&i(e.isStatic)&&t.key===e.key&&(i(t.isCloned)||i(t.isOnce)))t.componentInstance=e.componentInstance;else{var p,f=t.data;a(f)&&a(p=f.hook)&&a(p=p.prepatch)&&p(e,t);var m=e.children,g=t.children;if(a(f)&&y(t)){for(p=0;p<r.update.length;++p)r.update[p](e,t);a(p=f.hook)&&a(p=p.update)&&p(e,t)}o(t.text)?a(m)&&a(g)?m!==g&&function(e,t,n,r,i){var s,l,u,d=0,p=0,f=t.length-1,m=t[0],g=t[f],h=n.length-1,b=n[0],y=n[h],_=!i;for(j(n);d<=f&&p<=h;)o(m)?m=t[++d]:o(g)?g=t[--f]:Rr(m,b)?(S(m,b,r,n,p),m=t[++d],b=n[++p]):Rr(g,y)?(S(g,y,r,n,h),g=t[--f],y=n[--h]):Rr(m,y)?(S(m,y,r,n,h),_&&c.insertBefore(e,m.elm,c.nextSibling(g.elm)),m=t[++d],y=n[--h]):Rr(g,b)?(S(g,b,r,n,p),_&&c.insertBefore(e,g.elm,m.elm),g=t[--f],b=n[++p]):(o(s)&&(s=Pr(t,d,f)),o(l=a(b.key)?s[b.key]:E(b,t,d,f))?v(b,r,e,m.elm,!1,n,p):Rr(u=t[l],b)?(S(u,b,r,n,p),t[l]=void 0,_&&c.insertBefore(e,u.elm,m.elm)):v(b,r,e,m.elm,!1,n,p),b=n[++p]);d>f?w(e,o(n[h+1])?null:n[h+1].elm,n,p,h,r):p>h&&C(t,d,f)}(d,m,g,n,u):a(g)?(j(g),a(e.text)&&c.setTextContent(d,""),w(d,null,g,0,g.length-1,n)):a(m)?C(m,0,m.length-1):a(e.text)&&c.setTextContent(d,""):e.text!==t.text&&c.setTextContent(d,t.text),a(f)&&a(p=f.hook)&&a(p=p.postpatch)&&p(e,t)}}}function O(e,t,n){if(i(n)&&a(e.parent))e.parent.data.pendingInsert=t;else for(var r=0;r<t.length;++r)t[r].data.hook.insert(t[r])}var L=!1,q=h("attrs,class,staticClass,staticStyle,key");function D(e,t,n,r){var o,s=t.tag,l=t.data,c=t.children;if(r=r||l&&l.pre,t.elm=e,i(t.isComment)&&a(t.asyncFactory))return t.isAsyncPlaceholder=!0,!0;if(!function(e,t,n){return a(t.tag)?0===t.tag.indexOf("vue-component")||!d(t,n)&&t.tag.toLowerCase()===(e.tagName&&e.tagName.toLowerCase()):e.nodeType===(t.isComment?8:3)}(e,t,r))return!1;if(a(l)&&(a(o=l.hook)&&a(o=o.init)&&o(t,!0),a(o=t.componentInstance)))return m(t,n),!0;if(a(s)){if(a(c))if(e.hasChildNodes())if(a(o=l)&&a(o=o.domProps)&&a(o=o.innerHTML)){if(o!==e.innerHTML)return"undefined"==typeof console||L||(L=!0,console.warn("Parent: ",e),console.warn("server innerHTML: ",o),console.warn("client innerHTML: ",e.innerHTML)),!1}else{for(var u=!0,p=e.firstChild,f=0;f<c.length;f++){if(!p||!D(p,c[f],n,r)){u=!1;break}p=p.nextSibling}if(!u||p)return"undefined"==typeof console||L||(L=!0,console.warn("Parent: ",e),console.warn("Mismatching childNodes vs. VNodes: ",e.childNodes,c)),!1}else b(t,c,n);if(a(l)){var v=!1;for(var g in l)if(!q(g)){v=!0,_(t,n);break}!v&&l.class&&Lt(l.class)}}else e.data!==t.text&&(e.data=t.text);return!0}return function(e,t,n,s){if(!o(t)){var l,u=!1,d=[];if(o(e))u=!0,v(t,d);else{var p=a(e.nodeType);if(!p&&Rr(e,t))S(e,t,d,null,null,s);else{if(p){if(1===e.nodeType&&e.hasAttribute(B)&&(e.removeAttribute(B),n=!0),i(n)){if(D(e,t,d))return O(t,d,!0),e;pe("The client-side rendered virtual DOM tree is not matching server-rendered content. This is likely caused by incorrect HTML markup, for example nesting block-level elements inside <p>, or missing <tbody>. Bailing hydration and performing full client-side render.")}l=e,e=new Ae(c.tagName(l).toLowerCase(),{},[],void 0,l)}var f=e.elm,m=c.parentNode(f);if(v(t,d,f._leaveCb?null:m,c.nextSibling(f)),a(t.parent))for(var g=t.parent,h=y(t);g;){for(var b=0;b<r.destroy.length;++b)r.destroy[b](g);if(g.elm=t.elm,h){for(var _=0;_<r.create.length;++_)r.create[_]($r,g);var x=g.data.hook.insert;if(x.merged)for(var w=1;w<x.fns.length;w++)x.fns[w]()}else Tr(g);g=g.parent}a(m)?C([e],0,0):a(e.tag)&&A(e)}}return O(t,d,u),t.elm}a(e)&&A(e)}}({nodeOps:qr,modules:[Yr,Kr,oo,so,yo,Z?{create:Wo,activate:Wo,remove:function(e,t){!0!==e.data.show?Mo(e,t):t()}}:{}].concat(Vr)});ee&&document.addEventListener("selectionchange",(function(){var e=document.activeElement;e&&e.vmodel&&ta(e,"input")}));var Yo={inserted:function(e,t,n,r){"select"===n.tag?(r.elm&&!r.elm._vOptions?Rt(n,"postpatch",(function(){Yo.componentUpdated(e,t,n)})):Zo(e,t,n.context),e._vOptions=[].map.call(e.options,Xo)):("textarea"===n.tag||Lr(e.type))&&(e._vModifiers=t.modifiers,t.modifiers.lazy||(e.addEventListener("compositionstart",Qo),e.addEventListener("compositionend",ea),e.addEventListener("change",ea),ee&&(e.vmodel=!0)))},componentUpdated:function(e,t,n){if("select"===n.tag){Zo(e,t,n.context);var r=e._vOptions,o=e._vOptions=[].map.call(e.options,Xo);if(o.some((function(e,t){return!R(e,r[t])})))(e.multiple?t.value.some((function(e){return Ko(e,o)})):t.value!==t.oldValue&&Ko(t.value,o))&&ta(e,"change")}}};function Zo(e,t,n){Jo(e,t,n),(Q||te)&&setTimeout((function(){Jo(e,t,n)}),0)}function Jo(e,t,n){var r=t.value,o=e.multiple;if(!o||Array.isArray(r)){for(var a,i,s=0,l=e.options.length;s<l;s++)if(i=e.options[s],o)a=P(r,Xo(i))>-1,i.selected!==a&&(i.selected=a);else if(R(Xo(i),r))return void(e.selectedIndex!==s&&(e.selectedIndex=s));o||(e.selectedIndex=-1)}else pe('<select multiple v-model="'+t.expression+'"> expects an Array value for its binding, but got '+Object.prototype.toString.call(r).slice(8,-1),n)}function Ko(e,t){return t.every((function(t){return!R(t,e)}))}function Xo(e){return"_value"in e?e._value:e.value}function Qo(e){e.target.composing=!0}function ea(e){e.target.composing&&(e.target.composing=!1,ta(e.target,"input"))}function ta(e,t){var n=document.createEvent("HTMLEvents");n.initEvent(t,!0,!0),e.dispatchEvent(n)}function na(e){return!e.componentInstance||e.data&&e.data.transition?e:na(e.componentInstance._vnode)}var ra={bind:function(e,t,n){var r=t.value,o=(n=na(n)).data&&n.data.transition,a=e.__vOriginalDisplay="none"===e.style.display?"":e.style.display;r&&o?(n.data.show=!0,Io(n,(function(){e.style.display=a}))):e.style.display=r?a:"none"},update:function(e,t,n){var r=t.value;!r!=!t.oldValue&&((n=na(n)).data&&n.data.transition?(n.data.show=!0,r?Io(n,(function(){e.style.display=e.__vOriginalDisplay})):Mo(n,(function(){e.style.display="none"}))):e.style.display=r?e.__vOriginalDisplay:"none")},unbind:function(e,t,n,r,o){o||(e.style.display=e.__vOriginalDisplay)}},oa={model:Yo,show:ra},aa={name:String,appear:Boolean,css:Boolean,mode:String,type:String,enterClass:String,leaveClass:String,enterToClass:String,leaveToClass:String,enterActiveClass:String,leaveActiveClass:String,appearClass:String,appearActiveClass:String,appearToClass:String,duration:[Number,String,Object]};function ia(e){var t=e&&e.componentOptions;return t&&t.Ctor.options.abstract?ia(wn(t.children)):e}function sa(e){var t={},n=e.$options;for(var r in n.propsData)t[r]=e[r];var o=n._parentListeners;for(var a in o)t[k(a)]=o[a];return t}function la(e,t){if(/\d-keep-alive$/.test(t.tag))return e("keep-alive",{props:t.componentOptions.propsData})}var ca=function(e){return e.tag||Vt(e)},ua=function(e){return"show"===e.name},da={name:"transition",props:aa,abstract:!0,render:function(e){var t=this,n=this.$slots.default;if(n&&(n=n.filter(ca)).length){n.length>1&&pe("<transition> can only be used on a single element. Use <transition-group> for lists.",this.$parent);var r=this.mode;r&&"in-out"!==r&&"out-in"!==r&&pe("invalid <transition> mode: "+r,this.$parent);var o=n[0];if(function(e){for(;e=e.parent;)if(e.data.transition)return!0}(this.$vnode))return o;var a=ia(o);if(!a)return o;if(this._leaving)return la(e,o);var i="__transition-"+this._uid+"-";a.key=null==a.key?a.isComment?i+"comment":i+a.tag:s(a.key)?0===String(a.key).indexOf(i)?a.key:i+a.key:a.key;var l=(a.data||(a.data={})).transition=sa(this),c=this._vnode,u=ia(c);if(a.data.directives&&a.data.directives.some(ua)&&(a.data.show=!0),u&&u.data&&!function(e,t){return t.key===e.key&&t.tag===e.tag}(a,u)&&!Vt(u)&&(!u.componentInstance||!u.componentInstance._vnode.isComment)){var d=u.data.transition=q({},l);if("out-in"===r)return this._leaving=!0,Rt(d,"afterLeave",(function(){t._leaving=!1,t.$forceUpdate()})),la(e,o);if("in-out"===r){if(Vt(a))return c;var p,f=function(){p()};Rt(l,"afterEnter",f),Rt(l,"enterCancelled",f),Rt(d,"delayLeave",(function(e){p=e}))}}return o}}},pa=q({tag:String,moveClass:String},aa);delete pa.mode;var fa={props:pa,beforeMount:function(){var e=this,t=this._update;this._update=function(n,r){var o=On(e);e.__patch__(e._vnode,e.kept,!1,!0),e._vnode=e.kept,o(),t.call(e,n,r)}},render:function(e){for(var t=this.tag||this.$vnode.data.tag||"span",n=Object.create(null),r=this.prevChildren=this.children,o=this.$slots.default||[],a=this.children=[],i=sa(this),s=0;s<o.length;s++){var l=o[s];if(l.tag)if(null!=l.key&&0!==String(l.key).indexOf("__vlist"))a.push(l),n[l.key]=l,(l.data||(l.data={})).transition=i;else{var c=l.componentOptions,u=c?c.Ctor.options.name||c.tag||"":l.tag;pe("<transition-group> children must be keyed: <"+u+">")}}if(r){for(var d=[],p=[],f=0;f<r.length;f++){var v=r[f];v.data.transition=i,v.data.pos=v.elm.getBoundingClientRect(),n[v.key]?d.push(v):p.push(v)}this.kept=e(t,null,d),this.removed=p}return e(t,null,a)},updated:function(){var e=this.prevChildren,t=this.moveClass||(this.name||"v")+"-move";e.length&&this.hasMove(e[0].elm,t)&&(e.forEach(va),e.forEach(ma),e.forEach(ga),this._reflow=document.body.offsetHeight,e.forEach((function(e){if(e.data.moved){var n=e.elm,r=n.style;$o(n,t),r.transform=r.WebkitTransform=r.transitionDuration="",n.addEventListener(Oo,n._moveCb=function e(r){r&&r.target!==n||r&&!/transform$/.test(r.propertyName)||(n.removeEventListener(Oo,e),n._moveCb=null,No(n,t))})}})))},methods:{hasMove:function(e,t){if(!ko)return!1;if(this._hasMove)return this._hasMove;var n=e.cloneNode();e._transitionClasses&&e._transitionClasses.forEach((function(e){wo(n,e)})),xo(n,t),n.style.display="none",this.$el.appendChild(n);var r=Fo(n);return this.$el.removeChild(n),this._hasMove=r.hasTransform}}};function va(e){e.elm._moveCb&&e.elm._moveCb(),e.elm._enterCb&&e.elm._enterCb()}function ma(e){e.data.newPos=e.elm.getBoundingClientRect()}function ga(e){var t=e.data.pos,n=e.data.newPos,r=t.left-n.left,o=t.top-n.top;if(r||o){e.data.moved=!0;var a=e.elm.style;a.transform=a.WebkitTransform="translate("+r+"px,"+o+"px)",a.transitionDuration="0s"}}var ha={Transition:da,TransitionGroup:fa};rr.config.mustUseProp=function(e,t,n){return"value"===n&&fr(e)&&"button"!==t||"selected"===n&&"option"===e||"checked"===n&&"input"===e||"muted"===n&&"video"===e},rr.config.isReservedTag=Sr,rr.config.isReservedAttr=pr,rr.config.getTagNamespace=function(e){return Er(e)?"svg":"math"===e?"math":void 0},rr.config.isUnknownElement=function(e){if(!Z)return!0;if(Sr(e))return!1;if(e=e.toLowerCase(),null!=Or[e])return Or[e];var t=document.createElement(e);return e.indexOf("-")>-1?Or[e]=t.constructor===window.HTMLUnknownElement||t.constructor===window.HTMLElement:Or[e]=/HTMLUnknownElement/.test(t.toString())},q(rr.options.directives,oa),q(rr.options.components,ha),rr.prototype.__patch__=Z?Go:T,rr.prototype.$mount=function(e,t){return function(e,t,n){var r;return e.$el=t,e.$options.render||(e.$options.render=ke,e.$options.template&&"#"!==e.$options.template.charAt(0)||e.$options.el||t?pe("You are using the runtime-only build of Vue where the template compiler is not available. Either pre-compile the templates into render functions, or use the compiler-included build.",e):pe("Failed to mount component: template or render function not defined.",e)),Tn(e,"beforeMount"),r=M.performance&&Et?function(){var t=e._name,r=e._uid,o="vue-perf-start:"+r,a="vue-perf-end:"+r;Et(o);var i=e._render();Et(a),St("vue "+t+" render",o,a),Et(o),e._update(i,n),Et(a),St("vue "+t+" patch",o,a)}:function(){e._update(e._render(),n)},new Wn(e,r,T,{before:function(){e._isMounted&&!e._isDestroyed&&Tn(e,"beforeUpdate")}},!0),n=!1,null==e.$vnode&&(e._isMounted=!0,Tn(e,"mounted")),e}(this,e=e&&Z?function(e){if("string"==typeof e){return document.querySelector(e)||(pe("Cannot find element: "+e),document.createElement("div"))}return e}(e):void 0,t)},Z&&setTimeout((function(){M.devtools&&(le?le.emit("init",rr):console[console.info?"info":"log"]("Download the Vue Devtools extension for a better development experience:\nhttps://github.com/vuejs/vue-devtools")),!1!==M.productionTip&&"undefined"!=typeof console&&console[console.info?"info":"log"]("You are running Vue in development mode.\nMake sure to turn on production mode when deploying for production.\nSee more tips at https://vuejs.org/guide/deployment.html")}),0),t.default=rr},"../node_modules/webpack-dev-server/client/clients/WebSocketClient.js":function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return a}});var r=n("../node_modules/webpack-dev-server/client/utils/log.js");function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var a=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.client=new WebSocket(t),this.client.onerror=function(e){r.log.error(e)}}var t,n,a;return t=e,(n=[{key:"onOpen",value:function(e){this.client.onopen=e}},{key:"onClose",value:function(e){this.client.onclose=e}},{key:"onMessage",value:function(e){this.client.onmessage=function(t){e(t.data)}}}])&&o(t.prototype,n),a&&o(t,a),Object.defineProperty(t,"prototype",{writable:!1}),e}()},"../node_modules/webpack-dev-server/client/modules/logger/index.js":function(e,t){!function(){"use strict";var e={"./client-src/modules/logger/SyncBailHookFake.js":function(e){e.exports=function(){return{call:function(){}}}},"./node_modules/webpack/lib/logging/Logger.js":function(e,t){function n(e){return function(e){if(Array.isArray(e))return r(e)}(e)||function(e){if(void 0!==("undefined"!=typeof Symbol?Symbol:function(e){return e})&&null!=e[("undefined"!=typeof Symbol?Symbol:function(e){return e}).iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return r(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return r(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function r(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var a=Object.freeze({error:"error",warn:"warn",info:"info",log:"log",debug:"debug",trace:"trace",group:"group",groupCollapsed:"groupCollapsed",groupEnd:"groupEnd",profile:"profile",profileEnd:"profileEnd",time:"time",clear:"clear",status:"status"});t.LogType=a;var i=("undefined"!=typeof Symbol?Symbol:function(e){return e})("webpack logger raw log method"),s=("undefined"!=typeof Symbol?Symbol:function(e){return e})("webpack logger times"),l=("undefined"!=typeof Symbol?Symbol:function(e){return e})("webpack logger aggregated times"),c=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this[i]=t,this.getChildLogger=n}var t,r,c;return t=e,r=[{key:"error",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];this[i](a.error,t)}},{key:"warn",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];this[i](a.warn,t)}},{key:"info",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];this[i](a.info,t)}},{key:"log",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];this[i](a.log,t)}},{key:"debug",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];this[i](a.debug,t)}},{key:"assert",value:function(e){if(!e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];this[i](a.error,n)}}},{key:"trace",value:function(){this[i](a.trace,["Trace"])}},{key:"clear",value:function(){this[i](a.clear)}},{key:"status",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];this[i](a.status,t)}},{key:"group",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];this[i](a.group,t)}},{key:"groupCollapsed",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];this[i](a.groupCollapsed,t)}},{key:"groupEnd",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];this[i](a.groupEnd,t)}},{key:"profile",value:function(e){this[i](a.profile,[e])}},{key:"profileEnd",value:function(e){this[i](a.profileEnd,[e])}},{key:"time",value:function(e){this[s]=this[s]||new Map,this[s].set(e,process.hrtime())}},{key:"timeLog",value:function(e){var t=this[s]&&this[s].get(e);if(!t)throw new Error("No such label '".concat(e,"' for WebpackLogger.timeLog()"));var r=process.hrtime(t);this[i](a.time,[e].concat(n(r)))}},{key:"timeEnd",value:function(e){var t=this[s]&&this[s].get(e);if(!t)throw new Error("No such label '".concat(e,"' for WebpackLogger.timeEnd()"));var r=process.hrtime(t);this[s].delete(e),this[i](a.time,[e].concat(n(r)))}},{key:"timeAggregate",value:function(e){var t=this[s]&&this[s].get(e);if(!t)throw new Error("No such label '".concat(e,"' for WebpackLogger.timeAggregate()"));var n=process.hrtime(t);this[s].delete(e),this[l]=this[l]||new Map;var r=this[l].get(e);void 0!==r&&(n[1]+r[1]>1e9?(n[0]+=r[0]+1,n[1]=n[1]-1e9+r[1]):(n[0]+=r[0],n[1]+=r[1])),this[l].set(e,n)}},{key:"timeAggregateEnd",value:function(e){if(void 0!==this[l]){var t=this[l].get(e);void 0!==t&&(this[l].delete(e),this[i](a.time,[e].concat(n(t))))}}}],r&&o(t.prototype,r),c&&o(t,c),Object.defineProperty(t,"prototype",{writable:!1}),e}();t.Logger=c},"./node_modules/webpack/lib/logging/createConsoleLogger.js":function(e,t,n){function r(e){return function(e){if(Array.isArray(e))return o(e)}(e)||function(e){if(void 0!==("undefined"!=typeof Symbol?Symbol:function(e){return e})&&null!=e[("undefined"!=typeof Symbol?Symbol:function(e){return e}).iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return o(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return o(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function o(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var a=n("./node_modules/webpack/lib/logging/Logger.js").LogType,i=function(e){if("string"==typeof e){var t=new RegExp("[\\\\/]".concat(e.replace(/[-[\]{}()*+?.\\^$|]/g,"\\$&"),"([\\\\/]|$|!|\\?)"));return function(e){return t.test(e)}}return e&&"object"==typeof e&&"function"==typeof e.test?function(t){return e.test(t)}:"function"==typeof e?e:"boolean"==typeof e?function(){return e}:void 0},s={none:6,false:6,error:5,warn:4,info:3,log:2,true:2,verbose:1};e.exports=function(e){var t=e.level,n=void 0===t?"info":t,o=e.debug,l=void 0!==o&&o,c=e.console,u="boolean"==typeof l?[function(){return l}]:[].concat(l).map(i),d=s["".concat(n)]||0;return function(e,t,n){var o=function(){return Array.isArray(n)?n.length>0&&"string"==typeof n[0]?["[".concat(e,"] ").concat(n[0])].concat(r(n.slice(1))):["[".concat(e,"]")].concat(r(n)):[]},i=u.some((function(t){return t(e)}));switch(t){case a.debug:if(!i)return;"function"==typeof c.debug?c.debug.apply(c,r(o())):c.log.apply(c,r(o()));break;case a.log:if(!i&&d>s.log)return;c.log.apply(c,r(o()));break;case a.info:if(!i&&d>s.info)return;c.info.apply(c,r(o()));break;case a.warn:if(!i&&d>s.warn)return;c.warn.apply(c,r(o()));break;case a.error:if(!i&&d>s.error)return;c.error.apply(c,r(o()));break;case a.trace:if(!i)return;c.trace();break;case a.groupCollapsed:if(!i&&d>s.log)return;if(!i&&d>s.verbose){"function"==typeof c.groupCollapsed?c.groupCollapsed.apply(c,r(o())):c.log.apply(c,r(o()));break}case a.group:if(!i&&d>s.log)return;"function"==typeof c.group?c.group.apply(c,r(o())):c.log.apply(c,r(o()));break;case a.groupEnd:if(!i&&d>s.log)return;"function"==typeof c.groupEnd&&c.groupEnd();break;case a.time:if(!i&&d>s.log)return;var l=1e3*n[1]+n[2]/1e6,p="[".concat(e,"] ").concat(n[0],": ").concat(l," ms");"function"==typeof c.logTime?c.logTime(p):c.log(p);break;case a.profile:"function"==typeof c.profile&&c.profile.apply(c,r(o()));break;case a.profileEnd:"function"==typeof c.profileEnd&&c.profileEnd.apply(c,r(o()));break;case a.clear:if(!i&&d>s.log)return;"function"==typeof c.clear&&c.clear();break;case a.status:if(!i&&d>s.info)return;"function"==typeof c.status?0===n.length?c.status():c.status.apply(c,r(o())):0!==n.length&&c.info.apply(c,r(o()));break;default:throw new Error("Unexpected LogType ".concat(t))}}}},"./node_modules/webpack/lib/logging/runtime.js":function(e,t,n){function r(){return r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},r.apply(this,arguments)}var o=n("./client-src/modules/logger/SyncBailHookFake.js"),a=n("./node_modules/webpack/lib/logging/Logger.js").Logger,i=n("./node_modules/webpack/lib/logging/createConsoleLogger.js"),s={level:"info",debug:!1,console:console},l=i(s);t.getLogger=function(e){return new a((function(n,r){void 0===t.hooks.log.call(e,n,r)&&l(e,n,r)}),(function(n){return t.getLogger("".concat(e,"/").concat(n))}))},t.configureDefaultLogger=function(e){r(s,e),l=i(s)},t.hooks={log:new o(["origin","type","args"])}}},n={};function r(t){var o=n[t];if(void 0!==o)return o.exports;var a=n[t]={exports:{}};return e[t](a,a.exports,r),a.exports}r.d=function(e,t){for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var o={};!function(){r.r(o),r.d(o,{default:function(){return e}});var e=r("./node_modules/webpack/lib/logging/runtime.js")}();var a=t;for(var i in o)a[i]=o[i];o.__esModule&&Object.defineProperty(a,"__esModule",{value:!0})}()},"../node_modules/webpack-dev-server/client/modules/strip-ansi/index.js":function(e,t){!function(){"use strict";var e={"./node_modules/strip-ansi/index.js":function(e,t,n){n.r(t),n.d(t,{default:function(){return o}});var r=n("./node_modules/strip-ansi/node_modules/ansi-regex/index.js");function o(e){if("string"!=typeof e)throw new TypeError("Expected a `string`, got `".concat(typeof e,"`"));return e.replace((0,r.default)(),"")}},"./node_modules/strip-ansi/node_modules/ansi-regex/index.js":function(e,t,n){function r(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.onlyFirst,n=void 0!==t&&t,r=["[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)","(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-ntqry=><~]))"].join("|");return new RegExp(r,n?void 0:"g")}n.r(t),n.d(t,{default:function(){return r}})}},n={};function r(t){var o=n[t];if(void 0!==o)return o.exports;var a=n[t]={exports:{}};return e[t](a,a.exports,r),a.exports}r.d=function(e,t){for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var o={};!function(){r.r(o);var e=r("./node_modules/strip-ansi/index.js");o.default=e.default}();var a=t;for(var i in o)a[i]=o[i];o.__esModule&&Object.defineProperty(a,"__esModule",{value:!0})}()},"../node_modules/webpack-dev-server/client/overlay.js":function(e,t,n){"use strict";n.r(t),n.d(t,{formatProblem:function(){return p},hide:function(){return d},show:function(){return f}});var r,o,a=n("../node_modules/ansi-html-community/index.js"),i=n.n(a),s=n("../node_modules/html-entities/lib/index.js"),l={reset:["transparent","transparent"],black:"181818",red:"E36049",green:"B3CB74",yellow:"FFD080",blue:"7CAFC2",magenta:"7FACCA",cyan:"C3C2EF",lightgrey:"EBE7E3",darkgrey:"6D7891"},c=[];function u(e){o?e(o):(c.push(e),r||((r=document.createElement("iframe")).id="webpack-dev-server-client-overlay",r.src="about:blank",r.style.position="fixed",r.style.left=0,r.style.top=0,r.style.right=0,r.style.bottom=0,r.style.width="100vw",r.style.height="100vh",r.style.border="none",r.style.zIndex=9999999999,r.onload=function(){(o=r.contentDocument.createElement("div")).id="webpack-dev-server-client-overlay-div",o.style.position="fixed",o.style.boxSizing="border-box",o.style.left=0,o.style.top=0,o.style.right=0,o.style.bottom=0,o.style.width="100vw",o.style.height="100vh",o.style.backgroundColor="rgba(0, 0, 0, 0.85)",o.style.color="#E8E8E8",o.style.fontFamily="Menlo, Consolas, monospace",o.style.fontSize="large",o.style.padding="2rem",o.style.lineHeight="1.2",o.style.whiteSpace="pre-wrap",o.style.overflow="auto";var e=document.createElement("span");e.innerText="Compiled with problems:";var t=document.createElement("button");t.innerText="X",t.style.background="transparent",t.style.border="none",t.style.fontSize="20px",t.style.fontWeight="bold",t.style.color="white",t.style.cursor="pointer",t.style.cssFloat="right",t.style.styleFloat="right",t.addEventListener("click",(function(){d()})),o.appendChild(e),o.appendChild(t),o.appendChild(document.createElement("br")),o.appendChild(document.createElement("br")),r.contentDocument.body.appendChild(o),c.forEach((function(e){e(o)})),c=[],r.onload=null},document.body.appendChild(r)))}function d(){r&&(document.body.removeChild(r),r=null,o=null)}function p(e,t){var n="warning"===e?"WARNING":"ERROR",r="";if("string"==typeof t)r+=t;else{var o=t.file||"",a=t.moduleName?-1!==t.moduleName.indexOf("!")?"".concat(t.moduleName.replace(/^(\s|\S)*!/,"")," (").concat(t.moduleName,")"):"".concat(t.moduleName):"",i=t.loc;n+="".concat(a||o?" in ".concat(a?"".concat(a).concat(o?" (".concat(o,")"):""):o).concat(i?" ".concat(i):""):""),r+=t.message||""}return{header:n,body:r}}function f(e,t){u((function(){t.forEach((function(t){var n=document.createElement("div"),r=document.createElement("span"),a=p(e,t),c=a.header,u=a.body;r.innerText=c,r.style.color="#".concat(l.red);var d=i()((0,s.encode)(u)),f=document.createElement("div");f.innerHTML=d,n.appendChild(r),n.appendChild(document.createElement("br")),n.appendChild(document.createElement("br")),n.appendChild(f),n.appendChild(document.createElement("br")),n.appendChild(document.createElement("br")),o.appendChild(n)}))}))}i().setColors(l)},"../node_modules/webpack-dev-server/client/socket.js":function(e,t,n){"use strict";n.r(t);var r=n("../node_modules/webpack-dev-server/client/clients/WebSocketClient.js"),o=n("../node_modules/webpack-dev-server/client/utils/log.js"),a=n("../node_modules/webpack-dev-server/client/clients/WebSocketClient.js"),i=void 0!==a?void 0!==a.default?a.default:a:r.default,s=0,l=10,c=null,u=function(e,t,n){(c=new i(e)).onOpen((function(){s=0,void 0!==n&&(l=n)})),c.onClose((function(){if(0===s&&t.close(),c=null,s<l){var r=1e3*Math.pow(2,s)+100*Math.random();s+=1,o.log.info("Trying to reconnect..."),setTimeout((function(){u(e,t,n)}),r)}})),c.onMessage((function(e){var n=JSON.parse(e);t[n.type]&&t[n.type](n.data,n.params)}))};t.default=u},"../node_modules/webpack-dev-server/client/utils/createSocketURL.js":function(e,t,n){"use strict";n.r(t),t.default=function(e){var t=e.hostname,n="0.0.0.0"===t||"::"===t||"[::]"===t;n&&self.location.hostname&&0===self.location.protocol.indexOf("http")&&(t=self.location.hostname);var r=e.protocol||self.location.protocol;("auto:"===r||t&&n&&"https:"===self.location.protocol)&&(r=self.location.protocol),r=r.replace(/^(?:http|.+-extension|file)/i,"ws");var o="";e.username&&(o=e.username,e.password&&(o=o.concat(":",e.password)));var a=(t||self.location.hostname||"localhost").replace(/^\[(.*)\]$/,"$1"),i=e.port;i&&"0"!==i||(i=self.location.port);var s="/ws";return e.pathname&&!e.fromCurrentScript&&(s=e.pathname),function(e){var t=e.protocol||"";t&&":"!==t.substr(-1)&&(t+=":");var n=e.auth||"";n&&(n=(n=encodeURIComponent(n)).replace(/%3A/i,":"),n+="@");var r="";e.hostname&&(r=n+(-1===e.hostname.indexOf(":")?e.hostname:"[".concat(e.hostname,"]")),e.port&&(r+=":".concat(e.port)));var o=e.pathname||"";e.slashes?(r="//".concat(r||""),o&&"/"!==o.charAt(0)&&(o="/".concat(o))):r||(r="");var a=e.search||"";a&&"?"!==a.charAt(0)&&(a="?".concat(a));var i=e.hash||"";return i&&"#"!==i.charAt(0)&&(i="#".concat(i)),o=o.replace(/[?#]/g,(function(e){return encodeURIComponent(e)})),a=a.replace("#","%23"),"".concat(t).concat(r).concat(o).concat(a).concat(i)}({protocol:r,auth:o,hostname:a,port:i,pathname:s,slashes:!0})}},"../node_modules/webpack-dev-server/client/utils/getCurrentScriptSource.js":function(e,t,n){"use strict";n.r(t),t.default=function(){if(document.currentScript)return document.currentScript.getAttribute("src");var e=document.scripts||[],t=Array.prototype.filter.call(e,(function(e){return e.getAttribute("src")}));if(t.length>0)return t[t.length-1].getAttribute("src");throw new Error("[webpack-dev-server] Failed to get current script source.")}},"../node_modules/webpack-dev-server/client/utils/log.js":function(e,t,n){"use strict";n.r(t),n.d(t,{log:function(){return i},setLogLevel:function(){return a}});var r=n("../node_modules/webpack-dev-server/client/modules/logger/index.js"),o=n.n(r);function a(e){o().configureDefaultLogger({level:e})}a("info");var i=o().getLogger("webpack-dev-server")},"../node_modules/webpack-dev-server/client/utils/parseURL.js":function(e,t,n){"use strict";n.r(t);var r=n("../node_modules/webpack-dev-server/client/utils/getCurrentScriptSource.js");t.default=function(e){var t={};if("string"==typeof e&&""!==e)for(var n=e.substr(1).split("&"),o=0;o<n.length;o++){var a=n[o].split("=");t[a[0]]=decodeURIComponent(a[1])}else{var i,s=(0,r.default)();try{i=new URL(s,self.location.href)}catch(e){}i&&((t=i).fromCurrentScript=!0)}return t}},"../node_modules/webpack-dev-server/client/utils/reloadApp.js":function(e,t,n){"use strict";n.r(t);var r=n("../node_modules/webpack/hot/emitter.js"),o=n.n(r),a=n("../node_modules/webpack-dev-server/client/utils/log.js");t.default=function(e,t){var n=e.hot,r=e.liveReload;if(!t.isUnloading){var i=t.currentHash,s=t.previousHash;if(!(i.indexOf(s)>=0)){var l=self.location.search.toLowerCase(),c=-1===l.indexOf("webpack-dev-server-hot=false"),u=-1===l.indexOf("webpack-dev-server-live-reload=false");if(n&&c)a.log.info("App hot update..."),o().emit("webpackHotUpdate",t.currentHash),"undefined"!=typeof self&&self.window&&self.postMessage("webpackHotUpdate".concat(t.currentHash),"*");else if(r&&u)var d=self,p=self.setInterval((function(){("about:"!==d.location.protocol||(d=d.parent).parent===d)&&f(d,p)}))}}function f(e,t){clearInterval(t),a.log.info("App updated. Reloading..."),e.location.reload()}}},"../node_modules/webpack-dev-server/client/utils/sendMessage.js":function(e,t,n){"use strict";n.r(t),t.default=function(e,t){"undefined"==typeof self||"undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope||self.postMessage({type:"webpack".concat(e),data:t},"*")}},"../node_modules/webpack/hot/emitter.js":function(e,t,n){var r=n("../node_modules/events/events.js");e.exports=new r},"../node_modules/webpack/hot/log.js":function(e){var t="info";function n(){}function r(e){return"info"===t&&"info"===e||["info","warning"].indexOf(t)>=0&&"warning"===e||["info","warning","error"].indexOf(t)>=0&&"error"===e}function o(e){return function(t,n){r(t)&&e(n)}}e.exports=function(e,t){r(e)&&("info"===e?console.log(t):"warning"===e?console.warn(t):"error"===e&&console.error(t))};var a=console.group||n,i=console.groupCollapsed||n,s=console.groupEnd||n;e.exports.group=o(a),e.exports.groupCollapsed=o(i),e.exports.groupEnd=o(s),e.exports.setLogLevel=function(e){t=e},e.exports.formatError=function(e){var t=e.message,n=e.stack;return n?n.indexOf(t)<0?t+"\n"+n:n:t}},'data:image/svg+xml;utf8, <svg xmlns="http://www.w3.org/2000/svg" width="54" height="14" viewBox="0 0 54 14"><g fill="none" fillRule="evenodd" transform="translate%281 1%29"><circle cx="6" cy="6" r="6" fill="%23FF5F56" stroke="%23E0443E" strokeWidth=".5" /><circle cx="26" cy="6" r="6" fill="%23FFBD2E" stroke="%23DEA123" strokeWidth=".5" /><circle cx="46" cy="6" r="6" fill="%2327C93F" stroke="%231AAB29" strokeWidth=".5" /></g></svg>':function(e){"use strict";e.exports='data:image/svg+xml;utf8, <svg xmlns="http://www.w3.org/2000/svg" width="54" height="14" viewBox="0 0 54 14"><g fill="none" fillRule="evenodd" transform="translate%281 1%29"><circle cx="6" cy="6" r="6" fill="%23FF5F56" stroke="%23E0443E" strokeWidth=".5" /><circle cx="26" cy="6" r="6" fill="%23FFBD2E" stroke="%23DEA123" strokeWidth=".5" /><circle cx="46" cy="6" r="6" fill="%2327C93F" stroke="%231AAB29" strokeWidth=".5" /></g></svg>'}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var a=t[r]={id:r,loaded:!1,exports:{}};return e[r].call(a.exports,a,a.exports,n),a.loaded=!0,a.exports}n.m=e,n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,{a:t}),t},n.d=function(e,t){for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.h=function(){return"d85332a53e2ac6937272"},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.hmd=function(e){return(e=Object.create(e)).children||(e.children=[]),Object.defineProperty(e,"exports",{enumerable:!0,set:function(){throw new Error("ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: "+e.id)}}),e},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.b=document.baseURI||self.location.href;var r={};return function(){"use strict";n.r({});var e=n("../node_modules/webpack/hot/log.js"),t=n.n(e),r=n("../node_modules/webpack-dev-server/client/modules/strip-ansi/index.js"),o=n.n(r),a=n("../node_modules/webpack-dev-server/client/utils/parseURL.js"),i=n("../node_modules/webpack-dev-server/client/socket.js"),s=n("../node_modules/webpack-dev-server/client/overlay.js"),l=n("../node_modules/webpack-dev-server/client/utils/log.js"),c=n("../node_modules/webpack-dev-server/client/utils/sendMessage.js"),u=n("../node_modules/webpack-dev-server/client/utils/reloadApp.js"),d=n("../node_modules/webpack-dev-server/client/utils/createSocketURL.js"),p={isUnloading:!1,currentHash:n.h()},f={hot:!1,liveReload:!1,progress:!1,overlay:!1},v=(0,a.default)("?protocol=ws%3A&hostname=0.0.0.0&port=8080&pathname=%2Fws&logging=none&reconnect=10");function m(e){t().setLogLevel("verbose"===e||"log"===e?"info":e),(0,l.setLogLevel)(e)}"true"===v.hot&&(f.hot=!0,l.log.info("Hot Module Replacement enabled.")),"true"===v["live-reload"]&&(f.liveReload=!0,l.log.info("Live Reloading enabled.")),v.logging&&(f.logging=v.logging),void 0!==v.reconnect&&(f.reconnect=Number(v.reconnect)),f.logging&&m(f.logging),self.addEventListener("beforeunload",(function(){p.isUnloading=!0}));var g={hot:function(){"false"!==v.hot&&(f.hot=!0,l.log.info("Hot Module Replacement enabled."))},liveReload:function(){"false"!==v["live-reload"]&&(f.liveReload=!0,l.log.info("Live Reloading enabled."))},invalid:function(){l.log.info("App updated. Recompiling..."),f.overlay&&(0,s.hide)(),(0,c.default)("Invalid")},hash:function(e){p.previousHash=p.currentHash,p.currentHash=e},logging:m,overlay:function(e){"undefined"!=typeof document&&(f.overlay=e)},reconnect:function(e){"false"!==v.reconnect&&(f.reconnect=e)},progress:function(e){f.progress=e},"progress-update":function(e){f.progress&&l.log.info("".concat(e.pluginName?"[".concat(e.pluginName,"] "):"").concat(e.percent,"% - ").concat(e.msg,".")),(0,c.default)("Progress",e)},"still-ok":function(){l.log.info("Nothing changed."),f.overlay&&(0,s.hide)(),(0,c.default)("StillOk")},ok:function(){(0,c.default)("Ok"),f.overlay&&(0,s.hide)(),(0,u.default)(f,p)},"content-changed":function(e){l.log.info("".concat(e?'"'.concat(e,'"'):"Content"," from static directory was changed. Reloading...")),self.location.reload()},"static-changed":function(e){l.log.info("".concat(e?'"'.concat(e,'"'):"Content"," from static directory was changed. Reloading...")),self.location.reload()},warnings:function(e,t){l.log.warn("Warnings while compiling.");var n=e.map((function(e){var t=(0,s.formatProblem)("warning",e),n=t.header,r=t.body;return"".concat(n,"\n").concat(o()(r))}));(0,c.default)("Warnings",n);for(var r=0;r<n.length;r++)l.log.warn(n[r]);("boolean"==typeof f.overlay?f.overlay:f.overlay&&f.overlay.warnings)&&(0,s.show)("warning",e),t&&t.preventReloading||(0,u.default)(f,p)},errors:function(e){l.log.error("Errors while compiling. Reload prevented.");var t=e.map((function(e){var t=(0,s.formatProblem)("error",e),n=t.header,r=t.body;return"".concat(n,"\n").concat(o()(r))}));(0,c.default)("Errors",t);for(var n=0;n<t.length;n++)l.log.error(t[n]);("boolean"==typeof f.overlay?f.overlay:f.overlay&&f.overlay.errors)&&(0,s.show)("error",e)},error:function(e){l.log.error(e)},close:function(){l.log.info("Disconnected!"),f.overlay&&(0,s.hide)(),(0,c.default)("Close")}},h=(0,d.default)(v);(0,i.default)(h,g,f.reconnect)}(),function(){"use strict";n.r(r);var e=n("../node_modules/vue/dist/vue.runtime.esm.js"),t=n("./App.vue");e.default.config.productionTip=!1,new e.default({render:function(e){return e(t.default)}}).$mount("#app")}(),r}()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxPQUFPLElBQUksUUFBUSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksT0FBTyxJQUFJLFFBQVEsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLE9BQU8sSUFBSSxRQUFRLElBQUksTUFBTSxJQUFJLE9BQU8sSUFBSSxNQUFNLElBQUksT0FBTyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksUUFBUSxJQUFJLFFBQVEsSUFBSSxRQUFRLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFlBQVksSUFBSSxTQUFTLElBQUksUUFBUSxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxPQUFPLElBQUksT0FBTyxJQUFJLE9BQU8sSUFBSSxZQUFZLElBQUksT0FBTyxJQUFJLFFBQVEsSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLFlBQVksSUFBSSxRQUFRLElBQUksUUFBUSxJQUFJLFFBQVEsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFlBQVksSUFBSSxTQUFTLElBQUksUUFBUSxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxPQUFPLElBQUksT0FBTyxJQUFJLE9BQU8sSUFBSSxZQUFZLElBQUksT0FBTyxJQUFJLFFBQVEsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFFBQVEsSUFBSSxZQUFZLElBQUksUUFBUSxJQUFJLFFBQVEsSUFBSSxRQUFRLElBQUksVUFBVSxJQUFJLGFBQWEsSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxZQUFZLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksT0FBTyxJQUFJLFNBQVMsSUFBSSxRQUFRLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxRQUFRLElBQUksUUFBUSxJQUFJLE9BQU8sSUFBSSxRQUFRLElBQUksUUFBUSxJQUFJLFFBQVEsSUFBSSxXQUFXLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksT0FBTyxJQUFJLFVBQVUsSUFBSSxPQUFPLElBQUksT0FBTyxJQUFJLFFBQVEsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFFBQVEsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxVQUFVLEtBQUt6QixXQUFXLENBQUMsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxRQUFRLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLFFBQVEsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFFBQVEsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksUUFBUSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxRQUFRLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFFBQVEsSUFBSSxPQUFPLElBQUksT0FBTyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksUUFBUSxJQUFJLFFBQVEsSUFBSSxRQUFRLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFlBQVksSUFBSSxTQUFTLElBQUksUUFBUSxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxPQUFPLElBQUksT0FBTyxJQUFJLE9BQU8sSUFBSSxZQUFZLElBQUksT0FBTyxJQUFJLFFBQVEsSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLFlBQVksSUFBSSxRQUFRLElBQUksUUFBUSxJQUFJLFFBQVEsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFlBQVksSUFBSSxTQUFTLElBQUksUUFBUSxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxPQUFPLElBQUksT0FBTyxJQUFJLE9BQU8sSUFBSSxZQUFZLElBQUksT0FBTyxJQUFJLFFBQVEsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFFBQVEsSUFBSSxZQUFZLElBQUksUUFBUSxJQUFJLFFBQVEsSUFBSSxRQUFRLElBQUksVUFBVSxJQUFJLGFBQWEsSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxZQUFZLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksT0FBTyxJQUFJLFNBQVMsSUFBSSxRQUFRLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxRQUFRLElBQUksUUFBUSxJQUFJLE9BQU8sSUFBSSxRQUFRLElBQUksUUFBUSxJQUFJLFFBQVEsSUFBSSxXQUFXLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksT0FBTyxJQUFJLFVBQVUsSUFBSSxPQUFPLElBQUksT0FBTyxJQUFJLFFBQVEsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFFBQVEsSUFBSSxXQUFX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QUksU0FBUyxJQUFJLFNBQVMsSUFBSSxNQUFNLElBQUksT0FBTyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxRQUFRLEtBQUssT0FBTyxJQUFJLFNBQVMsS0FBSyxpQkFBaUIsSUFBSSxxQkFBcUIsSUFBSSxxQkFBcUIsSUFBSSxtQkFBbUIsSUFBSSxnQkFBZ0IsSUFBSSxzQkFBc0IsSUFBSSxpQkFBaUIsSUFBSSxTQUFTLEtBQUssT0FBTyxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLFVBQVUsSUFBSSxRQUFRLElBQUksaUJBQWlCLElBQUksU0FBUyxJQUFJLG1CQUFtQixJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksaUJBQWlCLElBQUksY0FBYyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFFBQVEsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLE9BQU8sSUFBSSxVQUFVLElBQUksZUFBZSxJQUFJLFlBQVksSUFBSSxRQUFRLElBQUksYUFBYSxJQUFJLGlCQUFpQixJQUFJLG1CQUFtQixJQUFJLG1CQUFtQixJQUFJLFVBQVUsSUFBSSxTQUFTLEtBQUssU0FBUyxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFFBQVEsSUFBSSxRQUFRLEtBQUssU0FBUyxLQUFLLFNBQVMsS0FBSyxXQUFXLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxRQUFRLElBQUksUUFBUSxLQUFLLFNBQVMsS0FBSyxTQUFTLEtBQUssU0FBUyxJQUFJLE1BQU0sSUFBSSxPQUFPLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksZUFBZSxJQUFJLFNBQVMsSUFBSSxX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QUksZ0JBQWdCLElBQUksU0FBUyxLQUFLLFNBQVMsSUFBSSxXQUFXLElBQUksdUJBQXVCLElBQUksaUJBQWlCLElBQUksc0JBQXNCLElBQUksbUJBQW1CLElBQUksd0JBQXdCLElBQUksZ0JBQWdCLElBQUksU0FBUyxLQUFLLFNBQVMsSUFBSSxRQUFRLElBQUksV0FBVyxJQUFJLGdCQUFnQixJQUFJLGFBQWEsSUFBSSxrQkFBa0IsSUFBSSx1QkFBdUIsSUFBSSxrQkFBa0IsSUFBSSxhQUFhLElBQUksUUFBUSxJQUFJLFFBQVEsSUFBSSxhQUFhLElBQUksa0JBQWtCLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksUUFBUSxLQUFLLFFBQVEsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFFBQVEsSUFBSSxRQUFRLEtBQUssY0FBYyxJQUFJLFVBQVUsSUFBSSxlQUFlLEtBQUssY0FBYyxJQUFJLFVBQVUsSUFBSSxlQUFlLElBQUksbUJBQW1CLElBQUksZUFBZSxJQUFJLFNBQVMsS0FBSyxjQUFjLElBQUksU0FBUyxLQUFLLFdBQVcsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxhQUFhLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFFBQVEsSUFBSSxXQUFXLElBQUksUUFBUSxLQUFLLFVBQVUsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLGFBQWEsSUFBSSxlQUFlLElBQUksaUJBQWlCLElBQUkscUJBQXFCLElBQUksVUFBVSxJQUFJLGNBQWMsSUFBSSxVQUFVLElBQUksU0FBUyxLQUFLLFlBQVksSUFBSSxlQUFlLElBQUkscUJBQXFCLElBQUksZ0JBQWdCLElBQUksa0JBQWtCLElBQUksVUFBVSxJQUFJLGVBQWUsSUFBSSxZQUFZLElBQUksZ0JBQWdCLElBQUksbUJBQW1CLElBQUksb0JBQW9CLElBQUksU0FBUyxJQUFJLFlBQVksSUFBSSxVQUFVLElBQUksU0FBUyxLQUFLLFdBQVcsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksUUFBUSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksUUFBUSxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksZ0JBQWdCLElBQUksaUJBQWlCLElBQUksc0JBQXNCLElBQUksa0JBQWtCLElBQUksa0JBQWtCLElBQUksUUFBUSxLQUFLLFNBQVMsS0FBSyxTQUFTLEtBQUssV0FBVyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksUUFBUSxLQUFLLFNBQVMsS0FBSyxTQUFTLEtBQUssUUFBUSxLQUFLLE9BQU8sSUFBSSxTQUFTLEtBQUssU0FBUyxLQUFLLFNBQVMsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFFBQVEsSUFBSSxRQUFRLEtBQUssU0FBUyxLQUFLLFNBQVMsS0FBSyxTQUFTLElBQUksU0FBUyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxtQkFBbUIsSUFBSSxTQUFTLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxTQUFTLEtBQUssVUFBVSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksT0FBTyxJQUFJLFFBQVEsS0FBSyxRQUFRLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLE9BQU8sSUFBSSxRQUFRLEtBQUssVUFBVSxJQUFJLFdBQVcsSUFBSSxZQUFZLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLE9BQU8sSUFBSSxRQUFRLElBQUksUUFBUSxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksYUFBYSxJQUFJLFNBQVMsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksYUFBYSxJQUFJLGFBQWEsSUFBSSxhQUFhLElBQUksYUFBYSxJQUFJLGFBQWEsSUFBSSxhQUFhLElBQUksYUFBYSxJQUFJLGFBQWEsSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLGFBQWEsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFlBQVksSUFBSSxVQUFVLElBQUksU0FBUyxLQUFLLE9BQU8sSUFBSSxRQUFRLElBQUksV0FBVyxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFdBQVcsSUFBSSxhQUFhLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxTQUFTLEtBQUssUUFBUSxJQUFJLFVBQVUsSUFBSSxZQUFZLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLGFBQWEsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLGFBQWEsSUFBSSxnQkFBZ0IsSUFBSSxjQUFjLElBQUksWUFBWSxJQUFJLGNBQWMsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLGFBQWEsSUFBSSxTQUFTLElBQUksYUFBYSxJQUFJLFVBQVUsSUFBSSxRQUFRLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxZQUFZLElBQUksWUFBWSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxZQUFZLElBQUksUUFBUSxLQUFLLFdBQVcsSUFBSSxZQUFZLElBQUksV0FBVyxJQUFJLFlBQVksSUFBSSxhQUFhLElBQUksY0FBYyxJQUFJLGFBQWEsSUFBSSxZQUFZLElBQUksb0JBQW9CLElBQUksa0JBQWtCLElBQUksYUFBYSxJQUFJLFdBQVcsSUFBSSxhQUFhLElBQUksV0FBVyxJQUFJLGlCQUFpQixJQUFJLGdCQUFnQixJQUFJLGtCQUFrQixJQUFJLHNCQUFzQixJQUFJLHNCQUFzQixJQUFJLHVCQUF1QixJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksUUFBUSxLQUFLLFlBQVksS0FBSyxTQUFTLElBQUksU0FBUyxLQUFLLFFBQVEsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLGFBQWEsSUFBSSxZQUFZLElBQUksYUFBYSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFNBQVMsS0FBSyxVQUFVLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxTQUFTLEtBQUssVUFBVSxJQUFJLGFBQWEsSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksUUFBUSxJQUFJLFdBQVcsSUFBSSxhQUFhLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksU0FBUyxLQUFLLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFlBQVksSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLGNBQWMsSUFBSSxRQUFRLEtBQUssU0FBUyxJQUFJLFVBQVUsSUFBSSxjQUFjLElBQUksUUFBUSxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFdBQVcsSUFBSSxvQkFBb0IsSUFBSSxxQkFBcUIsSUFBSSxhQUFhLElBQUksYUFBYSxJQUFJLGVBQWUsSUFBSSxnQkFBZ0IsSUFBSSxnQkFBZ0IsSUFBSSxTQUFTLElBQUksYUFBYSxJQUFJLFdBQVcsSUFBSSxZQUFZLElBQUksVUFBVSxJQUFJLGFBQWEsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFlBQVksSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksZUFBZSxJQUFJLGNBQWMsSUFBSSxTQUFTLElBQUksWUFBWSxJQUFJLFdBQVcsSUFBSSxTQUFTLEtBQUssV0FBVyxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksU0FBUyxLQUFLLFNBQVMsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLFlBQVksSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxZQUFZLElBQUksUUFBUSxJQUFJLGFBQWEsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksU0FBUyxLQUFLLFdBQVcsSUFBSSxZQUFZLElBQUksZ0JBQWdCLElBQUksZ0JBQWdCLElBQUksYUFBYSxJQUFJLGVBQWUsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLG1CQUFtQixJQUFJLG9CQUFvQixJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksYUFBYSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFlBQVksSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFFBQVEsSUFBSSxPQUFPLElBQUksWUFBWSxJQUFJLFVBQVUsSUFBSSxZQUFZLElBQUksT0FBTyxJQUFJLFFBQVEsSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLFdBQVcsSUFBSSxRQUFRLEtBQUssVUFBVSxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksWUFBWSxJQUFJLGdCQUFnQixJQUFJLFVBQVUsSUFBSSxRQUFRLElBQUksWUFBWSxJQUFJLFVBQVUsSUFBSSxRQUFRLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxrQkFBa0IsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFNBQVMsS0FBSyxRQUFRLElBQUksVUFBVSxJQUFJLGFBQWEsSUFBSSxhQUFhLElBQUksWUFBWSxJQUFJLGNBQWMsSUFBSSxtQkFBbUIsSUFBSSxjQUFjLElBQUksbUJBQW1CLElBQUksb0JBQW9CLElBQUkscUJBQXFCLElBQUksYUFBYSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksU0FBUyxLQUFLLFNBQVMsSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLFNBQVMsSUFBSSxhQUFhLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksT0FBTyxJQUFJLFVBQVUsSUFBSSxRQUFRLEtBQUssT0FBTyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksUUFBUSxJQUFJLFdBQVcsSUFBSSxPQUFPLElBQUksYUFBYSxJQUFJLFFBQVEsSUFBSSxRQUFRLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksYUFBYSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxTQUFTLEtBQUssU0FBUyxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFlBQVksSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFlBQVksSUFBSSxVQUFVLElBQUksZUFBZSxJQUFJLGdCQUFnQixJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFlBQVksSUFBSSxhQUFhLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxRQUFRLElBQUksT0FBTyxJQUFJLFFBQVEsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLGdCQUFnQixJQUFJLGlCQUFpQixJQUFJLGtCQUFrQixJQUFJLFFBQVEsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksUUFBUSxLQUFLLFVBQVUsSUFBSSxVQUFVLEtBQUssU0FBUyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFNBQVMsS0FBSyxXQUFXLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxhQUFhLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxTQUFTLEtBQUssT0FBTyxJQUFJLFFBQVEsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxRQUFRLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLE9BQU8sSUFBSSxRQUFRLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxhQUFhLElBQUksUUFBUSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksWUFBWSxJQUFJLGFBQWEsSUFBSSxTQUFTLEtBQUssV0FBVyxJQUFJLFFBQVEsS0FBSyxPQUFPLElBQUksUUFBUSxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksT0FBTyxJQUFJLFFBQVEsSUFBSSxRQUFRLElBQUksUUFBUSxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksYUFBYSxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxTQUFTLEtBQUssVUFBVSxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxNQUFNLElBQUksT0FBTyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxZQUFZLElBQUksY0FBYyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksY0FBYyxJQUFJLGVBQWUsSUFBSSxZQUFZLElBQUksV0FBVyxJQUFJLGNBQWMsS0FBSyxTQUFTLEtBQUssU0FBUyxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksWUFBWSxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxjQUFjLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxRQUFRLEtBQUssYUFBYSxJQUFJLGFBQWEsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLGtCQUFrQixJQUFJLG1CQUFtQixJQUFJLFNBQVMsS0FBSyxXQUFXLElBQUksU0FBUyxLQUFLLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLE9BQU8sSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxRQUFRLElBQUksUUFBUSxLQUFLLFVBQVUsSUFBSSxXQUFXLElBQUksT0FBTyxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxhQUFhLElBQUksYUFBYSxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLE9BQU8sSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLGFBQWEsSUFBSSxXQUFXLElBQUksUUFBUSxJQUFJLFdBQVcsSUFBSSxhQUFhLElBQUksYUFBYSxJQUFJLGFBQWEsSUFBSSxZQUFZLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxTQUFTLEtBQUssU0FBUyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFNBQVMsS0FBSyxTQUFTLElBQUksVUFBVSxJQUFJLFlBQVksSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxPQUFPLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxRQUFRLElBQUksUUFBUSxLQUFLLFVBQVUsSUFBSSxTQUFTLEtBQUssU0FBUyxLQUFLLFdBQVcsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksUUFBUSxJQUFJLFFBQVEsS0FBSyxXQUFXLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxTQUFTLEtBQUssU0FBUyxLQUFLLFVBQVUsSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxPQUFPLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksYUFBYSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxZQUFZLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFlBQVksSUFBSSxXQUFXLElBQUksUUFBUSxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksVUFBVSxLQUFLLFVBQVUsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLFlBQVksSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFlBQVksSUFBSSxhQUFhLElBQUksU0FBUyxJQUFJLE9BQU8sSUFBSSxjQUFjLElBQUksa0JBQWtCLElBQUksb0JBQW9CLElBQUksa0JBQWtCLElBQUksbUJBQW1CLElBQUksbUJBQW1CLElBQUksb0JBQW9CLElBQUksc0JBQXNCLElBQUksd0JBQXdCLElBQUksbUJBQW1CLElBQUksUUFBUSxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksYUFBYSxJQUFJLFFBQVEsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFlBQVksSUFBSSxhQUFhLElBQUksU0FBUyxLQUFLLFdBQVcsSUFBSSxlQUFlLElBQUksWUFBWSxJQUFJLGNBQWMsSUFBSSxlQUFlLElBQUksWUFBWSxJQUFJLFlBQVksSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFFBQVEsS0FBSyxPQUFPLElBQUksUUFBUSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksT0FBTyxJQUFJLFVBQVUsSUFBSSxhQUFhLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLGVBQWUsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLGFBQWEsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksa0JBQWtCLElBQUksdUJBQXVCLElBQUksZUFBZSxJQUFJLG1CQUFtQixJQUFJLGtCQUFrQixJQUFJLG1CQUFtQixJQUFJLFVBQVUsSUFBSSxTQUFTLEtBQUssV0FBVyxJQUFJLFlBQVksSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFFBQVEsSUFBSSxZQUFZLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLGFBQWEsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFFBQVEsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFNBQVMsS0FBSyxRQUFRLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLE1BQU0sSUFBSSxPQUFPLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksWUFBWSxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxhQUFhLElBQUksWUFBWSxJQUFJLGNBQWMsS0FBSyxTQUFTLEtBQUssVUFBVSxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxZQUFZLElBQUksUUFBUSxJQUFJLFdBQVcsSUFBSSxlQUFlLElBQUksZUFBZSxJQUFJLGFBQWEsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFFBQVEsSUFBSSxVQUFVLElBQUksa0JBQWtCLElBQUksUUFBUSxLQUFLLFFBQVEsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFFBQVEsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksWUFBWSxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxTQUFTLEtBQUssT0FBTyxJQUFJLFNBQVMsS0FBSyxXQUFXLElBQUksT0FBTyxJQUFJLGFBQWEsSUFBSSxVQUFVLElBQUksUUFBUSxLQUFLLFFBQVEsS0FBSyxTQUFTLEtBQUssZUFBZSxJQUFJLG9CQUFvQixJQUFJLFFBQVEsS0FBSyxRQUFRLEtBQUssU0FBUyxLQUFLLGdCQUFnQixJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxTQUFTLEtBQUssUUFBUSxJQUFJLFNBQVMsS0FBSyxVQUFVLEtBQUssVUFBVSxJQUFJLFlBQVksSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLGFBQWEsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFVBQVUsS0FBSyxXQUFXLEtBQUssU0FBUyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLGFBQWEsS0FBSyxTQUFTLElBQUksUUFBUSxJQUFJLFVBQVUsSUFBSSxPQUFPLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLFVBQVUsS0FBSyxXQUFXLElBQUksV0FBVyxJQUFJLFVBQVUsS0FBSyxXQUFXLElBQUksWUFBWSxJQUFJLFFBQVEsS0FBSyxRQUFRLEtBQUssUUFBUSxJQUFJLFNBQVMsSUFBSSxVQUFVLEtBQUssY0FBYyxLQUFLLFNBQVMsS0FBSyxVQUFVLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxPQUFPLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxRQUFRLEtBQUssVUFBVSxJQUFJLFNBQVMsSUFBSSxRQUFRLElBQUksZUFBZSxJQUFJLG9CQUFvQixJQUFJLFNBQVMsSUFBSSxVQUFVLEtBQUssY0FBYyxLQUFLLFNBQVMsS0FBSyxVQUFVLElBQUksVUFBVSxJQUFJLFFBQVEsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxTQUFTLEtBQUssT0FBTyxJQUFJLFFBQVEsSUFBSSxVQUFVLElBQUksV0FBVyxLQUFLLGFBQWEsS0FBSyxZQUFZLElBQUksWUFBWSxJQUFJLFlBQVksSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLFlBQVksSUFBSSxZQUFZLElBQUksU0FBUyxJQUFJLGNBQWMsSUFBSSxXQUFXLEtBQUssVUFBVSxLQUFLLFlBQVksSUFBSSxRQUFRLElBQUksV0FBVyxJQUFJLFNBQVMsS0FBSyxVQUFVLElBQUksWUFBWSxLQUFLLFVBQVUsSUFBSSxVQUFVLElBQUksV0FBVyxLQUFLLFdBQVcsS0FBSyxnQkFBZ0IsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFFBQVEsSUFBSSxXQUFXLElBQUksU0FBUyxLQUFLLFNBQVMsS0FBSyxjQUFjLElBQUksbUJBQW1CLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxZQUFZLElBQUksWUFBWSxJQUFJLFNBQVMsSUFBSSxVQUFVLEtBQUssVUFBVSxJQUFJLFlBQVksS0FBSyxjQUFjLElBQUksZUFBZSxLQUFLLFVBQVUsSUFBSSxZQUFZLEtBQUssU0FBUyxJQUFJLFVBQVUsS0FBSyxVQUFVLElBQUksWUFBWSxLQUFLLGNBQWMsSUFBSSxlQUFlLEtBQUssU0FBUyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLGtCQUFrQixJQUFJLG9CQUFvQixJQUFJLG1CQUFtQixJQUFJLHFCQUFxQixJQUFJLE9BQU8sSUFBSSxRQUFRLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFNBQVMsS0FBSyxXQUFXLElBQUksU0FBUyxLQUFLLFNBQVMsS0FBSyxZQUFZLElBQUksV0FBVyxJQUFJLFNBQVMsS0FBSyxTQUFTLEtBQUssWUFBWSxLQUFLLFdBQVcsSUFBSSxZQUFZLEtBQUssVUFBVSxLQUFLLFVBQVUsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFlBQVksSUFBSSxXQUFXLElBQUksT0FBTyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFFBQVEsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksUUFBUSxLQUFLLFNBQVMsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFFBQVEsSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFlBQVksSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksU0FBUyxLQUFLLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLE9BQU8sSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLFVBQVUsSUFBSSxZQUFZLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksWUFBWSxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksYUFBYSxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFFBQVEsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLGFBQWEsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxRQUFRLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFlBQVksSUFBSSxRQUFRLEtBQUssUUFBUSxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLE9BQU8sSUFBSSxjQUFjLElBQUksUUFBUSxJQUFJLFdBQVcsSUFBSSxZQUFZLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxhQUFhLElBQUksVUFBVSxJQUFJLFlBQVksSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFlBQVksSUFBSSxZQUFZLElBQUksT0FBTyxJQUFJLGFBQWEsSUFBSSxTQUFTLEtBQUssU0FBUyxJQUFJLFVBQVUsSUFBSSxPQUFPLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxlQUFlLElBQUksZ0JBQWdCLElBQUksV0FBVyxJQUFJLGdCQUFnQixJQUFJLGFBQWEsSUFBSSxhQUFhLElBQUksWUFBWSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLGFBQWEsSUFBSSxhQUFhLElBQUksYUFBYSxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxTQUFTLEtBQUssUUFBUSxJQUFJLFdBQVcsSUFBSSxRQUFRLEtBQUssU0FBUyxJQUFJLFNBQVMsS0FBSyxXQUFXLElBQUksU0FBUyxLQUFLLGdCQUFnQixJQUFJLFlBQVksSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxTQUFTLEtBQUssV0FBVyxJQUFJLFVBQVUsSUFBSSxhQUFhLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksWUFBWSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxjQUFjLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxZQUFZLElBQUksWUFBWSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFlBQVksSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksWUFBWSxJQUFJLGFBQWEsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLE9BQU8sSUFBSSxRQUFRLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxRQUFRLEtBQUssVUFBVSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxlQUFlLElBQUksbUJBQW1CLElBQUkscUJBQXFCLElBQUksbUJBQW1CLElBQUksb0JBQW9CLElBQUksc0JBQXNCLElBQUkscUJBQXFCLElBQUksb0JBQW9CLElBQUksb0JBQW9CLElBQUksU0FBUyxJQUFJLGlCQUFpQixJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLFdBQVcsSUFBSSxlQUFlLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxTQUFTLEtBQUssV0FBVyxJQUFJLFlBQVksSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLGFBQWEsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFNBQVMsS0FBSyxRQUFRLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxhQUFhLElBQUksWUFBWSxJQUFJLE9BQU8sSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLE9BQU8sSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksYUFBYSxJQUFJLFVBQVUsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFdBQVcsSUFBSSxhQUFhLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxRQUFRLEtBQUssV0FBVyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLGFBQWEsSUFBSSxrQkFBa0IsSUFBSSxPQUFPLElBQUksUUFBUSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFFBQVEsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFlBQVksSUFBSSxZQUFZLElBQUksVUFBVSxJQUFJLGtCQUFrQixJQUFJLFdBQVcsSUFBSSxhQUFhLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFVBQVUsS0FBSyxXQUFXLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksU0FBUyxLQUFLLFdBQVcsSUFBSSxjQUFjLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxXQUFXLEtBQUssVUFBVSxJQUFJLFdBQVcsS0FBSyxVQUFVLElBQUksV0FBVyxJQUFJLGFBQWEsSUFBSSxlQUFlLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxhQUFhLElBQUksZUFBZSxJQUFJLFFBQVEsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksU0FBUyxLQUFLLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksb0JBQW9CLElBQUksZ0JBQWdCLElBQUksVUFBVSxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxZQUFZLElBQUksWUFBWSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLFlBQVksSUFBSSxXQUFXLElBQUksYUFBYSxJQUFJLGNBQWMsSUFBSSxjQUFjLElBQUksZUFBZSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxlQUFlLElBQUksZ0JBQWdCLElBQUksV0FBVyxJQUFJLGdCQUFnQixJQUFJLGFBQWEsSUFBSSxhQUFhLElBQUksWUFBWSxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksWUFBWSxJQUFJLFNBQVMsSUFBSSxZQUFZLElBQUksWUFBWSxJQUFJLFlBQVksSUFBSSxZQUFZLElBQUksWUFBWSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLFdBQVcsSUFBSSxhQUFhLElBQUksY0FBYyxJQUFJLGNBQWMsSUFBSSxlQUFlLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksUUFBUSxLQUFLLFdBQVcsSUFBSSxjQUFjLElBQUksVUFBVSxJQUFJLGFBQWEsSUFBSSxXQUFXLElBQUksZ0JBQWdCLElBQUksYUFBYSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLGFBQWEsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxRQUFRLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxTQUFTLEtBQUssWUFBWSxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLGFBQWEsSUFBSSxpQkFBaUIsSUFBSSxpQkFBaUIsSUFBSSxtQkFBbUIsSUFBSSxjQUFjLElBQUksa0JBQWtCLElBQUksb0JBQW9CLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxhQUFhLElBQUksWUFBWSxJQUFJLFVBQVUsSUFBSSxZQUFZLElBQUksYUFBYSxJQUFJLFNBQVMsS0FBSyxTQUFTLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUkscUJBQXFCLElBQUksc0JBQXNCLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxRQUFRLEtBQUssVUFBVSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksYUFBYSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLE9BQU8sSUFBSSxRQUFRLElBQUksVUFBVSxJQUFJLFNBQVMsS0FBSyxZQUFZLElBQUksZ0JBQWdCLElBQUksa0JBQWtCLElBQUksbUJBQW1CLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLGVBQWUsSUFBSSxXQUFXLElBQUksYUFBYSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFNBQVMsS0FBSyxVQUFVLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksWUFBWSxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksZUFBZSxJQUFJLGFBQWEsSUFBSSxlQUFlLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxjQUFjLElBQUksU0FBUyxJQUFJLFdBQVcsSUFBSSxhQUFhLElBQUksaUJBQWlCLEtBQUssa0JBQWtCLEtBQUssaUJBQWlCLEtBQUssa0JBQWtCLEtBQUssYUFBYSxJQUFJLG9CQUFvQixJQUFJLHFCQUFxQixJQUFJLFFBQVEsSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksUUFBUSxLQUFLLFVBQVUsSUFBSSxVQUFVLEtBQUssVUFBVSxLQUFLLFNBQVMsS0FBSyxVQUFVLElBQUksVUFBVSxJQUFJLFNBQVMsS0FBSyxXQUFXLEtBQUssV0FBVyxLQUFLLFdBQVcsS0FBSyxXQUFXLEtBQUssWUFBWSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksUUFBUSxLQUFLLFNBQVMsS0FBSyxPQUFPLElBQUksT0FBTyxJQUFJLFdBQVcsSUFBSSxTQUFTLEtBQUssU0FBUyxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFFBQVEsS0FBSyxVQUFVLElBQUksVUFBVSxJQUFJLE9BQU8sSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFNBQVMsS0FBSyxXQUFXLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksU0FBUyxLQUFLLFdBQVcsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFFBQVEsSUFBSSxPQUFPLElBQUksUUFBUSxJQUFJLFFBQVEsS0FBSyxTQUFTLElBQUksU0FBUyxLQUFLLFNBQVMsS0FBSyxTQUFTLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxRQUFRLEtBQUssU0FBUyxJQUFJLFlBQVksSUFBSSxTQUFTLEtBQUssU0FBUyxLQUFLLFFBQVEsSUFBSSxTQUFTLEtBQUt6QixXQUFXLENBQUMsSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFFBQVEsS0FBSyxRQUFRLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLFVBQVUsS0FBSyxTQUFTLElBQUksT0FBTyxJQUFJLFVBQVUsS0FBSyxTQUFTLElBQUksWUFBWSxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxtQkFBbUIsSUFBSSxRQUFRLElBQUksWUFBWSxJQUFJLFdBQVcsSUFBSSxTQUFTLEtBQUssUUFBUSxLQUFLLFNBQVMsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLFFBQVEsSUFBSSxPQUFPLElBQUksUUFBUSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFlBQVksSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLGFBQWEsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLGVBQWUsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLDBCQUEwQixJQUFJLFNBQVMsSUFBSSxjQUFjLElBQUksV0FBVyxJQUFJLGFBQWEsSUFBSSxVQUFVLEtBQUssU0FBUyxJQUFJLFFBQVEsSUFBSSxZQUFZLElBQUksYUFBYSxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFlBQVksSUFBSSxTQUFTLElBQUksa0JBQWtCLElBQUksV0FBVyxJQUFJLFFBQVEsSUFBSSxVQUFVLElBQUksVUFBVSxLQUFLLFFBQVEsSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFlBQVksSUFBSSxPQUFPLEtBQUssU0FBUyxJQUFJLFFBQVEsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksUUFBUSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksY0FBYyxJQUFJLGlCQUFpQixJQUFJLFVBQVUsSUFBSSxjQUFjLElBQUksd0JBQXdCLElBQUksc0JBQXNCLElBQUksVUFBVSxJQUFJLHNCQUFzQixJQUFJLHVCQUF1QixJQUFJLHFCQUFxQixJQUFJLHVCQUF1QixJQUFJLFFBQVEsSUFBSSxlQUFlLEtBQUssU0FBUyxJQUFJLFdBQVcsSUFBSSxRQUFRLElBQUksUUFBUSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFFBQVEsSUFBSSxTQUFTLEtBQUssUUFBUSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLHFCQUFxQixJQUFJLHlCQUF5QixJQUFJLFVBQVUsS0FBSyxTQUFTLElBQUksWUFBWSxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksVUFBVSxJ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LElBQUksUUFBUSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLHVCQUF1QixJQUFJLHFCQUFxQixJQUFJLHVCQUF1QixJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLG1CQUFtQixJQUFJLFVBQVUsSUFBSSxxQkFBcUIsSUFBSSxvQkFBb0IsSUFBSSxzQkFBc0IsSUFBSSxxQkFBcUIsSUFBSSxtQkFBbUIsSUFBSSxxQkFBcUIsSUFBSSxtQkFBbUIsSUFBSSxtQkFBbUIsSUFBSSxVQUFVLElBQUksaUJBQWlCLElBQUksVUFBVSxJQUFJLFlBQVksSUFBSSxRQUFRLElBQUksZ0JBQWdCLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLE9BQU8sSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxRQUFRLEtBQUssUUFBUSxJQUFJLFlBQVksSUFBSSxVQUFVLElBQUksV0FBVyxLQUFLLFNBQVMsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxhQUFhLElBQUksZUFBZSxJQUFJLGFBQWEsSUFBSSxlQUFlLElBQUksVUFBVSxLQUFLLFNBQVMsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLGFBQWEsSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLGdCQUFnQixJQUFJLFlBQVksSUFBSSxRQUFRLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxhQUFhLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksU0FBUyxLQUFLLFFBQVEsSUFBSSxRQUFRLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxRQUFRLEtBQUssUUFBUSxJQUFJLGNBQWMsSUFBSSxVQUFVLEtBQUssZUFBZSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxVQUFVLEtBQUssU0FBUyxJQUFJLFNBQVMsS0FBSyxTQUFTLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksYUFBYSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFFBQVEsSUFBSSxXQUFXLEtBQUssUUFBUSxJQUFJLFdBQVcsSUFBSSxVQUFVNEMsRUFBRSxXQUFXLElBQUksZUFBZSxJQUFJLFNBQVMsSUFBSSxxQkFBcUIsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsS0FBSyxTQUFTLElBQUksZUFBZSxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxhQUFhLElBQUksWUFBWSxJQUFJLFlBQVksSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLFVBQVUsS0FBSyxTQUFTLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFFBQVEsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxzQkFBc0IsSUFBSSxXQUFXLElBQUksV0FBVyxLQUFLLFFBQVEsS0FBSyxTQUFTLEtBQUssU0FBUyxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksV0FBVyxLQUFLLFFBQVEsS0FBSyxTQUFTLEtBQUssU0FBUyxLQUFLLFFBQVEsSUFBSSxPQUFPLEtBQUssU0FBUyxLQUFLLFNBQVMsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFFBQVEsS0FBSyxRQUFRLEtBQUssU0FBUyxLQUFLLFNBQVMsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLGFBQWEsS0FBSyxTQUFTLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxXQUFXLEtBQUssUUFBUSxJQUFJLFFBQVEsSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLFVBQVUsS0FBSyxRQUFRLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxhQUFhLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksa0JBQWtCLElBQUksYUFBYSxJQUFJLGFBQWEsSUFBSSxhQUFhLElBQUksYUFBYSxJQUFJLGFBQWEsSUFBSSxhQUFhLElBQUksYUFBYSxJQUFJLGFBQWEsSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLGFBQWEsSUFBSSxXQUFXLElBQUksWUFBWSxJQUFJLFVBQVUsS0FBSyxTQUFTLElBQUksUUFBUSxJQUFJLFdBQVcsSUFBSSxhQUFhLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxVQUFVLEtBQUssU0FBUyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksYUFBYSxJQUFJLGFBQWEsSUFBSSxRQUFRLElBQUksV0FBVyxJQUFJLFlBQVksSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFVBQVUsS0FBSyxRQUFRLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsS0FBSyxRQUFRLEtBQUssWUFBWSxJQUFJLFNBQVMsS0FBSyxTQUFTLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxXQUFXLEtBQUssU0FBUyxJQUFJLFVBQVUsS0FBSyxTQUFTLElBQUksVUFBVSxJQUFJLGFBQWEsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxRQUFRLElBQUksV0FBVyxJQUFJLGFBQWEsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFdBQVcsS0FBSyxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLFNBQVMsSUFBSSxZQUFZLElBQUksU0FBUyxLQUFLLFFBQVEsSUFBSSxTQUFTLElBQUksY0FBYyxJQUFJLFFBQVEsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxPQUFPLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksYUFBYSxJQUFJLFdBQVcsSUFBSSxZQUFZLElBQUksYUFBYSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLGVBQWUsSUFBSSxZQUFZLEtBQUssU0FBUyxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksVUFBVSxLQUFLLFNBQVMsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFlBQVksSUFBSSxZQUFZLElBQUksZ0JBQWdCLElBQUksZ0JBQWdCLElBQUksbUJBQW1CLElBQUksWUFBWSxJQUFJLFFBQVEsSUFBSSxhQUFhLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksVUFBVSxLQUFLLFNBQVMsSUFBSSxvQkFBb0IsSUFBSSxZQUFZLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxRQUFRLElBQUksbUJBQW1CLElBQUksVUFBVSxJQUFJLFFBQVEsSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLFdBQVcsS0FBSyxRQUFRLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksYUFBYSxJQUFJLFdBQVdDLEVBQUUsV0FBVyxLQUFLLFNBQVMsSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksYUFBYSxJQUFJLFdBQVcsS0FBSyxTQUFTLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLGlCQUFpQixJQUFJLFlBQVksSUFBSSxTQUFTLElBQUksYUFBYSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksa0JBQWtCLEtBQUssUUFBUSxJQUFJLE9BQU8sSUFBSSxXQUFXLElBQUksZUFBZSxJQUFJLFdBQVcsSUFBSSxPQUFPLElBQUksYUFBYSxJQUFJLFFBQVEsSUFBSSxnQkFBZ0IsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLGVBQWUsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFVBQVUsS0FBSyxTQUFTLElBQUksU0FBUyxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLGVBQWUsSUFBSSxXQUFXLElBQUksWUFBWSxJQUFJLFlBQVksSUFBSSxhQUFhLElBQUksaUJBQWlCLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxRQUFRLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFFBQVEsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxXQUFXLEtBQUssUUFBUSxJQUFJLFVBQVVDLEdBQUcsVUFBVSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFNBQVMsS0FBSyxTQUFTLElBQUksY0FBYyxJQUFJLFVBQVUsSUFBSSxhQUFhLElBQUksU0FBUyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsS0FBSyxTQUFTLElBQUksZUFBZSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksY0FBYyxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFlBQVksSUFBSSxhQUFhLEtBQUssU0FBUyxJQUFJLFdBQVcsS0FBSyxRQUFRLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxRQUFRLElBQUksUUFBUSxJQUFJLFFBQVEsSUFBSSxVQUFVLElBQUksYUFBYSxJQUFJLFNBQVMsSUFBSSxVQUFVLEtBQUssU0FBUyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxZQUFZLElBQUksV0FBVyxLQUFLLFNBQVMsSUFBSSxXQUFXLElBQUksWUFBWSxJQUFJLHdCQUF3QixJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksY0FBYyxJQUFJLFNBQVMsSUFBSSxXQUFXLEtBQUssUUFBUSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxLQUFLLFNBQVMsSUFBSSxXQUFXLEtBQUssU0FBUyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFVBQVUsS0FBSyxRQUFRLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksYUFBYSxJQUFJLGFBQWEsSUFBSSxhQUFhLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxVQUFVLEtBQUssU0FBUyxJQUFJLFNBQVMsSUFBSSxXQUFXLEtBQUssU0FBUyxJQUFJLFVBQVUsSUFBSSxZQUFZLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksUUFBUSxLQUFLLFFBQVEsSUFBSSxVQUFVLEtBQUssU0FBUyxLQUFLLFNBQVMsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxhQUFhLElBQUksV0FBVyxJQUFJLFFBQVEsS0FBSyxRQUFRLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxTQUFTLEtBQUssU0FBUyxLQUFLLFNBQVMsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLGVBQWUsSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLGFBQWEsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLGVBQWUsSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLFdBQVcsSUFBSSxrQkFBa0IsSUFBSSxXQUFXLElBQUksWUFBWSxJQUFJLGtCQUFrQixJQUFJLFFBQVEsSUFBSSxXQUFXLElBQUksU0FBUyxLQUFLLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFlBQVksSUFBSSxZQUFZLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFlBQVksSUFBSSxhQUFhLElBQUksU0FBUyxJQUFJLFFBQVEsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksWUFBWSxJQUFJLGFBQWEsS0FBSyxTQUFTLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxXQUFXLEtBQUssUUFBUSxJQUFJLFFBQVEsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxlQUFlLElBQUksVUFBVSxJQUFJLGFBQWEsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFdBQVcsSUFBSSxVQUFVLEtBQUssU0FBUyxJQUFJLFdBQVcsSUFBSSxZQUFZLElBQUksV0FBVyxJQUFJLFlBQVksSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxRQUFRLElBQUksVUFBVSxJQUFJLFdBQVcsS0FBSyxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxZQUFZLElBQUksV0FBVyxJQUFJLGlCQUFpQixJQUFJLGFBQWEsSUFBSSxZQUFZLEtBQUssU0FBUyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFlBQVksSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFFBQVEsSUFBSSxVQUFVLEtBQUssUUFBUSxJQUFJLFFBQVEsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxZQUFZLElBQUksU0FBUyxJQUFJLFdBQVcsS0FBSyxTQUFTLEtBQUssU0FBUyxJQUFJLE9BQU8sSUFBSSxVQUFVLEtBQUssUUFBUSxLQUFLLFFBQVEsSUFBSSxVQUFVLElBQUksVUFBVSxLQUFLLFFBQVEsS0FBSyxRQUFRLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxLQUFLLFNBQVMsS0FBSyxTQUFTLEtBQUssVUFBVSxJQUFJLFVBQVUsSUFBSSxZQUFZLElBQUksU0FBUyxJQUFJLFdBQVcsSUFBSSxXQUFXLEtBQUssYUFBYSxJQUFJLFNBQVMsSUFBSSxRQUFRLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxXQUFXLEtBQUssVUFBVSxJQUFJLFNBQVMsS0FBSyxRQUFRLElBQUksb0JBQW9CLElBQUksVUFBVSxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksU0FBUyxLQUFLLFVBQVUsSUFBSSxlQUFlLElBQUksU0FBUyxLQUFLLFNBQVMsSUFBSSxRQUFRLEtBQUssV0FBVyxLQUFLLGFBQWEsSUFBSSxZQUFZLElBQUksWUFBWSxJQUFJLFlBQVksSUFBSSxZQUFZLEtBQUssV0FBVyxLQUFLLFVBQVUsSUFBSSxZQUFZLElBQUksZ0JBQWdCLEtBQUssV0FBVyxLQUFLLFdBQVcsS0FBSyxTQUFTLElBQUksU0FBUyxLQUFLLGVBQWUsSUFBSSxTQUFTLEtBQUssZUFBZSxJQUFJLFdBQVcsSUFBSSxPQUFPLElBQUksUUFBUSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFdBQVcsS0FBSyxTQUFTLElBQUksV0FBVyxLQUFLLFNBQVMsS0FBSyxTQUFTLElBQUksWUFBWSxJQUFJLFdBQVcsS0FBSyxTQUFTLEtBQUssU0FBUyxLQUFLLFlBQVksSUFBSSxXQUFXLEtBQUssWUFBWSxLQUFLLFVBQVUsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFFBQVEsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksVUFBVSxLQUFLLFFBQVEsSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLFFBQVEsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFlBQVksSUFBSSxRQUFRLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxZQUFZLElBQUksU0FBUyxLQUFLLFNBQVMsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFFBQVEsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxZQUFZLElBQUksUUFBUSxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLGFBQWEsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFFBQVEsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxZQUFZLEtBQUssUUFBUSxJQUFJLFFBQVEsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLE9BQU8sSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLFNBQVMsSUFBSSxhQUFhLElBQUksWUFBWSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLFlBQVksSUFBSSxhQUFhLEtBQUssU0FBUyxJQUFJLFVBQVUsSUFBSSxRQUFRLElBQUksZUFBZSxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxhQUFhLElBQUksYUFBYSxJQUFJLGFBQWEsSUFBSSxXQUFXLEtBQUssU0FBUyxJQUFJLFFBQVEsSUFBSSxXQUFXLEtBQUssUUFBUSxLQUFLLFNBQVMsSUFBSSxXQUFXLEtBQUssU0FBUyxJQUFJLFlBQVksSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFNBQVMsS0FBSyxTQUFTLElBQUksV0FBVyxJQUFJLGFBQWEsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksWUFBWSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFlBQVksSUFBSSxtQkFBbUIsSUFBSSxvQkFBb0IsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxZQUFZLElBQUksWUFBWSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxZQUFZLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxXQUFXLEtBQUssUUFBUSxJQUFJLFdBQVcsSUFBSSxRQUFRLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFFBQVEsSUFBSSxlQUFlLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxLQUFLLFNBQVMsSUFBSSxXQUFXLElBQUksWUFBWSxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksYUFBYSxJQUFJLFdBQVcsS0FBSyxTQUFTLElBQUksV0FBVyxJQUFJLGtCQUFrQixJQUFJLGFBQWEsSUFBSSxZQUFZLElBQUksT0FBTyxJQUFJLFdBQVcsSUFBSSxRQUFRLElBQUksZUFBZSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLGFBQWEsSUFBSSxnQkFBZ0IsSUFBSSxhQUFhLElBQUksYUFBYSxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxTQUFTLEtBQUssUUFBUSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFFBQVEsSUFBSSxVQUFVLElBQUksYUFBYSxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFlBQVksSUFBSSxZQUFZLElBQUksV0FBVyxJQUFJLGFBQWEsSUFBSSxXQUFXLElBQUksUUFBUSxJQUFJLFNBQVMsS0FBSyxVQUFVLElBQUksV0FBVyxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksV0FBVyxLQUFLLFNBQVMsSUFBSSxjQUFjLEtBQUssV0FBVyxLQUFLLFdBQVcsS0FBSyxTQUFTLElBQUksU0FBUyxJQUFJLFdBQVcsSUFBSSxjQUFjLElBQUksV0FBVyxJQUFJLFlBQVksSUFBSSxZQUFZLElBQUksZUFBZSxJQUFJLGNBQWMsSUFBSSxZQUFZLElBQUksWUFBWSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxjQUFjLElBQUksV0FBVyxJQUFJLFlBQVksSUFBSSxZQUFZLElBQUksWUFBWSxJQUFJLFlBQVksSUFBSSxZQUFZLElBQUksWUFBWSxJQUFJLGVBQWUsSUFBSSxjQUFjLElBQUksWUFBWSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxRQUFRLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxRQUFRLElBQUksV0FBVyxLQUFLLFFBQVEsSUFBSSxVQUFVLElBQUksYUFBYSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksYUFBYSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxLQUFLLFNBQVMsSUFBSSxZQUFZLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLGFBQWEsSUFBSSxZQUFZLElBQUksVUFBVSxJQUFJLFlBQVksSUFBSSxhQUFhLEtBQUssU0FBUyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLFdBQVcsSUFBSSxXQUFXLEtBQUssUUFBUSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksYUFBYSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsS0FBSyxTQUFTLElBQUksWUFBWSxJQUFJLFVBQVUsSUFBSSxhQUFhLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxVQUFVLEtBQUssU0FBUyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFlBQVksSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFdBQVcsS0FBSyxXQUFXLEtBQUssV0FBVyxL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WSxXQUdab0csR0FBWSxhQUFnQmpCLElBQ2hDLGFBQU9pQixFQUFXZCxFQUFpQnJ3RCxFQUFRK3JELFcsMEdDN1EzQzV1RCxFQUFBQSxRQUFBQSxPQUFBQSxlQUEyQixFQUUzQixJQUFJQSxFQUFBQSxRQUFJLENBQ1AwYixPQUFRLFNBQUM1YyxHQUFELE9BQU9BLEVBQUVtMUQsRUFBQUEsWUFDZnYwQixPQUFPLFEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92dWUtdW5pY29ybi1sb2cvd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovL3Z1ZS11bmljb3JuLWxvZy8uLi9ub2RlX21vZHVsZXMvYW5zaS1odG1sLWNvbW11bml0eS9pbmRleC5qcyIsIndlYnBhY2s6Ly92dWUtdW5pY29ybi1sb2cvLi9BcHAudnVlIiwid2VicGFjazovL3Z1ZS11bmljb3JuLWxvZy9jb21wb25lbnRzL05hdi52dWUiLCJ3ZWJwYWNrOi8vdnVlLXVuaWNvcm4tbG9nL2NvbXBvbmVudHMvZXhhbXBsZXMvQXJyYXlzLnZ1ZSIsIndlYnBhY2s6Ly92dWUtdW5pY29ybi1sb2cvY29tcG9uZW50cy9leGFtcGxlcy9EaXNhYmxlZC52dWUiLCJ3ZWJwYWNrOi8vdnVlLXVuaWNvcm4tbG9nL2NvbXBvbmVudHMvZXhhbXBsZXMvTG9nUHJlZml4LnZ1ZSIsIndlYnBhY2s6Ly92dWUtdW5pY29ybi1sb2cvY29tcG9uZW50cy9leGFtcGxlcy9NYWdpY2FsLnZ1ZSIsIndlYnBhY2s6Ly92dWUtdW5pY29ybi1sb2cvY29tcG9uZW50cy9leGFtcGxlcy9PYmplY3RzLnZ1ZSIsIndlYnBhY2s6Ly92dWUtdW5pY29ybi1sb2cvY29tcG9uZW50cy9leGFtcGxlcy9TaW1wbGUudnVlIiwid2VicGFjazovL3Z1ZS11bmljb3JuLWxvZy9jb21wb25lbnRzL2V4YW1wbGVzL1N0eWxlcy52dWUiLCJ3ZWJwYWNrOi8vdnVlLXVuaWNvcm4tbG9nL2NvbXBvbmVudHMvZXhhbXBsZXMvVGV4dC52dWUiLCJ3ZWJwYWNrOi8vdnVlLXVuaWNvcm4tbG9nL2NvbXBvbmVudHMvZXhhbXBsZXMvVHlwZS52dWUiLCJ3ZWJwYWNrOi8vdnVlLXVuaWNvcm4tbG9nL2RvY3MvVW5pY29ybkxvZy52dWUiLCJ3ZWJwYWNrOi8vdnVlLXVuaWNvcm4tbG9nLy4vcGx1Z2lucy9Vbmljb3JuTG9nLmpzIiwid2VicGFjazovL3Z1ZS11bmljb3JuLWxvZy8uL3BsdWdpbnMvVW5pY29ybkxvZ0NvcmUuanMiLCJ3ZWJwYWNrOi8vdnVlLXVuaWNvcm4tbG9nLy4uL25vZGVfbW9kdWxlcy92dWUtY29kZS1oaWdobGlnaHQvdGhlbWVzL3ByaXNtLXRvbW9ycm93LmNzcyIsIndlYnBhY2s6Ly92dWUtdW5pY29ybi1sb2cvLi4vbm9kZV9tb2R1bGVzL3Z1ZS1jb2RlLWhpZ2hsaWdodC90aGVtZXMvd2luZG93LmNzcyIsIndlYnBhY2s6Ly92dWUtdW5pY29ybi1sb2cvLi9kb2NzL1VuaWNvcm5Mb2cudnVlP2E2Y2UiLCJ3ZWJwYWNrOi8vdnVlLXVuaWNvcm4tbG9nLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vdnVlLXVuaWNvcm4tbG9nLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9nZXRVcmwuanMiLCJ3ZWJwYWNrOi8vdnVlLXVuaWNvcm4tbG9nLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzIiwid2VicGFjazovL3Z1ZS11bmljb3JuLWxvZy8uLi9ub2RlX21vZHVsZXMvZXZlbnRzL2V2ZW50cy5qcyIsIndlYnBhY2s6Ly92dWUtdW5pY29ybi1sb2cvLi4vbm9kZV9tb2R1bGVzL2h0bWwtZW50aXRpZXMvbGliL2luZGV4LmpzIiwid2VicGFjazovL3Z1ZS11bmljb3JuLWxvZy8uLi9ub2RlX21vZHVsZXMvaHRtbC1lbnRpdGllcy9saWIvbmFtZWQtcmVmZXJlbmNlcy5qcyIsIndlYnBhY2s6Ly92dWUtdW5pY29ybi1sb2cvLi4vbm9kZV9tb2R1bGVzL2h0bWwtZW50aXRpZXMvbGliL251bWVyaWMtdW5pY29kZS1tYXAuanMiLCJ3ZWJwYWNrOi8vdnVlLXVuaWNvcm4tbG9nLy4uL25vZGVfbW9kdWxlcy9odG1sLWVudGl0aWVzL2xpYi9zdXJyb2dhdGUtcGFpcnMuanMiLCJ3ZWJwYWNrOi8vdnVlLXVuaWNvcm4tbG9nLy4uL25vZGVfbW9kdWxlcy92dWUtY29kZS1oaWdobGlnaHQvZGlzdC92dWUtY29kZS1oaWdobGlnaHQuZXNtLmpzIiwid2VicGFjazovL3Z1ZS11bmljb3JuLWxvZy8uL0FwcC52dWU/OTAwOSIsIndlYnBhY2s6Ly92dWUtdW5pY29ybi1sb2cvLi9jb21wb25lbnRzL05hdi52dWUiLCJ3ZWJwYWNrOi8vdnVlLXVuaWNvcm4tbG9nLy4vY29tcG9uZW50cy9leGFtcGxlcy9BcnJheXMudnVlIiwid2VicGFjazovL3Z1ZS11bmljb3JuLWxvZy8uL2NvbXBvbmVudHMvZXhhbXBsZXMvRGlzYWJsZWQudnVlIiwid2VicGFjazovL3Z1ZS11bmljb3JuLWxvZy8uL2NvbXBvbmVudHMvZXhhbXBsZXMvTG9nUHJlZml4LnZ1ZSIsIndlYnBhY2s6Ly92dWUtdW5pY29ybi1sb2cvLi9jb21wb25lbnRzL2V4YW1wbGVzL01hZ2ljYWwudnVlIiwid2VicGFjazovL3Z1ZS11bmljb3JuLWxvZy8uL2NvbXBvbmVudHMvZXhhbXBsZXMvT2JqZWN0cy52dWUiLCJ3ZWJwYWNrOi8vdnVlLXVuaWNvcm4tbG9nLy4vY29tcG9uZW50cy9leGFtcGxlcy9TaW1wbGUudnVlIiwid2VicGFjazovL3Z1ZS11bmljb3JuLWxvZy8uL2NvbXBvbmVudHMvZXhhbXBsZXMvU3R5bGVzLnZ1ZSIsIndlYnBhY2s6Ly92dWUtdW5pY29ybi1sb2cvLi9jb21wb25lbnRzL2V4YW1wbGVzL1RleHQudnVlIiwid2VicGFjazovL3Z1ZS11bmljb3JuLWxvZy8uL2NvbXBvbmVudHMvZXhhbXBsZXMvVHlwZS52dWUiLCJ3ZWJwYWNrOi8vdnVlLXVuaWNvcm4tbG9nLy4vZG9jcy9Vbmljb3JuTG9nLnZ1ZSIsIndlYnBhY2s6Ly92dWUtdW5pY29ybi1sb2cvLi9BcHAudnVlPzE2ZDkiLCJ3ZWJwYWNrOi8vdnVlLXVuaWNvcm4tbG9nLy4vY29tcG9uZW50cy9OYXYudnVlP2VhYjIiLCJ3ZWJwYWNrOi8vdnVlLXVuaWNvcm4tbG9nLy4vY29tcG9uZW50cy9leGFtcGxlcy9BcnJheXMudnVlPzgxMmYiLCJ3ZWJwYWNrOi8vdnVlLXVuaWNvcm4tbG9nLy4vY29tcG9uZW50cy9leGFtcGxlcy9EaXNhYmxlZC52dWU/NTJhZCIsIndlYnBhY2s6Ly92dWUtdW5pY29ybi1sb2cvLi9jb21wb25lbnRzL2V4YW1wbGVzL0xvZ1ByZWZpeC52dWU/ZGNiNiIsIndlYnBhY2s6Ly92dWUtdW5pY29ybi1sb2cvLi9jb21wb25lbnRzL2V4YW1wbGVzL01hZ2ljYWwudnVlP2QxOTMiLCJ3ZWJwYWNrOi8vdnVlLXVuaWNvcm4tbG9nLy4vY29tcG9uZW50cy9leGFtcGxlcy9PYmplY3RzLnZ1ZT85Zjc3Iiwid2VicGFjazovL3Z1ZS11bmljb3JuLWxvZy8uL2NvbXBvbmVudHMvZXhhbXBsZXMvU2ltcGxlLnZ1ZT8wYjc2Iiwid2VicGFjazovL3Z1ZS11bmljb3JuLWxvZy8uL2NvbXBvbmVudHMvZXhhbXBsZXMvU3R5bGVzLnZ1ZT9iOTI3Iiwid2VicGFjazovL3Z1ZS11bmljb3JuLWxvZy8uL2NvbXBvbmVudHMvZXhhbXBsZXMvVGV4dC52dWU/MTQ3NCIsIndlYnBhY2s6Ly92dWUtdW5pY29ybi1sb2cvLi9jb21wb25lbnRzL2V4YW1wbGVzL1R5cGUudnVlPzJlYjAiLCJ3ZWJwYWNrOi8vdnVlLXVuaWNvcm4tbG9nLy4vZG9jcy9Vbmljb3JuTG9nLnZ1ZT85ZWM2Iiwid2VicGFjazovL3Z1ZS11bmljb3JuLWxvZy8uL0FwcC52dWU/OTFiYyIsIndlYnBhY2s6Ly92dWUtdW5pY29ybi1sb2cvLi9jb21wb25lbnRzL05hdi52dWU/OGY1ZSIsIndlYnBhY2s6Ly92dWUtdW5pY29ybi1sb2cvLi9jb21wb25lbnRzL2V4YW1wbGVzL0FycmF5cy52dWU/NWQ5YSIsIndlYnBhY2s6Ly92dWUtdW5pY29ybi1sb2cvLi9jb21wb25lbnRzL2V4YW1wbGVzL0Rpc2FibGVkLnZ1ZT9jOTkxIiwid2VicGFjazovL3Z1ZS11bmljb3JuLWxvZy8uL2NvbXBvbmVudHMvZXhhbXBsZXMvTG9nUHJlZml4LnZ1ZT8xNGRjIiwid2VicGFjazovL3Z1ZS11bmljb3JuLWxvZy8uL2NvbXBvbmVudHMvZXhhbXBsZXMvTWFnaWNhbC52dWU/ZjEyOCIsIndlYnBhY2s6Ly92dWUtdW5pY29ybi1sb2cvLi9jb21wb25lbnRzL2V4YW1wbGVzL09iamVjdHMudnVlPzMxMTMiLCJ3ZWJwYWNrOi8vdnVlLXVuaWNvcm4tbG9nLy4vY29tcG9uZW50cy9leGFtcGxlcy9TaW1wbGUudnVlPzgzMmEiLCJ3ZWJwYWNrOi8vdnVlLXVuaWNvcm4tbG9nLy4vY29tcG9uZW50cy9leGFtcGxlcy9TdHlsZXMudnVlPzc3M2MiLCJ3ZWJwYWNrOi8vdnVlLXVuaWNvcm4tbG9nLy4vY29tcG9uZW50cy9leGFtcGxlcy9UZXh0LnZ1ZT9lYWRiIiwid2VicGFjazovL3Z1ZS11bmljb3JuLWxvZy8uL2NvbXBvbmVudHMvZXhhbXBsZXMvVHlwZS52dWU/YTdiZiIsIndlYnBhY2s6Ly92dWUtdW5pY29ybi1sb2cvLi9kb2NzL1VuaWNvcm5Mb2cudnVlP2U5OWIiLCJ3ZWJwYWNrOi8vdnVlLXVuaWNvcm4tbG9nLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9ydW50aW1lL2NvbXBvbmVudE5vcm1hbGl6ZXIuanMiLCJ3ZWJwYWNrOi8vdnVlLXVuaWNvcm4tbG9nLy4vZG9jcy9Vbmljb3JuTG9nLnZ1ZT8zMmYzIiwid2VicGFjazovL3Z1ZS11bmljb3JuLWxvZy8uLi9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzQ2xpZW50LmpzIiwid2VicGFjazovL3Z1ZS11bmljb3JuLWxvZy8uLi9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlci9saWIvbGlzdFRvU3R5bGVzLmpzIiwid2VicGFjazovL3Z1ZS11bmljb3JuLWxvZy8uLi9ub2RlX21vZHVsZXMvdnVlL2Rpc3QvdnVlLnJ1bnRpbWUuZXNtLmpzIiwid2VicGFjazovL3Z1ZS11bmljb3JuLWxvZy8uLi9ub2RlX21vZHVsZXMvd2VicGFjay1kZXYtc2VydmVyL2NsaWVudC9jbGllbnRzL1dlYlNvY2tldENsaWVudC5qcyIsIndlYnBhY2s6Ly92dWUtdW5pY29ybi1sb2cvLi4vbm9kZV9tb2R1bGVzL3dlYnBhY2stZGV2LXNlcnZlci9jbGllbnQvbW9kdWxlcy9sb2dnZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdnVlLXVuaWNvcm4tbG9nLy4uL25vZGVfbW9kdWxlcy93ZWJwYWNrLWRldi1zZXJ2ZXIvY2xpZW50L21vZHVsZXMvc3RyaXAtYW5zaS9pbmRleC5qcyIsIndlYnBhY2s6Ly92dWUtdW5pY29ybi1sb2cvLi4vbm9kZV9tb2R1bGVzL3dlYnBhY2stZGV2LXNlcnZlci9jbGllbnQvb3ZlcmxheS5qcyIsIndlYnBhY2s6Ly92dWUtdW5pY29ybi1sb2cvLi4vbm9kZV9tb2R1bGVzL3dlYnBhY2stZGV2LXNlcnZlci9jbGllbnQvc29ja2V0LmpzIiwid2VicGFjazovL3Z1ZS11bmljb3JuLWxvZy8uLi9ub2RlX21vZHVsZXMvd2VicGFjay1kZXYtc2VydmVyL2NsaWVudC91dGlscy9jcmVhdGVTb2NrZXRVUkwuanMiLCJ3ZWJwYWNrOi8vdnVlLXVuaWNvcm4tbG9nLy4uL25vZGVfbW9kdWxlcy93ZWJwYWNrLWRldi1zZXJ2ZXIvY2xpZW50L3V0aWxzL2dldEN1cnJlbnRTY3JpcHRTb3VyY2UuanMiLCJ3ZWJwYWNrOi8vdnVlLXVuaWNvcm4tbG9nLy4uL25vZGVfbW9kdWxlcy93ZWJwYWNrLWRldi1zZXJ2ZXIvY2xpZW50L3V0aWxzL2xvZy5qcyIsIndlYnBhY2s6Ly92dWUtdW5pY29ybi1sb2cvLi4vbm9kZV9tb2R1bGVzL3dlYnBhY2stZGV2LXNlcnZlci9jbGllbnQvdXRpbHMvcGFyc2VVUkwuanMiLCJ3ZWJwYWNrOi8vdnVlLXVuaWNvcm4tbG9nLy4uL25vZGVfbW9kdWxlcy93ZWJwYWNrLWRldi1zZXJ2ZXIvY2xpZW50L3V0aWxzL3JlbG9hZEFwcC5qcyIsIndlYnBhY2s6Ly92dWUtdW5pY29ybi1sb2cvLi4vbm9kZV9tb2R1bGVzL3dlYnBhY2stZGV2LXNlcnZlci9jbGllbnQvdXRpbHMvc2VuZE1lc3NhZ2UuanMiLCJ3ZWJwYWNrOi8vdnVlLXVuaWNvcm4tbG9nLy4uL25vZGVfbW9kdWxlcy93ZWJwYWNrL2hvdC9lbWl0dGVyLmpzIiwid2VicGFjazovL3Z1ZS11bmljb3JuLWxvZy8uLi9ub2RlX21vZHVsZXMvd2VicGFjay9ob3QvbG9nLmpzIiwid2VicGFjazovL3Z1ZS11bmljb3JuLWxvZy93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly92dWUtdW5pY29ybi1sb2cvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vdnVlLXVuaWNvcm4tbG9nL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly92dWUtdW5pY29ybi1sb2cvd2VicGFjay9ydW50aW1lL2dldEZ1bGxIYXNoIiwid2VicGFjazovL3Z1ZS11bmljb3JuLWxvZy93ZWJwYWNrL3J1bnRpbWUvZ2xvYmFsIiwid2VicGFjazovL3Z1ZS11bmljb3JuLWxvZy93ZWJwYWNrL3J1bnRpbWUvaGFybW9ueSBtb2R1bGUgZGVjb3JhdG9yIiwid2VicGFjazovL3Z1ZS11bmljb3JuLWxvZy93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL3Z1ZS11bmljb3JuLWxvZy93ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovL3Z1ZS11bmljb3JuLWxvZy93ZWJwYWNrL3J1bnRpbWUvanNvbnAgY2h1bmsgbG9hZGluZyIsIndlYnBhY2s6Ly92dWUtdW5pY29ybi1sb2cvLi4vbm9kZV9tb2R1bGVzL3dlYnBhY2stZGV2LXNlcnZlci9jbGllbnQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdnVlLXVuaWNvcm4tbG9nLy4vbWFpbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gd2VicGFja1VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24ocm9vdCwgZmFjdG9yeSkge1xuXHRpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG5cdGVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKVxuXHRcdGRlZmluZShbXSwgZmFjdG9yeSk7XG5cdGVsc2UgaWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKVxuXHRcdGV4cG9ydHNbXCJ2dWUtdW5pY29ybi1sb2dcIl0gPSBmYWN0b3J5KCk7XG5cdGVsc2Vcblx0XHRyb290W1widnVlLXVuaWNvcm4tbG9nXCJdID0gZmFjdG9yeSgpO1xufSkoc2VsZiwgZnVuY3Rpb24oKSB7XG5yZXR1cm4gIiwiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gYW5zaUhUTUxcblxuLy8gUmVmZXJlbmNlIHRvIGh0dHBzOi8vZ2l0aHViLmNvbS9zaW5kcmVzb3JodXMvYW5zaS1yZWdleFxudmFyIF9yZWdBTlNJID0gLyg/Oig/OlxcdTAwMWJcXFspfFxcdTAwOWIpKD86KD86WzAtOV17MSwzfSk/KD86KD86O1swLTldezAsM30pKik/W0EtTXxmLW1dKXxcXHUwMDFiW0EtTV0vXG5cbnZhciBfZGVmQ29sb3JzID0ge1xuICByZXNldDogWydmZmYnLCAnMDAwJ10sIC8vIFtGT1JFR1JPVURfQ09MT1IsIEJBQ0tHUk9VTkRfQ09MT1JdXG4gIGJsYWNrOiAnMDAwJyxcbiAgcmVkOiAnZmYwMDAwJyxcbiAgZ3JlZW46ICcyMDk4MDUnLFxuICB5ZWxsb3c6ICdlOGJmMDMnLFxuICBibHVlOiAnMDAwMGZmJyxcbiAgbWFnZW50YTogJ2ZmMDBmZicsXG4gIGN5YW46ICcwMGZmZWUnLFxuICBsaWdodGdyZXk6ICdmMGYwZjAnLFxuICBkYXJrZ3JleTogJzg4OCdcbn1cbnZhciBfc3R5bGVzID0ge1xuICAzMDogJ2JsYWNrJyxcbiAgMzE6ICdyZWQnLFxuICAzMjogJ2dyZWVuJyxcbiAgMzM6ICd5ZWxsb3cnLFxuICAzNDogJ2JsdWUnLFxuICAzNTogJ21hZ2VudGEnLFxuICAzNjogJ2N5YW4nLFxuICAzNzogJ2xpZ2h0Z3JleSdcbn1cbnZhciBfb3BlblRhZ3MgPSB7XG4gICcxJzogJ2ZvbnQtd2VpZ2h0OmJvbGQnLCAvLyBib2xkXG4gICcyJzogJ29wYWNpdHk6MC41JywgLy8gZGltXG4gICczJzogJzxpPicsIC8vIGl0YWxpY1xuICAnNCc6ICc8dT4nLCAvLyB1bmRlcnNjb3JlXG4gICc4JzogJ2Rpc3BsYXk6bm9uZScsIC8vIGhpZGRlblxuICAnOSc6ICc8ZGVsPicgLy8gZGVsZXRlXG59XG52YXIgX2Nsb3NlVGFncyA9IHtcbiAgJzIzJzogJzwvaT4nLCAvLyByZXNldCBpdGFsaWNcbiAgJzI0JzogJzwvdT4nLCAvLyByZXNldCB1bmRlcnNjb3JlXG4gICcyOSc6ICc8L2RlbD4nIC8vIHJlc2V0IGRlbGV0ZVxufVxuXG47WzAsIDIxLCAyMiwgMjcsIDI4LCAzOSwgNDldLmZvckVhY2goZnVuY3Rpb24gKG4pIHtcbiAgX2Nsb3NlVGFnc1tuXSA9ICc8L3NwYW4+J1xufSlcblxuLyoqXG4gKiBDb252ZXJ0cyB0ZXh0IHdpdGggQU5TSSBjb2xvciBjb2RlcyB0byBIVE1MIG1hcmt1cC5cbiAqIEBwYXJhbSB7U3RyaW5nfSB0ZXh0XG4gKiBAcmV0dXJucyB7Kn1cbiAqL1xuZnVuY3Rpb24gYW5zaUhUTUwgKHRleHQpIHtcbiAgLy8gUmV0dXJucyB0aGUgdGV4dCBpZiB0aGUgc3RyaW5nIGhhcyBubyBBTlNJIGVzY2FwZSBjb2RlLlxuICBpZiAoIV9yZWdBTlNJLnRlc3QodGV4dCkpIHtcbiAgICByZXR1cm4gdGV4dFxuICB9XG5cbiAgLy8gQ2FjaGUgb3BlbmVkIHNlcXVlbmNlLlxuICB2YXIgYW5zaUNvZGVzID0gW11cbiAgLy8gUmVwbGFjZSB3aXRoIG1hcmt1cC5cbiAgdmFyIHJldCA9IHRleHQucmVwbGFjZSgvXFwwMzNcXFsoXFxkKyltL2csIGZ1bmN0aW9uIChtYXRjaCwgc2VxKSB7XG4gICAgdmFyIG90ID0gX29wZW5UYWdzW3NlcV1cbiAgICBpZiAob3QpIHtcbiAgICAgIC8vIElmIGN1cnJlbnQgc2VxdWVuY2UgaGFzIGJlZW4gb3BlbmVkLCBjbG9zZSBpdC5cbiAgICAgIGlmICghIX5hbnNpQ29kZXMuaW5kZXhPZihzZXEpKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZXh0cmEtYm9vbGVhbi1jYXN0XG4gICAgICAgIGFuc2lDb2Rlcy5wb3AoKVxuICAgICAgICByZXR1cm4gJzwvc3Bhbj4nXG4gICAgICB9XG4gICAgICAvLyBPcGVuIHRhZy5cbiAgICAgIGFuc2lDb2Rlcy5wdXNoKHNlcSlcbiAgICAgIHJldHVybiBvdFswXSA9PT0gJzwnID8gb3QgOiAnPHNwYW4gc3R5bGU9XCInICsgb3QgKyAnO1wiPidcbiAgICB9XG5cbiAgICB2YXIgY3QgPSBfY2xvc2VUYWdzW3NlcV1cbiAgICBpZiAoY3QpIHtcbiAgICAgIC8vIFBvcCBzZXF1ZW5jZVxuICAgICAgYW5zaUNvZGVzLnBvcCgpXG4gICAgICByZXR1cm4gY3RcbiAgICB9XG4gICAgcmV0dXJuICcnXG4gIH0pXG5cbiAgLy8gTWFrZSBzdXJlIHRhZ3MgYXJlIGNsb3NlZC5cbiAgdmFyIGwgPSBhbnNpQ29kZXMubGVuZ3RoXG4gIDsobCA+IDApICYmIChyZXQgKz0gQXJyYXkobCArIDEpLmpvaW4oJzwvc3Bhbj4nKSlcblxuICByZXR1cm4gcmV0XG59XG5cbi8qKlxuICogQ3VzdG9taXplIGNvbG9ycy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb2xvcnMgcmVmZXJlbmNlIHRvIF9kZWZDb2xvcnNcbiAqL1xuYW5zaUhUTUwuc2V0Q29sb3JzID0gZnVuY3Rpb24gKGNvbG9ycykge1xuICBpZiAodHlwZW9mIGNvbG9ycyAhPT0gJ29iamVjdCcpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2Bjb2xvcnNgIHBhcmFtZXRlciBtdXN0IGJlIGFuIE9iamVjdC4nKVxuICB9XG5cbiAgdmFyIF9maW5hbENvbG9ycyA9IHt9XG4gIGZvciAodmFyIGtleSBpbiBfZGVmQ29sb3JzKSB7XG4gICAgdmFyIGhleCA9IGNvbG9ycy5oYXNPd25Qcm9wZXJ0eShrZXkpID8gY29sb3JzW2tleV0gOiBudWxsXG4gICAgaWYgKCFoZXgpIHtcbiAgICAgIF9maW5hbENvbG9yc1trZXldID0gX2RlZkNvbG9yc1trZXldXG4gICAgICBjb250aW51ZVxuICAgIH1cbiAgICBpZiAoJ3Jlc2V0JyA9PT0ga2V5KSB7XG4gICAgICBpZiAodHlwZW9mIGhleCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaGV4ID0gW2hleF1cbiAgICAgIH1cbiAgICAgIGlmICghQXJyYXkuaXNBcnJheShoZXgpIHx8IGhleC5sZW5ndGggPT09IDAgfHwgaGV4LnNvbWUoZnVuY3Rpb24gKGgpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBoICE9PSAnc3RyaW5nJ1xuICAgICAgfSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgdmFsdWUgb2YgYCcgKyBrZXkgKyAnYCBwcm9wZXJ0eSBtdXN0IGJlIGFuIEFycmF5IGFuZCBlYWNoIGl0ZW0gY291bGQgb25seSBiZSBhIGhleCBzdHJpbmcsIGUuZy46IEZGMDAwMCcpXG4gICAgICB9XG4gICAgICB2YXIgZGVmSGV4Q29sb3IgPSBfZGVmQ29sb3JzW2tleV1cbiAgICAgIGlmICghaGV4WzBdKSB7XG4gICAgICAgIGhleFswXSA9IGRlZkhleENvbG9yWzBdXG4gICAgICB9XG4gICAgICBpZiAoaGV4Lmxlbmd0aCA9PT0gMSB8fCAhaGV4WzFdKSB7XG4gICAgICAgIGhleCA9IFtoZXhbMF1dXG4gICAgICAgIGhleC5wdXNoKGRlZkhleENvbG9yWzFdKVxuICAgICAgfVxuXG4gICAgICBoZXggPSBoZXguc2xpY2UoMCwgMilcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBoZXggIT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSB2YWx1ZSBvZiBgJyArIGtleSArICdgIHByb3BlcnR5IG11c3QgYmUgYSBoZXggc3RyaW5nLCBlLmcuOiBGRjAwMDAnKVxuICAgIH1cbiAgICBfZmluYWxDb2xvcnNba2V5XSA9IGhleFxuICB9XG4gIF9zZXRUYWdzKF9maW5hbENvbG9ycylcbn1cblxuLyoqXG4gKiBSZXNldCBjb2xvcnMuXG4gKi9cbmFuc2lIVE1MLnJlc2V0ID0gZnVuY3Rpb24gKCkge1xuICBfc2V0VGFncyhfZGVmQ29sb3JzKVxufVxuXG4vKipcbiAqIEV4cG9zZSB0YWdzLCBpbmNsdWRpbmcgb3BlbiBhbmQgY2xvc2UuXG4gKiBAdHlwZSB7T2JqZWN0fVxuICovXG5hbnNpSFRNTC50YWdzID0ge31cblxuaWYgKE9iamVjdC5kZWZpbmVQcm9wZXJ0eSkge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoYW5zaUhUTUwudGFncywgJ29wZW4nLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBfb3BlblRhZ3MgfVxuICB9KVxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoYW5zaUhUTUwudGFncywgJ2Nsb3NlJywge1xuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gX2Nsb3NlVGFncyB9XG4gIH0pXG59IGVsc2Uge1xuICBhbnNpSFRNTC50YWdzLm9wZW4gPSBfb3BlblRhZ3NcbiAgYW5zaUhUTUwudGFncy5jbG9zZSA9IF9jbG9zZVRhZ3Ncbn1cblxuZnVuY3Rpb24gX3NldFRhZ3MgKGNvbG9ycykge1xuICAvLyByZXNldCBhbGxcbiAgX29wZW5UYWdzWycwJ10gPSAnZm9udC13ZWlnaHQ6bm9ybWFsO29wYWNpdHk6MTtjb2xvcjojJyArIGNvbG9ycy5yZXNldFswXSArICc7YmFja2dyb3VuZDojJyArIGNvbG9ycy5yZXNldFsxXVxuICAvLyBpbnZlcnNlXG4gIF9vcGVuVGFnc1snNyddID0gJ2NvbG9yOiMnICsgY29sb3JzLnJlc2V0WzFdICsgJztiYWNrZ3JvdW5kOiMnICsgY29sb3JzLnJlc2V0WzBdXG4gIC8vIGRhcmsgZ3JleVxuICBfb3BlblRhZ3NbJzkwJ10gPSAnY29sb3I6IycgKyBjb2xvcnMuZGFya2dyZXlcblxuICBmb3IgKHZhciBjb2RlIGluIF9zdHlsZXMpIHtcbiAgICB2YXIgY29sb3IgPSBfc3R5bGVzW2NvZGVdXG4gICAgdmFyIG9yaUNvbG9yID0gY29sb3JzW2NvbG9yXSB8fCAnMDAwJ1xuICAgIF9vcGVuVGFnc1tjb2RlXSA9ICdjb2xvcjojJyArIG9yaUNvbG9yXG4gICAgY29kZSA9IHBhcnNlSW50KGNvZGUpXG4gICAgX29wZW5UYWdzWyhjb2RlICsgMTApLnRvU3RyaW5nKCldID0gJ2JhY2tncm91bmQ6IycgKyBvcmlDb2xvclxuICB9XG59XG5cbmFuc2lIVE1MLnJlc2V0KClcbiIsIjx0ZW1wbGF0ZT5cblx0PGRpdj5cblx0XHQ8VW5pY29ybkxvZyAvPlxuXHQ8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgVnVlIGZyb20gJ3Z1ZSc7XG5pbXBvcnQgVW5pY29ybkxvZyBmcm9tICdAZG9jcy9Vbmljb3JuTG9nLnZ1ZSc7XG5cbmNvbnN0IEV2ZW50QnVzID0gbmV3IFZ1ZSgpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyhWdWUucHJvdG90eXBlLCB7XG5cdCRidXM6IHtcblx0XHRnZXQoKSB7XG5cdFx0XHRyZXR1cm4gRXZlbnRCdXM7XG5cdFx0fSxcblx0fSxcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCB7XG5cdG5hbWU6ICdBcHAnLFxuXHRjb21wb25lbnRzOiB7XG5cdFx0VW5pY29ybkxvZyxcblx0fSxcbn07XG48L3NjcmlwdD5cbiIsIjx0ZW1wbGF0ZT5cblx0PG5hdiBjbGFzcz1cIm5hdmJhciBzdGlja3ktdG9wIG5hdmJhci1leHBhbmQtbGcgbmF2YmFyLWRhcmsgYmctZGFyayBtYi01XCI+XG5cdFx0PGRpdiBjbGFzcz1cImNvbnRhaW5lclwiPlxuXHRcdFx0PGEgY2xhc3M9XCJuYXZiYXItYnJhbmRcIiBocmVmPVwiL1wiPvCfpoQgVnVlIFVuaWNvcm5Mb2c8L2E+XG5cdFx0XHQ8YnV0dG9uXG5cdFx0XHRcdGNsYXNzPVwibmF2YmFyLXRvZ2dsZXJcIlxuXHRcdFx0XHR0eXBlPVwiYnV0dG9uXCJcblx0XHRcdFx0ZGF0YS1icy10b2dnbGU9XCJjb2xsYXBzZVwiXG5cdFx0XHRcdGRhdGEtYnMtdGFyZ2V0PVwiI25hdmJhclN1cHBvcnRlZENvbnRlbnRcIlxuXHRcdFx0XHRhcmlhLWNvbnRyb2xzPVwibmF2YmFyU3VwcG9ydGVkQ29udGVudFwiXG5cdFx0XHRcdGFyaWEtZXhwYW5kZWQ9XCJmYWxzZVwiXG5cdFx0XHRcdGFyaWEtbGFiZWw9XCJUb2dnbGUgbmF2aWdhdGlvblwiXG5cdFx0XHQ+XG5cdFx0XHRcdDxzcGFuIGNsYXNzPVwibmF2YmFyLXRvZ2dsZXItaWNvblwiPjwvc3Bhbj5cblx0XHRcdDwvYnV0dG9uPlxuXHRcdFx0PGRpdiBjbGFzcz1cImNvbGxhcHNlIG5hdmJhci1jb2xsYXBzZVwiIGlkPVwibmF2YmFyU3VwcG9ydGVkQ29udGVudFwiPlxuXHRcdFx0XHQ8dWwgY2xhc3M9XCJuYXZiYXItbmF2IG1lLWF1dG8gbWItMiBtYi1sZy0wXCI+XG5cdFx0XHRcdFx0PGxpIGNsYXNzPVwibmF2LWl0ZW1cIj5cblx0XHRcdFx0XHRcdDxhIGNsYXNzPVwibmF2LWxpbmsgYWN0aXZlXCIgYXJpYS1jdXJyZW50PVwicGFnZVwiIGhyZWY9XCIvXCI+SG9tZTwvYT5cblx0XHRcdFx0XHQ8L2xpPlxuXHRcdFx0XHRcdDxsaSBjbGFzcz1cIm5hdi1pdGVtIGRyb3Bkb3duXCI+XG5cdFx0XHRcdFx0XHQ8YVxuXHRcdFx0XHRcdFx0XHRjbGFzcz1cIm5hdi1saW5rIGRyb3Bkb3duLXRvZ2dsZVwiXG5cdFx0XHRcdFx0XHRcdGhyZWY9XCIjXCJcblx0XHRcdFx0XHRcdFx0aWQ9XCJkb2NzLWRyb3Bkb3duXCJcblx0XHRcdFx0XHRcdFx0cm9sZT1cImJ1dHRvblwiXG5cdFx0XHRcdFx0XHRcdGRhdGEtYnMtdG9nZ2xlPVwiZHJvcGRvd25cIlxuXHRcdFx0XHRcdFx0XHRhcmlhLWV4cGFuZGVkPVwiZmFsc2VcIlxuXHRcdFx0XHRcdFx0PlxuXHRcdFx0XHRcdFx0XHREb2NzXG5cdFx0XHRcdFx0XHQ8L2E+XG5cdFx0XHRcdFx0XHQ8dWxcblx0XHRcdFx0XHRcdFx0Y2xhc3M9XCJkcm9wZG93bi1tZW51IGRyb3Bkb3duLW1lbnUtZGFya1wiXG5cdFx0XHRcdFx0XHRcdGFyaWEtbGFiZWxsZWRieT1cImRvY3MtZHJvcGRvd25cIlxuXHRcdFx0XHRcdFx0PlxuXHRcdFx0XHRcdFx0XHQ8bGk+XG5cdFx0XHRcdFx0XHRcdFx0PGEgY2xhc3M9XCJkcm9wZG93bi1pdGVtXCIgaHJlZj1cIiN1bC1pbnN0YWxsYXRpb25cIj5cblx0XHRcdFx0XHRcdFx0XHRcdEluc3RhbGxhdGlvblxuXHRcdFx0XHRcdFx0XHRcdDwvYT5cblx0XHRcdFx0XHRcdFx0PC9saT5cblx0XHRcdFx0XHRcdFx0PGxpPlxuXHRcdFx0XHRcdFx0XHRcdDxhIGNsYXNzPVwiZHJvcGRvd24taXRlbVwiIGhyZWY9XCIjdWwtdXNhZ2VcIj5Vc2FnZTwvYT5cblx0XHRcdFx0XHRcdFx0PC9saT5cblxuXHRcdFx0XHRcdFx0XHQ8bGk+PGhyIGNsYXNzPVwiZHJvcGRvd24tZGl2aWRlclwiIC8+PC9saT5cblxuXHRcdFx0XHRcdFx0XHQ8IS0tIE9wdGlvbnMgLS0+XG5cdFx0XHRcdFx0XHRcdDxsaT48aDYgY2xhc3M9XCJkcm9wZG93bi1oZWFkZXJcIj5PcHRpb25zPC9oNj48L2xpPlxuXHRcdFx0XHRcdFx0XHQ8bGk+XG5cdFx0XHRcdFx0XHRcdFx0PGEgY2xhc3M9XCJkcm9wZG93bi1pdGVtXCIgaHJlZj1cIiN1bC1wbHVnaW4tb3B0aW9uc1wiPlxuXHRcdFx0XHRcdFx0XHRcdFx0UGx1Z2luIE9wdGlvbnNcblx0XHRcdFx0XHRcdFx0XHQ8L2E+XG5cdFx0XHRcdFx0XHRcdDwvbGk+XG5cdFx0XHRcdFx0XHRcdDxsaT5cblx0XHRcdFx0XHRcdFx0XHQ8YSBjbGFzcz1cImRyb3Bkb3duLWl0ZW1cIiBocmVmPVwiI3VsLWxvZy1vcHRpb25zXCI+TG9nIE9wdGlvbnM8L2E+XG5cdFx0XHRcdFx0XHRcdDwvbGk+XG5cblx0XHRcdFx0XHRcdFx0PGxpPjxociBjbGFzcz1cImRyb3Bkb3duLWRpdmlkZXJcIiAvPjwvbGk+XG5cblx0XHRcdFx0XHRcdFx0PCEtLSBNZXRob2RzIC0tPlxuXHRcdFx0XHRcdFx0XHQ8bGk+PGg2IGNsYXNzPVwiZHJvcGRvd24taGVhZGVyXCI+TWV0aG9kczwvaDY+PC9saT5cblx0XHRcdFx0XHRcdFx0PGxpPlxuXHRcdFx0XHRcdFx0XHRcdDxhIGNsYXNzPVwiZHJvcGRvd24taXRlbVwiIGhyZWY9XCIjdWwtaW5zdGFuY2UtbWV0aG9kc1wiPlxuXHRcdFx0XHRcdFx0XHRcdFx0SW5zdGFuY2UgTWV0aG9kc1xuXHRcdFx0XHRcdFx0XHRcdDwvYT5cblx0XHRcdFx0XHRcdFx0PC9saT5cblx0XHRcdFx0XHRcdFx0PGxpPlxuXHRcdFx0XHRcdFx0XHRcdDxhIGNsYXNzPVwiZHJvcGRvd24taXRlbVwiIGhyZWY9XCIjdWwtY29uc29sZS1tZXRob2RzXCI+XG5cdFx0XHRcdFx0XHRcdFx0XHRDb25zb2xlIE1ldGhvZHNcblx0XHRcdFx0XHRcdFx0XHQ8L2E+XG5cdFx0XHRcdFx0XHRcdDwvbGk+XG5cdFx0XHRcdFx0XHRcdDxsaT48aHIgY2xhc3M9XCJkcm9wZG93bi1kaXZpZGVyXCIgLz48L2xpPlxuXHRcdFx0XHRcdFx0XHQ8bGk+XG5cdFx0XHRcdFx0XHRcdFx0PGEgY2xhc3M9XCJkcm9wZG93bi1pdGVtXCIgaHJlZj1cIiN1bC1leGFtcGxlc1wiPkV4YW1wbGVzPC9hPlxuXHRcdFx0XHRcdFx0XHQ8L2xpPlxuXHRcdFx0XHRcdFx0PC91bD5cblx0XHRcdFx0XHQ8L2xpPlxuXG5cdFx0XHRcdFx0PCEtLSBFeGFtcGxlcyAtLT5cblx0XHRcdFx0XHQ8bGkgY2xhc3M9XCJuYXYtaXRlbSBkcm9wZG93blwiPlxuXHRcdFx0XHRcdFx0PGFcblx0XHRcdFx0XHRcdFx0Y2xhc3M9XCJuYXYtbGluayBkcm9wZG93bi10b2dnbGVcIlxuXHRcdFx0XHRcdFx0XHRocmVmPVwiI1wiXG5cdFx0XHRcdFx0XHRcdGlkPVwiZXhhbXBsZXMtZHJvcGRvd25cIlxuXHRcdFx0XHRcdFx0XHRyb2xlPVwiYnV0dG9uXCJcblx0XHRcdFx0XHRcdFx0ZGF0YS1icy10b2dnbGU9XCJkcm9wZG93blwiXG5cdFx0XHRcdFx0XHRcdGFyaWEtZXhwYW5kZWQ9XCJmYWxzZVwiXG5cdFx0XHRcdFx0XHQ+XG5cdFx0XHRcdFx0XHRcdEV4YW1wbGVzXG5cdFx0XHRcdFx0XHQ8L2E+XG5cdFx0XHRcdFx0XHQ8dWxcblx0XHRcdFx0XHRcdFx0Y2xhc3M9XCJkcm9wZG93bi1tZW51IGRyb3Bkb3duLW1lbnUtZGFya1wiXG5cdFx0XHRcdFx0XHRcdGFyaWEtbGFiZWxsZWRieT1cImV4YW1wbGVzLWRyb3Bkb3duXCJcblx0XHRcdFx0XHRcdD5cblx0XHRcdFx0XHRcdFx0PGxpPlxuXHRcdFx0XHRcdFx0XHRcdDxhIGNsYXNzPVwiZHJvcGRvd24taXRlbVwiIGhyZWY9XCIjc2ltcGxlLWV4YW1wbGVzXCI+U2ltcGxlPC9hPlxuXHRcdFx0XHRcdFx0XHQ8L2xpPlxuXHRcdFx0XHRcdFx0XHQ8bGk+PGg2IGNsYXNzPVwiZHJvcGRvd24taGVhZGVyXCI+T3B0aW9uczwvaDY+PC9saT5cblx0XHRcdFx0XHRcdFx0PGxpPlxuXHRcdFx0XHRcdFx0XHRcdDxhIGNsYXNzPVwiZHJvcGRvd24taXRlbVwiIGhyZWY9XCIjdGV4dC1leGFtcGxlc1wiPnRleHQ8L2E+XG5cdFx0XHRcdFx0XHRcdDwvbGk+XG5cdFx0XHRcdFx0XHRcdDxsaT5cblx0XHRcdFx0XHRcdFx0XHQ8YSBjbGFzcz1cImRyb3Bkb3duLWl0ZW1cIiBocmVmPVwiI3R5cGUtZXhhbXBsZXNcIj50eXBlPC9hPlxuXHRcdFx0XHRcdFx0XHQ8L2xpPlxuXHRcdFx0XHRcdFx0XHQ8bGk+XG5cdFx0XHRcdFx0XHRcdFx0PGEgY2xhc3M9XCJkcm9wZG93bi1pdGVtXCIgaHJlZj1cIiNzdHlsZXMtZXhhbXBsZXNcIj5zdHlsZXM8L2E+XG5cdFx0XHRcdFx0XHRcdDwvbGk+XG5cdFx0XHRcdFx0XHRcdDxsaT5cblx0XHRcdFx0XHRcdFx0XHQ8YSBjbGFzcz1cImRyb3Bkb3duLWl0ZW1cIiBocmVmPVwiI2Rpc2FibGVkLWV4YW1wbGVzXCI+ZGlzYWJsZWQ8L2E+XG5cdFx0XHRcdFx0XHRcdDwvbGk+XG5cdFx0XHRcdFx0XHRcdDxsaT5cblx0XHRcdFx0XHRcdFx0XHQ8YSBjbGFzcz1cImRyb3Bkb3duLWl0ZW1cIiBocmVmPVwiI2xvZ1ByZWZpeC1leGFtcGxlc1wiPlxuXHRcdFx0XHRcdFx0XHRcdFx0bG9nUHJlZml4XG5cdFx0XHRcdFx0XHRcdFx0PC9hPlxuXHRcdFx0XHRcdFx0XHQ8L2xpPlxuXHRcdFx0XHRcdFx0XHQ8bGk+XG5cdFx0XHRcdFx0XHRcdFx0PGEgY2xhc3M9XCJkcm9wZG93bi1pdGVtXCIgaHJlZj1cIiNtYWdpY2FsLWV4YW1wbGVzXCI+bWFnaWNhbDwvYT5cblx0XHRcdFx0XHRcdFx0PC9saT5cblx0XHRcdFx0XHRcdFx0PGxpPlxuXHRcdFx0XHRcdFx0XHRcdDxhIGNsYXNzPVwiZHJvcGRvd24taXRlbVwiIGhyZWY9XCIjbmFtZS1leGFtcGxlc1wiPm5hbWU8L2E+XG5cdFx0XHRcdFx0XHRcdDwvbGk+XG5cdFx0XHRcdFx0XHRcdDxsaT5cblx0XHRcdFx0XHRcdFx0XHQ8YSBjbGFzcz1cImRyb3Bkb3duLWl0ZW1cIiBocmVmPVwiI29iamVjdHMtZXhhbXBsZXNcIj5vYmplY3RzPC9hPlxuXHRcdFx0XHRcdFx0XHQ8L2xpPlxuXHRcdFx0XHRcdFx0XHQ8bGk+XG5cdFx0XHRcdFx0XHRcdFx0PGEgY2xhc3M9XCJkcm9wZG93bi1pdGVtXCIgaHJlZj1cIiNhcnJheS1leGFtcGxlc1wiPmFycmF5PC9hPlxuXHRcdFx0XHRcdFx0XHQ8L2xpPlxuXHRcdFx0XHRcdFx0PC91bD5cblx0XHRcdFx0XHQ8L2xpPlxuXHRcdFx0XHQ8L3VsPlxuXHRcdFx0XHQ8ZGl2IGNsYXNzPVwiZC1mbGV4XCI+XG5cdFx0XHRcdFx0PHVsIGNsYXNzPVwibmF2YmFyLW5hdiBtZS1hdXRvIG1iLTIgbWItbGctMFwiPlxuXHRcdFx0XHRcdFx0PGxpIGNsYXNzPVwibmF2LWl0ZW1cIj5cblx0XHRcdFx0XHRcdFx0PGEgY2xhc3M9XCJuYXYtbGlua1wiIDpocmVmPVwibGlua3MuZ2l0aHViXCI+R2l0SHViPC9hPlxuXHRcdFx0XHRcdFx0PC9saT5cblx0XHRcdFx0XHRcdDxsaSBjbGFzcz1cIm5hdi1pdGVtXCI+XG5cdFx0XHRcdFx0XHRcdDxhIGNsYXNzPVwibmF2LWxpbmtcIiA6aHJlZj1cImxpbmtzLm5wbVwiPk5QTSBQYWNrYWdlPC9hPlxuXHRcdFx0XHRcdFx0PC9saT5cblx0XHRcdFx0XHQ8L3VsPlxuXHRcdFx0XHQ8L2Rpdj5cblx0XHRcdDwvZGl2PlxuXHRcdDwvZGl2PlxuXHQ8L25hdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5cbmV4cG9ydCBkZWZhdWx0IHtcblx0bmFtZTogJ05hdicsXG5cdGRhdGE6ICgpID0+ICh7XG5cdFx0bGlua3M6IHtcblx0XHRcdGdpdGh1YjogJ2h0dHBzOi8vZ2l0aHViLmNvbS93ZWJkZXZuZXJkc3R1ZmYvdnVlLXVuaWNvcm4tbG9nJyxcblx0XHRcdG5wbTogJ2h0dHBzOi8vZ2l0aHViLmNvbS93ZWJkZXZuZXJkc3R1ZmYvdnVlLXVuaWNvcm4tbG9nJyxcblx0XHR9LFxuXHR9KSxcbn07XG48L3NjcmlwdD5cblxuPHN0eWxlIGxhbmc9XCJzY3NzXCI+XG48L3N0eWxlPlxuIiwiPHRlbXBsYXRlPlxuXHQ8ZGl2PlxuXHRcdDxkaXYgY2xhc3M9XCJyb3cgbWItMlwiPlxuXHRcdFx0PGRpdiBjbGFzcz1cImNvbC0xMlwiPlxuXHRcdFx0XHQ8aDUgY2xhc3M9XCJteS0wXCI+PGNvZGU+YXJyYXk8L2NvZGU+PC9oNT5cblx0XHRcdDwvZGl2PlxuXHRcdDwvZGl2PlxuXG5cdFx0PCEtLSA9PT09PT09PT09PT09PT09PT09PT09PSBTaW1wbGUgRXhhbXBsZSAtLT5cblx0XHQ8ZGl2IGNsYXNzPVwicm93IG1iLTRcIiBpZD1cImFycmF5LXNpbXBsZS1leGFtcGxlXCI+XG5cdFx0XHQ8ZGl2IGNsYXNzPVwiY29sLXhsLTQgY29sLTYgZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlclwiPlxuXHRcdFx0XHQ8aDYgY2xhc3M9XCJteS0wXCI+U2luZ2xlIGFycmF5PC9oNj5cblx0XHRcdDwvZGl2PlxuXHRcdFx0PGRpdiBjbGFzcz1cImNvbC14bC00IGNvbC02IGQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXIganVzdGlmeS1jb250ZW50LWVuZFwiPlxuXHRcdFx0XHQ8YnV0dG9uXG5cdFx0XHRcdFx0QGNsaWNrPVwic2ltcGxlRXhhbXBsZVwiXG5cdFx0XHRcdFx0Y2xhc3M9XCJidG4gYnRuLW91dGxpbmUtcHJpbWFyeSBidG4tc21cIlxuXHRcdFx0XHRcdHR5cGU9XCJidXR0b25cIlxuXHRcdFx0XHQ+XG5cdFx0XHRcdFx0UnVuXG5cdFx0XHRcdDwvYnV0dG9uPlxuXHRcdFx0PC9kaXY+XG5cblx0XHRcdDxkaXYgY2xhc3M9XCJjb2wteGwtOCBjb2wtbGctMTJcIj5cblx0XHRcdFx0PHZ1ZS1jb2RlLWhpZ2hsaWdodCBsYW5ndWFnZT1cImpzXCI+XG5cdFx0XHRcdFx0PHByZT5cbnRoaXMuJHVuaWNvcm5Mb2coe1xuXHR0ZXh0OiAnSGVsbG8gV29ybGQnLFxuXHRhcnJheTogWydmb28nLCAnYmFyJ10sXG59KTtcblx0XHRcdFx0XHRcdDwvcHJlXG5cdFx0XHRcdFx0PlxuXHRcdFx0XHQ8L3Z1ZS1jb2RlLWhpZ2hsaWdodD5cblx0XHRcdDwvZGl2PlxuXHRcdDwvZGl2PlxuXG5cdFx0PCEtLSA9PT09PT09PT09PT09PT09PT09PT09PSBBcnJheSBPYmplY3RzIC0tPlxuXHRcdDxkaXYgY2xhc3M9XCJyb3cgbWItNFwiIGlkPVwiYXJyYXktb2JqZWN0cy1leGFtcGxlXCI+XG5cdFx0XHQ8ZGl2IGNsYXNzPVwiY29sLXhsLTQgY29sLTYgZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlclwiPlxuXHRcdFx0XHQ8aDYgY2xhc3M9XCJteS0wXCI+VXNpbmcgYW4gYXJyYXkgb2Ygb2JqZWN0czwvaDY+XG5cdFx0XHQ8L2Rpdj5cblx0XHRcdDxkaXYgY2xhc3M9XCJjb2wteGwtNCBjb2wtNiBkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyIGp1c3RpZnktY29udGVudC1lbmRcIj5cblx0XHRcdFx0PGJ1dHRvblxuXHRcdFx0XHRcdEBjbGljaz1cIm9iamVjdEFycmF5XCJcblx0XHRcdFx0XHRjbGFzcz1cImJ0biBidG4tb3V0bGluZS1wcmltYXJ5IGJ0bi1zbVwiXG5cdFx0XHRcdFx0dHlwZT1cImJ1dHRvblwiXG5cdFx0XHRcdD5cblx0XHRcdFx0XHRSdW5cblx0XHRcdFx0PC9idXR0b24+XG5cdFx0XHQ8L2Rpdj5cblxuXHRcdFx0PGRpdiBjbGFzcz1cImNvbC14bC04IGNvbC1sZy0xMlwiPlxuXHRcdFx0XHQ8dnVlLWNvZGUtaGlnaGxpZ2h0IGxhbmd1YWdlPVwianNcIj5cblx0XHRcdFx0XHQ8cHJlPlxuY29uc3QgZm9vID0geyBmb286ICdmb28gJyB9O1xuY29uc3QgYmFyID0geyBiYXI6ICdiYXIgJyB9O1xuXG50aGlzLiR1bmljb3JuTG9nKHtcblx0dGV4dDogJ0hlbGxvIFdvcmxkJyxcblx0YXJyYXk6IFtmb28sIGJhcl0sXG59KTtcblx0XHRcdFx0XHRcdDwvcHJlXG5cdFx0XHRcdFx0PlxuXHRcdFx0XHQ8L3Z1ZS1jb2RlLWhpZ2hsaWdodD5cblx0XHRcdDwvZGl2PlxuXHRcdDwvZGl2PlxuXG5cdFx0PCEtLSA9PT09PT09PT09PT09PT09PT09PT09PSBBcnJheSBTcHJlYWQgT3BlcmF0b3IgLS0+XG5cdFx0PGRpdiBjbGFzcz1cInJvdyBtYi00XCIgaWQ9XCJhcnJheS1zcHJlYWQtZXhhbXBsZVwiPlxuXHRcdFx0PGRpdiBjbGFzcz1cImNvbC14bC00IGNvbC02IGQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXJcIj5cblx0XHRcdFx0PGg2IGNsYXNzPVwibXktMFwiPlVzaW5nIGFycmF5IHNwcmVhZCBPcGVyYXRvcjwvaDY+XG5cdFx0XHQ8L2Rpdj5cblx0XHRcdDxkaXYgY2xhc3M9XCJjb2wteGwtNCBjb2wtNiBkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyIGp1c3RpZnktY29udGVudC1lbmRcIj5cblx0XHRcdFx0PGJ1dHRvblxuXHRcdFx0XHRcdEBjbGljaz1cImFycmF5U3ByZWFkT3BlcmF0b3JcIlxuXHRcdFx0XHRcdGNsYXNzPVwiYnRuIGJ0bi1vdXRsaW5lLXByaW1hcnkgYnRuLXNtXCJcblx0XHRcdFx0XHR0eXBlPVwiYnV0dG9uXCJcblx0XHRcdFx0PlxuXHRcdFx0XHRcdFJ1blxuXHRcdFx0XHQ8L2J1dHRvbj5cblx0XHRcdDwvZGl2PlxuXG5cdFx0XHQ8ZGl2IGNsYXNzPVwiY29sLXhsLTggY29sLWxnLTEyXCI+XG5cdFx0XHRcdDx2dWUtY29kZS1oaWdobGlnaHQgbGFuZ3VhZ2U9XCJqc1wiPlxuXHRcdFx0XHRcdDxwcmU+XG5jb25zdCBmb28gPSBbJ2ZvbyddO1xuY29uc3QgYmFyID0gWydiYXInXTtcblxudGhpcy4kdW5pY29ybkxvZyh7XG5cdHRleHQ6ICdIZWxsbyBXb3JsZCcsXG5cdGFycmF5OiBbLi4uZm9vLCAuLi5iYXJdLFxufSk7XG5cdFx0XHRcdFx0XHQ8L3ByZVxuXHRcdFx0XHRcdD5cblx0XHRcdFx0PC92dWUtY29kZS1oaWdobGlnaHQ+XG5cdFx0XHQ8L2Rpdj5cblx0XHQ8L2Rpdj5cblx0PC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IFZ1ZSBmcm9tICd2dWUnO1xuaW1wb3J0IFVuaWNvcm5Mb2cgZnJvbSAnQHBsdWdpbnMvVW5pY29ybkxvZyc7XG5pbXBvcnQgeyBjb21wb25lbnQgYXMgVnVlQ29kZUhpZ2hsaWdodCB9IGZyb20gJ3Z1ZS1jb2RlLWhpZ2hsaWdodCc7XG5cblZ1ZS51c2UoVW5pY29ybkxvZyk7XG5cbmV4cG9ydCBkZWZhdWx0IHtcblx0bmFtZTogJ0FycmF5c0V4YW1wbGUnLFxuXHRjb21wb25lbnRzOiB7XG5cdFx0VnVlQ29kZUhpZ2hsaWdodCxcblx0fSxcblx0ZGF0YTogKCkgPT4gKHt9KSxcblx0bWV0aG9kczoge1xuXHRcdHNpbXBsZUV4YW1wbGUoKSB7XG5cdFx0XHR0aGlzLiR1bmljb3JuTG9nKHtcblx0XHRcdFx0dGV4dDogJ0hlbGxvIFdvcmxkJyxcblx0XHRcdFx0YXJyYXk6IFsnZm9vJywgJ2JhciddLFxuXHRcdFx0fSk7XG5cdFx0fSxcblx0XHRvYmplY3RBcnJheSgpIHtcblx0XHRcdGNvbnN0IGZvbyA9IHsgZm9vOiAnZm9vICcgfTtcblx0XHRcdGNvbnN0IGJhciA9IHsgYmFyOiAnYmFyICcgfTtcblxuXHRcdFx0dGhpcy4kdW5pY29ybkxvZyh7XG5cdFx0XHRcdHRleHQ6ICdIZWxsbyBXb3JsZCcsXG5cdFx0XHRcdGFycmF5OiBbZm9vLCBiYXJdLFxuXHRcdFx0fSk7XG5cdFx0fSxcblx0XHRhcnJheVNwcmVhZE9wZXJhdG9yKCkge1xuXHRcdFx0Y29uc3QgZm9vID0gWydmb28nXTtcblx0XHRcdGNvbnN0IGJhciA9IFsnYmFyJ107XG5cblx0XHRcdHRoaXMuJHVuaWNvcm5Mb2coe1xuXHRcdFx0XHR0ZXh0OiAnSGVsbG8gV29ybGQnLFxuXHRcdFx0XHRhcnJheTogWy4uLmZvbywgLi4uYmFyXSxcblx0XHRcdH0pO1xuXHRcdH0sXG5cdH0sXG59O1xuPC9zY3JpcHQ+XG4iLCI8dGVtcGxhdGU+XG5cdDxkaXY+XG5cdFx0PGRpdiBjbGFzcz1cInJvdyBtYi0yXCI+XG5cdFx0XHQ8ZGl2IGNsYXNzPVwiY29sLTEyXCI+XG5cdFx0XHRcdDxoNSBjbGFzcz1cIm15LTBcIj48Y29kZT5kaXNhYmxlZDwvY29kZT48L2g1PlxuXHRcdFx0PC9kaXY+XG5cdFx0PC9kaXY+XG5cblx0XHQ8IS0tID09PT09PT09PT09PT09PT09PT09PT09IFNpbXBsZSBFeGFtcGxlIC0tPlxuXHRcdDxkaXYgY2xhc3M9XCJyb3cgbWItNFwiIGlkPVwiZGlzYWJsZWQtc2ltcGxlLWV4YW1wbGVcIj5cblx0XHRcdDxkaXYgY2xhc3M9XCJjb2wteGwtNCBjb2wtNiBkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyXCI+XG5cdFx0XHRcdDxkaXYgY2xhc3M9XCJmb3JtLWNoZWNrIGZvcm0tc3dpdGNoXCI+XG5cdFx0XHRcdFx0PGlucHV0XG5cdFx0XHRcdFx0XHR2LW1vZGVsPVwiaXNEaXNhYmxlZFwiXG5cdFx0XHRcdFx0XHRjbGFzcz1cImZvcm0tY2hlY2staW5wdXRcIlxuXHRcdFx0XHRcdFx0dHlwZT1cImNoZWNrYm94XCJcblx0XHRcdFx0XHRcdHJvbGU9XCJzd2l0Y2hcIlxuXHRcdFx0XHRcdFx0Y2hlY2tlZFxuXHRcdFx0XHRcdC8+XG5cdFx0XHRcdFx0PGxhYmVsIGNsYXNzPVwiZm9ybS1jaGVjay1sYWJlbFwiXG5cdFx0XHRcdFx0XHQ+ZGlzYWJsZWQgPVxuXHRcdFx0XHRcdFx0PHNwYW4gY2xhc3M9XCJib29sZWFuLXN0eWxlXCI+e3sgaXNEaXNhYmxlZCB9fTwvc3Bhbj5cblx0XHRcdFx0XHQ8L2xhYmVsPlxuXHRcdFx0XHQ8L2Rpdj5cblx0XHRcdDwvZGl2PlxuXHRcdFx0PGRpdiBjbGFzcz1cImNvbC14bC00IGNvbC02IGQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXIganVzdGlmeS1jb250ZW50LWVuZFwiPlxuXHRcdFx0XHQ8YnV0dG9uXG5cdFx0XHRcdFx0QGNsaWNrPVwic2ltcGxlRXhhbXBsZVwiXG5cdFx0XHRcdFx0Y2xhc3M9XCJidG4gYnRuLW91dGxpbmUtcHJpbWFyeSBidG4tc21cIlxuXHRcdFx0XHRcdHR5cGU9XCJidXR0b25cIlxuXHRcdFx0XHQ+XG5cdFx0XHRcdFx0UnVuXG5cdFx0XHRcdDwvYnV0dG9uPlxuXHRcdFx0PC9kaXY+XG5cblx0XHRcdDxkaXYgY2xhc3M9XCJjb2wteGwtOCBjb2wtbGctMTJcIj5cblx0XHRcdFx0PHZ1ZS1jb2RlLWhpZ2hsaWdodCBsYW5ndWFnZT1cImpzXCI+XG5cdFx0XHRcdFx0PHByZT5cbnRoaXMuJHVuaWNvcm5Mb2coe1xuXHR0ZXh0OiAnSGVsbG8gV29ybGQnLFxuXHRkaXNhYmxlZDogdHJ1ZSxcbn0pO1xuXHRcdFx0XHRcdFx0PC9wcmVcblx0XHRcdFx0XHQ+XG5cdFx0XHRcdDwvdnVlLWNvZGUtaGlnaGxpZ2h0PlxuXHRcdFx0PC9kaXY+XG5cdFx0PC9kaXY+XG5cdFx0PCEtLSA9PT09PT09PT09PT09PT09PT09PT09PSBEaXNhYmxlZCBPcHRpb24gLS0+XG5cdFx0PGRpdiBjbGFzcz1cInJvdyBtYi00XCIgaWQ9XCJkaXNhYmxlZC1jb25kaXRpb25hbC1leGFtcGxlXCI+XG5cdFx0XHQ8ZGl2IGNsYXNzPVwiY29sLTEyXCI+XG5cdFx0XHRcdDxoNiBjbGFzcz1cIm15LTBcIj5Vc2luZyBhbiAuZW52IHZhcmlhYmxlPC9oNj5cblx0XHRcdFx0PGRpdiBjbGFzcz1cImZzdC1pdGFsaWNcIj5cblx0XHRcdFx0XHRDb25kaXRpb25hbGx5IHNldCBzbyBpdCB3aWxsIGxvZyBpbiBkZXZlbG9wbWVudCwgYnV0IG5vdCBvbiB0aGVcblx0XHRcdFx0XHRwcm9kdWN0aW9uIHNpdGUuXG5cdFx0XHRcdDwvZGl2PlxuXHRcdFx0PC9kaXY+XG5cblx0XHRcdDxkaXYgY2xhc3M9XCJjb2wteGwtOCBjb2wtbGctMTJcIj5cblx0XHRcdFx0PHZ1ZS1jb2RlLWhpZ2hsaWdodCBsYW5ndWFnZT1cImpzXCI+XG5cdFx0XHRcdFx0PHByZT5cbnRoaXMuJHVuaWNvcm5Mb2coe1xuXHR0ZXh0OiAnSGVsbG8gV29ybGQnLFxuXHRkaXNhYmxlZDogcHJvY2Vzcy5lbnYuVU5JQ09STl9MT0cgIT09ICd0cnVlJyxcbn0pO1xuXHRcdFx0XHRcdFx0PC9wcmVcblx0XHRcdFx0XHQ+XG5cdFx0XHRcdDwvdnVlLWNvZGUtaGlnaGxpZ2h0PlxuXHRcdFx0PC9kaXY+XG5cdFx0PC9kaXY+XG5cdDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCBWdWUgZnJvbSAndnVlJztcbmltcG9ydCBVbmljb3JuTG9nIGZyb20gJ0BwbHVnaW5zL1VuaWNvcm5Mb2cnO1xuaW1wb3J0IHsgY29tcG9uZW50IGFzIFZ1ZUNvZGVIaWdobGlnaHQgfSBmcm9tICd2dWUtY29kZS1oaWdobGlnaHQnO1xuXG5WdWUudXNlKFVuaWNvcm5Mb2cpO1xuXG5leHBvcnQgZGVmYXVsdCB7XG5cdG5hbWU6ICdEaXNhYmxlZEV4YW1wbGUnLFxuXHRjb21wb25lbnRzOiB7XG5cdFx0VnVlQ29kZUhpZ2hsaWdodCxcblx0fSxcblx0ZGF0YTogKCkgPT4gKHtcblx0XHRpc0Rpc2FibGVkOiB0cnVlLFxuXHR9KSxcblx0bWV0aG9kczoge1xuXHRcdHNpbXBsZUV4YW1wbGUoKSB7XG5cdFx0XHR0aGlzLiR1bmljb3JuTG9nKHtcblx0XHRcdFx0dGV4dDogJ0hlbGxvIFdvcmxkJyxcblx0XHRcdFx0ZGlzYWJsZWQ6IHRoaXMuaXNEaXNhYmxlZCxcblx0XHRcdH0pO1xuXHRcdH0sXG5cdH0sXG59O1xuPC9zY3JpcHQ+XG4iLCI8dGVtcGxhdGU+XG5cdDxkaXY+XG5cdFx0PGRpdiBjbGFzcz1cInJvdyBtYi0yXCI+XG5cdFx0XHQ8ZGl2IGNsYXNzPVwiY29sLTEyXCI+XG5cdFx0XHRcdDxoNSBjbGFzcz1cIm15LTBcIj5cblx0XHRcdFx0XHQ8Y29kZT57eyBpc05hbWVPcHRpb24gPyAnbmFtZScgOiAnbG9nUHJlZml4JyB9fTwvY29kZT5cblx0XHRcdFx0PC9oNT5cblx0XHRcdDwvZGl2PlxuXHRcdDwvZGl2PlxuXG5cdFx0PCEtLSA9PT09PT09PT09PT09PT09PT09PT09PSBTaW1wbGUgRXhhbXBsZSAtLT5cblx0XHQ8ZGl2IGNsYXNzPVwicm93IG1iLTRcIiB2LWlmPVwiIWlzTmFtZU9wdGlvblwiIGlkPVwibG9nUHJlZml4LXNpbXBsZS1leGFtcGxlXCI+XG5cdFx0XHQ8ZGl2IGNsYXNzPVwiY29sLXhsLTQgY29sLTYgZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlclwiPlxuXHRcdFx0XHQ8aW5wdXRcblx0XHRcdFx0XHR2LW1vZGVsPVwibG9nUHJlZml4XCJcblx0XHRcdFx0XHRjbGFzcz1cImZvcm0tY29udHJvbFwiXG5cdFx0XHRcdFx0dHlwZT1cInRleHRcIlxuXHRcdFx0XHRcdHZhbHVlPVwiW0J1bm5pZXNdOlwiXG5cdFx0XHRcdFx0cGxhY2Vob2xkZXI9XCJbQnVubmllc106XCJcblx0XHRcdFx0Lz5cblx0XHRcdDwvZGl2PlxuXHRcdFx0PGRpdiBjbGFzcz1cImNvbC14bC00IGNvbC02IGQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXIganVzdGlmeS1jb250ZW50LWVuZFwiPlxuXHRcdFx0XHQ8YnV0dG9uXG5cdFx0XHRcdFx0QGNsaWNrPVwic2ltcGxlRXhhbXBsZVwiXG5cdFx0XHRcdFx0Y2xhc3M9XCJidG4gYnRuLW91dGxpbmUtcHJpbWFyeSBidG4tc21cIlxuXHRcdFx0XHRcdHR5cGU9XCJidXR0b25cIlxuXHRcdFx0XHQ+XG5cdFx0XHRcdFx0UnVuXG5cdFx0XHRcdDwvYnV0dG9uPlxuXHRcdFx0PC9kaXY+XG5cblx0XHRcdDxkaXYgY2xhc3M9XCJjb2wteGwtOCBjb2wtbGctMTJcIj5cblx0XHRcdFx0PHZ1ZS1jb2RlLWhpZ2hsaWdodCBsYW5ndWFnZT1cImpzXCI+XG5cdFx0XHRcdFx0PHByZT5cbnRoaXMuJHVuaWNvcm5Mb2coe1xuXHR0ZXh0OiAnSGVsbG8gV29ybGQnLFxuXHRsb2dQcmVmaXg6ICdbQnVubmllc106Jyxcbn0pO1xuXHRcdFx0XHRcdFx0PC9wcmVcblx0XHRcdFx0XHQ+XG5cdFx0XHRcdDwvdnVlLWNvZGUtaGlnaGxpZ2h0PlxuXHRcdFx0PC9kaXY+XG5cdFx0PC9kaXY+XG5cblx0XHQ8IS0tID09PT09PT09PT09PT09PT09PT09PT09IE5hbWUgQm9vbGVhbiBPcHRpb24gLS0+XG5cdFx0PGRpdiBjbGFzcz1cInJvdyBtYi00XCIgdi1pZj1cIiFpc05hbWVPcHRpb25cIiBpZD1cIm5hbWUtZGVmYXVsdC1leGFtcGxlXCI+XG5cdFx0XHQ8ZGl2IGNsYXNzPVwiY29sLTEyIG1iLTJcIj5cblx0XHRcdFx0SWYgPGNvZGU+bG9nUHJlZml4PC9jb2RlPiBvcHRpb24gaXMgc2V0IGFzIGFcblx0XHRcdFx0PHNwYW4gY2xhc3M9XCJvcHRpb24tdHlwZVwiPkJvb2xlYW48L3NwYW4+IG9mXG5cdFx0XHRcdDxzcGFuIGNsYXNzPVwiYm9vbGVhbi1zdHlsZVwiPnRydWU8L3NwYW4+LCBpdCB3aWxsIHVzZSB0aGVcblx0XHRcdFx0PGNvZGU+bmFtZTwvY29kZT4gb3B0aW9uIGZvciB0aGUgcHJlZml4LlxuXHRcdFx0PC9kaXY+XG5cblx0XHRcdDxkaXYgY2xhc3M9XCJjb2wteGwtNCBjb2wtNiBkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyXCI+XG5cdFx0XHRcdDxkaXYgY2xhc3M9XCJmb3JtLWNoZWNrIGZvcm0tc3dpdGNoXCI+XG5cdFx0XHRcdFx0PGlucHV0XG5cdFx0XHRcdFx0XHR2LW1vZGVsPVwid2l0aE5hbWVcIlxuXHRcdFx0XHRcdFx0Y2xhc3M9XCJmb3JtLWNoZWNrLWlucHV0XCJcblx0XHRcdFx0XHRcdHR5cGU9XCJjaGVja2JveFwiXG5cdFx0XHRcdFx0XHRyb2xlPVwic3dpdGNoXCJcblx0XHRcdFx0XHRcdGNoZWNrZWRcblx0XHRcdFx0XHQvPlxuXHRcdFx0XHRcdDxsYWJlbCBjbGFzcz1cImZvcm0tY2hlY2stbGFiZWxcIlxuXHRcdFx0XHRcdFx0PmxvZ1ByZWZpeCBvcHRpb24gPVxuXHRcdFx0XHRcdFx0PHNwYW4gY2xhc3M9XCJib29sZWFuLXN0eWxlXCI+e3sgd2l0aE5hbWUgfX08L3NwYW4+IHdpdGggZGVmYXVsdFxuXHRcdFx0XHRcdFx0PGNvZGU+bmFtZTwvY29kZT4gb3B0aW9uXG5cdFx0XHRcdFx0PC9sYWJlbD5cblx0XHRcdFx0PC9kaXY+XG5cdFx0XHQ8L2Rpdj5cblx0XHRcdDxkaXYgY2xhc3M9XCJjb2wteGwtNCBjb2wtNiBkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyIGp1c3RpZnktY29udGVudC1lbmRcIj5cblx0XHRcdFx0PGJ1dHRvblxuXHRcdFx0XHRcdEBjbGljaz1cImV4YW1wbGVOYW1lRGVmYXVsdFwiXG5cdFx0XHRcdFx0Y2xhc3M9XCJidG4gYnRuLW91dGxpbmUtcHJpbWFyeSBidG4tc21cIlxuXHRcdFx0XHRcdHR5cGU9XCJidXR0b25cIlxuXHRcdFx0XHQ+XG5cdFx0XHRcdFx0UnVuXG5cdFx0XHRcdDwvYnV0dG9uPlxuXHRcdFx0PC9kaXY+XG5cblx0XHRcdDxkaXYgY2xhc3M9XCJjb2wteGwtOCBjb2wtbGctMTJcIj5cblx0XHRcdFx0PHZ1ZS1jb2RlLWhpZ2hsaWdodCBsYW5ndWFnZT1cImpzXCI+XG5cdFx0XHRcdFx0PHByZT5cbnRoaXMuJHVuaWNvcm5Mb2coe1xuXHR0ZXh0OiAnSGVsbG8gV29ybGQnLFxuXHRsb2dQcmVmaXg6IHRydWUsXG59KTtcblx0XHRcdFx0XHRcdDwvcHJlXG5cdFx0XHRcdFx0PlxuXHRcdFx0XHQ8L3Z1ZS1jb2RlLWhpZ2hsaWdodD5cblx0XHRcdDwvZGl2PlxuXHRcdDwvZGl2PlxuXG5cdFx0PCEtLSA9PT09PT09PT09PT09PT09PT09PT09PSBOYW1lIE9wdGlvbiAtLT5cblx0XHQ8ZGl2IGNsYXNzPVwicm93IG1iLTRcIiBpZD1cIm5hbWUtZXhhbXBsZVwiPlxuXHRcdFx0PGRpdiBjbGFzcz1cImNvbC14bC00IGNvbC02IGQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXJcIj5cblx0XHRcdFx0PGRpdiBjbGFzcz1cImZvcm0tY2hlY2sgZm9ybS1zd2l0Y2hcIj5cblx0XHRcdFx0XHQ8aW5wdXRcblx0XHRcdFx0XHRcdHYtbW9kZWw9XCJ3aXRoTmFtZVwiXG5cdFx0XHRcdFx0XHRjbGFzcz1cImZvcm0tY2hlY2staW5wdXRcIlxuXHRcdFx0XHRcdFx0dHlwZT1cImNoZWNrYm94XCJcblx0XHRcdFx0XHRcdHJvbGU9XCJzd2l0Y2hcIlxuXHRcdFx0XHRcdFx0Y2hlY2tlZFxuXHRcdFx0XHRcdC8+XG5cdFx0XHRcdFx0PGxhYmVsIGNsYXNzPVwiZm9ybS1jaGVjay1sYWJlbFwiXG5cdFx0XHRcdFx0XHQ+bG9nUHJlZml4ID0gPHNwYW4gY2xhc3M9XCJib29sZWFuLXN0eWxlXCI+e3sgd2l0aE5hbWUgfX08L3NwYW4+IHdpdGhcblx0XHRcdFx0XHRcdDxjb2RlPm5hbWU8L2NvZGU+IG9wdGlvbiBzZXRcblx0XHRcdFx0XHQ8L2xhYmVsPlxuXHRcdFx0XHQ8L2Rpdj5cblx0XHRcdDwvZGl2PlxuXHRcdFx0PGRpdiBjbGFzcz1cImNvbC14bC00IGNvbC02IGQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXIganVzdGlmeS1jb250ZW50LWVuZFwiPlxuXHRcdFx0XHQ8YnV0dG9uXG5cdFx0XHRcdFx0QGNsaWNrPVwiZXhhbXBsZU5hbWVcIlxuXHRcdFx0XHRcdGNsYXNzPVwiYnRuIGJ0bi1vdXRsaW5lLXByaW1hcnkgYnRuLXNtXCJcblx0XHRcdFx0XHR0eXBlPVwiYnV0dG9uXCJcblx0XHRcdFx0PlxuXHRcdFx0XHRcdFJ1blxuXHRcdFx0XHQ8L2J1dHRvbj5cblx0XHRcdDwvZGl2PlxuXG5cdFx0XHQ8ZGl2IGNsYXNzPVwiY29sLXhsLTggY29sLWxnLTEyXCI+XG5cdFx0XHRcdDx2dWUtY29kZS1oaWdobGlnaHQgbGFuZ3VhZ2U9XCJqc1wiPlxuXHRcdFx0XHRcdDxwcmU+XG50aGlzLiR1bmljb3JuTG9nKHtcblx0dGV4dDogJ0hlbGxvIFdvcmxkJyxcblx0bG9nUHJlZml4OiB0cnVlLFxuXHRuYW1lOiAne3sgaXNOYW1lT3B0aW9uID8gJ1N1c2FuJyA6ICdCb2InIH19Jyxcbn0pO1xuXHRcdFx0XHRcdFx0PC9wcmVcblx0XHRcdFx0XHQ+XG5cdFx0XHRcdDwvdnVlLWNvZGUtaGlnaGxpZ2h0PlxuXHRcdFx0PC9kaXY+XG5cdFx0PC9kaXY+XG5cdDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCBWdWUgZnJvbSAndnVlJztcbmltcG9ydCBVbmljb3JuTG9nIGZyb20gJ0BwbHVnaW5zL1VuaWNvcm5Mb2cnO1xuaW1wb3J0IHsgY29tcG9uZW50IGFzIFZ1ZUNvZGVIaWdobGlnaHQgfSBmcm9tICd2dWUtY29kZS1oaWdobGlnaHQnO1xuXG5WdWUudXNlKFVuaWNvcm5Mb2cpO1xuXG5leHBvcnQgZGVmYXVsdCB7XG5cdG5hbWU6ICdMb2dQcmVmaXhFeGFtcGxlJyxcblx0cHJvcHM6IHtcblx0XHRpc05hbWVPcHRpb246IHtcblx0XHRcdHR5cGU6IEJvb2xlYW4sXG5cdFx0XHRkZWZhdWx0OiBmYWxzZSxcblx0XHR9LFxuXHR9LFxuXHRjb21wb25lbnRzOiB7XG5cdFx0VnVlQ29kZUhpZ2hsaWdodCxcblx0fSxcblx0ZGF0YTogKCkgPT4gKHtcblx0XHRsb2dQcmVmaXg6ICdbQnVubmllc106Jyxcblx0XHR3aXRoTmFtZTogdHJ1ZSxcblx0fSksXG5cdG1ldGhvZHM6IHtcblx0XHRleGFtcGxlTmFtZSgpIHtcblx0XHRcdHRoaXMuJHVuaWNvcm5Mb2coe1xuXHRcdFx0XHR0ZXh0OiAnSGVsbG8gV29ybGQnLFxuXHRcdFx0XHRsb2dQcmVmaXg6IHRoaXMud2l0aE5hbWUsXG5cdFx0XHRcdG5hbWU6IHRoaXMuaXNOYW1lT3B0aW9uID8gJ1N1c2FuJyA6ICdCb2InLFxuXHRcdFx0fSk7XG5cdFx0fSxcblx0XHRleGFtcGxlTmFtZURlZmF1bHQoKSB7XG5cdFx0XHR0aGlzLiR1bmljb3JuTG9nKHtcblx0XHRcdFx0dGV4dDogJ0hlbGxvIFdvcmxkJyxcblx0XHRcdFx0bG9nUHJlZml4OiB0aGlzLndpdGhOYW1lLFxuXHRcdFx0fSk7XG5cdFx0fSxcblx0XHRzaW1wbGVFeGFtcGxlKCkge1xuXHRcdFx0dGhpcy4kdW5pY29ybkxvZyh7XG5cdFx0XHRcdHRleHQ6ICdIZWxsbyBXb3JsZCcsXG5cdFx0XHRcdGxvZ1ByZWZpeDogdGhpcy5sb2dQcmVmaXgsXG5cdFx0XHR9KTtcblx0XHR9LFxuXHR9LFxufTtcbjwvc2NyaXB0PlxuIiwiPHRlbXBsYXRlPlxuXHQ8ZGl2PlxuXHRcdDxkaXYgY2xhc3M9XCJyb3cgbWItMlwiPlxuXHRcdFx0PGRpdiBjbGFzcz1cImNvbC0xMlwiPlxuXHRcdFx0XHQ8aDUgY2xhc3M9XCJteS0wXCI+PGNvZGU+bWFnaWNhbDwvY29kZT48L2g1PlxuXHRcdFx0PC9kaXY+XG5cdFx0PC9kaXY+XG5cblx0XHQ8IS0tID09PT09PT09PT09PT09PT09PT09PT09IFNpbXBsZSBFeGFtcGxlIC0tPlxuXHRcdDxkaXYgY2xhc3M9XCJyb3cgbWItNFwiIGlkPVwibWFnaWNhbC1zaW1wbGUtZXhhbXBsZVwiPlxuXHRcdFx0PGRpdiBjbGFzcz1cImNvbC14bC00IGNvbC02IGQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXJcIj5cblx0XHRcdFx0PGRpdiBjbGFzcz1cImZvcm0tY2hlY2sgZm9ybS1zd2l0Y2hcIj5cblx0XHRcdFx0XHQ8aW5wdXRcblx0XHRcdFx0XHRcdHYtbW9kZWw9XCJtYWdpY2FsXCJcblx0XHRcdFx0XHRcdGNsYXNzPVwiZm9ybS1jaGVjay1pbnB1dFwiXG5cdFx0XHRcdFx0XHR0eXBlPVwiY2hlY2tib3hcIlxuXHRcdFx0XHRcdFx0cm9sZT1cInN3aXRjaFwiXG5cdFx0XHRcdFx0XHRjaGVja2VkXG5cdFx0XHRcdFx0Lz5cblx0XHRcdFx0XHQ8bGFiZWwgY2xhc3M9XCJmb3JtLWNoZWNrLWxhYmVsXCJcblx0XHRcdFx0XHRcdD5tYWdpY2FsID1cblx0XHRcdFx0XHRcdDxzcGFuIGNsYXNzPVwiYm9vbGVhbi1zdHlsZVwiPnt7IG1hZ2ljYWwgfX08L3NwYW4+XG5cdFx0XHRcdFx0PC9sYWJlbD5cblx0XHRcdFx0PC9kaXY+XG5cdFx0XHQ8L2Rpdj5cblx0XHRcdDxkaXYgY2xhc3M9XCJjb2wteGwtNCBjb2wtNiBkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyIGp1c3RpZnktY29udGVudC1lbmRcIj5cblx0XHRcdFx0PGJ1dHRvblxuXHRcdFx0XHRcdEBjbGljaz1cInNpbXBsZUV4YW1wbGVcIlxuXHRcdFx0XHRcdGNsYXNzPVwiYnRuIGJ0bi1vdXRsaW5lLXByaW1hcnkgYnRuLXNtXCJcblx0XHRcdFx0XHR0eXBlPVwiYnV0dG9uXCJcblx0XHRcdFx0PlxuXHRcdFx0XHRcdFJ1blxuXHRcdFx0XHQ8L2J1dHRvbj5cblx0XHRcdDwvZGl2PlxuXG5cdFx0XHQ8ZGl2IGNsYXNzPVwiY29sLXhsLTggY29sLWxnLTEyXCI+XG5cdFx0XHRcdDx2dWUtY29kZS1oaWdobGlnaHQgbGFuZ3VhZ2U9XCJqc1wiPlxuXHRcdFx0XHRcdDxwcmU+XG50aGlzLiR1bmljb3JuTG9nKHtcblx0dGV4dDogJ0hlbGxvIFdvcmxkJyxcblx0bWFnaWNhbDogdHJ1ZSxcbn0pO1xuXHRcdFx0XHRcdFx0PC9wcmVcblx0XHRcdFx0XHQ+XG5cdFx0XHRcdDwvdnVlLWNvZGUtaGlnaGxpZ2h0PlxuXHRcdFx0PC9kaXY+XG5cdFx0PC9kaXY+XG5cdDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCBWdWUgZnJvbSAndnVlJztcbmltcG9ydCBVbmljb3JuTG9nIGZyb20gJ0BwbHVnaW5zL1VuaWNvcm5Mb2cnO1xuaW1wb3J0IHsgY29tcG9uZW50IGFzIFZ1ZUNvZGVIaWdobGlnaHQgfSBmcm9tICd2dWUtY29kZS1oaWdobGlnaHQnO1xuXG5WdWUudXNlKFVuaWNvcm5Mb2cpO1xuXG5leHBvcnQgZGVmYXVsdCB7XG5cdG5hbWU6ICdNYWdpY2FsRXhhbXBsZScsXG5cdGNvbXBvbmVudHM6IHtcblx0XHRWdWVDb2RlSGlnaGxpZ2h0LFxuXHR9LFxuXHRkYXRhOiAoKSA9PiAoe1xuXHRcdG1hZ2ljYWw6IHRydWUsXG5cdH0pLFxuXHRtZXRob2RzOiB7XG5cdFx0c2ltcGxlRXhhbXBsZSgpIHtcblx0XHRcdHRoaXMuJHVuaWNvcm5Mb2coe1xuXHRcdFx0XHR0ZXh0OiAnSGVsbG8gV29ybGQnLFxuXHRcdFx0XHRtYWdpY2FsOiB0aGlzLm1hZ2ljYWwsXG5cdFx0XHR9KTtcblx0XHR9LFxuXHR9LFxufTtcbjwvc2NyaXB0PlxuIiwiPHRlbXBsYXRlPlxuXHQ8ZGl2PlxuXHRcdDxkaXYgY2xhc3M9XCJyb3cgbWItMlwiPlxuXHRcdFx0PGRpdiBjbGFzcz1cImNvbC0xMlwiPlxuXHRcdFx0XHQ8aDUgY2xhc3M9XCJteS0wXCI+PGNvZGU+b2JqZWN0czwvY29kZT48L2g1PlxuXHRcdFx0PC9kaXY+XG5cdFx0PC9kaXY+XG5cblx0XHQ8IS0tID09PT09PT09PT09PT09PT09PT09PT09IFNpbXBsZSBFeGFtcGxlIC0tPlxuXHRcdDxkaXYgY2xhc3M9XCJyb3cgbWItNFwiIGlkPVwib2JqZWN0cy1zaW1wbGUtZXhhbXBsZVwiPlxuXHRcdFx0PGRpdiBjbGFzcz1cImNvbC14bC00IGNvbC02IGQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXJcIj5cblx0XHRcdFx0PGg2IGNsYXNzPVwibXktMFwiPlNpbmdsZSBvYmplY3Q8L2g2PlxuXHRcdFx0PC9kaXY+XG5cdFx0XHQ8ZGl2IGNsYXNzPVwiY29sLXhsLTQgY29sLTYgZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNvbnRlbnQtZW5kXCI+XG5cdFx0XHRcdDxidXR0b25cblx0XHRcdFx0XHRAY2xpY2s9XCJzaW1wbGVFeGFtcGxlXCJcblx0XHRcdFx0XHRjbGFzcz1cImJ0biBidG4tb3V0bGluZS1wcmltYXJ5IGJ0bi1zbVwiXG5cdFx0XHRcdFx0dHlwZT1cImJ1dHRvblwiXG5cdFx0XHRcdD5cblx0XHRcdFx0XHRSdW5cblx0XHRcdFx0PC9idXR0b24+XG5cdFx0XHQ8L2Rpdj5cblxuXHRcdFx0PGRpdiBjbGFzcz1cImNvbC14bC04IGNvbC1sZy0xMlwiPlxuXHRcdFx0XHQ8dnVlLWNvZGUtaGlnaGxpZ2h0IGxhbmd1YWdlPVwianNcIj5cblx0XHRcdFx0XHQ8cHJlPlxudGhpcy4kdW5pY29ybkxvZyh7XG5cdHRleHQ6ICdIZWxsbyBXb3JsZCcsXG5cdG9iamVjdHM6IHsgZm9vOiAnYmFyJyB9LFxufSk7XG5cdFx0XHRcdFx0XHQ8L3ByZVxuXHRcdFx0XHRcdD5cblx0XHRcdFx0PC92dWUtY29kZS1oaWdobGlnaHQ+XG5cdFx0XHQ8L2Rpdj5cblx0XHQ8L2Rpdj5cblxuXHRcdDwhLS0gPT09PT09PT09PT09PT09PT09PT09PT0gTXVsdGlwbGUgT2JqZWN0cyAtLT5cblx0XHQ8ZGl2IGNsYXNzPVwicm93IG1iLTRcIiBpZD1cIm9iamVjdHMtbXVsdGlwbGUtZXhhbXBsZVwiPlxuXHRcdFx0PGRpdiBjbGFzcz1cImNvbC14bC00IGNvbC02IGQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXJcIj5cblx0XHRcdFx0PGg2IGNsYXNzPVwibXktMFwiPk11bHRpcGxlIG9iamVjdHM8L2g2PlxuXHRcdFx0PC9kaXY+XG5cdFx0XHQ8ZGl2IGNsYXNzPVwiY29sLXhsLTQgY29sLTYgZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNvbnRlbnQtZW5kXCI+XG5cdFx0XHRcdDxidXR0b25cblx0XHRcdFx0XHRAY2xpY2s9XCJtdWx0aXBsZU9iamVjdHNcIlxuXHRcdFx0XHRcdGNsYXNzPVwiYnRuIGJ0bi1vdXRsaW5lLXByaW1hcnkgYnRuLXNtXCJcblx0XHRcdFx0XHR0eXBlPVwiYnV0dG9uXCJcblx0XHRcdFx0PlxuXHRcdFx0XHRcdFJ1blxuXHRcdFx0XHQ8L2J1dHRvbj5cblx0XHRcdDwvZGl2PlxuXG5cdFx0XHQ8ZGl2IGNsYXNzPVwiY29sLXhsLTggY29sLWxnLTEyXCI+XG5cdFx0XHRcdDx2dWUtY29kZS1oaWdobGlnaHQgbGFuZ3VhZ2U9XCJqc1wiPlxuXHRcdFx0XHRcdDxwcmU+XG5jb25zdCBmb28gPSB7IGZvbzogJ2ZvbyAnIH07XG5jb25zdCBiYXIgPSB7IGJhcjogJ2JhciAnIH07XG5cbnRoaXMuJHVuaWNvcm5Mb2coe1xuXHR0ZXh0OiAnSGVsbG8gV29ybGQnLFxuXHRvYmplY3RzOiB7IGZvbywgYmFyIH0sXG59KTtcblx0XHRcdFx0XHRcdDwvcHJlXG5cdFx0XHRcdFx0PlxuXHRcdFx0XHQ8L3Z1ZS1jb2RlLWhpZ2hsaWdodD5cblx0XHRcdDwvZGl2PlxuXHRcdDwvZGl2PlxuXG5cdFx0PCEtLSA9PT09PT09PT09PT09PT09PT09PT09PSBPYmplY3QgU3ByZWFkIE9wZXJhdG9yIC0tPlxuXHRcdDxkaXYgY2xhc3M9XCJyb3cgbWItNFwiIGlkPVwib2JqZWN0cy1zcHJlYWQtZXhhbXBsZVwiPlxuXHRcdFx0PGRpdiBjbGFzcz1cImNvbC14bC00IGNvbC02IGQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXJcIj5cblx0XHRcdFx0PGg2IGNsYXNzPVwibXktMFwiPlVzaW5nIG9iamVjdCBzcHJlYWQgT3BlcmF0b3I8L2g2PlxuXHRcdFx0PC9kaXY+XG5cdFx0XHQ8ZGl2IGNsYXNzPVwiY29sLXhsLTQgY29sLTYgZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNvbnRlbnQtZW5kXCI+XG5cdFx0XHRcdDxidXR0b25cblx0XHRcdFx0XHRAY2xpY2s9XCJvYmplY3RTcHJlYWRPcGVyYXRvclwiXG5cdFx0XHRcdFx0Y2xhc3M9XCJidG4gYnRuLW91dGxpbmUtcHJpbWFyeSBidG4tc21cIlxuXHRcdFx0XHRcdHR5cGU9XCJidXR0b25cIlxuXHRcdFx0XHQ+XG5cdFx0XHRcdFx0UnVuXG5cdFx0XHRcdDwvYnV0dG9uPlxuXHRcdFx0PC9kaXY+XG5cblx0XHRcdDxkaXYgY2xhc3M9XCJjb2wteGwtOCBjb2wtbGctMTJcIj5cblx0XHRcdFx0PHZ1ZS1jb2RlLWhpZ2hsaWdodCBsYW5ndWFnZT1cImpzXCI+XG5cdFx0XHRcdFx0PHByZT5cbmNvbnN0IGZvbyA9IHsgZm9vOiAnZm9vICcgfTtcbmNvbnN0IGJhciA9IHsgYmFyOiAnYmFyICcgfTtcblxudGhpcy4kdW5pY29ybkxvZyh7XG5cdHRleHQ6ICdIZWxsbyBXb3JsZCcsXG5cdG9iamVjdHM6IHsgLi4uZm9vLCAuLi5iYXIgfSxcbn0pO1xuXHRcdFx0XHRcdFx0PC9wcmVcblx0XHRcdFx0XHQ+XG5cdFx0XHRcdDwvdnVlLWNvZGUtaGlnaGxpZ2h0PlxuXHRcdFx0PC9kaXY+XG5cdFx0PC9kaXY+XG5cdDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCBWdWUgZnJvbSAndnVlJztcbmltcG9ydCBVbmljb3JuTG9nIGZyb20gJ0BwbHVnaW5zL1VuaWNvcm5Mb2cnO1xuaW1wb3J0IHsgY29tcG9uZW50IGFzIFZ1ZUNvZGVIaWdobGlnaHQgfSBmcm9tICd2dWUtY29kZS1oaWdobGlnaHQnO1xuXG5WdWUudXNlKFVuaWNvcm5Mb2cpO1xuXG5leHBvcnQgZGVmYXVsdCB7XG5cdG5hbWU6ICdPYmplY3RzRXhhbXBsZScsXG5cdGNvbXBvbmVudHM6IHtcblx0XHRWdWVDb2RlSGlnaGxpZ2h0LFxuXHR9LFxuXHRkYXRhOiAoKSA9PiAoe30pLFxuXHRtZXRob2RzOiB7XG5cdFx0c2ltcGxlRXhhbXBsZSgpIHtcblx0XHRcdHRoaXMuJHVuaWNvcm5Mb2coe1xuXHRcdFx0XHR0ZXh0OiAnSGVsbG8gV29ybGQnLFxuXHRcdFx0XHRvYmplY3RzOiB7IGZvbzogJ2JhcicgfSxcblx0XHRcdH0pO1xuXHRcdH0sXG5cdFx0bXVsdGlwbGVPYmplY3RzKCkge1xuXHRcdFx0Y29uc3QgZm9vID0geyBmb286ICdmb28gJyB9O1xuXHRcdFx0Y29uc3QgYmFyID0geyBiYXI6ICdiYXIgJyB9O1xuXG5cdFx0XHR0aGlzLiR1bmljb3JuTG9nKHtcblx0XHRcdFx0dGV4dDogJ0hlbGxvIFdvcmxkJyxcblx0XHRcdFx0b2JqZWN0czogeyBmb28sIGJhciB9LFxuXHRcdFx0fSk7XG5cdFx0fSxcblx0XHRvYmplY3RTcHJlYWRPcGVyYXRvcigpIHtcblx0XHRcdGNvbnN0IGZvbyA9IHsgZm9vOiAnZm9vJyB9O1xuXHRcdFx0Y29uc3QgYmFyID0geyBiYXI6ICdiYXInIH07XG5cblx0XHRcdHRoaXMuJHVuaWNvcm5Mb2coe1xuXHRcdFx0XHR0ZXh0OiAnSGVsbG8gV29ybGQnLFxuXHRcdFx0XHRvYmplY3RzOiB7IC4uLmZvbywgLi4uYmFyIH0sXG5cdFx0XHR9KTtcblx0XHR9LFxuXHR9LFxufTtcbjwvc2NyaXB0PlxuIiwiPHRlbXBsYXRlPlxuXHQ8ZGl2PlxuXHRcdDwhLS0gPT09PT09PT09PT09PT09PT09PT09PT0gU2ltcGxlIEV4YW1wbGUgLS0+XG5cdFx0PGRpdiBjbGFzcz1cInJvdyBtYi00XCI+XG5cdFx0XHQ8ZGl2IGNsYXNzPVwiY29sLXhsLTQgY29sLTYgZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlclwiPlxuXHRcdFx0XHQ8aDUgY2xhc3M9XCJteS0wXCI+U2ltcGxlIEV4YW1wbGU8L2g1PlxuXHRcdFx0PC9kaXY+XG5cdFx0XHQ8ZGl2IGNsYXNzPVwiY29sLXhsLTQgY29sLTYgZC1mbGV4IGp1c3RpZnktY29udGVudC1lbmRcIj5cblx0XHRcdFx0PGJ1dHRvblxuXHRcdFx0XHRcdEBjbGljaz1cInNpbXBsZUV4YW1wbGVcIlxuXHRcdFx0XHRcdGNsYXNzPVwiYnRuIGJ0bi1vdXRsaW5lLXByaW1hcnkgYnRuLXNtXCJcblx0XHRcdFx0XHR0eXBlPVwiYnV0dG9uXCJcblx0XHRcdFx0PlxuXHRcdFx0XHRcdFJ1blxuXHRcdFx0XHQ8L2J1dHRvbj5cblx0XHRcdDwvZGl2PlxuXG5cdFx0XHQ8ZGl2IGNsYXNzPVwiY29sLXhsLTggY29sLWxnLTEyXCI+XG5cdFx0XHRcdDx2dWUtY29kZS1oaWdobGlnaHQgbGFuZ3VhZ2U9XCJqc1wiPlxuXHRcdFx0XHRcdDxwcmU+XG50aGlzLiR1bmljb3JuTG9nKCk7XG5cdFx0XHRcdFx0XHQ8L3ByZVxuXHRcdFx0XHRcdD5cblx0XHRcdFx0PC92dWUtY29kZS1oaWdobGlnaHQ+XG5cdFx0XHQ8L2Rpdj5cblx0XHQ8L2Rpdj5cblx0PC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IFZ1ZSBmcm9tICd2dWUnO1xuaW1wb3J0IFVuaWNvcm5Mb2cgZnJvbSAnQHBsdWdpbnMvVW5pY29ybkxvZyc7XG5pbXBvcnQgeyBjb21wb25lbnQgYXMgVnVlQ29kZUhpZ2hsaWdodCB9IGZyb20gJ3Z1ZS1jb2RlLWhpZ2hsaWdodCc7XG5cblZ1ZS51c2UoVW5pY29ybkxvZyk7XG5cbmV4cG9ydCBkZWZhdWx0IHtcblx0bmFtZTogJ1NpbXBsZUV4YW1wbGUnLFxuXHRjb21wb25lbnRzOiB7XG5cdFx0VnVlQ29kZUhpZ2hsaWdodCxcblx0fSxcblx0ZGF0YTogKCkgPT4gKHt9KSxcblx0bWV0aG9kczoge1xuXHRcdHNpbXBsZUV4YW1wbGUoKSB7XG5cdFx0XHR0aGlzLiR1bmljb3JuTG9nKCk7XG5cdFx0fSxcblxuXHR9LFxufTtcbjwvc2NyaXB0PlxuIiwiPHRlbXBsYXRlPlxuXHQ8ZGl2PlxuXHRcdDxkaXYgY2xhc3M9XCJyb3cgbWItMlwiPlxuXHRcdFx0PGRpdiBjbGFzcz1cImNvbC0xMlwiPlxuXHRcdFx0XHQ8aDUgY2xhc3M9XCJteS0wXCI+PGNvZGU+c3R5bGVzPC9jb2RlPjwvaDU+XG5cdFx0XHQ8L2Rpdj5cblxuXHRcdFx0PGRpdiBjbGFzcz1cImNvbC14bC04IGNvbC1sZy0xMlwiPlxuXHRcdFx0XHRGb3IgYSBsaXN0IG9mIHRoZSBkaWZmZXJlbnQgYXZhaWxhYmxlIHN0eWxlcywgcmVmZXIgdG8gdGhlXG5cdFx0XHRcdDxhXG5cdFx0XHRcdFx0aHJlZj1cImh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9jb25zb2xlI3N0eWxpbmdfY29uc29sZV9vdXRwdXRcIlxuXHRcdFx0XHRcdHRhcmdldD1cIl9ibGFua1wiXG5cdFx0XHRcdFx0PldlYiBBUElzIE1ETiBTdHlsaW5nIENvbnNvbGUgT3V0cHV0XG5cdFx0XHRcdDwvYT5cblx0XHRcdFx0ZGV2ZWxvcGVyIGRvY3VtZW50YXRpb24uIERlcGVuZGluZyBvbiB0aGUgYnJvd3Nlciwgc29tZSBzdHlsZXMgbWF5IG5vdFxuXHRcdFx0XHR3b3JrLlxuXHRcdFx0PC9kaXY+XG5cdFx0PC9kaXY+XG5cblx0XHQ8IS0tID09PT09PT09PT09PT09PT09PT09PT09IFNpbXBsZSBFeGFtcGxlIC0tPlxuXHRcdDxkaXYgY2xhc3M9XCJyb3cgbWItNFwiIGlkPVwiZGVmYXVsdFN0eWxlcy1zaW1wbGUtZXhhbXBsZVwiPlxuXHRcdFx0PGRpdiBjbGFzcz1cImNvbC14bC00IGNvbC02IGQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXJcIj5cblx0XHRcdFx0PGRpdiBjbGFzcz1cImNvbC14bC04IGNvbC1sZy0xMiBtdC0yXCI+XG5cdFx0XHRcdFx0PGlucHV0XG5cdFx0XHRcdFx0XHR2LW1vZGVsPVwiZGVmYXVsdFN0eWxlc1wiXG5cdFx0XHRcdFx0XHRjbGFzcz1cImZvcm0tY29udHJvbFwiXG5cdFx0XHRcdFx0XHR0eXBlPVwidGV4dFwiXG5cdFx0XHRcdFx0XHR2YWx1ZT1cIltCdW5uaWVzXTpcIlxuXHRcdFx0XHRcdFx0cGxhY2Vob2xkZXI9XCJbQnVubmllc106XCJcblx0XHRcdFx0XHQvPlxuXHRcdFx0XHQ8L2Rpdj5cblx0XHRcdDwvZGl2PlxuXHRcdFx0PGRpdiBjbGFzcz1cImNvbC14bC00IGNvbC02IGQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXIganVzdGlmeS1jb250ZW50LWVuZFwiPlxuXHRcdFx0XHQ8YnV0dG9uXG5cdFx0XHRcdFx0QGNsaWNrPVwic2ltcGxlRXhhbXBsZVwiXG5cdFx0XHRcdFx0Y2xhc3M9XCJidG4gYnRuLW91dGxpbmUtcHJpbWFyeSBidG4tc21cIlxuXHRcdFx0XHRcdHR5cGU9XCJidXR0b25cIlxuXHRcdFx0XHQ+XG5cdFx0XHRcdFx0UnVuXG5cdFx0XHRcdDwvYnV0dG9uPlxuXHRcdFx0PC9kaXY+XG5cblx0XHRcdDxkaXYgY2xhc3M9XCJjb2wteGwtOCBjb2wtbGctMTJcIj5cblx0XHRcdFx0PHZ1ZS1jb2RlLWhpZ2hsaWdodCBsYW5ndWFnZT1cImpzXCI+XG5cdFx0XHRcdFx0PHByZT5cbnRoaXMuJHVuaWNvcm5Mb2coe1xuXHR0ZXh0OiAnSGVsbG8gV29ybGQnLFxuXHRzdHlsZXM6ICd7eyB0aGlzLmRlZmF1bHRTdHlsZXMgfX0nLFxufSk7XG5cdFx0XHRcdFx0XHQ8L3ByZVxuXHRcdFx0XHRcdD5cblx0XHRcdFx0PC92dWUtY29kZS1oaWdobGlnaHQ+XG5cdFx0XHQ8L2Rpdj5cblx0XHQ8L2Rpdj5cblxuXHRcdDwhLS0gPT09PT09PT09PT09PT09PT09PT09PT0gQXJyYXkgRXhhbXBsZSAtLT5cblx0XHQ8ZGl2IGNsYXNzPVwicm93IG1iLTRcIiBpZD1cImRlZmF1bHRTdHlsZXMtc2ltcGxlLWV4YW1wbGVcIj5cblx0XHRcdDxkaXYgY2xhc3M9XCJjb2wteGwtNCBjb2wtNiBkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyXCI+XG5cdFx0XHRcdDxkaXYgY2xhc3M9XCJjb2wteGwtOCBjb2wtbGctMTJcIj5cblx0XHRcdFx0XHQ8aDYgY2xhc3M9XCJteS0wXCI+VXNpbmcgYW4gQXJyYXkuPC9oNj5cblx0XHRcdFx0PC9kaXY+XG5cdFx0XHQ8L2Rpdj5cblx0XHRcdDxkaXYgY2xhc3M9XCJjb2wteGwtNCBjb2wtNiBkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyIGp1c3RpZnktY29udGVudC1lbmRcIj5cblx0XHRcdFx0PGJ1dHRvblxuXHRcdFx0XHRcdEBjbGljaz1cImFycmF5RXhhbXBsZVwiXG5cdFx0XHRcdFx0Y2xhc3M9XCJidG4gYnRuLW91dGxpbmUtcHJpbWFyeSBidG4tc21cIlxuXHRcdFx0XHRcdHR5cGU9XCJidXR0b25cIlxuXHRcdFx0XHQ+XG5cdFx0XHRcdFx0UnVuXG5cdFx0XHRcdDwvYnV0dG9uPlxuXHRcdFx0PC9kaXY+XG5cblx0XHRcdDxkaXYgY2xhc3M9XCJjb2wteGwtOCBjb2wtbGctMTJcIj5cblx0XHRcdFx0PHZ1ZS1jb2RlLWhpZ2hsaWdodCBsYW5ndWFnZT1cImpzXCI+XG5cdFx0XHRcdFx0PHByZT5cbnRoaXMuJHVuaWNvcm5Mb2coe1xuXHR0ZXh0OiAnSGVsbG8gV29ybGQnLFxuXHRzdHlsZXM6IFtcblx0XHQnYmFja2dyb3VuZDogYmxhY2snLFxuXHRcdCdib3JkZXI6IDFweCBkYXNoZWQgbWFnZW50YScsXG5cdFx0J2NvbG9yOiBtYWdlbnRhJyxcblx0XHQnZm9udC1mYW1pbHk6IG1vbm9zcGFjZScsXG5cdFx0J2ZvbnQtc2l6ZTogMmVtJyxcblx0XHQncGFkZGluZzogMTBweCcsXG5cdF0sXG59KTtcblx0XHRcdFx0XHRcdDwvcHJlXG5cdFx0XHRcdFx0PlxuXHRcdFx0XHQ8L3Z1ZS1jb2RlLWhpZ2hsaWdodD5cblx0XHRcdDwvZGl2PlxuXHRcdDwvZGl2PlxuXG5cdFx0PCEtLSA9PT09PT09PT09PT09PT09PT09PT09PSBXb3JkIEV4YW1wbGUgLS0+XG5cdFx0PGRpdiBjbGFzcz1cInJvdyBtYi0yXCIgaWQ9XCJkZWZhdWx0U3R5bGVzLXdvcmQtZXhhbXBsZVwiPlxuXHRcdFx0PGRpdiBjbGFzcz1cImNvbC14bC04IGNvbC1sZy0xMlwiPlxuXHRcdFx0XHRZb3UgY2FuIGFsc28gc2V0IHRoZSA8Y29kZT5zdHlsZTwvY29kZT4gb3B0aW9uIHRvIGEgbWFnaWNhbCB3b3JkIHRvIG1ha2Vcblx0XHRcdFx0dGhlIG1hZ2ljIGhhcHBlbi4gVGhpcyBjYW4gYWxzbyBiZSBzZXQgd2l0aCB0aGVcblx0XHRcdFx0PGNvZGU+bWFnaWNhbDwvY29kZT4gb3B0aW9uIHRvIDxzcGFuIGNsYXNzPVwiYm9vbGVhbi1zdHlsZVwiPnRydWU8L3NwYW4+LlxuXHRcdFx0PC9kaXY+XG5cdFx0PC9kaXY+XG5cblx0XHQ8ZGl2IGNsYXNzPVwicm93IG1iLTRcIiBpZD1cImRlZmF1bHRTdHlsZXMtd29yZC1leGFtcGxlXCI+XG5cdFx0XHQ8ZGl2IGNsYXNzPVwiY29sLXhsLTQgY29sLTYgZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlclwiPlxuXHRcdFx0XHQ8ZGl2IGNsYXNzPVwiY29sLXhsLTggY29sLWxnLTEyIG10LTJcIj5cblx0XHRcdFx0XHQ8c2VsZWN0IHYtbW9kZWw9XCJtYWdpY2FsV29yZFwiIGNsYXNzPVwiZm9ybS1zZWxlY3RcIj5cblx0XHRcdFx0XHRcdDxvcHRpb24gdi1mb3I9XCJ3b3JkIGluIG1hZ2ljYWxXb3Jkc1wiIDprZXk9XCJ3b3JkXCI+e3sgd29yZCB9fTwvb3B0aW9uPlxuXHRcdFx0XHRcdDwvc2VsZWN0PlxuXHRcdFx0XHQ8L2Rpdj5cblx0XHRcdDwvZGl2PlxuXHRcdFx0PGRpdiBjbGFzcz1cImNvbC14bC00IGNvbC02IGQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXIganVzdGlmeS1jb250ZW50LWVuZFwiPlxuXHRcdFx0XHQ8YnV0dG9uXG5cdFx0XHRcdFx0QGNsaWNrPVwid29yZEV4YW1wbGVcIlxuXHRcdFx0XHRcdGNsYXNzPVwiYnRuIGJ0bi1vdXRsaW5lLXByaW1hcnkgYnRuLXNtXCJcblx0XHRcdFx0XHR0eXBlPVwiYnV0dG9uXCJcblx0XHRcdFx0PlxuXHRcdFx0XHRcdFJ1blxuXHRcdFx0XHQ8L2J1dHRvbj5cblx0XHRcdDwvZGl2PlxuXG5cdFx0XHQ8ZGl2IGNsYXNzPVwiY29sLXhsLTggY29sLWxnLTEyXCI+XG5cdFx0XHRcdDx2dWUtY29kZS1oaWdobGlnaHQgbGFuZ3VhZ2U9XCJqc1wiPlxuXHRcdFx0XHRcdDxwcmU+XG50aGlzLiR1bmljb3JuTG9nKHtcblx0dGV4dDogJ0hlbGxvIFdvcmxkJyxcblx0c3R5bGVzOiAne3sgdGhpcy5tYWdpY2FsV29yZCB9fScsXG59KTtcblx0XHRcdFx0XHRcdDwvcHJlXG5cdFx0XHRcdFx0PlxuXHRcdFx0XHQ8L3Z1ZS1jb2RlLWhpZ2hsaWdodD5cblx0XHRcdDwvZGl2PlxuXHRcdDwvZGl2PlxuXHQ8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgVnVlIGZyb20gJ3Z1ZSc7XG5pbXBvcnQgVW5pY29ybkxvZyBmcm9tICdAcGx1Z2lucy9Vbmljb3JuTG9nJztcbmltcG9ydCB7IGNvbXBvbmVudCBhcyBWdWVDb2RlSGlnaGxpZ2h0IH0gZnJvbSAndnVlLWNvZGUtaGlnaGxpZ2h0JztcblxuVnVlLnVzZShVbmljb3JuTG9nKTtcblxuZXhwb3J0IGRlZmF1bHQge1xuXHRuYW1lOiAnU3R5bGVzRXhhbXBsZScsXG5cdGNvbXBvbmVudHM6IHtcblx0XHRWdWVDb2RlSGlnaGxpZ2h0LFxuXHR9LFxuXHRkYXRhOiAoKSA9PiAoe1xuXHRcdGRlZmF1bHRTdHlsZXM6ICdjb2xvcjogRGVlcFBpbms7IGZvbnQtc2l6ZTogMnJlbTsnLFxuXHRcdG1hZ2ljYWxXb3JkOiAndW5pY29ybicsXG5cdFx0bWFnaWNhbFdvcmRzOiBbXG5cdFx0XHQnbWFnaWMnLFxuXHRcdFx0J21hZ2ljYWwnLFxuXHRcdFx0J3ByaXNtJyxcblx0XHRcdCdwc3ljaGVkZWxpYycsXG5cdFx0XHQncmFpbmJvdycsXG5cdFx0XHQndHJpcHB5Jyxcblx0XHRcdCd1bmljb3JuJyxcblx0XHRdLFxuXHR9KSxcblx0bWV0aG9kczoge1xuXHRcdGFycmF5RXhhbXBsZSgpIHtcblx0XHRcdHRoaXMuJHVuaWNvcm5Mb2coe1xuXHRcdFx0XHR0ZXh0OiAnSGVsbG8gV29ybGQnLFxuXHRcdFx0XHRzdHlsZXM6IFtcblx0XHRcdFx0XHQnYmFja2dyb3VuZDogYmxhY2snLFxuXHRcdFx0XHRcdCdib3JkZXI6IDFweCBkYXNoZWQgbWFnZW50YScsXG5cdFx0XHRcdFx0J2NvbG9yOiBtYWdlbnRhJyxcblx0XHRcdFx0XHQnZm9udC1mYW1pbHk6IG1vbm9zcGFjZScsXG5cdFx0XHRcdFx0J2ZvbnQtc2l6ZTogMmVtJyxcblx0XHRcdFx0XHQncGFkZGluZzogMTBweCcsXG5cdFx0XHRcdF0sXG5cdFx0XHR9KTtcblx0XHR9LFxuXHRcdHNpbXBsZUV4YW1wbGUoKSB7XG5cdFx0XHR0aGlzLiR1bmljb3JuTG9nKHtcblx0XHRcdFx0dGV4dDogJ0hlbGxvIFdvcmxkJyxcblx0XHRcdFx0c3R5bGVzOiB0aGlzLmRlZmF1bHRTdHlsZXMsXG5cdFx0XHR9KTtcblx0XHR9LFxuXHRcdHdvcmRFeGFtcGxlKCkge1xuXHRcdFx0dGhpcy4kdW5pY29ybkxvZyh7XG5cdFx0XHRcdHRleHQ6IGBVc2luZyB0aGUgd29yZCAke3RoaXMubWFnaWNhbFdvcmR9YCxcblx0XHRcdFx0c3R5bGVzOiB0aGlzLm1hZ2ljYWxXb3JkLFxuXHRcdFx0fSk7XG5cdFx0fSxcblx0fSxcbn07XG48L3NjcmlwdD5cbiIsIjx0ZW1wbGF0ZT5cblx0PGRpdj5cblx0XHQ8ZGl2IGNsYXNzPVwicm93IG1iLTJcIj5cblx0XHRcdDxkaXYgY2xhc3M9XCJjb2wtMTJcIj5cblx0XHRcdFx0PGg1IGNsYXNzPVwibXktMFwiPjxjb2RlPnRleHQ8L2NvZGU+PC9oNT5cblx0XHRcdDwvZGl2PlxuXHRcdDwvZGl2PlxuXG5cdFx0PCEtLSA9PT09PT09PT09PT09PT09PT09PT09PSBTaW1wbGUgRXhhbXBsZSAtLT5cblx0XHQ8ZGl2IGNsYXNzPVwicm93IG1iLTRcIiBpZD1cInRleHQtc2ltcGxlLWV4YW1wbGVcIj5cblx0XHRcdDxkaXYgY2xhc3M9XCJjb2wteGwtNCBjb2wtNiBkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyXCI+XG5cdFx0XHRcdDxkaXYgY2xhc3M9XCJjb2wteGwtOCBjb2wtbGctMTIgbXQtMlwiPlxuXHRcdFx0XHRcdDxpbnB1dFxuXHRcdFx0XHRcdFx0di1tb2RlbD1cInRleHRcIlxuXHRcdFx0XHRcdFx0Y2xhc3M9XCJmb3JtLWNvbnRyb2xcIlxuXHRcdFx0XHRcdFx0dHlwZT1cInRleHRcIlxuXHRcdFx0XHRcdFx0dmFsdWU9XCJbQnVubmllc106XCJcblx0XHRcdFx0XHRcdHBsYWNlaG9sZGVyPVwiW0J1bm5pZXNdOlwiXG5cdFx0XHRcdFx0Lz5cblx0XHRcdFx0PC9kaXY+XG5cdFx0XHQ8L2Rpdj5cblx0XHRcdDxkaXYgY2xhc3M9XCJjb2wteGwtNCBjb2wtNiBkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyIGp1c3RpZnktY29udGVudC1lbmRcIj5cblx0XHRcdFx0PGJ1dHRvblxuXHRcdFx0XHRcdEBjbGljaz1cInNpbXBsZUV4YW1wbGVcIlxuXHRcdFx0XHRcdGNsYXNzPVwiYnRuIGJ0bi1vdXRsaW5lLXByaW1hcnkgYnRuLXNtXCJcblx0XHRcdFx0XHR0eXBlPVwiYnV0dG9uXCJcblx0XHRcdFx0PlxuXHRcdFx0XHRcdFJ1blxuXHRcdFx0XHQ8L2J1dHRvbj5cblx0XHRcdDwvZGl2PlxuXG5cdFx0XHQ8ZGl2IGNsYXNzPVwiY29sLXhsLTggY29sLWxnLTEyXCI+XG5cdFx0XHRcdDx2dWUtY29kZS1oaWdobGlnaHQgbGFuZ3VhZ2U9XCJqc1wiPlxuXHRcdFx0XHRcdDxwcmU+XG50aGlzLiR1bmljb3JuTG9nKHtcblx0dGV4dDogJ0hlbGxvIFdvcmxkJyxcbn0pO1xuXHRcdFx0XHRcdFx0PC9wcmVcblx0XHRcdFx0XHQ+XG5cdFx0XHRcdDwvdnVlLWNvZGUtaGlnaGxpZ2h0PlxuXHRcdFx0PC9kaXY+XG5cdFx0PC9kaXY+XG5cdDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCBWdWUgZnJvbSAndnVlJztcbmltcG9ydCBVbmljb3JuTG9nIGZyb20gJ0BwbHVnaW5zL1VuaWNvcm5Mb2cnO1xuaW1wb3J0IHsgY29tcG9uZW50IGFzIFZ1ZUNvZGVIaWdobGlnaHQgfSBmcm9tICd2dWUtY29kZS1oaWdobGlnaHQnO1xuXG5WdWUudXNlKFVuaWNvcm5Mb2cpO1xuXG5leHBvcnQgZGVmYXVsdCB7XG5cdG5hbWU6ICdUZXh0RXhhbXBsZScsXG5cdGNvbXBvbmVudHM6IHtcblx0XHRWdWVDb2RlSGlnaGxpZ2h0LFxuXHR9LFxuXHRkYXRhOiAoKSA9PiAoe1xuXHRcdHRleHQ6ICdIZWxsbyBXb3JsZCcsXG5cdH0pLFxuXHRtZXRob2RzOiB7XG5cdFx0c2ltcGxlRXhhbXBsZSgpIHtcblx0XHRcdGlmICh0aGlzLnRleHQgIT09ICcnKSB7XG5cdFx0XHRcdHRoaXMuJHVuaWNvcm5Mb2coe1xuXHRcdFx0XHRcdHRleHQ6IHRoaXMudGV4dCxcblx0XHRcdFx0fSk7XG5cblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLiR1bmljb3JuTG9nKCk7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSxcblx0fSxcbn07XG48L3NjcmlwdD5cbiIsIjx0ZW1wbGF0ZT5cblx0PGRpdj5cblx0XHQ8ZGl2IGNsYXNzPVwicm93IG1iLTJcIj5cblx0XHRcdDxkaXYgY2xhc3M9XCJjb2wtMTJcIj5cblx0XHRcdFx0PGg1IGNsYXNzPVwibXktMFwiPjxjb2RlPnR5cGU8L2NvZGU+PC9oNT5cblx0XHRcdDwvZGl2PlxuXHRcdDwvZGl2PlxuXG5cdFx0PCEtLSA9PT09PT09PT09PT09PT09PT09PT09PSBTaW1wbGUgRXhhbXBsZSAtLT5cblx0XHQ8ZGl2IGNsYXNzPVwicm93IG1iLTRcIiBpZD1cImRlZmF1bHRTdHlsZXMtc2ltcGxlLWV4YW1wbGVcIj5cblx0XHRcdDxkaXYgY2xhc3M9XCJjb2wteGwtNCBjb2wtNiBkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyXCI+XG5cdFx0XHRcdDxkaXYgY2xhc3M9XCJjb2wteGwtOCBjb2wtbGctMTIgbXQtMlwiPlxuXHRcdFx0XHRcdDxzZWxlY3Qgdi1tb2RlbD1cImxvZ1R5cGVcIiBjbGFzcz1cImZvcm0tc2VsZWN0XCIgQGNoYW5nZT1cImNoZWNrVHlwZVwiPlxuXHRcdFx0XHRcdFx0PG9wdGlvbiB2LWZvcj1cInR5cGUgaW4gdHlwZXNcIiA6a2V5PVwidHlwZVwiPnt7IHR5cGUgfX08L29wdGlvbj5cblx0XHRcdFx0XHQ8L3NlbGVjdD5cblx0XHRcdFx0PC9kaXY+XG5cdFx0XHQ8L2Rpdj5cblx0XHRcdDxkaXYgY2xhc3M9XCJjb2wteGwtNCBjb2wtNiBkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyIGp1c3RpZnktY29udGVudC1lbmRcIj5cblx0XHRcdFx0PGJ1dHRvblxuXHRcdFx0XHRcdEBjbGljaz1cInNpbXBsZUV4YW1wbGVcIlxuXHRcdFx0XHRcdGNsYXNzPVwiYnRuIGJ0bi1vdXRsaW5lLXByaW1hcnkgYnRuLXNtXCJcblx0XHRcdFx0XHR0eXBlPVwiYnV0dG9uXCJcblx0XHRcdFx0XHQ6ZGlzYWJsZWQ9XCJ0aGlzLmxvZ1R5cGUgPT09ICdncm91cEVuZCdcIlxuXHRcdFx0XHQ+XG5cdFx0XHRcdFx0UnVuXG5cdFx0XHRcdDwvYnV0dG9uPlxuXHRcdFx0PC9kaXY+XG5cblx0XHRcdDxkaXYgY2xhc3M9XCJjb2wteGwtOCBjb2wtbGctMTIgbXktMlwiIHYtaWY9XCJsb2dOb3RlXCI+XG5cdFx0XHRcdDxkaXZcblx0XHRcdFx0XHRjbGFzcz1cImFsZXJ0IGFsZXJ0LXByaW1hcnkgZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlciBtYi0wXCJcblx0XHRcdFx0XHRyb2xlPVwiYWxlcnRcIlxuXHRcdFx0XHRcdHYtaHRtbD1cImxvZ05vdGVcIlxuXHRcdFx0XHQ+PC9kaXY+XG5cdFx0XHQ8L2Rpdj5cblxuXHRcdFx0PGRpdiBjbGFzcz1cImNvbC14bC04IGNvbC1sZy0xMlwiPlxuXHRcdFx0XHQ8dnVlLWNvZGUtaGlnaGxpZ2h0IGxhbmd1YWdlPVwianNcIj5cblx0XHRcdFx0XHQ8cHJlPlxudGhpcy4kdW5pY29ybkxvZyh7XG5cdHRleHQ6ICdIZWxsbyBXb3JsZCcsXG5cdHR5cGU6ICdsb2cnLFxufSk7XG5cdFx0XHRcdFx0XHQ8L3ByZVxuXHRcdFx0XHRcdD5cblx0XHRcdFx0PC92dWUtY29kZS1oaWdobGlnaHQ+XG5cdFx0XHQ8L2Rpdj5cblx0XHQ8L2Rpdj5cblx0PC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IFZ1ZSBmcm9tICd2dWUnO1xuaW1wb3J0IFVuaWNvcm5Mb2cgZnJvbSAnQHBsdWdpbnMvVW5pY29ybkxvZyc7XG5pbXBvcnQgeyBjb21wb25lbnQgYXMgVnVlQ29kZUhpZ2hsaWdodCB9IGZyb20gJ3Z1ZS1jb2RlLWhpZ2hsaWdodCc7XG5cblZ1ZS51c2UoVW5pY29ybkxvZyk7XG5cbmV4cG9ydCBkZWZhdWx0IHtcblx0bmFtZTogJ1R5cGVFeGFtcGxlJyxcblx0Y29tcG9uZW50czoge1xuXHRcdFZ1ZUNvZGVIaWdobGlnaHQsXG5cdH0sXG5cdGRhdGE6ICgpID0+ICh7XG5cdFx0bG9nTm90ZTogJycsXG5cdFx0bG9nVHlwZTogJ2xvZycsXG5cdFx0dHlwZXM6IFtcblx0XHRcdCdjbGVhcicsXG5cdFx0XHQnZGVidWcnLFxuXHRcdFx0J2RpcicsXG5cdFx0XHQnZXJyb3InLFxuXHRcdFx0J2dyb3VwJyxcblx0XHRcdCdncm91cENvbGxhcHNlZCcsXG5cdFx0XHQnZ3JvdXBFbmQnLFxuXHRcdFx0J2luZm8nLFxuXHRcdFx0J2xvZycsXG5cdFx0XHQndGFibGUnLFxuXHRcdFx0J3RyYWNlJyxcblx0XHRcdCd3YXJuJyxcblx0XHRdLFxuXHR9KSxcblx0bWV0aG9kczoge1xuXHRcdGNoZWNrVHlwZSgpIHtcblx0XHRcdHRoaXMubG9nTm90ZSA9ICcnO1xuXG5cdFx0XHRjb25zdCBpY29uU3ZnID0gYFxuXHRcdFx0XHQ8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiBzdHlsZT1cImRpc3BsYXk6IG5vbmU7XCI+XG5cdFx0XHRcdFx0PHN5bWJvbCBpZD1cImluZm8tZmlsbFwiIGZpbGw9XCJjdXJyZW50Q29sb3JcIiB2aWV3Qm94PVwiMCAwIDE2IDE2XCI+XG5cdFx0XHRcdFx0XHQ8cGF0aCBkPVwiTTggMTZBOCA4IDAgMSAwIDggMGE4IDggMCAwIDAgMCAxNnptLjkzLTkuNDEyLTEgNC43MDVjLS4wNy4zNC4wMjkuNTMzLjMwNC41MzMuMTk0IDAgLjQ4Ny0uMDcuNjg2LS4yNDZsLS4wODguNDE2Yy0uMjg3LjM0Ni0uOTIuNTk4LTEuNDY1LjU5OC0uNzAzIDAtMS4wMDItLjQyMi0uODA4LTEuMzE5bC43MzgtMy40NjhjLjA2NC0uMjkzLjAwNi0uMzk5LS4yODctLjQ3bC0uNDUxLS4wODEuMDgyLS4zODEgMi4yOS0uMjg3ek04IDUuNWExIDEgMCAxIDEgMC0yIDEgMSAwIDAgMSAwIDJ6XCIvPlxuXHRcdFx0XHRcdDwvc3ltYm9sPlxuXHRcdFx0XHQ8L3N2Zz5cblx0XHRcdGA7XG5cblx0XHRcdGNvbnN0IGluZm9JY29uID0gYFxuXHRcdFx0JHtpY29uU3ZnfVxuXHRcdFx0IDxzdmcgY2xhc3M9XCJiaSBmbGV4LXNocmluay0wIG1lLTJcIiB3aWR0aD1cIjI0XCIgaGVpZ2h0PVwiMjRcIiByb2xlPVwiaW1nXCIgYXJpYS1sYWJlbD1cIkluZm86XCI+PHVzZSB4bGluazpocmVmPVwiI2luZm8tZmlsbFwiPjwvdXNlPjwvc3ZnPlxuXHRcdFx0YDtcblxuXHRcdFx0aWYgKHRoaXMubG9nVHlwZSA9PT0gJ2RpcicgfHwgdGhpcy5sb2dUeXBlID09PSAndGFibGUnKSB7XG5cdFx0XHRcdHRoaXMubG9nTm90ZSA9IGAke2luZm9JY29ufTxkaXY+Q29uc29sZSBtZXRob2QgPGNvZGU+JHt0aGlzLmxvZ1R5cGV9PC9jb2RlPiB3aWxsIHdvcmssIGJ1dCBkb2VzIG5vdCBzdXBwb3J0IGNvbG9ycy48L2Rpdj5gO1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cblx0XHRcdGlmICh0aGlzLmxvZ1R5cGUgPT09ICdncm91cEVuZCcpIHtcblx0XHRcdFx0dGhpcy5sb2dOb3RlID0gYCR7aW5mb0ljb259PGRpdj48Y29kZT5ncm91cEVuZDwvY29kZT4gb25seSB3b3JrcyB3aGVuIHVzZWQgd2l0aCA8Y29kZT5ncm91cDwvY29kZT4gb3IgPGNvZGU+Z3JvdXBDb2xsYXBzZWQ8L2NvZGU+PGRpdj5gO1xuXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0sXG5cdFx0c2ltcGxlRXhhbXBsZSgpIHtcblx0XHRcdGlmICh0aGlzLmxvZ1R5cGUgPT09ICdkaXInKSB7XG5cdFx0XHRcdHRoaXMuJHVuaWNvcm5Mb2coe1xuXHRcdFx0XHRcdHRleHQ6ICdIZWxsbyBXb3JsZCcsXG5cdFx0XHRcdFx0dHlwZTogJ2RpcicsXG5cdFx0XHRcdFx0b2JqZWN0czogeyBmb286ICdiYXInIH0sXG5cdFx0XHRcdH0pO1xuXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKHRoaXMubG9nVHlwZSA9PT0gJ3RhYmxlJykge1xuXHRcdFx0XHR0aGlzLiR1bmljb3JuTG9nKHtcblx0XHRcdFx0XHR0ZXh0OiAnSGVsbG8gV29ybGQnLFxuXHRcdFx0XHRcdHR5cGU6IHRoaXMubG9nVHlwZSxcblx0XHRcdFx0XHRhcnJheTogW3sgZm9vOiAnZm9vJyB9LCB7IGZvbzogJ2JhcicgfV0sXG5cdFx0XHRcdH0pO1xuXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKHRoaXMubG9nVHlwZSA9PT0gJ2RlYnVnJykge1xuXHRcdFx0XHR0aGlzLiR1bmljb3JuTG9nKHtcblx0XHRcdFx0XHR0ZXh0OiAnSGVsbG8gV29ybGQnLFxuXHRcdFx0XHRcdHR5cGU6IHRoaXMubG9nVHlwZSxcblx0XHRcdFx0XHRhcnJheTogW3sgZm9vOiAnZm9vJyB9LCB7IGZvbzogJ2JhcicgfV0sXG5cdFx0XHRcdH0pO1xuXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKHRoaXMubG9nVHlwZSA9PT0gJ2dyb3VwJyB8fCB0aGlzLmxvZ1R5cGUgPT09ICdncm91cENvbGxhcHNlZCcpIHtcblx0XHRcdFx0dGhpcy4kdW5pY29ybkxvZyh7XG5cdFx0XHRcdFx0dGV4dDogYCR7dGhpcy5sb2dUeXBlfWAsXG5cdFx0XHRcdFx0dHlwZTogdGhpcy5sb2dUeXBlLFxuXHRcdFx0XHR9KTtcblxuXHRcdFx0XHR0aGlzLiR1bmljb3JuTG9nKHtcblx0XHRcdFx0XHR0ZXh0OiAnRm9vJyxcblx0XHRcdFx0XHR0eXBlOiAnbG9nJyxcblx0XHRcdFx0fSk7XG5cblx0XHRcdFx0dGhpcy4kdW5pY29ybkxvZyh7XG5cdFx0XHRcdFx0dGV4dDogJ0JhcicsXG5cdFx0XHRcdFx0dHlwZTogJ2xvZycsXG5cdFx0XHRcdH0pO1xuXG5cdFx0XHRcdHRoaXMuJHVuaWNvcm5Mb2coe1xuXHRcdFx0XHRcdHR5cGU6ICdncm91cEVuZCcsXG5cdFx0XHRcdFx0YXJyYXk6IFt7IGZvbzogJ2ZvbycgfSwgeyBmb286ICdiYXInIH1dLFxuXHRcdFx0XHR9KTtcblxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuJHVuaWNvcm5Mb2coe1xuXHRcdFx0XHR0ZXh0OiAnSGVsbG8gV29ybGQnLFxuXHRcdFx0XHR0eXBlOiB0aGlzLmxvZ1R5cGUsXG5cdFx0XHR9KTtcblxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0sXG5cdH0sXG59O1xuPC9zY3JpcHQ+XG4iLCI8dGVtcGxhdGU+XG5cdDxkaXY+XG5cdFx0PE5hdiAvPlxuXG5cdFx0PGRpdiBjbGFzcz1cImNvbnRhaW5lciBtYi01XCI+XG5cdFx0XHQ8ZGl2IGNsYXNzPVwicm93IG1iLTNcIj5cblx0XHRcdFx0PGRpdiBjbGFzcz1cImNvbC0xMiB0ZXh0LWNlbnRlclwiPlxuXHRcdFx0XHRcdDxoMSBjbGFzcz1cInJhaW5ib3ctdGV4dFwiPlZ1ZSBVbmljb3JuIExvZzwvaDE+XG5cdFx0XHRcdDwvZGl2PlxuXHRcdFx0PC9kaXY+XG5cblx0XHRcdDxkaXYgY2xhc3M9XCJyb3dcIj5cblx0XHRcdFx0PGRpdiBjbGFzcz1cImNvbC0xMiBtYi00XCI+XG5cdFx0XHRcdFx0PGgzIGNsYXNzPVwidGV4dC1jZW50ZXIgbWItNFwiPlxuXHRcdFx0XHRcdFx0QSA8c3BhbiBjbGFzcz1cInJhaW5ib3ctdGV4dFwiPm1hZ2ljYWw8L3NwYW4+IPCfpoQgcGx1Z2luIHRvIG1ha2Vcblx0XHRcdFx0XHRcdGNvbG9yaW5nIHRoZSBjb25zb2xlIG91dHB1dCBlYXNpZXIgYW5kIG1vcmUgZmxleGlibGUuXG5cdFx0XHRcdFx0PC9oMz5cblx0XHRcdFx0XHQ8cD5cblx0XHRcdFx0XHRcdFNvbWV0aW1lcyB3aGVuIGJ1aWxkaW5nIHlvdXIgYXBwbGljYXRpb24vc2l0ZSB5b3UgZG9uJ3Qgd2FudCB0byBzZWVcblx0XHRcdFx0XHRcdHlvdXIgbGludGVyIGNvbXBsYWluaW5nIGFib3V0IHVzaW5nIGNvbnNvbGUgZnVuY3Rpb25zLiBUaGlzIGhlbHBzIHRvXG5cdFx0XHRcdFx0XHRrZWVwIHlvdXIgbGludGVyIGhhcHB5IHNvIHlvdSBjYW4gY29uY2VudHJhdGUgb24gd3JpdGluZyBidWcgZnJlZVxuXHRcdFx0XHRcdFx0bWFnaWNhbCBjb2RlLlxuXHRcdFx0XHRcdDwvcD5cblx0XHRcdFx0XHQ8cD5cblx0XHRcdFx0XHRcdEl0IGFsc28gaGFzIHRoZSBhYmlsaXR5IHRvIHJ1biB0aGUgY29uc29sZSBmdW5jdGlvbnMgZGVwZW5kaW5nIG9uXG5cdFx0XHRcdFx0XHRlbnZpcm9ubWVudCB2YXJpYWJsZXMgc28geW91IGNhbiBrZWVwIHlvdXIgcHJvZHVjdGlvbiBzaXRlJ3MgY29uc29sZVxuXHRcdFx0XHRcdFx0cXVpZXQuXG5cdFx0XHRcdFx0PC9wPlxuXHRcdFx0XHQ8L2Rpdj5cblxuXHRcdFx0XHQ8ZGl2IGNsYXNzPVwiY29sLTEyXCI+XG5cdFx0XHRcdFx0PGg1PkRlbW88L2g1PlxuXHRcdFx0XHQ8L2Rpdj5cblxuXHRcdFx0XHQ8ZGl2IGNsYXNzPVwiY29sLTEyXCI+XG5cdFx0XHRcdFx0T3BlbiBEZXZUb29scyBhbmQgY2xpY2sgb24gdGhlIFwiQ29uc29sZVwiIHRhYiBhbmQgdHJ5IG91dCBzb21lXG5cdFx0XHRcdFx0PGEgaHJlZj1cIiN1bC1leGFtcGxlc1wiPkV4YW1wbGVzPC9hPi5cblx0XHRcdFx0PC9kaXY+XG5cdFx0XHQ8L2Rpdj5cblx0XHQ8L2Rpdj5cblxuXHRcdDxkaXYgY2xhc3M9XCJjb250YWluZXJcIj5cblx0XHRcdDwhLS0gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSBJbnN0YWxsYXRpb24gLS0+XG5cdFx0XHQ8ZGl2IGNsYXNzPVwicm93IG1iLTVcIiBpZD1cInVsLWluc3RhbGxhdGlvblwiPlxuXHRcdFx0XHQ8ZGl2IGNsYXNzPVwiY29sLTEyXCI+XG5cdFx0XHRcdFx0PGgyPkluc3RhbGxhdGlvbjwvaDI+XG5cdFx0XHRcdDwvZGl2PlxuXG5cdFx0XHRcdDxkaXYgY2xhc3M9XCJjb2wteGwtOCBjb2wtbGctMTJcIj5cblx0XHRcdFx0XHQ8dnVlLWNvZGUtaGlnaGxpZ2h0IGxhbmd1YWdlPVwic2hlbGxcIj5cblx0XHRcdFx0XHRcdDxwcmU+XG5ucG0gaSAtRCB2dWUtdW5pY29ybi1sb2dcblx0XHRcdFx0XHRcdDwvcHJlXG5cdFx0XHRcdFx0XHQ+XG5cdFx0XHRcdFx0PC92dWUtY29kZS1oaWdobGlnaHQ+XG5cdFx0XHRcdDwvZGl2PlxuXHRcdFx0PC9kaXY+XG5cblx0XHRcdDwhLS0gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSBVc2FnZSAtLT5cblx0XHRcdDxkaXYgY2xhc3M9XCJyb3cgbWItNVwiIGlkPVwidWwtdXNhZ2VcIj5cblx0XHRcdFx0PGRpdiBjbGFzcz1cImNvbC0xMlwiPlxuXHRcdFx0XHRcdDxoMj5Vc2FnZTwvaDI+XG5cdFx0XHRcdDwvZGl2PlxuXG5cdFx0XHRcdDxkaXYgY2xhc3M9XCJjb2wteGwtOCBjb2wtbGctMTJcIj5cblx0XHRcdFx0XHQ8dnVlLWNvZGUtaGlnaGxpZ2h0IGxhbmd1YWdlPVwianNcIj5cblx0XHRcdFx0XHRcdDxwcmU+XG5pbXBvcnQgVnVlIGZyb20gJ3Z1ZSc7XG5pbXBvcnQgVW5pY29ybkxvZyBmcm9tICd2dWUtdW5pY29ybi1sb2cnO1xuXG5WdWUudXNlKFVuaWNvcm5Mb2cpO1xuXHRcdFx0XHRcdFx0XHRcdDwvcHJlXG5cdFx0XHRcdFx0XHQ+XG5cdFx0XHRcdFx0PC92dWUtY29kZS1oaWdobGlnaHQ+XG5cdFx0XHRcdDwvZGl2PlxuXHRcdFx0PC9kaXY+XG5cblx0XHRcdDwhLS0gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSBQbHVnaW4gT3B0aW9ucyAtLT5cblx0XHRcdDxkaXYgY2xhc3M9XCJyb3cgbWItNVwiIGlkPVwidWwtcGx1Z2luLW9wdGlvbnNcIj5cblx0XHRcdFx0PGRpdiBjbGFzcz1cImNvbC0xMiBtYi0zXCI+XG5cdFx0XHRcdFx0PGgyPlBsdWdpbiBPcHRpb25zPC9oMj5cblx0XHRcdFx0PC9kaXY+XG5cblx0XHRcdFx0PGRpdiBjbGFzcz1cImNvbC0xMiBtYi0zXCI+XG5cdFx0XHRcdFx0PGRpdiBjbGFzcz1cInRhYmxlLXJlc3BvbnNpdmVcIj5cblx0XHRcdFx0XHRcdDx0YWJsZSBjbGFzcz1cInRhYmxlIHRhYmxlLXN0cmlwZWQgdGFibGUtYm9yZGVyZWRcIj5cblx0XHRcdFx0XHRcdFx0PHRoZWFkPlxuXHRcdFx0XHRcdFx0XHRcdDx0cj5cblx0XHRcdFx0XHRcdFx0XHRcdDx0aD5OYW1lPC90aD5cblx0XHRcdFx0XHRcdFx0XHRcdDx0aD5UeXBlPC90aD5cblx0XHRcdFx0XHRcdFx0XHRcdDx0aD5EZWZhdWx0PC90aD5cblx0XHRcdFx0XHRcdFx0XHRcdDx0aD5PcHRpb25zPC90aD5cblx0XHRcdFx0XHRcdFx0XHRcdDx0aD5EZXNjcmlwdGlvbjwvdGg+XG5cdFx0XHRcdFx0XHRcdFx0PC90cj5cblx0XHRcdFx0XHRcdFx0PC90aGVhZD5cblx0XHRcdFx0XHRcdFx0PHRib2R5PlxuXHRcdFx0XHRcdFx0XHRcdDx0cj5cblx0XHRcdFx0XHRcdFx0XHRcdDx0ZCB2YWxpZ249XCJ0b3BcIj5kZWZhdWx0U3R5bGVzPC90ZD5cblx0XHRcdFx0XHRcdFx0XHRcdDx0ZCB2YWxpZ249XCJ0b3BcIiBjbGFzcz1cIm9wdGlvbi10eXBlXCI+T2JqZWN0PC90ZD5cblx0XHRcdFx0XHRcdFx0XHRcdDx0ZCB2YWxpZ249XCJ0b3BcIj5cblx0XHRcdFx0XHRcdFx0XHRcdFx0PGNvZGU+XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0PHByZT5cbmNvbnN0IHJhaW5ib3dMaW5lYXJHcmFkaWVudCA9IGBsaW5lYXItZ3JhZGllbnQodG8gcmlnaHQsXG5cdGhzbCgwLCAxMDAlLCA1MCUpLFxuXHRoc2woNjAsIDEwMCUsIDUwJSksXG5cdGhzbCgxMjAsIDEwMCUsIDUwJSksXG5cdGhzbCgxODAsIDEwMCUsIDUwJSksXG5cdGhzbCgyNDAsIDEwMCUsIDUwJSksXG5cdGhzbCgzMDAsIDEwMCUsIDUwJSksXG5cdGhzbCgzNjAsIDEwMCUsIDUwJSlcbilgO1xuXG5kZWZhdWx0U3R5bGVzOiB7XG5cdGxvZzogW1xuXHRcdCdiYWNrZ3JvdW5kLWNvbG9yOiBibGFjaycsXG5cdFx0YGJvcmRlci1pbWFnZTogJHtyYWluYm93TGluZWFyR3JhZGllbnR9IDFgLFxuXHRcdCdib3JkZXItc3R5bGU6IHNvbGlkJyxcblx0XHQnYm9yZGVyLXdpZHRoOiA0cHgnLFxuXHRcdCdjb2xvcjogI2ZmZicsXG5cdFx0J2ZvbnQtd2VpZ2h0OiBub3JtYWwnLFxuXHRcdCdwYWRkaW5nOiA4cHgnLFxuXHRdLFxuXHRpbmZvOiBbXG5cdFx0J2JhY2tncm91bmQtY29sb3I6IGhzbGEoMjI1LCAxMDAlLCA4JSwgMSknLFxuXHRcdCdib3gtc2hhZG93OiA5OTlweCAwIDAgaHNsYSgyMjUsIDEwMCUsIDglLCAxKScsXG5cdFx0J2NvbG9yOiBoc2xhKDIyNSwgMTAwJSwgODUlLCAxKScsXG5cdFx0J2Rpc3BsYXk6IGJsb2NrJyxcblx0XHQncGFkZGluZzogMnB4Jyxcblx0XSxcbn08L3ByZVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdD5cblx0XHRcdFx0XHRcdFx0XHRcdFx0PC9jb2RlPlxuXHRcdFx0XHRcdFx0XHRcdFx0PC90ZD5cblx0XHRcdFx0XHRcdFx0XHRcdDx0ZCB2YWxpZ249XCJ0b3BcIj5cblx0XHRcdFx0XHRcdFx0XHRcdFx0PGNvZGU+XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0PHByZT5cbntcblx0bG9nOiBbXSxcblx0aW5mbzogW10sXG59PC9wcmVcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ+XG5cdFx0XHRcdFx0XHRcdFx0XHRcdDwvY29kZT5cblx0XHRcdFx0XHRcdFx0XHRcdDwvdGQ+XG5cdFx0XHRcdFx0XHRcdFx0XHQ8dGQgdmFsaWduPVwidG9wXCI+e3sgY29weS5kZWZhdWx0U3R5bGVzIH19PC90ZD5cblx0XHRcdFx0XHRcdFx0XHQ8L3RyPlxuXHRcdFx0XHRcdFx0XHRcdDx0cj5cblx0XHRcdFx0XHRcdFx0XHRcdDx0ZCB2YWxpZ249XCJ0b3BcIj5kaXNhYmxlZDwvdGQ+XG5cdFx0XHRcdFx0XHRcdFx0XHQ8dGQgdmFsaWduPVwidG9wXCIgY2xhc3M9XCJvcHRpb24tdHlwZVwiPkJvb2xlYW48L3RkPlxuXHRcdFx0XHRcdFx0XHRcdFx0PHRkIHZhbGlnbj1cInRvcFwiIGNsYXNzPVwiYm9vbGVhbi1zdHlsZVwiPmZhbHNlPC90ZD5cblx0XHRcdFx0XHRcdFx0XHRcdDx0ZCB2YWxpZ249XCJ0b3BcIiB2LWh0bWw9XCJvcHRpb25zLmJvb2xlYW5cIj48L3RkPlxuXHRcdFx0XHRcdFx0XHRcdFx0PHRkIHZhbGlnbj1cInRvcFwiPnt7IGNvcHkuZGlzYWJsZWQgfX08L3RkPlxuXHRcdFx0XHRcdFx0XHRcdDwvdHI+XG5cdFx0XHRcdFx0XHRcdFx0PHRyPlxuXHRcdFx0XHRcdFx0XHRcdFx0PHRkIHZhbGlnbj1cInRvcFwiPmxvZ1ByZWZpeDwvdGQ+XG5cdFx0XHRcdFx0XHRcdFx0XHQ8dGQgdmFsaWduPVwidG9wXCIgY2xhc3M9XCJvcHRpb24tdHlwZVwiPkJvb2xlYW4gfCBTdHJpbmc8L3RkPlxuXHRcdFx0XHRcdFx0XHRcdFx0PHRkIHZhbGlnbj1cInRvcFwiIGNsYXNzPVwiYm9vbGVhbi1zdHlsZVwiPmZhbHNlPC90ZD5cblx0XHRcdFx0XHRcdFx0XHRcdDx0ZCB2YWxpZ249XCJ0b3BcIj4tPC90ZD5cblx0XHRcdFx0XHRcdFx0XHRcdDx0ZCB2YWxpZ249XCJ0b3BcIj57eyBjb3B5LmxvZ1ByZWZpeCB9fTwvdGQ+XG5cdFx0XHRcdFx0XHRcdFx0PC90cj5cblx0XHRcdFx0XHRcdFx0XHQ8dHI+XG5cdFx0XHRcdFx0XHRcdFx0XHQ8dGQgdmFsaWduPVwidG9wXCI+c3R5bGVzPC90ZD5cblx0XHRcdFx0XHRcdFx0XHRcdDx0ZCB2YWxpZ249XCJ0b3BcIiBjbGFzcz1cIm9wdGlvbi10eXBlXCI+U3RyaW5nIHwgQXJyYXk8L3RkPlxuXHRcdFx0XHRcdFx0XHRcdFx0PHRkIHZhbGlnbj1cInRvcFwiPi08L3RkPlxuXHRcdFx0XHRcdFx0XHRcdFx0PHRkIHZhbGlnbj1cInRvcFwiIHYtaHRtbD1cIm9wdGlvbnMuc3R5bGVzXCI+PC90ZD5cblx0XHRcdFx0XHRcdFx0XHRcdDx0ZCB2YWxpZ249XCJ0b3BcIj57eyBjb3B5LnN0eWxlcyB9fTwvdGQ+XG5cdFx0XHRcdFx0XHRcdFx0PC90cj5cblx0XHRcdFx0XHRcdFx0XHQ8dHI+XG5cdFx0XHRcdFx0XHRcdFx0XHQ8dGQgdmFsaWduPVwidG9wXCI+dHlwZTwvdGQ+XG5cdFx0XHRcdFx0XHRcdFx0XHQ8dGQgdmFsaWduPVwidG9wXCIgY2xhc3M9XCJvcHRpb24tdHlwZVwiPlN0cmluZzwvdGQ+XG5cdFx0XHRcdFx0XHRcdFx0XHQ8dGQgdmFsaWduPVwidG9wXCI+bG9nPC90ZD5cblx0XHRcdFx0XHRcdFx0XHRcdDx0ZCB2YWxpZ249XCJ0b3BcIiB2LWh0bWw9XCJvcHRpb25zLnR5cGVcIj48L3RkPlxuXHRcdFx0XHRcdFx0XHRcdFx0PHRkIHZhbGlnbj1cInRvcFwiPnt7IGNvcHkudHlwZSB9fTwvdGQ+XG5cdFx0XHRcdFx0XHRcdFx0PC90cj5cblx0XHRcdFx0XHRcdFx0PC90Ym9keT5cblx0XHRcdFx0XHRcdDwvdGFibGU+XG5cdFx0XHRcdFx0PC9kaXY+XG5cdFx0XHRcdDwvZGl2PlxuXG5cdFx0XHRcdDwhLS0gPT09PT09PT09PT09PT09PT09PT09PT0gUGx1Z2luIE9wdGlvbiBPdmVycmlkaW5nIC0tPlxuXHRcdFx0XHQ8ZGl2IGNsYXNzPVwiY29sLTEyXCI+XG5cdFx0XHRcdFx0PGg1Pk92ZXJyaWRpbmcgdGhlIHBsdWdpbiBkZWZhdWx0IG9wdGlvbnM8L2g1PlxuXHRcdFx0XHQ8L2Rpdj5cblxuXHRcdFx0XHQ8ZGl2IGNsYXNzPVwiY29sLXhsLTggY29sLWxnLTEyXCI+XG5cdFx0XHRcdFx0PHZ1ZS1jb2RlLWhpZ2hsaWdodCBsYW5ndWFnZT1cImpzXCI+XG5cdFx0XHRcdFx0XHQ8cHJlPlxuaW1wb3J0IFZ1ZSBmcm9tICd2dWUnO1xuaW1wb3J0IFVuaWNvcm5Mb2cgZnJvbSAndnVlLXVuaWNvcm4tbG9nJztcblxuVnVlLnVzZShVbmljb3JuTG9nLCB7XG4gIGRlZmF1bHRTdHlsZXM6IHt9LFxuICBkaXNhYmxlZDogcHJvY2Vzcy5lbnYuVU5JQ09STl9MT0cgIT09ICd0cnVlJyxcbiAgbG9nUHJlZml4OiAnW09NRyBMT09LIEhFUkUhXScsXG4gIHN0eWxlczogJ2ZvbnQtd2VpZ2h0OiBib2xkOycsXG4gIHR5cGU6ICdpbmZvJ1xufSk7XG5cdFx0XHRcdFx0XHRcdFx0PC9wcmVcblx0XHRcdFx0XHRcdD5cblx0XHRcdFx0XHQ8L3Z1ZS1jb2RlLWhpZ2hsaWdodD5cblx0XHRcdFx0PC9kaXY+XG5cblx0XHRcdFx0PGRpdiBjbGFzcz1cImNvbC0xMlwiPlxuXHRcdFx0XHRcdDxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHN0eWxlPVwiZGlzcGxheTogbm9uZVwiPlxuXHRcdFx0XHRcdFx0PHN5bWJvbFxuXHRcdFx0XHRcdFx0XHRpZD1cImV4Y2xhbWF0aW9uLXRyaWFuZ2xlLWZpbGxcIlxuXHRcdFx0XHRcdFx0XHRmaWxsPVwiY3VycmVudENvbG9yXCJcblx0XHRcdFx0XHRcdFx0dmlld0JveD1cIjAgMCAxNiAxNlwiXG5cdFx0XHRcdFx0XHQ+XG5cdFx0XHRcdFx0XHRcdDxwYXRoXG5cdFx0XHRcdFx0XHRcdFx0ZD1cIk04Ljk4MiAxLjU2NmExLjEzIDEuMTMgMCAwIDAtMS45NiAwTC4xNjUgMTMuMjMzYy0uNDU3Ljc3OC4wOTEgMS43NjcuOTggMS43NjdoMTMuNzEzYy44ODkgMCAxLjQzOC0uOTkuOTgtMS43NjdMOC45ODIgMS41NjZ6TTggNWMuNTM1IDAgLjk1NC40NjIuOS45OTVsLS4zNSAzLjUwN2EuNTUyLjU1MiAwIDAgMS0xLjEgMEw3LjEgNS45OTVBLjkwNS45MDUgMCAwIDEgOCA1em0uMDAyIDZhMSAxIDAgMSAxIDAgMiAxIDEgMCAwIDEgMC0yelwiXG5cdFx0XHRcdFx0XHRcdC8+XG5cdFx0XHRcdFx0XHQ8L3N5bWJvbD5cblx0XHRcdFx0XHQ8L3N2Zz5cblxuXHRcdFx0XHRcdDxkaXZcblx0XHRcdFx0XHRcdGNsYXNzPVwiYWxlcnQgYWxlcnQtcHJpbWFyeSBkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyIG15LTJcIlxuXHRcdFx0XHRcdFx0cm9sZT1cImFsZXJ0XCJcblx0XHRcdFx0XHQ+XG5cdFx0XHRcdFx0XHQ8c3ZnXG5cdFx0XHRcdFx0XHRcdGNsYXNzPVwiYmkgZmxleC1zaHJpbmstMCBtZS0yXCJcblx0XHRcdFx0XHRcdFx0d2lkdGg9XCIyNFwiXG5cdFx0XHRcdFx0XHRcdGhlaWdodD1cIjI0XCJcblx0XHRcdFx0XHRcdFx0cm9sZT1cImltZ1wiXG5cdFx0XHRcdFx0XHRcdGFyaWEtbGFiZWw9XCJJbmZvOlwiXG5cdFx0XHRcdFx0XHQ+XG5cdFx0XHRcdFx0XHRcdDx1c2UgeGxpbms6aHJlZj1cIiNleGNsYW1hdGlvbi10cmlhbmdsZS1maWxsXCI+PC91c2U+XG5cdFx0XHRcdFx0XHQ8L3N2Zz5cblx0XHRcdFx0XHRcdDxkaXY+XG5cdFx0XHRcdFx0XHRcdEl0IGlzIHJlY29tbWVuZGVkIHRvIHNldCB0aGUgPGNvZGU+ZGlzYWJsZWQ8L2NvZGU+IG9wdGlvbiB0byB1c2UgYVxuXHRcdFx0XHRcdFx0XHQ8c3BhbiBjbGFzcz1cImZzdC1pdGFsaWNcIj4uZW52PC9zcGFuPiB2YXJpYWJsZSB3aGVuIHBvc3NpYmxlLiBUaGlzXG5cdFx0XHRcdFx0XHRcdHdheSB5b3Ugd2lsbCBub3QgaGF2ZSB5b3VyIGxvZ3MgZXhwb3NlZCB0byB0aGUgcHVibGljIHdoZW4gb24gYVxuXHRcdFx0XHRcdFx0XHRwcm9kdWN0aW9uIHNpdGUuXG5cdFx0XHRcdFx0XHQ8L2Rpdj5cblx0XHRcdFx0XHQ8L2Rpdj5cblx0XHRcdFx0PC9kaXY+XG5cdFx0XHQ8L2Rpdj5cblxuXHRcdFx0PCEtLSA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IExvZyBPcHRpb25zIC0tPlxuXHRcdFx0PGRpdiBjbGFzcz1cInJvdyBtYi01XCIgaWQ9XCJ1bC1sb2ctb3B0aW9uc1wiPlxuXHRcdFx0XHQ8ZGl2IGNsYXNzPVwiY29sLTEyIG1iLTNcIj5cblx0XHRcdFx0XHQ8aDI+TG9nIE9wdGlvbnM8L2gyPlxuXHRcdFx0XHQ8L2Rpdj5cblxuXHRcdFx0XHQ8ZGl2IGNsYXNzPVwiY29sLWxnLTEyXCI+XG5cdFx0XHRcdFx0PGRpdiBjbGFzcz1cInRhYmxlLXJlc3BvbnNpdmVcIj5cblx0XHRcdFx0XHRcdDx0YWJsZSBjbGFzcz1cInRhYmxlIHRhYmxlLXN0cmlwZWQgdGFibGUtYm9yZGVyZWRcIj5cblx0XHRcdFx0XHRcdFx0PHRoZWFkPlxuXHRcdFx0XHRcdFx0XHRcdDx0cj5cblx0XHRcdFx0XHRcdFx0XHRcdDx0aD5OYW1lPC90aD5cblx0XHRcdFx0XHRcdFx0XHRcdDx0aD5UeXBlPC90aD5cblx0XHRcdFx0XHRcdFx0XHRcdDx0aD5EZWZhdWx0PC90aD5cblx0XHRcdFx0XHRcdFx0XHRcdDx0aD5PcHRpb25zPC90aD5cblx0XHRcdFx0XHRcdFx0XHRcdDx0aD5EZXNjcmlwdGlvbjwvdGg+XG5cdFx0XHRcdFx0XHRcdFx0PC90cj5cblx0XHRcdFx0XHRcdFx0PC90aGVhZD5cblx0XHRcdFx0XHRcdFx0PHRib2R5PlxuXHRcdFx0XHRcdFx0XHRcdDx0cj5cblx0XHRcdFx0XHRcdFx0XHRcdDx0ZCB2YWxpZ249XCJ0b3BcIj5hcnJheTwvdGQ+XG5cdFx0XHRcdFx0XHRcdFx0XHQ8dGQgdmFsaWduPVwidG9wXCIgY2xhc3M9XCJvcHRpb24tdHlwZVwiPkFycmF5PC90ZD5cblx0XHRcdFx0XHRcdFx0XHRcdDx0ZCB2YWxpZ249XCJ0b3BcIj48Y29kZT5bXTwvY29kZT48L3RkPlxuXHRcdFx0XHRcdFx0XHRcdFx0PHRkIHZhbGlnbj1cInRvcFwiPi08L3RkPlxuXHRcdFx0XHRcdFx0XHRcdFx0PHRkIHZhbGlnbj1cInRvcFwiPnt7IGNvcHkuYXJyYXkgfX08L3RkPlxuXHRcdFx0XHRcdFx0XHRcdDwvdHI+XG5cdFx0XHRcdFx0XHRcdFx0PHRyPlxuXHRcdFx0XHRcdFx0XHRcdFx0PHRkIHZhbGlnbj1cInRvcFwiPmRpc2FibGVkPC90ZD5cblx0XHRcdFx0XHRcdFx0XHRcdDx0ZCB2YWxpZ249XCJ0b3BcIiBjbGFzcz1cIm9wdGlvbi10eXBlXCI+Qm9vbGVhbjwvdGQ+XG5cdFx0XHRcdFx0XHRcdFx0XHQ8dGQgdmFsaWduPVwidG9wXCIgY2xhc3M9XCJib29sZWFuLXN0eWxlXCI+ZmFsc2U8L3RkPlxuXHRcdFx0XHRcdFx0XHRcdFx0PHRkIHZhbGlnbj1cInRvcFwiIHYtaHRtbD1cIm9wdGlvbnMuYm9vbGVhblwiPjwvdGQ+XG5cdFx0XHRcdFx0XHRcdFx0XHQ8dGQgdmFsaWduPVwidG9wXCI+e3sgY29weS5kaXNhYmxlZCB9fTwvdGQ+XG5cdFx0XHRcdFx0XHRcdFx0PC90cj5cblx0XHRcdFx0XHRcdFx0XHQ8dHI+XG5cdFx0XHRcdFx0XHRcdFx0XHQ8dGQgdmFsaWduPVwidG9wXCI+bG9nUHJlZml4PC90ZD5cblx0XHRcdFx0XHRcdFx0XHRcdDx0ZCB2YWxpZ249XCJ0b3BcIiBjbGFzcz1cIm9wdGlvbi10eXBlXCI+Qm9vbGVhbiB8IFN0cmluZzwvdGQ+XG5cdFx0XHRcdFx0XHRcdFx0XHQ8dGQgdmFsaWduPVwidG9wXCIgY2xhc3M9XCJib29sZWFuLXN0eWxlXCI+ZmFsc2U8L3RkPlxuXHRcdFx0XHRcdFx0XHRcdFx0PHRkIHZhbGlnbj1cInRvcFwiPi08L3RkPlxuXHRcdFx0XHRcdFx0XHRcdFx0PHRkIHZhbGlnbj1cInRvcFwiPnt7IGNvcHkubG9nUHJlZml4IH19PC90ZD5cblx0XHRcdFx0XHRcdFx0XHQ8L3RyPlxuXHRcdFx0XHRcdFx0XHRcdDx0cj5cblx0XHRcdFx0XHRcdFx0XHRcdDx0ZCB2YWxpZ249XCJ0b3BcIj5tYWdpY2FsPC90ZD5cblx0XHRcdFx0XHRcdFx0XHRcdDx0ZCB2YWxpZ249XCJ0b3BcIiBjbGFzcz1cIm9wdGlvbi10eXBlXCI+Qm9vbGVhbjwvdGQ+XG5cdFx0XHRcdFx0XHRcdFx0XHQ8dGQgdmFsaWduPVwidG9wXCIgY2xhc3M9XCJib29sZWFuLXN0eWxlXCI+ZmFsc2U8L3RkPlxuXHRcdFx0XHRcdFx0XHRcdFx0PHRkIHZhbGlnbj1cInRvcFwiIHYtaHRtbD1cIm9wdGlvbnMuYm9vbGVhblwiPjwvdGQ+XG5cdFx0XHRcdFx0XHRcdFx0XHQ8dGQgdmFsaWduPVwidG9wXCI+e3sgY29weS5tYWdpY2FsIH19PC90ZD5cblx0XHRcdFx0XHRcdFx0XHQ8L3RyPlxuXHRcdFx0XHRcdFx0XHRcdDx0cj5cblx0XHRcdFx0XHRcdFx0XHRcdDx0ZCB2YWxpZ249XCJ0b3BcIj5uYW1lPC90ZD5cblx0XHRcdFx0XHRcdFx0XHRcdDx0ZCB2YWxpZ249XCJ0b3BcIiBjbGFzcz1cIm9wdGlvbi10eXBlXCI+U3RyaW5nPC90ZD5cblx0XHRcdFx0XHRcdFx0XHRcdDx0ZCB2YWxpZ249XCJ0b3BcIj5bVW5pY29ybkxvZ106PC90ZD5cblx0XHRcdFx0XHRcdFx0XHRcdDx0ZCB2YWxpZ249XCJ0b3BcIj4tPC90ZD5cblx0XHRcdFx0XHRcdFx0XHRcdDx0ZCB2YWxpZ249XCJ0b3BcIj5cblx0XHRcdFx0XHRcdFx0XHRcdFx0SWYgPGNvZGU+bG9nUHJlZml4PC9jb2RlPiBvcHRpb24gaXMgc2V0IGFzIGFcblx0XHRcdFx0XHRcdFx0XHRcdFx0PHNwYW4gY2xhc3M9XCJvcHRpb24tdHlwZVwiPkJvb2xlYW48L3NwYW4+IG9mXG5cdFx0XHRcdFx0XHRcdFx0XHRcdDxzcGFuIGNsYXNzPVwiYm9vbGVhbi1zdHlsZVwiPnRydWU8L3NwYW4+LCBpdCB3aWxsIHVzZSB0aGVcblx0XHRcdFx0XHRcdFx0XHRcdFx0PGNvZGU+bmFtZTwvY29kZT4gb3B0aW9uIGZvciB0aGUgcHJlZml4LlxuXHRcdFx0XHRcdFx0XHRcdFx0PC90ZD5cblx0XHRcdFx0XHRcdFx0XHQ8L3RyPlxuXHRcdFx0XHRcdFx0XHRcdDx0cj5cblx0XHRcdFx0XHRcdFx0XHRcdDx0ZCB2YWxpZ249XCJ0b3BcIj5vYmplY3RzPC90ZD5cblx0XHRcdFx0XHRcdFx0XHRcdDx0ZCB2YWxpZ249XCJ0b3BcIiBjbGFzcz1cIm9wdGlvbi10eXBlXCI+T2JqZWN0PC90ZD5cblx0XHRcdFx0XHRcdFx0XHRcdDx0ZCB2YWxpZ249XCJ0b3BcIj48Y29kZT57fTwvY29kZT48L3RkPlxuXHRcdFx0XHRcdFx0XHRcdFx0PHRkIHZhbGlnbj1cInRvcFwiPi08L3RkPlxuXHRcdFx0XHRcdFx0XHRcdFx0PHRkIHZhbGlnbj1cInRvcFwiPnt7IGNvcHkub2JqZWN0IH19PC90ZD5cblx0XHRcdFx0XHRcdFx0XHQ8L3RyPlxuXHRcdFx0XHRcdFx0XHRcdDx0cj5cblx0XHRcdFx0XHRcdFx0XHRcdDx0ZCB2YWxpZ249XCJ0b3BcIj5zdHlsZXM8L3RkPlxuXHRcdFx0XHRcdFx0XHRcdFx0PHRkIHZhbGlnbj1cInRvcFwiIGNsYXNzPVwib3B0aW9uLXR5cGVcIj5TdHJpbmcgfCBBcnJheTwvdGQ+XG5cdFx0XHRcdFx0XHRcdFx0XHQ8dGQgdmFsaWduPVwidG9wXCI+LTwvdGQ+XG5cdFx0XHRcdFx0XHRcdFx0XHQ8dGQgdmFsaWduPVwidG9wXCIgdi1odG1sPVwib3B0aW9ucy5zdHlsZXNcIj48L3RkPlxuXHRcdFx0XHRcdFx0XHRcdFx0PHRkIHZhbGlnbj1cInRvcFwiPnt7IGNvcHkuc3R5bGVzIH19PC90ZD5cblx0XHRcdFx0XHRcdFx0XHQ8L3RyPlxuXHRcdFx0XHRcdFx0XHRcdDx0cj5cblx0XHRcdFx0XHRcdFx0XHRcdDx0ZCB2YWxpZ249XCJ0b3BcIj50ZXh0PC90ZD5cblx0XHRcdFx0XHRcdFx0XHRcdDx0ZCB2YWxpZ249XCJ0b3BcIiBjbGFzcz1cIm9wdGlvbi10eXBlXCI+U3RyaW5nPC90ZD5cblx0XHRcdFx0XHRcdFx0XHRcdDx0ZCB2YWxpZ249XCJ0b3BcIj7wn6aEPC90ZD5cblx0XHRcdFx0XHRcdFx0XHRcdDx0ZCB2YWxpZ249XCJ0b3BcIj4tPC90ZD5cblx0XHRcdFx0XHRcdFx0XHRcdDx0ZCB2YWxpZ249XCJ0b3BcIj57eyBjb3B5LnRleHQgfX08L3RkPlxuXHRcdFx0XHRcdFx0XHRcdDwvdHI+XG5cdFx0XHRcdFx0XHRcdFx0PHRyPlxuXHRcdFx0XHRcdFx0XHRcdFx0PHRkIHZhbGlnbj1cInRvcFwiPnR5cGU8L3RkPlxuXHRcdFx0XHRcdFx0XHRcdFx0PHRkIHZhbGlnbj1cInRvcFwiIGNsYXNzPVwib3B0aW9uLXR5cGVcIj5TdHJpbmc8L3RkPlxuXHRcdFx0XHRcdFx0XHRcdFx0PHRkIHZhbGlnbj1cInRvcFwiPmxvZzwvdGQ+XG5cdFx0XHRcdFx0XHRcdFx0XHQ8dGQgdmFsaWduPVwidG9wXCIgdi1odG1sPVwib3B0aW9ucy50eXBlXCI+PC90ZD5cblx0XHRcdFx0XHRcdFx0XHRcdDx0ZCB2YWxpZ249XCJ0b3BcIj57eyBjb3B5LnR5cGUgfX08L3RkPlxuXHRcdFx0XHRcdFx0XHRcdDwvdHI+XG5cdFx0XHRcdFx0XHRcdDwvdGJvZHk+XG5cdFx0XHRcdFx0XHQ8L3RhYmxlPlxuXHRcdFx0XHRcdDwvZGl2PlxuXHRcdFx0XHQ8L2Rpdj5cblx0XHRcdDwvZGl2PlxuXG5cdFx0XHQ8IS0tID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gSW5zdGFuY2UgTWV0aG9kcyAtLT5cblx0XHRcdDxkaXYgY2xhc3M9XCJyb3cgbWItNVwiIGlkPVwidWwtaW5zdGFuY2UtbWV0aG9kc1wiPlxuXHRcdFx0XHQ8ZGl2IGNsYXNzPVwiY29sLTEyXCI+XG5cdFx0XHRcdFx0PGgyPkluc3RhbmNlIE1ldGhvZHM8L2gyPlxuXHRcdFx0XHQ8L2Rpdj5cblxuXHRcdFx0XHQ8ZGl2IGNsYXNzPVwiY29sLTEyXCI+XG5cdFx0XHRcdFx0VGhlcmUgYXJlIHR3byBpbnN0YW5jZSBtZXRob2RzIGF2YWlsYWJsZSB0byB1c2U6XG5cdFx0XHRcdFx0PGJyIC8+XG5cdFx0XHRcdFx0PGNvZGU+JHVuaWNvcm5Mb2c8L2NvZGU+XG5cdFx0XHRcdFx0PGJyIC8+XG5cdFx0XHRcdFx0PGNvZGU+JHVuaUxvZzwvY29kZT5cblx0XHRcdFx0PC9kaXY+XG5cdFx0XHQ8L2Rpdj5cblxuXHRcdFx0PCEtLSA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IENvbnNvbGUgTWV0aG9kcyAtLT5cblx0XHRcdDxkaXYgY2xhc3M9XCJyb3cgbWItNVwiIGlkPVwidWwtY29uc29sZS1tZXRob2RzXCI+XG5cdFx0XHRcdDxkaXYgY2xhc3M9XCJjb2wtMTJcIj5cblx0XHRcdFx0XHQ8aDI+Q29uc29sZSBNZXRob2RzPC9oMj5cblx0XHRcdFx0PC9kaXY+XG5cblx0XHRcdFx0PGRpdiBjbGFzcz1cImNvbC0xMlwiPlxuXHRcdFx0XHRcdEZvciBhIGRlc2NyaXB0aW9uIG9mIHRoZSBkaWZmZXJlbnQgbG9nIG1ldGhvZHMsIHJlZmVyIHRvIHRoZVxuXHRcdFx0XHRcdDxhXG5cdFx0XHRcdFx0XHRocmVmPVwiaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL2NvbnNvbGVcIlxuXHRcdFx0XHRcdFx0dGFyZ2V0PVwiX2JsYW5rXCJcblx0XHRcdFx0XHRcdD5XZWIgQVBJcyBNRE48L2Fcblx0XHRcdFx0XHQ+XG5cdFx0XHRcdFx0ZGV2ZWxvcGVyIGRvY3VtZW50YXRpb24gZm9yIGNvbnNvbGUuXG5cdFx0XHRcdDwvZGl2PlxuXHRcdFx0PC9kaXY+XG5cblx0XHRcdDwhLS0gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSBFeGFtcGxlcyAtLT5cblx0XHRcdDxkaXYgY2xhc3M9XCJtYi01XCIgaWQ9XCJ1bC1leGFtcGxlc1wiPlxuXHRcdFx0XHQ8ZGl2IGNsYXNzPVwicm93XCI+XG5cdFx0XHRcdFx0PGRpdiBjbGFzcz1cImNvbC0xMiBtYi0zXCI+XG5cdFx0XHRcdFx0XHQ8aDI+RXhhbXBsZXM8L2gyPlxuXHRcdFx0XHRcdFx0PHAgY2xhc3M9XCJmc3QtaXRhbGljXCI+XG5cdFx0XHRcdFx0XHRcdE9wZW4gRGV2VG9vbHMgYW5kIGNsaWNrIG9uIHRoZSBcIkNvbnNvbGVcIiB0YWIgdG8gdmlldyBleGFtcGxlXG5cdFx0XHRcdFx0XHRcdHJlc3VsdHMuXG5cdFx0XHRcdFx0XHQ8L3A+XG5cdFx0XHRcdFx0PC9kaXY+XG5cdFx0XHRcdDwvZGl2PlxuXG5cdFx0XHRcdDwhLS0gPT09PT09PT09PT09PT09PT09PT09PT0gQmFzaWMgLS0+XG5cdFx0XHRcdDxTaW1wbGVFeGFtcGxlIGlkPVwic2ltcGxlLWV4YW1wbGVzXCIgLz5cblxuXHRcdFx0XHQ8IS0tID09PT09PT09PT09PT09PT09PT09PT09IFRleHQgT3B0aW9uIC0tPlxuXHRcdFx0XHQ8VGV4dEV4YW1wbGUgaWQ9XCJ0ZXh0LWV4YW1wbGVzXCIgLz5cblxuXHRcdFx0XHQ8IS0tID09PT09PT09PT09PT09PT09PT09PT09IFR5cGUgT3B0aW9uIC0tPlxuXHRcdFx0XHQ8VHlwZUV4YW1wbGUgaWQ9XCJ0eXBlLWV4YW1wbGVzXCIgLz5cblxuXHRcdFx0XHQ8IS0tID09PT09PT09PT09PT09PT09PT09PT09IFN0eWxlcyBPcHRpb24gLS0+XG5cdFx0XHRcdDxTdHlsZXNFeGFtcGxlIGlkPVwic3R5bGVzLWV4YW1wbGVzXCIgLz5cblxuXHRcdFx0XHQ8IS0tID09PT09PT09PT09PT09PT09PT09PT09IERpc2FibGVkIE9wdGlvbiAtLT5cblx0XHRcdFx0PERpc2FibGVkRXhhbXBsZSBpZD1cImRpc2FibGVkLWV4YW1wbGVzXCIgLz5cblxuXHRcdFx0XHQ8IS0tID09PT09PT09PT09PT09PT09PT09PT09IExvZyBQcmVmaXggT3B0aW9uIC0tPlxuXHRcdFx0XHQ8TG9nUHJlZml4RXhhbXBsZSBpZD1cImxvZ1ByZWZpeC1leGFtcGxlc1wiIC8+XG5cblx0XHRcdFx0PCEtLSA9PT09PT09PT09PT09PT09PT09PT09PSBNYWdpY2FsIE9wdGlvbiAtLT5cblx0XHRcdFx0PE1hZ2ljYWxFeGFtcGxlIGlkPVwibWFnaWNhbC1leGFtcGxlc1wiIC8+XG5cblx0XHRcdFx0PCEtLSA9PT09PT09PT09PT09PT09PT09PT09PSBOYW1lIE9wdGlvbiAtLT5cblx0XHRcdFx0PExvZ1ByZWZpeEV4YW1wbGUgaWQ9XCJuYW1lLWV4YW1wbGVzXCIgOmlzTmFtZU9wdGlvbj1cInRydWVcIiAvPlxuXG5cdFx0XHRcdDwhLS0gPT09PT09PT09PT09PT09PT09PT09PT0gT2JqZWN0cyBPcHRpb24gLS0+XG5cdFx0XHRcdDxPYmplY3RzRXhhbXBsZXMgaWQ9XCJvYmplY3RzLWV4YW1wbGVzXCIgLz5cblxuXHRcdFx0XHQ8IS0tID09PT09PT09PT09PT09PT09PT09PT09IEFycmF5IE9wdGlvbiAtLT5cblx0XHRcdFx0PEFycmF5c0V4YW1wbGUgaWQ9XCJhcnJheS1leGFtcGxlc1wiIC8+XG5cdFx0XHQ8L2Rpdj5cblxuXHRcdFx0PCEtLSA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IERlcGVuZGVuY2llcyAtLT5cblx0XHRcdDxkaXYgY2xhc3M9XCJyb3cgbWItNVwiIGlkPVwidWwtZGVwZW5kZW5jaWVzXCI+XG5cdFx0XHRcdDxkaXYgY2xhc3M9XCJjb2wtMTJcIj5cblx0XHRcdFx0XHQ8aDI+RGVwZW5kZW5jaWVzPC9oMj5cblx0XHRcdFx0PC9kaXY+XG5cblx0XHRcdFx0PGRpdiBjbGFzcz1cImNvbC14bC04IGNvbC1sZy0xMlwiPlxuXHRcdFx0XHRcdDxhIGhyZWY9XCJodHRwczovL3YyLnZ1ZWpzLm9yZy9cIiB0YXJnZXQ9XCJfYmxhbmtcIj5WdWUgMjwvYT5cblx0XHRcdFx0PC9kaXY+XG5cdFx0XHQ8L2Rpdj5cblxuXHRcdFx0PCEtLSA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IENoYW5nZSBMb2cgLS0+XG5cdFx0XHQ8ZGl2IGNsYXNzPVwicm93IG1iLTVcIiBpZD1cInVsLWNoYW5nZS1sb2dcIj5cblx0XHRcdFx0PGRpdiBjbGFzcz1cImNvbC0xMlwiPlxuXHRcdFx0XHRcdDxoMj5DaGFuZ2UgTG9nPC9oMj5cblx0XHRcdFx0PC9kaXY+XG5cblx0XHRcdFx0PGRpdiBjbGFzcz1cImNvbC0xMlwiPlxuXHRcdFx0XHRcdDxhXG5cdFx0XHRcdFx0XHRocmVmPVwiaHR0cHM6Ly9naXRodWIuY29tL3dlYmRldm5lcmRzdHVmZi92dWUtdW5pY29ybi1sb2cvYmxvYi9tYXN0ZXIvQ0hBTkdFTE9HLm1kXCJcblx0XHRcdFx0XHRcdHRhcmdldD1cIl9ibGFua1wiXG5cdFx0XHRcdFx0XHQ+Q0hBTkdFTE9HLm1kPC9hXG5cdFx0XHRcdFx0PlxuXHRcdFx0XHQ8L2Rpdj5cblx0XHRcdDwvZGl2PlxuXG5cdFx0XHQ8IS0tID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gTGljZW5zZSAtLT5cblx0XHRcdDxkaXYgY2xhc3M9XCJyb3cgbWItNVwiIGlkPVwidWwtbGljZW5zZVwiPlxuXHRcdFx0XHQ8ZGl2IGNsYXNzPVwiY29sLTEyXCI+XG5cdFx0XHRcdFx0PGgyPkxpY2Vuc2U8L2gyPlxuXHRcdFx0XHQ8L2Rpdj5cblxuXHRcdFx0XHQ8ZGl2IGNsYXNzPVwiY29sLTEyXCI+XG5cdFx0XHRcdFx0PHA+XG5cdFx0XHRcdFx0XHRDb3B5cmlnaHQgJmNvcHk7IDIwMjIgV2ViRGV2TmVyZFN0dWZmXG5cdFx0XHRcdFx0XHQ8YnIgLz5cblx0XHRcdFx0XHRcdExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cblx0XHRcdFx0XHQ8L3A+XG5cdFx0XHRcdFx0PHA+XG5cdFx0XHRcdFx0XHQ8YVxuXHRcdFx0XHRcdFx0XHRocmVmPVwiaHR0cHM6Ly9naXRodWIuY29tL3dlYmRldm5lcmRzdHVmZi92dWUtdW5pY29ybi1sb2cvYmxvYi9tYXN0ZXIvTElDRU5TRS5tZFwiXG5cdFx0XHRcdFx0XHRcdHRhcmdldD1cIl9ibGFua1wiXG5cdFx0XHRcdFx0XHQ+XG5cdFx0XHRcdFx0XHRcdExJQ0VOU0UubWRcblx0XHRcdFx0XHRcdDwvYT5cblx0XHRcdFx0XHQ8L3A+XG5cdFx0XHRcdDwvZGl2PlxuXHRcdFx0PC9kaXY+XG5cblx0XHRcdDxkaXYgY2xhc3M9XCJyb3cgbWItNVwiPlxuXHRcdFx0XHQ8ZGl2IGNsYXNzPVwiY29sLTEyIHRleHQtY2VudGVyXCI+XG5cdFx0XHRcdFx0PGltZ1xuXHRcdFx0XHRcdFx0c3JjPVwiL2ltYWdlcy92dWUtdW5pY29ybi1sb2ctc29jaWFsLmpwZ1wiXG5cdFx0XHRcdFx0XHRhbHQ9XCJWdWUgVW5pY29ybiBMb2cgYnkgQFdlYkRldk5lcmRTdHVmZlwiXG5cdFx0XHRcdFx0Lz5cblx0XHRcdFx0PC9kaXY+XG5cdFx0XHQ8L2Rpdj5cblx0XHQ8L2Rpdj5cblx0PC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IFZ1ZSBmcm9tICd2dWUnO1xuaW1wb3J0IE5hdiBmcm9tICdAY29tcG9uZW50cy9OYXYudnVlJztcbmltcG9ydCBBcnJheXNFeGFtcGxlIGZyb20gJ0Bjb21wb25lbnRzL2V4YW1wbGVzL0FycmF5cy52dWUnO1xuaW1wb3J0IERpc2FibGVkRXhhbXBsZSBmcm9tICdAY29tcG9uZW50cy9leGFtcGxlcy9EaXNhYmxlZC52dWUnO1xuaW1wb3J0IExvZ1ByZWZpeEV4YW1wbGUgZnJvbSAnQGNvbXBvbmVudHMvZXhhbXBsZXMvTG9nUHJlZml4LnZ1ZSc7XG5pbXBvcnQgTWFnaWNhbEV4YW1wbGUgZnJvbSAnQGNvbXBvbmVudHMvZXhhbXBsZXMvTWFnaWNhbC52dWUnO1xuaW1wb3J0IE9iamVjdHNFeGFtcGxlcyBmcm9tICdAY29tcG9uZW50cy9leGFtcGxlcy9PYmplY3RzLnZ1ZSc7XG5pbXBvcnQgU2ltcGxlRXhhbXBsZSBmcm9tICdAY29tcG9uZW50cy9leGFtcGxlcy9TaW1wbGUudnVlJztcbmltcG9ydCBTdHlsZXNFeGFtcGxlIGZyb20gJ0Bjb21wb25lbnRzL2V4YW1wbGVzL1N0eWxlcy52dWUnO1xuaW1wb3J0IFRleHRFeGFtcGxlIGZyb20gJ0Bjb21wb25lbnRzL2V4YW1wbGVzL1RleHQudnVlJztcbmltcG9ydCBUeXBlRXhhbXBsZSBmcm9tICdAY29tcG9uZW50cy9leGFtcGxlcy9UeXBlLnZ1ZSc7XG5pbXBvcnQgVW5pY29ybkxvZyBmcm9tICdAcGx1Z2lucy9Vbmljb3JuTG9nJztcbmltcG9ydCB7IGNvbXBvbmVudCBhcyBWdWVDb2RlSGlnaGxpZ2h0IH0gZnJvbSAndnVlLWNvZGUtaGlnaGxpZ2h0JztcblxuVnVlLnVzZShVbmljb3JuTG9nKTtcblxuZXhwb3J0IGRlZmF1bHQge1xuXHRuYW1lOiAnVW5pY29ybkxvZycsXG5cdHByb3BzOiB7fSxcblx0Y29tcG9uZW50czoge1xuXHRcdEFycmF5c0V4YW1wbGUsXG5cdFx0RGlzYWJsZWRFeGFtcGxlLFxuXHRcdExvZ1ByZWZpeEV4YW1wbGUsXG5cdFx0TWFnaWNhbEV4YW1wbGUsXG5cdFx0TmF2LFxuXHRcdE9iamVjdHNFeGFtcGxlcyxcblx0XHRTaW1wbGVFeGFtcGxlLFxuXHRcdFN0eWxlc0V4YW1wbGUsXG5cdFx0VGV4dEV4YW1wbGUsXG5cdFx0VHlwZUV4YW1wbGUsXG5cdFx0VnVlQ29kZUhpZ2hsaWdodCxcblx0fSxcblx0ZGF0YTogKCkgPT4gKHtcblx0XHRjb3B5OiB7XG5cdFx0XHRhcnJheTogJ1VzZWQgdG8gaW5jbHVkZSBhbiBhcnJheSBpbiB0aGUgbG9nLicsXG5cdFx0XHRkZWZhdWx0U3R5bGVzOiAnVXNlZCB0byBhZGp1c3QgdGhlIGRlZmF1bHQgc3R5bGVzLicsXG5cdFx0XHRkaXNhYmxlZDogJ0Rpc2FibGVzIHRoZSBvdXRwdXQgb2YgdGhlIGxvZyBpbiB0aGUgY29uc29sZS4gVGhpcyB3b3JrcyBiZXN0IHdoZW4gdXNpbmcgYW4gZW52aXJvbm1lbnQgdG8gY29uZGl0aW9uYWxseSBzZXQgc28gaXQgXHRcdFx0XHRcdFx0XHRcdFx0XHR3aWxsIGxvZyBpbiBkZXZlbG9wbWVudCwgYnV0IG5vdCBvbiB0aGUgcHJvZHVjdGlvbiBzaXRlLicsXG5cdFx0XHRsb2dQcmVmaXg6ICdQcmVwZW5kcyBhIHN0cmluZyB0byB0byB0aGUgb3V0cHV0LicsXG5cdFx0XHRtYWdpY2FsOiAnQWRkcyBhIG1hZ2ljYWwgc3R5bGUgdG8gdGhlIG91dHB1dC4nLFxuXHRcdFx0b2JqZWN0OiAnVXNlZCB0byBpbmNsdWRlIG9iamVjdHMgaW4gdGhlIGxvZy4nLFxuXHRcdFx0c3R5bGVzOiAnU2V0cyB0aGUgc3R5bGVzIGZvciB0aGUgbG9nLicsXG5cdFx0XHR0ZXh0OiAnVXNlZCB0byBpbmNsdWRlIGEgc3RyaW5nIGluIHRoZSBsb2cuJyxcblx0XHRcdHR5cGU6ICdTcGVjaWZpZXMgd2hpY2ggY29uc29sZSBtZXRob2Qgc2hvdWxkIGJlIHVzZWQuJyxcblx0XHR9LFxuXHRcdG9wdGlvbnM6IHtcblx0XHRcdGJvb2xlYW46ICc8c3BhbiBjbGFzcz1cImJvb2xlYW4tc3R5bGVcIj50cnVlPGJyIC8+ZmFsc2U8L3NwYW4+Jyxcblx0XHRcdHN0eWxlczogJzxhIGhyZWY9XCJodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvY29uc29sZSNzdHlsaW5nX2NvbnNvbGVfb3V0cHV0XCIgdGFyZ2V0PVwiX2JsYW5rXCJcdFx0XHRcdFx0XHRcdFx0XHRcdFx0PlN0eWxpbmcgQ29uc29sZSBPdXRwdXQ8L2E+Jyxcblx0XHRcdHR5cGU6IGBcblx0XHRcdFx0Y2xlYXJcblx0XHRcdFx0PGJyIC8+XG5cdFx0XHRcdGRlYnVnXG5cdFx0XHRcdDxiciAvPlxuXHRcdFx0XHRkaXJcblx0XHRcdFx0PGJyIC8+XG5cdFx0XHRcdGVycm9yXG5cdFx0XHRcdDxiciAvPlxuXHRcdFx0XHRncm91cFxuXHRcdFx0XHQ8YnIgLz5cblx0XHRcdFx0Z3JvdXBDb2xsYXBzZWRcblx0XHRcdFx0PGJyIC8+XG5cdFx0XHRcdGdyb3VwRW5kXG5cdFx0XHRcdDxiciAvPlxuXHRcdFx0XHRpbmZvXG5cdFx0XHRcdDxiciAvPlxuXHRcdFx0XHRsb2dcblx0XHRcdFx0PGJyIC8+XG5cdFx0XHRcdHRhYmxlXG5cdFx0XHRcdDxiciAvPlxuXHRcdFx0XHR0cmFjZVxuXHRcdFx0XHQ8YnIgLz5cblx0XHRcdFx0d2FyblxuXHRcdFx0YCxcblx0XHR9LFxuXHRcdHJhaW5ib3dMaW5lYXJHcmFkaWVudDogYGxpbmVhci1ncmFkaWVudCh0byByaWdodCxcblx0XHRcdGhzbCgwLCAxMDAlLCA1MCUpLFxuXHRcdFx0aHNsKDM5LCAxMDAlLCA1MCUpLFxuXHRcdFx0aHNsKDYwLCAxMDAlLCA1MCUpLFxuXHRcdFx0aHNsKDEyMCwgMTAwJSwgNTAlKSxcblx0XHRcdGhzbCgxODAsIDEwMCUsIDUwJSksXG5cdFx0XHRoc2woMjQwLCAxMDAlLCA1MCUpLFxuXHRcdFx0aHNsKDMwMCwgMTAwJSwgNTAlKSxcblx0XHRcdGhzbCgzNjAsIDEwMCUsIDUwJSlcblx0XHQpYCxcblx0XHR0ZXN0QXJyYXlzOiBbXG5cdFx0XHRbJ2ZvbycsICdiYXInXSxcblx0XHRcdFsnYmFyJywgJ2ZvbyddLFxuXHRcdF0sXG5cdFx0dGVzdE9iamVjdHM6IFtcblx0XHRcdHtcblx0XHRcdFx0Zm9vOiAnZm9vJyxcblx0XHRcdFx0YmFyOiAnYmFyJyxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdGZvb1R3bzogJ2Zvb1R3bycsXG5cdFx0XHRcdGJhclR3bzogJ2JhclR3bycsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0pLFxuXHRtb3VudGVkKCkge1xuXHRcdHRoaXMud2VsY29tZUxvZygpO1xuXHRcdC8vIHRoaXMudGVzdGluZ0xvZ3MoKTtcblx0fSxcblx0bWV0aG9kczoge1xuXHRcdHRlc3RpbmdMb2dzKCkge1xuXHRcdFx0Y29uc3QgdGVzdEFycmF5MSA9IHRoaXMudGVzdEFycmF5c1swXTtcblx0XHRcdGNvbnN0IHRlc3RBcnJheTIgPSB0aGlzLnRlc3RBcnJheXNbMV07XG5cdFx0XHRjb25zdCB0ZXN0QXJyYXkzID0gWydmb29iYXInXTtcblx0XHRcdGNvbnN0IHRlc3RPYmoxID0gdGhpcy50ZXN0T2JqZWN0c1swXTtcblx0XHRcdGNvbnN0IHRlc3RPYmoyID0gdGhpcy50ZXN0T2JqZWN0c1sxXTtcblx0XHRcdGNvbnN0IHRlc3RPYmozID0ge1xuXHRcdFx0XHRiYXJUaHJlZTogJ2JhclRocmVlJyxcblx0XHRcdFx0Zm9vVGhyZWU6ICdmb29UaHJlZScsXG5cdFx0XHR9O1xuXG5cdFx0XHR0aGlzLiR1bmljb3JuTG9nKHtcblx0XHRcdFx0YXJyYXk6IFsuLi50ZXN0QXJyYXkxLCAuLi50ZXN0QXJyYXkyLCB0ZXN0QXJyYXkzXSxcblx0XHRcdFx0bG9nUHJlZml4OiB0cnVlLFxuXHRcdFx0XHRvYmplY3RzOiB7IHRlc3RPYmoxLCB0ZXN0T2JqMiwgdGVzdE9iajMgfSxcblx0XHRcdFx0dGV4dDogJ1Rlc3RpbmcgTG9nJyxcblx0XHRcdFx0dHlwZTogJ2xvZycsXG5cdFx0XHR9KTtcblx0XHR9LFxuXHRcdHdlbGNvbWVMb2coKSB7XG5cdFx0XHR0aGlzLiR1bmljb3JuTG9nKHtcblx0XHRcdFx0dGV4dDogJ1Z1ZSBVbmljb3JuIExvZy4uLiBJdFxcJ3MgbWFnaWNhbCEnLFxuXHRcdFx0XHRzdHlsZXM6IFtcblx0XHRcdFx0XHRgYmFja2dyb3VuZDogJHt0aGlzLnJhaW5ib3dMaW5lYXJHcmFkaWVudH1gLFxuXHRcdFx0XHRcdCdjb2xvcjogI2Y3ZjdmNycsXG5cdFx0XHRcdFx0J2Rpc3BsYXk6IGJsb2NrJyxcblx0XHRcdFx0XHQnZm9udC1mYW1pbHk6IFwiSGVsdmV0aWNhXCIsIFwiQXJpYWxcIicsXG5cdFx0XHRcdFx0J2ZvbnQtc2l6ZTogMjVweCcsXG5cdFx0XHRcdFx0J2ZvbnQtd2VpZ2h0OiBib2xkJyxcblx0XHRcdFx0XHQnbWFyZ2luOiA1cHggMCcsXG5cdFx0XHRcdFx0J3BhZGRpbmc6IDE1cHgnLFxuXHRcdFx0XHRcdCd0ZXh0LWFsaWduOiBjZW50ZXInLFxuXHRcdFx0XHRcdCd0ZXh0LXNoYWRvdzogMXB4IDFweCAycHggIzAwMCcsXG5cdFx0XHRcdF0sXG5cdFx0XHRcdHR5cGU6ICdsb2cnLFxuXHRcdFx0fSk7XG5cdFx0fSxcblx0fSxcbn07XG48L3NjcmlwdD5cblxuPHN0eWxlIGxhbmc9XCJzY3NzXCI+XG5AaW1wb3J0ICd2dWUtY29kZS1oaWdobGlnaHQvdGhlbWVzL3ByaXNtLXRvbW9ycm93LmNzcyc7XG5AaW1wb3J0ICd2dWUtY29kZS1oaWdobGlnaHQvdGhlbWVzL3dpbmRvdy5jc3MnO1xuXG4kcmFpbmJvdy1ncmFkaWVudDogbGluZWFyLWdyYWRpZW50KFxuXHR0byByaWdodCxcblx0aHNsKDAsIDEwMCUsIDUwJSksXG5cdGhzbCgzOSwgMTAwJSwgNTAlKSxcblx0aHNsKDYwLCAxMDAlLCA1MCUpLFxuXHRoc2woMTIwLCAxMDAlLCA1MCUpLFxuXHRoc2woMTgwLCAxMDAlLCA1MCUpLFxuXHRoc2woMjQwLCAxMDAlLCA1MCUpLFxuXHRoc2woMzAwLCAxMDAlLCA1MCUpLFxuXHRoc2woMCwgMTAwJSwgNTAlKVxuKTtcblxuaHRtbCB7XG5cdHNjcm9sbC1wYWRkaW5nLXRvcDogNzBweDtcbn1cblxuaDEge1xuXHRmb250LWZhbWlseTogJ0hlbm55IFBlbm55JywgY3Vyc2l2ZTtcblx0Zm9udC13ZWlnaHQ6IGJvbGQ7XG5cdGZvbnQtc2l6ZTogM2VtO1xufVxuXG5oMiB7XG5cdGZvbnQtZmFtaWx5OiAnSW5kaWUgRmxvd2VyJywgY3Vyc2l2ZTtcblxuXHQmOjphZnRlciB7XG5cdFx0Y29udGVudDogJyAnO1xuXHRcdGJhY2tncm91bmQtaW1hZ2U6ICRyYWluYm93LWdyYWRpZW50O1xuXHRcdGJvcmRlci1yYWRpdXM6IDVweDtcblx0XHRkaXNwbGF5OiBibG9jaztcblx0XHRoZWlnaHQ6IDJweDtcblx0fVxufVxuXG4udGFibGUge1xuXHR0Ym9keSB7XG5cdFx0dGQge1xuXHRcdFx0cHJlIHtcblx0XHRcdFx0YmFja2dyb3VuZC1jb2xvcjogI2ZhZmFmYSAhaW1wb3J0YW50O1xuXHRcdFx0XHRib3JkZXItcmFkaXVzOiA1cHg7XG5cdFx0XHRcdHBhZGRpbmc6IDFyZW07XG5cdFx0XHRcdHRhYi1zaXplOiAyO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufVxuXG4ub3B0aW9uLXR5cGUge1xuXHRjb2xvcjogaHNsKDI4MiwgNjglLCAzOCUpICFpbXBvcnRhbnQ7XG5cdGZvbnQtd2VpZ2h0OiA1MDA7XG59XG5cbi5ib29sZWFuLXN0eWxlIHtcblx0Y29sb3I6IGhzbCgyNDAsIDEwMCUsIDUwJSkgIWltcG9ydGFudDtcblx0Zm9udC13ZWlnaHQ6IDUwMDtcbn1cblxuLnJhaW5ib3ctdGV4dCB7XG5cdC13ZWJraXQtYmFja2dyb3VuZC1jbGlwOiB0ZXh0O1xuXHQtd2Via2l0LXRleHQtZmlsbC1jb2xvcjogdHJhbnNwYXJlbnQ7XG5cdGJhY2tncm91bmQtY2xpcDogdGV4dDtcblx0YmFja2dyb3VuZC1pbWFnZTogJHJhaW5ib3ctZ3JhZGllbnQ7XG5cdGJvcmRlci1yYWRpdXM6IDVweDtcblx0Y29sb3I6IHRyYW5zcGFyZW50O1xuXHRkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG5cdGZvbnQtd2VpZ2h0OiBib2xkO1xuXHRoZWlnaHQ6IDEwMCU7XG5cdHRleHQtc2hhZG93OiAwIDJweCAzcHggcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjMpLCAwIC0xcHggMnB4IHJnYmEoMCwgMCwgMCwgMC4yKTtcbn1cblxuLnJhaW5ib3ctYm9yZGVyIHtcblx0YmFja2dyb3VuZC1jb2xvcjogIzAwMDtcblx0Ym9yZGVyLWltYWdlOiAkcmFpbmJvdy1ncmFkaWVudCAxO1xuXHRib3JkZXItc3R5bGU6IHNvbGlkO1xuXHRib3JkZXItd2lkdGg6IDRweDtcblx0cGFkZGluZzogMnJlbTtcbn1cbjwvc3R5bGU+XG4iLCJpbXBvcnQgVW5pY29ybkxvZ0NvcmUgZnJvbSAnLi9Vbmljb3JuTG9nQ29yZSc7XG5cbmNvbnN0IFVuaWNvcm5Mb2cgPSB7XG5cdGluc3RhbGwoVnVlLCBvcHRpb25zID0ge30pIHtcblx0XHRjb25zdCBNYWdpY2FsID0gVnVlO1xuXG5cdFx0aWYgKFZ1ZS5wcm90b3R5cGUuJHVuaWNvcm5Mb2cgfHwgVnVlLnByb3RvdHlwZS4kdW5pTG9nKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBHbG9iYWwgb3B0aW9ucyAvL1xuXHRcdHRoaXMub3B0aW9ucyA9IHsgLi4udGhpcy5vcHRpb25zLCAuLi5vcHRpb25zIH07XG5cblx0XHQvLyBjb25zb2xlLmxvZyh0aGlzLm9wdGlvbnMpO1xuXG5cdFx0Ly8gQWRkIGFuIGluc3RhbmNlIG1ldGhvZHMgLy9cblx0XHRNYWdpY2FsLnByb3RvdHlwZS4kdW5pY29ybkxvZyA9IGZ1bmN0aW9uKGxvZ09wdGlvbnMpIHtcblx0XHRcdFVuaWNvcm5Mb2dDb3JlLmluaXQoVnVlLCBVbmljb3JuTG9nLm9wdGlvbnMsIGxvZ09wdGlvbnMpO1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH07XG5cblx0XHRNYWdpY2FsLnByb3RvdHlwZS4kdW5pTG9nID0gZnVuY3Rpb24obG9nT3B0aW9ucykge1xuXHRcdFx0VW5pY29ybkxvZ0NvcmUuaW5pdChWdWUsIFVuaWNvcm5Mb2cub3B0aW9ucywgbG9nT3B0aW9ucyk7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fTtcblx0fSxcblx0b3B0aW9uczoge1xuXHRcdGRlZmF1bHRTdHlsZXM6IHt9LFxuXHRcdGRpc2FibGVkOiBmYWxzZSxcblx0XHRsb2dQcmVmaXg6IGZhbHNlLFxuXHRcdHN0eWxlczogJycsXG5cdFx0dHlwZTogJ2xvZycsXG5cdH0sXG59O1xuXG5leHBvcnQgZGVmYXVsdCBVbmljb3JuTG9nO1xuIiwiLyoqXG4gKiBWdWUgVW5pY29ybkxvZyBQbHVnaW5cbiAqXG4gKiBAYXV0aG9yIFdlYkRldk5lcmRTdHVmZiAmIEJ1bm5pZXNcbiAqIEB2ZXJzaW9uIDEuMC4wXG4gKiBAY29weXJpZ2h0IENvcHlyaWdodCAyMDIyLCBXZWJEZXZOZXJkU3R1ZmZcbiAqIEBzdXBwb3J0cyBNYWdpY2FsIENyZWF0dXJlc1xuICpcbiAqL1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1jb25zb2xlICovXG5jb25zdCByYWluYm93TGluZWFyR3JhZGllbnQgPSBgbGluZWFyLWdyYWRpZW50KHRvIHJpZ2h0LFxuXHRoc2woMCwgMTAwJSwgNTAlKSxcblx0aHNsKDM5LCAxMDAlLCA1MCUpLFxuXHRoc2woNjAsIDEwMCUsIDUwJSksXG5cdGhzbCgxMjAsIDEwMCUsIDUwJSksXG5cdGhzbCgxODAsIDEwMCUsIDUwJSksXG5cdGhzbCgyNDAsIDEwMCUsIDUwJSksXG5cdGhzbCgzMDAsIDEwMCUsIDUwJSksXG5cdGhzbCgzNjAsIDEwMCUsIDUwJSlcbilgO1xuXG5jb25zdCBVbmljb3JuTG9nID0ge1xuXHQvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gQ29tbW9uIFZhcmlhYmxlcyAvL1xuXHRlcnJvcnM6IDAsXG5cdGxvZ09wdGlvbnM6IHt9LFxuXHRuYW1lOiAnVW5pY29ybkxvZycsXG5cdG91dHB1dDogbnVsbCxcblx0cGx1Z2luT3B0aW9uczoge30sXG5cdHR5cGVzOiBbXG5cdFx0J2NsZWFyJyxcblx0XHQnY291bnQnLFxuXHRcdCdjb3VudFJlc2V0Jyxcblx0XHQnZGVidWcnLFxuXHRcdCdkaXInLFxuXHRcdCdlcnJvcicsXG5cdFx0J2dyb3VwJyxcblx0XHQnZ3JvdXBDb2xsYXBzZWQnLFxuXHRcdCdncm91cEVuZCcsXG5cdFx0J2luZm8nLFxuXHRcdCdsb2cnLFxuXHRcdCd0YWJsZScsXG5cdFx0J3RpbWUnLFxuXHRcdCd0aW1lRW5kJyxcblx0XHQndGltZUxvZycsXG5cdFx0J3RyYWNlJyxcblx0XHQnd2FybicsXG5cdF0sXG5cblx0Ly8gPT09PT09PT09PT09PT09PT09PT09IERlZmF1bHQgU3R5bGVzIC8vXG5cdGRlZmF1bHRTdHlsZXM6IHtcblx0XHRsb2c6IFtcblx0XHRcdCdiYWNrZ3JvdW5kLWNvbG9yOiBibGFjaycsXG5cdFx0XHRgYm9yZGVyLWltYWdlOiAke3JhaW5ib3dMaW5lYXJHcmFkaWVudH0gMWAsXG5cdFx0XHQnYm9yZGVyLXN0eWxlOiBzb2xpZCcsXG5cdFx0XHQnYm9yZGVyLXdpZHRoOiA0cHgnLFxuXHRcdFx0J2NvbG9yOiAjZmZmJyxcblx0XHRcdCdmb250LXdlaWdodDogbm9ybWFsJyxcblx0XHRcdCdwYWRkaW5nOiA4cHgnLFxuXHRcdF0sXG5cdFx0aW5mbzogW1xuXHRcdFx0J2JhY2tncm91bmQtY29sb3I6IGhzbGEoMjI1LCAxMDAlLCA4JSwgMSknLFxuXHRcdFx0J2JveC1zaGFkb3c6IDk5OXB4IDAgMCBoc2xhKDIyNSwgMTAwJSwgOCUsIDEpJyxcblx0XHRcdCdjb2xvcjogaHNsYSgyMjUsIDEwMCUsIDg1JSwgMSknLFxuXHRcdFx0J2Rpc3BsYXk6IGJsb2NrJyxcblx0XHRcdCdwYWRkaW5nOiAycHgnLFxuXHRcdF0sXG5cdFx0Z29OdXRzOiBbXG5cdFx0XHRgYmFja2dyb3VuZDogJHtyYWluYm93TGluZWFyR3JhZGllbnR9YCxcblx0XHRcdCdjb2xvcjogI2Y3ZjdmNycsXG5cdFx0XHQnZGlzcGxheTogYmxvY2snLFxuXHRcdFx0J2ZvbnQtZmFtaWx5OiBcIkhlbHZldGljYVwiLCBcIkFyaWFsXCInLFxuXHRcdFx0J2ZvbnQtc2l6ZTogMTVweCcsXG5cdFx0XHQnZm9udC13ZWlnaHQ6IGJvbGQnLFxuXHRcdFx0J21hcmdpbjogNXB4IDAnLFxuXHRcdFx0J3BhZGRpbmc6IDEwcHgnLFxuXHRcdFx0J3RleHQtc2hhZG93OiAxcHggMXB4IDJweCAjMDAwJyxcblx0XHRdLFxuXHR9LFxuXHQvLyBTbyBwcmV0dHkgLy9cblx0bWFnaWNhbFN0eWxlTmFtZXM6IFtcblx0XHQnbWFnaWMnLFxuXHRcdCdtYWdpY2FsJyxcblx0XHQncHJpc20nLFxuXHRcdCdwc3ljaGVkZWxpYycsXG5cdFx0J3JhaW5ib3cnLFxuXHRcdCd0cmlwcHknLFxuXHRcdCd1bmljb3JuJyxcblx0XSxcblxuXHQvLyA9PT09PT09PT09PT09PT09PT09PT0gRGVmYXVsdCBPcHRpb25zIC8vXG5cdGRlZmF1bHRPcHRpb25zOiB7XG5cdFx0YXJyYXk6IFtdLFxuXHRcdGRlZmF1bHRTdHlsZXM6IHt9LFxuXHRcdGRpc2FibGVkOiB0cnVlLFxuXHRcdGxvZ1ByZWZpeDogZmFsc2UsXG5cdFx0bWFnaWNhbDogZmFsc2UsXG5cdFx0bmFtZTogJ1tVbmljb3JuTG9nXTonLFxuXHRcdG9iamVjdHM6IHt9LFxuXHRcdHN0eWxlczogJycsXG5cdFx0dGV4dDogJ/CfpoQnLFxuXHRcdHR5cGU6ICdsb2cnLFxuXHR9LFxuXG5cdC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSBNZXRob2RzIC8vXG5cblx0Ly8gPT09PT09PT09PT09PT09PT09PT09IEluaXQgLy9cblx0aW5pdChWdWUsIHBsdWdpbk9wdGlvbnMgPSB7fSwgbG9nT3B0aW9ucyA9IHt9KSB7XG5cdFx0Ly8gRG8gbm90IHJ1biBpZiBkaXNhYmxlZCBpbiB0aGUgUGx1Z2luIG9wdGlvbnMgLy9cblx0XHRpZiAocGx1Z2luT3B0aW9ucy5kaXNhYmxlZCB8fCBsb2dPcHRpb25zLmRpc2FibGVkKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IE9wdGlvbnMgLy9cblx0XHR0aGlzLnBsdWdpbk9wdGlvbnMgPSBwbHVnaW5PcHRpb25zO1xuXHRcdHRoaXMubG9nT3B0aW9ucyA9IHsgLi4udGhpcy5kZWZhdWx0T3B0aW9ucywgLi4udGhpcy5wbHVnaW5PcHRpb25zLCAuLi5sb2dPcHRpb25zIH07XG5cdFx0dGhpcy5kZWZhdWx0U3R5bGVzID0geyAuLi50aGlzLmRlZmF1bHRTdHlsZXMsIC4uLnRoaXMucGx1Z2luT3B0aW9ucy5kZWZhdWx0U3R5bGVzLCAuLi5sb2dPcHRpb25zLmRlZmF1bHRTdHlsZXMgfTtcblxuXHRcdC8vIFJ1biB2YWxpZGF0aW9uIGZ1bmN0aW9ucyAvL1xuXHRcdE9iamVjdC52YWx1ZXModGhpcy52YWxpZGF0ZU9wdGlvbnMpLm1hcCgodmFsdWUpID0+IHtcblx0XHRcdGlmICh0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicpIHtcblx0XHRcdFx0cmV0dXJuIHZhbHVlLmNhbGwoKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0pO1xuXG5cdFx0Ly8gUnVuIEJ1aWxkIGZ1bmN0aW9ucyAvL1xuXHRcdE9iamVjdC52YWx1ZXModGhpcy5idWlsZCkubWFwKCh2YWx1ZSkgPT4ge1xuXHRcdFx0aWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdFx0XHRyZXR1cm4gdmFsdWUuY2FsbCgpO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSk7XG5cblx0XHQvLyBJZiBlcnJvcnMsIGRvbid0IGxvZyAvL1xuXHRcdGlmICh0aGlzLmVycm9ycykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHRoaXMuY29uc29sZU91dHB1dCh0aGlzLmxvZ09wdGlvbnMudHlwZSk7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9LFxuXG5cdC8vID09PT09PT09PT09PT09PT09PT09PSBWYWxpZGF0ZSB0aGUgb3B0aW9ucyAvL1xuXHR2YWxpZGF0ZU9wdGlvbnM6IHtcblx0XHR0eXBlKCkge1xuXHRcdFx0Y29uc3QgdHlwZSA9IFVuaWNvcm5Mb2cubG9nT3B0aW9ucy50eXBlO1xuXHRcdFx0Y29uc3QgdHlwZXMgPSBVbmljb3JuTG9nLnR5cGVzO1xuXG5cdFx0XHRpZiAoIXR5cGVzLmluY2x1ZGVzKHR5cGUpKSB7XG5cdFx0XHRcdFVuaWNvcm5Mb2cuZXJyb3JzICs9IDE7XG5cblx0XHRcdFx0aWYgKHR5cGUgPT09ICdkaXJYbWwnKSB7XG5cdFx0XHRcdFx0VW5pY29ybkxvZy5sb2dnZXIoJ2NvbnNvbGUuZGlyKCkgaXMgbm90IHN1cHBvcnRlZCBjb25zb2xlIG1ldGhvZC4nLCAnd2FybicpO1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdFVuaWNvcm5Mb2cubG9nZ2VyKGBjb25zb2xlLiR7dHlwZX0oKSBpcyBub3Qgc3VwcG9ydGVkIGF0IHRoaXMgdGltZSBvciBpcyBub3QgYSB2YWxpZCBjb25zb2xlIG1ldGhvZC5gLCAnd2FybicpO1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9LFxuXHRcdHN0eWxlcyh2YWx1ZSA9IFVuaWNvcm5Mb2cubG9nT3B0aW9ucy5zdHlsZXMpIHtcblx0XHRcdGlmICghKHZhbHVlIGluc3RhbmNlb2YgQXJyYXkpICYmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnIHx8IE51bWJlci5pc0ludGVnZXIodmFsdWUpKSkge1xuXHRcdFx0XHRVbmljb3JuTG9nLmxvZ2dlcignVGhlIFwic3R5bGVzXCIgb3B0aW9uIGlzIG5vdCBhIFN0cmluZyBvciBhbiBBcnJheS4nLCAnZXJyb3InKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdGxvZ1ByZWZpeCh2YWx1ZSA9IFVuaWNvcm5Mb2cubG9nT3B0aW9ucy5sb2dQcmVmaXgpIHtcblx0XHRcdGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnIHx8IHZhbHVlIGluc3RhbmNlb2YgQm9vbGVhbikge1xuXHRcdFx0XHRVbmljb3JuTG9nLmxvZ2dlcignVGhlIFwibG9nUHJlZml4XCIgb3B0aW9uIGlzIG5vdCBhIHN0cmluZyBvciBib29sZWFuLicsICdlcnJvcicpO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0dGV4dCh2YWx1ZSA9IFVuaWNvcm5Mb2cubG9nT3B0aW9ucy50ZXh0KSB7XG5cdFx0XHRpZiAodHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJykge1xuXHRcdFx0XHRVbmljb3JuTG9nLmxvZ2dlcignVGhlIFwidGV4dFwiIG9wdGlvbiBpcyBub3QgYSBzdHJpbmcuJywgJ2Vycm9yJyk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRvYmplY3RzKHZhbHVlID0gVW5pY29ybkxvZy5sb2dPcHRpb25zLm9iamVjdHMpIHtcblx0XHRcdGlmICh2YWx1ZSBpbnN0YW5jZW9mIEFycmF5IHx8IHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgfHwgTnVtYmVyLmlzSW50ZWdlcih2YWx1ZSkpIHtcblx0XHRcdFx0VW5pY29ybkxvZy5sb2dnZXIoJ1RoZSBcIm9iamVjdHNcIiBvcHRpb24gaXMgbm90IGFuIG9iamVjdC4nLCAnZXJyb3InKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdGFycmF5KHZhbHVlID0gVW5pY29ybkxvZy5sb2dPcHRpb25zLmFycmF5KSB7XG5cdFx0XHRpZiAoISh2YWx1ZSBpbnN0YW5jZW9mIEFycmF5KSB8fCB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnIHx8IE51bWJlci5pc0ludGVnZXIodmFsdWUpKSB7XG5cdFx0XHRcdFVuaWNvcm5Mb2cubG9nZ2VyKCdUaGUgXCJhcnJheVwiIG9wdGlvbiBpcyBub3QgYW4gYXJyYXkuJywgJ2Vycm9yJyk7XG5cdFx0XHR9XG5cdFx0fSxcblx0fSxcblxuXHQvLyA9PT09PT09PT09PT09PT09PT09PT0gQnVpbGQgc3R1ZmYgLy9cblx0YnVpbGQ6IHtcblx0XHQvLyBBZGQgUHJlZml4IGlmIG9wdGlvbiBzZXQgLy9cblx0XHRwcmVmaXgoKSB7XG5cdFx0XHRjb25zdCBvcHRpb25zID0gVW5pY29ybkxvZy5sb2dPcHRpb25zO1xuXG5cdFx0XHRpZiAob3B0aW9ucy5sb2dQcmVmaXgpIHtcblx0XHRcdFx0aWYgKHR5cGVvZiBvcHRpb25zLmxvZ1ByZWZpeCA9PT0gJ3N0cmluZycpIHtcblx0XHRcdFx0XHRvcHRpb25zLnRleHQgPSBgJHtvcHRpb25zLmxvZ1ByZWZpeH0gJHtvcHRpb25zLnRleHR9YDtcblx0XHRcdFx0fVxuXHRcdFx0XHRlbHNlIHtcblx0XHRcdFx0XHRvcHRpb25zLnRleHQgPSBgJHtvcHRpb25zLm5hbWV9ICR7b3B0aW9ucy50ZXh0fWA7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXHRcdC8vIEJ1aWxkIGxvZyBzdHlsZXMgLy9cblx0XHRzdHlsZXMoKSB7XG5cdFx0XHRjb25zdCBvcHRpb25zID0gVW5pY29ybkxvZy5sb2dPcHRpb25zO1xuXHRcdFx0bGV0IHN0eWxlcyA9IG9wdGlvbnMuc3R5bGVzO1xuXG5cdFx0XHRpZiAoc3R5bGVzID09PSBmYWxzZSkge1xuXHRcdFx0XHRzdHlsZXMgPSAnJztcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgc3R5bGVzIHNob3VsZCBiZSBtYWdpY2FsIEFGIC8vXG5cdFx0XHRlbHNlIGlmICgob3B0aW9ucy50eXBlID09PSAnbG9nJyB8fCBvcHRpb25zLnR5cGUgPT09ICdpbmZvJykgJiYgKFVuaWNvcm5Mb2cubWFnaWNhbFN0eWxlTmFtZXMuaW5jbHVkZXMob3B0aW9ucy5zdHlsZXMpIHx8IG9wdGlvbnMubWFnaWNhbCkpIHtcblx0XHRcdFx0c3R5bGVzID0gVW5pY29ybkxvZy5kZWZhdWx0U3R5bGVzLmdvTnV0cy5qb2luKCc7Jyk7XG5cdFx0XHR9XG5cdFx0XHQvLyBTdHlsZXMgZm9yIGluZm8gbWV0aG9kIC8vXG5cdFx0XHRlbHNlIGlmICgoc3R5bGVzID09PSAnJyB8fCBzdHlsZXMgPT09IHRydWUpICYmIG9wdGlvbnMudHlwZSA9PT0gJ2luZm8nKSB7XG5cdFx0XHRcdHN0eWxlcyA9IFVuaWNvcm5Mb2cuZGVmYXVsdFN0eWxlcy5pbmZvLmpvaW4oJzsnKTtcblx0XHRcdH1cblx0XHRcdC8vIERlZmF1bHQgc3R5bGVzIC8vXG5cdFx0XHRlbHNlIHtcblx0XHRcdFx0c3R5bGVzID0gc3R5bGVzIHx8IFVuaWNvcm5Mb2cuZGVmYXVsdFN0eWxlcy5sb2cuam9pbignOycpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBzdHlsZXMgaXMgYW4gYXJyYXksIGpvaW4gdGhlbSAvL1xuXHRcdFx0aWYgKEFycmF5LmlzQXJyYXkoc3R5bGVzKSkge1xuXHRcdFx0XHRzdHlsZXMgPSBzdHlsZXMuam9pbignOycpO1xuXHRcdFx0fVxuXG5cdFx0XHRvcHRpb25zLnN0eWxlcyA9IHN0eWxlcztcblx0XHR9LFxuXHRcdC8vIEJ1aWxkIHRoZSBvdXRwdXQgLy9cblx0XHRvdXRwdXQob3B0aW9ucyA9IFVuaWNvcm5Mb2cubG9nT3B0aW9ucykge1xuXHRcdFx0Y29uc3QgcmVzdWx0cyA9IFsnJWMlcycsIG9wdGlvbnMuc3R5bGVzXTtcblxuXHRcdFx0Ly8gQnVpbGQgdGhlIG91dHB1dCByZXN1bHRzIC8vXG5cdFx0XHRpZiAob3B0aW9ucy50ZXh0KSB7XG5cdFx0XHRcdHJlc3VsdHMucHVzaChvcHRpb25zLnRleHQpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAob3B0aW9ucy5hcnJheS5sZW5ndGgpIHtcblx0XHRcdFx0cmVzdWx0cy5wdXNoKG9wdGlvbnMuYXJyYXkpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoT2JqZWN0LmtleXMob3B0aW9ucy5vYmplY3RzKS5sZW5ndGgpIHtcblx0XHRcdFx0cmVzdWx0cy5wdXNoKG9wdGlvbnMub2JqZWN0cyk7XG5cdFx0XHR9XG5cblx0XHRcdFVuaWNvcm5Mb2cub3V0cHV0ID0gcmVzdWx0cztcblx0XHR9LFxuXHR9LFxuXG5cdC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSBDb25zb2xlIE91dHB1dCAvL1xuXHRjb25zb2xlRGlyKCkge1xuXHRcdGNvbnN0IHZhbHVlID0ge307XG5cblx0XHRpZiAoT2JqZWN0LmtleXModGhpcy5sb2dPcHRpb25zLm9iamVjdHMpLmxlbmd0aCkge1xuXHRcdFx0aWYgKE9iamVjdC5rZXlzKHRoaXMubG9nT3B0aW9ucy5hcnJheSkubGVuZ3RoKSB7XG5cdFx0XHRcdHZhbHVlLm9iamVjdHMgPSB0aGlzLmxvZ09wdGlvbnMub2JqZWN0cztcblx0XHRcdH1cblx0XHRcdGVsc2Uge1xuXHRcdFx0XHRPYmplY3QuYXNzaWduKHZhbHVlLCB0aGlzLmxvZ09wdGlvbnMub2JqZWN0cyk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKE9iamVjdC5rZXlzKHRoaXMubG9nT3B0aW9ucy5hcnJheSkubGVuZ3RoKSB7XG5cdFx0XHRpZiAoT2JqZWN0LmtleXModGhpcy5sb2dPcHRpb25zLm9iamVjdHMpLmxlbmd0aCkge1xuXHRcdFx0XHR2YWx1ZS5hcnJheSA9IHRoaXMubG9nT3B0aW9ucy5hcnJheTtcblx0XHRcdH1cblx0XHRcdGVsc2Uge1xuXHRcdFx0XHRPYmplY3QuYXNzaWduKHZhbHVlLCB0aGlzLmxvZ09wdGlvbnMuYXJyYXkpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICghT2JqZWN0LmtleXModmFsdWUpLmxlbmd0aCkge1xuXHRcdFx0cmV0dXJuIFVuaWNvcm5Mb2cubG9nZ2VyKCdjb25zb2xlLmRpcigpIGV4cGVjdHMgdGhlIFwib2JqZWN0c1wiIGFuZC9vciBhcnJheSBvcHRpb24gdmFsdWUgdG8gYmUgc2V0LicsICdlcnJvcicpO1xuXHRcdH1cblxuXHRcdFVuaWNvcm5Mb2cubG9nZ2VyKCdjb25zb2xlLmRpcigpIGRvZXMgbm90IHN1cHBvcnQgY29sb3JzLicsICdpbmZvJyk7XG5cblx0XHRyZXR1cm4gdmFsdWU7XG5cdH0sXG5cblx0Y29uc29sZVRhYmxlKCkge1xuXHRcdFVuaWNvcm5Mb2cubG9nZ2VyKCdjb25zb2xlLnRhYmxlKCkgZG9lcyBub3Qgc3VwcG9ydCBjb2xvcnMuJywgJ2luZm8nKTtcblxuXHRcdHJldHVybiB0aGlzLmxvZ09wdGlvbnMuYXJyYXk7XG5cdH0sXG5cblx0Y29uc29sZU1ldGhvZE5vdFN1cHBvcnRlZChsb2dUeXBlKSB7XG5cdFx0dGhpcy5lcnJvcnMgKz0gMTtcblx0XHRVbmljb3JuTG9nLmxvZ2dlcihgY29uc29sZS4ke2xvZ1R5cGV9KCkgZG9lcyBub3Qgc3VwcG9ydCBjb2xvcnMuYCwgJ2luZm8nKTtcblx0fSxcblxuXHQvLyA9PT09PT09PT09PT09PT09PT09PT0gTWFrZSB0aGUgZmluYWwgbWFnaWMgaGFwcGVuIG5vdyAvL1xuXHRjb25zb2xlT3V0cHV0KGxvZ1R5cGUpIHtcblx0XHRpZiAobG9nVHlwZSA9PT0gJ2RpcicpIHtcblx0XHRcdHRoaXMub3V0cHV0ID0gW3RoaXMuY29uc29sZURpcigpXTtcblx0XHR9XG5cblx0XHRpZiAobG9nVHlwZSA9PT0gJ3RhYmxlJykge1xuXHRcdFx0dGhpcy5vdXRwdXQgPSBbdGhpcy5jb25zb2xlVGFibGUoKV07XG5cdFx0fVxuXG5cdFx0Ly8gVGhlc2UgbWV0aG9kcyBkbyBub3Qgc3VwcG9ydCBjb25zb2xlIGNvbG9ycyAvL1xuXHRcdGlmIChsb2dUeXBlID09PSAnY291bnQnIHx8IGxvZ1R5cGUgPT09ICdjb3VudFJlc2V0JyB8fCBsb2dUeXBlID09PSAndGltZScgfHwgbG9nVHlwZSA9PT0gJ3RpbWVFbmQnIHx8IGxvZ1R5cGUgPT09ICd0aW1lTG9nJykge1xuXHRcdFx0dGhpcy5vdXRwdXQgPSBbdGhpcy5jb25zb2xlTWV0aG9kTm90U3VwcG9ydGVkKGxvZ1R5cGUpXTtcblx0XHR9XG5cblx0XHRpZiAoIXRoaXMuZXJyb3JzKSB7XG5cdFx0XHRjb25zb2xlW2xvZ1R5cGVdKC4uLnRoaXMub3V0cHV0KTtcblx0XHR9XG5cdH0sXG5cblx0Ly8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IFVuaWNvcm4gTG9nZ2VyIC8vXG5cdGxvZ2dlcihtc2cgPSAnQW4gZXJyb3IgaGFzIG9jY3VycmVkLicsIGxvZ1R5cGUgPSAnbG9nJykge1xuXHRcdGNvbnN0IGxhYmVsID0gbG9nVHlwZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIGxvZ1R5cGUuc2xpY2UoMSk7XG5cdFx0bGV0IHN0eWxlID0gJyc7XG5cblx0XHRpZiAobG9nVHlwZSA9PT0gJ2Vycm9yJykge1xuXHRcdFx0dGhpcy5lcnJvcnMgKz0gMTtcblx0XHR9XG5cblx0XHRpZiAobG9nVHlwZSA9PT0gJ2luZm8nKSB7XG5cdFx0XHRzdHlsZSA9IHRoaXMuZGVmYXVsdFN0eWxlcy5pbmZvLmpvaW4oJzsnKTtcblx0XHR9XG5cblx0XHRjb25zb2xlW2xvZ1R5cGVdKCclYyVzJywgc3R5bGUsIGBbJHtVbmljb3JuTG9nLm5hbWV9ICR7bGFiZWx9XTogJHttc2d9YCk7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9LFxufTtcblxuZXhwb3J0IGRlZmF1bHQgVW5pY29ybkxvZztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi8qKlxcbiAqIHByaXNtLmpzIHRvbW9ycm93IG5pZ2h0IGVpZ2h0aWVzIGZvciBKYXZhU2NyaXB0LCBDb2ZmZWVTY3JpcHQsIENTUyBhbmQgSFRNTFxcbiAqIEJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9jaHJpc2tlbXBzb24vdG9tb3Jyb3ctdGhlbWVcXG4gKiBAYXV0aG9yIFJvc2UgUHJpdGNoYXJkXFxuICovXFxuXFxuY29kZVtjbGFzcyo9XFxcImxhbmd1YWdlLVxcXCJdLFxcbnByZVtjbGFzcyo9XFxcImxhbmd1YWdlLVxcXCJdIHtcXG5cXHRjb2xvcjogI2NjYztcXG5cXHRiYWNrZ3JvdW5kOiBub25lO1xcblxcdGZvbnQtZmFtaWx5OiBDb25zb2xhcywgTW9uYWNvLCAnQW5kYWxlIE1vbm8nLCAnVWJ1bnR1IE1vbm8nLCBtb25vc3BhY2U7XFxuXFx0dGV4dC1hbGlnbjogbGVmdDtcXG5cXHR3aGl0ZS1zcGFjZTogcHJlO1xcblxcdHdvcmQtc3BhY2luZzogbm9ybWFsO1xcblxcdHdvcmQtYnJlYWs6IG5vcm1hbDtcXG5cXHR3b3JkLXdyYXA6IG5vcm1hbDtcXG5cXHRsaW5lLWhlaWdodDogMS41O1xcblxcblxcdC1tb3otdGFiLXNpemU6IDQ7XFxuXFx0LW8tdGFiLXNpemU6IDQ7XFxuXFx0dGFiLXNpemU6IDQ7XFxuXFxuXFx0LXdlYmtpdC1oeXBoZW5zOiBub25lO1xcblxcdC1tb3otaHlwaGVuczogbm9uZTtcXG5cXHQtbXMtaHlwaGVuczogbm9uZTtcXG5cXHRoeXBoZW5zOiBub25lO1xcblxcbn1cXG5cXG4vKiBDb2RlIGJsb2NrcyAqL1xcbnByZVtjbGFzcyo9XFxcImxhbmd1YWdlLVxcXCJdIHtcXG5cXHRwYWRkaW5nOiAxZW07XFxuXFx0bWFyZ2luOiAuNWVtIDA7XFxuXFx0b3ZlcmZsb3c6IGF1dG87XFxufVxcblxcbjpub3QocHJlKSA+IGNvZGVbY2xhc3MqPVxcXCJsYW5ndWFnZS1cXFwiXSxcXG5wcmVbY2xhc3MqPVxcXCJsYW5ndWFnZS1cXFwiXSB7XFxuXFx0YmFja2dyb3VuZDogIzJkMmQyZDtcXG59XFxuXFxuLyogSW5saW5lIGNvZGUgKi9cXG46bm90KHByZSkgPiBjb2RlW2NsYXNzKj1cXFwibGFuZ3VhZ2UtXFxcIl0ge1xcblxcdHBhZGRpbmc6IC4xZW07XFxuXFx0Ym9yZGVyLXJhZGl1czogLjNlbTtcXG5cXHR3aGl0ZS1zcGFjZTogbm9ybWFsO1xcbn1cXG5cXG4udG9rZW4uY29tbWVudCxcXG4udG9rZW4uYmxvY2stY29tbWVudCxcXG4udG9rZW4ucHJvbG9nLFxcbi50b2tlbi5kb2N0eXBlLFxcbi50b2tlbi5jZGF0YSB7XFxuXFx0Y29sb3I6ICM5OTk7XFxufVxcblxcbi50b2tlbi5wdW5jdHVhdGlvbiB7XFxuXFx0Y29sb3I6ICNjY2M7XFxufVxcblxcbi50b2tlbi50YWcsXFxuLnRva2VuLmF0dHItbmFtZSxcXG4udG9rZW4ubmFtZXNwYWNlLFxcbi50b2tlbi5kZWxldGVkIHtcXG5cXHRjb2xvcjogI2UyNzc3YTtcXG59XFxuXFxuLnRva2VuLmZ1bmN0aW9uLW5hbWUge1xcblxcdGNvbG9yOiAjNjE5NmNjO1xcbn1cXG5cXG4udG9rZW4uYm9vbGVhbixcXG4udG9rZW4ubnVtYmVyLFxcbi50b2tlbi5mdW5jdGlvbiB7XFxuXFx0Y29sb3I6ICNmMDhkNDk7XFxufVxcblxcbi50b2tlbi5wcm9wZXJ0eSxcXG4udG9rZW4uY2xhc3MtbmFtZSxcXG4udG9rZW4uY29uc3RhbnQsXFxuLnRva2VuLnN5bWJvbCB7XFxuXFx0Y29sb3I6ICNmOGM1NTU7XFxufVxcblxcbi50b2tlbi5zZWxlY3RvcixcXG4udG9rZW4uaW1wb3J0YW50LFxcbi50b2tlbi5hdHJ1bGUsXFxuLnRva2VuLmtleXdvcmQsXFxuLnRva2VuLmJ1aWx0aW4ge1xcblxcdGNvbG9yOiAjY2M5OWNkO1xcbn1cXG5cXG4udG9rZW4uc3RyaW5nLFxcbi50b2tlbi5jaGFyLFxcbi50b2tlbi5hdHRyLXZhbHVlLFxcbi50b2tlbi5yZWdleCxcXG4udG9rZW4udmFyaWFibGUge1xcblxcdGNvbG9yOiAjN2VjNjk5O1xcbn1cXG5cXG4udG9rZW4ub3BlcmF0b3IsXFxuLnRva2VuLmVudGl0eSxcXG4udG9rZW4udXJsIHtcXG5cXHRjb2xvcjogIzY3Y2RjYztcXG59XFxuXFxuLnRva2VuLmltcG9ydGFudCxcXG4udG9rZW4uYm9sZCB7XFxuXFx0Zm9udC13ZWlnaHQ6IGJvbGQ7XFxufVxcbi50b2tlbi5pdGFsaWMge1xcblxcdGZvbnQtc3R5bGU6IGl0YWxpYztcXG59XFxuXFxuLnRva2VuLmVudGl0eSB7XFxuXFx0Y3Vyc29yOiBoZWxwO1xcbn1cXG5cXG4udG9rZW4uaW5zZXJ0ZWQge1xcblxcdGNvbG9yOiBncmVlbjtcXG59XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1jb2RlLWhpZ2hsaWdodC90aGVtZXMvcHJpc20tdG9tb3Jyb3cuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBOzs7O0VBSUU7O0FBRUY7O0NBRUMsV0FBVztDQUNYLGdCQUFnQjtDQUNoQixzRUFBc0U7Q0FDdEUsZ0JBQWdCO0NBQ2hCLGdCQUFnQjtDQUNoQixvQkFBb0I7Q0FDcEIsa0JBQWtCO0NBQ2xCLGlCQUFpQjtDQUNqQixnQkFBZ0I7O0NBRWhCLGdCQUFnQjtDQUNoQixjQUFjO0NBQ2QsV0FBVzs7Q0FFWCxxQkFBcUI7Q0FDckIsa0JBQWtCO0NBQ2xCLGlCQUFpQjtDQUNqQixhQUFhOztBQUVkOztBQUVBLGdCQUFnQjtBQUNoQjtDQUNDLFlBQVk7Q0FDWixjQUFjO0NBQ2QsY0FBYztBQUNmOztBQUVBOztDQUVDLG1CQUFtQjtBQUNwQjs7QUFFQSxnQkFBZ0I7QUFDaEI7Q0FDQyxhQUFhO0NBQ2IsbUJBQW1CO0NBQ25CLG1CQUFtQjtBQUNwQjs7QUFFQTs7Ozs7Q0FLQyxXQUFXO0FBQ1o7O0FBRUE7Q0FDQyxXQUFXO0FBQ1o7O0FBRUE7Ozs7Q0FJQyxjQUFjO0FBQ2Y7O0FBRUE7Q0FDQyxjQUFjO0FBQ2Y7O0FBRUE7OztDQUdDLGNBQWM7QUFDZjs7QUFFQTs7OztDQUlDLGNBQWM7QUFDZjs7QUFFQTs7Ozs7Q0FLQyxjQUFjO0FBQ2Y7O0FBRUE7Ozs7O0NBS0MsY0FBYztBQUNmOztBQUVBOzs7Q0FHQyxjQUFjO0FBQ2Y7O0FBRUE7O0NBRUMsaUJBQWlCO0FBQ2xCO0FBQ0E7Q0FDQyxrQkFBa0I7QUFDbkI7O0FBRUE7Q0FDQyxZQUFZO0FBQ2I7O0FBRUE7Q0FDQyxZQUFZO0FBQ2JcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLyoqXFxuICogcHJpc20uanMgdG9tb3Jyb3cgbmlnaHQgZWlnaHRpZXMgZm9yIEphdmFTY3JpcHQsIENvZmZlZVNjcmlwdCwgQ1NTIGFuZCBIVE1MXFxuICogQmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL2Nocmlza2VtcHNvbi90b21vcnJvdy10aGVtZVxcbiAqIEBhdXRob3IgUm9zZSBQcml0Y2hhcmRcXG4gKi9cXG5cXG5jb2RlW2NsYXNzKj1cXFwibGFuZ3VhZ2UtXFxcIl0sXFxucHJlW2NsYXNzKj1cXFwibGFuZ3VhZ2UtXFxcIl0ge1xcblxcdGNvbG9yOiAjY2NjO1xcblxcdGJhY2tncm91bmQ6IG5vbmU7XFxuXFx0Zm9udC1mYW1pbHk6IENvbnNvbGFzLCBNb25hY28sICdBbmRhbGUgTW9ubycsICdVYnVudHUgTW9ubycsIG1vbm9zcGFjZTtcXG5cXHR0ZXh0LWFsaWduOiBsZWZ0O1xcblxcdHdoaXRlLXNwYWNlOiBwcmU7XFxuXFx0d29yZC1zcGFjaW5nOiBub3JtYWw7XFxuXFx0d29yZC1icmVhazogbm9ybWFsO1xcblxcdHdvcmQtd3JhcDogbm9ybWFsO1xcblxcdGxpbmUtaGVpZ2h0OiAxLjU7XFxuXFxuXFx0LW1vei10YWItc2l6ZTogNDtcXG5cXHQtby10YWItc2l6ZTogNDtcXG5cXHR0YWItc2l6ZTogNDtcXG5cXG5cXHQtd2Via2l0LWh5cGhlbnM6IG5vbmU7XFxuXFx0LW1vei1oeXBoZW5zOiBub25lO1xcblxcdC1tcy1oeXBoZW5zOiBub25lO1xcblxcdGh5cGhlbnM6IG5vbmU7XFxuXFxufVxcblxcbi8qIENvZGUgYmxvY2tzICovXFxucHJlW2NsYXNzKj1cXFwibGFuZ3VhZ2UtXFxcIl0ge1xcblxcdHBhZGRpbmc6IDFlbTtcXG5cXHRtYXJnaW46IC41ZW0gMDtcXG5cXHRvdmVyZmxvdzogYXV0bztcXG59XFxuXFxuOm5vdChwcmUpID4gY29kZVtjbGFzcyo9XFxcImxhbmd1YWdlLVxcXCJdLFxcbnByZVtjbGFzcyo9XFxcImxhbmd1YWdlLVxcXCJdIHtcXG5cXHRiYWNrZ3JvdW5kOiAjMmQyZDJkO1xcbn1cXG5cXG4vKiBJbmxpbmUgY29kZSAqL1xcbjpub3QocHJlKSA+IGNvZGVbY2xhc3MqPVxcXCJsYW5ndWFnZS1cXFwiXSB7XFxuXFx0cGFkZGluZzogLjFlbTtcXG5cXHRib3JkZXItcmFkaXVzOiAuM2VtO1xcblxcdHdoaXRlLXNwYWNlOiBub3JtYWw7XFxufVxcblxcbi50b2tlbi5jb21tZW50LFxcbi50b2tlbi5ibG9jay1jb21tZW50LFxcbi50b2tlbi5wcm9sb2csXFxuLnRva2VuLmRvY3R5cGUsXFxuLnRva2VuLmNkYXRhIHtcXG5cXHRjb2xvcjogIzk5OTtcXG59XFxuXFxuLnRva2VuLnB1bmN0dWF0aW9uIHtcXG5cXHRjb2xvcjogI2NjYztcXG59XFxuXFxuLnRva2VuLnRhZyxcXG4udG9rZW4uYXR0ci1uYW1lLFxcbi50b2tlbi5uYW1lc3BhY2UsXFxuLnRva2VuLmRlbGV0ZWQge1xcblxcdGNvbG9yOiAjZTI3NzdhO1xcbn1cXG5cXG4udG9rZW4uZnVuY3Rpb24tbmFtZSB7XFxuXFx0Y29sb3I6ICM2MTk2Y2M7XFxufVxcblxcbi50b2tlbi5ib29sZWFuLFxcbi50b2tlbi5udW1iZXIsXFxuLnRva2VuLmZ1bmN0aW9uIHtcXG5cXHRjb2xvcjogI2YwOGQ0OTtcXG59XFxuXFxuLnRva2VuLnByb3BlcnR5LFxcbi50b2tlbi5jbGFzcy1uYW1lLFxcbi50b2tlbi5jb25zdGFudCxcXG4udG9rZW4uc3ltYm9sIHtcXG5cXHRjb2xvcjogI2Y4YzU1NTtcXG59XFxuXFxuLnRva2VuLnNlbGVjdG9yLFxcbi50b2tlbi5pbXBvcnRhbnQsXFxuLnRva2VuLmF0cnVsZSxcXG4udG9rZW4ua2V5d29yZCxcXG4udG9rZW4uYnVpbHRpbiB7XFxuXFx0Y29sb3I6ICNjYzk5Y2Q7XFxufVxcblxcbi50b2tlbi5zdHJpbmcsXFxuLnRva2VuLmNoYXIsXFxuLnRva2VuLmF0dHItdmFsdWUsXFxuLnRva2VuLnJlZ2V4LFxcbi50b2tlbi52YXJpYWJsZSB7XFxuXFx0Y29sb3I6ICM3ZWM2OTk7XFxufVxcblxcbi50b2tlbi5vcGVyYXRvcixcXG4udG9rZW4uZW50aXR5LFxcbi50b2tlbi51cmwge1xcblxcdGNvbG9yOiAjNjdjZGNjO1xcbn1cXG5cXG4udG9rZW4uaW1wb3J0YW50LFxcbi50b2tlbi5ib2xkIHtcXG5cXHRmb250LXdlaWdodDogYm9sZDtcXG59XFxuLnRva2VuLml0YWxpYyB7XFxuXFx0Zm9udC1zdHlsZTogaXRhbGljO1xcbn1cXG5cXG4udG9rZW4uZW50aXR5IHtcXG5cXHRjdXJzb3I6IGhlbHA7XFxufVxcblxcbi50b2tlbi5pbnNlcnRlZCB7XFxuXFx0Y29sb3I6IGdyZWVuO1xcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2dldFVybC5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8wX19fID0gbmV3IFVSTChcImRhdGE6aW1hZ2Uvc3ZnK3htbDt1dGY4LCA8c3ZnIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCIgd2lkdGg9XFxcIjU0XFxcIiBoZWlnaHQ9XFxcIjE0XFxcIiB2aWV3Qm94PVxcXCIwIDAgNTQgMTRcXFwiPjxnIGZpbGw9XFxcIm5vbmVcXFwiIGZpbGxSdWxlPVxcXCJldmVub2RkXFxcIiB0cmFuc2Zvcm09XFxcInRyYW5zbGF0ZSUyODEgMSUyOVxcXCI+PGNpcmNsZSBjeD1cXFwiNlxcXCIgY3k9XFxcIjZcXFwiIHI9XFxcIjZcXFwiIGZpbGw9XFxcIiUyM0ZGNUY1NlxcXCIgc3Ryb2tlPVxcXCIlMjNFMDQ0M0VcXFwiIHN0cm9rZVdpZHRoPVxcXCIuNVxcXCIgLz48Y2lyY2xlIGN4PVxcXCIyNlxcXCIgY3k9XFxcIjZcXFwiIHI9XFxcIjZcXFwiIGZpbGw9XFxcIiUyM0ZGQkQyRVxcXCIgc3Ryb2tlPVxcXCIlMjNERUExMjNcXFwiIHN0cm9rZVdpZHRoPVxcXCIuNVxcXCIgLz48Y2lyY2xlIGN4PVxcXCI0NlxcXCIgY3k9XFxcIjZcXFwiIHI9XFxcIjZcXFwiIGZpbGw9XFxcIiUyMzI3QzkzRlxcXCIgc3Ryb2tlPVxcXCIlMjMxQUFCMjlcXFwiIHN0cm9rZVdpZHRoPVxcXCIuNVxcXCIgLz48L2c+PC9zdmc+XCIsIGltcG9ydC5tZXRhLnVybCk7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzBfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiZGl2IHByZVtjbGFzcyo9XFxcImxhbmd1YWdlLVxcXCJdIHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIHdpZHRoOiAxMDAlO1xcbiAgcGFkZGluZy1yaWdodDogMTBlbTtcXG4gIHBhZGRpbmctdG9wOiAzcmVtO1xcbiAgYm9yZGVyLXJhZGl1czogNnB4O1xcbiAgYmFja2dyb3VuZC1pbWFnZTogdXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fXyArIFwiKTtcXG4gIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQ7XFxuICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiAxNnB4IDE2cHg7XFxuICBib3gtc2hhZG93OiA1cHggNXB4IDE1cHggMHB4IHJnYmEoNTAsIDUwLCA1MCwgMC43NSk7XFxufVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uLy4uL25vZGVfbW9kdWxlcy92dWUtY29kZS1oaWdobGlnaHQvdGhlbWVzL3dpbmRvdy5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7RUFDRSxxQkFBcUI7RUFDckIsV0FBVztFQUNYLG1CQUFtQjtFQUNuQixpQkFBaUI7RUFDakIsa0JBQWtCO0VBQ2xCLHlEQUF1YztFQUN2Yyw0QkFBNEI7RUFDNUIsOEJBQThCO0VBQzlCLG1EQUFtRDtBQUNyRFwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJkaXYgcHJlW2NsYXNzKj1cXFwibGFuZ3VhZ2UtXFxcIl0ge1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgd2lkdGg6IDEwMCU7XFxuICBwYWRkaW5nLXJpZ2h0OiAxMGVtO1xcbiAgcGFkZGluZy10b3A6IDNyZW07XFxuICBib3JkZXItcmFkaXVzOiA2cHg7XFxuICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoJ2RhdGE6aW1hZ2Uvc3ZnK3htbDt1dGY4LCA8c3ZnIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCIgd2lkdGg9XFxcIjU0XFxcIiBoZWlnaHQ9XFxcIjE0XFxcIiB2aWV3Qm94PVxcXCIwIDAgNTQgMTRcXFwiPjxnIGZpbGw9XFxcIm5vbmVcXFwiIGZpbGxSdWxlPVxcXCJldmVub2RkXFxcIiB0cmFuc2Zvcm09XFxcInRyYW5zbGF0ZSgxIDEpXFxcIj48Y2lyY2xlIGN4PVxcXCI2XFxcIiBjeT1cXFwiNlxcXCIgcj1cXFwiNlxcXCIgZmlsbD1cXFwiJTIzRkY1RjU2XFxcIiBzdHJva2U9XFxcIiUyM0UwNDQzRVxcXCIgc3Ryb2tlV2lkdGg9XFxcIi41XFxcIiAvPjxjaXJjbGUgY3g9XFxcIjI2XFxcIiBjeT1cXFwiNlxcXCIgcj1cXFwiNlxcXCIgZmlsbD1cXFwiJTIzRkZCRDJFXFxcIiBzdHJva2U9XFxcIiUyM0RFQTEyM1xcXCIgc3Ryb2tlV2lkdGg9XFxcIi41XFxcIiAvPjxjaXJjbGUgY3g9XFxcIjQ2XFxcIiBjeT1cXFwiNlxcXCIgcj1cXFwiNlxcXCIgZmlsbD1cXFwiJTIzMjdDOTNGXFxcIiBzdHJva2U9XFxcIiUyMzFBQUIyOVxcXCIgc3Ryb2tlV2lkdGg9XFxcIi41XFxcIiAvPjwvZz48L3N2Zz4nKTtcXG4gIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQ7XFxuICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiAxNnB4IDE2cHg7XFxuICBib3gtc2hhZG93OiA1cHggNXB4IDE1cHggMHB4IHJnYmEoNTAsIDUwLCA1MCwgMC43NSk7XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FUX1JVTEVfSU1QT1JUXzBfX18gZnJvbSBcIi0hLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1jb2RlLWhpZ2hsaWdodC90aGVtZXMvcHJpc20tdG9tb3Jyb3cuY3NzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BVF9SVUxFX0lNUE9SVF8xX19fIGZyb20gXCItIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtY29kZS1oaWdobGlnaHQvdGhlbWVzL3dpbmRvdy5jc3NcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmkoX19fQ1NTX0xPQURFUl9BVF9SVUxFX0lNUE9SVF8wX19fKTtcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmkoX19fQ1NTX0xPQURFUl9BVF9SVUxFX0lNUE9SVF8xX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcImh0bWwge1xcbiAgc2Nyb2xsLXBhZGRpbmctdG9wOiA3MHB4O1xcbn1cXG5oMSB7XFxuICBmb250LWZhbWlseTogXFxcIkhlbm55IFBlbm55XFxcIiwgY3Vyc2l2ZTtcXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xcbiAgZm9udC1zaXplOiAzZW07XFxufVxcbmgyIHtcXG4gIGZvbnQtZmFtaWx5OiBcXFwiSW5kaWUgRmxvd2VyXFxcIiwgY3Vyc2l2ZTtcXG59XFxuaDI6OmFmdGVyIHtcXG4gIGNvbnRlbnQ6IFxcXCIgXFxcIjtcXG4gIGJhY2tncm91bmQtaW1hZ2U6IGxpbmVhci1ncmFkaWVudCh0byByaWdodCwgcmVkLCAjZmZhNjAwLCB5ZWxsb3csIGxpbWUsIGFxdWEsIGJsdWUsIGZ1Y2hzaWEsIHJlZCk7XFxuICBib3JkZXItcmFkaXVzOiA1cHg7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIGhlaWdodDogMnB4O1xcbn1cXG4udGFibGUgdGJvZHkgdGQgcHJlIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmYWZhZmEgIWltcG9ydGFudDtcXG4gIGJvcmRlci1yYWRpdXM6IDVweDtcXG4gIHBhZGRpbmc6IDFyZW07XFxuICB0YWItc2l6ZTogMjtcXG59XFxuLm9wdGlvbi10eXBlIHtcXG4gIGNvbG9yOiAjN2IxZmEzICFpbXBvcnRhbnQ7XFxuICBmb250LXdlaWdodDogNTAwO1xcbn1cXG4uYm9vbGVhbi1zdHlsZSB7XFxuICBjb2xvcjogYmx1ZSAhaW1wb3J0YW50O1xcbiAgZm9udC13ZWlnaHQ6IDUwMDtcXG59XFxuLnJhaW5ib3ctdGV4dCB7XFxuICAtd2Via2l0LWJhY2tncm91bmQtY2xpcDogdGV4dDtcXG4gIC13ZWJraXQtdGV4dC1maWxsLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIGJhY2tncm91bmQtY2xpcDogdGV4dDtcXG4gIGJhY2tncm91bmQtaW1hZ2U6IGxpbmVhci1ncmFkaWVudCh0byByaWdodCwgcmVkLCAjZmZhNjAwLCB5ZWxsb3csIGxpbWUsIGFxdWEsIGJsdWUsIGZ1Y2hzaWEsIHJlZCk7XFxuICBib3JkZXItcmFkaXVzOiA1cHg7XFxuICBjb2xvcjogdHJhbnNwYXJlbnQ7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICBmb250LXdlaWdodDogYm9sZDtcXG4gIGhlaWdodDogMTAwJTtcXG4gIHRleHQtc2hhZG93OiAwIDJweCAzcHggcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjMpLCAwIC0xcHggMnB4IHJnYmEoMCwgMCwgMCwgMC4yKTtcXG59XFxuLnJhaW5ib3ctYm9yZGVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMwMDA7XFxuICBib3JkZXItaW1hZ2U6IGxpbmVhci1ncmFkaWVudCh0byByaWdodCwgcmVkLCAjZmZhNjAwLCB5ZWxsb3csIGxpbWUsIGFxdWEsIGJsdWUsIGZ1Y2hzaWEsIHJlZCkgMTtcXG4gIGJvcmRlci1zdHlsZTogc29saWQ7XFxuICBib3JkZXItd2lkdGg6IDRweDtcXG4gIHBhZGRpbmc6IDJyZW07XFxufVwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL2RvY3MvVW5pY29ybkxvZy52dWVcIixcIndlYnBhY2s6Ly8uLy4uL1VuaWNvcm5Mb2cudnVlXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQW1uQkE7RUFDQyx3QkFBQTtBQ2huQkQ7QURtbkJBO0VBQ0MsbUNBQUE7RUFDQSxpQkFBQTtFQUNBLGNBQUE7QUNobkJEO0FEbW5CQTtFQUNDLG9DQUFBO0FDaG5CRDtBRGtuQkM7RUFDQyxZQUFBO0VBQ0EsaUdBM0JpQjtFQTRCakIsa0JBQUE7RUFDQSxjQUFBO0VBQ0EsV0FBQTtBQ2huQkY7QUR1bkJHO0VBQ0Msb0NBQUE7RUFDQSxrQkFBQTtFQUNBLGFBQUE7RUFDQSxXQUFBO0FDcG5CSjtBRDBuQkE7RUFDQyx5QkFBQTtFQUNBLGdCQUFBO0FDdm5CRDtBRDBuQkE7RUFDQyxzQkFBQTtFQUNBLGdCQUFBO0FDdm5CRDtBRDBuQkE7RUFDQyw2QkFBQTtFQUNBLG9DQUFBO0VBQ0EscUJBQUE7RUFDQSxpR0E3RGtCO0VBOERsQixrQkFBQTtFQUNBLGtCQUFBO0VBQ0EscUJBQUE7RUFDQSxpQkFBQTtFQUNBLFlBQUE7RUFDQSw4RUFBQTtBQ3ZuQkQ7QUQwbkJBO0VBQ0Msc0JBQUE7RUFDQSwrRkFBQTtFQUNBLG1CQUFBO0VBQ0EsaUJBQUE7RUFDQSxhQUFBO0FDdm5CRFwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJcXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5AaW1wb3J0ICd2dWUtY29kZS1oaWdobGlnaHQvdGhlbWVzL3ByaXNtLXRvbW9ycm93LmNzcyc7XFxuQGltcG9ydCAndnVlLWNvZGUtaGlnaGxpZ2h0L3RoZW1lcy93aW5kb3cuY3NzJztcXG5cXG4kcmFpbmJvdy1ncmFkaWVudDogbGluZWFyLWdyYWRpZW50KFxcblxcdHRvIHJpZ2h0LFxcblxcdGhzbCgwLCAxMDAlLCA1MCUpLFxcblxcdGhzbCgzOSwgMTAwJSwgNTAlKSxcXG5cXHRoc2woNjAsIDEwMCUsIDUwJSksXFxuXFx0aHNsKDEyMCwgMTAwJSwgNTAlKSxcXG5cXHRoc2woMTgwLCAxMDAlLCA1MCUpLFxcblxcdGhzbCgyNDAsIDEwMCUsIDUwJSksXFxuXFx0aHNsKDMwMCwgMTAwJSwgNTAlKSxcXG5cXHRoc2woMCwgMTAwJSwgNTAlKVxcbik7XFxuXFxuaHRtbCB7XFxuXFx0c2Nyb2xsLXBhZGRpbmctdG9wOiA3MHB4O1xcbn1cXG5cXG5oMSB7XFxuXFx0Zm9udC1mYW1pbHk6ICdIZW5ueSBQZW5ueScsIGN1cnNpdmU7XFxuXFx0Zm9udC13ZWlnaHQ6IGJvbGQ7XFxuXFx0Zm9udC1zaXplOiAzZW07XFxufVxcblxcbmgyIHtcXG5cXHRmb250LWZhbWlseTogJ0luZGllIEZsb3dlcicsIGN1cnNpdmU7XFxuXFxuXFx0Jjo6YWZ0ZXIge1xcblxcdFxcdGNvbnRlbnQ6ICcgJztcXG5cXHRcXHRiYWNrZ3JvdW5kLWltYWdlOiAkcmFpbmJvdy1ncmFkaWVudDtcXG5cXHRcXHRib3JkZXItcmFkaXVzOiA1cHg7XFxuXFx0XFx0ZGlzcGxheTogYmxvY2s7XFxuXFx0XFx0aGVpZ2h0OiAycHg7XFxuXFx0fVxcbn1cXG5cXG4udGFibGUge1xcblxcdHRib2R5IHtcXG5cXHRcXHR0ZCB7XFxuXFx0XFx0XFx0cHJlIHtcXG5cXHRcXHRcXHRcXHRiYWNrZ3JvdW5kLWNvbG9yOiAjZmFmYWZhICFpbXBvcnRhbnQ7XFxuXFx0XFx0XFx0XFx0Ym9yZGVyLXJhZGl1czogNXB4O1xcblxcdFxcdFxcdFxcdHBhZGRpbmc6IDFyZW07XFxuXFx0XFx0XFx0XFx0dGFiLXNpemU6IDI7XFxuXFx0XFx0XFx0fVxcblxcdFxcdH1cXG5cXHR9XFxufVxcblxcbi5vcHRpb24tdHlwZSB7XFxuXFx0Y29sb3I6IGhzbCgyODIsIDY4JSwgMzglKSAhaW1wb3J0YW50O1xcblxcdGZvbnQtd2VpZ2h0OiA1MDA7XFxufVxcblxcbi5ib29sZWFuLXN0eWxlIHtcXG5cXHRjb2xvcjogaHNsKDI0MCwgMTAwJSwgNTAlKSAhaW1wb3J0YW50O1xcblxcdGZvbnQtd2VpZ2h0OiA1MDA7XFxufVxcblxcbi5yYWluYm93LXRleHQge1xcblxcdC13ZWJraXQtYmFja2dyb3VuZC1jbGlwOiB0ZXh0O1xcblxcdC13ZWJraXQtdGV4dC1maWxsLWNvbG9yOiB0cmFuc3BhcmVudDtcXG5cXHRiYWNrZ3JvdW5kLWNsaXA6IHRleHQ7XFxuXFx0YmFja2dyb3VuZC1pbWFnZTogJHJhaW5ib3ctZ3JhZGllbnQ7XFxuXFx0Ym9yZGVyLXJhZGl1czogNXB4O1xcblxcdGNvbG9yOiB0cmFuc3BhcmVudDtcXG5cXHRkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuXFx0Zm9udC13ZWlnaHQ6IGJvbGQ7XFxuXFx0aGVpZ2h0OiAxMDAlO1xcblxcdHRleHQtc2hhZG93OiAwIDJweCAzcHggcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjMpLCAwIC0xcHggMnB4IHJnYmEoMCwgMCwgMCwgMC4yKTtcXG59XFxuXFxuLnJhaW5ib3ctYm9yZGVyIHtcXG5cXHRiYWNrZ3JvdW5kLWNvbG9yOiAjMDAwO1xcblxcdGJvcmRlci1pbWFnZTogJHJhaW5ib3ctZ3JhZGllbnQgMTtcXG5cXHRib3JkZXItc3R5bGU6IHNvbGlkO1xcblxcdGJvcmRlci13aWR0aDogNHB4O1xcblxcdHBhZGRpbmc6IDJyZW07XFxufVxcblwiLFwiQGltcG9ydCAndnVlLWNvZGUtaGlnaGxpZ2h0L3RoZW1lcy9wcmlzbS10b21vcnJvdy5jc3MnO1xcbkBpbXBvcnQgJ3Z1ZS1jb2RlLWhpZ2hsaWdodC90aGVtZXMvd2luZG93LmNzcyc7XFxuaHRtbCB7XFxuICBzY3JvbGwtcGFkZGluZy10b3A6IDcwcHg7XFxufVxcblxcbmgxIHtcXG4gIGZvbnQtZmFtaWx5OiBcXFwiSGVubnkgUGVubnlcXFwiLCBjdXJzaXZlO1xcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxuICBmb250LXNpemU6IDNlbTtcXG59XFxuXFxuaDIge1xcbiAgZm9udC1mYW1pbHk6IFxcXCJJbmRpZSBGbG93ZXJcXFwiLCBjdXJzaXZlO1xcbn1cXG5oMjo6YWZ0ZXIge1xcbiAgY29udGVudDogXFxcIiBcXFwiO1xcbiAgYmFja2dyb3VuZC1pbWFnZTogbGluZWFyLWdyYWRpZW50KHRvIHJpZ2h0LCByZWQsICNmZmE2MDAsIHllbGxvdywgbGltZSwgYXF1YSwgYmx1ZSwgZnVjaHNpYSwgcmVkKTtcXG4gIGJvcmRlci1yYWRpdXM6IDVweDtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgaGVpZ2h0OiAycHg7XFxufVxcblxcbi50YWJsZSB0Ym9keSB0ZCBwcmUge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZhZmFmYSAhaW1wb3J0YW50O1xcbiAgYm9yZGVyLXJhZGl1czogNXB4O1xcbiAgcGFkZGluZzogMXJlbTtcXG4gIHRhYi1zaXplOiAyO1xcbn1cXG5cXG4ub3B0aW9uLXR5cGUge1xcbiAgY29sb3I6ICM3YjFmYTMgIWltcG9ydGFudDtcXG4gIGZvbnQtd2VpZ2h0OiA1MDA7XFxufVxcblxcbi5ib29sZWFuLXN0eWxlIHtcXG4gIGNvbG9yOiBibHVlICFpbXBvcnRhbnQ7XFxuICBmb250LXdlaWdodDogNTAwO1xcbn1cXG5cXG4ucmFpbmJvdy10ZXh0IHtcXG4gIC13ZWJraXQtYmFja2dyb3VuZC1jbGlwOiB0ZXh0O1xcbiAgLXdlYmtpdC10ZXh0LWZpbGwtY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgYmFja2dyb3VuZC1jbGlwOiB0ZXh0O1xcbiAgYmFja2dyb3VuZC1pbWFnZTogbGluZWFyLWdyYWRpZW50KHRvIHJpZ2h0LCByZWQsICNmZmE2MDAsIHllbGxvdywgbGltZSwgYXF1YSwgYmx1ZSwgZnVjaHNpYSwgcmVkKTtcXG4gIGJvcmRlci1yYWRpdXM6IDVweDtcXG4gIGNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xcbiAgaGVpZ2h0OiAxMDAlO1xcbiAgdGV4dC1zaGFkb3c6IDAgMnB4IDNweCByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMyksIDAgLTFweCAycHggcmdiYSgwLCAwLCAwLCAwLjIpO1xcbn1cXG5cXG4ucmFpbmJvdy1ib3JkZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzAwMDtcXG4gIGJvcmRlci1pbWFnZTogbGluZWFyLWdyYWRpZW50KHRvIHJpZ2h0LCByZWQsICNmZmE2MDAsIHllbGxvdywgbGltZSwgYXF1YSwgYmx1ZSwgZnVjaHNpYSwgcmVkKSAxO1xcbiAgYm9yZGVyLXN0eWxlOiBzb2xpZDtcXG4gIGJvcmRlci13aWR0aDogNHB4O1xcbiAgcGFkZGluZzogMnJlbTtcXG59XCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzV2l0aE1hcHBpbmdUb1N0cmluZykge1xuICB2YXIgbGlzdCA9IFtdOyAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG5cbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBcIlwiO1xuICAgICAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBpdGVtWzVdICE9PSBcInVuZGVmaW5lZFwiO1xuXG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpO1xuICAgICAgfVxuXG4gICAgICBjb250ZW50ICs9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG5cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cblxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cblxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbihcIlwiKTtcbiAgfTsgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcblxuXG4gIGxpc3QuaSA9IGZ1bmN0aW9uIGkobW9kdWxlcywgbWVkaWEsIGRlZHVwZSwgc3VwcG9ydHMsIGxheWVyKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCB1bmRlZmluZWRdXTtcbiAgICB9XG5cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuXG4gICAgaWYgKGRlZHVwZSkge1xuICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCB0aGlzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgIHZhciBpZCA9IHRoaXNba11bMF07XG5cbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBfayA9IDA7IF9rIDwgbW9kdWxlcy5sZW5ndGg7IF9rKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2tdKTtcblxuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGxheWVyICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaXRlbVs1XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAobWVkaWEpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoc3VwcG9ydHMpIHtcbiAgICAgICAgaWYgKCFpdGVtWzRdKSB7XG4gICAgICAgICAgaXRlbVs0XSA9IFwiXCIuY29uY2F0KHN1cHBvcnRzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNF0gPSBzdXBwb3J0cztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBsaXN0O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodXJsLCBvcHRpb25zKSB7XG4gIGlmICghb3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIGlmICghdXJsKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfVxuXG4gIHVybCA9IFN0cmluZyh1cmwuX19lc01vZHVsZSA/IHVybC5kZWZhdWx0IDogdXJsKTsgLy8gSWYgdXJsIGlzIGFscmVhZHkgd3JhcHBlZCBpbiBxdW90ZXMsIHJlbW92ZSB0aGVtXG5cbiAgaWYgKC9eWydcIl0uKlsnXCJdJC8udGVzdCh1cmwpKSB7XG4gICAgdXJsID0gdXJsLnNsaWNlKDEsIC0xKTtcbiAgfVxuXG4gIGlmIChvcHRpb25zLmhhc2gpIHtcbiAgICB1cmwgKz0gb3B0aW9ucy5oYXNoO1xuICB9IC8vIFNob3VsZCB1cmwgYmUgd3JhcHBlZD9cbiAgLy8gU2VlIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3MtdmFsdWVzLTMvI3VybHNcblxuXG4gIGlmICgvW1wiJygpIFxcdFxcbl18KCUyMCkvLnRlc3QodXJsKSB8fCBvcHRpb25zLm5lZWRRdW90ZXMpIHtcbiAgICByZXR1cm4gXCJcXFwiXCIuY29uY2F0KHVybC5yZXBsYWNlKC9cIi9nLCAnXFxcXFwiJykucmVwbGFjZSgvXFxuL2csIFwiXFxcXG5cIiksIFwiXFxcIlwiKTtcbiAgfVxuXG4gIHJldHVybiB1cmw7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVtKSB7XG4gIHZhciBjb250ZW50ID0gaXRlbVsxXTtcbiAgdmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuXG4gIGlmICghY3NzTWFwcGluZykge1xuICAgIHJldHVybiBjb250ZW50O1xuICB9XG5cbiAgaWYgKHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoY3NzTWFwcGluZykpKSk7XG4gICAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xuICAgIHZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICByZXR1cm4gXCIvKiMgc291cmNlVVJMPVwiLmNvbmNhdChjc3NNYXBwaW5nLnNvdXJjZVJvb3QgfHwgXCJcIikuY29uY2F0KHNvdXJjZSwgXCIgKi9cIik7XG4gICAgfSk7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoc291cmNlVVJMcykuY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbihcIlxcblwiKTtcbiAgfVxuXG4gIHJldHVybiBbY29udGVudF0uam9pbihcIlxcblwiKTtcbn07IiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFIgPSB0eXBlb2YgUmVmbGVjdCA9PT0gJ29iamVjdCcgPyBSZWZsZWN0IDogbnVsbFxudmFyIFJlZmxlY3RBcHBseSA9IFIgJiYgdHlwZW9mIFIuYXBwbHkgPT09ICdmdW5jdGlvbidcbiAgPyBSLmFwcGx5XG4gIDogZnVuY3Rpb24gUmVmbGVjdEFwcGx5KHRhcmdldCwgcmVjZWl2ZXIsIGFyZ3MpIHtcbiAgICByZXR1cm4gRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5LmNhbGwodGFyZ2V0LCByZWNlaXZlciwgYXJncyk7XG4gIH1cblxudmFyIFJlZmxlY3RPd25LZXlzXG5pZiAoUiAmJiB0eXBlb2YgUi5vd25LZXlzID09PSAnZnVuY3Rpb24nKSB7XG4gIFJlZmxlY3RPd25LZXlzID0gUi5vd25LZXlzXG59IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgUmVmbGVjdE93bktleXMgPSBmdW5jdGlvbiBSZWZsZWN0T3duS2V5cyh0YXJnZXQpIHtcbiAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGFyZ2V0KVxuICAgICAgLmNvbmNhdChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHRhcmdldCkpO1xuICB9O1xufSBlbHNlIHtcbiAgUmVmbGVjdE93bktleXMgPSBmdW5jdGlvbiBSZWZsZWN0T3duS2V5cyh0YXJnZXQpIHtcbiAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGFyZ2V0KTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gUHJvY2Vzc0VtaXRXYXJuaW5nKHdhcm5pbmcpIHtcbiAgaWYgKGNvbnNvbGUgJiYgY29uc29sZS53YXJuKSBjb25zb2xlLndhcm4od2FybmluZyk7XG59XG5cbnZhciBOdW1iZXJJc05hTiA9IE51bWJlci5pc05hTiB8fCBmdW5jdGlvbiBOdW1iZXJJc05hTih2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT09IHZhbHVlO1xufVxuXG5mdW5jdGlvbiBFdmVudEVtaXR0ZXIoKSB7XG4gIEV2ZW50RW1pdHRlci5pbml0LmNhbGwodGhpcyk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IEV2ZW50RW1pdHRlcjtcbm1vZHVsZS5leHBvcnRzLm9uY2UgPSBvbmNlO1xuXG4vLyBCYWNrd2FyZHMtY29tcGF0IHdpdGggbm9kZSAwLjEwLnhcbkV2ZW50RW1pdHRlci5FdmVudEVtaXR0ZXIgPSBFdmVudEVtaXR0ZXI7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX2V2ZW50cyA9IHVuZGVmaW5lZDtcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX2V2ZW50c0NvdW50ID0gMDtcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX21heExpc3RlbmVycyA9IHVuZGVmaW5lZDtcblxuLy8gQnkgZGVmYXVsdCBFdmVudEVtaXR0ZXJzIHdpbGwgcHJpbnQgYSB3YXJuaW5nIGlmIG1vcmUgdGhhbiAxMCBsaXN0ZW5lcnMgYXJlXG4vLyBhZGRlZCB0byBpdC4gVGhpcyBpcyBhIHVzZWZ1bCBkZWZhdWx0IHdoaWNoIGhlbHBzIGZpbmRpbmcgbWVtb3J5IGxlYWtzLlxudmFyIGRlZmF1bHRNYXhMaXN0ZW5lcnMgPSAxMDtcblxuZnVuY3Rpb24gY2hlY2tMaXN0ZW5lcihsaXN0ZW5lcikge1xuICBpZiAodHlwZW9mIGxpc3RlbmVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwibGlzdGVuZXJcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgRnVuY3Rpb24uIFJlY2VpdmVkIHR5cGUgJyArIHR5cGVvZiBsaXN0ZW5lcik7XG4gIH1cbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KEV2ZW50RW1pdHRlciwgJ2RlZmF1bHRNYXhMaXN0ZW5lcnMnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGRlZmF1bHRNYXhMaXN0ZW5lcnM7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24oYXJnKSB7XG4gICAgaWYgKHR5cGVvZiBhcmcgIT09ICdudW1iZXInIHx8IGFyZyA8IDAgfHwgTnVtYmVySXNOYU4oYXJnKSkge1xuICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RoZSB2YWx1ZSBvZiBcImRlZmF1bHRNYXhMaXN0ZW5lcnNcIiBpcyBvdXQgb2YgcmFuZ2UuIEl0IG11c3QgYmUgYSBub24tbmVnYXRpdmUgbnVtYmVyLiBSZWNlaXZlZCAnICsgYXJnICsgJy4nKTtcbiAgICB9XG4gICAgZGVmYXVsdE1heExpc3RlbmVycyA9IGFyZztcbiAgfVxufSk7XG5cbkV2ZW50RW1pdHRlci5pbml0ID0gZnVuY3Rpb24oKSB7XG5cbiAgaWYgKHRoaXMuX2V2ZW50cyA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICB0aGlzLl9ldmVudHMgPT09IE9iamVjdC5nZXRQcm90b3R5cGVPZih0aGlzKS5fZXZlbnRzKSB7XG4gICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB0aGlzLl9ldmVudHNDb3VudCA9IDA7XG4gIH1cblxuICB0aGlzLl9tYXhMaXN0ZW5lcnMgPSB0aGlzLl9tYXhMaXN0ZW5lcnMgfHwgdW5kZWZpbmVkO1xufTtcblxuLy8gT2J2aW91c2x5IG5vdCBhbGwgRW1pdHRlcnMgc2hvdWxkIGJlIGxpbWl0ZWQgdG8gMTAuIFRoaXMgZnVuY3Rpb24gYWxsb3dzXG4vLyB0aGF0IHRvIGJlIGluY3JlYXNlZC4gU2V0IHRvIHplcm8gZm9yIHVubGltaXRlZC5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuc2V0TWF4TGlzdGVuZXJzID0gZnVuY3Rpb24gc2V0TWF4TGlzdGVuZXJzKG4pIHtcbiAgaWYgKHR5cGVvZiBuICE9PSAnbnVtYmVyJyB8fCBuIDwgMCB8fCBOdW1iZXJJc05hTihuKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdUaGUgdmFsdWUgb2YgXCJuXCIgaXMgb3V0IG9mIHJhbmdlLiBJdCBtdXN0IGJlIGEgbm9uLW5lZ2F0aXZlIG51bWJlci4gUmVjZWl2ZWQgJyArIG4gKyAnLicpO1xuICB9XG4gIHRoaXMuX21heExpc3RlbmVycyA9IG47XG4gIHJldHVybiB0aGlzO1xufTtcblxuZnVuY3Rpb24gX2dldE1heExpc3RlbmVycyh0aGF0KSB7XG4gIGlmICh0aGF0Ll9tYXhMaXN0ZW5lcnMgPT09IHVuZGVmaW5lZClcbiAgICByZXR1cm4gRXZlbnRFbWl0dGVyLmRlZmF1bHRNYXhMaXN0ZW5lcnM7XG4gIHJldHVybiB0aGF0Ll9tYXhMaXN0ZW5lcnM7XG59XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZ2V0TWF4TGlzdGVuZXJzID0gZnVuY3Rpb24gZ2V0TWF4TGlzdGVuZXJzKCkge1xuICByZXR1cm4gX2dldE1heExpc3RlbmVycyh0aGlzKTtcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZW1pdCA9IGZ1bmN0aW9uIGVtaXQodHlwZSkge1xuICB2YXIgYXJncyA9IFtdO1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgYXJncy5wdXNoKGFyZ3VtZW50c1tpXSk7XG4gIHZhciBkb0Vycm9yID0gKHR5cGUgPT09ICdlcnJvcicpO1xuXG4gIHZhciBldmVudHMgPSB0aGlzLl9ldmVudHM7XG4gIGlmIChldmVudHMgIT09IHVuZGVmaW5lZClcbiAgICBkb0Vycm9yID0gKGRvRXJyb3IgJiYgZXZlbnRzLmVycm9yID09PSB1bmRlZmluZWQpO1xuICBlbHNlIGlmICghZG9FcnJvcilcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgLy8gSWYgdGhlcmUgaXMgbm8gJ2Vycm9yJyBldmVudCBsaXN0ZW5lciB0aGVuIHRocm93LlxuICBpZiAoZG9FcnJvcikge1xuICAgIHZhciBlcjtcbiAgICBpZiAoYXJncy5sZW5ndGggPiAwKVxuICAgICAgZXIgPSBhcmdzWzBdO1xuICAgIGlmIChlciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAvLyBOb3RlOiBUaGUgY29tbWVudHMgb24gdGhlIGB0aHJvd2AgbGluZXMgYXJlIGludGVudGlvbmFsLCB0aGV5IHNob3dcbiAgICAgIC8vIHVwIGluIE5vZGUncyBvdXRwdXQgaWYgdGhpcyByZXN1bHRzIGluIGFuIHVuaGFuZGxlZCBleGNlcHRpb24uXG4gICAgICB0aHJvdyBlcjsgLy8gVW5oYW5kbGVkICdlcnJvcicgZXZlbnRcbiAgICB9XG4gICAgLy8gQXQgbGVhc3QgZ2l2ZSBzb21lIGtpbmQgb2YgY29udGV4dCB0byB0aGUgdXNlclxuICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoJ1VuaGFuZGxlZCBlcnJvci4nICsgKGVyID8gJyAoJyArIGVyLm1lc3NhZ2UgKyAnKScgOiAnJykpO1xuICAgIGVyci5jb250ZXh0ID0gZXI7XG4gICAgdGhyb3cgZXJyOyAvLyBVbmhhbmRsZWQgJ2Vycm9yJyBldmVudFxuICB9XG5cbiAgdmFyIGhhbmRsZXIgPSBldmVudHNbdHlwZV07XG5cbiAgaWYgKGhhbmRsZXIgPT09IHVuZGVmaW5lZClcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgaWYgKHR5cGVvZiBoYW5kbGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgUmVmbGVjdEFwcGx5KGhhbmRsZXIsIHRoaXMsIGFyZ3MpO1xuICB9IGVsc2Uge1xuICAgIHZhciBsZW4gPSBoYW5kbGVyLmxlbmd0aDtcbiAgICB2YXIgbGlzdGVuZXJzID0gYXJyYXlDbG9uZShoYW5kbGVyLCBsZW4pO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpXG4gICAgICBSZWZsZWN0QXBwbHkobGlzdGVuZXJzW2ldLCB0aGlzLCBhcmdzKTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufTtcblxuZnVuY3Rpb24gX2FkZExpc3RlbmVyKHRhcmdldCwgdHlwZSwgbGlzdGVuZXIsIHByZXBlbmQpIHtcbiAgdmFyIG07XG4gIHZhciBldmVudHM7XG4gIHZhciBleGlzdGluZztcblxuICBjaGVja0xpc3RlbmVyKGxpc3RlbmVyKTtcblxuICBldmVudHMgPSB0YXJnZXQuX2V2ZW50cztcbiAgaWYgKGV2ZW50cyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZXZlbnRzID0gdGFyZ2V0Ll9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRhcmdldC5fZXZlbnRzQ291bnQgPSAwO1xuICB9IGVsc2Uge1xuICAgIC8vIFRvIGF2b2lkIHJlY3Vyc2lvbiBpbiB0aGUgY2FzZSB0aGF0IHR5cGUgPT09IFwibmV3TGlzdGVuZXJcIiEgQmVmb3JlXG4gICAgLy8gYWRkaW5nIGl0IHRvIHRoZSBsaXN0ZW5lcnMsIGZpcnN0IGVtaXQgXCJuZXdMaXN0ZW5lclwiLlxuICAgIGlmIChldmVudHMubmV3TGlzdGVuZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGFyZ2V0LmVtaXQoJ25ld0xpc3RlbmVyJywgdHlwZSxcbiAgICAgICAgICAgICAgICAgIGxpc3RlbmVyLmxpc3RlbmVyID8gbGlzdGVuZXIubGlzdGVuZXIgOiBsaXN0ZW5lcik7XG5cbiAgICAgIC8vIFJlLWFzc2lnbiBgZXZlbnRzYCBiZWNhdXNlIGEgbmV3TGlzdGVuZXIgaGFuZGxlciBjb3VsZCBoYXZlIGNhdXNlZCB0aGVcbiAgICAgIC8vIHRoaXMuX2V2ZW50cyB0byBiZSBhc3NpZ25lZCB0byBhIG5ldyBvYmplY3RcbiAgICAgIGV2ZW50cyA9IHRhcmdldC5fZXZlbnRzO1xuICAgIH1cbiAgICBleGlzdGluZyA9IGV2ZW50c1t0eXBlXTtcbiAgfVxuXG4gIGlmIChleGlzdGluZyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gT3B0aW1pemUgdGhlIGNhc2Ugb2Ygb25lIGxpc3RlbmVyLiBEb24ndCBuZWVkIHRoZSBleHRyYSBhcnJheSBvYmplY3QuXG4gICAgZXhpc3RpbmcgPSBldmVudHNbdHlwZV0gPSBsaXN0ZW5lcjtcbiAgICArK3RhcmdldC5fZXZlbnRzQ291bnQ7XG4gIH0gZWxzZSB7XG4gICAgaWYgKHR5cGVvZiBleGlzdGluZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgLy8gQWRkaW5nIHRoZSBzZWNvbmQgZWxlbWVudCwgbmVlZCB0byBjaGFuZ2UgdG8gYXJyYXkuXG4gICAgICBleGlzdGluZyA9IGV2ZW50c1t0eXBlXSA9XG4gICAgICAgIHByZXBlbmQgPyBbbGlzdGVuZXIsIGV4aXN0aW5nXSA6IFtleGlzdGluZywgbGlzdGVuZXJdO1xuICAgICAgLy8gSWYgd2UndmUgYWxyZWFkeSBnb3QgYW4gYXJyYXksIGp1c3QgYXBwZW5kLlxuICAgIH0gZWxzZSBpZiAocHJlcGVuZCkge1xuICAgICAgZXhpc3RpbmcudW5zaGlmdChsaXN0ZW5lcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGV4aXN0aW5nLnB1c2gobGlzdGVuZXIpO1xuICAgIH1cblxuICAgIC8vIENoZWNrIGZvciBsaXN0ZW5lciBsZWFrXG4gICAgbSA9IF9nZXRNYXhMaXN0ZW5lcnModGFyZ2V0KTtcbiAgICBpZiAobSA+IDAgJiYgZXhpc3RpbmcubGVuZ3RoID4gbSAmJiAhZXhpc3Rpbmcud2FybmVkKSB7XG4gICAgICBleGlzdGluZy53YXJuZWQgPSB0cnVlO1xuICAgICAgLy8gTm8gZXJyb3IgY29kZSBmb3IgdGhpcyBzaW5jZSBpdCBpcyBhIFdhcm5pbmdcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheFxuICAgICAgdmFyIHcgPSBuZXcgRXJyb3IoJ1Bvc3NpYmxlIEV2ZW50RW1pdHRlciBtZW1vcnkgbGVhayBkZXRlY3RlZC4gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGV4aXN0aW5nLmxlbmd0aCArICcgJyArIFN0cmluZyh0eXBlKSArICcgbGlzdGVuZXJzICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAnYWRkZWQuIFVzZSBlbWl0dGVyLnNldE1heExpc3RlbmVycygpIHRvICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAnaW5jcmVhc2UgbGltaXQnKTtcbiAgICAgIHcubmFtZSA9ICdNYXhMaXN0ZW5lcnNFeGNlZWRlZFdhcm5pbmcnO1xuICAgICAgdy5lbWl0dGVyID0gdGFyZ2V0O1xuICAgICAgdy50eXBlID0gdHlwZTtcbiAgICAgIHcuY291bnQgPSBleGlzdGluZy5sZW5ndGg7XG4gICAgICBQcm9jZXNzRW1pdFdhcm5pbmcodyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5hZGRMaXN0ZW5lciA9IGZ1bmN0aW9uIGFkZExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKSB7XG4gIHJldHVybiBfYWRkTGlzdGVuZXIodGhpcywgdHlwZSwgbGlzdGVuZXIsIGZhbHNlKTtcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub24gPSBFdmVudEVtaXR0ZXIucHJvdG90eXBlLmFkZExpc3RlbmVyO1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnByZXBlbmRMaXN0ZW5lciA9XG4gICAgZnVuY3Rpb24gcHJlcGVuZExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgICByZXR1cm4gX2FkZExpc3RlbmVyKHRoaXMsIHR5cGUsIGxpc3RlbmVyLCB0cnVlKTtcbiAgICB9O1xuXG5mdW5jdGlvbiBvbmNlV3JhcHBlcigpIHtcbiAgaWYgKCF0aGlzLmZpcmVkKSB7XG4gICAgdGhpcy50YXJnZXQucmVtb3ZlTGlzdGVuZXIodGhpcy50eXBlLCB0aGlzLndyYXBGbik7XG4gICAgdGhpcy5maXJlZCA9IHRydWU7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApXG4gICAgICByZXR1cm4gdGhpcy5saXN0ZW5lci5jYWxsKHRoaXMudGFyZ2V0KTtcbiAgICByZXR1cm4gdGhpcy5saXN0ZW5lci5hcHBseSh0aGlzLnRhcmdldCwgYXJndW1lbnRzKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfb25jZVdyYXAodGFyZ2V0LCB0eXBlLCBsaXN0ZW5lcikge1xuICB2YXIgc3RhdGUgPSB7IGZpcmVkOiBmYWxzZSwgd3JhcEZuOiB1bmRlZmluZWQsIHRhcmdldDogdGFyZ2V0LCB0eXBlOiB0eXBlLCBsaXN0ZW5lcjogbGlzdGVuZXIgfTtcbiAgdmFyIHdyYXBwZWQgPSBvbmNlV3JhcHBlci5iaW5kKHN0YXRlKTtcbiAgd3JhcHBlZC5saXN0ZW5lciA9IGxpc3RlbmVyO1xuICBzdGF0ZS53cmFwRm4gPSB3cmFwcGVkO1xuICByZXR1cm4gd3JhcHBlZDtcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbmNlID0gZnVuY3Rpb24gb25jZSh0eXBlLCBsaXN0ZW5lcikge1xuICBjaGVja0xpc3RlbmVyKGxpc3RlbmVyKTtcbiAgdGhpcy5vbih0eXBlLCBfb25jZVdyYXAodGhpcywgdHlwZSwgbGlzdGVuZXIpKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnByZXBlbmRPbmNlTGlzdGVuZXIgPVxuICAgIGZ1bmN0aW9uIHByZXBlbmRPbmNlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgIGNoZWNrTGlzdGVuZXIobGlzdGVuZXIpO1xuICAgICAgdGhpcy5wcmVwZW5kTGlzdGVuZXIodHlwZSwgX29uY2VXcmFwKHRoaXMsIHR5cGUsIGxpc3RlbmVyKSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4vLyBFbWl0cyBhICdyZW1vdmVMaXN0ZW5lcicgZXZlbnQgaWYgYW5kIG9ubHkgaWYgdGhlIGxpc3RlbmVyIHdhcyByZW1vdmVkLlxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lciA9XG4gICAgZnVuY3Rpb24gcmVtb3ZlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgIHZhciBsaXN0LCBldmVudHMsIHBvc2l0aW9uLCBpLCBvcmlnaW5hbExpc3RlbmVyO1xuXG4gICAgICBjaGVja0xpc3RlbmVyKGxpc3RlbmVyKTtcblxuICAgICAgZXZlbnRzID0gdGhpcy5fZXZlbnRzO1xuICAgICAgaWYgKGV2ZW50cyA9PT0gdW5kZWZpbmVkKVxuICAgICAgICByZXR1cm4gdGhpcztcblxuICAgICAgbGlzdCA9IGV2ZW50c1t0eXBlXTtcbiAgICAgIGlmIChsaXN0ID09PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICBpZiAobGlzdCA9PT0gbGlzdGVuZXIgfHwgbGlzdC5saXN0ZW5lciA9PT0gbGlzdGVuZXIpIHtcbiAgICAgICAgaWYgKC0tdGhpcy5fZXZlbnRzQ291bnQgPT09IDApXG4gICAgICAgICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgZGVsZXRlIGV2ZW50c1t0eXBlXTtcbiAgICAgICAgICBpZiAoZXZlbnRzLnJlbW92ZUxpc3RlbmVyKVxuICAgICAgICAgICAgdGhpcy5lbWl0KCdyZW1vdmVMaXN0ZW5lcicsIHR5cGUsIGxpc3QubGlzdGVuZXIgfHwgbGlzdGVuZXIpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBsaXN0ICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHBvc2l0aW9uID0gLTE7XG5cbiAgICAgICAgZm9yIChpID0gbGlzdC5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgIGlmIChsaXN0W2ldID09PSBsaXN0ZW5lciB8fCBsaXN0W2ldLmxpc3RlbmVyID09PSBsaXN0ZW5lcikge1xuICAgICAgICAgICAgb3JpZ2luYWxMaXN0ZW5lciA9IGxpc3RbaV0ubGlzdGVuZXI7XG4gICAgICAgICAgICBwb3NpdGlvbiA9IGk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocG9zaXRpb24gPCAwKVxuICAgICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICAgIGlmIChwb3NpdGlvbiA9PT0gMClcbiAgICAgICAgICBsaXN0LnNoaWZ0KCk7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHNwbGljZU9uZShsaXN0LCBwb3NpdGlvbik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobGlzdC5sZW5ndGggPT09IDEpXG4gICAgICAgICAgZXZlbnRzW3R5cGVdID0gbGlzdFswXTtcblxuICAgICAgICBpZiAoZXZlbnRzLnJlbW92ZUxpc3RlbmVyICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgdGhpcy5lbWl0KCdyZW1vdmVMaXN0ZW5lcicsIHR5cGUsIG9yaWdpbmFsTGlzdGVuZXIgfHwgbGlzdGVuZXIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9mZiA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXI7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzID1cbiAgICBmdW5jdGlvbiByZW1vdmVBbGxMaXN0ZW5lcnModHlwZSkge1xuICAgICAgdmFyIGxpc3RlbmVycywgZXZlbnRzLCBpO1xuXG4gICAgICBldmVudHMgPSB0aGlzLl9ldmVudHM7XG4gICAgICBpZiAoZXZlbnRzID09PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICAvLyBub3QgbGlzdGVuaW5nIGZvciByZW1vdmVMaXN0ZW5lciwgbm8gbmVlZCB0byBlbWl0XG4gICAgICBpZiAoZXZlbnRzLnJlbW92ZUxpc3RlbmVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICAgIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcbiAgICAgICAgfSBlbHNlIGlmIChldmVudHNbdHlwZV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGlmICgtLXRoaXMuX2V2ZW50c0NvdW50ID09PSAwKVxuICAgICAgICAgICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgICBlbHNlXG4gICAgICAgICAgICBkZWxldGUgZXZlbnRzW3R5cGVdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICAvLyBlbWl0IHJlbW92ZUxpc3RlbmVyIGZvciBhbGwgbGlzdGVuZXJzIG9uIGFsbCBldmVudHNcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoZXZlbnRzKTtcbiAgICAgICAgdmFyIGtleTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICBrZXkgPSBrZXlzW2ldO1xuICAgICAgICAgIGlmIChrZXkgPT09ICdyZW1vdmVMaXN0ZW5lcicpIGNvbnRpbnVlO1xuICAgICAgICAgIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoJ3JlbW92ZUxpc3RlbmVyJyk7XG4gICAgICAgIHRoaXMuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIGxpc3RlbmVycyA9IGV2ZW50c1t0eXBlXTtcblxuICAgICAgaWYgKHR5cGVvZiBsaXN0ZW5lcnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcnMpO1xuICAgICAgfSBlbHNlIGlmIChsaXN0ZW5lcnMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAvLyBMSUZPIG9yZGVyXG4gICAgICAgIGZvciAoaSA9IGxpc3RlbmVycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXJzW2ldKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG5mdW5jdGlvbiBfbGlzdGVuZXJzKHRhcmdldCwgdHlwZSwgdW53cmFwKSB7XG4gIHZhciBldmVudHMgPSB0YXJnZXQuX2V2ZW50cztcblxuICBpZiAoZXZlbnRzID09PSB1bmRlZmluZWQpXG4gICAgcmV0dXJuIFtdO1xuXG4gIHZhciBldmxpc3RlbmVyID0gZXZlbnRzW3R5cGVdO1xuICBpZiAoZXZsaXN0ZW5lciA9PT0gdW5kZWZpbmVkKVxuICAgIHJldHVybiBbXTtcblxuICBpZiAodHlwZW9mIGV2bGlzdGVuZXIgPT09ICdmdW5jdGlvbicpXG4gICAgcmV0dXJuIHVud3JhcCA/IFtldmxpc3RlbmVyLmxpc3RlbmVyIHx8IGV2bGlzdGVuZXJdIDogW2V2bGlzdGVuZXJdO1xuXG4gIHJldHVybiB1bndyYXAgP1xuICAgIHVud3JhcExpc3RlbmVycyhldmxpc3RlbmVyKSA6IGFycmF5Q2xvbmUoZXZsaXN0ZW5lciwgZXZsaXN0ZW5lci5sZW5ndGgpO1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmxpc3RlbmVycyA9IGZ1bmN0aW9uIGxpc3RlbmVycyh0eXBlKSB7XG4gIHJldHVybiBfbGlzdGVuZXJzKHRoaXMsIHR5cGUsIHRydWUpO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yYXdMaXN0ZW5lcnMgPSBmdW5jdGlvbiByYXdMaXN0ZW5lcnModHlwZSkge1xuICByZXR1cm4gX2xpc3RlbmVycyh0aGlzLCB0eXBlLCBmYWxzZSk7XG59O1xuXG5FdmVudEVtaXR0ZXIubGlzdGVuZXJDb3VudCA9IGZ1bmN0aW9uKGVtaXR0ZXIsIHR5cGUpIHtcbiAgaWYgKHR5cGVvZiBlbWl0dGVyLmxpc3RlbmVyQ291bnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gZW1pdHRlci5saXN0ZW5lckNvdW50KHR5cGUpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBsaXN0ZW5lckNvdW50LmNhbGwoZW1pdHRlciwgdHlwZSk7XG4gIH1cbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJDb3VudCA9IGxpc3RlbmVyQ291bnQ7XG5mdW5jdGlvbiBsaXN0ZW5lckNvdW50KHR5cGUpIHtcbiAgdmFyIGV2ZW50cyA9IHRoaXMuX2V2ZW50cztcblxuICBpZiAoZXZlbnRzICE9PSB1bmRlZmluZWQpIHtcbiAgICB2YXIgZXZsaXN0ZW5lciA9IGV2ZW50c1t0eXBlXTtcblxuICAgIGlmICh0eXBlb2YgZXZsaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIDE7XG4gICAgfSBlbHNlIGlmIChldmxpc3RlbmVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBldmxpc3RlbmVyLmxlbmd0aDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gMDtcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5ldmVudE5hbWVzID0gZnVuY3Rpb24gZXZlbnROYW1lcygpIHtcbiAgcmV0dXJuIHRoaXMuX2V2ZW50c0NvdW50ID4gMCA/IFJlZmxlY3RPd25LZXlzKHRoaXMuX2V2ZW50cykgOiBbXTtcbn07XG5cbmZ1bmN0aW9uIGFycmF5Q2xvbmUoYXJyLCBuKSB7XG4gIHZhciBjb3B5ID0gbmV3IEFycmF5KG4pO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IG47ICsraSlcbiAgICBjb3B5W2ldID0gYXJyW2ldO1xuICByZXR1cm4gY29weTtcbn1cblxuZnVuY3Rpb24gc3BsaWNlT25lKGxpc3QsIGluZGV4KSB7XG4gIGZvciAoOyBpbmRleCArIDEgPCBsaXN0Lmxlbmd0aDsgaW5kZXgrKylcbiAgICBsaXN0W2luZGV4XSA9IGxpc3RbaW5kZXggKyAxXTtcbiAgbGlzdC5wb3AoKTtcbn1cblxuZnVuY3Rpb24gdW53cmFwTGlzdGVuZXJzKGFycikge1xuICB2YXIgcmV0ID0gbmV3IEFycmF5KGFyci5sZW5ndGgpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHJldC5sZW5ndGg7ICsraSkge1xuICAgIHJldFtpXSA9IGFycltpXS5saXN0ZW5lciB8fCBhcnJbaV07XG4gIH1cbiAgcmV0dXJuIHJldDtcbn1cblxuZnVuY3Rpb24gb25jZShlbWl0dGVyLCBuYW1lKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgZnVuY3Rpb24gZXJyb3JMaXN0ZW5lcihlcnIpIHtcbiAgICAgIGVtaXR0ZXIucmVtb3ZlTGlzdGVuZXIobmFtZSwgcmVzb2x2ZXIpO1xuICAgICAgcmVqZWN0KGVycik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVzb2x2ZXIoKSB7XG4gICAgICBpZiAodHlwZW9mIGVtaXR0ZXIucmVtb3ZlTGlzdGVuZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgZW1pdHRlci5yZW1vdmVMaXN0ZW5lcignZXJyb3InLCBlcnJvckxpc3RlbmVyKTtcbiAgICAgIH1cbiAgICAgIHJlc29sdmUoW10uc2xpY2UuY2FsbChhcmd1bWVudHMpKTtcbiAgICB9O1xuXG4gICAgZXZlbnRUYXJnZXRBZ25vc3RpY0FkZExpc3RlbmVyKGVtaXR0ZXIsIG5hbWUsIHJlc29sdmVyLCB7IG9uY2U6IHRydWUgfSk7XG4gICAgaWYgKG5hbWUgIT09ICdlcnJvcicpIHtcbiAgICAgIGFkZEVycm9ySGFuZGxlcklmRXZlbnRFbWl0dGVyKGVtaXR0ZXIsIGVycm9yTGlzdGVuZXIsIHsgb25jZTogdHJ1ZSB9KTtcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBhZGRFcnJvckhhbmRsZXJJZkV2ZW50RW1pdHRlcihlbWl0dGVyLCBoYW5kbGVyLCBmbGFncykge1xuICBpZiAodHlwZW9mIGVtaXR0ZXIub24gPT09ICdmdW5jdGlvbicpIHtcbiAgICBldmVudFRhcmdldEFnbm9zdGljQWRkTGlzdGVuZXIoZW1pdHRlciwgJ2Vycm9yJywgaGFuZGxlciwgZmxhZ3MpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGV2ZW50VGFyZ2V0QWdub3N0aWNBZGRMaXN0ZW5lcihlbWl0dGVyLCBuYW1lLCBsaXN0ZW5lciwgZmxhZ3MpIHtcbiAgaWYgKHR5cGVvZiBlbWl0dGVyLm9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgaWYgKGZsYWdzLm9uY2UpIHtcbiAgICAgIGVtaXR0ZXIub25jZShuYW1lLCBsaXN0ZW5lcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVtaXR0ZXIub24obmFtZSwgbGlzdGVuZXIpO1xuICAgIH1cbiAgfSBlbHNlIGlmICh0eXBlb2YgZW1pdHRlci5hZGRFdmVudExpc3RlbmVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgLy8gRXZlbnRUYXJnZXQgZG9lcyBub3QgaGF2ZSBgZXJyb3JgIGV2ZW50IHNlbWFudGljcyBsaWtlIE5vZGVcbiAgICAvLyBFdmVudEVtaXR0ZXJzLCB3ZSBkbyBub3QgbGlzdGVuIGZvciBgZXJyb3JgIGV2ZW50cyBoZXJlLlxuICAgIGVtaXR0ZXIuYWRkRXZlbnRMaXN0ZW5lcihuYW1lLCBmdW5jdGlvbiB3cmFwTGlzdGVuZXIoYXJnKSB7XG4gICAgICAvLyBJRSBkb2VzIG5vdCBoYXZlIGJ1aWx0aW4gYHsgb25jZTogdHJ1ZSB9YCBzdXBwb3J0IHNvIHdlXG4gICAgICAvLyBoYXZlIHRvIGRvIGl0IG1hbnVhbGx5LlxuICAgICAgaWYgKGZsYWdzLm9uY2UpIHtcbiAgICAgICAgZW1pdHRlci5yZW1vdmVFdmVudExpc3RlbmVyKG5hbWUsIHdyYXBMaXN0ZW5lcik7XG4gICAgICB9XG4gICAgICBsaXN0ZW5lcihhcmcpO1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcImVtaXR0ZXJcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgRXZlbnRFbWl0dGVyLiBSZWNlaXZlZCB0eXBlICcgKyB0eXBlb2YgZW1pdHRlcik7XG4gIH1cbn1cbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fYXNzaWduID0gKHRoaXMgJiYgdGhpcy5fX2Fzc2lnbikgfHwgZnVuY3Rpb24gKCkge1xuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbih0KSB7XG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSlcbiAgICAgICAgICAgICAgICB0W3BdID0gc1twXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdDtcbiAgICB9O1xuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBuYW1lZF9yZWZlcmVuY2VzXzEgPSByZXF1aXJlKFwiLi9uYW1lZC1yZWZlcmVuY2VzXCIpO1xudmFyIG51bWVyaWNfdW5pY29kZV9tYXBfMSA9IHJlcXVpcmUoXCIuL251bWVyaWMtdW5pY29kZS1tYXBcIik7XG52YXIgc3Vycm9nYXRlX3BhaXJzXzEgPSByZXF1aXJlKFwiLi9zdXJyb2dhdGUtcGFpcnNcIik7XG52YXIgYWxsTmFtZWRSZWZlcmVuY2VzID0gX19hc3NpZ24oX19hc3NpZ24oe30sIG5hbWVkX3JlZmVyZW5jZXNfMS5uYW1lZFJlZmVyZW5jZXMpLCB7IGFsbDogbmFtZWRfcmVmZXJlbmNlc18xLm5hbWVkUmVmZXJlbmNlcy5odG1sNSB9KTtcbnZhciBlbmNvZGVSZWdFeHBzID0ge1xuICAgIHNwZWNpYWxDaGFyczogL1s8PidcIiZdL2csXG4gICAgbm9uQXNjaWk6IC8oPzpbPD4nXCImXFx1MDA4MC1cXHVEN0ZGXFx1RTAwMC1cXHVGRkZGXXxbXFx1RDgwMC1cXHVEQkZGXVtcXHVEQzAwLVxcdURGRkZdfFtcXHVEODAwLVxcdURCRkZdKD8hW1xcdURDMDAtXFx1REZGRl0pfCg/OlteXFx1RDgwMC1cXHVEQkZGXXxeKVtcXHVEQzAwLVxcdURGRkZdKS9nLFxuICAgIG5vbkFzY2lpUHJpbnRhYmxlOiAvKD86Wzw+J1wiJlxceDAxLVxceDA4XFx4MTEtXFx4MTVcXHgxNy1cXHgxRlxceDdmLVxcdUQ3RkZcXHVFMDAwLVxcdUZGRkZdfFtcXHVEODAwLVxcdURCRkZdW1xcdURDMDAtXFx1REZGRl18W1xcdUQ4MDAtXFx1REJGRl0oPyFbXFx1REMwMC1cXHVERkZGXSl8KD86W15cXHVEODAwLVxcdURCRkZdfF4pW1xcdURDMDAtXFx1REZGRl0pL2csXG4gICAgZXh0ZW5zaXZlOiAvKD86W1xceDAxLVxceDBjXFx4MGUtXFx4MWZcXHgyMS1cXHgyY1xceDJlLVxceDJmXFx4M2EtXFx4NDBcXHg1Yi1cXHg2MFxceDdiLVxceDdkXFx4N2YtXFx1RDdGRlxcdUUwMDAtXFx1RkZGRl18W1xcdUQ4MDAtXFx1REJGRl1bXFx1REMwMC1cXHVERkZGXXxbXFx1RDgwMC1cXHVEQkZGXSg/IVtcXHVEQzAwLVxcdURGRkZdKXwoPzpbXlxcdUQ4MDAtXFx1REJGRl18XilbXFx1REMwMC1cXHVERkZGXSkvZ1xufTtcbnZhciBkZWZhdWx0RW5jb2RlT3B0aW9ucyA9IHtcbiAgICBtb2RlOiAnc3BlY2lhbENoYXJzJyxcbiAgICBsZXZlbDogJ2FsbCcsXG4gICAgbnVtZXJpYzogJ2RlY2ltYWwnXG59O1xuLyoqIEVuY29kZXMgYWxsIHRoZSBuZWNlc3NhcnkgKHNwZWNpZmllZCBieSBgbGV2ZWxgKSBjaGFyYWN0ZXJzIGluIHRoZSB0ZXh0ICovXG5mdW5jdGlvbiBlbmNvZGUodGV4dCwgX2EpIHtcbiAgICB2YXIgX2IgPSBfYSA9PT0gdm9pZCAwID8gZGVmYXVsdEVuY29kZU9wdGlvbnMgOiBfYSwgX2MgPSBfYi5tb2RlLCBtb2RlID0gX2MgPT09IHZvaWQgMCA/ICdzcGVjaWFsQ2hhcnMnIDogX2MsIF9kID0gX2IubnVtZXJpYywgbnVtZXJpYyA9IF9kID09PSB2b2lkIDAgPyAnZGVjaW1hbCcgOiBfZCwgX2UgPSBfYi5sZXZlbCwgbGV2ZWwgPSBfZSA9PT0gdm9pZCAwID8gJ2FsbCcgOiBfZTtcbiAgICBpZiAoIXRleHQpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgICB2YXIgZW5jb2RlUmVnRXhwID0gZW5jb2RlUmVnRXhwc1ttb2RlXTtcbiAgICB2YXIgcmVmZXJlbmNlcyA9IGFsbE5hbWVkUmVmZXJlbmNlc1tsZXZlbF0uY2hhcmFjdGVycztcbiAgICB2YXIgaXNIZXggPSBudW1lcmljID09PSAnaGV4YWRlY2ltYWwnO1xuICAgIGVuY29kZVJlZ0V4cC5sYXN0SW5kZXggPSAwO1xuICAgIHZhciBfYiA9IGVuY29kZVJlZ0V4cC5leGVjKHRleHQpO1xuICAgIHZhciBfYztcbiAgICBpZiAoX2IpIHtcbiAgICAgICAgX2MgPSAnJztcbiAgICAgICAgdmFyIF9kID0gMDtcbiAgICAgICAgZG8ge1xuICAgICAgICAgICAgaWYgKF9kICE9PSBfYi5pbmRleCkge1xuICAgICAgICAgICAgICAgIF9jICs9IHRleHQuc3Vic3RyaW5nKF9kLCBfYi5pbmRleCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgX2UgPSBfYlswXTtcbiAgICAgICAgICAgIHZhciByZXN1bHRfMSA9IHJlZmVyZW5jZXNbX2VdO1xuICAgICAgICAgICAgaWYgKCFyZXN1bHRfMSkge1xuICAgICAgICAgICAgICAgIHZhciBjb2RlXzEgPSBfZS5sZW5ndGggPiAxID8gc3Vycm9nYXRlX3BhaXJzXzEuZ2V0Q29kZVBvaW50KF9lLCAwKSA6IF9lLmNoYXJDb2RlQXQoMCk7XG4gICAgICAgICAgICAgICAgcmVzdWx0XzEgPSAoaXNIZXggPyAnJiN4JyArIGNvZGVfMS50b1N0cmluZygxNikgOiAnJiMnICsgY29kZV8xKSArICc7JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF9jICs9IHJlc3VsdF8xO1xuICAgICAgICAgICAgX2QgPSBfYi5pbmRleCArIF9lLmxlbmd0aDtcbiAgICAgICAgfSB3aGlsZSAoKF9iID0gZW5jb2RlUmVnRXhwLmV4ZWModGV4dCkpKTtcbiAgICAgICAgaWYgKF9kICE9PSB0ZXh0Lmxlbmd0aCkge1xuICAgICAgICAgICAgX2MgKz0gdGV4dC5zdWJzdHJpbmcoX2QpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBfYyA9XG4gICAgICAgICAgICB0ZXh0O1xuICAgIH1cbiAgICByZXR1cm4gX2M7XG59XG5leHBvcnRzLmVuY29kZSA9IGVuY29kZTtcbnZhciBkZWZhdWx0RGVjb2RlT3B0aW9ucyA9IHtcbiAgICBzY29wZTogJ2JvZHknLFxuICAgIGxldmVsOiAnYWxsJ1xufTtcbnZhciBzdHJpY3QgPSAvJig/OiNcXGQrfCNbeFhdW1xcZGEtZkEtRl0rfFswLTlhLXpBLVpdKyk7L2c7XG52YXIgYXR0cmlidXRlID0gLyYoPzojXFxkK3wjW3hYXVtcXGRhLWZBLUZdK3xbMC05YS16QS1aXSspWzs9XT8vZztcbnZhciBiYXNlRGVjb2RlUmVnRXhwcyA9IHtcbiAgICB4bWw6IHtcbiAgICAgICAgc3RyaWN0OiBzdHJpY3QsXG4gICAgICAgIGF0dHJpYnV0ZTogYXR0cmlidXRlLFxuICAgICAgICBib2R5OiBuYW1lZF9yZWZlcmVuY2VzXzEuYm9keVJlZ0V4cHMueG1sXG4gICAgfSxcbiAgICBodG1sNDoge1xuICAgICAgICBzdHJpY3Q6IHN0cmljdCxcbiAgICAgICAgYXR0cmlidXRlOiBhdHRyaWJ1dGUsXG4gICAgICAgIGJvZHk6IG5hbWVkX3JlZmVyZW5jZXNfMS5ib2R5UmVnRXhwcy5odG1sNFxuICAgIH0sXG4gICAgaHRtbDU6IHtcbiAgICAgICAgc3RyaWN0OiBzdHJpY3QsXG4gICAgICAgIGF0dHJpYnV0ZTogYXR0cmlidXRlLFxuICAgICAgICBib2R5OiBuYW1lZF9yZWZlcmVuY2VzXzEuYm9keVJlZ0V4cHMuaHRtbDVcbiAgICB9XG59O1xudmFyIGRlY29kZVJlZ0V4cHMgPSBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgYmFzZURlY29kZVJlZ0V4cHMpLCB7IGFsbDogYmFzZURlY29kZVJlZ0V4cHMuaHRtbDUgfSk7XG52YXIgZnJvbUNoYXJDb2RlID0gU3RyaW5nLmZyb21DaGFyQ29kZTtcbnZhciBvdXRPZkJvdW5kc0NoYXIgPSBmcm9tQ2hhckNvZGUoNjU1MzMpO1xudmFyIGRlZmF1bHREZWNvZGVFbnRpdHlPcHRpb25zID0ge1xuICAgIGxldmVsOiAnYWxsJ1xufTtcbi8qKiBEZWNvZGVzIGEgc2luZ2xlIGVudGl0eSAqL1xuZnVuY3Rpb24gZGVjb2RlRW50aXR5KGVudGl0eSwgX2EpIHtcbiAgICB2YXIgX2IgPSAoX2EgPT09IHZvaWQgMCA/IGRlZmF1bHREZWNvZGVFbnRpdHlPcHRpb25zIDogX2EpLmxldmVsLCBsZXZlbCA9IF9iID09PSB2b2lkIDAgPyAnYWxsJyA6IF9iO1xuICAgIGlmICghZW50aXR5KSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICB9XG4gICAgdmFyIF9iID0gZW50aXR5O1xuICAgIHZhciBkZWNvZGVFbnRpdHlMYXN0Q2hhcl8xID0gZW50aXR5W2VudGl0eS5sZW5ndGggLSAxXTtcbiAgICBpZiAoZmFsc2VcbiAgICAgICAgJiYgZGVjb2RlRW50aXR5TGFzdENoYXJfMSA9PT0gJz0nKSB7XG4gICAgICAgIF9iID1cbiAgICAgICAgICAgIGVudGl0eTtcbiAgICB9XG4gICAgZWxzZSBpZiAoZmFsc2VcbiAgICAgICAgJiYgZGVjb2RlRW50aXR5TGFzdENoYXJfMSAhPT0gJzsnKSB7XG4gICAgICAgIF9iID1cbiAgICAgICAgICAgIGVudGl0eTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHZhciBkZWNvZGVSZXN1bHRCeVJlZmVyZW5jZV8xID0gYWxsTmFtZWRSZWZlcmVuY2VzW2xldmVsXS5lbnRpdGllc1tlbnRpdHldO1xuICAgICAgICBpZiAoZGVjb2RlUmVzdWx0QnlSZWZlcmVuY2VfMSkge1xuICAgICAgICAgICAgX2IgPSBkZWNvZGVSZXN1bHRCeVJlZmVyZW5jZV8xO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGVudGl0eVswXSA9PT0gJyYnICYmIGVudGl0eVsxXSA9PT0gJyMnKSB7XG4gICAgICAgICAgICB2YXIgZGVjb2RlU2Vjb25kQ2hhcl8xID0gZW50aXR5WzJdO1xuICAgICAgICAgICAgdmFyIGRlY29kZUNvZGVfMSA9IGRlY29kZVNlY29uZENoYXJfMSA9PSAneCcgfHwgZGVjb2RlU2Vjb25kQ2hhcl8xID09ICdYJ1xuICAgICAgICAgICAgICAgID8gcGFyc2VJbnQoZW50aXR5LnN1YnN0cigzKSwgMTYpXG4gICAgICAgICAgICAgICAgOiBwYXJzZUludChlbnRpdHkuc3Vic3RyKDIpKTtcbiAgICAgICAgICAgIF9iID1cbiAgICAgICAgICAgICAgICBkZWNvZGVDb2RlXzEgPj0gMHgxMGZmZmZcbiAgICAgICAgICAgICAgICAgICAgPyBvdXRPZkJvdW5kc0NoYXJcbiAgICAgICAgICAgICAgICAgICAgOiBkZWNvZGVDb2RlXzEgPiA2NTUzNVxuICAgICAgICAgICAgICAgICAgICAgICAgPyBzdXJyb2dhdGVfcGFpcnNfMS5mcm9tQ29kZVBvaW50KGRlY29kZUNvZGVfMSlcbiAgICAgICAgICAgICAgICAgICAgICAgIDogZnJvbUNoYXJDb2RlKG51bWVyaWNfdW5pY29kZV9tYXBfMS5udW1lcmljVW5pY29kZU1hcFtkZWNvZGVDb2RlXzFdIHx8IGRlY29kZUNvZGVfMSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIF9iO1xufVxuZXhwb3J0cy5kZWNvZGVFbnRpdHkgPSBkZWNvZGVFbnRpdHk7XG4vKiogRGVjb2RlcyBhbGwgZW50aXRpZXMgaW4gdGhlIHRleHQgKi9cbmZ1bmN0aW9uIGRlY29kZSh0ZXh0LCBfYSkge1xuICAgIHZhciBkZWNvZGVTZWNvbmRDaGFyXzEgPSBfYSA9PT0gdm9pZCAwID8gZGVmYXVsdERlY29kZU9wdGlvbnMgOiBfYSwgZGVjb2RlQ29kZV8xID0gZGVjb2RlU2Vjb25kQ2hhcl8xLmxldmVsLCBsZXZlbCA9IGRlY29kZUNvZGVfMSA9PT0gdm9pZCAwID8gJ2FsbCcgOiBkZWNvZGVDb2RlXzEsIF9iID0gZGVjb2RlU2Vjb25kQ2hhcl8xLnNjb3BlLCBzY29wZSA9IF9iID09PSB2b2lkIDAgPyBsZXZlbCA9PT0gJ3htbCcgPyAnc3RyaWN0JyA6ICdib2R5JyA6IF9iO1xuICAgIGlmICghdGV4dCkge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgfVxuICAgIHZhciBkZWNvZGVSZWdFeHAgPSBkZWNvZGVSZWdFeHBzW2xldmVsXVtzY29wZV07XG4gICAgdmFyIHJlZmVyZW5jZXMgPSBhbGxOYW1lZFJlZmVyZW5jZXNbbGV2ZWxdLmVudGl0aWVzO1xuICAgIHZhciBpc0F0dHJpYnV0ZSA9IHNjb3BlID09PSAnYXR0cmlidXRlJztcbiAgICB2YXIgaXNTdHJpY3QgPSBzY29wZSA9PT0gJ3N0cmljdCc7XG4gICAgZGVjb2RlUmVnRXhwLmxhc3RJbmRleCA9IDA7XG4gICAgdmFyIHJlcGxhY2VNYXRjaF8xID0gZGVjb2RlUmVnRXhwLmV4ZWModGV4dCk7XG4gICAgdmFyIHJlcGxhY2VSZXN1bHRfMTtcbiAgICBpZiAocmVwbGFjZU1hdGNoXzEpIHtcbiAgICAgICAgcmVwbGFjZVJlc3VsdF8xID0gJyc7XG4gICAgICAgIHZhciByZXBsYWNlTGFzdEluZGV4XzEgPSAwO1xuICAgICAgICBkbyB7XG4gICAgICAgICAgICBpZiAocmVwbGFjZUxhc3RJbmRleF8xICE9PSByZXBsYWNlTWF0Y2hfMS5pbmRleCkge1xuICAgICAgICAgICAgICAgIHJlcGxhY2VSZXN1bHRfMSArPSB0ZXh0LnN1YnN0cmluZyhyZXBsYWNlTGFzdEluZGV4XzEsIHJlcGxhY2VNYXRjaF8xLmluZGV4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciByZXBsYWNlSW5wdXRfMSA9IHJlcGxhY2VNYXRjaF8xWzBdO1xuICAgICAgICAgICAgdmFyIGRlY29kZVJlc3VsdF8xID0gcmVwbGFjZUlucHV0XzE7XG4gICAgICAgICAgICB2YXIgZGVjb2RlRW50aXR5TGFzdENoYXJfMiA9IHJlcGxhY2VJbnB1dF8xW3JlcGxhY2VJbnB1dF8xLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgaWYgKGlzQXR0cmlidXRlXG4gICAgICAgICAgICAgICAgJiYgZGVjb2RlRW50aXR5TGFzdENoYXJfMiA9PT0gJz0nKSB7XG4gICAgICAgICAgICAgICAgZGVjb2RlUmVzdWx0XzEgPSByZXBsYWNlSW5wdXRfMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGlzU3RyaWN0XG4gICAgICAgICAgICAgICAgJiYgZGVjb2RlRW50aXR5TGFzdENoYXJfMiAhPT0gJzsnKSB7XG4gICAgICAgICAgICAgICAgZGVjb2RlUmVzdWx0XzEgPSByZXBsYWNlSW5wdXRfMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciBkZWNvZGVSZXN1bHRCeVJlZmVyZW5jZV8yID0gcmVmZXJlbmNlc1tyZXBsYWNlSW5wdXRfMV07XG4gICAgICAgICAgICAgICAgaWYgKGRlY29kZVJlc3VsdEJ5UmVmZXJlbmNlXzIpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVjb2RlUmVzdWx0XzEgPSBkZWNvZGVSZXN1bHRCeVJlZmVyZW5jZV8yO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChyZXBsYWNlSW5wdXRfMVswXSA9PT0gJyYnICYmIHJlcGxhY2VJbnB1dF8xWzFdID09PSAnIycpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRlY29kZVNlY29uZENoYXJfMiA9IHJlcGxhY2VJbnB1dF8xWzJdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZGVjb2RlQ29kZV8yID0gZGVjb2RlU2Vjb25kQ2hhcl8yID09ICd4JyB8fCBkZWNvZGVTZWNvbmRDaGFyXzIgPT0gJ1gnXG4gICAgICAgICAgICAgICAgICAgICAgICA/IHBhcnNlSW50KHJlcGxhY2VJbnB1dF8xLnN1YnN0cigzKSwgMTYpXG4gICAgICAgICAgICAgICAgICAgICAgICA6IHBhcnNlSW50KHJlcGxhY2VJbnB1dF8xLnN1YnN0cigyKSk7XG4gICAgICAgICAgICAgICAgICAgIGRlY29kZVJlc3VsdF8xID1cbiAgICAgICAgICAgICAgICAgICAgICAgIGRlY29kZUNvZGVfMiA+PSAweDEwZmZmZlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gb3V0T2ZCb3VuZHNDaGFyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBkZWNvZGVDb2RlXzIgPiA2NTUzNVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHN1cnJvZ2F0ZV9wYWlyc18xLmZyb21Db2RlUG9pbnQoZGVjb2RlQ29kZV8yKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGZyb21DaGFyQ29kZShudW1lcmljX3VuaWNvZGVfbWFwXzEubnVtZXJpY1VuaWNvZGVNYXBbZGVjb2RlQ29kZV8yXSB8fCBkZWNvZGVDb2RlXzIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlcGxhY2VSZXN1bHRfMSArPSBkZWNvZGVSZXN1bHRfMTtcbiAgICAgICAgICAgIHJlcGxhY2VMYXN0SW5kZXhfMSA9IHJlcGxhY2VNYXRjaF8xLmluZGV4ICsgcmVwbGFjZUlucHV0XzEubGVuZ3RoO1xuICAgICAgICB9IHdoaWxlICgocmVwbGFjZU1hdGNoXzEgPSBkZWNvZGVSZWdFeHAuZXhlYyh0ZXh0KSkpO1xuICAgICAgICBpZiAocmVwbGFjZUxhc3RJbmRleF8xICE9PSB0ZXh0Lmxlbmd0aCkge1xuICAgICAgICAgICAgcmVwbGFjZVJlc3VsdF8xICs9IHRleHQuc3Vic3RyaW5nKHJlcGxhY2VMYXN0SW5kZXhfMSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJlcGxhY2VSZXN1bHRfMSA9XG4gICAgICAgICAgICB0ZXh0O1xuICAgIH1cbiAgICByZXR1cm4gcmVwbGFjZVJlc3VsdF8xO1xufVxuZXhwb3J0cy5kZWNvZGUgPSBkZWNvZGU7XG4iLCJcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6dHJ1ZX0pO2V4cG9ydHMuYm9keVJlZ0V4cHM9e3htbDovJig/OiNcXGQrfCNbeFhdW1xcZGEtZkEtRl0rfFswLTlhLXpBLVpdKyk7Py9nLGh0bWw0Oi8mKD86bmJzcHxpZXhjbHxjZW50fHBvdW5kfGN1cnJlbnx5ZW58YnJ2YmFyfHNlY3R8dW1sfGNvcHl8b3JkZnxsYXF1b3xub3R8c2h5fHJlZ3xtYWNyfGRlZ3xwbHVzbW58c3VwMnxzdXAzfGFjdXRlfG1pY3JvfHBhcmF8bWlkZG90fGNlZGlsfHN1cDF8b3JkbXxyYXF1b3xmcmFjMTR8ZnJhYzEyfGZyYWMzNHxpcXVlc3R8QWdyYXZlfEFhY3V0ZXxBY2lyY3xBdGlsZGV8QXVtbHxBcmluZ3xBRWxpZ3xDY2VkaWx8RWdyYXZlfEVhY3V0ZXxFY2lyY3xFdW1sfElncmF2ZXxJYWN1dGV8SWNpcmN8SXVtbHxFVEh8TnRpbGRlfE9ncmF2ZXxPYWN1dGV8T2NpcmN8T3RpbGRlfE91bWx8dGltZXN8T3NsYXNofFVncmF2ZXxVYWN1dGV8VWNpcmN8VXVtbHxZYWN1dGV8VEhPUk58c3psaWd8YWdyYXZlfGFhY3V0ZXxhY2lyY3xhdGlsZGV8YXVtbHxhcmluZ3xhZWxpZ3xjY2VkaWx8ZWdyYXZlfGVhY3V0ZXxlY2lyY3xldW1sfGlncmF2ZXxpYWN1dGV8aWNpcmN8aXVtbHxldGh8bnRpbGRlfG9ncmF2ZXxvYWN1dGV8b2NpcmN8b3RpbGRlfG91bWx8ZGl2aWRlfG9zbGFzaHx1Z3JhdmV8dWFjdXRlfHVjaXJjfHV1bWx8eWFjdXRlfHRob3JufHl1bWx8cXVvdHxhbXB8bHR8Z3R8I1xcZCt8I1t4WF1bXFxkYS1mQS1GXSt8WzAtOWEtekEtWl0rKTs/L2csaHRtbDU6LyYoPzpBRWxpZ3xBTVB8QWFjdXRlfEFjaXJjfEFncmF2ZXxBcmluZ3xBdGlsZGV8QXVtbHxDT1BZfENjZWRpbHxFVEh8RWFjdXRlfEVjaXJjfEVncmF2ZXxFdW1sfEdUfElhY3V0ZXxJY2lyY3xJZ3JhdmV8SXVtbHxMVHxOdGlsZGV8T2FjdXRlfE9jaXJjfE9ncmF2ZXxPc2xhc2h8T3RpbGRlfE91bWx8UVVPVHxSRUd8VEhPUk58VWFjdXRlfFVjaXJjfFVncmF2ZXxVdW1sfFlhY3V0ZXxhYWN1dGV8YWNpcmN8YWN1dGV8YWVsaWd8YWdyYXZlfGFtcHxhcmluZ3xhdGlsZGV8YXVtbHxicnZiYXJ8Y2NlZGlsfGNlZGlsfGNlbnR8Y29weXxjdXJyZW58ZGVnfGRpdmlkZXxlYWN1dGV8ZWNpcmN8ZWdyYXZlfGV0aHxldW1sfGZyYWMxMnxmcmFjMTR8ZnJhYzM0fGd0fGlhY3V0ZXxpY2lyY3xpZXhjbHxpZ3JhdmV8aXF1ZXN0fGl1bWx8bGFxdW98bHR8bWFjcnxtaWNyb3xtaWRkb3R8bmJzcHxub3R8bnRpbGRlfG9hY3V0ZXxvY2lyY3xvZ3JhdmV8b3JkZnxvcmRtfG9zbGFzaHxvdGlsZGV8b3VtbHxwYXJhfHBsdXNtbnxwb3VuZHxxdW90fHJhcXVvfHJlZ3xzZWN0fHNoeXxzdXAxfHN1cDJ8c3VwM3xzemxpZ3x0aG9ybnx0aW1lc3x1YWN1dGV8dWNpcmN8dWdyYXZlfHVtbHx1dW1sfHlhY3V0ZXx5ZW58eXVtbHwjXFxkK3wjW3hYXVtcXGRhLWZBLUZdK3xbMC05YS16QS1aXSspOz8vZ307ZXhwb3J0cy5uYW1lZFJlZmVyZW5jZXM9e3htbDp7ZW50aXRpZXM6e1wiJmx0O1wiOlwiPFwiLFwiJmd0O1wiOlwiPlwiLFwiJnF1b3Q7XCI6J1wiJyxcIiZhcG9zO1wiOlwiJ1wiLFwiJmFtcDtcIjpcIiZcIn0sY2hhcmFjdGVyczp7XCI8XCI6XCImbHQ7XCIsXCI+XCI6XCImZ3Q7XCIsJ1wiJzpcIiZxdW90O1wiLFwiJ1wiOlwiJmFwb3M7XCIsXCImXCI6XCImYW1wO1wifX0saHRtbDQ6e2VudGl0aWVzOntcIiZhcG9zO1wiOlwiJ1wiLFwiJm5ic3BcIjpcIsKgXCIsXCImbmJzcDtcIjpcIsKgXCIsXCImaWV4Y2xcIjpcIsKhXCIsXCImaWV4Y2w7XCI6XCLCoVwiLFwiJmNlbnRcIjpcIsKiXCIsXCImY2VudDtcIjpcIsKiXCIsXCImcG91bmRcIjpcIsKjXCIsXCImcG91bmQ7XCI6XCLCo1wiLFwiJmN1cnJlblwiOlwiwqRcIixcIiZjdXJyZW47XCI6XCLCpFwiLFwiJnllblwiOlwiwqVcIixcIiZ5ZW47XCI6XCLCpVwiLFwiJmJydmJhclwiOlwiwqZcIixcIiZicnZiYXI7XCI6XCLCplwiLFwiJnNlY3RcIjpcIsKnXCIsXCImc2VjdDtcIjpcIsKnXCIsXCImdW1sXCI6XCLCqFwiLFwiJnVtbDtcIjpcIsKoXCIsXCImY29weVwiOlwiwqlcIixcIiZjb3B5O1wiOlwiwqlcIixcIiZvcmRmXCI6XCLCqlwiLFwiJm9yZGY7XCI6XCLCqlwiLFwiJmxhcXVvXCI6XCLCq1wiLFwiJmxhcXVvO1wiOlwiwqtcIixcIiZub3RcIjpcIsKsXCIsXCImbm90O1wiOlwiwqxcIixcIiZzaHlcIjpcIsKtXCIsXCImc2h5O1wiOlwiwq1cIixcIiZyZWdcIjpcIsKuXCIsXCImcmVnO1wiOlwiwq5cIixcIiZtYWNyXCI6XCLCr1wiLFwiJm1hY3I7XCI6XCLCr1wiLFwiJmRlZ1wiOlwiwrBcIixcIiZkZWc7XCI6XCLCsFwiLFwiJnBsdXNtblwiOlwiwrFcIixcIiZwbHVzbW47XCI6XCLCsVwiLFwiJnN1cDJcIjpcIsKyXCIsXCImc3VwMjtcIjpcIsKyXCIsXCImc3VwM1wiOlwiwrNcIixcIiZzdXAzO1wiOlwiwrNcIixcIiZhY3V0ZVwiOlwiwrRcIixcIiZhY3V0ZTtcIjpcIsK0XCIsXCImbWljcm9cIjpcIsK1XCIsXCImbWljcm87XCI6XCLCtVwiLFwiJnBhcmFcIjpcIsK2XCIsXCImcGFyYTtcIjpcIsK2XCIsXCImbWlkZG90XCI6XCLCt1wiLFwiJm1pZGRvdDtcIjpcIsK3XCIsXCImY2VkaWxcIjpcIsK4XCIsXCImY2VkaWw7XCI6XCLCuFwiLFwiJnN1cDFcIjpcIsK5XCIsXCImc3VwMTtcIjpcIsK5XCIsXCImb3JkbVwiOlwiwrpcIixcIiZvcmRtO1wiOlwiwrpcIixcIiZyYXF1b1wiOlwiwrtcIixcIiZyYXF1bztcIjpcIsK7XCIsXCImZnJhYzE0XCI6XCLCvFwiLFwiJmZyYWMxNDtcIjpcIsK8XCIsXCImZnJhYzEyXCI6XCLCvVwiLFwiJmZyYWMxMjtcIjpcIsK9XCIsXCImZnJhYzM0XCI6XCLCvlwiLFwiJmZyYWMzNDtcIjpcIsK+XCIsXCImaXF1ZXN0XCI6XCLCv1wiLFwiJmlxdWVzdDtcIjpcIsK/XCIsXCImQWdyYXZlXCI6XCLDgFwiLFwiJkFncmF2ZTtcIjpcIsOAXCIsXCImQWFjdXRlXCI6XCLDgVwiLFwiJkFhY3V0ZTtcIjpcIsOBXCIsXCImQWNpcmNcIjpcIsOCXCIsXCImQWNpcmM7XCI6XCLDglwiLFwiJkF0aWxkZVwiOlwiw4NcIixcIiZBdGlsZGU7XCI6XCLDg1wiLFwiJkF1bWxcIjpcIsOEXCIsXCImQXVtbDtcIjpcIsOEXCIsXCImQXJpbmdcIjpcIsOFXCIsXCImQXJpbmc7XCI6XCLDhVwiLFwiJkFFbGlnXCI6XCLDhlwiLFwiJkFFbGlnO1wiOlwiw4ZcIixcIiZDY2VkaWxcIjpcIsOHXCIsXCImQ2NlZGlsO1wiOlwiw4dcIixcIiZFZ3JhdmVcIjpcIsOIXCIsXCImRWdyYXZlO1wiOlwiw4hcIixcIiZFYWN1dGVcIjpcIsOJXCIsXCImRWFjdXRlO1wiOlwiw4lcIixcIiZFY2lyY1wiOlwiw4pcIixcIiZFY2lyYztcIjpcIsOKXCIsXCImRXVtbFwiOlwiw4tcIixcIiZFdW1sO1wiOlwiw4tcIixcIiZJZ3JhdmVcIjpcIsOMXCIsXCImSWdyYXZlO1wiOlwiw4xcIixcIiZJYWN1dGVcIjpcIsONXCIsXCImSWFjdXRlO1wiOlwiw41cIixcIiZJY2lyY1wiOlwiw45cIixcIiZJY2lyYztcIjpcIsOOXCIsXCImSXVtbFwiOlwiw49cIixcIiZJdW1sO1wiOlwiw49cIixcIiZFVEhcIjpcIsOQXCIsXCImRVRIO1wiOlwiw5BcIixcIiZOdGlsZGVcIjpcIsORXCIsXCImTnRpbGRlO1wiOlwiw5FcIixcIiZPZ3JhdmVcIjpcIsOSXCIsXCImT2dyYXZlO1wiOlwiw5JcIixcIiZPYWN1dGVcIjpcIsOTXCIsXCImT2FjdXRlO1wiOlwiw5NcIixcIiZPY2lyY1wiOlwiw5RcIixcIiZPY2lyYztcIjpcIsOUXCIsXCImT3RpbGRlXCI6XCLDlVwiLFwiJk90aWxkZTtcIjpcIsOVXCIsXCImT3VtbFwiOlwiw5ZcIixcIiZPdW1sO1wiOlwiw5ZcIixcIiZ0aW1lc1wiOlwiw5dcIixcIiZ0aW1lcztcIjpcIsOXXCIsXCImT3NsYXNoXCI6XCLDmFwiLFwiJk9zbGFzaDtcIjpcIsOYXCIsXCImVWdyYXZlXCI6XCLDmVwiLFwiJlVncmF2ZTtcIjpcIsOZXCIsXCImVWFjdXRlXCI6XCLDmlwiLFwiJlVhY3V0ZTtcIjpcIsOaXCIsXCImVWNpcmNcIjpcIsObXCIsXCImVWNpcmM7XCI6XCLDm1wiLFwiJlV1bWxcIjpcIsOcXCIsXCImVXVtbDtcIjpcIsOcXCIsXCImWWFjdXRlXCI6XCLDnVwiLFwiJllhY3V0ZTtcIjpcIsOdXCIsXCImVEhPUk5cIjpcIsOeXCIsXCImVEhPUk47XCI6XCLDnlwiLFwiJnN6bGlnXCI6XCLDn1wiLFwiJnN6bGlnO1wiOlwiw59cIixcIiZhZ3JhdmVcIjpcIsOgXCIsXCImYWdyYXZlO1wiOlwiw6BcIixcIiZhYWN1dGVcIjpcIsOhXCIsXCImYWFjdXRlO1wiOlwiw6FcIixcIiZhY2lyY1wiOlwiw6JcIixcIiZhY2lyYztcIjpcIsOiXCIsXCImYXRpbGRlXCI6XCLDo1wiLFwiJmF0aWxkZTtcIjpcIsOjXCIsXCImYXVtbFwiOlwiw6RcIixcIiZhdW1sO1wiOlwiw6RcIixcIiZhcmluZ1wiOlwiw6VcIixcIiZhcmluZztcIjpcIsOlXCIsXCImYWVsaWdcIjpcIsOmXCIsXCImYWVsaWc7XCI6XCLDplwiLFwiJmNjZWRpbFwiOlwiw6dcIixcIiZjY2VkaWw7XCI6XCLDp1wiLFwiJmVncmF2ZVwiOlwiw6hcIixcIiZlZ3JhdmU7XCI6XCLDqFwiLFwiJmVhY3V0ZVwiOlwiw6lcIixcIiZlYWN1dGU7XCI6XCLDqVwiLFwiJmVjaXJjXCI6XCLDqlwiLFwiJmVjaXJjO1wiOlwiw6pcIixcIiZldW1sXCI6XCLDq1wiLFwiJmV1bWw7XCI6XCLDq1wiLFwiJmlncmF2ZVwiOlwiw6xcIixcIiZpZ3JhdmU7XCI6XCLDrFwiLFwiJmlhY3V0ZVwiOlwiw61cIixcIiZpYWN1dGU7XCI6XCLDrVwiLFwiJmljaXJjXCI6XCLDrlwiLFwiJmljaXJjO1wiOlwiw65cIixcIiZpdW1sXCI6XCLDr1wiLFwiJml1bWw7XCI6XCLDr1wiLFwiJmV0aFwiOlwiw7BcIixcIiZldGg7XCI6XCLDsFwiLFwiJm50aWxkZVwiOlwiw7FcIixcIiZudGlsZGU7XCI6XCLDsVwiLFwiJm9ncmF2ZVwiOlwiw7JcIixcIiZvZ3JhdmU7XCI6XCLDslwiLFwiJm9hY3V0ZVwiOlwiw7NcIixcIiZvYWN1dGU7XCI6XCLDs1wiLFwiJm9jaXJjXCI6XCLDtFwiLFwiJm9jaXJjO1wiOlwiw7RcIixcIiZvdGlsZGVcIjpcIsO1XCIsXCImb3RpbGRlO1wiOlwiw7VcIixcIiZvdW1sXCI6XCLDtlwiLFwiJm91bWw7XCI6XCLDtlwiLFwiJmRpdmlkZVwiOlwiw7dcIixcIiZkaXZpZGU7XCI6XCLDt1wiLFwiJm9zbGFzaFwiOlwiw7hcIixcIiZvc2xhc2g7XCI6XCLDuFwiLFwiJnVncmF2ZVwiOlwiw7lcIixcIiZ1Z3JhdmU7XCI6XCLDuVwiLFwiJnVhY3V0ZVwiOlwiw7pcIixcIiZ1YWN1dGU7XCI6XCLDulwiLFwiJnVjaXJjXCI6XCLDu1wiLFwiJnVjaXJjO1wiOlwiw7tcIixcIiZ1dW1sXCI6XCLDvFwiLFwiJnV1bWw7XCI6XCLDvFwiLFwiJnlhY3V0ZVwiOlwiw71cIixcIiZ5YWN1dGU7XCI6XCLDvVwiLFwiJnRob3JuXCI6XCLDvlwiLFwiJnRob3JuO1wiOlwiw75cIixcIiZ5dW1sXCI6XCLDv1wiLFwiJnl1bWw7XCI6XCLDv1wiLFwiJnF1b3RcIjonXCInLFwiJnF1b3Q7XCI6J1wiJyxcIiZhbXBcIjpcIiZcIixcIiZhbXA7XCI6XCImXCIsXCImbHRcIjpcIjxcIixcIiZsdDtcIjpcIjxcIixcIiZndFwiOlwiPlwiLFwiJmd0O1wiOlwiPlwiLFwiJk9FbGlnO1wiOlwixZJcIixcIiZvZWxpZztcIjpcIsWTXCIsXCImU2Nhcm9uO1wiOlwixaBcIixcIiZzY2Fyb247XCI6XCLFoVwiLFwiJll1bWw7XCI6XCLFuFwiLFwiJmNpcmM7XCI6XCLLhlwiLFwiJnRpbGRlO1wiOlwiy5xcIixcIiZlbnNwO1wiOlwi4oCCXCIsXCImZW1zcDtcIjpcIuKAg1wiLFwiJnRoaW5zcDtcIjpcIuKAiVwiLFwiJnp3bmo7XCI6XCLigIxcIixcIiZ6d2o7XCI6XCLigI1cIixcIiZscm07XCI6XCLigI5cIixcIiZybG07XCI6XCLigI9cIixcIiZuZGFzaDtcIjpcIuKAk1wiLFwiJm1kYXNoO1wiOlwi4oCUXCIsXCImbHNxdW87XCI6XCLigJhcIixcIiZyc3F1bztcIjpcIuKAmVwiLFwiJnNicXVvO1wiOlwi4oCaXCIsXCImbGRxdW87XCI6XCLigJxcIixcIiZyZHF1bztcIjpcIuKAnVwiLFwiJmJkcXVvO1wiOlwi4oCeXCIsXCImZGFnZ2VyO1wiOlwi4oCgXCIsXCImRGFnZ2VyO1wiOlwi4oChXCIsXCImcGVybWlsO1wiOlwi4oCwXCIsXCImbHNhcXVvO1wiOlwi4oC5XCIsXCImcnNhcXVvO1wiOlwi4oC6XCIsXCImZXVybztcIjpcIuKCrFwiLFwiJmZub2Y7XCI6XCLGklwiLFwiJkFscGhhO1wiOlwizpFcIixcIiZCZXRhO1wiOlwizpJcIixcIiZHYW1tYTtcIjpcIs6TXCIsXCImRGVsdGE7XCI6XCLOlFwiLFwiJkVwc2lsb247XCI6XCLOlVwiLFwiJlpldGE7XCI6XCLOllwiLFwiJkV0YTtcIjpcIs6XXCIsXCImVGhldGE7XCI6XCLOmFwiLFwiJklvdGE7XCI6XCLOmVwiLFwiJkthcHBhO1wiOlwizppcIixcIiZMYW1iZGE7XCI6XCLOm1wiLFwiJk11O1wiOlwizpxcIixcIiZOdTtcIjpcIs6dXCIsXCImWGk7XCI6XCLOnlwiLFwiJk9taWNyb247XCI6XCLOn1wiLFwiJlBpO1wiOlwizqBcIixcIiZSaG87XCI6XCLOoVwiLFwiJlNpZ21hO1wiOlwizqNcIixcIiZUYXU7XCI6XCLOpFwiLFwiJlVwc2lsb247XCI6XCLOpVwiLFwiJlBoaTtcIjpcIs6mXCIsXCImQ2hpO1wiOlwizqdcIixcIiZQc2k7XCI6XCLOqFwiLFwiJk9tZWdhO1wiOlwizqlcIixcIiZhbHBoYTtcIjpcIs6xXCIsXCImYmV0YTtcIjpcIs6yXCIsXCImZ2FtbWE7XCI6XCLOs1wiLFwiJmRlbHRhO1wiOlwizrRcIixcIiZlcHNpbG9uO1wiOlwizrVcIixcIiZ6ZXRhO1wiOlwizrZcIixcIiZldGE7XCI6XCLOt1wiLFwiJnRoZXRhO1wiOlwizrhcIixcIiZpb3RhO1wiOlwizrlcIixcIiZrYXBwYTtcIjpcIs66XCIsXCImbGFtYmRhO1wiOlwizrtcIixcIiZtdTtcIjpcIs68XCIsXCImbnU7XCI6XCLOvVwiLFwiJnhpO1wiOlwizr5cIixcIiZvbWljcm9uO1wiOlwizr9cIixcIiZwaTtcIjpcIs+AXCIsXCImcmhvO1wiOlwiz4FcIixcIiZzaWdtYWY7XCI6XCLPglwiLFwiJnNpZ21hO1wiOlwiz4NcIixcIiZ0YXU7XCI6XCLPhFwiLFwiJnVwc2lsb247XCI6XCLPhVwiLFwiJnBoaTtcIjpcIs+GXCIsXCImY2hpO1wiOlwiz4dcIixcIiZwc2k7XCI6XCLPiFwiLFwiJm9tZWdhO1wiOlwiz4lcIixcIiZ0aGV0YXN5bTtcIjpcIs+RXCIsXCImdXBzaWg7XCI6XCLPklwiLFwiJnBpdjtcIjpcIs+WXCIsXCImYnVsbDtcIjpcIuKAolwiLFwiJmhlbGxpcDtcIjpcIuKAplwiLFwiJnByaW1lO1wiOlwi4oCyXCIsXCImUHJpbWU7XCI6XCLigLNcIixcIiZvbGluZTtcIjpcIuKAvlwiLFwiJmZyYXNsO1wiOlwi4oGEXCIsXCImd2VpZXJwO1wiOlwi4oSYXCIsXCImaW1hZ2U7XCI6XCLihJFcIixcIiZyZWFsO1wiOlwi4oScXCIsXCImdHJhZGU7XCI6XCLihKJcIixcIiZhbGVmc3ltO1wiOlwi4oS1XCIsXCImbGFycjtcIjpcIuKGkFwiLFwiJnVhcnI7XCI6XCLihpFcIixcIiZyYXJyO1wiOlwi4oaSXCIsXCImZGFycjtcIjpcIuKGk1wiLFwiJmhhcnI7XCI6XCLihpRcIixcIiZjcmFycjtcIjpcIuKGtVwiLFwiJmxBcnI7XCI6XCLih5BcIixcIiZ1QXJyO1wiOlwi4oeRXCIsXCImckFycjtcIjpcIuKHklwiLFwiJmRBcnI7XCI6XCLih5NcIixcIiZoQXJyO1wiOlwi4oeUXCIsXCImZm9yYWxsO1wiOlwi4oiAXCIsXCImcGFydDtcIjpcIuKIglwiLFwiJmV4aXN0O1wiOlwi4oiDXCIsXCImZW1wdHk7XCI6XCLiiIVcIixcIiZuYWJsYTtcIjpcIuKIh1wiLFwiJmlzaW47XCI6XCLiiIhcIixcIiZub3RpbjtcIjpcIuKIiVwiLFwiJm5pO1wiOlwi4oiLXCIsXCImcHJvZDtcIjpcIuKIj1wiLFwiJnN1bTtcIjpcIuKIkVwiLFwiJm1pbnVzO1wiOlwi4oiSXCIsXCImbG93YXN0O1wiOlwi4oiXXCIsXCImcmFkaWM7XCI6XCLiiJpcIixcIiZwcm9wO1wiOlwi4oidXCIsXCImaW5maW47XCI6XCLiiJ5cIixcIiZhbmc7XCI6XCLiiKBcIixcIiZhbmQ7XCI6XCLiiKdcIixcIiZvcjtcIjpcIuKIqFwiLFwiJmNhcDtcIjpcIuKIqVwiLFwiJmN1cDtcIjpcIuKIqlwiLFwiJmludDtcIjpcIuKIq1wiLFwiJnRoZXJlNDtcIjpcIuKItFwiLFwiJnNpbTtcIjpcIuKIvFwiLFwiJmNvbmc7XCI6XCLiiYVcIixcIiZhc3ltcDtcIjpcIuKJiFwiLFwiJm5lO1wiOlwi4omgXCIsXCImZXF1aXY7XCI6XCLiiaFcIixcIiZsZTtcIjpcIuKJpFwiLFwiJmdlO1wiOlwi4omlXCIsXCImc3ViO1wiOlwi4oqCXCIsXCImc3VwO1wiOlwi4oqDXCIsXCImbnN1YjtcIjpcIuKKhFwiLFwiJnN1YmU7XCI6XCLiioZcIixcIiZzdXBlO1wiOlwi4oqHXCIsXCImb3BsdXM7XCI6XCLiipVcIixcIiZvdGltZXM7XCI6XCLiipdcIixcIiZwZXJwO1wiOlwi4oqlXCIsXCImc2RvdDtcIjpcIuKLhVwiLFwiJmxjZWlsO1wiOlwi4oyIXCIsXCImcmNlaWw7XCI6XCLijIlcIixcIiZsZmxvb3I7XCI6XCLijIpcIixcIiZyZmxvb3I7XCI6XCLijItcIixcIiZsYW5nO1wiOlwi4oypXCIsXCImcmFuZztcIjpcIuKMqlwiLFwiJmxvejtcIjpcIuKXilwiLFwiJnNwYWRlcztcIjpcIuKZoFwiLFwiJmNsdWJzO1wiOlwi4pmjXCIsXCImaGVhcnRzO1wiOlwi4pmlXCIsXCImZGlhbXM7XCI6XCLimaZcIn0sY2hhcmFjdGVyczp7XCInXCI6XCImYXBvcztcIixcIsKgXCI6XCImbmJzcDtcIixcIsKhXCI6XCImaWV4Y2w7XCIsXCLColwiOlwiJmNlbnQ7XCIsXCLCo1wiOlwiJnBvdW5kO1wiLFwiwqRcIjpcIiZjdXJyZW47XCIsXCLCpVwiOlwiJnllbjtcIixcIsKmXCI6XCImYnJ2YmFyO1wiLFwiwqdcIjpcIiZzZWN0O1wiLFwiwqhcIjpcIiZ1bWw7XCIsXCLCqVwiOlwiJmNvcHk7XCIsXCLCqlwiOlwiJm9yZGY7XCIsXCLCq1wiOlwiJmxhcXVvO1wiLFwiwqxcIjpcIiZub3Q7XCIsXCLCrVwiOlwiJnNoeTtcIixcIsKuXCI6XCImcmVnO1wiLFwiwq9cIjpcIiZtYWNyO1wiLFwiwrBcIjpcIiZkZWc7XCIsXCLCsVwiOlwiJnBsdXNtbjtcIixcIsKyXCI6XCImc3VwMjtcIixcIsKzXCI6XCImc3VwMztcIixcIsK0XCI6XCImYWN1dGU7XCIsXCLCtVwiOlwiJm1pY3JvO1wiLFwiwrZcIjpcIiZwYXJhO1wiLFwiwrdcIjpcIiZtaWRkb3Q7XCIsXCLCuFwiOlwiJmNlZGlsO1wiLFwiwrlcIjpcIiZzdXAxO1wiLFwiwrpcIjpcIiZvcmRtO1wiLFwiwrtcIjpcIiZyYXF1bztcIixcIsK8XCI6XCImZnJhYzE0O1wiLFwiwr1cIjpcIiZmcmFjMTI7XCIsXCLCvlwiOlwiJmZyYWMzNDtcIixcIsK/XCI6XCImaXF1ZXN0O1wiLFwiw4BcIjpcIiZBZ3JhdmU7XCIsXCLDgVwiOlwiJkFhY3V0ZTtcIixcIsOCXCI6XCImQWNpcmM7XCIsXCLDg1wiOlwiJkF0aWxkZTtcIixcIsOEXCI6XCImQXVtbDtcIixcIsOFXCI6XCImQXJpbmc7XCIsXCLDhlwiOlwiJkFFbGlnO1wiLFwiw4dcIjpcIiZDY2VkaWw7XCIsXCLDiFwiOlwiJkVncmF2ZTtcIixcIsOJXCI6XCImRWFjdXRlO1wiLFwiw4pcIjpcIiZFY2lyYztcIixcIsOLXCI6XCImRXVtbDtcIixcIsOMXCI6XCImSWdyYXZlO1wiLFwiw41cIjpcIiZJYWN1dGU7XCIsXCLDjlwiOlwiJkljaXJjO1wiLFwiw49cIjpcIiZJdW1sO1wiLFwiw5BcIjpcIiZFVEg7XCIsXCLDkVwiOlwiJk50aWxkZTtcIixcIsOSXCI6XCImT2dyYXZlO1wiLFwiw5NcIjpcIiZPYWN1dGU7XCIsXCLDlFwiOlwiJk9jaXJjO1wiLFwiw5VcIjpcIiZPdGlsZGU7XCIsXCLDllwiOlwiJk91bWw7XCIsXCLDl1wiOlwiJnRpbWVzO1wiLFwiw5hcIjpcIiZPc2xhc2g7XCIsXCLDmVwiOlwiJlVncmF2ZTtcIixcIsOaXCI6XCImVWFjdXRlO1wiLFwiw5tcIjpcIiZVY2lyYztcIixcIsOcXCI6XCImVXVtbDtcIixcIsOdXCI6XCImWWFjdXRlO1wiLFwiw55cIjpcIiZUSE9STjtcIixcIsOfXCI6XCImc3psaWc7XCIsXCLDoFwiOlwiJmFncmF2ZTtcIixcIsOhXCI6XCImYWFjdXRlO1wiLFwiw6JcIjpcIiZhY2lyYztcIixcIsOjXCI6XCImYXRpbGRlO1wiLFwiw6RcIjpcIiZhdW1sO1wiLFwiw6VcIjpcIiZhcmluZztcIixcIsOmXCI6XCImYWVsaWc7XCIsXCLDp1wiOlwiJmNjZWRpbDtcIixcIsOoXCI6XCImZWdyYXZlO1wiLFwiw6lcIjpcIiZlYWN1dGU7XCIsXCLDqlwiOlwiJmVjaXJjO1wiLFwiw6tcIjpcIiZldW1sO1wiLFwiw6xcIjpcIiZpZ3JhdmU7XCIsXCLDrVwiOlwiJmlhY3V0ZTtcIixcIsOuXCI6XCImaWNpcmM7XCIsXCLDr1wiOlwiJml1bWw7XCIsXCLDsFwiOlwiJmV0aDtcIixcIsOxXCI6XCImbnRpbGRlO1wiLFwiw7JcIjpcIiZvZ3JhdmU7XCIsXCLDs1wiOlwiJm9hY3V0ZTtcIixcIsO0XCI6XCImb2NpcmM7XCIsXCLDtVwiOlwiJm90aWxkZTtcIixcIsO2XCI6XCImb3VtbDtcIixcIsO3XCI6XCImZGl2aWRlO1wiLFwiw7hcIjpcIiZvc2xhc2g7XCIsXCLDuVwiOlwiJnVncmF2ZTtcIixcIsO6XCI6XCImdWFjdXRlO1wiLFwiw7tcIjpcIiZ1Y2lyYztcIixcIsO8XCI6XCImdXVtbDtcIixcIsO9XCI6XCImeWFjdXRlO1wiLFwiw75cIjpcIiZ0aG9ybjtcIixcIsO/XCI6XCImeXVtbDtcIiwnXCInOlwiJnF1b3Q7XCIsXCImXCI6XCImYW1wO1wiLFwiPFwiOlwiJmx0O1wiLFwiPlwiOlwiJmd0O1wiLFwixZJcIjpcIiZPRWxpZztcIixcIsWTXCI6XCImb2VsaWc7XCIsXCLFoFwiOlwiJlNjYXJvbjtcIixcIsWhXCI6XCImc2Nhcm9uO1wiLFwixbhcIjpcIiZZdW1sO1wiLFwiy4ZcIjpcIiZjaXJjO1wiLFwiy5xcIjpcIiZ0aWxkZTtcIixcIuKAglwiOlwiJmVuc3A7XCIsXCLigINcIjpcIiZlbXNwO1wiLFwi4oCJXCI6XCImdGhpbnNwO1wiLFwi4oCMXCI6XCImenduajtcIixcIuKAjVwiOlwiJnp3ajtcIixcIuKAjlwiOlwiJmxybTtcIixcIuKAj1wiOlwiJnJsbTtcIixcIuKAk1wiOlwiJm5kYXNoO1wiLFwi4oCUXCI6XCImbWRhc2g7XCIsXCLigJhcIjpcIiZsc3F1bztcIixcIuKAmVwiOlwiJnJzcXVvO1wiLFwi4oCaXCI6XCImc2JxdW87XCIsXCLigJxcIjpcIiZsZHF1bztcIixcIuKAnVwiOlwiJnJkcXVvO1wiLFwi4oCeXCI6XCImYmRxdW87XCIsXCLigKBcIjpcIiZkYWdnZXI7XCIsXCLigKFcIjpcIiZEYWdnZXI7XCIsXCLigLBcIjpcIiZwZXJtaWw7XCIsXCLigLlcIjpcIiZsc2FxdW87XCIsXCLigLpcIjpcIiZyc2FxdW87XCIsXCLigqxcIjpcIiZldXJvO1wiLFwixpJcIjpcIiZmbm9mO1wiLFwizpFcIjpcIiZBbHBoYTtcIixcIs6SXCI6XCImQmV0YTtcIixcIs6TXCI6XCImR2FtbWE7XCIsXCLOlFwiOlwiJkRlbHRhO1wiLFwizpVcIjpcIiZFcHNpbG9uO1wiLFwizpZcIjpcIiZaZXRhO1wiLFwizpdcIjpcIiZFdGE7XCIsXCLOmFwiOlwiJlRoZXRhO1wiLFwizplcIjpcIiZJb3RhO1wiLFwizppcIjpcIiZLYXBwYTtcIixcIs6bXCI6XCImTGFtYmRhO1wiLFwizpxcIjpcIiZNdTtcIixcIs6dXCI6XCImTnU7XCIsXCLOnlwiOlwiJlhpO1wiLFwizp9cIjpcIiZPbWljcm9uO1wiLFwizqBcIjpcIiZQaTtcIixcIs6hXCI6XCImUmhvO1wiLFwizqNcIjpcIiZTaWdtYTtcIixcIs6kXCI6XCImVGF1O1wiLFwizqVcIjpcIiZVcHNpbG9uO1wiLFwizqZcIjpcIiZQaGk7XCIsXCLOp1wiOlwiJkNoaTtcIixcIs6oXCI6XCImUHNpO1wiLFwizqlcIjpcIiZPbWVnYTtcIixcIs6xXCI6XCImYWxwaGE7XCIsXCLOslwiOlwiJmJldGE7XCIsXCLOs1wiOlwiJmdhbW1hO1wiLFwizrRcIjpcIiZkZWx0YTtcIixcIs61XCI6XCImZXBzaWxvbjtcIixcIs62XCI6XCImemV0YTtcIixcIs63XCI6XCImZXRhO1wiLFwizrhcIjpcIiZ0aGV0YTtcIixcIs65XCI6XCImaW90YTtcIixcIs66XCI6XCIma2FwcGE7XCIsXCLOu1wiOlwiJmxhbWJkYTtcIixcIs68XCI6XCImbXU7XCIsXCLOvVwiOlwiJm51O1wiLFwizr5cIjpcIiZ4aTtcIixcIs6/XCI6XCImb21pY3JvbjtcIixcIs+AXCI6XCImcGk7XCIsXCLPgVwiOlwiJnJobztcIixcIs+CXCI6XCImc2lnbWFmO1wiLFwiz4NcIjpcIiZzaWdtYTtcIixcIs+EXCI6XCImdGF1O1wiLFwiz4VcIjpcIiZ1cHNpbG9uO1wiLFwiz4ZcIjpcIiZwaGk7XCIsXCLPh1wiOlwiJmNoaTtcIixcIs+IXCI6XCImcHNpO1wiLFwiz4lcIjpcIiZvbWVnYTtcIixcIs+RXCI6XCImdGhldGFzeW07XCIsXCLPklwiOlwiJnVwc2loO1wiLFwiz5ZcIjpcIiZwaXY7XCIsXCLigKJcIjpcIiZidWxsO1wiLFwi4oCmXCI6XCImaGVsbGlwO1wiLFwi4oCyXCI6XCImcHJpbWU7XCIsXCLigLNcIjpcIiZQcmltZTtcIixcIuKAvlwiOlwiJm9saW5lO1wiLFwi4oGEXCI6XCImZnJhc2w7XCIsXCLihJhcIjpcIiZ3ZWllcnA7XCIsXCLihJFcIjpcIiZpbWFnZTtcIixcIuKEnFwiOlwiJnJlYWw7XCIsXCLihKJcIjpcIiZ0cmFkZTtcIixcIuKEtVwiOlwiJmFsZWZzeW07XCIsXCLihpBcIjpcIiZsYXJyO1wiLFwi4oaRXCI6XCImdWFycjtcIixcIuKGklwiOlwiJnJhcnI7XCIsXCLihpNcIjpcIiZkYXJyO1wiLFwi4oaUXCI6XCImaGFycjtcIixcIuKGtVwiOlwiJmNyYXJyO1wiLFwi4oeQXCI6XCImbEFycjtcIixcIuKHkVwiOlwiJnVBcnI7XCIsXCLih5JcIjpcIiZyQXJyO1wiLFwi4oeTXCI6XCImZEFycjtcIixcIuKHlFwiOlwiJmhBcnI7XCIsXCLiiIBcIjpcIiZmb3JhbGw7XCIsXCLiiIJcIjpcIiZwYXJ0O1wiLFwi4oiDXCI6XCImZXhpc3Q7XCIsXCLiiIVcIjpcIiZlbXB0eTtcIixcIuKIh1wiOlwiJm5hYmxhO1wiLFwi4oiIXCI6XCImaXNpbjtcIixcIuKIiVwiOlwiJm5vdGluO1wiLFwi4oiLXCI6XCImbmk7XCIsXCLiiI9cIjpcIiZwcm9kO1wiLFwi4oiRXCI6XCImc3VtO1wiLFwi4oiSXCI6XCImbWludXM7XCIsXCLiiJdcIjpcIiZsb3dhc3Q7XCIsXCLiiJpcIjpcIiZyYWRpYztcIixcIuKInVwiOlwiJnByb3A7XCIsXCLiiJ5cIjpcIiZpbmZpbjtcIixcIuKIoFwiOlwiJmFuZztcIixcIuKIp1wiOlwiJmFuZDtcIixcIuKIqFwiOlwiJm9yO1wiLFwi4oipXCI6XCImY2FwO1wiLFwi4oiqXCI6XCImY3VwO1wiLFwi4oirXCI6XCImaW50O1wiLFwi4oi0XCI6XCImdGhlcmU0O1wiLFwi4oi8XCI6XCImc2ltO1wiLFwi4omFXCI6XCImY29uZztcIixcIuKJiFwiOlwiJmFzeW1wO1wiLFwi4omgXCI6XCImbmU7XCIsXCLiiaFcIjpcIiZlcXVpdjtcIixcIuKJpFwiOlwiJmxlO1wiLFwi4omlXCI6XCImZ2U7XCIsXCLiioJcIjpcIiZzdWI7XCIsXCLiioNcIjpcIiZzdXA7XCIsXCLiioRcIjpcIiZuc3ViO1wiLFwi4oqGXCI6XCImc3ViZTtcIixcIuKKh1wiOlwiJnN1cGU7XCIsXCLiipVcIjpcIiZvcGx1cztcIixcIuKKl1wiOlwiJm90aW1lcztcIixcIuKKpVwiOlwiJnBlcnA7XCIsXCLii4VcIjpcIiZzZG90O1wiLFwi4oyIXCI6XCImbGNlaWw7XCIsXCLijIlcIjpcIiZyY2VpbDtcIixcIuKMilwiOlwiJmxmbG9vcjtcIixcIuKMi1wiOlwiJnJmbG9vcjtcIixcIuKMqVwiOlwiJmxhbmc7XCIsXCLijKpcIjpcIiZyYW5nO1wiLFwi4peKXCI6XCImbG96O1wiLFwi4pmgXCI6XCImc3BhZGVzO1wiLFwi4pmjXCI6XCImY2x1YnM7XCIsXCLimaVcIjpcIiZoZWFydHM7XCIsXCLimaZcIjpcIiZkaWFtcztcIn19LGh0bWw1OntlbnRpdGllczp7XCImQUVsaWdcIjpcIsOGXCIsXCImQUVsaWc7XCI6XCLDhlwiLFwiJkFNUFwiOlwiJlwiLFwiJkFNUDtcIjpcIiZcIixcIiZBYWN1dGVcIjpcIsOBXCIsXCImQWFjdXRlO1wiOlwiw4FcIixcIiZBYnJldmU7XCI6XCLEglwiLFwiJkFjaXJjXCI6XCLDglwiLFwiJkFjaXJjO1wiOlwiw4JcIixcIiZBY3k7XCI6XCLQkFwiLFwiJkFmcjtcIjpcIvCdlIRcIixcIiZBZ3JhdmVcIjpcIsOAXCIsXCImQWdyYXZlO1wiOlwiw4BcIixcIiZBbHBoYTtcIjpcIs6RXCIsXCImQW1hY3I7XCI6XCLEgFwiLFwiJkFuZDtcIjpcIuKpk1wiLFwiJkFvZ29uO1wiOlwixIRcIixcIiZBb3BmO1wiOlwi8J2UuFwiLFwiJkFwcGx5RnVuY3Rpb247XCI6XCLigaFcIixcIiZBcmluZ1wiOlwiw4VcIixcIiZBcmluZztcIjpcIsOFXCIsXCImQXNjcjtcIjpcIvCdkpxcIixcIiZBc3NpZ247XCI6XCLiiZRcIixcIiZBdGlsZGVcIjpcIsODXCIsXCImQXRpbGRlO1wiOlwiw4NcIixcIiZBdW1sXCI6XCLDhFwiLFwiJkF1bWw7XCI6XCLDhFwiLFwiJkJhY2tzbGFzaDtcIjpcIuKIllwiLFwiJkJhcnY7XCI6XCLiq6dcIixcIiZCYXJ3ZWQ7XCI6XCLijIZcIixcIiZCY3k7XCI6XCLQkVwiLFwiJkJlY2F1c2U7XCI6XCLiiLVcIixcIiZCZXJub3VsbGlzO1wiOlwi4oSsXCIsXCImQmV0YTtcIjpcIs6SXCIsXCImQmZyO1wiOlwi8J2UhVwiLFwiJkJvcGY7XCI6XCLwnZS5XCIsXCImQnJldmU7XCI6XCLLmFwiLFwiJkJzY3I7XCI6XCLihKxcIixcIiZCdW1wZXE7XCI6XCLiiY5cIixcIiZDSGN5O1wiOlwi0KdcIixcIiZDT1BZXCI6XCLCqVwiLFwiJkNPUFk7XCI6XCLCqVwiLFwiJkNhY3V0ZTtcIjpcIsSGXCIsXCImQ2FwO1wiOlwi4ouSXCIsXCImQ2FwaXRhbERpZmZlcmVudGlhbEQ7XCI6XCLihYVcIixcIiZDYXlsZXlzO1wiOlwi4oStXCIsXCImQ2Nhcm9uO1wiOlwixIxcIixcIiZDY2VkaWxcIjpcIsOHXCIsXCImQ2NlZGlsO1wiOlwiw4dcIixcIiZDY2lyYztcIjpcIsSIXCIsXCImQ2NvbmludDtcIjpcIuKIsFwiLFwiJkNkb3Q7XCI6XCLEilwiLFwiJkNlZGlsbGE7XCI6XCLCuFwiLFwiJkNlbnRlckRvdDtcIjpcIsK3XCIsXCImQ2ZyO1wiOlwi4oStXCIsXCImQ2hpO1wiOlwizqdcIixcIiZDaXJjbGVEb3Q7XCI6XCLiiplcIixcIiZDaXJjbGVNaW51cztcIjpcIuKKllwiLFwiJkNpcmNsZVBsdXM7XCI6XCLiipVcIixcIiZDaXJjbGVUaW1lcztcIjpcIuKKl1wiLFwiJkNsb2Nrd2lzZUNvbnRvdXJJbnRlZ3JhbDtcIjpcIuKIslwiLFwiJkNsb3NlQ3VybHlEb3VibGVRdW90ZTtcIjpcIuKAnVwiLFwiJkNsb3NlQ3VybHlRdW90ZTtcIjpcIuKAmVwiLFwiJkNvbG9uO1wiOlwi4oi3XCIsXCImQ29sb25lO1wiOlwi4qm0XCIsXCImQ29uZ3J1ZW50O1wiOlwi4omhXCIsXCImQ29uaW50O1wiOlwi4oivXCIsXCImQ29udG91ckludGVncmFsO1wiOlwi4oiuXCIsXCImQ29wZjtcIjpcIuKEglwiLFwiJkNvcHJvZHVjdDtcIjpcIuKIkFwiLFwiJkNvdW50ZXJDbG9ja3dpc2VDb250b3VySW50ZWdyYWw7XCI6XCLiiLNcIixcIiZDcm9zcztcIjpcIuKor1wiLFwiJkNzY3I7XCI6XCLwnZKeXCIsXCImQ3VwO1wiOlwi4ouTXCIsXCImQ3VwQ2FwO1wiOlwi4omNXCIsXCImREQ7XCI6XCLihYVcIixcIiZERG90cmFoZDtcIjpcIuKkkVwiLFwiJkRKY3k7XCI6XCLQglwiLFwiJkRTY3k7XCI6XCLQhVwiLFwiJkRaY3k7XCI6XCLQj1wiLFwiJkRhZ2dlcjtcIjpcIuKAoVwiLFwiJkRhcnI7XCI6XCLihqFcIixcIiZEYXNodjtcIjpcIuKrpFwiLFwiJkRjYXJvbjtcIjpcIsSOXCIsXCImRGN5O1wiOlwi0JRcIixcIiZEZWw7XCI6XCLiiIdcIixcIiZEZWx0YTtcIjpcIs6UXCIsXCImRGZyO1wiOlwi8J2Uh1wiLFwiJkRpYWNyaXRpY2FsQWN1dGU7XCI6XCLCtFwiLFwiJkRpYWNyaXRpY2FsRG90O1wiOlwiy5lcIixcIiZEaWFjcml0aWNhbERvdWJsZUFjdXRlO1wiOlwiy51cIixcIiZEaWFjcml0aWNhbEdyYXZlO1wiOlwiYFwiLFwiJkRpYWNyaXRpY2FsVGlsZGU7XCI6XCLLnFwiLFwiJkRpYW1vbmQ7XCI6XCLii4RcIixcIiZEaWZmZXJlbnRpYWxEO1wiOlwi4oWGXCIsXCImRG9wZjtcIjpcIvCdlLtcIixcIiZEb3Q7XCI6XCLCqFwiLFwiJkRvdERvdDtcIjpcIuKDnFwiLFwiJkRvdEVxdWFsO1wiOlwi4omQXCIsXCImRG91YmxlQ29udG91ckludGVncmFsO1wiOlwi4oivXCIsXCImRG91YmxlRG90O1wiOlwiwqhcIixcIiZEb3VibGVEb3duQXJyb3c7XCI6XCLih5NcIixcIiZEb3VibGVMZWZ0QXJyb3c7XCI6XCLih5BcIixcIiZEb3VibGVMZWZ0UmlnaHRBcnJvdztcIjpcIuKHlFwiLFwiJkRvdWJsZUxlZnRUZWU7XCI6XCLiq6RcIixcIiZEb3VibGVMb25nTGVmdEFycm93O1wiOlwi4p+4XCIsXCImRG91YmxlTG9uZ0xlZnRSaWdodEFycm93O1wiOlwi4p+6XCIsXCImRG91YmxlTG9uZ1JpZ2h0QXJyb3c7XCI6XCLin7lcIixcIiZEb3VibGVSaWdodEFycm93O1wiOlwi4oeSXCIsXCImRG91YmxlUmlnaHRUZWU7XCI6XCLiiqhcIixcIiZEb3VibGVVcEFycm93O1wiOlwi4oeRXCIsXCImRG91YmxlVXBEb3duQXJyb3c7XCI6XCLih5VcIixcIiZEb3VibGVWZXJ0aWNhbEJhcjtcIjpcIuKIpVwiLFwiJkRvd25BcnJvdztcIjpcIuKGk1wiLFwiJkRvd25BcnJvd0JhcjtcIjpcIuKkk1wiLFwiJkRvd25BcnJvd1VwQXJyb3c7XCI6XCLih7VcIixcIiZEb3duQnJldmU7XCI6XCLMkVwiLFwiJkRvd25MZWZ0UmlnaHRWZWN0b3I7XCI6XCLipZBcIixcIiZEb3duTGVmdFRlZVZlY3RvcjtcIjpcIuKlnlwiLFwiJkRvd25MZWZ0VmVjdG9yO1wiOlwi4oa9XCIsXCImRG93bkxlZnRWZWN0b3JCYXI7XCI6XCLipZZcIixcIiZEb3duUmlnaHRUZWVWZWN0b3I7XCI6XCLipZ9cIixcIiZEb3duUmlnaHRWZWN0b3I7XCI6XCLih4FcIixcIiZEb3duUmlnaHRWZWN0b3JCYXI7XCI6XCLipZdcIixcIiZEb3duVGVlO1wiOlwi4oqkXCIsXCImRG93blRlZUFycm93O1wiOlwi4oanXCIsXCImRG93bmFycm93O1wiOlwi4oeTXCIsXCImRHNjcjtcIjpcIvCdkp9cIixcIiZEc3Ryb2s7XCI6XCLEkFwiLFwiJkVORztcIjpcIsWKXCIsXCImRVRIXCI6XCLDkFwiLFwiJkVUSDtcIjpcIsOQXCIsXCImRWFjdXRlXCI6XCLDiVwiLFwiJkVhY3V0ZTtcIjpcIsOJXCIsXCImRWNhcm9uO1wiOlwixJpcIixcIiZFY2lyY1wiOlwiw4pcIixcIiZFY2lyYztcIjpcIsOKXCIsXCImRWN5O1wiOlwi0K1cIixcIiZFZG90O1wiOlwixJZcIixcIiZFZnI7XCI6XCLwnZSIXCIsXCImRWdyYXZlXCI6XCLDiFwiLFwiJkVncmF2ZTtcIjpcIsOIXCIsXCImRWxlbWVudDtcIjpcIuKIiFwiLFwiJkVtYWNyO1wiOlwixJJcIixcIiZFbXB0eVNtYWxsU3F1YXJlO1wiOlwi4pe7XCIsXCImRW1wdHlWZXJ5U21hbGxTcXVhcmU7XCI6XCLilqtcIixcIiZFb2dvbjtcIjpcIsSYXCIsXCImRW9wZjtcIjpcIvCdlLxcIixcIiZFcHNpbG9uO1wiOlwizpVcIixcIiZFcXVhbDtcIjpcIuKptVwiLFwiJkVxdWFsVGlsZGU7XCI6XCLiiYJcIixcIiZFcXVpbGlicml1bTtcIjpcIuKHjFwiLFwiJkVzY3I7XCI6XCLihLBcIixcIiZFc2ltO1wiOlwi4qmzXCIsXCImRXRhO1wiOlwizpdcIixcIiZFdW1sXCI6XCLDi1wiLFwiJkV1bWw7XCI6XCLDi1wiLFwiJkV4aXN0cztcIjpcIuKIg1wiLFwiJkV4cG9uZW50aWFsRTtcIjpcIuKFh1wiLFwiJkZjeTtcIjpcItCkXCIsXCImRmZyO1wiOlwi8J2UiVwiLFwiJkZpbGxlZFNtYWxsU3F1YXJlO1wiOlwi4pe8XCIsXCImRmlsbGVkVmVyeVNtYWxsU3F1YXJlO1wiOlwi4paqXCIsXCImRm9wZjtcIjpcIvCdlL1cIixcIiZGb3JBbGw7XCI6XCLiiIBcIixcIiZGb3VyaWVydHJmO1wiOlwi4oSxXCIsXCImRnNjcjtcIjpcIuKEsVwiLFwiJkdKY3k7XCI6XCLQg1wiLFwiJkdUXCI6XCI+XCIsXCImR1Q7XCI6XCI+XCIsXCImR2FtbWE7XCI6XCLOk1wiLFwiJkdhbW1hZDtcIjpcIs+cXCIsXCImR2JyZXZlO1wiOlwixJ5cIixcIiZHY2VkaWw7XCI6XCLEolwiLFwiJkdjaXJjO1wiOlwixJxcIixcIiZHY3k7XCI6XCLQk1wiLFwiJkdkb3Q7XCI6XCLEoFwiLFwiJkdmcjtcIjpcIvCdlIpcIixcIiZHZztcIjpcIuKLmVwiLFwiJkdvcGY7XCI6XCLwnZS+XCIsXCImR3JlYXRlckVxdWFsO1wiOlwi4omlXCIsXCImR3JlYXRlckVxdWFsTGVzcztcIjpcIuKLm1wiLFwiJkdyZWF0ZXJGdWxsRXF1YWw7XCI6XCLiiadcIixcIiZHcmVhdGVyR3JlYXRlcjtcIjpcIuKqolwiLFwiJkdyZWF0ZXJMZXNzO1wiOlwi4om3XCIsXCImR3JlYXRlclNsYW50RXF1YWw7XCI6XCLiqb5cIixcIiZHcmVhdGVyVGlsZGU7XCI6XCLiibNcIixcIiZHc2NyO1wiOlwi8J2SolwiLFwiJkd0O1wiOlwi4omrXCIsXCImSEFSRGN5O1wiOlwi0KpcIixcIiZIYWNlaztcIjpcIsuHXCIsXCImSGF0O1wiOlwiXlwiLFwiJkhjaXJjO1wiOlwixKRcIixcIiZIZnI7XCI6XCLihIxcIixcIiZIaWxiZXJ0U3BhY2U7XCI6XCLihItcIixcIiZIb3BmO1wiOlwi4oSNXCIsXCImSG9yaXpvbnRhbExpbmU7XCI6XCLilIBcIixcIiZIc2NyO1wiOlwi4oSLXCIsXCImSHN0cm9rO1wiOlwixKZcIixcIiZIdW1wRG93bkh1bXA7XCI6XCLiiY5cIixcIiZIdW1wRXF1YWw7XCI6XCLiiY9cIixcIiZJRWN5O1wiOlwi0JVcIixcIiZJSmxpZztcIjpcIsSyXCIsXCImSU9jeTtcIjpcItCBXCIsXCImSWFjdXRlXCI6XCLDjVwiLFwiJklhY3V0ZTtcIjpcIsONXCIsXCImSWNpcmNcIjpcIsOOXCIsXCImSWNpcmM7XCI6XCLDjlwiLFwiJkljeTtcIjpcItCYXCIsXCImSWRvdDtcIjpcIsSwXCIsXCImSWZyO1wiOlwi4oSRXCIsXCImSWdyYXZlXCI6XCLDjFwiLFwiJklncmF2ZTtcIjpcIsOMXCIsXCImSW07XCI6XCLihJFcIixcIiZJbWFjcjtcIjpcIsSqXCIsXCImSW1hZ2luYXJ5STtcIjpcIuKFiFwiLFwiJkltcGxpZXM7XCI6XCLih5JcIixcIiZJbnQ7XCI6XCLiiKxcIixcIiZJbnRlZ3JhbDtcIjpcIuKIq1wiLFwiJkludGVyc2VjdGlvbjtcIjpcIuKLglwiLFwiJkludmlzaWJsZUNvbW1hO1wiOlwi4oGjXCIsXCImSW52aXNpYmxlVGltZXM7XCI6XCLigaJcIixcIiZJb2dvbjtcIjpcIsSuXCIsXCImSW9wZjtcIjpcIvCdlYBcIixcIiZJb3RhO1wiOlwizplcIixcIiZJc2NyO1wiOlwi4oSQXCIsXCImSXRpbGRlO1wiOlwixKhcIixcIiZJdWtjeTtcIjpcItCGXCIsXCImSXVtbFwiOlwiw49cIixcIiZJdW1sO1wiOlwiw49cIixcIiZKY2lyYztcIjpcIsS0XCIsXCImSmN5O1wiOlwi0JlcIixcIiZKZnI7XCI6XCLwnZSNXCIsXCImSm9wZjtcIjpcIvCdlYFcIixcIiZKc2NyO1wiOlwi8J2SpVwiLFwiJkpzZXJjeTtcIjpcItCIXCIsXCImSnVrY3k7XCI6XCLQhFwiLFwiJktIY3k7XCI6XCLQpVwiLFwiJktKY3k7XCI6XCLQjFwiLFwiJkthcHBhO1wiOlwizppcIixcIiZLY2VkaWw7XCI6XCLEtlwiLFwiJktjeTtcIjpcItCaXCIsXCImS2ZyO1wiOlwi8J2UjlwiLFwiJktvcGY7XCI6XCLwnZWCXCIsXCImS3NjcjtcIjpcIvCdkqZcIixcIiZMSmN5O1wiOlwi0IlcIixcIiZMVFwiOlwiPFwiLFwiJkxUO1wiOlwiPFwiLFwiJkxhY3V0ZTtcIjpcIsS5XCIsXCImTGFtYmRhO1wiOlwizptcIixcIiZMYW5nO1wiOlwi4p+qXCIsXCImTGFwbGFjZXRyZjtcIjpcIuKEklwiLFwiJkxhcnI7XCI6XCLihp5cIixcIiZMY2Fyb247XCI6XCLEvVwiLFwiJkxjZWRpbDtcIjpcIsS7XCIsXCImTGN5O1wiOlwi0JtcIixcIiZMZWZ0QW5nbGVCcmFja2V0O1wiOlwi4p+oXCIsXCImTGVmdEFycm93O1wiOlwi4oaQXCIsXCImTGVmdEFycm93QmFyO1wiOlwi4oekXCIsXCImTGVmdEFycm93UmlnaHRBcnJvdztcIjpcIuKHhlwiLFwiJkxlZnRDZWlsaW5nO1wiOlwi4oyIXCIsXCImTGVmdERvdWJsZUJyYWNrZXQ7XCI6XCLin6ZcIixcIiZMZWZ0RG93blRlZVZlY3RvcjtcIjpcIuKloVwiLFwiJkxlZnREb3duVmVjdG9yO1wiOlwi4oeDXCIsXCImTGVmdERvd25WZWN0b3JCYXI7XCI6XCLipZlcIixcIiZMZWZ0Rmxvb3I7XCI6XCLijIpcIixcIiZMZWZ0UmlnaHRBcnJvdztcIjpcIuKGlFwiLFwiJkxlZnRSaWdodFZlY3RvcjtcIjpcIuKljlwiLFwiJkxlZnRUZWU7XCI6XCLiiqNcIixcIiZMZWZ0VGVlQXJyb3c7XCI6XCLihqRcIixcIiZMZWZ0VGVlVmVjdG9yO1wiOlwi4qWaXCIsXCImTGVmdFRyaWFuZ2xlO1wiOlwi4oqyXCIsXCImTGVmdFRyaWFuZ2xlQmFyO1wiOlwi4qePXCIsXCImTGVmdFRyaWFuZ2xlRXF1YWw7XCI6XCLiirRcIixcIiZMZWZ0VXBEb3duVmVjdG9yO1wiOlwi4qWRXCIsXCImTGVmdFVwVGVlVmVjdG9yO1wiOlwi4qWgXCIsXCImTGVmdFVwVmVjdG9yO1wiOlwi4oa/XCIsXCImTGVmdFVwVmVjdG9yQmFyO1wiOlwi4qWYXCIsXCImTGVmdFZlY3RvcjtcIjpcIuKGvFwiLFwiJkxlZnRWZWN0b3JCYXI7XCI6XCLipZJcIixcIiZMZWZ0YXJyb3c7XCI6XCLih5BcIixcIiZMZWZ0cmlnaHRhcnJvdztcIjpcIuKHlFwiLFwiJkxlc3NFcXVhbEdyZWF0ZXI7XCI6XCLii5pcIixcIiZMZXNzRnVsbEVxdWFsO1wiOlwi4ommXCIsXCImTGVzc0dyZWF0ZXI7XCI6XCLiibZcIixcIiZMZXNzTGVzcztcIjpcIuKqoVwiLFwiJkxlc3NTbGFudEVxdWFsO1wiOlwi4qm9XCIsXCImTGVzc1RpbGRlO1wiOlwi4omyXCIsXCImTGZyO1wiOlwi8J2Uj1wiLFwiJkxsO1wiOlwi4ouYXCIsXCImTGxlZnRhcnJvdztcIjpcIuKHmlwiLFwiJkxtaWRvdDtcIjpcIsS/XCIsXCImTG9uZ0xlZnRBcnJvdztcIjpcIuKftVwiLFwiJkxvbmdMZWZ0UmlnaHRBcnJvdztcIjpcIuKft1wiLFwiJkxvbmdSaWdodEFycm93O1wiOlwi4p+2XCIsXCImTG9uZ2xlZnRhcnJvdztcIjpcIuKfuFwiLFwiJkxvbmdsZWZ0cmlnaHRhcnJvdztcIjpcIuKfulwiLFwiJkxvbmdyaWdodGFycm93O1wiOlwi4p+5XCIsXCImTG9wZjtcIjpcIvCdlYNcIixcIiZMb3dlckxlZnRBcnJvdztcIjpcIuKGmVwiLFwiJkxvd2VyUmlnaHRBcnJvdztcIjpcIuKGmFwiLFwiJkxzY3I7XCI6XCLihJJcIixcIiZMc2g7XCI6XCLihrBcIixcIiZMc3Ryb2s7XCI6XCLFgVwiLFwiJkx0O1wiOlwi4omqXCIsXCImTWFwO1wiOlwi4qSFXCIsXCImTWN5O1wiOlwi0JxcIixcIiZNZWRpdW1TcGFjZTtcIjpcIuKBn1wiLFwiJk1lbGxpbnRyZjtcIjpcIuKEs1wiLFwiJk1mcjtcIjpcIvCdlJBcIixcIiZNaW51c1BsdXM7XCI6XCLiiJNcIixcIiZNb3BmO1wiOlwi8J2VhFwiLFwiJk1zY3I7XCI6XCLihLNcIixcIiZNdTtcIjpcIs6cXCIsXCImTkpjeTtcIjpcItCKXCIsXCImTmFjdXRlO1wiOlwixYNcIixcIiZOY2Fyb247XCI6XCLFh1wiLFwiJk5jZWRpbDtcIjpcIsWFXCIsXCImTmN5O1wiOlwi0J1cIixcIiZOZWdhdGl2ZU1lZGl1bVNwYWNlO1wiOlwi4oCLXCIsXCImTmVnYXRpdmVUaGlja1NwYWNlO1wiOlwi4oCLXCIsXCImTmVnYXRpdmVUaGluU3BhY2U7XCI6XCLigItcIixcIiZOZWdhdGl2ZVZlcnlUaGluU3BhY2U7XCI6XCLigItcIixcIiZOZXN0ZWRHcmVhdGVyR3JlYXRlcjtcIjpcIuKJq1wiLFwiJk5lc3RlZExlc3NMZXNzO1wiOlwi4omqXCIsXCImTmV3TGluZTtcIjpcIlxcblwiLFwiJk5mcjtcIjpcIvCdlJFcIixcIiZOb0JyZWFrO1wiOlwi4oGgXCIsXCImTm9uQnJlYWtpbmdTcGFjZTtcIjpcIsKgXCIsXCImTm9wZjtcIjpcIuKElVwiLFwiJk5vdDtcIjpcIuKrrFwiLFwiJk5vdENvbmdydWVudDtcIjpcIuKJolwiLFwiJk5vdEN1cENhcDtcIjpcIuKJrVwiLFwiJk5vdERvdWJsZVZlcnRpY2FsQmFyO1wiOlwi4oimXCIsXCImTm90RWxlbWVudDtcIjpcIuKIiVwiLFwiJk5vdEVxdWFsO1wiOlwi4omgXCIsXCImTm90RXF1YWxUaWxkZTtcIjpcIuKJgsy4XCIsXCImTm90RXhpc3RzO1wiOlwi4oiEXCIsXCImTm90R3JlYXRlcjtcIjpcIuKJr1wiLFwiJk5vdEdyZWF0ZXJFcXVhbDtcIjpcIuKJsVwiLFwiJk5vdEdyZWF0ZXJGdWxsRXF1YWw7XCI6XCLiiafMuFwiLFwiJk5vdEdyZWF0ZXJHcmVhdGVyO1wiOlwi4omrzLhcIixcIiZOb3RHcmVhdGVyTGVzcztcIjpcIuKJuVwiLFwiJk5vdEdyZWF0ZXJTbGFudEVxdWFsO1wiOlwi4qm+zLhcIixcIiZOb3RHcmVhdGVyVGlsZGU7XCI6XCLiibVcIixcIiZOb3RIdW1wRG93bkh1bXA7XCI6XCLiiY7MuFwiLFwiJk5vdEh1bXBFcXVhbDtcIjpcIuKJj8y4XCIsXCImTm90TGVmdFRyaWFuZ2xlO1wiOlwi4ouqXCIsXCImTm90TGVmdFRyaWFuZ2xlQmFyO1wiOlwi4qePzLhcIixcIiZOb3RMZWZ0VHJpYW5nbGVFcXVhbDtcIjpcIuKLrFwiLFwiJk5vdExlc3M7XCI6XCLiia5cIixcIiZOb3RMZXNzRXF1YWw7XCI6XCLiibBcIixcIiZOb3RMZXNzR3JlYXRlcjtcIjpcIuKJuFwiLFwiJk5vdExlc3NMZXNzO1wiOlwi4omqzLhcIixcIiZOb3RMZXNzU2xhbnRFcXVhbDtcIjpcIuKpvcy4XCIsXCImTm90TGVzc1RpbGRlO1wiOlwi4om0XCIsXCImTm90TmVzdGVkR3JlYXRlckdyZWF0ZXI7XCI6XCLiqqLMuFwiLFwiJk5vdE5lc3RlZExlc3NMZXNzO1wiOlwi4qqhzLhcIixcIiZOb3RQcmVjZWRlcztcIjpcIuKKgFwiLFwiJk5vdFByZWNlZGVzRXF1YWw7XCI6XCLiqq/MuFwiLFwiJk5vdFByZWNlZGVzU2xhbnRFcXVhbDtcIjpcIuKLoFwiLFwiJk5vdFJldmVyc2VFbGVtZW50O1wiOlwi4oiMXCIsXCImTm90UmlnaHRUcmlhbmdsZTtcIjpcIuKLq1wiLFwiJk5vdFJpZ2h0VHJpYW5nbGVCYXI7XCI6XCLip5DMuFwiLFwiJk5vdFJpZ2h0VHJpYW5nbGVFcXVhbDtcIjpcIuKLrVwiLFwiJk5vdFNxdWFyZVN1YnNldDtcIjpcIuKKj8y4XCIsXCImTm90U3F1YXJlU3Vic2V0RXF1YWw7XCI6XCLii6JcIixcIiZOb3RTcXVhcmVTdXBlcnNldDtcIjpcIuKKkMy4XCIsXCImTm90U3F1YXJlU3VwZXJzZXRFcXVhbDtcIjpcIuKLo1wiLFwiJk5vdFN1YnNldDtcIjpcIuKKguKDklwiLFwiJk5vdFN1YnNldEVxdWFsO1wiOlwi4oqIXCIsXCImTm90U3VjY2VlZHM7XCI6XCLiioFcIixcIiZOb3RTdWNjZWVkc0VxdWFsO1wiOlwi4qqwzLhcIixcIiZOb3RTdWNjZWVkc1NsYW50RXF1YWw7XCI6XCLii6FcIixcIiZOb3RTdWNjZWVkc1RpbGRlO1wiOlwi4om/zLhcIixcIiZOb3RTdXBlcnNldDtcIjpcIuKKg+KDklwiLFwiJk5vdFN1cGVyc2V0RXF1YWw7XCI6XCLiiolcIixcIiZOb3RUaWxkZTtcIjpcIuKJgVwiLFwiJk5vdFRpbGRlRXF1YWw7XCI6XCLiiYRcIixcIiZOb3RUaWxkZUZ1bGxFcXVhbDtcIjpcIuKJh1wiLFwiJk5vdFRpbGRlVGlsZGU7XCI6XCLiiYlcIixcIiZOb3RWZXJ0aWNhbEJhcjtcIjpcIuKIpFwiLFwiJk5zY3I7XCI6XCLwnZKpXCIsXCImTnRpbGRlXCI6XCLDkVwiLFwiJk50aWxkZTtcIjpcIsORXCIsXCImTnU7XCI6XCLOnVwiLFwiJk9FbGlnO1wiOlwixZJcIixcIiZPYWN1dGVcIjpcIsOTXCIsXCImT2FjdXRlO1wiOlwiw5NcIixcIiZPY2lyY1wiOlwiw5RcIixcIiZPY2lyYztcIjpcIsOUXCIsXCImT2N5O1wiOlwi0J5cIixcIiZPZGJsYWM7XCI6XCLFkFwiLFwiJk9mcjtcIjpcIvCdlJJcIixcIiZPZ3JhdmVcIjpcIsOSXCIsXCImT2dyYXZlO1wiOlwiw5JcIixcIiZPbWFjcjtcIjpcIsWMXCIsXCImT21lZ2E7XCI6XCLOqVwiLFwiJk9taWNyb247XCI6XCLOn1wiLFwiJk9vcGY7XCI6XCLwnZWGXCIsXCImT3BlbkN1cmx5RG91YmxlUXVvdGU7XCI6XCLigJxcIixcIiZPcGVuQ3VybHlRdW90ZTtcIjpcIuKAmFwiLFwiJk9yO1wiOlwi4qmUXCIsXCImT3NjcjtcIjpcIvCdkqpcIixcIiZPc2xhc2hcIjpcIsOYXCIsXCImT3NsYXNoO1wiOlwiw5hcIixcIiZPdGlsZGVcIjpcIsOVXCIsXCImT3RpbGRlO1wiOlwiw5VcIixcIiZPdGltZXM7XCI6XCLiqLdcIixcIiZPdW1sXCI6XCLDllwiLFwiJk91bWw7XCI6XCLDllwiLFwiJk92ZXJCYXI7XCI6XCLigL5cIixcIiZPdmVyQnJhY2U7XCI6XCLij55cIixcIiZPdmVyQnJhY2tldDtcIjpcIuKOtFwiLFwiJk92ZXJQYXJlbnRoZXNpcztcIjpcIuKPnFwiLFwiJlBhcnRpYWxEO1wiOlwi4oiCXCIsXCImUGN5O1wiOlwi0J9cIixcIiZQZnI7XCI6XCLwnZSTXCIsXCImUGhpO1wiOlwizqZcIixcIiZQaTtcIjpcIs6gXCIsXCImUGx1c01pbnVzO1wiOlwiwrFcIixcIiZQb2luY2FyZXBsYW5lO1wiOlwi4oSMXCIsXCImUG9wZjtcIjpcIuKEmVwiLFwiJlByO1wiOlwi4qq7XCIsXCImUHJlY2VkZXM7XCI6XCLiibpcIixcIiZQcmVjZWRlc0VxdWFsO1wiOlwi4qqvXCIsXCImUHJlY2VkZXNTbGFudEVxdWFsO1wiOlwi4om8XCIsXCImUHJlY2VkZXNUaWxkZTtcIjpcIuKJvlwiLFwiJlByaW1lO1wiOlwi4oCzXCIsXCImUHJvZHVjdDtcIjpcIuKIj1wiLFwiJlByb3BvcnRpb247XCI6XCLiiLdcIixcIiZQcm9wb3J0aW9uYWw7XCI6XCLiiJ1cIixcIiZQc2NyO1wiOlwi8J2Sq1wiLFwiJlBzaTtcIjpcIs6oXCIsXCImUVVPVFwiOidcIicsXCImUVVPVDtcIjonXCInLFwiJlFmcjtcIjpcIvCdlJRcIixcIiZRb3BmO1wiOlwi4oSaXCIsXCImUXNjcjtcIjpcIvCdkqxcIixcIiZSQmFycjtcIjpcIuKkkFwiLFwiJlJFR1wiOlwiwq5cIixcIiZSRUc7XCI6XCLCrlwiLFwiJlJhY3V0ZTtcIjpcIsWUXCIsXCImUmFuZztcIjpcIuKfq1wiLFwiJlJhcnI7XCI6XCLihqBcIixcIiZSYXJydGw7XCI6XCLipJZcIixcIiZSY2Fyb247XCI6XCLFmFwiLFwiJlJjZWRpbDtcIjpcIsWWXCIsXCImUmN5O1wiOlwi0KBcIixcIiZSZTtcIjpcIuKEnFwiLFwiJlJldmVyc2VFbGVtZW50O1wiOlwi4oiLXCIsXCImUmV2ZXJzZUVxdWlsaWJyaXVtO1wiOlwi4oeLXCIsXCImUmV2ZXJzZVVwRXF1aWxpYnJpdW07XCI6XCLipa9cIixcIiZSZnI7XCI6XCLihJxcIixcIiZSaG87XCI6XCLOoVwiLFwiJlJpZ2h0QW5nbGVCcmFja2V0O1wiOlwi4p+pXCIsXCImUmlnaHRBcnJvdztcIjpcIuKGklwiLFwiJlJpZ2h0QXJyb3dCYXI7XCI6XCLih6VcIixcIiZSaWdodEFycm93TGVmdEFycm93O1wiOlwi4oeEXCIsXCImUmlnaHRDZWlsaW5nO1wiOlwi4oyJXCIsXCImUmlnaHREb3VibGVCcmFja2V0O1wiOlwi4p+nXCIsXCImUmlnaHREb3duVGVlVmVjdG9yO1wiOlwi4qWdXCIsXCImUmlnaHREb3duVmVjdG9yO1wiOlwi4oeCXCIsXCImUmlnaHREb3duVmVjdG9yQmFyO1wiOlwi4qWVXCIsXCImUmlnaHRGbG9vcjtcIjpcIuKMi1wiLFwiJlJpZ2h0VGVlO1wiOlwi4oqiXCIsXCImUmlnaHRUZWVBcnJvdztcIjpcIuKGplwiLFwiJlJpZ2h0VGVlVmVjdG9yO1wiOlwi4qWbXCIsXCImUmlnaHRUcmlhbmdsZTtcIjpcIuKKs1wiLFwiJlJpZ2h0VHJpYW5nbGVCYXI7XCI6XCLip5BcIixcIiZSaWdodFRyaWFuZ2xlRXF1YWw7XCI6XCLiirVcIixcIiZSaWdodFVwRG93blZlY3RvcjtcIjpcIuKlj1wiLFwiJlJpZ2h0VXBUZWVWZWN0b3I7XCI6XCLipZxcIixcIiZSaWdodFVwVmVjdG9yO1wiOlwi4oa+XCIsXCImUmlnaHRVcFZlY3RvckJhcjtcIjpcIuKllFwiLFwiJlJpZ2h0VmVjdG9yO1wiOlwi4oeAXCIsXCImUmlnaHRWZWN0b3JCYXI7XCI6XCLipZNcIixcIiZSaWdodGFycm93O1wiOlwi4oeSXCIsXCImUm9wZjtcIjpcIuKEnVwiLFwiJlJvdW5kSW1wbGllcztcIjpcIuKlsFwiLFwiJlJyaWdodGFycm93O1wiOlwi4oebXCIsXCImUnNjcjtcIjpcIuKEm1wiLFwiJlJzaDtcIjpcIuKGsVwiLFwiJlJ1bGVEZWxheWVkO1wiOlwi4qe0XCIsXCImU0hDSGN5O1wiOlwi0KlcIixcIiZTSGN5O1wiOlwi0KhcIixcIiZTT0ZUY3k7XCI6XCLQrFwiLFwiJlNhY3V0ZTtcIjpcIsWaXCIsXCImU2M7XCI6XCLiqrxcIixcIiZTY2Fyb247XCI6XCLFoFwiLFwiJlNjZWRpbDtcIjpcIsWeXCIsXCImU2NpcmM7XCI6XCLFnFwiLFwiJlNjeTtcIjpcItChXCIsXCImU2ZyO1wiOlwi8J2UllwiLFwiJlNob3J0RG93bkFycm93O1wiOlwi4oaTXCIsXCImU2hvcnRMZWZ0QXJyb3c7XCI6XCLihpBcIixcIiZTaG9ydFJpZ2h0QXJyb3c7XCI6XCLihpJcIixcIiZTaG9ydFVwQXJyb3c7XCI6XCLihpFcIixcIiZTaWdtYTtcIjpcIs6jXCIsXCImU21hbGxDaXJjbGU7XCI6XCLiiJhcIixcIiZTb3BmO1wiOlwi8J2VilwiLFwiJlNxcnQ7XCI6XCLiiJpcIixcIiZTcXVhcmU7XCI6XCLilqFcIixcIiZTcXVhcmVJbnRlcnNlY3Rpb247XCI6XCLiipNcIixcIiZTcXVhcmVTdWJzZXQ7XCI6XCLiio9cIixcIiZTcXVhcmVTdWJzZXRFcXVhbDtcIjpcIuKKkVwiLFwiJlNxdWFyZVN1cGVyc2V0O1wiOlwi4oqQXCIsXCImU3F1YXJlU3VwZXJzZXRFcXVhbDtcIjpcIuKKklwiLFwiJlNxdWFyZVVuaW9uO1wiOlwi4oqUXCIsXCImU3NjcjtcIjpcIvCdkq5cIixcIiZTdGFyO1wiOlwi4ouGXCIsXCImU3ViO1wiOlwi4ouQXCIsXCImU3Vic2V0O1wiOlwi4ouQXCIsXCImU3Vic2V0RXF1YWw7XCI6XCLiioZcIixcIiZTdWNjZWVkcztcIjpcIuKJu1wiLFwiJlN1Y2NlZWRzRXF1YWw7XCI6XCLiqrBcIixcIiZTdWNjZWVkc1NsYW50RXF1YWw7XCI6XCLiib1cIixcIiZTdWNjZWVkc1RpbGRlO1wiOlwi4om/XCIsXCImU3VjaFRoYXQ7XCI6XCLiiItcIixcIiZTdW07XCI6XCLiiJFcIixcIiZTdXA7XCI6XCLii5FcIixcIiZTdXBlcnNldDtcIjpcIuKKg1wiLFwiJlN1cGVyc2V0RXF1YWw7XCI6XCLiiodcIixcIiZTdXBzZXQ7XCI6XCLii5FcIixcIiZUSE9STlwiOlwiw55cIixcIiZUSE9STjtcIjpcIsOeXCIsXCImVFJBREU7XCI6XCLihKJcIixcIiZUU0hjeTtcIjpcItCLXCIsXCImVFNjeTtcIjpcItCmXCIsXCImVGFiO1wiOlwiXFx0XCIsXCImVGF1O1wiOlwizqRcIixcIiZUY2Fyb247XCI6XCLFpFwiLFwiJlRjZWRpbDtcIjpcIsWiXCIsXCImVGN5O1wiOlwi0KJcIixcIiZUZnI7XCI6XCLwnZSXXCIsXCImVGhlcmVmb3JlO1wiOlwi4oi0XCIsXCImVGhldGE7XCI6XCLOmFwiLFwiJlRoaWNrU3BhY2U7XCI6XCLigZ/igIpcIixcIiZUaGluU3BhY2U7XCI6XCLigIlcIixcIiZUaWxkZTtcIjpcIuKIvFwiLFwiJlRpbGRlRXF1YWw7XCI6XCLiiYNcIixcIiZUaWxkZUZ1bGxFcXVhbDtcIjpcIuKJhVwiLFwiJlRpbGRlVGlsZGU7XCI6XCLiiYhcIixcIiZUb3BmO1wiOlwi8J2Vi1wiLFwiJlRyaXBsZURvdDtcIjpcIuKDm1wiLFwiJlRzY3I7XCI6XCLwnZKvXCIsXCImVHN0cm9rO1wiOlwixaZcIixcIiZVYWN1dGVcIjpcIsOaXCIsXCImVWFjdXRlO1wiOlwiw5pcIixcIiZVYXJyO1wiOlwi4oafXCIsXCImVWFycm9jaXI7XCI6XCLipYlcIixcIiZVYnJjeTtcIjpcItCOXCIsXCImVWJyZXZlO1wiOlwixaxcIixcIiZVY2lyY1wiOlwiw5tcIixcIiZVY2lyYztcIjpcIsObXCIsXCImVWN5O1wiOlwi0KNcIixcIiZVZGJsYWM7XCI6XCLFsFwiLFwiJlVmcjtcIjpcIvCdlJhcIixcIiZVZ3JhdmVcIjpcIsOZXCIsXCImVWdyYXZlO1wiOlwiw5lcIixcIiZVbWFjcjtcIjpcIsWqXCIsXCImVW5kZXJCYXI7XCI6XCJfXCIsXCImVW5kZXJCcmFjZTtcIjpcIuKPn1wiLFwiJlVuZGVyQnJhY2tldDtcIjpcIuKOtVwiLFwiJlVuZGVyUGFyZW50aGVzaXM7XCI6XCLij51cIixcIiZVbmlvbjtcIjpcIuKLg1wiLFwiJlVuaW9uUGx1cztcIjpcIuKKjlwiLFwiJlVvZ29uO1wiOlwixbJcIixcIiZVb3BmO1wiOlwi8J2VjFwiLFwiJlVwQXJyb3c7XCI6XCLihpFcIixcIiZVcEFycm93QmFyO1wiOlwi4qSSXCIsXCImVXBBcnJvd0Rvd25BcnJvdztcIjpcIuKHhVwiLFwiJlVwRG93bkFycm93O1wiOlwi4oaVXCIsXCImVXBFcXVpbGlicml1bTtcIjpcIuKlrlwiLFwiJlVwVGVlO1wiOlwi4oqlXCIsXCImVXBUZWVBcnJvdztcIjpcIuKGpVwiLFwiJlVwYXJyb3c7XCI6XCLih5FcIixcIiZVcGRvd25hcnJvdztcIjpcIuKHlVwiLFwiJlVwcGVyTGVmdEFycm93O1wiOlwi4oaWXCIsXCImVXBwZXJSaWdodEFycm93O1wiOlwi4oaXXCIsXCImVXBzaTtcIjpcIs+SXCIsXCImVXBzaWxvbjtcIjpcIs6lXCIsXCImVXJpbmc7XCI6XCLFrlwiLFwiJlVzY3I7XCI6XCLwnZKwXCIsXCImVXRpbGRlO1wiOlwixahcIixcIiZVdW1sXCI6XCLDnFwiLFwiJlV1bWw7XCI6XCLDnFwiLFwiJlZEYXNoO1wiOlwi4oqrXCIsXCImVmJhcjtcIjpcIuKrq1wiLFwiJlZjeTtcIjpcItCSXCIsXCImVmRhc2g7XCI6XCLiiqlcIixcIiZWZGFzaGw7XCI6XCLiq6ZcIixcIiZWZWU7XCI6XCLii4FcIixcIiZWZXJiYXI7XCI6XCLigJZcIixcIiZWZXJ0O1wiOlwi4oCWXCIsXCImVmVydGljYWxCYXI7XCI6XCLiiKNcIixcIiZWZXJ0aWNhbExpbmU7XCI6XCJ8XCIsXCImVmVydGljYWxTZXBhcmF0b3I7XCI6XCLinZhcIixcIiZWZXJ0aWNhbFRpbGRlO1wiOlwi4omAXCIsXCImVmVyeVRoaW5TcGFjZTtcIjpcIuKAilwiLFwiJlZmcjtcIjpcIvCdlJlcIixcIiZWb3BmO1wiOlwi8J2VjVwiLFwiJlZzY3I7XCI6XCLwnZKxXCIsXCImVnZkYXNoO1wiOlwi4oqqXCIsXCImV2NpcmM7XCI6XCLFtFwiLFwiJldlZGdlO1wiOlwi4ouAXCIsXCImV2ZyO1wiOlwi8J2UmlwiLFwiJldvcGY7XCI6XCLwnZWOXCIsXCImV3NjcjtcIjpcIvCdkrJcIixcIiZYZnI7XCI6XCLwnZSbXCIsXCImWGk7XCI6XCLOnlwiLFwiJlhvcGY7XCI6XCLwnZWPXCIsXCImWHNjcjtcIjpcIvCdkrNcIixcIiZZQWN5O1wiOlwi0K9cIixcIiZZSWN5O1wiOlwi0IdcIixcIiZZVWN5O1wiOlwi0K5cIixcIiZZYWN1dGVcIjpcIsOdXCIsXCImWWFjdXRlO1wiOlwiw51cIixcIiZZY2lyYztcIjpcIsW2XCIsXCImWWN5O1wiOlwi0KtcIixcIiZZZnI7XCI6XCLwnZScXCIsXCImWW9wZjtcIjpcIvCdlZBcIixcIiZZc2NyO1wiOlwi8J2StFwiLFwiJll1bWw7XCI6XCLFuFwiLFwiJlpIY3k7XCI6XCLQllwiLFwiJlphY3V0ZTtcIjpcIsW5XCIsXCImWmNhcm9uO1wiOlwixb1cIixcIiZaY3k7XCI6XCLQl1wiLFwiJlpkb3Q7XCI6XCLFu1wiLFwiJlplcm9XaWR0aFNwYWNlO1wiOlwi4oCLXCIsXCImWmV0YTtcIjpcIs6WXCIsXCImWmZyO1wiOlwi4oSoXCIsXCImWm9wZjtcIjpcIuKEpFwiLFwiJlpzY3I7XCI6XCLwnZK1XCIsXCImYWFjdXRlXCI6XCLDoVwiLFwiJmFhY3V0ZTtcIjpcIsOhXCIsXCImYWJyZXZlO1wiOlwixINcIixcIiZhYztcIjpcIuKIvlwiLFwiJmFjRTtcIjpcIuKIvsyzXCIsXCImYWNkO1wiOlwi4oi/XCIsXCImYWNpcmNcIjpcIsOiXCIsXCImYWNpcmM7XCI6XCLDolwiLFwiJmFjdXRlXCI6XCLCtFwiLFwiJmFjdXRlO1wiOlwiwrRcIixcIiZhY3k7XCI6XCLQsFwiLFwiJmFlbGlnXCI6XCLDplwiLFwiJmFlbGlnO1wiOlwiw6ZcIixcIiZhZjtcIjpcIuKBoVwiLFwiJmFmcjtcIjpcIvCdlJ5cIixcIiZhZ3JhdmVcIjpcIsOgXCIsXCImYWdyYXZlO1wiOlwiw6BcIixcIiZhbGVmc3ltO1wiOlwi4oS1XCIsXCImYWxlcGg7XCI6XCLihLVcIixcIiZhbHBoYTtcIjpcIs6xXCIsXCImYW1hY3I7XCI6XCLEgVwiLFwiJmFtYWxnO1wiOlwi4qi/XCIsXCImYW1wXCI6XCImXCIsXCImYW1wO1wiOlwiJlwiLFwiJmFuZDtcIjpcIuKIp1wiLFwiJmFuZGFuZDtcIjpcIuKplVwiLFwiJmFuZGQ7XCI6XCLiqZxcIixcIiZhbmRzbG9wZTtcIjpcIuKpmFwiLFwiJmFuZHY7XCI6XCLiqZpcIixcIiZhbmc7XCI6XCLiiKBcIixcIiZhbmdlO1wiOlwi4qakXCIsXCImYW5nbGU7XCI6XCLiiKBcIixcIiZhbmdtc2Q7XCI6XCLiiKFcIixcIiZhbmdtc2RhYTtcIjpcIuKmqFwiLFwiJmFuZ21zZGFiO1wiOlwi4qapXCIsXCImYW5nbXNkYWM7XCI6XCLipqpcIixcIiZhbmdtc2RhZDtcIjpcIuKmq1wiLFwiJmFuZ21zZGFlO1wiOlwi4qasXCIsXCImYW5nbXNkYWY7XCI6XCLipq1cIixcIiZhbmdtc2RhZztcIjpcIuKmrlwiLFwiJmFuZ21zZGFoO1wiOlwi4qavXCIsXCImYW5ncnQ7XCI6XCLiiJ9cIixcIiZhbmdydHZiO1wiOlwi4oq+XCIsXCImYW5ncnR2YmQ7XCI6XCLipp1cIixcIiZhbmdzcGg7XCI6XCLiiKJcIixcIiZhbmdzdDtcIjpcIsOFXCIsXCImYW5nemFycjtcIjpcIuKNvFwiLFwiJmFvZ29uO1wiOlwixIVcIixcIiZhb3BmO1wiOlwi8J2VklwiLFwiJmFwO1wiOlwi4omIXCIsXCImYXBFO1wiOlwi4qmwXCIsXCImYXBhY2lyO1wiOlwi4qmvXCIsXCImYXBlO1wiOlwi4omKXCIsXCImYXBpZDtcIjpcIuKJi1wiLFwiJmFwb3M7XCI6XCInXCIsXCImYXBwcm94O1wiOlwi4omIXCIsXCImYXBwcm94ZXE7XCI6XCLiiYpcIixcIiZhcmluZ1wiOlwiw6VcIixcIiZhcmluZztcIjpcIsOlXCIsXCImYXNjcjtcIjpcIvCdkrZcIixcIiZhc3Q7XCI6XCIqXCIsXCImYXN5bXA7XCI6XCLiiYhcIixcIiZhc3ltcGVxO1wiOlwi4omNXCIsXCImYXRpbGRlXCI6XCLDo1wiLFwiJmF0aWxkZTtcIjpcIsOjXCIsXCImYXVtbFwiOlwiw6RcIixcIiZhdW1sO1wiOlwiw6RcIixcIiZhd2NvbmludDtcIjpcIuKIs1wiLFwiJmF3aW50O1wiOlwi4qiRXCIsXCImYk5vdDtcIjpcIuKrrVwiLFwiJmJhY2tjb25nO1wiOlwi4omMXCIsXCImYmFja2Vwc2lsb247XCI6XCLPtlwiLFwiJmJhY2twcmltZTtcIjpcIuKAtVwiLFwiJmJhY2tzaW07XCI6XCLiiL1cIixcIiZiYWNrc2ltZXE7XCI6XCLii41cIixcIiZiYXJ2ZWU7XCI6XCLiir1cIixcIiZiYXJ3ZWQ7XCI6XCLijIVcIixcIiZiYXJ3ZWRnZTtcIjpcIuKMhVwiLFwiJmJicms7XCI6XCLijrVcIixcIiZiYnJrdGJyaztcIjpcIuKOtlwiLFwiJmJjb25nO1wiOlwi4omMXCIsXCImYmN5O1wiOlwi0LFcIixcIiZiZHF1bztcIjpcIuKAnlwiLFwiJmJlY2F1cztcIjpcIuKItVwiLFwiJmJlY2F1c2U7XCI6XCLiiLVcIixcIiZiZW1wdHl2O1wiOlwi4qawXCIsXCImYmVwc2k7XCI6XCLPtlwiLFwiJmJlcm5vdTtcIjpcIuKErFwiLFwiJmJldGE7XCI6XCLOslwiLFwiJmJldGg7XCI6XCLihLZcIixcIiZiZXR3ZWVuO1wiOlwi4omsXCIsXCImYmZyO1wiOlwi8J2Un1wiLFwiJmJpZ2NhcDtcIjpcIuKLglwiLFwiJmJpZ2NpcmM7XCI6XCLil69cIixcIiZiaWdjdXA7XCI6XCLii4NcIixcIiZiaWdvZG90O1wiOlwi4qiAXCIsXCImYmlnb3BsdXM7XCI6XCLiqIFcIixcIiZiaWdvdGltZXM7XCI6XCLiqIJcIixcIiZiaWdzcWN1cDtcIjpcIuKohlwiLFwiJmJpZ3N0YXI7XCI6XCLimIVcIixcIiZiaWd0cmlhbmdsZWRvd247XCI6XCLilr1cIixcIiZiaWd0cmlhbmdsZXVwO1wiOlwi4pazXCIsXCImYmlndXBsdXM7XCI6XCLiqIRcIixcIiZiaWd2ZWU7XCI6XCLii4FcIixcIiZiaWd3ZWRnZTtcIjpcIuKLgFwiLFwiJmJrYXJvdztcIjpcIuKkjVwiLFwiJmJsYWNrbG96ZW5nZTtcIjpcIuKnq1wiLFwiJmJsYWNrc3F1YXJlO1wiOlwi4paqXCIsXCImYmxhY2t0cmlhbmdsZTtcIjpcIuKWtFwiLFwiJmJsYWNrdHJpYW5nbGVkb3duO1wiOlwi4pa+XCIsXCImYmxhY2t0cmlhbmdsZWxlZnQ7XCI6XCLil4JcIixcIiZibGFja3RyaWFuZ2xlcmlnaHQ7XCI6XCLilrhcIixcIiZibGFuaztcIjpcIuKQo1wiLFwiJmJsazEyO1wiOlwi4paSXCIsXCImYmxrMTQ7XCI6XCLilpFcIixcIiZibGszNDtcIjpcIuKWk1wiLFwiJmJsb2NrO1wiOlwi4paIXCIsXCImYm5lO1wiOlwiPeKDpVwiLFwiJmJuZXF1aXY7XCI6XCLiiaHig6VcIixcIiZibm90O1wiOlwi4oyQXCIsXCImYm9wZjtcIjpcIvCdlZNcIixcIiZib3Q7XCI6XCLiiqVcIixcIiZib3R0b207XCI6XCLiiqVcIixcIiZib3d0aWU7XCI6XCLii4hcIixcIiZib3hETDtcIjpcIuKVl1wiLFwiJmJveERSO1wiOlwi4pWUXCIsXCImYm94RGw7XCI6XCLilZZcIixcIiZib3hEcjtcIjpcIuKVk1wiLFwiJmJveEg7XCI6XCLilZBcIixcIiZib3hIRDtcIjpcIuKVplwiLFwiJmJveEhVO1wiOlwi4pWpXCIsXCImYm94SGQ7XCI6XCLilaRcIixcIiZib3hIdTtcIjpcIuKVp1wiLFwiJmJveFVMO1wiOlwi4pWdXCIsXCImYm94VVI7XCI6XCLilZpcIixcIiZib3hVbDtcIjpcIuKVnFwiLFwiJmJveFVyO1wiOlwi4pWZXCIsXCImYm94VjtcIjpcIuKVkVwiLFwiJmJveFZIO1wiOlwi4pWsXCIsXCImYm94Vkw7XCI6XCLilaNcIixcIiZib3hWUjtcIjpcIuKVoFwiLFwiJmJveFZoO1wiOlwi4pWrXCIsXCImYm94Vmw7XCI6XCLilaJcIixcIiZib3hWcjtcIjpcIuKVn1wiLFwiJmJveGJveDtcIjpcIuKniVwiLFwiJmJveGRMO1wiOlwi4pWVXCIsXCImYm94ZFI7XCI6XCLilZJcIixcIiZib3hkbDtcIjpcIuKUkFwiLFwiJmJveGRyO1wiOlwi4pSMXCIsXCImYm94aDtcIjpcIuKUgFwiLFwiJmJveGhEO1wiOlwi4pWlXCIsXCImYm94aFU7XCI6XCLilahcIixcIiZib3hoZDtcIjpcIuKUrFwiLFwiJmJveGh1O1wiOlwi4pS0XCIsXCImYm94bWludXM7XCI6XCLiip9cIixcIiZib3hwbHVzO1wiOlwi4oqeXCIsXCImYm94dGltZXM7XCI6XCLiiqBcIixcIiZib3h1TDtcIjpcIuKVm1wiLFwiJmJveHVSO1wiOlwi4pWYXCIsXCImYm94dWw7XCI6XCLilJhcIixcIiZib3h1cjtcIjpcIuKUlFwiLFwiJmJveHY7XCI6XCLilIJcIixcIiZib3h2SDtcIjpcIuKVqlwiLFwiJmJveHZMO1wiOlwi4pWhXCIsXCImYm94dlI7XCI6XCLilZ5cIixcIiZib3h2aDtcIjpcIuKUvFwiLFwiJmJveHZsO1wiOlwi4pSkXCIsXCImYm94dnI7XCI6XCLilJxcIixcIiZicHJpbWU7XCI6XCLigLVcIixcIiZicmV2ZTtcIjpcIsuYXCIsXCImYnJ2YmFyXCI6XCLCplwiLFwiJmJydmJhcjtcIjpcIsKmXCIsXCImYnNjcjtcIjpcIvCdkrdcIixcIiZic2VtaTtcIjpcIuKBj1wiLFwiJmJzaW07XCI6XCLiiL1cIixcIiZic2ltZTtcIjpcIuKLjVwiLFwiJmJzb2w7XCI6XCJcXFxcXCIsXCImYnNvbGI7XCI6XCLip4VcIixcIiZic29saHN1YjtcIjpcIuKfiFwiLFwiJmJ1bGw7XCI6XCLigKJcIixcIiZidWxsZXQ7XCI6XCLigKJcIixcIiZidW1wO1wiOlwi4omOXCIsXCImYnVtcEU7XCI6XCLiqq5cIixcIiZidW1wZTtcIjpcIuKJj1wiLFwiJmJ1bXBlcTtcIjpcIuKJj1wiLFwiJmNhY3V0ZTtcIjpcIsSHXCIsXCImY2FwO1wiOlwi4oipXCIsXCImY2FwYW5kO1wiOlwi4qmEXCIsXCImY2FwYnJjdXA7XCI6XCLiqYlcIixcIiZjYXBjYXA7XCI6XCLiqYtcIixcIiZjYXBjdXA7XCI6XCLiqYdcIixcIiZjYXBkb3Q7XCI6XCLiqYBcIixcIiZjYXBzO1wiOlwi4oip77iAXCIsXCImY2FyZXQ7XCI6XCLigYFcIixcIiZjYXJvbjtcIjpcIsuHXCIsXCImY2NhcHM7XCI6XCLiqY1cIixcIiZjY2Fyb247XCI6XCLEjVwiLFwiJmNjZWRpbFwiOlwiw6dcIixcIiZjY2VkaWw7XCI6XCLDp1wiLFwiJmNjaXJjO1wiOlwixIlcIixcIiZjY3VwcztcIjpcIuKpjFwiLFwiJmNjdXBzc207XCI6XCLiqZBcIixcIiZjZG90O1wiOlwixItcIixcIiZjZWRpbFwiOlwiwrhcIixcIiZjZWRpbDtcIjpcIsK4XCIsXCImY2VtcHR5djtcIjpcIuKmslwiLFwiJmNlbnRcIjpcIsKiXCIsXCImY2VudDtcIjpcIsKiXCIsXCImY2VudGVyZG90O1wiOlwiwrdcIixcIiZjZnI7XCI6XCLwnZSgXCIsXCImY2hjeTtcIjpcItGHXCIsXCImY2hlY2s7XCI6XCLinJNcIixcIiZjaGVja21hcms7XCI6XCLinJNcIixcIiZjaGk7XCI6XCLPh1wiLFwiJmNpcjtcIjpcIuKXi1wiLFwiJmNpckU7XCI6XCLip4NcIixcIiZjaXJjO1wiOlwiy4ZcIixcIiZjaXJjZXE7XCI6XCLiiZdcIixcIiZjaXJjbGVhcnJvd2xlZnQ7XCI6XCLihrpcIixcIiZjaXJjbGVhcnJvd3JpZ2h0O1wiOlwi4oa7XCIsXCImY2lyY2xlZFI7XCI6XCLCrlwiLFwiJmNpcmNsZWRTO1wiOlwi4pOIXCIsXCImY2lyY2xlZGFzdDtcIjpcIuKKm1wiLFwiJmNpcmNsZWRjaXJjO1wiOlwi4oqaXCIsXCImY2lyY2xlZGRhc2g7XCI6XCLiip1cIixcIiZjaXJlO1wiOlwi4omXXCIsXCImY2lyZm5pbnQ7XCI6XCLiqJBcIixcIiZjaXJtaWQ7XCI6XCLiq69cIixcIiZjaXJzY2lyO1wiOlwi4qeCXCIsXCImY2x1YnM7XCI6XCLimaNcIixcIiZjbHVic3VpdDtcIjpcIuKZo1wiLFwiJmNvbG9uO1wiOlwiOlwiLFwiJmNvbG9uZTtcIjpcIuKJlFwiLFwiJmNvbG9uZXE7XCI6XCLiiZRcIixcIiZjb21tYTtcIjpcIixcIixcIiZjb21tYXQ7XCI6XCJAXCIsXCImY29tcDtcIjpcIuKIgVwiLFwiJmNvbXBmbjtcIjpcIuKImFwiLFwiJmNvbXBsZW1lbnQ7XCI6XCLiiIFcIixcIiZjb21wbGV4ZXM7XCI6XCLihIJcIixcIiZjb25nO1wiOlwi4omFXCIsXCImY29uZ2RvdDtcIjpcIuKprVwiLFwiJmNvbmludDtcIjpcIuKIrlwiLFwiJmNvcGY7XCI6XCLwnZWUXCIsXCImY29wcm9kO1wiOlwi4oiQXCIsXCImY29weVwiOlwiwqlcIixcIiZjb3B5O1wiOlwiwqlcIixcIiZjb3B5c3I7XCI6XCLihJdcIixcIiZjcmFycjtcIjpcIuKGtVwiLFwiJmNyb3NzO1wiOlwi4pyXXCIsXCImY3NjcjtcIjpcIvCdkrhcIixcIiZjc3ViO1wiOlwi4quPXCIsXCImY3N1YmU7XCI6XCLiq5FcIixcIiZjc3VwO1wiOlwi4quQXCIsXCImY3N1cGU7XCI6XCLiq5JcIixcIiZjdGRvdDtcIjpcIuKLr1wiLFwiJmN1ZGFycmw7XCI6XCLipLhcIixcIiZjdWRhcnJyO1wiOlwi4qS1XCIsXCImY3VlcHI7XCI6XCLii55cIixcIiZjdWVzYztcIjpcIuKLn1wiLFwiJmN1bGFycjtcIjpcIuKGtlwiLFwiJmN1bGFycnA7XCI6XCLipL1cIixcIiZjdXA7XCI6XCLiiKpcIixcIiZjdXBicmNhcDtcIjpcIuKpiFwiLFwiJmN1cGNhcDtcIjpcIuKphlwiLFwiJmN1cGN1cDtcIjpcIuKpilwiLFwiJmN1cGRvdDtcIjpcIuKKjVwiLFwiJmN1cG9yO1wiOlwi4qmFXCIsXCImY3VwcztcIjpcIuKIqu+4gFwiLFwiJmN1cmFycjtcIjpcIuKGt1wiLFwiJmN1cmFycm07XCI6XCLipLxcIixcIiZjdXJseWVxcHJlYztcIjpcIuKLnlwiLFwiJmN1cmx5ZXFzdWNjO1wiOlwi4oufXCIsXCImY3VybHl2ZWU7XCI6XCLii45cIixcIiZjdXJseXdlZGdlO1wiOlwi4ouPXCIsXCImY3VycmVuXCI6XCLCpFwiLFwiJmN1cnJlbjtcIjpcIsKkXCIsXCImY3VydmVhcnJvd2xlZnQ7XCI6XCLihrZcIixcIiZjdXJ2ZWFycm93cmlnaHQ7XCI6XCLihrdcIixcIiZjdXZlZTtcIjpcIuKLjlwiLFwiJmN1d2VkO1wiOlwi4ouPXCIsXCImY3djb25pbnQ7XCI6XCLiiLJcIixcIiZjd2ludDtcIjpcIuKIsVwiLFwiJmN5bGN0eTtcIjpcIuKMrVwiLFwiJmRBcnI7XCI6XCLih5NcIixcIiZkSGFyO1wiOlwi4qWlXCIsXCImZGFnZ2VyO1wiOlwi4oCgXCIsXCImZGFsZXRoO1wiOlwi4oS4XCIsXCImZGFycjtcIjpcIuKGk1wiLFwiJmRhc2g7XCI6XCLigJBcIixcIiZkYXNodjtcIjpcIuKKo1wiLFwiJmRia2Fyb3c7XCI6XCLipI9cIixcIiZkYmxhYztcIjpcIsudXCIsXCImZGNhcm9uO1wiOlwixI9cIixcIiZkY3k7XCI6XCLQtFwiLFwiJmRkO1wiOlwi4oWGXCIsXCImZGRhZ2dlcjtcIjpcIuKAoVwiLFwiJmRkYXJyO1wiOlwi4oeKXCIsXCImZGRvdHNlcTtcIjpcIuKpt1wiLFwiJmRlZ1wiOlwiwrBcIixcIiZkZWc7XCI6XCLCsFwiLFwiJmRlbHRhO1wiOlwizrRcIixcIiZkZW1wdHl2O1wiOlwi4qaxXCIsXCImZGZpc2h0O1wiOlwi4qW/XCIsXCImZGZyO1wiOlwi8J2UoVwiLFwiJmRoYXJsO1wiOlwi4oeDXCIsXCImZGhhcnI7XCI6XCLih4JcIixcIiZkaWFtO1wiOlwi4ouEXCIsXCImZGlhbW9uZDtcIjpcIuKLhFwiLFwiJmRpYW1vbmRzdWl0O1wiOlwi4pmmXCIsXCImZGlhbXM7XCI6XCLimaZcIixcIiZkaWU7XCI6XCLCqFwiLFwiJmRpZ2FtbWE7XCI6XCLPnVwiLFwiJmRpc2luO1wiOlwi4ouyXCIsXCImZGl2O1wiOlwiw7dcIixcIiZkaXZpZGVcIjpcIsO3XCIsXCImZGl2aWRlO1wiOlwiw7dcIixcIiZkaXZpZGVvbnRpbWVzO1wiOlwi4ouHXCIsXCImZGl2b254O1wiOlwi4ouHXCIsXCImZGpjeTtcIjpcItGSXCIsXCImZGxjb3JuO1wiOlwi4oyeXCIsXCImZGxjcm9wO1wiOlwi4oyNXCIsXCImZG9sbGFyO1wiOlwiJFwiLFwiJmRvcGY7XCI6XCLwnZWVXCIsXCImZG90O1wiOlwiy5lcIixcIiZkb3RlcTtcIjpcIuKJkFwiLFwiJmRvdGVxZG90O1wiOlwi4omRXCIsXCImZG90bWludXM7XCI6XCLiiLhcIixcIiZkb3RwbHVzO1wiOlwi4oiUXCIsXCImZG90c3F1YXJlO1wiOlwi4oqhXCIsXCImZG91YmxlYmFyd2VkZ2U7XCI6XCLijIZcIixcIiZkb3duYXJyb3c7XCI6XCLihpNcIixcIiZkb3duZG93bmFycm93cztcIjpcIuKHilwiLFwiJmRvd25oYXJwb29ubGVmdDtcIjpcIuKHg1wiLFwiJmRvd25oYXJwb29ucmlnaHQ7XCI6XCLih4JcIixcIiZkcmJrYXJvdztcIjpcIuKkkFwiLFwiJmRyY29ybjtcIjpcIuKMn1wiLFwiJmRyY3JvcDtcIjpcIuKMjFwiLFwiJmRzY3I7XCI6XCLwnZK5XCIsXCImZHNjeTtcIjpcItGVXCIsXCImZHNvbDtcIjpcIuKntlwiLFwiJmRzdHJvaztcIjpcIsSRXCIsXCImZHRkb3Q7XCI6XCLii7FcIixcIiZkdHJpO1wiOlwi4pa/XCIsXCImZHRyaWY7XCI6XCLilr5cIixcIiZkdWFycjtcIjpcIuKHtVwiLFwiJmR1aGFyO1wiOlwi4qWvXCIsXCImZHdhbmdsZTtcIjpcIuKmplwiLFwiJmR6Y3k7XCI6XCLRn1wiLFwiJmR6aWdyYXJyO1wiOlwi4p+/XCIsXCImZUREb3Q7XCI6XCLiqbdcIixcIiZlRG90O1wiOlwi4omRXCIsXCImZWFjdXRlXCI6XCLDqVwiLFwiJmVhY3V0ZTtcIjpcIsOpXCIsXCImZWFzdGVyO1wiOlwi4qmuXCIsXCImZWNhcm9uO1wiOlwixJtcIixcIiZlY2lyO1wiOlwi4omWXCIsXCImZWNpcmNcIjpcIsOqXCIsXCImZWNpcmM7XCI6XCLDqlwiLFwiJmVjb2xvbjtcIjpcIuKJlVwiLFwiJmVjeTtcIjpcItGNXCIsXCImZWRvdDtcIjpcIsSXXCIsXCImZWU7XCI6XCLihYdcIixcIiZlZkRvdDtcIjpcIuKJklwiLFwiJmVmcjtcIjpcIvCdlKJcIixcIiZlZztcIjpcIuKqmlwiLFwiJmVncmF2ZVwiOlwiw6hcIixcIiZlZ3JhdmU7XCI6XCLDqFwiLFwiJmVncztcIjpcIuKqllwiLFwiJmVnc2RvdDtcIjpcIuKqmFwiLFwiJmVsO1wiOlwi4qqZXCIsXCImZWxpbnRlcnM7XCI6XCLij6dcIixcIiZlbGw7XCI6XCLihJNcIixcIiZlbHM7XCI6XCLiqpVcIixcIiZlbHNkb3Q7XCI6XCLiqpdcIixcIiZlbWFjcjtcIjpcIsSTXCIsXCImZW1wdHk7XCI6XCLiiIVcIixcIiZlbXB0eXNldDtcIjpcIuKIhVwiLFwiJmVtcHR5djtcIjpcIuKIhVwiLFwiJmVtc3AxMztcIjpcIuKAhFwiLFwiJmVtc3AxNDtcIjpcIuKAhVwiLFwiJmVtc3A7XCI6XCLigINcIixcIiZlbmc7XCI6XCLFi1wiLFwiJmVuc3A7XCI6XCLigIJcIixcIiZlb2dvbjtcIjpcIsSZXCIsXCImZW9wZjtcIjpcIvCdlZZcIixcIiZlcGFyO1wiOlwi4ouVXCIsXCImZXBhcnNsO1wiOlwi4qejXCIsXCImZXBsdXM7XCI6XCLiqbFcIixcIiZlcHNpO1wiOlwizrVcIixcIiZlcHNpbG9uO1wiOlwizrVcIixcIiZlcHNpdjtcIjpcIs+1XCIsXCImZXFjaXJjO1wiOlwi4omWXCIsXCImZXFjb2xvbjtcIjpcIuKJlVwiLFwiJmVxc2ltO1wiOlwi4omCXCIsXCImZXFzbGFudGd0cjtcIjpcIuKqllwiLFwiJmVxc2xhbnRsZXNzO1wiOlwi4qqVXCIsXCImZXF1YWxzO1wiOlwiPVwiLFwiJmVxdWVzdDtcIjpcIuKJn1wiLFwiJmVxdWl2O1wiOlwi4omhXCIsXCImZXF1aXZERDtcIjpcIuKpuFwiLFwiJmVxdnBhcnNsO1wiOlwi4qelXCIsXCImZXJEb3Q7XCI6XCLiiZNcIixcIiZlcmFycjtcIjpcIuKlsVwiLFwiJmVzY3I7XCI6XCLihK9cIixcIiZlc2RvdDtcIjpcIuKJkFwiLFwiJmVzaW07XCI6XCLiiYJcIixcIiZldGE7XCI6XCLOt1wiLFwiJmV0aFwiOlwiw7BcIixcIiZldGg7XCI6XCLDsFwiLFwiJmV1bWxcIjpcIsOrXCIsXCImZXVtbDtcIjpcIsOrXCIsXCImZXVybztcIjpcIuKCrFwiLFwiJmV4Y2w7XCI6XCIhXCIsXCImZXhpc3Q7XCI6XCLiiINcIixcIiZleHBlY3RhdGlvbjtcIjpcIuKEsFwiLFwiJmV4cG9uZW50aWFsZTtcIjpcIuKFh1wiLFwiJmZhbGxpbmdkb3RzZXE7XCI6XCLiiZJcIixcIiZmY3k7XCI6XCLRhFwiLFwiJmZlbWFsZTtcIjpcIuKZgFwiLFwiJmZmaWxpZztcIjpcIu+sg1wiLFwiJmZmbGlnO1wiOlwi76yAXCIsXCImZmZsbGlnO1wiOlwi76yEXCIsXCImZmZyO1wiOlwi8J2Uo1wiLFwiJmZpbGlnO1wiOlwi76yBXCIsXCImZmpsaWc7XCI6XCJmalwiLFwiJmZsYXQ7XCI6XCLima1cIixcIiZmbGxpZztcIjpcIu+sglwiLFwiJmZsdG5zO1wiOlwi4paxXCIsXCImZm5vZjtcIjpcIsaSXCIsXCImZm9wZjtcIjpcIvCdlZdcIixcIiZmb3JhbGw7XCI6XCLiiIBcIixcIiZmb3JrO1wiOlwi4ouUXCIsXCImZm9ya3Y7XCI6XCLiq5lcIixcIiZmcGFydGludDtcIjpcIuKojVwiLFwiJmZyYWMxMlwiOlwiwr1cIixcIiZmcmFjMTI7XCI6XCLCvVwiLFwiJmZyYWMxMztcIjpcIuKFk1wiLFwiJmZyYWMxNFwiOlwiwrxcIixcIiZmcmFjMTQ7XCI6XCLCvFwiLFwiJmZyYWMxNTtcIjpcIuKFlVwiLFwiJmZyYWMxNjtcIjpcIuKFmVwiLFwiJmZyYWMxODtcIjpcIuKFm1wiLFwiJmZyYWMyMztcIjpcIuKFlFwiLFwiJmZyYWMyNTtcIjpcIuKFllwiLFwiJmZyYWMzNFwiOlwiwr5cIixcIiZmcmFjMzQ7XCI6XCLCvlwiLFwiJmZyYWMzNTtcIjpcIuKFl1wiLFwiJmZyYWMzODtcIjpcIuKFnFwiLFwiJmZyYWM0NTtcIjpcIuKFmFwiLFwiJmZyYWM1NjtcIjpcIuKFmlwiLFwiJmZyYWM1ODtcIjpcIuKFnVwiLFwiJmZyYWM3ODtcIjpcIuKFnlwiLFwiJmZyYXNsO1wiOlwi4oGEXCIsXCImZnJvd247XCI6XCLijKJcIixcIiZmc2NyO1wiOlwi8J2Su1wiLFwiJmdFO1wiOlwi4omnXCIsXCImZ0VsO1wiOlwi4qqMXCIsXCImZ2FjdXRlO1wiOlwix7VcIixcIiZnYW1tYTtcIjpcIs6zXCIsXCImZ2FtbWFkO1wiOlwiz51cIixcIiZnYXA7XCI6XCLiqoZcIixcIiZnYnJldmU7XCI6XCLEn1wiLFwiJmdjaXJjO1wiOlwixJ1cIixcIiZnY3k7XCI6XCLQs1wiLFwiJmdkb3Q7XCI6XCLEoVwiLFwiJmdlO1wiOlwi4omlXCIsXCImZ2VsO1wiOlwi4oubXCIsXCImZ2VxO1wiOlwi4omlXCIsXCImZ2VxcTtcIjpcIuKJp1wiLFwiJmdlcXNsYW50O1wiOlwi4qm+XCIsXCImZ2VzO1wiOlwi4qm+XCIsXCImZ2VzY2M7XCI6XCLiqqlcIixcIiZnZXNkb3Q7XCI6XCLiqoBcIixcIiZnZXNkb3RvO1wiOlwi4qqCXCIsXCImZ2VzZG90b2w7XCI6XCLiqoRcIixcIiZnZXNsO1wiOlwi4oub77iAXCIsXCImZ2VzbGVzO1wiOlwi4qqUXCIsXCImZ2ZyO1wiOlwi8J2UpFwiLFwiJmdnO1wiOlwi4omrXCIsXCImZ2dnO1wiOlwi4ouZXCIsXCImZ2ltZWw7XCI6XCLihLdcIixcIiZnamN5O1wiOlwi0ZNcIixcIiZnbDtcIjpcIuKJt1wiLFwiJmdsRTtcIjpcIuKqklwiLFwiJmdsYTtcIjpcIuKqpVwiLFwiJmdsajtcIjpcIuKqpFwiLFwiJmduRTtcIjpcIuKJqVwiLFwiJmduYXA7XCI6XCLiqopcIixcIiZnbmFwcHJveDtcIjpcIuKqilwiLFwiJmduZTtcIjpcIuKqiFwiLFwiJmduZXE7XCI6XCLiqohcIixcIiZnbmVxcTtcIjpcIuKJqVwiLFwiJmduc2ltO1wiOlwi4ounXCIsXCImZ29wZjtcIjpcIvCdlZhcIixcIiZncmF2ZTtcIjpcImBcIixcIiZnc2NyO1wiOlwi4oSKXCIsXCImZ3NpbTtcIjpcIuKJs1wiLFwiJmdzaW1lO1wiOlwi4qqOXCIsXCImZ3NpbWw7XCI6XCLiqpBcIixcIiZndFwiOlwiPlwiLFwiJmd0O1wiOlwiPlwiLFwiJmd0Y2M7XCI6XCLiqqdcIixcIiZndGNpcjtcIjpcIuKpulwiLFwiJmd0ZG90O1wiOlwi4ouXXCIsXCImZ3RsUGFyO1wiOlwi4qaVXCIsXCImZ3RxdWVzdDtcIjpcIuKpvFwiLFwiJmd0cmFwcHJveDtcIjpcIuKqhlwiLFwiJmd0cmFycjtcIjpcIuKluFwiLFwiJmd0cmRvdDtcIjpcIuKLl1wiLFwiJmd0cmVxbGVzcztcIjpcIuKLm1wiLFwiJmd0cmVxcWxlc3M7XCI6XCLiqoxcIixcIiZndHJsZXNzO1wiOlwi4om3XCIsXCImZ3Ryc2ltO1wiOlwi4omzXCIsXCImZ3ZlcnRuZXFxO1wiOlwi4omp77iAXCIsXCImZ3ZuRTtcIjpcIuKJqe+4gFwiLFwiJmhBcnI7XCI6XCLih5RcIixcIiZoYWlyc3A7XCI6XCLigIpcIixcIiZoYWxmO1wiOlwiwr1cIixcIiZoYW1pbHQ7XCI6XCLihItcIixcIiZoYXJkY3k7XCI6XCLRilwiLFwiJmhhcnI7XCI6XCLihpRcIixcIiZoYXJyY2lyO1wiOlwi4qWIXCIsXCImaGFycnc7XCI6XCLihq1cIixcIiZoYmFyO1wiOlwi4oSPXCIsXCImaGNpcmM7XCI6XCLEpVwiLFwiJmhlYXJ0cztcIjpcIuKZpVwiLFwiJmhlYXJ0c3VpdDtcIjpcIuKZpVwiLFwiJmhlbGxpcDtcIjpcIuKAplwiLFwiJmhlcmNvbjtcIjpcIuKKuVwiLFwiJmhmcjtcIjpcIvCdlKVcIixcIiZoa3NlYXJvdztcIjpcIuKkpVwiLFwiJmhrc3dhcm93O1wiOlwi4qSmXCIsXCImaG9hcnI7XCI6XCLih79cIixcIiZob210aHQ7XCI6XCLiiLtcIixcIiZob29rbGVmdGFycm93O1wiOlwi4oapXCIsXCImaG9va3JpZ2h0YXJyb3c7XCI6XCLihqpcIixcIiZob3BmO1wiOlwi8J2VmVwiLFwiJmhvcmJhcjtcIjpcIuKAlVwiLFwiJmhzY3I7XCI6XCLwnZK9XCIsXCImaHNsYXNoO1wiOlwi4oSPXCIsXCImaHN0cm9rO1wiOlwixKdcIixcIiZoeWJ1bGw7XCI6XCLigYNcIixcIiZoeXBoZW47XCI6XCLigJBcIixcIiZpYWN1dGVcIjpcIsOtXCIsXCImaWFjdXRlO1wiOlwiw61cIixcIiZpYztcIjpcIuKBo1wiLFwiJmljaXJjXCI6XCLDrlwiLFwiJmljaXJjO1wiOlwiw65cIixcIiZpY3k7XCI6XCLQuFwiLFwiJmllY3k7XCI6XCLQtVwiLFwiJmlleGNsXCI6XCLCoVwiLFwiJmlleGNsO1wiOlwiwqFcIixcIiZpZmY7XCI6XCLih5RcIixcIiZpZnI7XCI6XCLwnZSmXCIsXCImaWdyYXZlXCI6XCLDrFwiLFwiJmlncmF2ZTtcIjpcIsOsXCIsXCImaWk7XCI6XCLihYhcIixcIiZpaWlpbnQ7XCI6XCLiqIxcIixcIiZpaWludDtcIjpcIuKIrVwiLFwiJmlpbmZpbjtcIjpcIuKnnFwiLFwiJmlpb3RhO1wiOlwi4oSpXCIsXCImaWpsaWc7XCI6XCLEs1wiLFwiJmltYWNyO1wiOlwixKtcIixcIiZpbWFnZTtcIjpcIuKEkVwiLFwiJmltYWdsaW5lO1wiOlwi4oSQXCIsXCImaW1hZ3BhcnQ7XCI6XCLihJFcIixcIiZpbWF0aDtcIjpcIsSxXCIsXCImaW1vZjtcIjpcIuKKt1wiLFwiJmltcGVkO1wiOlwixrVcIixcIiZpbjtcIjpcIuKIiFwiLFwiJmluY2FyZTtcIjpcIuKEhVwiLFwiJmluZmluO1wiOlwi4oieXCIsXCImaW5maW50aWU7XCI6XCLip51cIixcIiZpbm9kb3Q7XCI6XCLEsVwiLFwiJmludDtcIjpcIuKIq1wiLFwiJmludGNhbDtcIjpcIuKKulwiLFwiJmludGVnZXJzO1wiOlwi4oSkXCIsXCImaW50ZXJjYWw7XCI6XCLiirpcIixcIiZpbnRsYXJoaztcIjpcIuKol1wiLFwiJmludHByb2Q7XCI6XCLiqLxcIixcIiZpb2N5O1wiOlwi0ZFcIixcIiZpb2dvbjtcIjpcIsSvXCIsXCImaW9wZjtcIjpcIvCdlZpcIixcIiZpb3RhO1wiOlwizrlcIixcIiZpcHJvZDtcIjpcIuKovFwiLFwiJmlxdWVzdFwiOlwiwr9cIixcIiZpcXVlc3Q7XCI6XCLCv1wiLFwiJmlzY3I7XCI6XCLwnZK+XCIsXCImaXNpbjtcIjpcIuKIiFwiLFwiJmlzaW5FO1wiOlwi4ou5XCIsXCImaXNpbmRvdDtcIjpcIuKLtVwiLFwiJmlzaW5zO1wiOlwi4ou0XCIsXCImaXNpbnN2O1wiOlwi4ouzXCIsXCImaXNpbnY7XCI6XCLiiIhcIixcIiZpdDtcIjpcIuKBolwiLFwiJml0aWxkZTtcIjpcIsSpXCIsXCImaXVrY3k7XCI6XCLRllwiLFwiJml1bWxcIjpcIsOvXCIsXCImaXVtbDtcIjpcIsOvXCIsXCImamNpcmM7XCI6XCLEtVwiLFwiJmpjeTtcIjpcItC5XCIsXCImamZyO1wiOlwi8J2Up1wiLFwiJmptYXRoO1wiOlwiyLdcIixcIiZqb3BmO1wiOlwi8J2Vm1wiLFwiJmpzY3I7XCI6XCLwnZK/XCIsXCImanNlcmN5O1wiOlwi0ZhcIixcIiZqdWtjeTtcIjpcItGUXCIsXCIma2FwcGE7XCI6XCLOulwiLFwiJmthcHBhdjtcIjpcIs+wXCIsXCIma2NlZGlsO1wiOlwixLdcIixcIiZrY3k7XCI6XCLQulwiLFwiJmtmcjtcIjpcIvCdlKhcIixcIiZrZ3JlZW47XCI6XCLEuFwiLFwiJmtoY3k7XCI6XCLRhVwiLFwiJmtqY3k7XCI6XCLRnFwiLFwiJmtvcGY7XCI6XCLwnZWcXCIsXCIma3NjcjtcIjpcIvCdk4BcIixcIiZsQWFycjtcIjpcIuKHmlwiLFwiJmxBcnI7XCI6XCLih5BcIixcIiZsQXRhaWw7XCI6XCLipJtcIixcIiZsQmFycjtcIjpcIuKkjlwiLFwiJmxFO1wiOlwi4ommXCIsXCImbEVnO1wiOlwi4qqLXCIsXCImbEhhcjtcIjpcIuKlolwiLFwiJmxhY3V0ZTtcIjpcIsS6XCIsXCImbGFlbXB0eXY7XCI6XCLiprRcIixcIiZsYWdyYW47XCI6XCLihJJcIixcIiZsYW1iZGE7XCI6XCLOu1wiLFwiJmxhbmc7XCI6XCLin6hcIixcIiZsYW5nZDtcIjpcIuKmkVwiLFwiJmxhbmdsZTtcIjpcIuKfqFwiLFwiJmxhcDtcIjpcIuKqhVwiLFwiJmxhcXVvXCI6XCLCq1wiLFwiJmxhcXVvO1wiOlwiwqtcIixcIiZsYXJyO1wiOlwi4oaQXCIsXCImbGFycmI7XCI6XCLih6RcIixcIiZsYXJyYmZzO1wiOlwi4qSfXCIsXCImbGFycmZzO1wiOlwi4qSdXCIsXCImbGFycmhrO1wiOlwi4oapXCIsXCImbGFycmxwO1wiOlwi4oarXCIsXCImbGFycnBsO1wiOlwi4qS5XCIsXCImbGFycnNpbTtcIjpcIuKls1wiLFwiJmxhcnJ0bDtcIjpcIuKGolwiLFwiJmxhdDtcIjpcIuKqq1wiLFwiJmxhdGFpbDtcIjpcIuKkmVwiLFwiJmxhdGU7XCI6XCLiqq1cIixcIiZsYXRlcztcIjpcIuKqre+4gFwiLFwiJmxiYXJyO1wiOlwi4qSMXCIsXCImbGJicms7XCI6XCLinbJcIixcIiZsYnJhY2U7XCI6XCJ7XCIsXCImbGJyYWNrO1wiOlwiW1wiLFwiJmxicmtlO1wiOlwi4qaLXCIsXCImbGJya3NsZDtcIjpcIuKmj1wiLFwiJmxicmtzbHU7XCI6XCLipo1cIixcIiZsY2Fyb247XCI6XCLEvlwiLFwiJmxjZWRpbDtcIjpcIsS8XCIsXCImbGNlaWw7XCI6XCLijIhcIixcIiZsY3ViO1wiOlwie1wiLFwiJmxjeTtcIjpcItC7XCIsXCImbGRjYTtcIjpcIuKktlwiLFwiJmxkcXVvO1wiOlwi4oCcXCIsXCImbGRxdW9yO1wiOlwi4oCeXCIsXCImbGRyZGhhcjtcIjpcIuKlp1wiLFwiJmxkcnVzaGFyO1wiOlwi4qWLXCIsXCImbGRzaDtcIjpcIuKGslwiLFwiJmxlO1wiOlwi4omkXCIsXCImbGVmdGFycm93O1wiOlwi4oaQXCIsXCImbGVmdGFycm93dGFpbDtcIjpcIuKGolwiLFwiJmxlZnRoYXJwb29uZG93bjtcIjpcIuKGvVwiLFwiJmxlZnRoYXJwb29udXA7XCI6XCLihrxcIixcIiZsZWZ0bGVmdGFycm93cztcIjpcIuKHh1wiLFwiJmxlZnRyaWdodGFycm93O1wiOlwi4oaUXCIsXCImbGVmdHJpZ2h0YXJyb3dzO1wiOlwi4oeGXCIsXCImbGVmdHJpZ2h0aGFycG9vbnM7XCI6XCLih4tcIixcIiZsZWZ0cmlnaHRzcXVpZ2Fycm93O1wiOlwi4oatXCIsXCImbGVmdHRocmVldGltZXM7XCI6XCLii4tcIixcIiZsZWc7XCI6XCLii5pcIixcIiZsZXE7XCI6XCLiiaRcIixcIiZsZXFxO1wiOlwi4ommXCIsXCImbGVxc2xhbnQ7XCI6XCLiqb1cIixcIiZsZXM7XCI6XCLiqb1cIixcIiZsZXNjYztcIjpcIuKqqFwiLFwiJmxlc2RvdDtcIjpcIuKpv1wiLFwiJmxlc2RvdG87XCI6XCLiqoFcIixcIiZsZXNkb3RvcjtcIjpcIuKqg1wiLFwiJmxlc2c7XCI6XCLii5rvuIBcIixcIiZsZXNnZXM7XCI6XCLiqpNcIixcIiZsZXNzYXBwcm94O1wiOlwi4qqFXCIsXCImbGVzc2RvdDtcIjpcIuKLllwiLFwiJmxlc3NlcWd0cjtcIjpcIuKLmlwiLFwiJmxlc3NlcXFndHI7XCI6XCLiqotcIixcIiZsZXNzZ3RyO1wiOlwi4om2XCIsXCImbGVzc3NpbTtcIjpcIuKJslwiLFwiJmxmaXNodDtcIjpcIuKlvFwiLFwiJmxmbG9vcjtcIjpcIuKMilwiLFwiJmxmcjtcIjpcIvCdlKlcIixcIiZsZztcIjpcIuKJtlwiLFwiJmxnRTtcIjpcIuKqkVwiLFwiJmxoYXJkO1wiOlwi4oa9XCIsXCImbGhhcnU7XCI6XCLihrxcIixcIiZsaGFydWw7XCI6XCLipapcIixcIiZsaGJsaztcIjpcIuKWhFwiLFwiJmxqY3k7XCI6XCLRmVwiLFwiJmxsO1wiOlwi4omqXCIsXCImbGxhcnI7XCI6XCLih4dcIixcIiZsbGNvcm5lcjtcIjpcIuKMnlwiLFwiJmxsaGFyZDtcIjpcIuKlq1wiLFwiJmxsdHJpO1wiOlwi4pe6XCIsXCImbG1pZG90O1wiOlwixYBcIixcIiZsbW91c3Q7XCI6XCLijrBcIixcIiZsbW91c3RhY2hlO1wiOlwi4o6wXCIsXCImbG5FO1wiOlwi4omoXCIsXCImbG5hcDtcIjpcIuKqiVwiLFwiJmxuYXBwcm94O1wiOlwi4qqJXCIsXCImbG5lO1wiOlwi4qqHXCIsXCImbG5lcTtcIjpcIuKqh1wiLFwiJmxuZXFxO1wiOlwi4omoXCIsXCImbG5zaW07XCI6XCLii6ZcIixcIiZsb2FuZztcIjpcIuKfrFwiLFwiJmxvYXJyO1wiOlwi4oe9XCIsXCImbG9icms7XCI6XCLin6ZcIixcIiZsb25nbGVmdGFycm93O1wiOlwi4p+1XCIsXCImbG9uZ2xlZnRyaWdodGFycm93O1wiOlwi4p+3XCIsXCImbG9uZ21hcHN0bztcIjpcIuKfvFwiLFwiJmxvbmdyaWdodGFycm93O1wiOlwi4p+2XCIsXCImbG9vcGFycm93bGVmdDtcIjpcIuKGq1wiLFwiJmxvb3BhcnJvd3JpZ2h0O1wiOlwi4oasXCIsXCImbG9wYXI7XCI6XCLipoVcIixcIiZsb3BmO1wiOlwi8J2VnVwiLFwiJmxvcGx1cztcIjpcIuKorVwiLFwiJmxvdGltZXM7XCI6XCLiqLRcIixcIiZsb3dhc3Q7XCI6XCLiiJdcIixcIiZsb3diYXI7XCI6XCJfXCIsXCImbG96O1wiOlwi4peKXCIsXCImbG96ZW5nZTtcIjpcIuKXilwiLFwiJmxvemY7XCI6XCLip6tcIixcIiZscGFyO1wiOlwiKFwiLFwiJmxwYXJsdDtcIjpcIuKmk1wiLFwiJmxyYXJyO1wiOlwi4oeGXCIsXCImbHJjb3JuZXI7XCI6XCLijJ9cIixcIiZscmhhcjtcIjpcIuKHi1wiLFwiJmxyaGFyZDtcIjpcIuKlrVwiLFwiJmxybTtcIjpcIuKAjlwiLFwiJmxydHJpO1wiOlwi4oq/XCIsXCImbHNhcXVvO1wiOlwi4oC5XCIsXCImbHNjcjtcIjpcIvCdk4FcIixcIiZsc2g7XCI6XCLihrBcIixcIiZsc2ltO1wiOlwi4omyXCIsXCImbHNpbWU7XCI6XCLiqo1cIixcIiZsc2ltZztcIjpcIuKqj1wiLFwiJmxzcWI7XCI6XCJbXCIsXCImbHNxdW87XCI6XCLigJhcIixcIiZsc3F1b3I7XCI6XCLigJpcIixcIiZsc3Ryb2s7XCI6XCLFglwiLFwiJmx0XCI6XCI8XCIsXCImbHQ7XCI6XCI8XCIsXCImbHRjYztcIjpcIuKqplwiLFwiJmx0Y2lyO1wiOlwi4qm5XCIsXCImbHRkb3Q7XCI6XCLii5ZcIixcIiZsdGhyZWU7XCI6XCLii4tcIixcIiZsdGltZXM7XCI6XCLii4lcIixcIiZsdGxhcnI7XCI6XCLipbZcIixcIiZsdHF1ZXN0O1wiOlwi4qm7XCIsXCImbHRyUGFyO1wiOlwi4qaWXCIsXCImbHRyaTtcIjpcIuKXg1wiLFwiJmx0cmllO1wiOlwi4oq0XCIsXCImbHRyaWY7XCI6XCLil4JcIixcIiZsdXJkc2hhcjtcIjpcIuKlilwiLFwiJmx1cnVoYXI7XCI6XCLipaZcIixcIiZsdmVydG5lcXE7XCI6XCLiiajvuIBcIixcIiZsdm5FO1wiOlwi4omo77iAXCIsXCImbUREb3Q7XCI6XCLiiLpcIixcIiZtYWNyXCI6XCLCr1wiLFwiJm1hY3I7XCI6XCLCr1wiLFwiJm1hbGU7XCI6XCLimYJcIixcIiZtYWx0O1wiOlwi4pygXCIsXCImbWFsdGVzZTtcIjpcIuKcoFwiLFwiJm1hcDtcIjpcIuKGplwiLFwiJm1hcHN0bztcIjpcIuKGplwiLFwiJm1hcHN0b2Rvd247XCI6XCLihqdcIixcIiZtYXBzdG9sZWZ0O1wiOlwi4oakXCIsXCImbWFwc3RvdXA7XCI6XCLihqVcIixcIiZtYXJrZXI7XCI6XCLilq5cIixcIiZtY29tbWE7XCI6XCLiqKlcIixcIiZtY3k7XCI6XCLQvFwiLFwiJm1kYXNoO1wiOlwi4oCUXCIsXCImbWVhc3VyZWRhbmdsZTtcIjpcIuKIoVwiLFwiJm1mcjtcIjpcIvCdlKpcIixcIiZtaG87XCI6XCLihKdcIixcIiZtaWNyb1wiOlwiwrVcIixcIiZtaWNybztcIjpcIsK1XCIsXCImbWlkO1wiOlwi4oijXCIsXCImbWlkYXN0O1wiOlwiKlwiLFwiJm1pZGNpcjtcIjpcIuKrsFwiLFwiJm1pZGRvdFwiOlwiwrdcIixcIiZtaWRkb3Q7XCI6XCLCt1wiLFwiJm1pbnVzO1wiOlwi4oiSXCIsXCImbWludXNiO1wiOlwi4oqfXCIsXCImbWludXNkO1wiOlwi4oi4XCIsXCImbWludXNkdTtcIjpcIuKoqlwiLFwiJm1sY3A7XCI6XCLiq5tcIixcIiZtbGRyO1wiOlwi4oCmXCIsXCImbW5wbHVzO1wiOlwi4oiTXCIsXCImbW9kZWxzO1wiOlwi4oqnXCIsXCImbW9wZjtcIjpcIvCdlZ5cIixcIiZtcDtcIjpcIuKIk1wiLFwiJm1zY3I7XCI6XCLwnZOCXCIsXCImbXN0cG9zO1wiOlwi4oi+XCIsXCImbXU7XCI6XCLOvFwiLFwiJm11bHRpbWFwO1wiOlwi4oq4XCIsXCImbXVtYXA7XCI6XCLiirhcIixcIiZuR2c7XCI6XCLii5nMuFwiLFwiJm5HdDtcIjpcIuKJq+KDklwiLFwiJm5HdHY7XCI6XCLiiavMuFwiLFwiJm5MZWZ0YXJyb3c7XCI6XCLih41cIixcIiZuTGVmdHJpZ2h0YXJyb3c7XCI6XCLih45cIixcIiZuTGw7XCI6XCLii5jMuFwiLFwiJm5MdDtcIjpcIuKJquKDklwiLFwiJm5MdHY7XCI6XCLiiarMuFwiLFwiJm5SaWdodGFycm93O1wiOlwi4oePXCIsXCImblZEYXNoO1wiOlwi4oqvXCIsXCImblZkYXNoO1wiOlwi4oquXCIsXCImbmFibGE7XCI6XCLiiIdcIixcIiZuYWN1dGU7XCI6XCLFhFwiLFwiJm5hbmc7XCI6XCLiiKDig5JcIixcIiZuYXA7XCI6XCLiiYlcIixcIiZuYXBFO1wiOlwi4qmwzLhcIixcIiZuYXBpZDtcIjpcIuKJi8y4XCIsXCImbmFwb3M7XCI6XCLFiVwiLFwiJm5hcHByb3g7XCI6XCLiiYlcIixcIiZuYXR1cjtcIjpcIuKZrlwiLFwiJm5hdHVyYWw7XCI6XCLima5cIixcIiZuYXR1cmFscztcIjpcIuKElVwiLFwiJm5ic3BcIjpcIsKgXCIsXCImbmJzcDtcIjpcIsKgXCIsXCImbmJ1bXA7XCI6XCLiiY7MuFwiLFwiJm5idW1wZTtcIjpcIuKJj8y4XCIsXCImbmNhcDtcIjpcIuKpg1wiLFwiJm5jYXJvbjtcIjpcIsWIXCIsXCImbmNlZGlsO1wiOlwixYZcIixcIiZuY29uZztcIjpcIuKJh1wiLFwiJm5jb25nZG90O1wiOlwi4qmtzLhcIixcIiZuY3VwO1wiOlwi4qmCXCIsXCImbmN5O1wiOlwi0L1cIixcIiZuZGFzaDtcIjpcIuKAk1wiLFwiJm5lO1wiOlwi4omgXCIsXCImbmVBcnI7XCI6XCLih5dcIixcIiZuZWFyaGs7XCI6XCLipKRcIixcIiZuZWFycjtcIjpcIuKGl1wiLFwiJm5lYXJyb3c7XCI6XCLihpdcIixcIiZuZWRvdDtcIjpcIuKJkMy4XCIsXCImbmVxdWl2O1wiOlwi4omiXCIsXCImbmVzZWFyO1wiOlwi4qSoXCIsXCImbmVzaW07XCI6XCLiiYLMuFwiLFwiJm5leGlzdDtcIjpcIuKIhFwiLFwiJm5leGlzdHM7XCI6XCLiiIRcIixcIiZuZnI7XCI6XCLwnZSrXCIsXCImbmdFO1wiOlwi4omnzLhcIixcIiZuZ2U7XCI6XCLiibFcIixcIiZuZ2VxO1wiOlwi4omxXCIsXCImbmdlcXE7XCI6XCLiiafMuFwiLFwiJm5nZXFzbGFudDtcIjpcIuKpvsy4XCIsXCImbmdlcztcIjpcIuKpvsy4XCIsXCImbmdzaW07XCI6XCLiibVcIixcIiZuZ3Q7XCI6XCLiia9cIixcIiZuZ3RyO1wiOlwi4omvXCIsXCImbmhBcnI7XCI6XCLih45cIixcIiZuaGFycjtcIjpcIuKGrlwiLFwiJm5ocGFyO1wiOlwi4quyXCIsXCImbmk7XCI6XCLiiItcIixcIiZuaXM7XCI6XCLii7xcIixcIiZuaXNkO1wiOlwi4ou6XCIsXCImbml2O1wiOlwi4oiLXCIsXCImbmpjeTtcIjpcItGaXCIsXCImbmxBcnI7XCI6XCLih41cIixcIiZubEU7XCI6XCLiiabMuFwiLFwiJm5sYXJyO1wiOlwi4oaaXCIsXCImbmxkcjtcIjpcIuKApVwiLFwiJm5sZTtcIjpcIuKJsFwiLFwiJm5sZWZ0YXJyb3c7XCI6XCLihppcIixcIiZubGVmdHJpZ2h0YXJyb3c7XCI6XCLihq5cIixcIiZubGVxO1wiOlwi4omwXCIsXCImbmxlcXE7XCI6XCLiiabMuFwiLFwiJm5sZXFzbGFudDtcIjpcIuKpvcy4XCIsXCImbmxlcztcIjpcIuKpvcy4XCIsXCImbmxlc3M7XCI6XCLiia5cIixcIiZubHNpbTtcIjpcIuKJtFwiLFwiJm5sdDtcIjpcIuKJrlwiLFwiJm5sdHJpO1wiOlwi4ouqXCIsXCImbmx0cmllO1wiOlwi4ousXCIsXCImbm1pZDtcIjpcIuKIpFwiLFwiJm5vcGY7XCI6XCLwnZWfXCIsXCImbm90XCI6XCLCrFwiLFwiJm5vdDtcIjpcIsKsXCIsXCImbm90aW47XCI6XCLiiIlcIixcIiZub3RpbkU7XCI6XCLii7nMuFwiLFwiJm5vdGluZG90O1wiOlwi4ou1zLhcIixcIiZub3RpbnZhO1wiOlwi4oiJXCIsXCImbm90aW52YjtcIjpcIuKLt1wiLFwiJm5vdGludmM7XCI6XCLii7ZcIixcIiZub3RuaTtcIjpcIuKIjFwiLFwiJm5vdG5pdmE7XCI6XCLiiIxcIixcIiZub3RuaXZiO1wiOlwi4ou+XCIsXCImbm90bml2YztcIjpcIuKLvVwiLFwiJm5wYXI7XCI6XCLiiKZcIixcIiZucGFyYWxsZWw7XCI6XCLiiKZcIixcIiZucGFyc2w7XCI6XCLiq73ig6VcIixcIiZucGFydDtcIjpcIuKIgsy4XCIsXCImbnBvbGludDtcIjpcIuKolFwiLFwiJm5wcjtcIjpcIuKKgFwiLFwiJm5wcmN1ZTtcIjpcIuKLoFwiLFwiJm5wcmU7XCI6XCLiqq/MuFwiLFwiJm5wcmVjO1wiOlwi4oqAXCIsXCImbnByZWNlcTtcIjpcIuKqr8y4XCIsXCImbnJBcnI7XCI6XCLih49cIixcIiZucmFycjtcIjpcIuKGm1wiLFwiJm5yYXJyYztcIjpcIuKks8y4XCIsXCImbnJhcnJ3O1wiOlwi4oadzLhcIixcIiZucmlnaHRhcnJvdztcIjpcIuKGm1wiLFwiJm5ydHJpO1wiOlwi4ourXCIsXCImbnJ0cmllO1wiOlwi4outXCIsXCImbnNjO1wiOlwi4oqBXCIsXCImbnNjY3VlO1wiOlwi4ouhXCIsXCImbnNjZTtcIjpcIuKqsMy4XCIsXCImbnNjcjtcIjpcIvCdk4NcIixcIiZuc2hvcnRtaWQ7XCI6XCLiiKRcIixcIiZuc2hvcnRwYXJhbGxlbDtcIjpcIuKIplwiLFwiJm5zaW07XCI6XCLiiYFcIixcIiZuc2ltZTtcIjpcIuKJhFwiLFwiJm5zaW1lcTtcIjpcIuKJhFwiLFwiJm5zbWlkO1wiOlwi4oikXCIsXCImbnNwYXI7XCI6XCLiiKZcIixcIiZuc3FzdWJlO1wiOlwi4ouiXCIsXCImbnNxc3VwZTtcIjpcIuKLo1wiLFwiJm5zdWI7XCI6XCLiioRcIixcIiZuc3ViRTtcIjpcIuKrhcy4XCIsXCImbnN1YmU7XCI6XCLiiohcIixcIiZuc3Vic2V0O1wiOlwi4oqC4oOSXCIsXCImbnN1YnNldGVxO1wiOlwi4oqIXCIsXCImbnN1YnNldGVxcTtcIjpcIuKrhcy4XCIsXCImbnN1Y2M7XCI6XCLiioFcIixcIiZuc3VjY2VxO1wiOlwi4qqwzLhcIixcIiZuc3VwO1wiOlwi4oqFXCIsXCImbnN1cEU7XCI6XCLiq4bMuFwiLFwiJm5zdXBlO1wiOlwi4oqJXCIsXCImbnN1cHNldDtcIjpcIuKKg+KDklwiLFwiJm5zdXBzZXRlcTtcIjpcIuKKiVwiLFwiJm5zdXBzZXRlcXE7XCI6XCLiq4bMuFwiLFwiJm50Z2w7XCI6XCLiiblcIixcIiZudGlsZGVcIjpcIsOxXCIsXCImbnRpbGRlO1wiOlwiw7FcIixcIiZudGxnO1wiOlwi4om4XCIsXCImbnRyaWFuZ2xlbGVmdDtcIjpcIuKLqlwiLFwiJm50cmlhbmdsZWxlZnRlcTtcIjpcIuKLrFwiLFwiJm50cmlhbmdsZXJpZ2h0O1wiOlwi4ourXCIsXCImbnRyaWFuZ2xlcmlnaHRlcTtcIjpcIuKLrVwiLFwiJm51O1wiOlwizr1cIixcIiZudW07XCI6XCIjXCIsXCImbnVtZXJvO1wiOlwi4oSWXCIsXCImbnVtc3A7XCI6XCLigIdcIixcIiZudkRhc2g7XCI6XCLiiq1cIixcIiZudkhhcnI7XCI6XCLipIRcIixcIiZudmFwO1wiOlwi4omN4oOSXCIsXCImbnZkYXNoO1wiOlwi4oqsXCIsXCImbnZnZTtcIjpcIuKJpeKDklwiLFwiJm52Z3Q7XCI6XCI+4oOSXCIsXCImbnZpbmZpbjtcIjpcIuKnnlwiLFwiJm52bEFycjtcIjpcIuKkglwiLFwiJm52bGU7XCI6XCLiiaTig5JcIixcIiZudmx0O1wiOlwiPOKDklwiLFwiJm52bHRyaWU7XCI6XCLiirTig5JcIixcIiZudnJBcnI7XCI6XCLipINcIixcIiZudnJ0cmllO1wiOlwi4oq14oOSXCIsXCImbnZzaW07XCI6XCLiiLzig5JcIixcIiZud0FycjtcIjpcIuKHllwiLFwiJm53YXJoaztcIjpcIuKko1wiLFwiJm53YXJyO1wiOlwi4oaWXCIsXCImbndhcnJvdztcIjpcIuKGllwiLFwiJm53bmVhcjtcIjpcIuKkp1wiLFwiJm9TO1wiOlwi4pOIXCIsXCImb2FjdXRlXCI6XCLDs1wiLFwiJm9hY3V0ZTtcIjpcIsOzXCIsXCImb2FzdDtcIjpcIuKKm1wiLFwiJm9jaXI7XCI6XCLiippcIixcIiZvY2lyY1wiOlwiw7RcIixcIiZvY2lyYztcIjpcIsO0XCIsXCImb2N5O1wiOlwi0L5cIixcIiZvZGFzaDtcIjpcIuKKnVwiLFwiJm9kYmxhYztcIjpcIsWRXCIsXCImb2RpdjtcIjpcIuKouFwiLFwiJm9kb3Q7XCI6XCLiiplcIixcIiZvZHNvbGQ7XCI6XCLiprxcIixcIiZvZWxpZztcIjpcIsWTXCIsXCImb2ZjaXI7XCI6XCLipr9cIixcIiZvZnI7XCI6XCLwnZSsXCIsXCImb2dvbjtcIjpcIsubXCIsXCImb2dyYXZlXCI6XCLDslwiLFwiJm9ncmF2ZTtcIjpcIsOyXCIsXCImb2d0O1wiOlwi4qeBXCIsXCImb2hiYXI7XCI6XCLiprVcIixcIiZvaG07XCI6XCLOqVwiLFwiJm9pbnQ7XCI6XCLiiK5cIixcIiZvbGFycjtcIjpcIuKGulwiLFwiJm9sY2lyO1wiOlwi4qa+XCIsXCImb2xjcm9zcztcIjpcIuKmu1wiLFwiJm9saW5lO1wiOlwi4oC+XCIsXCImb2x0O1wiOlwi4qeAXCIsXCImb21hY3I7XCI6XCLFjVwiLFwiJm9tZWdhO1wiOlwiz4lcIixcIiZvbWljcm9uO1wiOlwizr9cIixcIiZvbWlkO1wiOlwi4qa2XCIsXCImb21pbnVzO1wiOlwi4oqWXCIsXCImb29wZjtcIjpcIvCdlaBcIixcIiZvcGFyO1wiOlwi4qa3XCIsXCImb3BlcnA7XCI6XCLiprlcIixcIiZvcGx1cztcIjpcIuKKlVwiLFwiJm9yO1wiOlwi4oioXCIsXCImb3JhcnI7XCI6XCLihrtcIixcIiZvcmQ7XCI6XCLiqZ1cIixcIiZvcmRlcjtcIjpcIuKEtFwiLFwiJm9yZGVyb2Y7XCI6XCLihLRcIixcIiZvcmRmXCI6XCLCqlwiLFwiJm9yZGY7XCI6XCLCqlwiLFwiJm9yZG1cIjpcIsK6XCIsXCImb3JkbTtcIjpcIsK6XCIsXCImb3JpZ29mO1wiOlwi4oq2XCIsXCImb3JvcjtcIjpcIuKpllwiLFwiJm9yc2xvcGU7XCI6XCLiqZdcIixcIiZvcnY7XCI6XCLiqZtcIixcIiZvc2NyO1wiOlwi4oS0XCIsXCImb3NsYXNoXCI6XCLDuFwiLFwiJm9zbGFzaDtcIjpcIsO4XCIsXCImb3NvbDtcIjpcIuKKmFwiLFwiJm90aWxkZVwiOlwiw7VcIixcIiZvdGlsZGU7XCI6XCLDtVwiLFwiJm90aW1lcztcIjpcIuKKl1wiLFwiJm90aW1lc2FzO1wiOlwi4qi2XCIsXCImb3VtbFwiOlwiw7ZcIixcIiZvdW1sO1wiOlwiw7ZcIixcIiZvdmJhcjtcIjpcIuKMvVwiLFwiJnBhcjtcIjpcIuKIpVwiLFwiJnBhcmFcIjpcIsK2XCIsXCImcGFyYTtcIjpcIsK2XCIsXCImcGFyYWxsZWw7XCI6XCLiiKVcIixcIiZwYXJzaW07XCI6XCLiq7NcIixcIiZwYXJzbDtcIjpcIuKrvVwiLFwiJnBhcnQ7XCI6XCLiiIJcIixcIiZwY3k7XCI6XCLQv1wiLFwiJnBlcmNudDtcIjpcIiVcIixcIiZwZXJpb2Q7XCI6XCIuXCIsXCImcGVybWlsO1wiOlwi4oCwXCIsXCImcGVycDtcIjpcIuKKpVwiLFwiJnBlcnRlbms7XCI6XCLigLFcIixcIiZwZnI7XCI6XCLwnZStXCIsXCImcGhpO1wiOlwiz4ZcIixcIiZwaGl2O1wiOlwiz5VcIixcIiZwaG1tYXQ7XCI6XCLihLNcIixcIiZwaG9uZTtcIjpcIuKYjlwiLFwiJnBpO1wiOlwiz4BcIixcIiZwaXRjaGZvcms7XCI6XCLii5RcIixcIiZwaXY7XCI6XCLPllwiLFwiJnBsYW5jaztcIjpcIuKEj1wiLFwiJnBsYW5ja2g7XCI6XCLihI5cIixcIiZwbGFua3Y7XCI6XCLihI9cIixcIiZwbHVzO1wiOlwiK1wiLFwiJnBsdXNhY2lyO1wiOlwi4qijXCIsXCImcGx1c2I7XCI6XCLiip5cIixcIiZwbHVzY2lyO1wiOlwi4qiiXCIsXCImcGx1c2RvO1wiOlwi4oiUXCIsXCImcGx1c2R1O1wiOlwi4qilXCIsXCImcGx1c2U7XCI6XCLiqbJcIixcIiZwbHVzbW5cIjpcIsKxXCIsXCImcGx1c21uO1wiOlwiwrFcIixcIiZwbHVzc2ltO1wiOlwi4qimXCIsXCImcGx1c3R3bztcIjpcIuKop1wiLFwiJnBtO1wiOlwiwrFcIixcIiZwb2ludGludDtcIjpcIuKolVwiLFwiJnBvcGY7XCI6XCLwnZWhXCIsXCImcG91bmRcIjpcIsKjXCIsXCImcG91bmQ7XCI6XCLCo1wiLFwiJnByO1wiOlwi4om6XCIsXCImcHJFO1wiOlwi4qqzXCIsXCImcHJhcDtcIjpcIuKqt1wiLFwiJnByY3VlO1wiOlwi4om8XCIsXCImcHJlO1wiOlwi4qqvXCIsXCImcHJlYztcIjpcIuKJulwiLFwiJnByZWNhcHByb3g7XCI6XCLiqrdcIixcIiZwcmVjY3VybHllcTtcIjpcIuKJvFwiLFwiJnByZWNlcTtcIjpcIuKqr1wiLFwiJnByZWNuYXBwcm94O1wiOlwi4qq5XCIsXCImcHJlY25lcXE7XCI6XCLiqrVcIixcIiZwcmVjbnNpbTtcIjpcIuKLqFwiLFwiJnByZWNzaW07XCI6XCLiib5cIixcIiZwcmltZTtcIjpcIuKAslwiLFwiJnByaW1lcztcIjpcIuKEmVwiLFwiJnBybkU7XCI6XCLiqrVcIixcIiZwcm5hcDtcIjpcIuKquVwiLFwiJnBybnNpbTtcIjpcIuKLqFwiLFwiJnByb2Q7XCI6XCLiiI9cIixcIiZwcm9mYWxhcjtcIjpcIuKMrlwiLFwiJnByb2ZsaW5lO1wiOlwi4oySXCIsXCImcHJvZnN1cmY7XCI6XCLijJNcIixcIiZwcm9wO1wiOlwi4oidXCIsXCImcHJvcHRvO1wiOlwi4oidXCIsXCImcHJzaW07XCI6XCLiib5cIixcIiZwcnVyZWw7XCI6XCLiirBcIixcIiZwc2NyO1wiOlwi8J2ThVwiLFwiJnBzaTtcIjpcIs+IXCIsXCImcHVuY3NwO1wiOlwi4oCIXCIsXCImcWZyO1wiOlwi8J2UrlwiLFwiJnFpbnQ7XCI6XCLiqIxcIixcIiZxb3BmO1wiOlwi8J2VolwiLFwiJnFwcmltZTtcIjpcIuKBl1wiLFwiJnFzY3I7XCI6XCLwnZOGXCIsXCImcXVhdGVybmlvbnM7XCI6XCLihI1cIixcIiZxdWF0aW50O1wiOlwi4qiWXCIsXCImcXVlc3Q7XCI6XCI/XCIsXCImcXVlc3RlcTtcIjpcIuKJn1wiLFwiJnF1b3RcIjonXCInLFwiJnF1b3Q7XCI6J1wiJyxcIiZyQWFycjtcIjpcIuKHm1wiLFwiJnJBcnI7XCI6XCLih5JcIixcIiZyQXRhaWw7XCI6XCLipJxcIixcIiZyQmFycjtcIjpcIuKkj1wiLFwiJnJIYXI7XCI6XCLipaRcIixcIiZyYWNlO1wiOlwi4oi9zLFcIixcIiZyYWN1dGU7XCI6XCLFlVwiLFwiJnJhZGljO1wiOlwi4oiaXCIsXCImcmFlbXB0eXY7XCI6XCLiprNcIixcIiZyYW5nO1wiOlwi4p+pXCIsXCImcmFuZ2Q7XCI6XCLippJcIixcIiZyYW5nZTtcIjpcIuKmpVwiLFwiJnJhbmdsZTtcIjpcIuKfqVwiLFwiJnJhcXVvXCI6XCLCu1wiLFwiJnJhcXVvO1wiOlwiwrtcIixcIiZyYXJyO1wiOlwi4oaSXCIsXCImcmFycmFwO1wiOlwi4qW1XCIsXCImcmFycmI7XCI6XCLih6VcIixcIiZyYXJyYmZzO1wiOlwi4qSgXCIsXCImcmFycmM7XCI6XCLipLNcIixcIiZyYXJyZnM7XCI6XCLipJ5cIixcIiZyYXJyaGs7XCI6XCLihqpcIixcIiZyYXJybHA7XCI6XCLihqxcIixcIiZyYXJycGw7XCI6XCLipYVcIixcIiZyYXJyc2ltO1wiOlwi4qW0XCIsXCImcmFycnRsO1wiOlwi4oajXCIsXCImcmFycnc7XCI6XCLihp1cIixcIiZyYXRhaWw7XCI6XCLipJpcIixcIiZyYXRpbztcIjpcIuKItlwiLFwiJnJhdGlvbmFscztcIjpcIuKEmlwiLFwiJnJiYXJyO1wiOlwi4qSNXCIsXCImcmJicms7XCI6XCLinbNcIixcIiZyYnJhY2U7XCI6XCJ9XCIsXCImcmJyYWNrO1wiOlwiXVwiLFwiJnJicmtlO1wiOlwi4qaMXCIsXCImcmJya3NsZDtcIjpcIuKmjlwiLFwiJnJicmtzbHU7XCI6XCLippBcIixcIiZyY2Fyb247XCI6XCLFmVwiLFwiJnJjZWRpbDtcIjpcIsWXXCIsXCImcmNlaWw7XCI6XCLijIlcIixcIiZyY3ViO1wiOlwifVwiLFwiJnJjeTtcIjpcItGAXCIsXCImcmRjYTtcIjpcIuKkt1wiLFwiJnJkbGRoYXI7XCI6XCLipalcIixcIiZyZHF1bztcIjpcIuKAnVwiLFwiJnJkcXVvcjtcIjpcIuKAnVwiLFwiJnJkc2g7XCI6XCLihrNcIixcIiZyZWFsO1wiOlwi4oScXCIsXCImcmVhbGluZTtcIjpcIuKEm1wiLFwiJnJlYWxwYXJ0O1wiOlwi4oScXCIsXCImcmVhbHM7XCI6XCLihJ1cIixcIiZyZWN0O1wiOlwi4patXCIsXCImcmVnXCI6XCLCrlwiLFwiJnJlZztcIjpcIsKuXCIsXCImcmZpc2h0O1wiOlwi4qW9XCIsXCImcmZsb29yO1wiOlwi4oyLXCIsXCImcmZyO1wiOlwi8J2Ur1wiLFwiJnJoYXJkO1wiOlwi4oeBXCIsXCImcmhhcnU7XCI6XCLih4BcIixcIiZyaGFydWw7XCI6XCLipaxcIixcIiZyaG87XCI6XCLPgVwiLFwiJnJob3Y7XCI6XCLPsVwiLFwiJnJpZ2h0YXJyb3c7XCI6XCLihpJcIixcIiZyaWdodGFycm93dGFpbDtcIjpcIuKGo1wiLFwiJnJpZ2h0aGFycG9vbmRvd247XCI6XCLih4FcIixcIiZyaWdodGhhcnBvb251cDtcIjpcIuKHgFwiLFwiJnJpZ2h0bGVmdGFycm93cztcIjpcIuKHhFwiLFwiJnJpZ2h0bGVmdGhhcnBvb25zO1wiOlwi4oeMXCIsXCImcmlnaHRyaWdodGFycm93cztcIjpcIuKHiVwiLFwiJnJpZ2h0c3F1aWdhcnJvdztcIjpcIuKGnVwiLFwiJnJpZ2h0dGhyZWV0aW1lcztcIjpcIuKLjFwiLFwiJnJpbmc7XCI6XCLLmlwiLFwiJnJpc2luZ2RvdHNlcTtcIjpcIuKJk1wiLFwiJnJsYXJyO1wiOlwi4oeEXCIsXCImcmxoYXI7XCI6XCLih4xcIixcIiZybG07XCI6XCLigI9cIixcIiZybW91c3Q7XCI6XCLijrFcIixcIiZybW91c3RhY2hlO1wiOlwi4o6xXCIsXCImcm5taWQ7XCI6XCLiq65cIixcIiZyb2FuZztcIjpcIuKfrVwiLFwiJnJvYXJyO1wiOlwi4oe+XCIsXCImcm9icms7XCI6XCLin6dcIixcIiZyb3BhcjtcIjpcIuKmhlwiLFwiJnJvcGY7XCI6XCLwnZWjXCIsXCImcm9wbHVzO1wiOlwi4qiuXCIsXCImcm90aW1lcztcIjpcIuKotVwiLFwiJnJwYXI7XCI6XCIpXCIsXCImcnBhcmd0O1wiOlwi4qaUXCIsXCImcnBwb2xpbnQ7XCI6XCLiqJJcIixcIiZycmFycjtcIjpcIuKHiVwiLFwiJnJzYXF1bztcIjpcIuKAulwiLFwiJnJzY3I7XCI6XCLwnZOHXCIsXCImcnNoO1wiOlwi4oaxXCIsXCImcnNxYjtcIjpcIl1cIixcIiZyc3F1bztcIjpcIuKAmVwiLFwiJnJzcXVvcjtcIjpcIuKAmVwiLFwiJnJ0aHJlZTtcIjpcIuKLjFwiLFwiJnJ0aW1lcztcIjpcIuKLilwiLFwiJnJ0cmk7XCI6XCLilrlcIixcIiZydHJpZTtcIjpcIuKKtVwiLFwiJnJ0cmlmO1wiOlwi4pa4XCIsXCImcnRyaWx0cmk7XCI6XCLip45cIixcIiZydWx1aGFyO1wiOlwi4qWoXCIsXCImcng7XCI6XCLihJ5cIixcIiZzYWN1dGU7XCI6XCLFm1wiLFwiJnNicXVvO1wiOlwi4oCaXCIsXCImc2M7XCI6XCLiibtcIixcIiZzY0U7XCI6XCLiqrRcIixcIiZzY2FwO1wiOlwi4qq4XCIsXCImc2Nhcm9uO1wiOlwixaFcIixcIiZzY2N1ZTtcIjpcIuKJvVwiLFwiJnNjZTtcIjpcIuKqsFwiLFwiJnNjZWRpbDtcIjpcIsWfXCIsXCImc2NpcmM7XCI6XCLFnVwiLFwiJnNjbkU7XCI6XCLiqrZcIixcIiZzY25hcDtcIjpcIuKqulwiLFwiJnNjbnNpbTtcIjpcIuKLqVwiLFwiJnNjcG9saW50O1wiOlwi4qiTXCIsXCImc2NzaW07XCI6XCLiib9cIixcIiZzY3k7XCI6XCLRgVwiLFwiJnNkb3Q7XCI6XCLii4VcIixcIiZzZG90YjtcIjpcIuKKoVwiLFwiJnNkb3RlO1wiOlwi4qmmXCIsXCImc2VBcnI7XCI6XCLih5hcIixcIiZzZWFyaGs7XCI6XCLipKVcIixcIiZzZWFycjtcIjpcIuKGmFwiLFwiJnNlYXJyb3c7XCI6XCLihphcIixcIiZzZWN0XCI6XCLCp1wiLFwiJnNlY3Q7XCI6XCLCp1wiLFwiJnNlbWk7XCI6XCI7XCIsXCImc2Vzd2FyO1wiOlwi4qSpXCIsXCImc2V0bWludXM7XCI6XCLiiJZcIixcIiZzZXRtbjtcIjpcIuKIllwiLFwiJnNleHQ7XCI6XCLinLZcIixcIiZzZnI7XCI6XCLwnZSwXCIsXCImc2Zyb3duO1wiOlwi4oyiXCIsXCImc2hhcnA7XCI6XCLima9cIixcIiZzaGNoY3k7XCI6XCLRiVwiLFwiJnNoY3k7XCI6XCLRiFwiLFwiJnNob3J0bWlkO1wiOlwi4oijXCIsXCImc2hvcnRwYXJhbGxlbDtcIjpcIuKIpVwiLFwiJnNoeVwiOlwiwq1cIixcIiZzaHk7XCI6XCLCrVwiLFwiJnNpZ21hO1wiOlwiz4NcIixcIiZzaWdtYWY7XCI6XCLPglwiLFwiJnNpZ21hdjtcIjpcIs+CXCIsXCImc2ltO1wiOlwi4oi8XCIsXCImc2ltZG90O1wiOlwi4qmqXCIsXCImc2ltZTtcIjpcIuKJg1wiLFwiJnNpbWVxO1wiOlwi4omDXCIsXCImc2ltZztcIjpcIuKqnlwiLFwiJnNpbWdFO1wiOlwi4qqgXCIsXCImc2ltbDtcIjpcIuKqnVwiLFwiJnNpbWxFO1wiOlwi4qqfXCIsXCImc2ltbmU7XCI6XCLiiYZcIixcIiZzaW1wbHVzO1wiOlwi4qikXCIsXCImc2ltcmFycjtcIjpcIuKlslwiLFwiJnNsYXJyO1wiOlwi4oaQXCIsXCImc21hbGxzZXRtaW51cztcIjpcIuKIllwiLFwiJnNtYXNocDtcIjpcIuKos1wiLFwiJnNtZXBhcnNsO1wiOlwi4qekXCIsXCImc21pZDtcIjpcIuKIo1wiLFwiJnNtaWxlO1wiOlwi4oyjXCIsXCImc210O1wiOlwi4qqqXCIsXCImc210ZTtcIjpcIuKqrFwiLFwiJnNtdGVzO1wiOlwi4qqs77iAXCIsXCImc29mdGN5O1wiOlwi0YxcIixcIiZzb2w7XCI6XCIvXCIsXCImc29sYjtcIjpcIuKnhFwiLFwiJnNvbGJhcjtcIjpcIuKMv1wiLFwiJnNvcGY7XCI6XCLwnZWkXCIsXCImc3BhZGVzO1wiOlwi4pmgXCIsXCImc3BhZGVzdWl0O1wiOlwi4pmgXCIsXCImc3BhcjtcIjpcIuKIpVwiLFwiJnNxY2FwO1wiOlwi4oqTXCIsXCImc3FjYXBzO1wiOlwi4oqT77iAXCIsXCImc3FjdXA7XCI6XCLiipRcIixcIiZzcWN1cHM7XCI6XCLiipTvuIBcIixcIiZzcXN1YjtcIjpcIuKKj1wiLFwiJnNxc3ViZTtcIjpcIuKKkVwiLFwiJnNxc3Vic2V0O1wiOlwi4oqPXCIsXCImc3FzdWJzZXRlcTtcIjpcIuKKkVwiLFwiJnNxc3VwO1wiOlwi4oqQXCIsXCImc3FzdXBlO1wiOlwi4oqSXCIsXCImc3FzdXBzZXQ7XCI6XCLiipBcIixcIiZzcXN1cHNldGVxO1wiOlwi4oqSXCIsXCImc3F1O1wiOlwi4pahXCIsXCImc3F1YXJlO1wiOlwi4pahXCIsXCImc3F1YXJmO1wiOlwi4paqXCIsXCImc3F1ZjtcIjpcIuKWqlwiLFwiJnNyYXJyO1wiOlwi4oaSXCIsXCImc3NjcjtcIjpcIvCdk4hcIixcIiZzc2V0bW47XCI6XCLiiJZcIixcIiZzc21pbGU7XCI6XCLijKNcIixcIiZzc3RhcmY7XCI6XCLii4ZcIixcIiZzdGFyO1wiOlwi4piGXCIsXCImc3RhcmY7XCI6XCLimIVcIixcIiZzdHJhaWdodGVwc2lsb247XCI6XCLPtVwiLFwiJnN0cmFpZ2h0cGhpO1wiOlwiz5VcIixcIiZzdHJucztcIjpcIsKvXCIsXCImc3ViO1wiOlwi4oqCXCIsXCImc3ViRTtcIjpcIuKrhVwiLFwiJnN1YmRvdDtcIjpcIuKqvVwiLFwiJnN1YmU7XCI6XCLiioZcIixcIiZzdWJlZG90O1wiOlwi4quDXCIsXCImc3VibXVsdDtcIjpcIuKrgVwiLFwiJnN1Ym5FO1wiOlwi4quLXCIsXCImc3VibmU7XCI6XCLiiopcIixcIiZzdWJwbHVzO1wiOlwi4qq/XCIsXCImc3VicmFycjtcIjpcIuKluVwiLFwiJnN1YnNldDtcIjpcIuKKglwiLFwiJnN1YnNldGVxO1wiOlwi4oqGXCIsXCImc3Vic2V0ZXFxO1wiOlwi4quFXCIsXCImc3Vic2V0bmVxO1wiOlwi4oqKXCIsXCImc3Vic2V0bmVxcTtcIjpcIuKri1wiLFwiJnN1YnNpbTtcIjpcIuKrh1wiLFwiJnN1YnN1YjtcIjpcIuKrlVwiLFwiJnN1YnN1cDtcIjpcIuKrk1wiLFwiJnN1Y2M7XCI6XCLiibtcIixcIiZzdWNjYXBwcm94O1wiOlwi4qq4XCIsXCImc3VjY2N1cmx5ZXE7XCI6XCLiib1cIixcIiZzdWNjZXE7XCI6XCLiqrBcIixcIiZzdWNjbmFwcHJveDtcIjpcIuKqulwiLFwiJnN1Y2NuZXFxO1wiOlwi4qq2XCIsXCImc3VjY25zaW07XCI6XCLii6lcIixcIiZzdWNjc2ltO1wiOlwi4om/XCIsXCImc3VtO1wiOlwi4oiRXCIsXCImc3VuZztcIjpcIuKZqlwiLFwiJnN1cDFcIjpcIsK5XCIsXCImc3VwMTtcIjpcIsK5XCIsXCImc3VwMlwiOlwiwrJcIixcIiZzdXAyO1wiOlwiwrJcIixcIiZzdXAzXCI6XCLCs1wiLFwiJnN1cDM7XCI6XCLCs1wiLFwiJnN1cDtcIjpcIuKKg1wiLFwiJnN1cEU7XCI6XCLiq4ZcIixcIiZzdXBkb3Q7XCI6XCLiqr5cIixcIiZzdXBkc3ViO1wiOlwi4quYXCIsXCImc3VwZTtcIjpcIuKKh1wiLFwiJnN1cGVkb3Q7XCI6XCLiq4RcIixcIiZzdXBoc29sO1wiOlwi4p+JXCIsXCImc3VwaHN1YjtcIjpcIuKrl1wiLFwiJnN1cGxhcnI7XCI6XCLipbtcIixcIiZzdXBtdWx0O1wiOlwi4quCXCIsXCImc3VwbkU7XCI6XCLiq4xcIixcIiZzdXBuZTtcIjpcIuKKi1wiLFwiJnN1cHBsdXM7XCI6XCLiq4BcIixcIiZzdXBzZXQ7XCI6XCLiioNcIixcIiZzdXBzZXRlcTtcIjpcIuKKh1wiLFwiJnN1cHNldGVxcTtcIjpcIuKrhlwiLFwiJnN1cHNldG5lcTtcIjpcIuKKi1wiLFwiJnN1cHNldG5lcXE7XCI6XCLiq4xcIixcIiZzdXBzaW07XCI6XCLiq4hcIixcIiZzdXBzdWI7XCI6XCLiq5RcIixcIiZzdXBzdXA7XCI6XCLiq5ZcIixcIiZzd0FycjtcIjpcIuKHmVwiLFwiJnN3YXJoaztcIjpcIuKkplwiLFwiJnN3YXJyO1wiOlwi4oaZXCIsXCImc3dhcnJvdztcIjpcIuKGmVwiLFwiJnN3bndhcjtcIjpcIuKkqlwiLFwiJnN6bGlnXCI6XCLDn1wiLFwiJnN6bGlnO1wiOlwiw59cIixcIiZ0YXJnZXQ7XCI6XCLijJZcIixcIiZ0YXU7XCI6XCLPhFwiLFwiJnRicms7XCI6XCLijrRcIixcIiZ0Y2Fyb247XCI6XCLFpVwiLFwiJnRjZWRpbDtcIjpcIsWjXCIsXCImdGN5O1wiOlwi0YJcIixcIiZ0ZG90O1wiOlwi4oObXCIsXCImdGVscmVjO1wiOlwi4oyVXCIsXCImdGZyO1wiOlwi8J2UsVwiLFwiJnRoZXJlNDtcIjpcIuKItFwiLFwiJnRoZXJlZm9yZTtcIjpcIuKItFwiLFwiJnRoZXRhO1wiOlwizrhcIixcIiZ0aGV0YXN5bTtcIjpcIs+RXCIsXCImdGhldGF2O1wiOlwiz5FcIixcIiZ0aGlja2FwcHJveDtcIjpcIuKJiFwiLFwiJnRoaWNrc2ltO1wiOlwi4oi8XCIsXCImdGhpbnNwO1wiOlwi4oCJXCIsXCImdGhrYXA7XCI6XCLiiYhcIixcIiZ0aGtzaW07XCI6XCLiiLxcIixcIiZ0aG9yblwiOlwiw75cIixcIiZ0aG9ybjtcIjpcIsO+XCIsXCImdGlsZGU7XCI6XCLLnFwiLFwiJnRpbWVzXCI6XCLDl1wiLFwiJnRpbWVzO1wiOlwiw5dcIixcIiZ0aW1lc2I7XCI6XCLiiqBcIixcIiZ0aW1lc2JhcjtcIjpcIuKosVwiLFwiJnRpbWVzZDtcIjpcIuKosFwiLFwiJnRpbnQ7XCI6XCLiiK1cIixcIiZ0b2VhO1wiOlwi4qSoXCIsXCImdG9wO1wiOlwi4oqkXCIsXCImdG9wYm90O1wiOlwi4oy2XCIsXCImdG9wY2lyO1wiOlwi4quxXCIsXCImdG9wZjtcIjpcIvCdlaVcIixcIiZ0b3Bmb3JrO1wiOlwi4quaXCIsXCImdG9zYTtcIjpcIuKkqVwiLFwiJnRwcmltZTtcIjpcIuKAtFwiLFwiJnRyYWRlO1wiOlwi4oSiXCIsXCImdHJpYW5nbGU7XCI6XCLilrVcIixcIiZ0cmlhbmdsZWRvd247XCI6XCLilr9cIixcIiZ0cmlhbmdsZWxlZnQ7XCI6XCLil4NcIixcIiZ0cmlhbmdsZWxlZnRlcTtcIjpcIuKKtFwiLFwiJnRyaWFuZ2xlcTtcIjpcIuKJnFwiLFwiJnRyaWFuZ2xlcmlnaHQ7XCI6XCLilrlcIixcIiZ0cmlhbmdsZXJpZ2h0ZXE7XCI6XCLiirVcIixcIiZ0cmlkb3Q7XCI6XCLil6xcIixcIiZ0cmllO1wiOlwi4omcXCIsXCImdHJpbWludXM7XCI6XCLiqLpcIixcIiZ0cmlwbHVzO1wiOlwi4qi5XCIsXCImdHJpc2I7XCI6XCLip41cIixcIiZ0cml0aW1lO1wiOlwi4qi7XCIsXCImdHJwZXppdW07XCI6XCLij6JcIixcIiZ0c2NyO1wiOlwi8J2TiVwiLFwiJnRzY3k7XCI6XCLRhlwiLFwiJnRzaGN5O1wiOlwi0ZtcIixcIiZ0c3Ryb2s7XCI6XCLFp1wiLFwiJnR3aXh0O1wiOlwi4omsXCIsXCImdHdvaGVhZGxlZnRhcnJvdztcIjpcIuKGnlwiLFwiJnR3b2hlYWRyaWdodGFycm93O1wiOlwi4oagXCIsXCImdUFycjtcIjpcIuKHkVwiLFwiJnVIYXI7XCI6XCLipaNcIixcIiZ1YWN1dGVcIjpcIsO6XCIsXCImdWFjdXRlO1wiOlwiw7pcIixcIiZ1YXJyO1wiOlwi4oaRXCIsXCImdWJyY3k7XCI6XCLRnlwiLFwiJnVicmV2ZTtcIjpcIsWtXCIsXCImdWNpcmNcIjpcIsO7XCIsXCImdWNpcmM7XCI6XCLDu1wiLFwiJnVjeTtcIjpcItGDXCIsXCImdWRhcnI7XCI6XCLih4VcIixcIiZ1ZGJsYWM7XCI6XCLFsVwiLFwiJnVkaGFyO1wiOlwi4qWuXCIsXCImdWZpc2h0O1wiOlwi4qW+XCIsXCImdWZyO1wiOlwi8J2UslwiLFwiJnVncmF2ZVwiOlwiw7lcIixcIiZ1Z3JhdmU7XCI6XCLDuVwiLFwiJnVoYXJsO1wiOlwi4oa/XCIsXCImdWhhcnI7XCI6XCLihr5cIixcIiZ1aGJsaztcIjpcIuKWgFwiLFwiJnVsY29ybjtcIjpcIuKMnFwiLFwiJnVsY29ybmVyO1wiOlwi4oycXCIsXCImdWxjcm9wO1wiOlwi4oyPXCIsXCImdWx0cmk7XCI6XCLil7hcIixcIiZ1bWFjcjtcIjpcIsWrXCIsXCImdW1sXCI6XCLCqFwiLFwiJnVtbDtcIjpcIsKoXCIsXCImdW9nb247XCI6XCLFs1wiLFwiJnVvcGY7XCI6XCLwnZWmXCIsXCImdXBhcnJvdztcIjpcIuKGkVwiLFwiJnVwZG93bmFycm93O1wiOlwi4oaVXCIsXCImdXBoYXJwb29ubGVmdDtcIjpcIuKGv1wiLFwiJnVwaGFycG9vbnJpZ2h0O1wiOlwi4oa+XCIsXCImdXBsdXM7XCI6XCLiio5cIixcIiZ1cHNpO1wiOlwiz4VcIixcIiZ1cHNpaDtcIjpcIs+SXCIsXCImdXBzaWxvbjtcIjpcIs+FXCIsXCImdXB1cGFycm93cztcIjpcIuKHiFwiLFwiJnVyY29ybjtcIjpcIuKMnVwiLFwiJnVyY29ybmVyO1wiOlwi4oydXCIsXCImdXJjcm9wO1wiOlwi4oyOXCIsXCImdXJpbmc7XCI6XCLFr1wiLFwiJnVydHJpO1wiOlwi4pe5XCIsXCImdXNjcjtcIjpcIvCdk4pcIixcIiZ1dGRvdDtcIjpcIuKLsFwiLFwiJnV0aWxkZTtcIjpcIsWpXCIsXCImdXRyaTtcIjpcIuKWtVwiLFwiJnV0cmlmO1wiOlwi4pa0XCIsXCImdXVhcnI7XCI6XCLih4hcIixcIiZ1dW1sXCI6XCLDvFwiLFwiJnV1bWw7XCI6XCLDvFwiLFwiJnV3YW5nbGU7XCI6XCLipqdcIixcIiZ2QXJyO1wiOlwi4oeVXCIsXCImdkJhcjtcIjpcIuKrqFwiLFwiJnZCYXJ2O1wiOlwi4qupXCIsXCImdkRhc2g7XCI6XCLiiqhcIixcIiZ2YW5ncnQ7XCI6XCLippxcIixcIiZ2YXJlcHNpbG9uO1wiOlwiz7VcIixcIiZ2YXJrYXBwYTtcIjpcIs+wXCIsXCImdmFybm90aGluZztcIjpcIuKIhVwiLFwiJnZhcnBoaTtcIjpcIs+VXCIsXCImdmFycGk7XCI6XCLPllwiLFwiJnZhcnByb3B0bztcIjpcIuKInVwiLFwiJnZhcnI7XCI6XCLihpVcIixcIiZ2YXJyaG87XCI6XCLPsVwiLFwiJnZhcnNpZ21hO1wiOlwiz4JcIixcIiZ2YXJzdWJzZXRuZXE7XCI6XCLiiorvuIBcIixcIiZ2YXJzdWJzZXRuZXFxO1wiOlwi4quL77iAXCIsXCImdmFyc3Vwc2V0bmVxO1wiOlwi4oqL77iAXCIsXCImdmFyc3Vwc2V0bmVxcTtcIjpcIuKrjO+4gFwiLFwiJnZhcnRoZXRhO1wiOlwiz5FcIixcIiZ2YXJ0cmlhbmdsZWxlZnQ7XCI6XCLiirJcIixcIiZ2YXJ0cmlhbmdsZXJpZ2h0O1wiOlwi4oqzXCIsXCImdmN5O1wiOlwi0LJcIixcIiZ2ZGFzaDtcIjpcIuKKolwiLFwiJnZlZTtcIjpcIuKIqFwiLFwiJnZlZWJhcjtcIjpcIuKKu1wiLFwiJnZlZWVxO1wiOlwi4omaXCIsXCImdmVsbGlwO1wiOlwi4ouuXCIsXCImdmVyYmFyO1wiOlwifFwiLFwiJnZlcnQ7XCI6XCJ8XCIsXCImdmZyO1wiOlwi8J2Us1wiLFwiJnZsdHJpO1wiOlwi4oqyXCIsXCImdm5zdWI7XCI6XCLiioLig5JcIixcIiZ2bnN1cDtcIjpcIuKKg+KDklwiLFwiJnZvcGY7XCI6XCLwnZWnXCIsXCImdnByb3A7XCI6XCLiiJ1cIixcIiZ2cnRyaTtcIjpcIuKKs1wiLFwiJnZzY3I7XCI6XCLwnZOLXCIsXCImdnN1Ym5FO1wiOlwi4quL77iAXCIsXCImdnN1Ym5lO1wiOlwi4oqK77iAXCIsXCImdnN1cG5FO1wiOlwi4quM77iAXCIsXCImdnN1cG5lO1wiOlwi4oqL77iAXCIsXCImdnppZ3phZztcIjpcIuKmmlwiLFwiJndjaXJjO1wiOlwixbVcIixcIiZ3ZWRiYXI7XCI6XCLiqZ9cIixcIiZ3ZWRnZTtcIjpcIuKIp1wiLFwiJndlZGdlcTtcIjpcIuKJmVwiLFwiJndlaWVycDtcIjpcIuKEmFwiLFwiJndmcjtcIjpcIvCdlLRcIixcIiZ3b3BmO1wiOlwi8J2VqFwiLFwiJndwO1wiOlwi4oSYXCIsXCImd3I7XCI6XCLiiYBcIixcIiZ3cmVhdGg7XCI6XCLiiYBcIixcIiZ3c2NyO1wiOlwi8J2TjFwiLFwiJnhjYXA7XCI6XCLii4JcIixcIiZ4Y2lyYztcIjpcIuKXr1wiLFwiJnhjdXA7XCI6XCLii4NcIixcIiZ4ZHRyaTtcIjpcIuKWvVwiLFwiJnhmcjtcIjpcIvCdlLVcIixcIiZ4aEFycjtcIjpcIuKfulwiLFwiJnhoYXJyO1wiOlwi4p+3XCIsXCImeGk7XCI6XCLOvlwiLFwiJnhsQXJyO1wiOlwi4p+4XCIsXCImeGxhcnI7XCI6XCLin7VcIixcIiZ4bWFwO1wiOlwi4p+8XCIsXCImeG5pcztcIjpcIuKLu1wiLFwiJnhvZG90O1wiOlwi4qiAXCIsXCImeG9wZjtcIjpcIvCdlalcIixcIiZ4b3BsdXM7XCI6XCLiqIFcIixcIiZ4b3RpbWU7XCI6XCLiqIJcIixcIiZ4ckFycjtcIjpcIuKfuVwiLFwiJnhyYXJyO1wiOlwi4p+2XCIsXCImeHNjcjtcIjpcIvCdk41cIixcIiZ4c3FjdXA7XCI6XCLiqIZcIixcIiZ4dXBsdXM7XCI6XCLiqIRcIixcIiZ4dXRyaTtcIjpcIuKWs1wiLFwiJnh2ZWU7XCI6XCLii4FcIixcIiZ4d2VkZ2U7XCI6XCLii4BcIixcIiZ5YWN1dGVcIjpcIsO9XCIsXCImeWFjdXRlO1wiOlwiw71cIixcIiZ5YWN5O1wiOlwi0Y9cIixcIiZ5Y2lyYztcIjpcIsW3XCIsXCImeWN5O1wiOlwi0YtcIixcIiZ5ZW5cIjpcIsKlXCIsXCImeWVuO1wiOlwiwqVcIixcIiZ5ZnI7XCI6XCLwnZS2XCIsXCImeWljeTtcIjpcItGXXCIsXCImeW9wZjtcIjpcIvCdlapcIixcIiZ5c2NyO1wiOlwi8J2TjlwiLFwiJnl1Y3k7XCI6XCLRjlwiLFwiJnl1bWxcIjpcIsO/XCIsXCImeXVtbDtcIjpcIsO/XCIsXCImemFjdXRlO1wiOlwixbpcIixcIiZ6Y2Fyb247XCI6XCLFvlwiLFwiJnpjeTtcIjpcItC3XCIsXCImemRvdDtcIjpcIsW8XCIsXCImemVldHJmO1wiOlwi4oSoXCIsXCImemV0YTtcIjpcIs62XCIsXCImemZyO1wiOlwi8J2Ut1wiLFwiJnpoY3k7XCI6XCLQtlwiLFwiJnppZ3JhcnI7XCI6XCLih51cIixcIiZ6b3BmO1wiOlwi8J2Vq1wiLFwiJnpzY3I7XCI6XCLwnZOPXCIsXCImendqO1wiOlwi4oCNXCIsXCImenduajtcIjpcIuKAjFwifSxjaGFyYWN0ZXJzOntcIsOGXCI6XCImQUVsaWc7XCIsXCImXCI6XCImYW1wO1wiLFwiw4FcIjpcIiZBYWN1dGU7XCIsXCLEglwiOlwiJkFicmV2ZTtcIixcIsOCXCI6XCImQWNpcmM7XCIsXCLQkFwiOlwiJkFjeTtcIixcIvCdlIRcIjpcIiZBZnI7XCIsXCLDgFwiOlwiJkFncmF2ZTtcIixcIs6RXCI6XCImQWxwaGE7XCIsXCLEgFwiOlwiJkFtYWNyO1wiLFwi4qmTXCI6XCImQW5kO1wiLFwixIRcIjpcIiZBb2dvbjtcIixcIvCdlLhcIjpcIiZBb3BmO1wiLFwi4oGhXCI6XCImYWY7XCIsXCLDhVwiOlwiJmFuZ3N0O1wiLFwi8J2SnFwiOlwiJkFzY3I7XCIsXCLiiZRcIjpcIiZjb2xvbmVxO1wiLFwiw4NcIjpcIiZBdGlsZGU7XCIsXCLDhFwiOlwiJkF1bWw7XCIsXCLiiJZcIjpcIiZzc2V0bW47XCIsXCLiq6dcIjpcIiZCYXJ2O1wiLFwi4oyGXCI6XCImZG91YmxlYmFyd2VkZ2U7XCIsXCLQkVwiOlwiJkJjeTtcIixcIuKItVwiOlwiJmJlY2F1c2U7XCIsXCLihKxcIjpcIiZiZXJub3U7XCIsXCLOklwiOlwiJkJldGE7XCIsXCLwnZSFXCI6XCImQmZyO1wiLFwi8J2UuVwiOlwiJkJvcGY7XCIsXCLLmFwiOlwiJmJyZXZlO1wiLFwi4omOXCI6XCImYnVtcDtcIixcItCnXCI6XCImQ0hjeTtcIixcIsKpXCI6XCImY29weTtcIixcIsSGXCI6XCImQ2FjdXRlO1wiLFwi4ouSXCI6XCImQ2FwO1wiLFwi4oWFXCI6XCImREQ7XCIsXCLihK1cIjpcIiZDZnI7XCIsXCLEjFwiOlwiJkNjYXJvbjtcIixcIsOHXCI6XCImQ2NlZGlsO1wiLFwixIhcIjpcIiZDY2lyYztcIixcIuKIsFwiOlwiJkNjb25pbnQ7XCIsXCLEilwiOlwiJkNkb3Q7XCIsXCLCuFwiOlwiJmNlZGlsO1wiLFwiwrdcIjpcIiZtaWRkb3Q7XCIsXCLOp1wiOlwiJkNoaTtcIixcIuKKmVwiOlwiJm9kb3Q7XCIsXCLiipZcIjpcIiZvbWludXM7XCIsXCLiipVcIjpcIiZvcGx1cztcIixcIuKKl1wiOlwiJm90aW1lcztcIixcIuKIslwiOlwiJmN3Y29uaW50O1wiLFwi4oCdXCI6XCImcmRxdW9yO1wiLFwi4oCZXCI6XCImcnNxdW9yO1wiLFwi4oi3XCI6XCImUHJvcG9ydGlvbjtcIixcIuKptFwiOlwiJkNvbG9uZTtcIixcIuKJoVwiOlwiJmVxdWl2O1wiLFwi4oivXCI6XCImRG91YmxlQ29udG91ckludGVncmFsO1wiLFwi4oiuXCI6XCImb2ludDtcIixcIuKEglwiOlwiJmNvbXBsZXhlcztcIixcIuKIkFwiOlwiJmNvcHJvZDtcIixcIuKIs1wiOlwiJmF3Y29uaW50O1wiLFwi4qivXCI6XCImQ3Jvc3M7XCIsXCLwnZKeXCI6XCImQ3NjcjtcIixcIuKLk1wiOlwiJkN1cDtcIixcIuKJjVwiOlwiJmFzeW1wZXE7XCIsXCLipJFcIjpcIiZERG90cmFoZDtcIixcItCCXCI6XCImREpjeTtcIixcItCFXCI6XCImRFNjeTtcIixcItCPXCI6XCImRFpjeTtcIixcIuKAoVwiOlwiJmRkYWdnZXI7XCIsXCLihqFcIjpcIiZEYXJyO1wiLFwi4qukXCI6XCImRG91YmxlTGVmdFRlZTtcIixcIsSOXCI6XCImRGNhcm9uO1wiLFwi0JRcIjpcIiZEY3k7XCIsXCLiiIdcIjpcIiZuYWJsYTtcIixcIs6UXCI6XCImRGVsdGE7XCIsXCLwnZSHXCI6XCImRGZyO1wiLFwiwrRcIjpcIiZhY3V0ZTtcIixcIsuZXCI6XCImZG90O1wiLFwiy51cIjpcIiZkYmxhYztcIixcImBcIjpcIiZncmF2ZTtcIixcIsucXCI6XCImdGlsZGU7XCIsXCLii4RcIjpcIiZkaWFtb25kO1wiLFwi4oWGXCI6XCImZGQ7XCIsXCLwnZS7XCI6XCImRG9wZjtcIixcIsKoXCI6XCImdW1sO1wiLFwi4oOcXCI6XCImRG90RG90O1wiLFwi4omQXCI6XCImZXNkb3Q7XCIsXCLih5NcIjpcIiZkQXJyO1wiLFwi4oeQXCI6XCImbEFycjtcIixcIuKHlFwiOlwiJmlmZjtcIixcIuKfuFwiOlwiJnhsQXJyO1wiLFwi4p+6XCI6XCImeGhBcnI7XCIsXCLin7lcIjpcIiZ4ckFycjtcIixcIuKHklwiOlwiJnJBcnI7XCIsXCLiiqhcIjpcIiZ2RGFzaDtcIixcIuKHkVwiOlwiJnVBcnI7XCIsXCLih5VcIjpcIiZ2QXJyO1wiLFwi4oilXCI6XCImc3BhcjtcIixcIuKGk1wiOlwiJmRvd25hcnJvdztcIixcIuKkk1wiOlwiJkRvd25BcnJvd0JhcjtcIixcIuKHtVwiOlwiJmR1YXJyO1wiLFwizJFcIjpcIiZEb3duQnJldmU7XCIsXCLipZBcIjpcIiZEb3duTGVmdFJpZ2h0VmVjdG9yO1wiLFwi4qWeXCI6XCImRG93bkxlZnRUZWVWZWN0b3I7XCIsXCLihr1cIjpcIiZsaGFyZDtcIixcIuKlllwiOlwiJkRvd25MZWZ0VmVjdG9yQmFyO1wiLFwi4qWfXCI6XCImRG93blJpZ2h0VGVlVmVjdG9yO1wiLFwi4oeBXCI6XCImcmlnaHRoYXJwb29uZG93bjtcIixcIuKll1wiOlwiJkRvd25SaWdodFZlY3RvckJhcjtcIixcIuKKpFwiOlwiJnRvcDtcIixcIuKGp1wiOlwiJm1hcHN0b2Rvd247XCIsXCLwnZKfXCI6XCImRHNjcjtcIixcIsSQXCI6XCImRHN0cm9rO1wiLFwixYpcIjpcIiZFTkc7XCIsXCLDkFwiOlwiJkVUSDtcIixcIsOJXCI6XCImRWFjdXRlO1wiLFwixJpcIjpcIiZFY2Fyb247XCIsXCLDilwiOlwiJkVjaXJjO1wiLFwi0K1cIjpcIiZFY3k7XCIsXCLEllwiOlwiJkVkb3Q7XCIsXCLwnZSIXCI6XCImRWZyO1wiLFwiw4hcIjpcIiZFZ3JhdmU7XCIsXCLiiIhcIjpcIiZpc2ludjtcIixcIsSSXCI6XCImRW1hY3I7XCIsXCLil7tcIjpcIiZFbXB0eVNtYWxsU3F1YXJlO1wiLFwi4parXCI6XCImRW1wdHlWZXJ5U21hbGxTcXVhcmU7XCIsXCLEmFwiOlwiJkVvZ29uO1wiLFwi8J2UvFwiOlwiJkVvcGY7XCIsXCLOlVwiOlwiJkVwc2lsb247XCIsXCLiqbVcIjpcIiZFcXVhbDtcIixcIuKJglwiOlwiJmVzaW07XCIsXCLih4xcIjpcIiZybGhhcjtcIixcIuKEsFwiOlwiJmV4cGVjdGF0aW9uO1wiLFwi4qmzXCI6XCImRXNpbTtcIixcIs6XXCI6XCImRXRhO1wiLFwiw4tcIjpcIiZFdW1sO1wiLFwi4oiDXCI6XCImZXhpc3Q7XCIsXCLihYdcIjpcIiZleHBvbmVudGlhbGU7XCIsXCLQpFwiOlwiJkZjeTtcIixcIvCdlIlcIjpcIiZGZnI7XCIsXCLil7xcIjpcIiZGaWxsZWRTbWFsbFNxdWFyZTtcIixcIuKWqlwiOlwiJnNxdWY7XCIsXCLwnZS9XCI6XCImRm9wZjtcIixcIuKIgFwiOlwiJmZvcmFsbDtcIixcIuKEsVwiOlwiJkZzY3I7XCIsXCLQg1wiOlwiJkdKY3k7XCIsXCI+XCI6XCImZ3Q7XCIsXCLOk1wiOlwiJkdhbW1hO1wiLFwiz5xcIjpcIiZHYW1tYWQ7XCIsXCLEnlwiOlwiJkdicmV2ZTtcIixcIsSiXCI6XCImR2NlZGlsO1wiLFwixJxcIjpcIiZHY2lyYztcIixcItCTXCI6XCImR2N5O1wiLFwixKBcIjpcIiZHZG90O1wiLFwi8J2UilwiOlwiJkdmcjtcIixcIuKLmVwiOlwiJmdnZztcIixcIvCdlL5cIjpcIiZHb3BmO1wiLFwi4omlXCI6XCImZ2VxO1wiLFwi4oubXCI6XCImZ3RyZXFsZXNzO1wiLFwi4omnXCI6XCImZ2VxcTtcIixcIuKqolwiOlwiJkdyZWF0ZXJHcmVhdGVyO1wiLFwi4om3XCI6XCImZ3RybGVzcztcIixcIuKpvlwiOlwiJmdlcztcIixcIuKJs1wiOlwiJmd0cnNpbTtcIixcIvCdkqJcIjpcIiZHc2NyO1wiLFwi4omrXCI6XCImZ2c7XCIsXCLQqlwiOlwiJkhBUkRjeTtcIixcIsuHXCI6XCImY2Fyb247XCIsXCJeXCI6XCImSGF0O1wiLFwixKRcIjpcIiZIY2lyYztcIixcIuKEjFwiOlwiJlBvaW5jYXJlcGxhbmU7XCIsXCLihItcIjpcIiZoYW1pbHQ7XCIsXCLihI1cIjpcIiZxdWF0ZXJuaW9ucztcIixcIuKUgFwiOlwiJmJveGg7XCIsXCLEplwiOlwiJkhzdHJvaztcIixcIuKJj1wiOlwiJmJ1bXBlcTtcIixcItCVXCI6XCImSUVjeTtcIixcIsSyXCI6XCImSUpsaWc7XCIsXCLQgVwiOlwiJklPY3k7XCIsXCLDjVwiOlwiJklhY3V0ZTtcIixcIsOOXCI6XCImSWNpcmM7XCIsXCLQmFwiOlwiJkljeTtcIixcIsSwXCI6XCImSWRvdDtcIixcIuKEkVwiOlwiJmltYWdwYXJ0O1wiLFwiw4xcIjpcIiZJZ3JhdmU7XCIsXCLEqlwiOlwiJkltYWNyO1wiLFwi4oWIXCI6XCImaWk7XCIsXCLiiKxcIjpcIiZJbnQ7XCIsXCLiiKtcIjpcIiZpbnQ7XCIsXCLii4JcIjpcIiZ4Y2FwO1wiLFwi4oGjXCI6XCImaWM7XCIsXCLigaJcIjpcIiZpdDtcIixcIsSuXCI6XCImSW9nb247XCIsXCLwnZWAXCI6XCImSW9wZjtcIixcIs6ZXCI6XCImSW90YTtcIixcIuKEkFwiOlwiJmltYWdsaW5lO1wiLFwixKhcIjpcIiZJdGlsZGU7XCIsXCLQhlwiOlwiJkl1a2N5O1wiLFwiw49cIjpcIiZJdW1sO1wiLFwixLRcIjpcIiZKY2lyYztcIixcItCZXCI6XCImSmN5O1wiLFwi8J2UjVwiOlwiJkpmcjtcIixcIvCdlYFcIjpcIiZKb3BmO1wiLFwi8J2SpVwiOlwiJkpzY3I7XCIsXCLQiFwiOlwiJkpzZXJjeTtcIixcItCEXCI6XCImSnVrY3k7XCIsXCLQpVwiOlwiJktIY3k7XCIsXCLQjFwiOlwiJktKY3k7XCIsXCLOmlwiOlwiJkthcHBhO1wiLFwixLZcIjpcIiZLY2VkaWw7XCIsXCLQmlwiOlwiJktjeTtcIixcIvCdlI5cIjpcIiZLZnI7XCIsXCLwnZWCXCI6XCImS29wZjtcIixcIvCdkqZcIjpcIiZLc2NyO1wiLFwi0IlcIjpcIiZMSmN5O1wiLFwiPFwiOlwiJmx0O1wiLFwixLlcIjpcIiZMYWN1dGU7XCIsXCLOm1wiOlwiJkxhbWJkYTtcIixcIuKfqlwiOlwiJkxhbmc7XCIsXCLihJJcIjpcIiZsYWdyYW47XCIsXCLihp5cIjpcIiZ0d29oZWFkbGVmdGFycm93O1wiLFwixL1cIjpcIiZMY2Fyb247XCIsXCLEu1wiOlwiJkxjZWRpbDtcIixcItCbXCI6XCImTGN5O1wiLFwi4p+oXCI6XCImbGFuZ2xlO1wiLFwi4oaQXCI6XCImc2xhcnI7XCIsXCLih6RcIjpcIiZsYXJyYjtcIixcIuKHhlwiOlwiJmxyYXJyO1wiLFwi4oyIXCI6XCImbGNlaWw7XCIsXCLin6ZcIjpcIiZsb2JyaztcIixcIuKloVwiOlwiJkxlZnREb3duVGVlVmVjdG9yO1wiLFwi4oeDXCI6XCImZG93bmhhcnBvb25sZWZ0O1wiLFwi4qWZXCI6XCImTGVmdERvd25WZWN0b3JCYXI7XCIsXCLijIpcIjpcIiZsZmxvb3I7XCIsXCLihpRcIjpcIiZsZWZ0cmlnaHRhcnJvdztcIixcIuKljlwiOlwiJkxlZnRSaWdodFZlY3RvcjtcIixcIuKKo1wiOlwiJmRhc2h2O1wiLFwi4oakXCI6XCImbWFwc3RvbGVmdDtcIixcIuKlmlwiOlwiJkxlZnRUZWVWZWN0b3I7XCIsXCLiirJcIjpcIiZ2bHRyaTtcIixcIuKnj1wiOlwiJkxlZnRUcmlhbmdsZUJhcjtcIixcIuKKtFwiOlwiJnRyaWFuZ2xlbGVmdGVxO1wiLFwi4qWRXCI6XCImTGVmdFVwRG93blZlY3RvcjtcIixcIuKloFwiOlwiJkxlZnRVcFRlZVZlY3RvcjtcIixcIuKGv1wiOlwiJnVwaGFycG9vbmxlZnQ7XCIsXCLipZhcIjpcIiZMZWZ0VXBWZWN0b3JCYXI7XCIsXCLihrxcIjpcIiZsaGFydTtcIixcIuKlklwiOlwiJkxlZnRWZWN0b3JCYXI7XCIsXCLii5pcIjpcIiZsZXNzZXFndHI7XCIsXCLiiaZcIjpcIiZsZXFxO1wiLFwi4om2XCI6XCImbGc7XCIsXCLiqqFcIjpcIiZMZXNzTGVzcztcIixcIuKpvVwiOlwiJmxlcztcIixcIuKJslwiOlwiJmxzaW07XCIsXCLwnZSPXCI6XCImTGZyO1wiLFwi4ouYXCI6XCImTGw7XCIsXCLih5pcIjpcIiZsQWFycjtcIixcIsS/XCI6XCImTG1pZG90O1wiLFwi4p+1XCI6XCImeGxhcnI7XCIsXCLin7dcIjpcIiZ4aGFycjtcIixcIuKftlwiOlwiJnhyYXJyO1wiLFwi8J2Vg1wiOlwiJkxvcGY7XCIsXCLihplcIjpcIiZzd2Fycm93O1wiLFwi4oaYXCI6XCImc2VhcnJvdztcIixcIuKGsFwiOlwiJmxzaDtcIixcIsWBXCI6XCImTHN0cm9rO1wiLFwi4omqXCI6XCImbGw7XCIsXCLipIVcIjpcIiZNYXA7XCIsXCLQnFwiOlwiJk1jeTtcIixcIuKBn1wiOlwiJk1lZGl1bVNwYWNlO1wiLFwi4oSzXCI6XCImcGhtbWF0O1wiLFwi8J2UkFwiOlwiJk1mcjtcIixcIuKIk1wiOlwiJm1wO1wiLFwi8J2VhFwiOlwiJk1vcGY7XCIsXCLOnFwiOlwiJk11O1wiLFwi0IpcIjpcIiZOSmN5O1wiLFwixYNcIjpcIiZOYWN1dGU7XCIsXCLFh1wiOlwiJk5jYXJvbjtcIixcIsWFXCI6XCImTmNlZGlsO1wiLFwi0J1cIjpcIiZOY3k7XCIsXCLigItcIjpcIiZaZXJvV2lkdGhTcGFjZTtcIixcIlxcblwiOlwiJk5ld0xpbmU7XCIsXCLwnZSRXCI6XCImTmZyO1wiLFwi4oGgXCI6XCImTm9CcmVhaztcIixcIsKgXCI6XCImbmJzcDtcIixcIuKElVwiOlwiJm5hdHVyYWxzO1wiLFwi4qusXCI6XCImTm90O1wiLFwi4omiXCI6XCImbmVxdWl2O1wiLFwi4omtXCI6XCImTm90Q3VwQ2FwO1wiLFwi4oimXCI6XCImbnNwYXI7XCIsXCLiiIlcIjpcIiZub3RpbnZhO1wiLFwi4omgXCI6XCImbmU7XCIsXCLiiYLMuFwiOlwiJm5lc2ltO1wiLFwi4oiEXCI6XCImbmV4aXN0cztcIixcIuKJr1wiOlwiJm5ndHI7XCIsXCLiibFcIjpcIiZuZ2VxO1wiLFwi4omnzLhcIjpcIiZuZ2VxcTtcIixcIuKJq8y4XCI6XCImbkd0djtcIixcIuKJuVwiOlwiJm50Z2w7XCIsXCLiqb7MuFwiOlwiJm5nZXM7XCIsXCLiibVcIjpcIiZuZ3NpbTtcIixcIuKJjsy4XCI6XCImbmJ1bXA7XCIsXCLiiY/MuFwiOlwiJm5idW1wZTtcIixcIuKLqlwiOlwiJm50cmlhbmdsZWxlZnQ7XCIsXCLip4/MuFwiOlwiJk5vdExlZnRUcmlhbmdsZUJhcjtcIixcIuKLrFwiOlwiJm50cmlhbmdsZWxlZnRlcTtcIixcIuKJrlwiOlwiJm5sdDtcIixcIuKJsFwiOlwiJm5sZXE7XCIsXCLiibhcIjpcIiZudGxnO1wiLFwi4omqzLhcIjpcIiZuTHR2O1wiLFwi4qm9zLhcIjpcIiZubGVzO1wiLFwi4om0XCI6XCImbmxzaW07XCIsXCLiqqLMuFwiOlwiJk5vdE5lc3RlZEdyZWF0ZXJHcmVhdGVyO1wiLFwi4qqhzLhcIjpcIiZOb3ROZXN0ZWRMZXNzTGVzcztcIixcIuKKgFwiOlwiJm5wcmVjO1wiLFwi4qqvzLhcIjpcIiZucHJlY2VxO1wiLFwi4ougXCI6XCImbnByY3VlO1wiLFwi4oiMXCI6XCImbm90bml2YTtcIixcIuKLq1wiOlwiJm50cmlhbmdsZXJpZ2h0O1wiLFwi4qeQzLhcIjpcIiZOb3RSaWdodFRyaWFuZ2xlQmFyO1wiLFwi4outXCI6XCImbnRyaWFuZ2xlcmlnaHRlcTtcIixcIuKKj8y4XCI6XCImTm90U3F1YXJlU3Vic2V0O1wiLFwi4ouiXCI6XCImbnNxc3ViZTtcIixcIuKKkMy4XCI6XCImTm90U3F1YXJlU3VwZXJzZXQ7XCIsXCLii6NcIjpcIiZuc3FzdXBlO1wiLFwi4oqC4oOSXCI6XCImdm5zdWI7XCIsXCLiiohcIjpcIiZuc3Vic2V0ZXE7XCIsXCLiioFcIjpcIiZuc3VjYztcIixcIuKqsMy4XCI6XCImbnN1Y2NlcTtcIixcIuKLoVwiOlwiJm5zY2N1ZTtcIixcIuKJv8y4XCI6XCImTm90U3VjY2VlZHNUaWxkZTtcIixcIuKKg+KDklwiOlwiJnZuc3VwO1wiLFwi4oqJXCI6XCImbnN1cHNldGVxO1wiLFwi4omBXCI6XCImbnNpbTtcIixcIuKJhFwiOlwiJm5zaW1lcTtcIixcIuKJh1wiOlwiJm5jb25nO1wiLFwi4omJXCI6XCImbmFwcHJveDtcIixcIuKIpFwiOlwiJm5zbWlkO1wiLFwi8J2SqVwiOlwiJk5zY3I7XCIsXCLDkVwiOlwiJk50aWxkZTtcIixcIs6dXCI6XCImTnU7XCIsXCLFklwiOlwiJk9FbGlnO1wiLFwiw5NcIjpcIiZPYWN1dGU7XCIsXCLDlFwiOlwiJk9jaXJjO1wiLFwi0J5cIjpcIiZPY3k7XCIsXCLFkFwiOlwiJk9kYmxhYztcIixcIvCdlJJcIjpcIiZPZnI7XCIsXCLDklwiOlwiJk9ncmF2ZTtcIixcIsWMXCI6XCImT21hY3I7XCIsXCLOqVwiOlwiJm9obTtcIixcIs6fXCI6XCImT21pY3JvbjtcIixcIvCdlYZcIjpcIiZPb3BmO1wiLFwi4oCcXCI6XCImbGRxdW87XCIsXCLigJhcIjpcIiZsc3F1bztcIixcIuKplFwiOlwiJk9yO1wiLFwi8J2SqlwiOlwiJk9zY3I7XCIsXCLDmFwiOlwiJk9zbGFzaDtcIixcIsOVXCI6XCImT3RpbGRlO1wiLFwi4qi3XCI6XCImT3RpbWVzO1wiLFwiw5ZcIjpcIiZPdW1sO1wiLFwi4oC+XCI6XCImb2xpbmU7XCIsXCLij55cIjpcIiZPdmVyQnJhY2U7XCIsXCLijrRcIjpcIiZ0YnJrO1wiLFwi4o+cXCI6XCImT3ZlclBhcmVudGhlc2lzO1wiLFwi4oiCXCI6XCImcGFydDtcIixcItCfXCI6XCImUGN5O1wiLFwi8J2Uk1wiOlwiJlBmcjtcIixcIs6mXCI6XCImUGhpO1wiLFwizqBcIjpcIiZQaTtcIixcIsKxXCI6XCImcG07XCIsXCLihJlcIjpcIiZwcmltZXM7XCIsXCLiqrtcIjpcIiZQcjtcIixcIuKJulwiOlwiJnByZWM7XCIsXCLiqq9cIjpcIiZwcmVjZXE7XCIsXCLiibxcIjpcIiZwcmVjY3VybHllcTtcIixcIuKJvlwiOlwiJnByc2ltO1wiLFwi4oCzXCI6XCImUHJpbWU7XCIsXCLiiI9cIjpcIiZwcm9kO1wiLFwi4oidXCI6XCImdnByb3A7XCIsXCLwnZKrXCI6XCImUHNjcjtcIixcIs6oXCI6XCImUHNpO1wiLCdcIic6XCImcXVvdDtcIixcIvCdlJRcIjpcIiZRZnI7XCIsXCLihJpcIjpcIiZyYXRpb25hbHM7XCIsXCLwnZKsXCI6XCImUXNjcjtcIixcIuKkkFwiOlwiJmRyYmthcm93O1wiLFwiwq5cIjpcIiZyZWc7XCIsXCLFlFwiOlwiJlJhY3V0ZTtcIixcIuKfq1wiOlwiJlJhbmc7XCIsXCLihqBcIjpcIiZ0d29oZWFkcmlnaHRhcnJvdztcIixcIuKkllwiOlwiJlJhcnJ0bDtcIixcIsWYXCI6XCImUmNhcm9uO1wiLFwixZZcIjpcIiZSY2VkaWw7XCIsXCLQoFwiOlwiJlJjeTtcIixcIuKEnFwiOlwiJnJlYWxwYXJ0O1wiLFwi4oiLXCI6XCImbml2O1wiLFwi4oeLXCI6XCImbHJoYXI7XCIsXCLipa9cIjpcIiZkdWhhcjtcIixcIs6hXCI6XCImUmhvO1wiLFwi4p+pXCI6XCImcmFuZ2xlO1wiLFwi4oaSXCI6XCImc3JhcnI7XCIsXCLih6VcIjpcIiZyYXJyYjtcIixcIuKHhFwiOlwiJnJsYXJyO1wiLFwi4oyJXCI6XCImcmNlaWw7XCIsXCLin6dcIjpcIiZyb2JyaztcIixcIuKlnVwiOlwiJlJpZ2h0RG93blRlZVZlY3RvcjtcIixcIuKHglwiOlwiJmRvd25oYXJwb29ucmlnaHQ7XCIsXCLipZVcIjpcIiZSaWdodERvd25WZWN0b3JCYXI7XCIsXCLijItcIjpcIiZyZmxvb3I7XCIsXCLiiqJcIjpcIiZ2ZGFzaDtcIixcIuKGplwiOlwiJm1hcHN0bztcIixcIuKlm1wiOlwiJlJpZ2h0VGVlVmVjdG9yO1wiLFwi4oqzXCI6XCImdnJ0cmk7XCIsXCLip5BcIjpcIiZSaWdodFRyaWFuZ2xlQmFyO1wiLFwi4oq1XCI6XCImdHJpYW5nbGVyaWdodGVxO1wiLFwi4qWPXCI6XCImUmlnaHRVcERvd25WZWN0b3I7XCIsXCLipZxcIjpcIiZSaWdodFVwVGVlVmVjdG9yO1wiLFwi4oa+XCI6XCImdXBoYXJwb29ucmlnaHQ7XCIsXCLipZRcIjpcIiZSaWdodFVwVmVjdG9yQmFyO1wiLFwi4oeAXCI6XCImcmlnaHRoYXJwb29udXA7XCIsXCLipZNcIjpcIiZSaWdodFZlY3RvckJhcjtcIixcIuKEnVwiOlwiJnJlYWxzO1wiLFwi4qWwXCI6XCImUm91bmRJbXBsaWVzO1wiLFwi4oebXCI6XCImckFhcnI7XCIsXCLihJtcIjpcIiZyZWFsaW5lO1wiLFwi4oaxXCI6XCImcnNoO1wiLFwi4qe0XCI6XCImUnVsZURlbGF5ZWQ7XCIsXCLQqVwiOlwiJlNIQ0hjeTtcIixcItCoXCI6XCImU0hjeTtcIixcItCsXCI6XCImU09GVGN5O1wiLFwixZpcIjpcIiZTYWN1dGU7XCIsXCLiqrxcIjpcIiZTYztcIixcIsWgXCI6XCImU2Nhcm9uO1wiLFwixZ5cIjpcIiZTY2VkaWw7XCIsXCLFnFwiOlwiJlNjaXJjO1wiLFwi0KFcIjpcIiZTY3k7XCIsXCLwnZSWXCI6XCImU2ZyO1wiLFwi4oaRXCI6XCImdXBhcnJvdztcIixcIs6jXCI6XCImU2lnbWE7XCIsXCLiiJhcIjpcIiZjb21wZm47XCIsXCLwnZWKXCI6XCImU29wZjtcIixcIuKImlwiOlwiJnJhZGljO1wiLFwi4pahXCI6XCImc3F1YXJlO1wiLFwi4oqTXCI6XCImc3FjYXA7XCIsXCLiio9cIjpcIiZzcXN1YnNldDtcIixcIuKKkVwiOlwiJnNxc3Vic2V0ZXE7XCIsXCLiipBcIjpcIiZzcXN1cHNldDtcIixcIuKKklwiOlwiJnNxc3Vwc2V0ZXE7XCIsXCLiipRcIjpcIiZzcWN1cDtcIixcIvCdkq5cIjpcIiZTc2NyO1wiLFwi4ouGXCI6XCImc3N0YXJmO1wiLFwi4ouQXCI6XCImU3Vic2V0O1wiLFwi4oqGXCI6XCImc3Vic2V0ZXE7XCIsXCLiibtcIjpcIiZzdWNjO1wiLFwi4qqwXCI6XCImc3VjY2VxO1wiLFwi4om9XCI6XCImc3VjY2N1cmx5ZXE7XCIsXCLiib9cIjpcIiZzdWNjc2ltO1wiLFwi4oiRXCI6XCImc3VtO1wiLFwi4ouRXCI6XCImU3Vwc2V0O1wiLFwi4oqDXCI6XCImc3Vwc2V0O1wiLFwi4oqHXCI6XCImc3Vwc2V0ZXE7XCIsXCLDnlwiOlwiJlRIT1JOO1wiLFwi4oSiXCI6XCImdHJhZGU7XCIsXCLQi1wiOlwiJlRTSGN5O1wiLFwi0KZcIjpcIiZUU2N5O1wiLFwiXFx0XCI6XCImVGFiO1wiLFwizqRcIjpcIiZUYXU7XCIsXCLFpFwiOlwiJlRjYXJvbjtcIixcIsWiXCI6XCImVGNlZGlsO1wiLFwi0KJcIjpcIiZUY3k7XCIsXCLwnZSXXCI6XCImVGZyO1wiLFwi4oi0XCI6XCImdGhlcmVmb3JlO1wiLFwizphcIjpcIiZUaGV0YTtcIixcIuKBn+KAilwiOlwiJlRoaWNrU3BhY2U7XCIsXCLigIlcIjpcIiZ0aGluc3A7XCIsXCLiiLxcIjpcIiZ0aGtzaW07XCIsXCLiiYNcIjpcIiZzaW1lcTtcIixcIuKJhVwiOlwiJmNvbmc7XCIsXCLiiYhcIjpcIiZ0aGthcDtcIixcIvCdlYtcIjpcIiZUb3BmO1wiLFwi4oObXCI6XCImdGRvdDtcIixcIvCdkq9cIjpcIiZUc2NyO1wiLFwixaZcIjpcIiZUc3Ryb2s7XCIsXCLDmlwiOlwiJlVhY3V0ZTtcIixcIuKGn1wiOlwiJlVhcnI7XCIsXCLipYlcIjpcIiZVYXJyb2NpcjtcIixcItCOXCI6XCImVWJyY3k7XCIsXCLFrFwiOlwiJlVicmV2ZTtcIixcIsObXCI6XCImVWNpcmM7XCIsXCLQo1wiOlwiJlVjeTtcIixcIsWwXCI6XCImVWRibGFjO1wiLFwi8J2UmFwiOlwiJlVmcjtcIixcIsOZXCI6XCImVWdyYXZlO1wiLFwixapcIjpcIiZVbWFjcjtcIixfOlwiJmxvd2JhcjtcIixcIuKPn1wiOlwiJlVuZGVyQnJhY2U7XCIsXCLijrVcIjpcIiZiYnJrO1wiLFwi4o+dXCI6XCImVW5kZXJQYXJlbnRoZXNpcztcIixcIuKLg1wiOlwiJnhjdXA7XCIsXCLiio5cIjpcIiZ1cGx1cztcIixcIsWyXCI6XCImVW9nb247XCIsXCLwnZWMXCI6XCImVW9wZjtcIixcIuKkklwiOlwiJlVwQXJyb3dCYXI7XCIsXCLih4VcIjpcIiZ1ZGFycjtcIixcIuKGlVwiOlwiJnZhcnI7XCIsXCLipa5cIjpcIiZ1ZGhhcjtcIixcIuKKpVwiOlwiJnBlcnA7XCIsXCLihqVcIjpcIiZtYXBzdG91cDtcIixcIuKGllwiOlwiJm53YXJyb3c7XCIsXCLihpdcIjpcIiZuZWFycm93O1wiLFwiz5JcIjpcIiZ1cHNpaDtcIixcIs6lXCI6XCImVXBzaWxvbjtcIixcIsWuXCI6XCImVXJpbmc7XCIsXCLwnZKwXCI6XCImVXNjcjtcIixcIsWoXCI6XCImVXRpbGRlO1wiLFwiw5xcIjpcIiZVdW1sO1wiLFwi4oqrXCI6XCImVkRhc2g7XCIsXCLiq6tcIjpcIiZWYmFyO1wiLFwi0JJcIjpcIiZWY3k7XCIsXCLiiqlcIjpcIiZWZGFzaDtcIixcIuKrplwiOlwiJlZkYXNobDtcIixcIuKLgVwiOlwiJnh2ZWU7XCIsXCLigJZcIjpcIiZWZXJ0O1wiLFwi4oijXCI6XCImc21pZDtcIixcInxcIjpcIiZ2ZXJ0O1wiLFwi4p2YXCI6XCImVmVydGljYWxTZXBhcmF0b3I7XCIsXCLiiYBcIjpcIiZ3cmVhdGg7XCIsXCLigIpcIjpcIiZoYWlyc3A7XCIsXCLwnZSZXCI6XCImVmZyO1wiLFwi8J2VjVwiOlwiJlZvcGY7XCIsXCLwnZKxXCI6XCImVnNjcjtcIixcIuKKqlwiOlwiJlZ2ZGFzaDtcIixcIsW0XCI6XCImV2NpcmM7XCIsXCLii4BcIjpcIiZ4d2VkZ2U7XCIsXCLwnZSaXCI6XCImV2ZyO1wiLFwi8J2VjlwiOlwiJldvcGY7XCIsXCLwnZKyXCI6XCImV3NjcjtcIixcIvCdlJtcIjpcIiZYZnI7XCIsXCLOnlwiOlwiJlhpO1wiLFwi8J2Vj1wiOlwiJlhvcGY7XCIsXCLwnZKzXCI6XCImWHNjcjtcIixcItCvXCI6XCImWUFjeTtcIixcItCHXCI6XCImWUljeTtcIixcItCuXCI6XCImWVVjeTtcIixcIsOdXCI6XCImWWFjdXRlO1wiLFwixbZcIjpcIiZZY2lyYztcIixcItCrXCI6XCImWWN5O1wiLFwi8J2UnFwiOlwiJllmcjtcIixcIvCdlZBcIjpcIiZZb3BmO1wiLFwi8J2StFwiOlwiJllzY3I7XCIsXCLFuFwiOlwiJll1bWw7XCIsXCLQllwiOlwiJlpIY3k7XCIsXCLFuVwiOlwiJlphY3V0ZTtcIixcIsW9XCI6XCImWmNhcm9uO1wiLFwi0JdcIjpcIiZaY3k7XCIsXCLFu1wiOlwiJlpkb3Q7XCIsXCLOllwiOlwiJlpldGE7XCIsXCLihKhcIjpcIiZ6ZWV0cmY7XCIsXCLihKRcIjpcIiZpbnRlZ2VycztcIixcIvCdkrVcIjpcIiZac2NyO1wiLFwiw6FcIjpcIiZhYWN1dGU7XCIsXCLEg1wiOlwiJmFicmV2ZTtcIixcIuKIvlwiOlwiJm1zdHBvcztcIixcIuKIvsyzXCI6XCImYWNFO1wiLFwi4oi/XCI6XCImYWNkO1wiLFwiw6JcIjpcIiZhY2lyYztcIixcItCwXCI6XCImYWN5O1wiLFwiw6ZcIjpcIiZhZWxpZztcIixcIvCdlJ5cIjpcIiZhZnI7XCIsXCLDoFwiOlwiJmFncmF2ZTtcIixcIuKEtVwiOlwiJmFsZXBoO1wiLFwizrFcIjpcIiZhbHBoYTtcIixcIsSBXCI6XCImYW1hY3I7XCIsXCLiqL9cIjpcIiZhbWFsZztcIixcIuKIp1wiOlwiJndlZGdlO1wiLFwi4qmVXCI6XCImYW5kYW5kO1wiLFwi4qmcXCI6XCImYW5kZDtcIixcIuKpmFwiOlwiJmFuZHNsb3BlO1wiLFwi4qmaXCI6XCImYW5kdjtcIixcIuKIoFwiOlwiJmFuZ2xlO1wiLFwi4qakXCI6XCImYW5nZTtcIixcIuKIoVwiOlwiJm1lYXN1cmVkYW5nbGU7XCIsXCLipqhcIjpcIiZhbmdtc2RhYTtcIixcIuKmqVwiOlwiJmFuZ21zZGFiO1wiLFwi4qaqXCI6XCImYW5nbXNkYWM7XCIsXCLipqtcIjpcIiZhbmdtc2RhZDtcIixcIuKmrFwiOlwiJmFuZ21zZGFlO1wiLFwi4qatXCI6XCImYW5nbXNkYWY7XCIsXCLipq5cIjpcIiZhbmdtc2RhZztcIixcIuKmr1wiOlwiJmFuZ21zZGFoO1wiLFwi4oifXCI6XCImYW5ncnQ7XCIsXCLiir5cIjpcIiZhbmdydHZiO1wiLFwi4qadXCI6XCImYW5ncnR2YmQ7XCIsXCLiiKJcIjpcIiZhbmdzcGg7XCIsXCLijbxcIjpcIiZhbmd6YXJyO1wiLFwixIVcIjpcIiZhb2dvbjtcIixcIvCdlZJcIjpcIiZhb3BmO1wiLFwi4qmwXCI6XCImYXBFO1wiLFwi4qmvXCI6XCImYXBhY2lyO1wiLFwi4omKXCI6XCImYXBwcm94ZXE7XCIsXCLiiYtcIjpcIiZhcGlkO1wiLFwiJ1wiOlwiJmFwb3M7XCIsXCLDpVwiOlwiJmFyaW5nO1wiLFwi8J2StlwiOlwiJmFzY3I7XCIsXCIqXCI6XCImbWlkYXN0O1wiLFwiw6NcIjpcIiZhdGlsZGU7XCIsXCLDpFwiOlwiJmF1bWw7XCIsXCLiqJFcIjpcIiZhd2ludDtcIixcIuKrrVwiOlwiJmJOb3Q7XCIsXCLiiYxcIjpcIiZiY29uZztcIixcIs+2XCI6XCImYmVwc2k7XCIsXCLigLVcIjpcIiZicHJpbWU7XCIsXCLiiL1cIjpcIiZic2ltO1wiLFwi4ouNXCI6XCImYnNpbWU7XCIsXCLiir1cIjpcIiZiYXJ2ZWU7XCIsXCLijIVcIjpcIiZiYXJ3ZWRnZTtcIixcIuKOtlwiOlwiJmJicmt0YnJrO1wiLFwi0LFcIjpcIiZiY3k7XCIsXCLigJ5cIjpcIiZsZHF1b3I7XCIsXCLiprBcIjpcIiZiZW1wdHl2O1wiLFwizrJcIjpcIiZiZXRhO1wiLFwi4oS2XCI6XCImYmV0aDtcIixcIuKJrFwiOlwiJnR3aXh0O1wiLFwi8J2Un1wiOlwiJmJmcjtcIixcIuKXr1wiOlwiJnhjaXJjO1wiLFwi4qiAXCI6XCImeG9kb3Q7XCIsXCLiqIFcIjpcIiZ4b3BsdXM7XCIsXCLiqIJcIjpcIiZ4b3RpbWU7XCIsXCLiqIZcIjpcIiZ4c3FjdXA7XCIsXCLimIVcIjpcIiZzdGFyZjtcIixcIuKWvVwiOlwiJnhkdHJpO1wiLFwi4pazXCI6XCImeHV0cmk7XCIsXCLiqIRcIjpcIiZ4dXBsdXM7XCIsXCLipI1cIjpcIiZyYmFycjtcIixcIuKnq1wiOlwiJmxvemY7XCIsXCLilrRcIjpcIiZ1dHJpZjtcIixcIuKWvlwiOlwiJmR0cmlmO1wiLFwi4peCXCI6XCImbHRyaWY7XCIsXCLilrhcIjpcIiZydHJpZjtcIixcIuKQo1wiOlwiJmJsYW5rO1wiLFwi4paSXCI6XCImYmxrMTI7XCIsXCLilpFcIjpcIiZibGsxNDtcIixcIuKWk1wiOlwiJmJsazM0O1wiLFwi4paIXCI6XCImYmxvY2s7XCIsXCI94oOlXCI6XCImYm5lO1wiLFwi4omh4oOlXCI6XCImYm5lcXVpdjtcIixcIuKMkFwiOlwiJmJub3Q7XCIsXCLwnZWTXCI6XCImYm9wZjtcIixcIuKLiFwiOlwiJmJvd3RpZTtcIixcIuKVl1wiOlwiJmJveERMO1wiLFwi4pWUXCI6XCImYm94RFI7XCIsXCLilZZcIjpcIiZib3hEbDtcIixcIuKVk1wiOlwiJmJveERyO1wiLFwi4pWQXCI6XCImYm94SDtcIixcIuKVplwiOlwiJmJveEhEO1wiLFwi4pWpXCI6XCImYm94SFU7XCIsXCLilaRcIjpcIiZib3hIZDtcIixcIuKVp1wiOlwiJmJveEh1O1wiLFwi4pWdXCI6XCImYm94VUw7XCIsXCLilZpcIjpcIiZib3hVUjtcIixcIuKVnFwiOlwiJmJveFVsO1wiLFwi4pWZXCI6XCImYm94VXI7XCIsXCLilZFcIjpcIiZib3hWO1wiLFwi4pWsXCI6XCImYm94Vkg7XCIsXCLilaNcIjpcIiZib3hWTDtcIixcIuKVoFwiOlwiJmJveFZSO1wiLFwi4pWrXCI6XCImYm94Vmg7XCIsXCLilaJcIjpcIiZib3hWbDtcIixcIuKVn1wiOlwiJmJveFZyO1wiLFwi4qeJXCI6XCImYm94Ym94O1wiLFwi4pWVXCI6XCImYm94ZEw7XCIsXCLilZJcIjpcIiZib3hkUjtcIixcIuKUkFwiOlwiJmJveGRsO1wiLFwi4pSMXCI6XCImYm94ZHI7XCIsXCLilaVcIjpcIiZib3hoRDtcIixcIuKVqFwiOlwiJmJveGhVO1wiLFwi4pSsXCI6XCImYm94aGQ7XCIsXCLilLRcIjpcIiZib3hodTtcIixcIuKKn1wiOlwiJm1pbnVzYjtcIixcIuKKnlwiOlwiJnBsdXNiO1wiLFwi4oqgXCI6XCImdGltZXNiO1wiLFwi4pWbXCI6XCImYm94dUw7XCIsXCLilZhcIjpcIiZib3h1UjtcIixcIuKUmFwiOlwiJmJveHVsO1wiLFwi4pSUXCI6XCImYm94dXI7XCIsXCLilIJcIjpcIiZib3h2O1wiLFwi4pWqXCI6XCImYm94dkg7XCIsXCLilaFcIjpcIiZib3h2TDtcIixcIuKVnlwiOlwiJmJveHZSO1wiLFwi4pS8XCI6XCImYm94dmg7XCIsXCLilKRcIjpcIiZib3h2bDtcIixcIuKUnFwiOlwiJmJveHZyO1wiLFwiwqZcIjpcIiZicnZiYXI7XCIsXCLwnZK3XCI6XCImYnNjcjtcIixcIuKBj1wiOlwiJmJzZW1pO1wiLFwiXFxcXFwiOlwiJmJzb2w7XCIsXCLip4VcIjpcIiZic29sYjtcIixcIuKfiFwiOlwiJmJzb2xoc3ViO1wiLFwi4oCiXCI6XCImYnVsbGV0O1wiLFwi4qquXCI6XCImYnVtcEU7XCIsXCLEh1wiOlwiJmNhY3V0ZTtcIixcIuKIqVwiOlwiJmNhcDtcIixcIuKphFwiOlwiJmNhcGFuZDtcIixcIuKpiVwiOlwiJmNhcGJyY3VwO1wiLFwi4qmLXCI6XCImY2FwY2FwO1wiLFwi4qmHXCI6XCImY2FwY3VwO1wiLFwi4qmAXCI6XCImY2FwZG90O1wiLFwi4oip77iAXCI6XCImY2FwcztcIixcIuKBgVwiOlwiJmNhcmV0O1wiLFwi4qmNXCI6XCImY2NhcHM7XCIsXCLEjVwiOlwiJmNjYXJvbjtcIixcIsOnXCI6XCImY2NlZGlsO1wiLFwixIlcIjpcIiZjY2lyYztcIixcIuKpjFwiOlwiJmNjdXBzO1wiLFwi4qmQXCI6XCImY2N1cHNzbTtcIixcIsSLXCI6XCImY2RvdDtcIixcIuKmslwiOlwiJmNlbXB0eXY7XCIsXCLColwiOlwiJmNlbnQ7XCIsXCLwnZSgXCI6XCImY2ZyO1wiLFwi0YdcIjpcIiZjaGN5O1wiLFwi4pyTXCI6XCImY2hlY2ttYXJrO1wiLFwiz4dcIjpcIiZjaGk7XCIsXCLil4tcIjpcIiZjaXI7XCIsXCLip4NcIjpcIiZjaXJFO1wiLFwiy4ZcIjpcIiZjaXJjO1wiLFwi4omXXCI6XCImY2lyZTtcIixcIuKGulwiOlwiJm9sYXJyO1wiLFwi4oa7XCI6XCImb3JhcnI7XCIsXCLik4hcIjpcIiZvUztcIixcIuKKm1wiOlwiJm9hc3Q7XCIsXCLiippcIjpcIiZvY2lyO1wiLFwi4oqdXCI6XCImb2Rhc2g7XCIsXCLiqJBcIjpcIiZjaXJmbmludDtcIixcIuKrr1wiOlwiJmNpcm1pZDtcIixcIuKnglwiOlwiJmNpcnNjaXI7XCIsXCLimaNcIjpcIiZjbHVic3VpdDtcIixcIjpcIjpcIiZjb2xvbjtcIixcIixcIjpcIiZjb21tYTtcIixcIkBcIjpcIiZjb21tYXQ7XCIsXCLiiIFcIjpcIiZjb21wbGVtZW50O1wiLFwi4qmtXCI6XCImY29uZ2RvdDtcIixcIvCdlZRcIjpcIiZjb3BmO1wiLFwi4oSXXCI6XCImY29weXNyO1wiLFwi4oa1XCI6XCImY3JhcnI7XCIsXCLinJdcIjpcIiZjcm9zcztcIixcIvCdkrhcIjpcIiZjc2NyO1wiLFwi4quPXCI6XCImY3N1YjtcIixcIuKrkVwiOlwiJmNzdWJlO1wiLFwi4quQXCI6XCImY3N1cDtcIixcIuKrklwiOlwiJmNzdXBlO1wiLFwi4ouvXCI6XCImY3Rkb3Q7XCIsXCLipLhcIjpcIiZjdWRhcnJsO1wiLFwi4qS1XCI6XCImY3VkYXJycjtcIixcIuKLnlwiOlwiJmN1cmx5ZXFwcmVjO1wiLFwi4oufXCI6XCImY3VybHllcXN1Y2M7XCIsXCLihrZcIjpcIiZjdXJ2ZWFycm93bGVmdDtcIixcIuKkvVwiOlwiJmN1bGFycnA7XCIsXCLiiKpcIjpcIiZjdXA7XCIsXCLiqYhcIjpcIiZjdXBicmNhcDtcIixcIuKphlwiOlwiJmN1cGNhcDtcIixcIuKpilwiOlwiJmN1cGN1cDtcIixcIuKKjVwiOlwiJmN1cGRvdDtcIixcIuKphVwiOlwiJmN1cG9yO1wiLFwi4oiq77iAXCI6XCImY3VwcztcIixcIuKGt1wiOlwiJmN1cnZlYXJyb3dyaWdodDtcIixcIuKkvFwiOlwiJmN1cmFycm07XCIsXCLii45cIjpcIiZjdXZlZTtcIixcIuKLj1wiOlwiJmN1d2VkO1wiLFwiwqRcIjpcIiZjdXJyZW47XCIsXCLiiLFcIjpcIiZjd2ludDtcIixcIuKMrVwiOlwiJmN5bGN0eTtcIixcIuKlpVwiOlwiJmRIYXI7XCIsXCLigKBcIjpcIiZkYWdnZXI7XCIsXCLihLhcIjpcIiZkYWxldGg7XCIsXCLigJBcIjpcIiZoeXBoZW47XCIsXCLipI9cIjpcIiZyQmFycjtcIixcIsSPXCI6XCImZGNhcm9uO1wiLFwi0LRcIjpcIiZkY3k7XCIsXCLih4pcIjpcIiZkb3duZG93bmFycm93cztcIixcIuKpt1wiOlwiJmVERG90O1wiLFwiwrBcIjpcIiZkZWc7XCIsXCLOtFwiOlwiJmRlbHRhO1wiLFwi4qaxXCI6XCImZGVtcHR5djtcIixcIuKlv1wiOlwiJmRmaXNodDtcIixcIvCdlKFcIjpcIiZkZnI7XCIsXCLimaZcIjpcIiZkaWFtcztcIixcIs+dXCI6XCImZ2FtbWFkO1wiLFwi4ouyXCI6XCImZGlzaW47XCIsXCLDt1wiOlwiJmRpdmlkZTtcIixcIuKLh1wiOlwiJmRpdm9ueDtcIixcItGSXCI6XCImZGpjeTtcIixcIuKMnlwiOlwiJmxsY29ybmVyO1wiLFwi4oyNXCI6XCImZGxjcm9wO1wiLCQ6XCImZG9sbGFyO1wiLFwi8J2VlVwiOlwiJmRvcGY7XCIsXCLiiZFcIjpcIiZlRG90O1wiLFwi4oi4XCI6XCImbWludXNkO1wiLFwi4oiUXCI6XCImcGx1c2RvO1wiLFwi4oqhXCI6XCImc2RvdGI7XCIsXCLijJ9cIjpcIiZscmNvcm5lcjtcIixcIuKMjFwiOlwiJmRyY3JvcDtcIixcIvCdkrlcIjpcIiZkc2NyO1wiLFwi0ZVcIjpcIiZkc2N5O1wiLFwi4qe2XCI6XCImZHNvbDtcIixcIsSRXCI6XCImZHN0cm9rO1wiLFwi4ouxXCI6XCImZHRkb3Q7XCIsXCLilr9cIjpcIiZ0cmlhbmdsZWRvd247XCIsXCLipqZcIjpcIiZkd2FuZ2xlO1wiLFwi0Z9cIjpcIiZkemN5O1wiLFwi4p+/XCI6XCImZHppZ3JhcnI7XCIsXCLDqVwiOlwiJmVhY3V0ZTtcIixcIuKprlwiOlwiJmVhc3RlcjtcIixcIsSbXCI6XCImZWNhcm9uO1wiLFwi4omWXCI6XCImZXFjaXJjO1wiLFwiw6pcIjpcIiZlY2lyYztcIixcIuKJlVwiOlwiJmVxY29sb247XCIsXCLRjVwiOlwiJmVjeTtcIixcIsSXXCI6XCImZWRvdDtcIixcIuKJklwiOlwiJmZhbGxpbmdkb3RzZXE7XCIsXCLwnZSiXCI6XCImZWZyO1wiLFwi4qqaXCI6XCImZWc7XCIsXCLDqFwiOlwiJmVncmF2ZTtcIixcIuKqllwiOlwiJmVxc2xhbnRndHI7XCIsXCLiqphcIjpcIiZlZ3Nkb3Q7XCIsXCLiqplcIjpcIiZlbDtcIixcIuKPp1wiOlwiJmVsaW50ZXJzO1wiLFwi4oSTXCI6XCImZWxsO1wiLFwi4qqVXCI6XCImZXFzbGFudGxlc3M7XCIsXCLiqpdcIjpcIiZlbHNkb3Q7XCIsXCLEk1wiOlwiJmVtYWNyO1wiLFwi4oiFXCI6XCImdmFybm90aGluZztcIixcIuKAhFwiOlwiJmVtc3AxMztcIixcIuKAhVwiOlwiJmVtc3AxNDtcIixcIuKAg1wiOlwiJmVtc3A7XCIsXCLFi1wiOlwiJmVuZztcIixcIuKAglwiOlwiJmVuc3A7XCIsXCLEmVwiOlwiJmVvZ29uO1wiLFwi8J2VllwiOlwiJmVvcGY7XCIsXCLii5VcIjpcIiZlcGFyO1wiLFwi4qejXCI6XCImZXBhcnNsO1wiLFwi4qmxXCI6XCImZXBsdXM7XCIsXCLOtVwiOlwiJmVwc2lsb247XCIsXCLPtVwiOlwiJnZhcmVwc2lsb247XCIsXCI9XCI6XCImZXF1YWxzO1wiLFwi4omfXCI6XCImcXVlc3RlcTtcIixcIuKpuFwiOlwiJmVxdWl2REQ7XCIsXCLip6VcIjpcIiZlcXZwYXJzbDtcIixcIuKJk1wiOlwiJnJpc2luZ2RvdHNlcTtcIixcIuKlsVwiOlwiJmVyYXJyO1wiLFwi4oSvXCI6XCImZXNjcjtcIixcIs63XCI6XCImZXRhO1wiLFwiw7BcIjpcIiZldGg7XCIsXCLDq1wiOlwiJmV1bWw7XCIsXCLigqxcIjpcIiZldXJvO1wiLFwiIVwiOlwiJmV4Y2w7XCIsXCLRhFwiOlwiJmZjeTtcIixcIuKZgFwiOlwiJmZlbWFsZTtcIixcIu+sg1wiOlwiJmZmaWxpZztcIixcIu+sgFwiOlwiJmZmbGlnO1wiLFwi76yEXCI6XCImZmZsbGlnO1wiLFwi8J2Uo1wiOlwiJmZmcjtcIixcIu+sgVwiOlwiJmZpbGlnO1wiLGZqOlwiJmZqbGlnO1wiLFwi4pmtXCI6XCImZmxhdDtcIixcIu+sglwiOlwiJmZsbGlnO1wiLFwi4paxXCI6XCImZmx0bnM7XCIsXCLGklwiOlwiJmZub2Y7XCIsXCLwnZWXXCI6XCImZm9wZjtcIixcIuKLlFwiOlwiJnBpdGNoZm9yaztcIixcIuKrmVwiOlwiJmZvcmt2O1wiLFwi4qiNXCI6XCImZnBhcnRpbnQ7XCIsXCLCvVwiOlwiJmhhbGY7XCIsXCLihZNcIjpcIiZmcmFjMTM7XCIsXCLCvFwiOlwiJmZyYWMxNDtcIixcIuKFlVwiOlwiJmZyYWMxNTtcIixcIuKFmVwiOlwiJmZyYWMxNjtcIixcIuKFm1wiOlwiJmZyYWMxODtcIixcIuKFlFwiOlwiJmZyYWMyMztcIixcIuKFllwiOlwiJmZyYWMyNTtcIixcIsK+XCI6XCImZnJhYzM0O1wiLFwi4oWXXCI6XCImZnJhYzM1O1wiLFwi4oWcXCI6XCImZnJhYzM4O1wiLFwi4oWYXCI6XCImZnJhYzQ1O1wiLFwi4oWaXCI6XCImZnJhYzU2O1wiLFwi4oWdXCI6XCImZnJhYzU4O1wiLFwi4oWeXCI6XCImZnJhYzc4O1wiLFwi4oGEXCI6XCImZnJhc2w7XCIsXCLijKJcIjpcIiZzZnJvd247XCIsXCLwnZK7XCI6XCImZnNjcjtcIixcIuKqjFwiOlwiJmd0cmVxcWxlc3M7XCIsXCLHtVwiOlwiJmdhY3V0ZTtcIixcIs6zXCI6XCImZ2FtbWE7XCIsXCLiqoZcIjpcIiZndHJhcHByb3g7XCIsXCLEn1wiOlwiJmdicmV2ZTtcIixcIsSdXCI6XCImZ2NpcmM7XCIsXCLQs1wiOlwiJmdjeTtcIixcIsShXCI6XCImZ2RvdDtcIixcIuKqqVwiOlwiJmdlc2NjO1wiLFwi4qqAXCI6XCImZ2VzZG90O1wiLFwi4qqCXCI6XCImZ2VzZG90bztcIixcIuKqhFwiOlwiJmdlc2RvdG9sO1wiLFwi4oub77iAXCI6XCImZ2VzbDtcIixcIuKqlFwiOlwiJmdlc2xlcztcIixcIvCdlKRcIjpcIiZnZnI7XCIsXCLihLdcIjpcIiZnaW1lbDtcIixcItGTXCI6XCImZ2pjeTtcIixcIuKqklwiOlwiJmdsRTtcIixcIuKqpVwiOlwiJmdsYTtcIixcIuKqpFwiOlwiJmdsajtcIixcIuKJqVwiOlwiJmduZXFxO1wiLFwi4qqKXCI6XCImZ25hcHByb3g7XCIsXCLiqohcIjpcIiZnbmVxO1wiLFwi4ounXCI6XCImZ25zaW07XCIsXCLwnZWYXCI6XCImZ29wZjtcIixcIuKEilwiOlwiJmdzY3I7XCIsXCLiqo5cIjpcIiZnc2ltZTtcIixcIuKqkFwiOlwiJmdzaW1sO1wiLFwi4qqnXCI6XCImZ3RjYztcIixcIuKpulwiOlwiJmd0Y2lyO1wiLFwi4ouXXCI6XCImZ3RyZG90O1wiLFwi4qaVXCI6XCImZ3RsUGFyO1wiLFwi4qm8XCI6XCImZ3RxdWVzdDtcIixcIuKluFwiOlwiJmd0cmFycjtcIixcIuKJqe+4gFwiOlwiJmd2bkU7XCIsXCLRilwiOlwiJmhhcmRjeTtcIixcIuKliFwiOlwiJmhhcnJjaXI7XCIsXCLihq1cIjpcIiZsZWZ0cmlnaHRzcXVpZ2Fycm93O1wiLFwi4oSPXCI6XCImcGxhbmt2O1wiLFwixKVcIjpcIiZoY2lyYztcIixcIuKZpVwiOlwiJmhlYXJ0c3VpdDtcIixcIuKAplwiOlwiJm1sZHI7XCIsXCLiirlcIjpcIiZoZXJjb247XCIsXCLwnZSlXCI6XCImaGZyO1wiLFwi4qSlXCI6XCImc2VhcmhrO1wiLFwi4qSmXCI6XCImc3dhcmhrO1wiLFwi4oe/XCI6XCImaG9hcnI7XCIsXCLiiLtcIjpcIiZob210aHQ7XCIsXCLihqlcIjpcIiZsYXJyaGs7XCIsXCLihqpcIjpcIiZyYXJyaGs7XCIsXCLwnZWZXCI6XCImaG9wZjtcIixcIuKAlVwiOlwiJmhvcmJhcjtcIixcIvCdkr1cIjpcIiZoc2NyO1wiLFwixKdcIjpcIiZoc3Ryb2s7XCIsXCLigYNcIjpcIiZoeWJ1bGw7XCIsXCLDrVwiOlwiJmlhY3V0ZTtcIixcIsOuXCI6XCImaWNpcmM7XCIsXCLQuFwiOlwiJmljeTtcIixcItC1XCI6XCImaWVjeTtcIixcIsKhXCI6XCImaWV4Y2w7XCIsXCLwnZSmXCI6XCImaWZyO1wiLFwiw6xcIjpcIiZpZ3JhdmU7XCIsXCLiqIxcIjpcIiZxaW50O1wiLFwi4oitXCI6XCImdGludDtcIixcIuKnnFwiOlwiJmlpbmZpbjtcIixcIuKEqVwiOlwiJmlpb3RhO1wiLFwixLNcIjpcIiZpamxpZztcIixcIsSrXCI6XCImaW1hY3I7XCIsXCLEsVwiOlwiJmlub2RvdDtcIixcIuKKt1wiOlwiJmltb2Y7XCIsXCLGtVwiOlwiJmltcGVkO1wiLFwi4oSFXCI6XCImaW5jYXJlO1wiLFwi4oieXCI6XCImaW5maW47XCIsXCLip51cIjpcIiZpbmZpbnRpZTtcIixcIuKKulwiOlwiJmludGVyY2FsO1wiLFwi4qiXXCI6XCImaW50bGFyaGs7XCIsXCLiqLxcIjpcIiZpcHJvZDtcIixcItGRXCI6XCImaW9jeTtcIixcIsSvXCI6XCImaW9nb247XCIsXCLwnZWaXCI6XCImaW9wZjtcIixcIs65XCI6XCImaW90YTtcIixcIsK/XCI6XCImaXF1ZXN0O1wiLFwi8J2SvlwiOlwiJmlzY3I7XCIsXCLii7lcIjpcIiZpc2luRTtcIixcIuKLtVwiOlwiJmlzaW5kb3Q7XCIsXCLii7RcIjpcIiZpc2lucztcIixcIuKLs1wiOlwiJmlzaW5zdjtcIixcIsSpXCI6XCImaXRpbGRlO1wiLFwi0ZZcIjpcIiZpdWtjeTtcIixcIsOvXCI6XCImaXVtbDtcIixcIsS1XCI6XCImamNpcmM7XCIsXCLQuVwiOlwiJmpjeTtcIixcIvCdlKdcIjpcIiZqZnI7XCIsXCLIt1wiOlwiJmptYXRoO1wiLFwi8J2Vm1wiOlwiJmpvcGY7XCIsXCLwnZK/XCI6XCImanNjcjtcIixcItGYXCI6XCImanNlcmN5O1wiLFwi0ZRcIjpcIiZqdWtjeTtcIixcIs66XCI6XCIma2FwcGE7XCIsXCLPsFwiOlwiJnZhcmthcHBhO1wiLFwixLdcIjpcIiZrY2VkaWw7XCIsXCLQulwiOlwiJmtjeTtcIixcIvCdlKhcIjpcIiZrZnI7XCIsXCLEuFwiOlwiJmtncmVlbjtcIixcItGFXCI6XCIma2hjeTtcIixcItGcXCI6XCIma2pjeTtcIixcIvCdlZxcIjpcIiZrb3BmO1wiLFwi8J2TgFwiOlwiJmtzY3I7XCIsXCLipJtcIjpcIiZsQXRhaWw7XCIsXCLipI5cIjpcIiZsQmFycjtcIixcIuKqi1wiOlwiJmxlc3NlcXFndHI7XCIsXCLipaJcIjpcIiZsSGFyO1wiLFwixLpcIjpcIiZsYWN1dGU7XCIsXCLiprRcIjpcIiZsYWVtcHR5djtcIixcIs67XCI6XCImbGFtYmRhO1wiLFwi4qaRXCI6XCImbGFuZ2Q7XCIsXCLiqoVcIjpcIiZsZXNzYXBwcm94O1wiLFwiwqtcIjpcIiZsYXF1bztcIixcIuKkn1wiOlwiJmxhcnJiZnM7XCIsXCLipJ1cIjpcIiZsYXJyZnM7XCIsXCLihqtcIjpcIiZsb29wYXJyb3dsZWZ0O1wiLFwi4qS5XCI6XCImbGFycnBsO1wiLFwi4qWzXCI6XCImbGFycnNpbTtcIixcIuKGolwiOlwiJmxlZnRhcnJvd3RhaWw7XCIsXCLiqqtcIjpcIiZsYXQ7XCIsXCLipJlcIjpcIiZsYXRhaWw7XCIsXCLiqq1cIjpcIiZsYXRlO1wiLFwi4qqt77iAXCI6XCImbGF0ZXM7XCIsXCLipIxcIjpcIiZsYmFycjtcIixcIuKdslwiOlwiJmxiYnJrO1wiLFwie1wiOlwiJmxjdWI7XCIsXCJbXCI6XCImbHNxYjtcIixcIuKmi1wiOlwiJmxicmtlO1wiLFwi4qaPXCI6XCImbGJya3NsZDtcIixcIuKmjVwiOlwiJmxicmtzbHU7XCIsXCLEvlwiOlwiJmxjYXJvbjtcIixcIsS8XCI6XCImbGNlZGlsO1wiLFwi0LtcIjpcIiZsY3k7XCIsXCLipLZcIjpcIiZsZGNhO1wiLFwi4qWnXCI6XCImbGRyZGhhcjtcIixcIuKli1wiOlwiJmxkcnVzaGFyO1wiLFwi4oayXCI6XCImbGRzaDtcIixcIuKJpFwiOlwiJmxlcTtcIixcIuKHh1wiOlwiJmxsYXJyO1wiLFwi4ouLXCI6XCImbHRocmVlO1wiLFwi4qqoXCI6XCImbGVzY2M7XCIsXCLiqb9cIjpcIiZsZXNkb3Q7XCIsXCLiqoFcIjpcIiZsZXNkb3RvO1wiLFwi4qqDXCI6XCImbGVzZG90b3I7XCIsXCLii5rvuIBcIjpcIiZsZXNnO1wiLFwi4qqTXCI6XCImbGVzZ2VzO1wiLFwi4ouWXCI6XCImbHRkb3Q7XCIsXCLipbxcIjpcIiZsZmlzaHQ7XCIsXCLwnZSpXCI6XCImbGZyO1wiLFwi4qqRXCI6XCImbGdFO1wiLFwi4qWqXCI6XCImbGhhcnVsO1wiLFwi4paEXCI6XCImbGhibGs7XCIsXCLRmVwiOlwiJmxqY3k7XCIsXCLipatcIjpcIiZsbGhhcmQ7XCIsXCLil7pcIjpcIiZsbHRyaTtcIixcIsWAXCI6XCImbG1pZG90O1wiLFwi4o6wXCI6XCImbG1vdXN0YWNoZTtcIixcIuKJqFwiOlwiJmxuZXFxO1wiLFwi4qqJXCI6XCImbG5hcHByb3g7XCIsXCLiqodcIjpcIiZsbmVxO1wiLFwi4oumXCI6XCImbG5zaW07XCIsXCLin6xcIjpcIiZsb2FuZztcIixcIuKHvVwiOlwiJmxvYXJyO1wiLFwi4p+8XCI6XCImeG1hcDtcIixcIuKGrFwiOlwiJnJhcnJscDtcIixcIuKmhVwiOlwiJmxvcGFyO1wiLFwi8J2VnVwiOlwiJmxvcGY7XCIsXCLiqK1cIjpcIiZsb3BsdXM7XCIsXCLiqLRcIjpcIiZsb3RpbWVzO1wiLFwi4oiXXCI6XCImbG93YXN0O1wiLFwi4peKXCI6XCImbG96ZW5nZTtcIixcIihcIjpcIiZscGFyO1wiLFwi4qaTXCI6XCImbHBhcmx0O1wiLFwi4qWtXCI6XCImbHJoYXJkO1wiLFwi4oCOXCI6XCImbHJtO1wiLFwi4oq/XCI6XCImbHJ0cmk7XCIsXCLigLlcIjpcIiZsc2FxdW87XCIsXCLwnZOBXCI6XCImbHNjcjtcIixcIuKqjVwiOlwiJmxzaW1lO1wiLFwi4qqPXCI6XCImbHNpbWc7XCIsXCLigJpcIjpcIiZzYnF1bztcIixcIsWCXCI6XCImbHN0cm9rO1wiLFwi4qqmXCI6XCImbHRjYztcIixcIuKpuVwiOlwiJmx0Y2lyO1wiLFwi4ouJXCI6XCImbHRpbWVzO1wiLFwi4qW2XCI6XCImbHRsYXJyO1wiLFwi4qm7XCI6XCImbHRxdWVzdDtcIixcIuKmllwiOlwiJmx0clBhcjtcIixcIuKXg1wiOlwiJnRyaWFuZ2xlbGVmdDtcIixcIuKlilwiOlwiJmx1cmRzaGFyO1wiLFwi4qWmXCI6XCImbHVydWhhcjtcIixcIuKJqO+4gFwiOlwiJmx2bkU7XCIsXCLiiLpcIjpcIiZtRERvdDtcIixcIsKvXCI6XCImc3RybnM7XCIsXCLimYJcIjpcIiZtYWxlO1wiLFwi4pygXCI6XCImbWFsdGVzZTtcIixcIuKWrlwiOlwiJm1hcmtlcjtcIixcIuKoqVwiOlwiJm1jb21tYTtcIixcItC8XCI6XCImbWN5O1wiLFwi4oCUXCI6XCImbWRhc2g7XCIsXCLwnZSqXCI6XCImbWZyO1wiLFwi4oSnXCI6XCImbWhvO1wiLFwiwrVcIjpcIiZtaWNybztcIixcIuKrsFwiOlwiJm1pZGNpcjtcIixcIuKIklwiOlwiJm1pbnVzO1wiLFwi4qiqXCI6XCImbWludXNkdTtcIixcIuKrm1wiOlwiJm1sY3A7XCIsXCLiiqdcIjpcIiZtb2RlbHM7XCIsXCLwnZWeXCI6XCImbW9wZjtcIixcIvCdk4JcIjpcIiZtc2NyO1wiLFwizrxcIjpcIiZtdTtcIixcIuKKuFwiOlwiJm11bWFwO1wiLFwi4ouZzLhcIjpcIiZuR2c7XCIsXCLiiavig5JcIjpcIiZuR3Q7XCIsXCLih41cIjpcIiZubEFycjtcIixcIuKHjlwiOlwiJm5oQXJyO1wiLFwi4ouYzLhcIjpcIiZuTGw7XCIsXCLiiarig5JcIjpcIiZuTHQ7XCIsXCLih49cIjpcIiZuckFycjtcIixcIuKKr1wiOlwiJm5WRGFzaDtcIixcIuKKrlwiOlwiJm5WZGFzaDtcIixcIsWEXCI6XCImbmFjdXRlO1wiLFwi4oig4oOSXCI6XCImbmFuZztcIixcIuKpsMy4XCI6XCImbmFwRTtcIixcIuKJi8y4XCI6XCImbmFwaWQ7XCIsXCLFiVwiOlwiJm5hcG9zO1wiLFwi4pmuXCI6XCImbmF0dXJhbDtcIixcIuKpg1wiOlwiJm5jYXA7XCIsXCLFiFwiOlwiJm5jYXJvbjtcIixcIsWGXCI6XCImbmNlZGlsO1wiLFwi4qmtzLhcIjpcIiZuY29uZ2RvdDtcIixcIuKpglwiOlwiJm5jdXA7XCIsXCLQvVwiOlwiJm5jeTtcIixcIuKAk1wiOlwiJm5kYXNoO1wiLFwi4oeXXCI6XCImbmVBcnI7XCIsXCLipKRcIjpcIiZuZWFyaGs7XCIsXCLiiZDMuFwiOlwiJm5lZG90O1wiLFwi4qSoXCI6XCImdG9lYTtcIixcIvCdlKtcIjpcIiZuZnI7XCIsXCLihq5cIjpcIiZubGVmdHJpZ2h0YXJyb3c7XCIsXCLiq7JcIjpcIiZuaHBhcjtcIixcIuKLvFwiOlwiJm5pcztcIixcIuKLulwiOlwiJm5pc2Q7XCIsXCLRmlwiOlwiJm5qY3k7XCIsXCLiiabMuFwiOlwiJm5sZXFxO1wiLFwi4oaaXCI6XCImbmxlZnRhcnJvdztcIixcIuKApVwiOlwiJm5sZHI7XCIsXCLwnZWfXCI6XCImbm9wZjtcIixcIsKsXCI6XCImbm90O1wiLFwi4ou5zLhcIjpcIiZub3RpbkU7XCIsXCLii7XMuFwiOlwiJm5vdGluZG90O1wiLFwi4ou3XCI6XCImbm90aW52YjtcIixcIuKLtlwiOlwiJm5vdGludmM7XCIsXCLii75cIjpcIiZub3RuaXZiO1wiLFwi4ou9XCI6XCImbm90bml2YztcIixcIuKrveKDpVwiOlwiJm5wYXJzbDtcIixcIuKIgsy4XCI6XCImbnBhcnQ7XCIsXCLiqJRcIjpcIiZucG9saW50O1wiLFwi4oabXCI6XCImbnJpZ2h0YXJyb3c7XCIsXCLipLPMuFwiOlwiJm5yYXJyYztcIixcIuKGncy4XCI6XCImbnJhcnJ3O1wiLFwi8J2Tg1wiOlwiJm5zY3I7XCIsXCLiioRcIjpcIiZuc3ViO1wiLFwi4quFzLhcIjpcIiZuc3Vic2V0ZXFxO1wiLFwi4oqFXCI6XCImbnN1cDtcIixcIuKrhsy4XCI6XCImbnN1cHNldGVxcTtcIixcIsOxXCI6XCImbnRpbGRlO1wiLFwizr1cIjpcIiZudTtcIixcIiNcIjpcIiZudW07XCIsXCLihJZcIjpcIiZudW1lcm87XCIsXCLigIdcIjpcIiZudW1zcDtcIixcIuKKrVwiOlwiJm52RGFzaDtcIixcIuKkhFwiOlwiJm52SGFycjtcIixcIuKJjeKDklwiOlwiJm52YXA7XCIsXCLiiqxcIjpcIiZudmRhc2g7XCIsXCLiiaXig5JcIjpcIiZudmdlO1wiLFwiPuKDklwiOlwiJm52Z3Q7XCIsXCLip55cIjpcIiZudmluZmluO1wiLFwi4qSCXCI6XCImbnZsQXJyO1wiLFwi4omk4oOSXCI6XCImbnZsZTtcIixcIjzig5JcIjpcIiZudmx0O1wiLFwi4oq04oOSXCI6XCImbnZsdHJpZTtcIixcIuKkg1wiOlwiJm52ckFycjtcIixcIuKKteKDklwiOlwiJm52cnRyaWU7XCIsXCLiiLzig5JcIjpcIiZudnNpbTtcIixcIuKHllwiOlwiJm53QXJyO1wiLFwi4qSjXCI6XCImbndhcmhrO1wiLFwi4qSnXCI6XCImbnduZWFyO1wiLFwiw7NcIjpcIiZvYWN1dGU7XCIsXCLDtFwiOlwiJm9jaXJjO1wiLFwi0L5cIjpcIiZvY3k7XCIsXCLFkVwiOlwiJm9kYmxhYztcIixcIuKouFwiOlwiJm9kaXY7XCIsXCLiprxcIjpcIiZvZHNvbGQ7XCIsXCLFk1wiOlwiJm9lbGlnO1wiLFwi4qa/XCI6XCImb2ZjaXI7XCIsXCLwnZSsXCI6XCImb2ZyO1wiLFwiy5tcIjpcIiZvZ29uO1wiLFwiw7JcIjpcIiZvZ3JhdmU7XCIsXCLip4FcIjpcIiZvZ3Q7XCIsXCLiprVcIjpcIiZvaGJhcjtcIixcIuKmvlwiOlwiJm9sY2lyO1wiLFwi4qa7XCI6XCImb2xjcm9zcztcIixcIuKngFwiOlwiJm9sdDtcIixcIsWNXCI6XCImb21hY3I7XCIsXCLPiVwiOlwiJm9tZWdhO1wiLFwizr9cIjpcIiZvbWljcm9uO1wiLFwi4qa2XCI6XCImb21pZDtcIixcIvCdlaBcIjpcIiZvb3BmO1wiLFwi4qa3XCI6XCImb3BhcjtcIixcIuKmuVwiOlwiJm9wZXJwO1wiLFwi4oioXCI6XCImdmVlO1wiLFwi4qmdXCI6XCImb3JkO1wiLFwi4oS0XCI6XCImb3NjcjtcIixcIsKqXCI6XCImb3JkZjtcIixcIsK6XCI6XCImb3JkbTtcIixcIuKKtlwiOlwiJm9yaWdvZjtcIixcIuKpllwiOlwiJm9yb3I7XCIsXCLiqZdcIjpcIiZvcnNsb3BlO1wiLFwi4qmbXCI6XCImb3J2O1wiLFwiw7hcIjpcIiZvc2xhc2g7XCIsXCLiiphcIjpcIiZvc29sO1wiLFwiw7VcIjpcIiZvdGlsZGU7XCIsXCLiqLZcIjpcIiZvdGltZXNhcztcIixcIsO2XCI6XCImb3VtbDtcIixcIuKMvVwiOlwiJm92YmFyO1wiLFwiwrZcIjpcIiZwYXJhO1wiLFwi4quzXCI6XCImcGFyc2ltO1wiLFwi4qu9XCI6XCImcGFyc2w7XCIsXCLQv1wiOlwiJnBjeTtcIixcIiVcIjpcIiZwZXJjbnQ7XCIsXCIuXCI6XCImcGVyaW9kO1wiLFwi4oCwXCI6XCImcGVybWlsO1wiLFwi4oCxXCI6XCImcGVydGVuaztcIixcIvCdlK1cIjpcIiZwZnI7XCIsXCLPhlwiOlwiJnBoaTtcIixcIs+VXCI6XCImdmFycGhpO1wiLFwi4piOXCI6XCImcGhvbmU7XCIsXCLPgFwiOlwiJnBpO1wiLFwiz5ZcIjpcIiZ2YXJwaTtcIixcIuKEjlwiOlwiJnBsYW5ja2g7XCIsXCIrXCI6XCImcGx1cztcIixcIuKoo1wiOlwiJnBsdXNhY2lyO1wiLFwi4qiiXCI6XCImcGx1c2NpcjtcIixcIuKopVwiOlwiJnBsdXNkdTtcIixcIuKpslwiOlwiJnBsdXNlO1wiLFwi4qimXCI6XCImcGx1c3NpbTtcIixcIuKop1wiOlwiJnBsdXN0d287XCIsXCLiqJVcIjpcIiZwb2ludGludDtcIixcIvCdlaFcIjpcIiZwb3BmO1wiLFwiwqNcIjpcIiZwb3VuZDtcIixcIuKqs1wiOlwiJnByRTtcIixcIuKqt1wiOlwiJnByZWNhcHByb3g7XCIsXCLiqrlcIjpcIiZwcm5hcDtcIixcIuKqtVwiOlwiJnBybkU7XCIsXCLii6hcIjpcIiZwcm5zaW07XCIsXCLigLJcIjpcIiZwcmltZTtcIixcIuKMrlwiOlwiJnByb2ZhbGFyO1wiLFwi4oySXCI6XCImcHJvZmxpbmU7XCIsXCLijJNcIjpcIiZwcm9mc3VyZjtcIixcIuKKsFwiOlwiJnBydXJlbDtcIixcIvCdk4VcIjpcIiZwc2NyO1wiLFwiz4hcIjpcIiZwc2k7XCIsXCLigIhcIjpcIiZwdW5jc3A7XCIsXCLwnZSuXCI6XCImcWZyO1wiLFwi8J2VolwiOlwiJnFvcGY7XCIsXCLigZdcIjpcIiZxcHJpbWU7XCIsXCLwnZOGXCI6XCImcXNjcjtcIixcIuKollwiOlwiJnF1YXRpbnQ7XCIsXCI/XCI6XCImcXVlc3Q7XCIsXCLipJxcIjpcIiZyQXRhaWw7XCIsXCLipaRcIjpcIiZySGFyO1wiLFwi4oi9zLFcIjpcIiZyYWNlO1wiLFwixZVcIjpcIiZyYWN1dGU7XCIsXCLiprNcIjpcIiZyYWVtcHR5djtcIixcIuKmklwiOlwiJnJhbmdkO1wiLFwi4qalXCI6XCImcmFuZ2U7XCIsXCLCu1wiOlwiJnJhcXVvO1wiLFwi4qW1XCI6XCImcmFycmFwO1wiLFwi4qSgXCI6XCImcmFycmJmcztcIixcIuKks1wiOlwiJnJhcnJjO1wiLFwi4qSeXCI6XCImcmFycmZzO1wiLFwi4qWFXCI6XCImcmFycnBsO1wiLFwi4qW0XCI6XCImcmFycnNpbTtcIixcIuKGo1wiOlwiJnJpZ2h0YXJyb3d0YWlsO1wiLFwi4oadXCI6XCImcmlnaHRzcXVpZ2Fycm93O1wiLFwi4qSaXCI6XCImcmF0YWlsO1wiLFwi4oi2XCI6XCImcmF0aW87XCIsXCLinbNcIjpcIiZyYmJyaztcIixcIn1cIjpcIiZyY3ViO1wiLFwiXVwiOlwiJnJzcWI7XCIsXCLipoxcIjpcIiZyYnJrZTtcIixcIuKmjlwiOlwiJnJicmtzbGQ7XCIsXCLippBcIjpcIiZyYnJrc2x1O1wiLFwixZlcIjpcIiZyY2Fyb247XCIsXCLFl1wiOlwiJnJjZWRpbDtcIixcItGAXCI6XCImcmN5O1wiLFwi4qS3XCI6XCImcmRjYTtcIixcIuKlqVwiOlwiJnJkbGRoYXI7XCIsXCLihrNcIjpcIiZyZHNoO1wiLFwi4patXCI6XCImcmVjdDtcIixcIuKlvVwiOlwiJnJmaXNodDtcIixcIvCdlK9cIjpcIiZyZnI7XCIsXCLipaxcIjpcIiZyaGFydWw7XCIsXCLPgVwiOlwiJnJobztcIixcIs+xXCI6XCImdmFycmhvO1wiLFwi4oeJXCI6XCImcnJhcnI7XCIsXCLii4xcIjpcIiZydGhyZWU7XCIsXCLLmlwiOlwiJnJpbmc7XCIsXCLigI9cIjpcIiZybG07XCIsXCLijrFcIjpcIiZybW91c3RhY2hlO1wiLFwi4quuXCI6XCImcm5taWQ7XCIsXCLin61cIjpcIiZyb2FuZztcIixcIuKHvlwiOlwiJnJvYXJyO1wiLFwi4qaGXCI6XCImcm9wYXI7XCIsXCLwnZWjXCI6XCImcm9wZjtcIixcIuKorlwiOlwiJnJvcGx1cztcIixcIuKotVwiOlwiJnJvdGltZXM7XCIsXCIpXCI6XCImcnBhcjtcIixcIuKmlFwiOlwiJnJwYXJndDtcIixcIuKoklwiOlwiJnJwcG9saW50O1wiLFwi4oC6XCI6XCImcnNhcXVvO1wiLFwi8J2Th1wiOlwiJnJzY3I7XCIsXCLii4pcIjpcIiZydGltZXM7XCIsXCLilrlcIjpcIiZ0cmlhbmdsZXJpZ2h0O1wiLFwi4qeOXCI6XCImcnRyaWx0cmk7XCIsXCLipahcIjpcIiZydWx1aGFyO1wiLFwi4oSeXCI6XCImcng7XCIsXCLFm1wiOlwiJnNhY3V0ZTtcIixcIuKqtFwiOlwiJnNjRTtcIixcIuKquFwiOlwiJnN1Y2NhcHByb3g7XCIsXCLFoVwiOlwiJnNjYXJvbjtcIixcIsWfXCI6XCImc2NlZGlsO1wiLFwixZ1cIjpcIiZzY2lyYztcIixcIuKqtlwiOlwiJnN1Y2NuZXFxO1wiLFwi4qq6XCI6XCImc3VjY25hcHByb3g7XCIsXCLii6lcIjpcIiZzdWNjbnNpbTtcIixcIuKok1wiOlwiJnNjcG9saW50O1wiLFwi0YFcIjpcIiZzY3k7XCIsXCLii4VcIjpcIiZzZG90O1wiLFwi4qmmXCI6XCImc2RvdGU7XCIsXCLih5hcIjpcIiZzZUFycjtcIixcIsKnXCI6XCImc2VjdDtcIixcIjtcIjpcIiZzZW1pO1wiLFwi4qSpXCI6XCImdG9zYTtcIixcIuKctlwiOlwiJnNleHQ7XCIsXCLwnZSwXCI6XCImc2ZyO1wiLFwi4pmvXCI6XCImc2hhcnA7XCIsXCLRiVwiOlwiJnNoY2hjeTtcIixcItGIXCI6XCImc2hjeTtcIixcIsKtXCI6XCImc2h5O1wiLFwiz4NcIjpcIiZzaWdtYTtcIixcIs+CXCI6XCImdmFyc2lnbWE7XCIsXCLiqapcIjpcIiZzaW1kb3Q7XCIsXCLiqp5cIjpcIiZzaW1nO1wiLFwi4qqgXCI6XCImc2ltZ0U7XCIsXCLiqp1cIjpcIiZzaW1sO1wiLFwi4qqfXCI6XCImc2ltbEU7XCIsXCLiiYZcIjpcIiZzaW1uZTtcIixcIuKopFwiOlwiJnNpbXBsdXM7XCIsXCLipbJcIjpcIiZzaW1yYXJyO1wiLFwi4qizXCI6XCImc21hc2hwO1wiLFwi4qekXCI6XCImc21lcGFyc2w7XCIsXCLijKNcIjpcIiZzc21pbGU7XCIsXCLiqqpcIjpcIiZzbXQ7XCIsXCLiqqxcIjpcIiZzbXRlO1wiLFwi4qqs77iAXCI6XCImc210ZXM7XCIsXCLRjFwiOlwiJnNvZnRjeTtcIixcIi9cIjpcIiZzb2w7XCIsXCLip4RcIjpcIiZzb2xiO1wiLFwi4oy/XCI6XCImc29sYmFyO1wiLFwi8J2VpFwiOlwiJnNvcGY7XCIsXCLimaBcIjpcIiZzcGFkZXN1aXQ7XCIsXCLiipPvuIBcIjpcIiZzcWNhcHM7XCIsXCLiipTvuIBcIjpcIiZzcWN1cHM7XCIsXCLwnZOIXCI6XCImc3NjcjtcIixcIuKYhlwiOlwiJnN0YXI7XCIsXCLiioJcIjpcIiZzdWJzZXQ7XCIsXCLiq4VcIjpcIiZzdWJzZXRlcXE7XCIsXCLiqr1cIjpcIiZzdWJkb3Q7XCIsXCLiq4NcIjpcIiZzdWJlZG90O1wiLFwi4quBXCI6XCImc3VibXVsdDtcIixcIuKri1wiOlwiJnN1YnNldG5lcXE7XCIsXCLiiopcIjpcIiZzdWJzZXRuZXE7XCIsXCLiqr9cIjpcIiZzdWJwbHVzO1wiLFwi4qW5XCI6XCImc3VicmFycjtcIixcIuKrh1wiOlwiJnN1YnNpbTtcIixcIuKrlVwiOlwiJnN1YnN1YjtcIixcIuKrk1wiOlwiJnN1YnN1cDtcIixcIuKZqlwiOlwiJnN1bmc7XCIsXCLCuVwiOlwiJnN1cDE7XCIsXCLCslwiOlwiJnN1cDI7XCIsXCLCs1wiOlwiJnN1cDM7XCIsXCLiq4ZcIjpcIiZzdXBzZXRlcXE7XCIsXCLiqr5cIjpcIiZzdXBkb3Q7XCIsXCLiq5hcIjpcIiZzdXBkc3ViO1wiLFwi4quEXCI6XCImc3VwZWRvdDtcIixcIuKfiVwiOlwiJnN1cGhzb2w7XCIsXCLiq5dcIjpcIiZzdXBoc3ViO1wiLFwi4qW7XCI6XCImc3VwbGFycjtcIixcIuKrglwiOlwiJnN1cG11bHQ7XCIsXCLiq4xcIjpcIiZzdXBzZXRuZXFxO1wiLFwi4oqLXCI6XCImc3Vwc2V0bmVxO1wiLFwi4quAXCI6XCImc3VwcGx1cztcIixcIuKriFwiOlwiJnN1cHNpbTtcIixcIuKrlFwiOlwiJnN1cHN1YjtcIixcIuKrllwiOlwiJnN1cHN1cDtcIixcIuKHmVwiOlwiJnN3QXJyO1wiLFwi4qSqXCI6XCImc3dud2FyO1wiLFwiw59cIjpcIiZzemxpZztcIixcIuKMllwiOlwiJnRhcmdldDtcIixcIs+EXCI6XCImdGF1O1wiLFwixaVcIjpcIiZ0Y2Fyb247XCIsXCLFo1wiOlwiJnRjZWRpbDtcIixcItGCXCI6XCImdGN5O1wiLFwi4oyVXCI6XCImdGVscmVjO1wiLFwi8J2UsVwiOlwiJnRmcjtcIixcIs64XCI6XCImdGhldGE7XCIsXCLPkVwiOlwiJnZhcnRoZXRhO1wiLFwiw75cIjpcIiZ0aG9ybjtcIixcIsOXXCI6XCImdGltZXM7XCIsXCLiqLFcIjpcIiZ0aW1lc2JhcjtcIixcIuKosFwiOlwiJnRpbWVzZDtcIixcIuKMtlwiOlwiJnRvcGJvdDtcIixcIuKrsVwiOlwiJnRvcGNpcjtcIixcIvCdlaVcIjpcIiZ0b3BmO1wiLFwi4quaXCI6XCImdG9wZm9yaztcIixcIuKAtFwiOlwiJnRwcmltZTtcIixcIuKWtVwiOlwiJnV0cmk7XCIsXCLiiZxcIjpcIiZ0cmllO1wiLFwi4pesXCI6XCImdHJpZG90O1wiLFwi4qi6XCI6XCImdHJpbWludXM7XCIsXCLiqLlcIjpcIiZ0cmlwbHVzO1wiLFwi4qeNXCI6XCImdHJpc2I7XCIsXCLiqLtcIjpcIiZ0cml0aW1lO1wiLFwi4o+iXCI6XCImdHJwZXppdW07XCIsXCLwnZOJXCI6XCImdHNjcjtcIixcItGGXCI6XCImdHNjeTtcIixcItGbXCI6XCImdHNoY3k7XCIsXCLFp1wiOlwiJnRzdHJvaztcIixcIuKlo1wiOlwiJnVIYXI7XCIsXCLDulwiOlwiJnVhY3V0ZTtcIixcItGeXCI6XCImdWJyY3k7XCIsXCLFrVwiOlwiJnVicmV2ZTtcIixcIsO7XCI6XCImdWNpcmM7XCIsXCLRg1wiOlwiJnVjeTtcIixcIsWxXCI6XCImdWRibGFjO1wiLFwi4qW+XCI6XCImdWZpc2h0O1wiLFwi8J2UslwiOlwiJnVmcjtcIixcIsO5XCI6XCImdWdyYXZlO1wiLFwi4paAXCI6XCImdWhibGs7XCIsXCLijJxcIjpcIiZ1bGNvcm5lcjtcIixcIuKMj1wiOlwiJnVsY3JvcDtcIixcIuKXuFwiOlwiJnVsdHJpO1wiLFwixatcIjpcIiZ1bWFjcjtcIixcIsWzXCI6XCImdW9nb247XCIsXCLwnZWmXCI6XCImdW9wZjtcIixcIs+FXCI6XCImdXBzaWxvbjtcIixcIuKHiFwiOlwiJnV1YXJyO1wiLFwi4oydXCI6XCImdXJjb3JuZXI7XCIsXCLijI5cIjpcIiZ1cmNyb3A7XCIsXCLFr1wiOlwiJnVyaW5nO1wiLFwi4pe5XCI6XCImdXJ0cmk7XCIsXCLwnZOKXCI6XCImdXNjcjtcIixcIuKLsFwiOlwiJnV0ZG90O1wiLFwixalcIjpcIiZ1dGlsZGU7XCIsXCLDvFwiOlwiJnV1bWw7XCIsXCLipqdcIjpcIiZ1d2FuZ2xlO1wiLFwi4quoXCI6XCImdkJhcjtcIixcIuKrqVwiOlwiJnZCYXJ2O1wiLFwi4qacXCI6XCImdmFuZ3J0O1wiLFwi4oqK77iAXCI6XCImdnN1Ym5lO1wiLFwi4quL77iAXCI6XCImdnN1Ym5FO1wiLFwi4oqL77iAXCI6XCImdnN1cG5lO1wiLFwi4quM77iAXCI6XCImdnN1cG5FO1wiLFwi0LJcIjpcIiZ2Y3k7XCIsXCLiirtcIjpcIiZ2ZWViYXI7XCIsXCLiiZpcIjpcIiZ2ZWVlcTtcIixcIuKLrlwiOlwiJnZlbGxpcDtcIixcIvCdlLNcIjpcIiZ2ZnI7XCIsXCLwnZWnXCI6XCImdm9wZjtcIixcIvCdk4tcIjpcIiZ2c2NyO1wiLFwi4qaaXCI6XCImdnppZ3phZztcIixcIsW1XCI6XCImd2NpcmM7XCIsXCLiqZ9cIjpcIiZ3ZWRiYXI7XCIsXCLiiZlcIjpcIiZ3ZWRnZXE7XCIsXCLihJhcIjpcIiZ3cDtcIixcIvCdlLRcIjpcIiZ3ZnI7XCIsXCLwnZWoXCI6XCImd29wZjtcIixcIvCdk4xcIjpcIiZ3c2NyO1wiLFwi8J2UtVwiOlwiJnhmcjtcIixcIs6+XCI6XCImeGk7XCIsXCLii7tcIjpcIiZ4bmlzO1wiLFwi8J2VqVwiOlwiJnhvcGY7XCIsXCLwnZONXCI6XCImeHNjcjtcIixcIsO9XCI6XCImeWFjdXRlO1wiLFwi0Y9cIjpcIiZ5YWN5O1wiLFwixbdcIjpcIiZ5Y2lyYztcIixcItGLXCI6XCImeWN5O1wiLFwiwqVcIjpcIiZ5ZW47XCIsXCLwnZS2XCI6XCImeWZyO1wiLFwi0ZdcIjpcIiZ5aWN5O1wiLFwi8J2VqlwiOlwiJnlvcGY7XCIsXCLwnZOOXCI6XCImeXNjcjtcIixcItGOXCI6XCImeXVjeTtcIixcIsO/XCI6XCImeXVtbDtcIixcIsW6XCI6XCImemFjdXRlO1wiLFwixb5cIjpcIiZ6Y2Fyb247XCIsXCLQt1wiOlwiJnpjeTtcIixcIsW8XCI6XCImemRvdDtcIixcIs62XCI6XCImemV0YTtcIixcIvCdlLdcIjpcIiZ6ZnI7XCIsXCLQtlwiOlwiJnpoY3k7XCIsXCLih51cIjpcIiZ6aWdyYXJyO1wiLFwi8J2Vq1wiOlwiJnpvcGY7XCIsXCLwnZOPXCI6XCImenNjcjtcIixcIuKAjVwiOlwiJnp3ajtcIixcIuKAjFwiOlwiJnp3bmo7XCJ9fX07IiwiXCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOnRydWV9KTtleHBvcnRzLm51bWVyaWNVbmljb2RlTWFwPXswOjY1NTMzLDEyODo4MzY0LDEzMDo4MjE4LDEzMTo0MDIsMTMyOjgyMjIsMTMzOjgyMzAsMTM0OjgyMjQsMTM1OjgyMjUsMTM2OjcxMCwxMzc6ODI0MCwxMzg6MzUyLDEzOTo4MjQ5LDE0MDozMzgsMTQyOjM4MSwxNDU6ODIxNiwxNDY6ODIxNywxNDc6ODIyMCwxNDg6ODIyMSwxNDk6ODIyNiwxNTA6ODIxMSwxNTE6ODIxMiwxNTI6NzMyLDE1Mzo4NDgyLDE1NDozNTMsMTU1OjgyNTAsMTU2OjMzOSwxNTg6MzgyLDE1OTozNzZ9OyIsIlwidXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTp0cnVlfSk7ZXhwb3J0cy5mcm9tQ29kZVBvaW50PVN0cmluZy5mcm9tQ29kZVBvaW50fHxmdW5jdGlvbihhc3RyYWxDb2RlUG9pbnQpe3JldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKE1hdGguZmxvb3IoKGFzdHJhbENvZGVQb2ludC02NTUzNikvMTAyNCkrNTUyOTYsKGFzdHJhbENvZGVQb2ludC02NTUzNiklMTAyNCs1NjMyMCl9O2V4cG9ydHMuZ2V0Q29kZVBvaW50PVN0cmluZy5wcm90b3R5cGUuY29kZVBvaW50QXQ/ZnVuY3Rpb24oaW5wdXQscG9zaXRpb24pe3JldHVybiBpbnB1dC5jb2RlUG9pbnRBdChwb3NpdGlvbil9OmZ1bmN0aW9uKGlucHV0LHBvc2l0aW9uKXtyZXR1cm4oaW5wdXQuY2hhckNvZGVBdChwb3NpdGlvbiktNTUyOTYpKjEwMjQraW5wdXQuY2hhckNvZGVBdChwb3NpdGlvbisxKS01NjMyMCs2NTUzNn07ZXhwb3J0cy5oaWdoU3Vycm9nYXRlRnJvbT01NTI5NjtleHBvcnRzLmhpZ2hTdXJyb2dhdGVUbz01NjMxOTsiLCIvKiBlc2xpbnQtZGlzYWJsZSAqL1xuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICAgICBCZWdpbiBwcmlzbS1jb3JlLmpzXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbnZhciBfc2VsZiA9IHt9O1xuXG4vKipcbiAqIFByaXNtOiBMaWdodHdlaWdodCwgcm9idXN0LCBlbGVnYW50IHN5bnRheCBoaWdobGlnaHRpbmdcbiAqIE1JVCBsaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwL1xuICogQGF1dGhvciBMZWEgVmVyb3UgaHR0cDovL2xlYS52ZXJvdS5tZVxuICovXG5cbnZhciBQcmlzbSA9IChmdW5jdGlvbiAoKSB7XG4vLyBQcml2YXRlIGhlbHBlciB2YXJzXG4gIHZhciBsYW5nID0gL1xcYmxhbmcoPzp1YWdlKT8tKFtcXHctXSspXFxiL2k7XG4gIHZhciB1bmlxdWVJZCA9IDA7XG5cbiAgdmFyIF8gPSBfc2VsZi5QcmlzbSA9IHtcbiAgICBtYW51YWw6IF9zZWxmLlByaXNtICYmIF9zZWxmLlByaXNtLm1hbnVhbCxcbiAgICBkaXNhYmxlV29ya2VyTWVzc2FnZUhhbmRsZXI6IF9zZWxmLlByaXNtICYmIF9zZWxmLlByaXNtLmRpc2FibGVXb3JrZXJNZXNzYWdlSGFuZGxlcixcbiAgICB1dGlsOiB7XG4gICAgICBlbmNvZGU6IGZ1bmN0aW9uIGVuY29kZSAodG9rZW5zKSB7XG5cdFx0XHRpZiAodG9rZW5zIGluc3RhbmNlb2YgVG9rZW4pIHtcblx0XHRcdFx0cmV0dXJuIG5ldyBUb2tlbih0b2tlbnMudHlwZSwgXy51dGlsLmVuY29kZSh0b2tlbnMuY29udGVudCksIHRva2Vucy5hbGlhcyk7XG5cdFx0XHR9IGVsc2UgaWYgKF8udXRpbC50eXBlKHRva2VucykgPT09ICdBcnJheScpIHtcblx0XHRcdFx0cmV0dXJuIHRva2Vucy5tYXAoXy51dGlsLmVuY29kZSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gdG9rZW5zLnJlcGxhY2UoLyYvZywgJyZhbXA7JykucmVwbGFjZSgvPC9nLCAnJmx0OycpLnJlcGxhY2UoL1xcdTAwYTAvZywgJyAnKTtcblx0XHRcdH1cblx0XHR9LFxuXG4gICAgICB0eXBlOiBmdW5jdGlvbiB0eXBlIChvKSB7XG5cdFx0XHRyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLm1hdGNoKC9cXFtvYmplY3QgKFxcdyspXFxdLylbMV07XG5cdFx0fSxcblxuICAgICAgb2JqSWQ6IGZ1bmN0aW9uIG9iaklkIChvYmopIHtcblx0XHRcdGlmICghb2JqWydfX2lkJ10pIHtcblx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwgJ19faWQnLCB7IHZhbHVlOiArK3VuaXF1ZUlkIH0pO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG9ialsnX19pZCddO1xuXHRcdH0sXG5cbiAgICAgIC8vIERlZXAgY2xvbmUgYSBsYW5ndWFnZSBkZWZpbml0aW9uIChlLmcuIHRvIGV4dGVuZCBpdClcbiAgICAgIGNsb25lOiBmdW5jdGlvbiBjbG9uZSAobywgdmlzaXRlZCkge1xuXHRcdFx0dmFyIHR5cGUgPSBfLnV0aWwudHlwZShvKTtcblx0XHRcdHZpc2l0ZWQgPSB2aXNpdGVkIHx8IHt9O1xuXG5cdFx0XHRzd2l0Y2ggKHR5cGUpIHtcblx0XHRcdFx0Y2FzZSAnT2JqZWN0Jzpcblx0XHRcdFx0XHRpZiAodmlzaXRlZFtfLnV0aWwub2JqSWQobyldKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdmlzaXRlZFtfLnV0aWwub2JqSWQobyldO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR2YXIgY2xvbmUgPSB7fTtcblx0XHRcdFx0XHR2aXNpdGVkW18udXRpbC5vYmpJZChvKV0gPSBjbG9uZTtcblxuXHRcdFx0XHRcdGZvciAodmFyIGtleSBpbiBvKSB7XG5cdFx0XHRcdFx0XHRpZiAoby5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG5cdFx0XHRcdFx0XHRcdGNsb25lW2tleV0gPSBfLnV0aWwuY2xvbmUob1trZXldLCB2aXNpdGVkKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXR1cm4gY2xvbmU7XG5cblx0XHRcdFx0Y2FzZSAnQXJyYXknOlxuXHRcdFx0XHRcdGlmICh2aXNpdGVkW18udXRpbC5vYmpJZChvKV0pIHtcblx0XHRcdFx0XHRcdHJldHVybiB2aXNpdGVkW18udXRpbC5vYmpJZChvKV07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHZhciBjbG9uZSA9IFtdO1xuXHRcdFx0XHRcdHZpc2l0ZWRbXy51dGlsLm9iaklkKG8pXSA9IGNsb25lO1xuXG5cdFx0XHRcdFx0by5mb3JFYWNoKGZ1bmN0aW9uICh2LCBpKSB7XG5cdFx0XHRcdFx0XHRjbG9uZVtpXSA9IF8udXRpbC5jbG9uZSh2LCB2aXNpdGVkKTtcblx0XHRcdFx0XHR9KTtcblxuXHRcdFx0XHRcdHJldHVybiBjbG9uZTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG87XG5cdFx0fSxcbiAgICB9LFxuXG4gICAgbGFuZ3VhZ2VzOiB7XG4gICAgICBleHRlbmQ6IGZ1bmN0aW9uIGV4dGVuZCAoaWQsIHJlZGVmKSB7XG5cdFx0XHR2YXIgbGFuZyA9IF8udXRpbC5jbG9uZShfLmxhbmd1YWdlc1tpZF0pO1xuXG5cdFx0XHRmb3IgKHZhciBrZXkgaW4gcmVkZWYpIHtcblx0XHRcdFx0bGFuZ1trZXldID0gcmVkZWZba2V5XTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGxhbmc7XG5cdFx0fSxcblxuICAgICAgLyoqXG5cdFx0ICogSW5zZXJ0IGEgdG9rZW4gYmVmb3JlIGFub3RoZXIgdG9rZW4gaW4gYSBsYW5ndWFnZSBsaXRlcmFsXG5cdFx0ICogQXMgdGhpcyBuZWVkcyB0byByZWNyZWF0ZSB0aGUgb2JqZWN0ICh3ZSBjYW5ub3QgYWN0dWFsbHkgaW5zZXJ0IGJlZm9yZSBrZXlzIGluIG9iamVjdCBsaXRlcmFscyksXG5cdFx0ICogd2UgY2Fubm90IGp1c3QgcHJvdmlkZSBhbiBvYmplY3QsIHdlIG5lZWQgYW5vYmplY3QgYW5kIGEga2V5LlxuXHRcdCAqIEBwYXJhbSBpbnNpZGUgVGhlIGtleSAob3IgbGFuZ3VhZ2UgaWQpIG9mIHRoZSBwYXJlbnRcblx0XHQgKiBAcGFyYW0gYmVmb3JlIFRoZSBrZXkgdG8gaW5zZXJ0IGJlZm9yZS4gSWYgbm90IHByb3ZpZGVkLCB0aGUgZnVuY3Rpb24gYXBwZW5kcyBpbnN0ZWFkLlxuXHRcdCAqIEBwYXJhbSBpbnNlcnQgT2JqZWN0IHdpdGggdGhlIGtleS92YWx1ZSBwYWlycyB0byBpbnNlcnRcblx0XHQgKiBAcGFyYW0gcm9vdCBUaGUgb2JqZWN0IHRoYXQgY29udGFpbnMgYGluc2lkZWAuIElmIGVxdWFsIHRvIFByaXNtLmxhbmd1YWdlcywgaXQgY2FuIGJlIG9taXR0ZWQuXG5cdFx0ICovXG4gICAgICBpbnNlcnRCZWZvcmU6IGZ1bmN0aW9uIGluc2VydEJlZm9yZSAoaW5zaWRlLCBiZWZvcmUsIGluc2VydCwgcm9vdCkge1xuXHRcdFx0cm9vdCA9IHJvb3QgfHwgXy5sYW5ndWFnZXM7XG5cdFx0XHR2YXIgZ3JhbW1hciA9IHJvb3RbaW5zaWRlXTtcblxuXHRcdFx0aWYgKGFyZ3VtZW50cy5sZW5ndGggPT0gMikge1xuXHRcdFx0XHRpbnNlcnQgPSBhcmd1bWVudHNbMV07XG5cblx0XHRcdFx0Zm9yICh2YXIgbmV3VG9rZW4gaW4gaW5zZXJ0KSB7XG5cdFx0XHRcdFx0aWYgKGluc2VydC5oYXNPd25Qcm9wZXJ0eShuZXdUb2tlbikpIHtcblx0XHRcdFx0XHRcdGdyYW1tYXJbbmV3VG9rZW5dID0gaW5zZXJ0W25ld1Rva2VuXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gZ3JhbW1hcjtcblx0XHRcdH1cblxuXHRcdFx0dmFyIHJldCA9IHt9O1xuXG5cdFx0XHRmb3IgKHZhciB0b2tlbiBpbiBncmFtbWFyKSB7XG5cblx0XHRcdFx0aWYgKGdyYW1tYXIuaGFzT3duUHJvcGVydHkodG9rZW4pKSB7XG5cblx0XHRcdFx0XHRpZiAodG9rZW4gPT0gYmVmb3JlKSB7XG5cblx0XHRcdFx0XHRcdGZvciAodmFyIG5ld1Rva2VuIGluIGluc2VydCkge1xuXG5cdFx0XHRcdFx0XHRcdGlmIChpbnNlcnQuaGFzT3duUHJvcGVydHkobmV3VG9rZW4pKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmV0W25ld1Rva2VuXSA9IGluc2VydFtuZXdUb2tlbl07XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXRbdG9rZW5dID0gZ3JhbW1hclt0b2tlbl07XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gVXBkYXRlIHJlZmVyZW5jZXMgaW4gb3RoZXIgbGFuZ3VhZ2UgZGVmaW5pdGlvbnNcblx0XHRcdF8ubGFuZ3VhZ2VzLkRGUyhfLmxhbmd1YWdlcywgZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuXHRcdFx0XHRpZiAodmFsdWUgPT09IHJvb3RbaW5zaWRlXSAmJiBrZXkgIT0gaW5zaWRlKSB7XG5cdFx0XHRcdFx0dGhpc1trZXldID0gcmV0O1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblxuXHRcdFx0cmV0dXJuIHJvb3RbaW5zaWRlXSA9IHJldDtcblx0XHR9LFxuXG4gICAgICAvLyBUcmF2ZXJzZSBhIGxhbmd1YWdlIGRlZmluaXRpb24gd2l0aCBEZXB0aCBGaXJzdCBTZWFyY2hcbiAgICAgIERGUzogZnVuY3Rpb24gREZTKG8sIGNhbGxiYWNrLCB0eXBlLCB2aXNpdGVkKSB7XG5cdFx0XHR2aXNpdGVkID0gdmlzaXRlZCB8fCB7fTtcblx0XHRcdGZvciAodmFyIGkgaW4gbykge1xuXHRcdFx0XHRpZiAoby5oYXNPd25Qcm9wZXJ0eShpKSkge1xuXHRcdFx0XHRcdGNhbGxiYWNrLmNhbGwobywgaSwgb1tpXSwgdHlwZSB8fCBpKTtcblxuXHRcdFx0XHRcdGlmIChfLnV0aWwudHlwZShvW2ldKSA9PT0gJ09iamVjdCcgJiYgIXZpc2l0ZWRbXy51dGlsLm9iaklkKG9baV0pXSkge1xuXHRcdFx0XHRcdFx0dmlzaXRlZFtfLnV0aWwub2JqSWQob1tpXSldID0gdHJ1ZTtcblx0XHRcdFx0XHRcdF8ubGFuZ3VhZ2VzLkRGUyhvW2ldLCBjYWxsYmFjaywgbnVsbCwgdmlzaXRlZCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGVsc2UgaWYgKF8udXRpbC50eXBlKG9baV0pID09PSAnQXJyYXknICYmICF2aXNpdGVkW18udXRpbC5vYmpJZChvW2ldKV0pIHtcblx0XHRcdFx0XHRcdHZpc2l0ZWRbXy51dGlsLm9iaklkKG9baV0pXSA9IHRydWU7XG5cdFx0XHRcdFx0XHRfLmxhbmd1YWdlcy5ERlMob1tpXSwgY2FsbGJhY2ssIGksIHZpc2l0ZWQpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG4gICAgfSxcbiAgICBwbHVnaW5zOiB7fSxcblxuICAgIGhpZ2hsaWdodEFsbDogZnVuY3Rpb24gaGlnaGxpZ2h0QWxsKGFzeW5jLCBjYWxsYmFjaykge1xuXHRcdF8uaGlnaGxpZ2h0QWxsVW5kZXIoZG9jdW1lbnQsIGFzeW5jLCBjYWxsYmFjayk7XG5cdH0sXG5cbiAgICBoaWdobGlnaHRBbGxVbmRlcjogZnVuY3Rpb24gaGlnaGxpZ2h0QWxsVW5kZXIoY29udGFpbmVyLCBhc3luYywgY2FsbGJhY2spIHtcblx0XHR2YXIgZW52ID0ge1xuXHRcdFx0Y2FsbGJhY2s6IGNhbGxiYWNrLFxuXHRcdFx0c2VsZWN0b3I6ICdjb2RlW2NsYXNzKj1cImxhbmd1YWdlLVwiXSwgW2NsYXNzKj1cImxhbmd1YWdlLVwiXSBjb2RlLCBjb2RlW2NsYXNzKj1cImxhbmctXCJdLCBbY2xhc3MqPVwibGFuZy1cIl0gY29kZSdcblx0XHR9O1xuXG5cdFx0Xy5ob29rcy5ydW4oXCJiZWZvcmUtaGlnaGxpZ2h0YWxsXCIsIGVudik7XG5cblx0XHR2YXIgZWxlbWVudHMgPSBlbnYuZWxlbWVudHMgfHwgY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoZW52LnNlbGVjdG9yKTtcblxuXHRcdGZvciAodmFyIGk9MCwgZWxlbWVudDsgZWxlbWVudCA9IGVsZW1lbnRzW2krK107KSB7XG5cdFx0XHRfLmhpZ2hsaWdodEVsZW1lbnQoZWxlbWVudCwgYXN5bmMgPT09IHRydWUsIGVudi5jYWxsYmFjayk7XG5cdFx0fVxuXHR9LFxuXG4gICAgaGlnaGxpZ2h0RWxlbWVudDogZnVuY3Rpb24gaGlnaGxpZ2h0RWxlbWVudChlbGVtZW50LCBhc3luYywgY2FsbGJhY2spIHtcblx0XHQvLyBGaW5kIGxhbmd1YWdlXG5cdFx0dmFyIGxhbmd1YWdlLCBncmFtbWFyLCBwYXJlbnQgPSBlbGVtZW50O1xuXG5cdFx0d2hpbGUgKHBhcmVudCAmJiAhbGFuZy50ZXN0KHBhcmVudC5jbGFzc05hbWUpKSB7XG5cdFx0XHRwYXJlbnQgPSBwYXJlbnQucGFyZW50Tm9kZTtcblx0XHR9XG5cblx0XHRpZiAocGFyZW50KSB7XG5cdFx0XHRsYW5ndWFnZSA9IChwYXJlbnQuY2xhc3NOYW1lLm1hdGNoKGxhbmcpIHx8IFssJyddKVsxXS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0Z3JhbW1hciA9IF8ubGFuZ3VhZ2VzW2xhbmd1YWdlXTtcblx0XHR9XG5cblx0XHQvLyBTZXQgbGFuZ3VhZ2Ugb24gdGhlIGVsZW1lbnQsIGlmIG5vdCBwcmVzZW50XG5cdFx0ZWxlbWVudC5jbGFzc05hbWUgPSBlbGVtZW50LmNsYXNzTmFtZS5yZXBsYWNlKGxhbmcsICcnKS5yZXBsYWNlKC9cXHMrL2csICcgJykgKyAnIGxhbmd1YWdlLScgKyBsYW5ndWFnZTtcblxuXHRcdGlmIChlbGVtZW50LnBhcmVudE5vZGUpIHtcblx0XHRcdC8vIFNldCBsYW5ndWFnZSBvbiB0aGUgcGFyZW50LCBmb3Igc3R5bGluZ1xuXHRcdFx0cGFyZW50ID0gZWxlbWVudC5wYXJlbnROb2RlO1xuXG5cdFx0XHRpZiAoL3ByZS9pLnRlc3QocGFyZW50Lm5vZGVOYW1lKSkge1xuXHRcdFx0XHRwYXJlbnQuY2xhc3NOYW1lID0gcGFyZW50LmNsYXNzTmFtZS5yZXBsYWNlKGxhbmcsICcnKS5yZXBsYWNlKC9cXHMrL2csICcgJykgKyAnIGxhbmd1YWdlLScgKyBsYW5ndWFnZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHR2YXIgY29kZSA9IGVsZW1lbnQudGV4dENvbnRlbnQ7XG5cblx0XHR2YXIgZW52ID0ge1xuXHRcdFx0ZWxlbWVudDogZWxlbWVudCxcblx0XHRcdGxhbmd1YWdlOiBsYW5ndWFnZSxcblx0XHRcdGdyYW1tYXI6IGdyYW1tYXIsXG5cdFx0XHRjb2RlOiBjb2RlXG5cdFx0fTtcblxuXHRcdF8uaG9va3MucnVuKCdiZWZvcmUtc2FuaXR5LWNoZWNrJywgZW52KTtcblxuXHRcdGlmICghZW52LmNvZGUgfHwgIWVudi5ncmFtbWFyKSB7XG5cdFx0XHRpZiAoZW52LmNvZGUpIHtcblx0XHRcdFx0Xy5ob29rcy5ydW4oJ2JlZm9yZS1oaWdobGlnaHQnLCBlbnYpO1xuXHRcdFx0XHRlbnYuZWxlbWVudC50ZXh0Q29udGVudCA9IGVudi5jb2RlO1xuXHRcdFx0XHRfLmhvb2tzLnJ1bignYWZ0ZXItaGlnaGxpZ2h0JywgZW52KTtcblx0XHRcdH1cblx0XHRcdF8uaG9va3MucnVuKCdjb21wbGV0ZScsIGVudik7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Xy5ob29rcy5ydW4oJ2JlZm9yZS1oaWdobGlnaHQnLCBlbnYpO1xuXG5cdFx0aWYgKGFzeW5jICYmIF9zZWxmLldvcmtlcikge1xuXHRcdFx0dmFyIHdvcmtlciA9IG5ldyBXb3JrZXIoXy5maWxlbmFtZSk7XG5cblx0XHRcdHdvcmtlci5vbm1lc3NhZ2UgPSBmdW5jdGlvbihldnQpIHtcblx0XHRcdFx0ZW52LmhpZ2hsaWdodGVkQ29kZSA9IGV2dC5kYXRhO1xuXG5cdFx0XHRcdF8uaG9va3MucnVuKCdiZWZvcmUtaW5zZXJ0JywgZW52KTtcblxuXHRcdFx0XHRlbnYuZWxlbWVudC5pbm5lckhUTUwgPSBlbnYuaGlnaGxpZ2h0ZWRDb2RlO1xuXG5cdFx0XHRcdGNhbGxiYWNrICYmIGNhbGxiYWNrLmNhbGwoZW52LmVsZW1lbnQpO1xuXHRcdFx0XHRfLmhvb2tzLnJ1bignYWZ0ZXItaGlnaGxpZ2h0JywgZW52KTtcblx0XHRcdFx0Xy5ob29rcy5ydW4oJ2NvbXBsZXRlJywgZW52KTtcblx0XHRcdH07XG5cblx0XHRcdHdvcmtlci5wb3N0TWVzc2FnZShKU09OLnN0cmluZ2lmeSh7XG5cdFx0XHRcdGxhbmd1YWdlOiBlbnYubGFuZ3VhZ2UsXG5cdFx0XHRcdGNvZGU6IGVudi5jb2RlLFxuXHRcdFx0XHRpbW1lZGlhdGVDbG9zZTogdHJ1ZVxuXHRcdFx0fSkpO1xuXHRcdH1cblx0XHRlbHNlIHtcblx0XHRcdGVudi5oaWdobGlnaHRlZENvZGUgPSBfLmhpZ2hsaWdodChlbnYuY29kZSwgZW52LmdyYW1tYXIsIGVudi5sYW5ndWFnZSk7XG5cblx0XHRcdF8uaG9va3MucnVuKCdiZWZvcmUtaW5zZXJ0JywgZW52KTtcblxuXHRcdFx0ZW52LmVsZW1lbnQuaW5uZXJIVE1MID0gZW52LmhpZ2hsaWdodGVkQ29kZTtcblxuXHRcdFx0Y2FsbGJhY2sgJiYgY2FsbGJhY2suY2FsbChlbGVtZW50KTtcblxuXHRcdFx0Xy5ob29rcy5ydW4oJ2FmdGVyLWhpZ2hsaWdodCcsIGVudik7XG5cdFx0XHRfLmhvb2tzLnJ1bignY29tcGxldGUnLCBlbnYpO1xuXHRcdH1cblx0fSxcblxuICAgIGhpZ2hsaWdodDogZnVuY3Rpb24gaGlnaGxpZ2h0ICh0ZXh0LCBncmFtbWFyLCBsYW5ndWFnZSkge1xuXHRcdHZhciBlbnYgPSB7XG5cdFx0XHRjb2RlOiB0ZXh0LFxuXHRcdFx0Z3JhbW1hcjogZ3JhbW1hcixcblx0XHRcdGxhbmd1YWdlOiBsYW5ndWFnZVxuXHRcdH07XG5cdFx0Xy5ob29rcy5ydW4oJ2JlZm9yZS10b2tlbml6ZScsIGVudik7XG5cdFx0ZW52LnRva2VucyA9IF8udG9rZW5pemUoZW52LmNvZGUsIGVudi5ncmFtbWFyKTtcblx0XHRfLmhvb2tzLnJ1bignYWZ0ZXItdG9rZW5pemUnLCBlbnYpO1xuXHRcdHJldHVybiBUb2tlbi5zdHJpbmdpZnkoXy51dGlsLmVuY29kZShlbnYudG9rZW5zKSwgZW52Lmxhbmd1YWdlKTtcblx0fSxcblxuICAgIG1hdGNoR3JhbW1hcjogZnVuY3Rpb24gbWF0Y2hHcmFtbWFyICh0ZXh0LCBzdHJhcnIsIGdyYW1tYXIsIGluZGV4LCBzdGFydFBvcywgb25lc2hvdCwgdGFyZ2V0KSB7XG5cdFx0dmFyIFRva2VuID0gXy5Ub2tlbjtcblxuXHRcdGZvciAodmFyIHRva2VuIGluIGdyYW1tYXIpIHtcblx0XHRcdGlmKCFncmFtbWFyLmhhc093blByb3BlcnR5KHRva2VuKSB8fCAhZ3JhbW1hclt0b2tlbl0pIHtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdGlmICh0b2tlbiA9PSB0YXJnZXQpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHR2YXIgcGF0dGVybnMgPSBncmFtbWFyW3Rva2VuXTtcblx0XHRcdHBhdHRlcm5zID0gKF8udXRpbC50eXBlKHBhdHRlcm5zKSA9PT0gXCJBcnJheVwiKSA/IHBhdHRlcm5zIDogW3BhdHRlcm5zXTtcblxuXHRcdFx0Zm9yICh2YXIgaiA9IDA7IGogPCBwYXR0ZXJucy5sZW5ndGg7ICsraikge1xuXHRcdFx0XHR2YXIgcGF0dGVybiA9IHBhdHRlcm5zW2pdLFxuXHRcdFx0XHRcdGluc2lkZSA9IHBhdHRlcm4uaW5zaWRlLFxuXHRcdFx0XHRcdGxvb2tiZWhpbmQgPSAhIXBhdHRlcm4ubG9va2JlaGluZCxcblx0XHRcdFx0XHRncmVlZHkgPSAhIXBhdHRlcm4uZ3JlZWR5LFxuXHRcdFx0XHRcdGxvb2tiZWhpbmRMZW5ndGggPSAwLFxuXHRcdFx0XHRcdGFsaWFzID0gcGF0dGVybi5hbGlhcztcblxuXHRcdFx0XHRpZiAoZ3JlZWR5ICYmICFwYXR0ZXJuLnBhdHRlcm4uZ2xvYmFsKSB7XG5cdFx0XHRcdFx0Ly8gV2l0aG91dCB0aGUgZ2xvYmFsIGZsYWcsIGxhc3RJbmRleCB3b24ndCB3b3JrXG5cdFx0XHRcdFx0dmFyIGZsYWdzID0gcGF0dGVybi5wYXR0ZXJuLnRvU3RyaW5nKCkubWF0Y2goL1tpbXV5XSokLylbMF07XG5cdFx0XHRcdFx0cGF0dGVybi5wYXR0ZXJuID0gUmVnRXhwKHBhdHRlcm4ucGF0dGVybi5zb3VyY2UsIGZsYWdzICsgXCJnXCIpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cGF0dGVybiA9IHBhdHRlcm4ucGF0dGVybiB8fCBwYXR0ZXJuO1xuXG5cdFx0XHRcdC8vIERvbuKAmXQgY2FjaGUgbGVuZ3RoIGFzIGl0IGNoYW5nZXMgZHVyaW5nIHRoZSBsb29wXG5cdFx0XHRcdGZvciAodmFyIGkgPSBpbmRleCwgcG9zID0gc3RhcnRQb3M7IGkgPCBzdHJhcnIubGVuZ3RoOyBwb3MgKz0gc3RyYXJyW2ldLmxlbmd0aCwgKytpKSB7XG5cblx0XHRcdFx0XHR2YXIgc3RyID0gc3RyYXJyW2ldO1xuXG5cdFx0XHRcdFx0aWYgKHN0cmFyci5sZW5ndGggPiB0ZXh0Lmxlbmd0aCkge1xuXHRcdFx0XHRcdFx0Ly8gU29tZXRoaW5nIHdlbnQgdGVycmlibHkgd3JvbmcsIEFCT1JULCBBQk9SVCFcblx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZiAoc3RyIGluc3RhbmNlb2YgVG9rZW4pIHtcblx0XHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmIChncmVlZHkgJiYgaSAhPSBzdHJhcnIubGVuZ3RoIC0gMSkge1xuXHRcdFx0XHRcdFx0cGF0dGVybi5sYXN0SW5kZXggPSBwb3M7XG5cdFx0XHRcdFx0XHR2YXIgbWF0Y2ggPSBwYXR0ZXJuLmV4ZWModGV4dCk7XG5cdFx0XHRcdFx0XHRpZiAoIW1hdGNoKSB7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR2YXIgZnJvbSA9IG1hdGNoLmluZGV4ICsgKGxvb2tiZWhpbmQgPyBtYXRjaFsxXS5sZW5ndGggOiAwKSxcblx0XHRcdFx0XHRcdCAgICB0byA9IG1hdGNoLmluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoLFxuXHRcdFx0XHRcdFx0ICAgIGsgPSBpLFxuXHRcdFx0XHRcdFx0ICAgIHAgPSBwb3M7XG5cblx0XHRcdFx0XHRcdGZvciAodmFyIGxlbiA9IHN0cmFyci5sZW5ndGg7IGsgPCBsZW4gJiYgKHAgPCB0byB8fCAoIXN0cmFycltrXS50eXBlICYmICFzdHJhcnJbayAtIDFdLmdyZWVkeSkpOyArK2spIHtcblx0XHRcdFx0XHRcdFx0cCArPSBzdHJhcnJba10ubGVuZ3RoO1xuXHRcdFx0XHRcdFx0XHQvLyBNb3ZlIHRoZSBpbmRleCBpIHRvIHRoZSBlbGVtZW50IGluIHN0cmFyciB0aGF0IGlzIGNsb3Nlc3QgdG8gZnJvbVxuXHRcdFx0XHRcdFx0XHRpZiAoZnJvbSA+PSBwKSB7XG5cdFx0XHRcdFx0XHRcdFx0KytpO1xuXHRcdFx0XHRcdFx0XHRcdHBvcyA9IHA7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gSWYgc3RyYXJyW2ldIGlzIGEgVG9rZW4sIHRoZW4gdGhlIG1hdGNoIHN0YXJ0cyBpbnNpZGUgYW5vdGhlciBUb2tlbiwgd2hpY2ggaXMgaW52YWxpZFxuXHRcdFx0XHRcdFx0aWYgKHN0cmFycltpXSBpbnN0YW5jZW9mIFRva2VuKSB7XG5cdFx0XHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBOdW1iZXIgb2YgdG9rZW5zIHRvIGRlbGV0ZSBhbmQgcmVwbGFjZSB3aXRoIHRoZSBuZXcgbWF0Y2hcblx0XHRcdFx0XHRcdGRlbE51bSA9IGsgLSBpO1xuXHRcdFx0XHRcdFx0c3RyID0gdGV4dC5zbGljZShwb3MsIHApO1xuXHRcdFx0XHRcdFx0bWF0Y2guaW5kZXggLT0gcG9zO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRwYXR0ZXJuLmxhc3RJbmRleCA9IDA7XG5cblx0XHRcdFx0XHRcdHZhciBtYXRjaCA9IHBhdHRlcm4uZXhlYyhzdHIpLFxuXHRcdFx0XHRcdFx0XHRkZWxOdW0gPSAxO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmICghbWF0Y2gpIHtcblx0XHRcdFx0XHRcdGlmIChvbmVzaG90KSB7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZihsb29rYmVoaW5kKSB7XG5cdFx0XHRcdFx0XHRsb29rYmVoaW5kTGVuZ3RoID0gbWF0Y2hbMV0gPyBtYXRjaFsxXS5sZW5ndGggOiAwO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHZhciBmcm9tID0gbWF0Y2guaW5kZXggKyBsb29rYmVoaW5kTGVuZ3RoLFxuXHRcdFx0XHRcdCAgICBtYXRjaCA9IG1hdGNoWzBdLnNsaWNlKGxvb2tiZWhpbmRMZW5ndGgpLFxuXHRcdFx0XHRcdCAgICB0byA9IGZyb20gKyBtYXRjaC5sZW5ndGgsXG5cdFx0XHRcdFx0ICAgIGJlZm9yZSA9IHN0ci5zbGljZSgwLCBmcm9tKSxcblx0XHRcdFx0XHQgICAgYWZ0ZXIgPSBzdHIuc2xpY2UodG8pO1xuXG5cdFx0XHRcdFx0dmFyIGFyZ3MgPSBbaSwgZGVsTnVtXTtcblxuXHRcdFx0XHRcdGlmIChiZWZvcmUpIHtcblx0XHRcdFx0XHRcdCsraTtcblx0XHRcdFx0XHRcdHBvcyArPSBiZWZvcmUubGVuZ3RoO1xuXHRcdFx0XHRcdFx0YXJncy5wdXNoKGJlZm9yZSk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0dmFyIHdyYXBwZWQgPSBuZXcgVG9rZW4odG9rZW4sIGluc2lkZT8gXy50b2tlbml6ZShtYXRjaCwgaW5zaWRlKSA6IG1hdGNoLCBhbGlhcywgbWF0Y2gsIGdyZWVkeSk7XG5cblx0XHRcdFx0XHRhcmdzLnB1c2god3JhcHBlZCk7XG5cblx0XHRcdFx0XHRpZiAoYWZ0ZXIpIHtcblx0XHRcdFx0XHRcdGFyZ3MucHVzaChhZnRlcik7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0QXJyYXkucHJvdG90eXBlLnNwbGljZS5hcHBseShzdHJhcnIsIGFyZ3MpO1xuXG5cdFx0XHRcdFx0aWYgKGRlbE51bSAhPSAxKVxuXHRcdFx0XHRcdFx0eyBfLm1hdGNoR3JhbW1hcih0ZXh0LCBzdHJhcnIsIGdyYW1tYXIsIGksIHBvcywgdHJ1ZSwgdG9rZW4pOyB9XG5cblx0XHRcdFx0XHRpZiAob25lc2hvdClcblx0XHRcdFx0XHRcdHsgYnJlYWs7IH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuICAgIHRva2VuaXplOiBmdW5jdGlvbiB0b2tlbml6ZSh0ZXh0LCBncmFtbWFyLCBsYW5ndWFnZSkge1xuXHRcdHZhciBzdHJhcnIgPSBbdGV4dF07XG5cblx0XHR2YXIgcmVzdCA9IGdyYW1tYXIucmVzdDtcblxuXHRcdGlmIChyZXN0KSB7XG5cdFx0XHRmb3IgKHZhciB0b2tlbiBpbiByZXN0KSB7XG5cdFx0XHRcdGdyYW1tYXJbdG9rZW5dID0gcmVzdFt0b2tlbl07XG5cdFx0XHR9XG5cblx0XHRcdGRlbGV0ZSBncmFtbWFyLnJlc3Q7XG5cdFx0fVxuXG5cdFx0Xy5tYXRjaEdyYW1tYXIodGV4dCwgc3RyYXJyLCBncmFtbWFyLCAwLCAwLCBmYWxzZSk7XG5cblx0XHRyZXR1cm4gc3RyYXJyO1xuXHR9LFxuXG4gICAgaG9va3M6IHtcbiAgICAgIGFsbDoge30sXG5cbiAgICAgIGFkZDogZnVuY3Rpb24gYWRkIChuYW1lLCBjYWxsYmFjaykge1xuXHRcdFx0dmFyIGhvb2tzID0gXy5ob29rcy5hbGw7XG5cblx0XHRcdGhvb2tzW25hbWVdID0gaG9va3NbbmFtZV0gfHwgW107XG5cblx0XHRcdGhvb2tzW25hbWVdLnB1c2goY2FsbGJhY2spO1xuXHRcdH0sXG5cbiAgICAgIHJ1bjogZnVuY3Rpb24gcnVuIChuYW1lLCBlbnYpIHtcblx0XHRcdHZhciBjYWxsYmFja3MgPSBfLmhvb2tzLmFsbFtuYW1lXTtcblxuXHRcdFx0aWYgKCFjYWxsYmFja3MgfHwgIWNhbGxiYWNrcy5sZW5ndGgpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3IgKHZhciBpPTAsIGNhbGxiYWNrOyBjYWxsYmFjayA9IGNhbGxiYWNrc1tpKytdOykge1xuXHRcdFx0XHRjYWxsYmFjayhlbnYpO1xuXHRcdFx0fVxuXHRcdH0sXG4gICAgfSxcbiAgfTtcblxuICB2YXIgVG9rZW4gPSBfLlRva2VuID0gZnVuY3Rpb24gKHR5cGUsIGNvbnRlbnQsIGFsaWFzLCBtYXRjaGVkU3RyLCBncmVlZHkpIHtcbiAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgIHRoaXMuY29udGVudCA9IGNvbnRlbnQ7XG4gICAgdGhpcy5hbGlhcyA9IGFsaWFzO1xuICAgIC8vIENvcHkgb2YgdGhlIGZ1bGwgc3RyaW5nIHRoaXMgdG9rZW4gd2FzIGNyZWF0ZWQgZnJvbVxuICAgIHRoaXMubGVuZ3RoID0gKG1hdGNoZWRTdHIgfHwgJycpLmxlbmd0aCB8IDA7XG4gICAgdGhpcy5ncmVlZHkgPSAhIWdyZWVkeTtcbiAgfTtcblxuICBUb2tlbi5zdHJpbmdpZnkgPSBmdW5jdGlvbiAobywgbGFuZ3VhZ2UsIHBhcmVudCkge1xuICAgIGlmICh0eXBlb2YgbyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJldHVybiBvO1xuICAgIH1cblxuICAgIGlmIChfLnV0aWwudHlwZShvKSA9PT0gJ0FycmF5Jykge1xuICAgICAgcmV0dXJuIG8ubWFwKGZ1bmN0aW9uIChlbGVtZW50KSB7XG5cdFx0XHRyZXR1cm4gVG9rZW4uc3RyaW5naWZ5KGVsZW1lbnQsIGxhbmd1YWdlLCBvKTtcblx0XHR9KS5qb2luKCcnKTtcbiAgICB9XG5cbiAgICB2YXIgZW52ID0ge1xuICAgICAgdHlwZTogby50eXBlLFxuICAgICAgY29udGVudDogVG9rZW4uc3RyaW5naWZ5KG8uY29udGVudCwgbGFuZ3VhZ2UsIHBhcmVudCksXG4gICAgICB0YWc6ICdzcGFuJyxcbiAgICAgIGNsYXNzZXM6IFsndG9rZW4nLCBvLnR5cGVdLFxuICAgICAgYXR0cmlidXRlczoge30sXG4gICAgICBsYW5ndWFnZTogbGFuZ3VhZ2UsXG4gICAgICBwYXJlbnQ6IHBhcmVudCxcbiAgICB9O1xuXG4gICAgaWYgKG8uYWxpYXMpIHtcbiAgICAgIHZhciBhbGlhc2VzID0gXy51dGlsLnR5cGUoby5hbGlhcykgPT09ICdBcnJheScgPyBvLmFsaWFzIDogW28uYWxpYXNdO1xuICAgICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkoZW52LmNsYXNzZXMsIGFsaWFzZXMpO1xuICAgIH1cblxuICAgIF8uaG9va3MucnVuKCd3cmFwJywgZW52KTtcblxuICAgIHZhciBhdHRyaWJ1dGVzID0gT2JqZWN0LmtleXMoZW52LmF0dHJpYnV0ZXMpLm1hcChmdW5jdGlvbiAobmFtZSkge1xuXHRcdHJldHVybiBuYW1lICsgJz1cIicgKyAoZW52LmF0dHJpYnV0ZXNbbmFtZV0gfHwgJycpLnJlcGxhY2UoL1wiL2csICcmcXVvdDsnKSArICdcIic7XG5cdH0pLmpvaW4oJyAnKTtcblxuICAgIHJldHVybiAoXCI8XCIgKyAoZW52LnRhZykgKyBcIiBjbGFzcz1cXFwiXCIgKyAoZW52LmNsYXNzZXMuam9pbignICcpKSArIFwiXFxcIlwiICsgKGF0dHJpYnV0ZXMgPyAnICcgKyBhdHRyaWJ1dGVzIDogJycpICsgXCI+XCIgKyAoZW52LmNvbnRlbnQpICsgXCI8L1wiICsgKGVudi50YWcpICsgXCI+XCIpO1xuICB9O1xuXG4gIGlmICghX3NlbGYuZG9jdW1lbnQpIHtcbiAgICBpZiAoIV9zZWxmLmFkZEV2ZW50TGlzdGVuZXIpIHtcbiAgICAgIC8vIGluIE5vZGUuanNcbiAgICAgIHJldHVybiBfc2VsZi5QcmlzbTtcbiAgICB9XG5cbiAgICBpZiAoIV8uZGlzYWJsZVdvcmtlck1lc3NhZ2VIYW5kbGVyKSB7XG4gICAgICAvLyBJbiB3b3JrZXJcbiAgICAgIF9zZWxmLmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBmdW5jdGlvbiAoZXZ0KSB7XG5cdFx0XHR2YXIgbWVzc2FnZSA9IEpTT04ucGFyc2UoZXZ0LmRhdGEpLFxuXHRcdFx0XHRsYW5nID0gbWVzc2FnZS5sYW5ndWFnZSxcblx0XHRcdFx0Y29kZSA9IG1lc3NhZ2UuY29kZSxcblx0XHRcdFx0aW1tZWRpYXRlQ2xvc2UgPSBtZXNzYWdlLmltbWVkaWF0ZUNsb3NlO1xuXG5cdFx0XHRfc2VsZi5wb3N0TWVzc2FnZShfLmhpZ2hsaWdodChjb2RlLCBfLmxhbmd1YWdlc1tsYW5nXSwgbGFuZykpO1xuXHRcdFx0aWYgKGltbWVkaWF0ZUNsb3NlKSB7XG5cdFx0XHRcdF9zZWxmLmNsb3NlKCk7XG5cdFx0XHR9XG5cdFx0fSwgZmFsc2UpO1xuICAgIH1cblxuICAgIHJldHVybiBfc2VsZi5QcmlzbTtcbiAgfVxuXG4gIC8vIEdldCBjdXJyZW50IHNjcmlwdCBhbmQgaGlnaGxpZ2h0XG4gIC8vIGxldCBzY3JpcHQgPSBkb2N1bWVudC5jdXJyZW50U2NyaXB0IHx8IFtdLnNsaWNlLmNhbGwoZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3NjcmlwdCcpKS5wb3AoKTtcblxuICAvLyBpZiAoc2NyaXB0KSB7XG4gIC8vICAgXy5maWxlbmFtZSA9IHNjcmlwdC5zcmM7XG5cbiAgLy8gICBpZiAoIV8ubWFudWFsICYmICFzY3JpcHQuaGFzQXR0cmlidXRlKCdkYXRhLW1hbnVhbCcpKSB7XG4gIC8vICAgICBpZiAoZG9jdW1lbnQucmVhZHlTdGF0ZSAhPT0gJ2xvYWRpbmcnKSB7XG4gIC8vICAgICAgIGlmICh3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKSB7XG4gIC8vICAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShfLmhpZ2hsaWdodEFsbCk7XG4gIC8vICAgICAgIH0gZWxzZSB7XG4gIC8vICAgICAgICAgd2luZG93LnNldFRpbWVvdXQoXy5oaWdobGlnaHRBbGwsIDE2KTtcbiAgLy8gICAgICAgfVxuICAvLyAgICAgfSBlbHNlIHtcbiAgLy8gICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIF8uaGlnaGxpZ2h0QWxsKTtcbiAgLy8gICAgIH1cbiAgLy8gICB9XG4gIC8vIH1cblxuICByZXR1cm4gX3NlbGYuUHJpc207XG59KCkpO1xuXG5pZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBQcmlzbTtcbn1cblxuLy8gaGFjayBmb3IgY29tcG9uZW50cyB0byB3b3JrIGNvcnJlY3RseSBpbiBub2RlLmpzXG5pZiAodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgZ2xvYmFsLlByaXNtID0gUHJpc207XG59XG5cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICAgICBCZWdpbiBwcmlzbS1tYXJrdXAuanNcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuUHJpc20ubGFuZ3VhZ2VzLm1hcmt1cCA9IHtcbiAgY29tbWVudDogLzwhLS1bXFxzXFxTXSo/LS0+LyxcbiAgcHJvbG9nOiAvPFxcP1tcXHNcXFNdKz9cXD8+LyxcbiAgZG9jdHlwZTogLzwhRE9DVFlQRVtcXHNcXFNdKz8+L2ksXG4gIGNkYXRhOiAvPCFcXFtDREFUQVxcW1tcXHNcXFNdKj9dXT4vaSxcbiAgdGFnOiB7XG4gICAgcGF0dGVybjogLzxcXC8/KD8hXFxkKVteXFxzPlxcLz0kPCVdKyg/OlxccytbXlxccz5cXC89XSsoPzo9KD86KFwifCcpKD86XFxcXFtcXHNcXFNdfCg/IVxcMSlbXlxcXFxdKSpcXDF8W15cXHMnXCI+PV0rKSk/KSpcXHMqXFwvPz4vaSxcbiAgICBncmVlZHk6IHRydWUsXG4gICAgaW5zaWRlOiB7XG4gICAgICB0YWc6IHtcbiAgICAgICAgcGF0dGVybjogL148XFwvP1teXFxzPlxcL10rL2ksXG4gICAgICAgIGluc2lkZToge1xuICAgICAgICAgIHB1bmN0dWF0aW9uOiAvXjxcXC8/LyxcbiAgICAgICAgICBuYW1lc3BhY2U6IC9eW15cXHM+XFwvOl0rOi8sXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgICAgJ2F0dHItdmFsdWUnOiB7XG4gICAgICAgIHBhdHRlcm46IC89KD86KFwifCcpKD86XFxcXFtcXHNcXFNdfCg/IVxcMSlbXlxcXFxdKSpcXDF8W15cXHMnXCI+PV0rKS9pLFxuICAgICAgICBpbnNpZGU6IHtcbiAgICAgICAgICBwdW5jdHVhdGlvbjogW1xuICAgICAgICAgICAgL149LyxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgcGF0dGVybjogLyhefFteXFxcXF0pW1wiJ10vLFxuICAgICAgICAgICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgICAgICAgfSBdLFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICAgIHB1bmN0dWF0aW9uOiAvXFwvPz4vLFxuICAgICAgJ2F0dHItbmFtZSc6IHtcbiAgICAgICAgcGF0dGVybjogL1teXFxzPlxcL10rLyxcbiAgICAgICAgaW5zaWRlOiB7XG4gICAgICAgICAgbmFtZXNwYWNlOiAvXlteXFxzPlxcLzpdKzovLFxuICAgICAgICB9LFxuICAgICAgfSxcblxuICAgIH0sXG4gIH0sXG4gIGVudGl0eTogLyYjP1tcXGRhLXpdezEsOH07L2ksXG59O1xuXG5QcmlzbS5sYW5ndWFnZXMubWFya3VwLnRhZy5pbnNpZGVbJ2F0dHItdmFsdWUnXS5pbnNpZGUuZW50aXR5ID1cdFByaXNtLmxhbmd1YWdlcy5tYXJrdXAuZW50aXR5O1xuXG4vLyBQbHVnaW4gdG8gbWFrZSBlbnRpdHkgdGl0bGUgc2hvdyB0aGUgcmVhbCBlbnRpdHksIGlkZWEgYnkgUm9tYW4gS29tYXJvdlxuUHJpc20uaG9va3MuYWRkKCd3cmFwJywgZnVuY3Rpb24gKGVudikge1xuXG5cdGlmIChlbnYudHlwZSA9PT0gJ2VudGl0eScpIHtcblx0XHRlbnYuYXR0cmlidXRlc1sndGl0bGUnXSA9IGVudi5jb250ZW50LnJlcGxhY2UoLyZhbXA7LywgJyYnKTtcblx0fVxufSk7XG5cblByaXNtLmxhbmd1YWdlcy54bWwgPSBQcmlzbS5sYW5ndWFnZXMubWFya3VwO1xuUHJpc20ubGFuZ3VhZ2VzLmh0bWwgPSBQcmlzbS5sYW5ndWFnZXMubWFya3VwO1xuUHJpc20ubGFuZ3VhZ2VzLm1hdGhtbCA9IFByaXNtLmxhbmd1YWdlcy5tYXJrdXA7XG5QcmlzbS5sYW5ndWFnZXMuc3ZnID0gUHJpc20ubGFuZ3VhZ2VzLm1hcmt1cDtcblxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gICAgIEJlZ2luIHByaXNtLWNzcy5qc1xuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG5QcmlzbS5sYW5ndWFnZXMuY3NzID0ge1xuICBjb21tZW50OiAvXFwvXFwqW1xcc1xcU10qP1xcKlxcLy8sXG4gIGF0cnVsZToge1xuICAgIHBhdHRlcm46IC9AW1xcdy1dKz8uKj8oPzo7fCg/PVxccypcXHspKS9pLFxuICAgIGluc2lkZToge1xuICAgICAgcnVsZTogL0BbXFx3LV0rLyxcbiAgICAgIC8vIFNlZSByZXN0IGJlbG93XG4gICAgfSxcbiAgfSxcbiAgdXJsOiAvdXJsXFwoKD86KFtcIiddKSg/OlxcXFwoPzpcXHJcXG58W1xcc1xcU10pfCg/IVxcMSlbXlxcXFxcXHJcXG5dKSpcXDF8Lio/KVxcKS9pLFxuICBzZWxlY3RvcjogL1tee31cXHNdW157fTtdKj8oPz1cXHMqXFx7KS8sXG4gIHN0cmluZzoge1xuICAgIHBhdHRlcm46IC8oXCJ8JykoPzpcXFxcKD86XFxyXFxufFtcXHNcXFNdKXwoPyFcXDEpW15cXFxcXFxyXFxuXSkqXFwxLyxcbiAgICBncmVlZHk6IHRydWUsXG4gIH0sXG4gIHByb3BlcnR5OiAvWy1fYS16XFx4QTAtXFx1RkZGRl1bLVxcd1xceEEwLVxcdUZGRkZdKig/PVxccyo6KS9pLFxuICBpbXBvcnRhbnQ6IC9cXEIhaW1wb3J0YW50XFxiL2ksXG4gIGZ1bmN0aW9uOiAvWy1hLXowLTldKyg/PVxcKCkvaSxcbiAgcHVuY3R1YXRpb246IC9bKCl7fTs6XS8sXG59O1xuXG5QcmlzbS5sYW5ndWFnZXMuY3NzLmF0cnVsZS5pbnNpZGUucmVzdCA9IFByaXNtLmxhbmd1YWdlcy5jc3M7XG5cbmlmIChQcmlzbS5sYW5ndWFnZXMubWFya3VwKSB7XG4gIFByaXNtLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoJ21hcmt1cCcsICd0YWcnLCB7XG4gICAgc3R5bGU6IHtcbiAgICAgIHBhdHRlcm46IC8oPHN0eWxlW1xcc1xcU10qPz4pW1xcc1xcU10qPyg/PTxcXC9zdHlsZT4pL2ksXG4gICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgaW5zaWRlOiBQcmlzbS5sYW5ndWFnZXMuY3NzLFxuICAgICAgYWxpYXM6ICdsYW5ndWFnZS1jc3MnLFxuICAgICAgZ3JlZWR5OiB0cnVlLFxuICAgIH0sXG4gIH0pO1xuXG4gIFByaXNtLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoJ2luc2lkZScsICdhdHRyLXZhbHVlJywge1xuICAgICdzdHlsZS1hdHRyJzoge1xuICAgICAgcGF0dGVybjogL1xccypzdHlsZT0oXCJ8JykoPzpcXFxcW1xcc1xcU118KD8hXFwxKVteXFxcXF0pKlxcMS9pLFxuICAgICAgaW5zaWRlOiB7XG4gICAgICAgICdhdHRyLW5hbWUnOiB7XG4gICAgICAgICAgcGF0dGVybjogL15cXHMqc3R5bGUvaSxcbiAgICAgICAgICBpbnNpZGU6IFByaXNtLmxhbmd1YWdlcy5tYXJrdXAudGFnLmluc2lkZSxcbiAgICAgICAgfSxcbiAgICAgICAgcHVuY3R1YXRpb246IC9eXFxzKj1cXHMqWydcIl18WydcIl1cXHMqJC8sXG4gICAgICAgICdhdHRyLXZhbHVlJzoge1xuICAgICAgICAgIHBhdHRlcm46IC8uKy9pLFxuICAgICAgICAgIGluc2lkZTogUHJpc20ubGFuZ3VhZ2VzLmNzcyxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgICBhbGlhczogJ2xhbmd1YWdlLWNzcycsXG4gICAgfSxcbiAgfSwgUHJpc20ubGFuZ3VhZ2VzLm1hcmt1cC50YWcpO1xufVxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gICAgIEJlZ2luIHByaXNtLWNsaWtlLmpzXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cblByaXNtLmxhbmd1YWdlcy5jbGlrZSA9IHtcbiAgY29tbWVudDogW1xuICAgIHtcbiAgICAgIHBhdHRlcm46IC8oXnxbXlxcXFxdKVxcL1xcKltcXHNcXFNdKj8oPzpcXCpcXC98JCkvLFxuICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICB9LFxuICAgIHtcbiAgICAgIHBhdHRlcm46IC8oXnxbXlxcXFw6XSlcXC9cXC8uKi8sXG4gICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgZ3JlZWR5OiB0cnVlLFxuICAgIH0gXSxcbiAgc3RyaW5nOiB7XG4gICAgcGF0dGVybjogLyhbXCInXSkoPzpcXFxcKD86XFxyXFxufFtcXHNcXFNdKXwoPyFcXDEpW15cXFxcXFxyXFxuXSkqXFwxLyxcbiAgICBncmVlZHk6IHRydWUsXG4gIH0sXG4gICdjbGFzcy1uYW1lJzoge1xuICAgIHBhdHRlcm46IC8oKD86XFxiKD86Y2xhc3N8aW50ZXJmYWNlfGV4dGVuZHN8aW1wbGVtZW50c3x0cmFpdHxpbnN0YW5jZW9mfG5ldylcXHMrKXwoPzpjYXRjaFxccytcXCgpKVtcXHcuXFxcXF0rL2ksXG4gICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICBpbnNpZGU6IHtcbiAgICAgIHB1bmN0dWF0aW9uOiAvWy5cXFxcXS8sXG4gICAgfSxcbiAgfSxcbiAga2V5d29yZDogL1xcYig/OmlmfGVsc2V8d2hpbGV8ZG98Zm9yfHJldHVybnxpbnxpbnN0YW5jZW9mfGZ1bmN0aW9ufG5ld3x0cnl8dGhyb3d8Y2F0Y2h8ZmluYWxseXxudWxsfGJyZWFrfGNvbnRpbnVlKVxcYi8sXG4gIGJvb2xlYW46IC9cXGIoPzp0cnVlfGZhbHNlKVxcYi8sXG4gIGZ1bmN0aW9uOiAvW2EtejAtOV9dKyg/PVxcKCkvaSxcbiAgbnVtYmVyOiAvXFxiMHhbXFxkYS1mXStcXGJ8KD86XFxiXFxkK1xcLj9cXGQqfFxcQlxcLlxcZCspKD86ZVsrLV0/XFxkKyk/L2ksXG4gIG9wZXJhdG9yOiAvLS0/fFxcK1xcKz98IT0/PT98PD0/fD49P3w9PT89P3wmJj98XFx8XFx8P3xcXD98XFwqfFxcL3x+fFxcXnwlLyxcbiAgcHVuY3R1YXRpb246IC9be31bXFxdOygpLC46XS8sXG59O1xuXG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAgICAgQmVnaW4gcHJpc20tamF2YXNjcmlwdC5qc1xuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG5QcmlzbS5sYW5ndWFnZXMuamF2YXNjcmlwdCA9IFByaXNtLmxhbmd1YWdlcy5leHRlbmQoJ2NsaWtlJywge1xuICBrZXl3b3JkOiAvXFxiKD86YXN8YXN5bmN8YXdhaXR8YnJlYWt8Y2FzZXxjYXRjaHxjbGFzc3xjb25zdHxjb250aW51ZXxkZWJ1Z2dlcnxkZWZhdWx0fGRlbGV0ZXxkb3xlbHNlfGVudW18ZXhwb3J0fGV4dGVuZHN8ZmluYWxseXxmb3J8ZnJvbXxmdW5jdGlvbnxnZXR8aWZ8aW1wbGVtZW50c3xpbXBvcnR8aW58aW5zdGFuY2VvZnxpbnRlcmZhY2V8bGV0fG5ld3xudWxsfG9mfHBhY2thZ2V8cHJpdmF0ZXxwcm90ZWN0ZWR8cHVibGljfHJldHVybnxzZXR8c3RhdGljfHN1cGVyfHN3aXRjaHx0aGlzfHRocm93fHRyeXx0eXBlb2Z8dmFyfHZvaWR8d2hpbGV8d2l0aHx5aWVsZClcXGIvLFxuICBudW1iZXI6IC9cXGIoPzowW3hYXVtcXGRBLUZhLWZdK3wwW2JCXVswMV0rfDBbb09dWzAtN10rfE5hTnxJbmZpbml0eSlcXGJ8KD86XFxiXFxkK1xcLj9cXGQqfFxcQlxcLlxcZCspKD86W0VlXVsrLV0/XFxkKyk/LyxcbiAgLy8gQWxsb3cgZm9yIGFsbCBub24tQVNDSUkgY2hhcmFjdGVycyAoU2VlIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzIwMDg0NDQpXG4gIGZ1bmN0aW9uOiAvW18kYS16XFx4QTAtXFx1RkZGRl1bJFxcd1xceEEwLVxcdUZGRkZdKig/PVxccypcXCgpL2ksXG4gIG9wZXJhdG9yOiAvLVstPV0/fFxcK1srPV0/fCE9Pz0/fDw8Pz0/fD4+Pz4/PT98PSg/Oj09P3w+KT98JlsmPV0/fFxcfFt8PV0/fFxcKlxcKj89P3xcXC89P3x+fFxcXj0/fCU9P3xcXD98XFwuezN9Lyxcbn0pO1xuXG5QcmlzbS5sYW5ndWFnZXMuaW5zZXJ0QmVmb3JlKCdqYXZhc2NyaXB0JywgJ2tleXdvcmQnLCB7XG4gIHJlZ2V4OiB7XG4gICAgcGF0dGVybjogLygoPzpefFteJFxcd1xceEEwLVxcdUZGRkYuXCInXFxdKVxcc10pXFxzKilcXC8oXFxbW15cXF1cXHJcXG5dK118XFxcXC58W14vXFxcXFxcW1xcclxcbl0pK1xcL1tnaW15dV17MCw1fSg/PVxccyooJHxbXFxyXFxuLC47fSlcXF1dKSkvLFxuICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgZ3JlZWR5OiB0cnVlLFxuICB9LFxuICAvLyBUaGlzIG11c3QgYmUgZGVjbGFyZWQgYmVmb3JlIGtleXdvcmQgYmVjYXVzZSB3ZSB1c2UgXCJmdW5jdGlvblwiIGluc2lkZSB0aGUgbG9vay1mb3J3YXJkXG4gICdmdW5jdGlvbi12YXJpYWJsZSc6IHtcbiAgICBwYXR0ZXJuOiAvW18kYS16XFx4QTAtXFx1RkZGRl1bJFxcd1xceEEwLVxcdUZGRkZdKig/PVxccyo9XFxzKig/OmZ1bmN0aW9uXFxifCg/OlxcKFteKCldKlxcKXxbXyRhLXpcXHhBMC1cXHVGRkZGXVskXFx3XFx4QTAtXFx1RkZGRl0qKVxccyo9PikpL2ksXG4gICAgYWxpYXM6ICdmdW5jdGlvbicsXG4gIH0sXG4gIGNvbnN0YW50OiAvXFxiW0EtWl1bQS1aXFxkX10qXFxiLyxcbn0pO1xuXG5QcmlzbS5sYW5ndWFnZXMuaW5zZXJ0QmVmb3JlKCdqYXZhc2NyaXB0JywgJ3N0cmluZycsIHtcbiAgJ3RlbXBsYXRlLXN0cmluZyc6IHtcbiAgICBwYXR0ZXJuOiAvYCg/OlxcXFxbXFxzXFxTXXxcXCR7W159XSt9fFteXFxcXGBdKSpgLyxcbiAgICBncmVlZHk6IHRydWUsXG4gICAgaW5zaWRlOiB7XG4gICAgICBpbnRlcnBvbGF0aW9uOiB7XG4gICAgICAgIHBhdHRlcm46IC9cXCR7W159XSt9LyxcbiAgICAgICAgaW5zaWRlOiB7XG4gICAgICAgICAgJ2ludGVycG9sYXRpb24tcHVuY3R1YXRpb24nOiB7XG4gICAgICAgICAgICBwYXR0ZXJuOiAvXlxcJHt8fSQvLFxuICAgICAgICAgICAgYWxpYXM6ICdwdW5jdHVhdGlvbicsXG4gICAgICAgICAgfSxcbiAgICAgICAgICByZXN0OiBudWxsLCAvLyBTZWUgYmVsb3dcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgICBzdHJpbmc6IC9bXFxzXFxTXSsvLFxuICAgIH0sXG4gIH0sXG59KTtcblByaXNtLmxhbmd1YWdlcy5qYXZhc2NyaXB0Wyd0ZW1wbGF0ZS1zdHJpbmcnXS5pbnNpZGUuaW50ZXJwb2xhdGlvbi5pbnNpZGUucmVzdCA9IFByaXNtLmxhbmd1YWdlcy5qYXZhc2NyaXB0O1xuXG5pZiAoUHJpc20ubGFuZ3VhZ2VzLm1hcmt1cCkge1xuICBQcmlzbS5sYW5ndWFnZXMuaW5zZXJ0QmVmb3JlKCdtYXJrdXAnLCAndGFnJywge1xuICAgIHNjcmlwdDoge1xuICAgICAgcGF0dGVybjogLyg8c2NyaXB0W1xcc1xcU10qPz4pW1xcc1xcU10qPyg/PTxcXC9zY3JpcHQ+KS9pLFxuICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgIGluc2lkZTogUHJpc20ubGFuZ3VhZ2VzLmphdmFzY3JpcHQsXG4gICAgICBhbGlhczogJ2xhbmd1YWdlLWphdmFzY3JpcHQnLFxuICAgICAgZ3JlZWR5OiB0cnVlLFxuICAgIH0sXG4gIH0pO1xufVxuXG5QcmlzbS5sYW5ndWFnZXMuanMgPSBQcmlzbS5sYW5ndWFnZXMuamF2YXNjcmlwdDtcblxuKGZ1bmN0aW9uKCl7IGlmKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcpeyB2YXIgaGVhZD1kb2N1bWVudC5oZWFkfHxkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaGVhZCcpWzBdLCBzdHlsZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpLCBjc3M9XCJcIjsgc3R5bGUudHlwZT0ndGV4dC9jc3MnOyBpZiAoc3R5bGUuc3R5bGVTaGVldCl7IHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzczsgfSBlbHNlIHsgc3R5bGUuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7IH0gaGVhZC5hcHBlbmRDaGlsZChzdHlsZSk7IH0gfSkoKTtcblxudmFyIENvZGVIaWdobGlnaHQgPSB7cmVuZGVyOiBmdW5jdGlvbigpe3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO3JldHVybiBfYygnZGl2Jyx7cmVmOlwiY29kZUJsb2NrXCJ9LFtfYygncHJlJyx7Y2xhc3M6X3ZtLmxhbmd1YWdlQ2xhc3N9LFtfYygnY29kZScsW192bS5fdChcImRlZmF1bHRcIildLDIpXSldKX0sc3RhdGljUmVuZGVyRm5zOiBbXSxcbiAgbmFtZTogJ2NvZGUtaGlnaGxpZ2h0JyxcbiAgcHJvcHM6IHtcbiAgICBsYW5ndWFnZToge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJ2phdmFzY3JpcHQnLFxuICAgIH0sXG4gIH0sXG4gIGNvbXB1dGVkOiB7XG4gICAgbGFuZ3VhZ2VDbGFzczogZnVuY3Rpb24gbGFuZ3VhZ2VDbGFzcygpIHtcbiAgICAgIHJldHVybiAoXCJsYW5ndWFnZS1cIiArICh0aGlzLmxhbmd1YWdlKSk7XG4gICAgfSxcbiAgfSxcbiAgbW91bnRlZDogZnVuY3Rpb24gbW91bnRlZCgpIHtcbiAgICBQcmlzbS5oaWdobGlnaHRBbGxVbmRlcih0aGlzLiRyZWZzLmNvZGVCbG9jayk7XG4gIH0sXG5cbiAgYmVmb3JlVXBkYXRlOiBmdW5jdGlvbiBiZWZvcmVVcGRhdGUoKSB7XG4gICAgaWYodGhpcy4kc2xvdHMuZGVmYXVsdFswXS50ZXh0KXtcblx0ICAgIHZhciBuZXdUZXh0ID0gdGhpcy4kc2xvdHMuZGVmYXVsdFswXS50ZXh0LnJlcGxhY2UoL15bXFxyXFxuXFxzXSp8W1xcclxcblxcc10qJC9nLCAnJyk7XG5cdCAgICB0aGlzLiRlbC5xdWVyeVNlbGVjdG9yKCdjb2RlJykudGV4dENvbnRlbnQgPSBuZXdUZXh0O1xuXHQgICAgUHJpc20uaGlnaGxpZ2h0QWxsVW5kZXIodGhpcy4kcmVmcy5jb2RlQmxvY2spO1xuICAgIH1cbiAgfSxcbn07XG5cbmZ1bmN0aW9uIHJlZ2lzdGVyRGlyZWN0aXZlIChlbCkge1xuICBQcmlzbS5oaWdobGlnaHRBbGxVbmRlcihlbCk7XG59XG5cbi8vIEltcG9ydCB2dWUgY29tcG9uZW50XG5cbi8vIERlY2xhcmUgaW5zdGFsbCBmdW5jdGlvbiBleGVjdXRlZCBieSBWdWUudXNlKClcbmZ1bmN0aW9uIGluc3RhbGwoVnVlKSB7XG4gIGlmIChpbnN0YWxsLmluc3RhbGxlZCkgeyByZXR1cm47IH1cbiAgaW5zdGFsbC5pbnN0YWxsZWQgPSB0cnVlO1xuICBWdWUuZGlyZWN0aXZlKCdoaWdobGlnaHQnLCByZWdpc3RlckRpcmVjdGl2ZSk7XG59XG5cbi8vIENyZWF0ZSBtb2R1bGUgZGVmaW5pdGlvbiBmb3IgVnVlLnVzZSgpXG52YXIgcGx1Z2luID0ge1xuICBpbnN0YWxsOiBpbnN0YWxsLFxufTtcblxuLy8gQXV0by1pbnN0YWxsIHdoZW4gdnVlIGlzIGZvdW5kIChlZy4gaW4gYnJvd3NlciB2aWEgPHNjcmlwdD4gdGFnKVxudmFyIEdsb2JhbFZ1ZSA9IG51bGw7XG5pZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgR2xvYmFsVnVlID0gd2luZG93LlZ1ZTtcbn0gZWxzZSBpZiAodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgR2xvYmFsVnVlID0gZ2xvYmFsLlZ1ZTtcbn1cbmlmIChHbG9iYWxWdWUpIHtcbiAgR2xvYmFsVnVlLnVzZShwbHVnaW4pO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpbnN0YWxsO1xuZXhwb3J0IHsgQ29kZUhpZ2hsaWdodCBhcyBjb21wb25lbnQgfTtcbiIsImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0gZnJvbSBcIi4vQXBwLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD00NzJjZmY2MyZcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9BcHAudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5leHBvcnQgKiBmcm9tIFwiLi9BcHAudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5cblxuLyogbm9ybWFsaXplIGNvbXBvbmVudCAqL1xuaW1wb3J0IG5vcm1hbGl6ZXIgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnROb3JtYWxpemVyLmpzXCJcbnZhciBjb21wb25lbnQgPSBub3JtYWxpemVyKFxuICBzY3JpcHQsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmYWxzZSxcbiAgbnVsbCxcbiAgbnVsbCxcbiAgbnVsbFxuICBcbilcblxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHtcbiAgdmFyIGFwaSA9IHJlcXVpcmUoXCIvVXNlcnMvbXNjYXJjaGlsbGkvU2l0ZXMvd29yay9wbHVnaW5zL3Z1ZS11bmljb3JuLWxvZy9ub2RlX21vZHVsZXMvdnVlLWhvdC1yZWxvYWQtYXBpL2Rpc3QvaW5kZXguanNcIilcbiAgYXBpLmluc3RhbGwocmVxdWlyZSgndnVlJykpXG4gIGlmIChhcGkuY29tcGF0aWJsZSkge1xuICAgIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgICBpZiAoIWFwaS5pc1JlY29yZGVkKCc0NzJjZmY2MycpKSB7XG4gICAgICBhcGkuY3JlYXRlUmVjb3JkKCc0NzJjZmY2MycsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVsb2FkKCc0NzJjZmY2MycsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH1cbiAgICBtb2R1bGUuaG90LmFjY2VwdChcIi4vQXBwLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD00NzJjZmY2MyZcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgYXBpLnJlcmVuZGVyKCc0NzJjZmY2MycsIHtcbiAgICAgICAgcmVuZGVyOiByZW5kZXIsXG4gICAgICAgIHN0YXRpY1JlbmRlckZuczogc3RhdGljUmVuZGVyRm5zXG4gICAgICB9KVxuICAgIH0pXG4gIH1cbn1cbmNvbXBvbmVudC5vcHRpb25zLl9fZmlsZSA9IFwiQXBwLnZ1ZVwiXG5leHBvcnQgZGVmYXVsdCBjb21wb25lbnQuZXhwb3J0cyIsImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0gZnJvbSBcIi4vTmF2LnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD03MzhmYWU5OCZcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9OYXYudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5leHBvcnQgKiBmcm9tIFwiLi9OYXYudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5cblxuLyogbm9ybWFsaXplIGNvbXBvbmVudCAqL1xuaW1wb3J0IG5vcm1hbGl6ZXIgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnROb3JtYWxpemVyLmpzXCJcbnZhciBjb21wb25lbnQgPSBub3JtYWxpemVyKFxuICBzY3JpcHQsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmYWxzZSxcbiAgbnVsbCxcbiAgbnVsbCxcbiAgbnVsbFxuICBcbilcblxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHtcbiAgdmFyIGFwaSA9IHJlcXVpcmUoXCIvVXNlcnMvbXNjYXJjaGlsbGkvU2l0ZXMvd29yay9wbHVnaW5zL3Z1ZS11bmljb3JuLWxvZy9ub2RlX21vZHVsZXMvdnVlLWhvdC1yZWxvYWQtYXBpL2Rpc3QvaW5kZXguanNcIilcbiAgYXBpLmluc3RhbGwocmVxdWlyZSgndnVlJykpXG4gIGlmIChhcGkuY29tcGF0aWJsZSkge1xuICAgIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgICBpZiAoIWFwaS5pc1JlY29yZGVkKCc3MzhmYWU5OCcpKSB7XG4gICAgICBhcGkuY3JlYXRlUmVjb3JkKCc3MzhmYWU5OCcsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVsb2FkKCc3MzhmYWU5OCcsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH1cbiAgICBtb2R1bGUuaG90LmFjY2VwdChcIi4vTmF2LnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD03MzhmYWU5OCZcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgYXBpLnJlcmVuZGVyKCc3MzhmYWU5OCcsIHtcbiAgICAgICAgcmVuZGVyOiByZW5kZXIsXG4gICAgICAgIHN0YXRpY1JlbmRlckZuczogc3RhdGljUmVuZGVyRm5zXG4gICAgICB9KVxuICAgIH0pXG4gIH1cbn1cbmNvbXBvbmVudC5vcHRpb25zLl9fZmlsZSA9IFwiY29tcG9uZW50cy9OYXYudnVlXCJcbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIiwiaW1wb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSBmcm9tIFwiLi9BcnJheXMudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTM4MDdjOTc1JlwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL0FycmF5cy52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmV4cG9ydCAqIGZyb20gXCIuL0FycmF5cy52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcblxuXG4vKiBub3JtYWxpemUgY29tcG9uZW50ICovXG5pbXBvcnQgbm9ybWFsaXplciBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9ydW50aW1lL2NvbXBvbmVudE5vcm1hbGl6ZXIuanNcIlxudmFyIGNvbXBvbmVudCA9IG5vcm1hbGl6ZXIoXG4gIHNjcmlwdCxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZhbHNlLFxuICBudWxsLFxuICBudWxsLFxuICBudWxsXG4gIFxuKVxuXG4vKiBob3QgcmVsb2FkICovXG5pZiAobW9kdWxlLmhvdCkge1xuICB2YXIgYXBpID0gcmVxdWlyZShcIi9Vc2Vycy9tc2NhcmNoaWxsaS9TaXRlcy93b3JrL3BsdWdpbnMvdnVlLXVuaWNvcm4tbG9nL25vZGVfbW9kdWxlcy92dWUtaG90LXJlbG9hZC1hcGkvZGlzdC9pbmRleC5qc1wiKVxuICBhcGkuaW5zdGFsbChyZXF1aXJlKCd2dWUnKSlcbiAgaWYgKGFwaS5jb21wYXRpYmxlKSB7XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICAgIGlmICghYXBpLmlzUmVjb3JkZWQoJzM4MDdjOTc1JykpIHtcbiAgICAgIGFwaS5jcmVhdGVSZWNvcmQoJzM4MDdjOTc1JywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZWxvYWQoJzM4MDdjOTc1JywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfVxuICAgIG1vZHVsZS5ob3QuYWNjZXB0KFwiLi9BcnJheXMudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTM4MDdjOTc1JlwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBhcGkucmVyZW5kZXIoJzM4MDdjOTc1Jywge1xuICAgICAgICByZW5kZXI6IHJlbmRlcixcbiAgICAgICAgc3RhdGljUmVuZGVyRm5zOiBzdGF0aWNSZW5kZXJGbnNcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxufVxuY29tcG9uZW50Lm9wdGlvbnMuX19maWxlID0gXCJjb21wb25lbnRzL2V4YW1wbGVzL0FycmF5cy52dWVcIlxuZXhwb3J0IGRlZmF1bHQgY29tcG9uZW50LmV4cG9ydHMiLCJpbXBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IGZyb20gXCIuL0Rpc2FibGVkLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD04Yzc0YzYxMiZcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9EaXNhYmxlZC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmV4cG9ydCAqIGZyb20gXCIuL0Rpc2FibGVkLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIG51bGwsXG4gIG51bGxcbiAgXG4pXG5cbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7XG4gIHZhciBhcGkgPSByZXF1aXJlKFwiL1VzZXJzL21zY2FyY2hpbGxpL1NpdGVzL3dvcmsvcGx1Z2lucy92dWUtdW5pY29ybi1sb2cvbm9kZV9tb2R1bGVzL3Z1ZS1ob3QtcmVsb2FkLWFwaS9kaXN0L2luZGV4LmpzXCIpXG4gIGFwaS5pbnN0YWxsKHJlcXVpcmUoJ3Z1ZScpKVxuICBpZiAoYXBpLmNvbXBhdGlibGUpIHtcbiAgICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gICAgaWYgKCFhcGkuaXNSZWNvcmRlZCgnOGM3NGM2MTInKSkge1xuICAgICAgYXBpLmNyZWF0ZVJlY29yZCgnOGM3NGM2MTInLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbG9hZCgnOGM3NGM2MTInLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoXCIuL0Rpc2FibGVkLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD04Yzc0YzYxMiZcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgYXBpLnJlcmVuZGVyKCc4Yzc0YzYxMicsIHtcbiAgICAgICAgcmVuZGVyOiByZW5kZXIsXG4gICAgICAgIHN0YXRpY1JlbmRlckZuczogc3RhdGljUmVuZGVyRm5zXG4gICAgICB9KVxuICAgIH0pXG4gIH1cbn1cbmNvbXBvbmVudC5vcHRpb25zLl9fZmlsZSA9IFwiY29tcG9uZW50cy9leGFtcGxlcy9EaXNhYmxlZC52dWVcIlxuZXhwb3J0IGRlZmF1bHQgY29tcG9uZW50LmV4cG9ydHMiLCJpbXBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IGZyb20gXCIuL0xvZ1ByZWZpeC52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9YzdkMzE1ZWEmXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vTG9nUHJlZml4LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuZXhwb3J0ICogZnJvbSBcIi4vTG9nUHJlZml4LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIG51bGwsXG4gIG51bGxcbiAgXG4pXG5cbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7XG4gIHZhciBhcGkgPSByZXF1aXJlKFwiL1VzZXJzL21zY2FyY2hpbGxpL1NpdGVzL3dvcmsvcGx1Z2lucy92dWUtdW5pY29ybi1sb2cvbm9kZV9tb2R1bGVzL3Z1ZS1ob3QtcmVsb2FkLWFwaS9kaXN0L2luZGV4LmpzXCIpXG4gIGFwaS5pbnN0YWxsKHJlcXVpcmUoJ3Z1ZScpKVxuICBpZiAoYXBpLmNvbXBhdGlibGUpIHtcbiAgICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gICAgaWYgKCFhcGkuaXNSZWNvcmRlZCgnYzdkMzE1ZWEnKSkge1xuICAgICAgYXBpLmNyZWF0ZVJlY29yZCgnYzdkMzE1ZWEnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbG9hZCgnYzdkMzE1ZWEnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoXCIuL0xvZ1ByZWZpeC52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9YzdkMzE1ZWEmXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGFwaS5yZXJlbmRlcignYzdkMzE1ZWEnLCB7XG4gICAgICAgIHJlbmRlcjogcmVuZGVyLFxuICAgICAgICBzdGF0aWNSZW5kZXJGbnM6IHN0YXRpY1JlbmRlckZuc1xuICAgICAgfSlcbiAgICB9KVxuICB9XG59XG5jb21wb25lbnQub3B0aW9ucy5fX2ZpbGUgPSBcImNvbXBvbmVudHMvZXhhbXBsZXMvTG9nUHJlZml4LnZ1ZVwiXG5leHBvcnQgZGVmYXVsdCBjb21wb25lbnQuZXhwb3J0cyIsImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0gZnJvbSBcIi4vTWFnaWNhbC52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9NzhhYWUyMjYmXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vTWFnaWNhbC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmV4cG9ydCAqIGZyb20gXCIuL01hZ2ljYWwudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5cblxuLyogbm9ybWFsaXplIGNvbXBvbmVudCAqL1xuaW1wb3J0IG5vcm1hbGl6ZXIgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnROb3JtYWxpemVyLmpzXCJcbnZhciBjb21wb25lbnQgPSBub3JtYWxpemVyKFxuICBzY3JpcHQsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmYWxzZSxcbiAgbnVsbCxcbiAgbnVsbCxcbiAgbnVsbFxuICBcbilcblxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHtcbiAgdmFyIGFwaSA9IHJlcXVpcmUoXCIvVXNlcnMvbXNjYXJjaGlsbGkvU2l0ZXMvd29yay9wbHVnaW5zL3Z1ZS11bmljb3JuLWxvZy9ub2RlX21vZHVsZXMvdnVlLWhvdC1yZWxvYWQtYXBpL2Rpc3QvaW5kZXguanNcIilcbiAgYXBpLmluc3RhbGwocmVxdWlyZSgndnVlJykpXG4gIGlmIChhcGkuY29tcGF0aWJsZSkge1xuICAgIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgICBpZiAoIWFwaS5pc1JlY29yZGVkKCc3OGFhZTIyNicpKSB7XG4gICAgICBhcGkuY3JlYXRlUmVjb3JkKCc3OGFhZTIyNicsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVsb2FkKCc3OGFhZTIyNicsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH1cbiAgICBtb2R1bGUuaG90LmFjY2VwdChcIi4vTWFnaWNhbC52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9NzhhYWUyMjYmXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGFwaS5yZXJlbmRlcignNzhhYWUyMjYnLCB7XG4gICAgICAgIHJlbmRlcjogcmVuZGVyLFxuICAgICAgICBzdGF0aWNSZW5kZXJGbnM6IHN0YXRpY1JlbmRlckZuc1xuICAgICAgfSlcbiAgICB9KVxuICB9XG59XG5jb21wb25lbnQub3B0aW9ucy5fX2ZpbGUgPSBcImNvbXBvbmVudHMvZXhhbXBsZXMvTWFnaWNhbC52dWVcIlxuZXhwb3J0IGRlZmF1bHQgY29tcG9uZW50LmV4cG9ydHMiLCJpbXBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IGZyb20gXCIuL09iamVjdHMudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTFmZDRiNzY5JlwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL09iamVjdHMudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5leHBvcnQgKiBmcm9tIFwiLi9PYmplY3RzLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIG51bGwsXG4gIG51bGxcbiAgXG4pXG5cbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7XG4gIHZhciBhcGkgPSByZXF1aXJlKFwiL1VzZXJzL21zY2FyY2hpbGxpL1NpdGVzL3dvcmsvcGx1Z2lucy92dWUtdW5pY29ybi1sb2cvbm9kZV9tb2R1bGVzL3Z1ZS1ob3QtcmVsb2FkLWFwaS9kaXN0L2luZGV4LmpzXCIpXG4gIGFwaS5pbnN0YWxsKHJlcXVpcmUoJ3Z1ZScpKVxuICBpZiAoYXBpLmNvbXBhdGlibGUpIHtcbiAgICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gICAgaWYgKCFhcGkuaXNSZWNvcmRlZCgnMWZkNGI3NjknKSkge1xuICAgICAgYXBpLmNyZWF0ZVJlY29yZCgnMWZkNGI3NjknLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbG9hZCgnMWZkNGI3NjknLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoXCIuL09iamVjdHMudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTFmZDRiNzY5JlwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBhcGkucmVyZW5kZXIoJzFmZDRiNzY5Jywge1xuICAgICAgICByZW5kZXI6IHJlbmRlcixcbiAgICAgICAgc3RhdGljUmVuZGVyRm5zOiBzdGF0aWNSZW5kZXJGbnNcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxufVxuY29tcG9uZW50Lm9wdGlvbnMuX19maWxlID0gXCJjb21wb25lbnRzL2V4YW1wbGVzL09iamVjdHMudnVlXCJcbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIiwiaW1wb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSBmcm9tIFwiLi9TaW1wbGUudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTI5ZWQyNWVkJlwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL1NpbXBsZS52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmV4cG9ydCAqIGZyb20gXCIuL1NpbXBsZS52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcblxuXG4vKiBub3JtYWxpemUgY29tcG9uZW50ICovXG5pbXBvcnQgbm9ybWFsaXplciBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9ydW50aW1lL2NvbXBvbmVudE5vcm1hbGl6ZXIuanNcIlxudmFyIGNvbXBvbmVudCA9IG5vcm1hbGl6ZXIoXG4gIHNjcmlwdCxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZhbHNlLFxuICBudWxsLFxuICBudWxsLFxuICBudWxsXG4gIFxuKVxuXG4vKiBob3QgcmVsb2FkICovXG5pZiAobW9kdWxlLmhvdCkge1xuICB2YXIgYXBpID0gcmVxdWlyZShcIi9Vc2Vycy9tc2NhcmNoaWxsaS9TaXRlcy93b3JrL3BsdWdpbnMvdnVlLXVuaWNvcm4tbG9nL25vZGVfbW9kdWxlcy92dWUtaG90LXJlbG9hZC1hcGkvZGlzdC9pbmRleC5qc1wiKVxuICBhcGkuaW5zdGFsbChyZXF1aXJlKCd2dWUnKSlcbiAgaWYgKGFwaS5jb21wYXRpYmxlKSB7XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICAgIGlmICghYXBpLmlzUmVjb3JkZWQoJzI5ZWQyNWVkJykpIHtcbiAgICAgIGFwaS5jcmVhdGVSZWNvcmQoJzI5ZWQyNWVkJywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZWxvYWQoJzI5ZWQyNWVkJywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfVxuICAgIG1vZHVsZS5ob3QuYWNjZXB0KFwiLi9TaW1wbGUudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTI5ZWQyNWVkJlwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBhcGkucmVyZW5kZXIoJzI5ZWQyNWVkJywge1xuICAgICAgICByZW5kZXI6IHJlbmRlcixcbiAgICAgICAgc3RhdGljUmVuZGVyRm5zOiBzdGF0aWNSZW5kZXJGbnNcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxufVxuY29tcG9uZW50Lm9wdGlvbnMuX19maWxlID0gXCJjb21wb25lbnRzL2V4YW1wbGVzL1NpbXBsZS52dWVcIlxuZXhwb3J0IGRlZmF1bHQgY29tcG9uZW50LmV4cG9ydHMiLCJpbXBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IGZyb20gXCIuL1N0eWxlcy52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9ZWViMzE1YzYmXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vU3R5bGVzLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuZXhwb3J0ICogZnJvbSBcIi4vU3R5bGVzLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIG51bGwsXG4gIG51bGxcbiAgXG4pXG5cbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7XG4gIHZhciBhcGkgPSByZXF1aXJlKFwiL1VzZXJzL21zY2FyY2hpbGxpL1NpdGVzL3dvcmsvcGx1Z2lucy92dWUtdW5pY29ybi1sb2cvbm9kZV9tb2R1bGVzL3Z1ZS1ob3QtcmVsb2FkLWFwaS9kaXN0L2luZGV4LmpzXCIpXG4gIGFwaS5pbnN0YWxsKHJlcXVpcmUoJ3Z1ZScpKVxuICBpZiAoYXBpLmNvbXBhdGlibGUpIHtcbiAgICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gICAgaWYgKCFhcGkuaXNSZWNvcmRlZCgnZWViMzE1YzYnKSkge1xuICAgICAgYXBpLmNyZWF0ZVJlY29yZCgnZWViMzE1YzYnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbG9hZCgnZWViMzE1YzYnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoXCIuL1N0eWxlcy52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9ZWViMzE1YzYmXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGFwaS5yZXJlbmRlcignZWViMzE1YzYnLCB7XG4gICAgICAgIHJlbmRlcjogcmVuZGVyLFxuICAgICAgICBzdGF0aWNSZW5kZXJGbnM6IHN0YXRpY1JlbmRlckZuc1xuICAgICAgfSlcbiAgICB9KVxuICB9XG59XG5jb21wb25lbnQub3B0aW9ucy5fX2ZpbGUgPSBcImNvbXBvbmVudHMvZXhhbXBsZXMvU3R5bGVzLnZ1ZVwiXG5leHBvcnQgZGVmYXVsdCBjb21wb25lbnQuZXhwb3J0cyIsImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0gZnJvbSBcIi4vVGV4dC52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9MDEzZjUwYTgmXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vVGV4dC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmV4cG9ydCAqIGZyb20gXCIuL1RleHQudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5cblxuLyogbm9ybWFsaXplIGNvbXBvbmVudCAqL1xuaW1wb3J0IG5vcm1hbGl6ZXIgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnROb3JtYWxpemVyLmpzXCJcbnZhciBjb21wb25lbnQgPSBub3JtYWxpemVyKFxuICBzY3JpcHQsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmYWxzZSxcbiAgbnVsbCxcbiAgbnVsbCxcbiAgbnVsbFxuICBcbilcblxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHtcbiAgdmFyIGFwaSA9IHJlcXVpcmUoXCIvVXNlcnMvbXNjYXJjaGlsbGkvU2l0ZXMvd29yay9wbHVnaW5zL3Z1ZS11bmljb3JuLWxvZy9ub2RlX21vZHVsZXMvdnVlLWhvdC1yZWxvYWQtYXBpL2Rpc3QvaW5kZXguanNcIilcbiAgYXBpLmluc3RhbGwocmVxdWlyZSgndnVlJykpXG4gIGlmIChhcGkuY29tcGF0aWJsZSkge1xuICAgIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgICBpZiAoIWFwaS5pc1JlY29yZGVkKCcwMTNmNTBhOCcpKSB7XG4gICAgICBhcGkuY3JlYXRlUmVjb3JkKCcwMTNmNTBhOCcsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVsb2FkKCcwMTNmNTBhOCcsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH1cbiAgICBtb2R1bGUuaG90LmFjY2VwdChcIi4vVGV4dC52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9MDEzZjUwYTgmXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGFwaS5yZXJlbmRlcignMDEzZjUwYTgnLCB7XG4gICAgICAgIHJlbmRlcjogcmVuZGVyLFxuICAgICAgICBzdGF0aWNSZW5kZXJGbnM6IHN0YXRpY1JlbmRlckZuc1xuICAgICAgfSlcbiAgICB9KVxuICB9XG59XG5jb21wb25lbnQub3B0aW9ucy5fX2ZpbGUgPSBcImNvbXBvbmVudHMvZXhhbXBsZXMvVGV4dC52dWVcIlxuZXhwb3J0IGRlZmF1bHQgY29tcG9uZW50LmV4cG9ydHMiLCJpbXBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IGZyb20gXCIuL1R5cGUudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTE0YzFjYzM1JlwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL1R5cGUudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5leHBvcnQgKiBmcm9tIFwiLi9UeXBlLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIG51bGwsXG4gIG51bGxcbiAgXG4pXG5cbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7XG4gIHZhciBhcGkgPSByZXF1aXJlKFwiL1VzZXJzL21zY2FyY2hpbGxpL1NpdGVzL3dvcmsvcGx1Z2lucy92dWUtdW5pY29ybi1sb2cvbm9kZV9tb2R1bGVzL3Z1ZS1ob3QtcmVsb2FkLWFwaS9kaXN0L2luZGV4LmpzXCIpXG4gIGFwaS5pbnN0YWxsKHJlcXVpcmUoJ3Z1ZScpKVxuICBpZiAoYXBpLmNvbXBhdGlibGUpIHtcbiAgICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gICAgaWYgKCFhcGkuaXNSZWNvcmRlZCgnMTRjMWNjMzUnKSkge1xuICAgICAgYXBpLmNyZWF0ZVJlY29yZCgnMTRjMWNjMzUnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbG9hZCgnMTRjMWNjMzUnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoXCIuL1R5cGUudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTE0YzFjYzM1JlwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBhcGkucmVyZW5kZXIoJzE0YzFjYzM1Jywge1xuICAgICAgICByZW5kZXI6IHJlbmRlcixcbiAgICAgICAgc3RhdGljUmVuZGVyRm5zOiBzdGF0aWNSZW5kZXJGbnNcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxufVxuY29tcG9uZW50Lm9wdGlvbnMuX19maWxlID0gXCJjb21wb25lbnRzL2V4YW1wbGVzL1R5cGUudnVlXCJcbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIiwiaW1wb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSBmcm9tIFwiLi9Vbmljb3JuTG9nLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD05MmFjMTIzYyZcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9Vbmljb3JuTG9nLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuZXhwb3J0ICogZnJvbSBcIi4vVW5pY29ybkxvZy52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmltcG9ydCBzdHlsZTAgZnJvbSBcIi4vVW5pY29ybkxvZy52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZsYW5nPXNjc3MmXCJcblxuXG4vKiBub3JtYWxpemUgY29tcG9uZW50ICovXG5pbXBvcnQgbm9ybWFsaXplciBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9ydW50aW1lL2NvbXBvbmVudE5vcm1hbGl6ZXIuanNcIlxudmFyIGNvbXBvbmVudCA9IG5vcm1hbGl6ZXIoXG4gIHNjcmlwdCxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZhbHNlLFxuICBudWxsLFxuICBudWxsLFxuICBudWxsXG4gIFxuKVxuXG4vKiBob3QgcmVsb2FkICovXG5pZiAobW9kdWxlLmhvdCkge1xuICB2YXIgYXBpID0gcmVxdWlyZShcIi9Vc2Vycy9tc2NhcmNoaWxsaS9TaXRlcy93b3JrL3BsdWdpbnMvdnVlLXVuaWNvcm4tbG9nL25vZGVfbW9kdWxlcy92dWUtaG90LXJlbG9hZC1hcGkvZGlzdC9pbmRleC5qc1wiKVxuICBhcGkuaW5zdGFsbChyZXF1aXJlKCd2dWUnKSlcbiAgaWYgKGFwaS5jb21wYXRpYmxlKSB7XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICAgIGlmICghYXBpLmlzUmVjb3JkZWQoJzkyYWMxMjNjJykpIHtcbiAgICAgIGFwaS5jcmVhdGVSZWNvcmQoJzkyYWMxMjNjJywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZWxvYWQoJzkyYWMxMjNjJywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfVxuICAgIG1vZHVsZS5ob3QuYWNjZXB0KFwiLi9Vbmljb3JuTG9nLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD05MmFjMTIzYyZcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgYXBpLnJlcmVuZGVyKCc5MmFjMTIzYycsIHtcbiAgICAgICAgcmVuZGVyOiByZW5kZXIsXG4gICAgICAgIHN0YXRpY1JlbmRlckZuczogc3RhdGljUmVuZGVyRm5zXG4gICAgICB9KVxuICAgIH0pXG4gIH1cbn1cbmNvbXBvbmVudC5vcHRpb25zLl9fZmlsZSA9IFwiZG9jcy9Vbmljb3JuTG9nLnZ1ZVwiXG5leHBvcnQgZGVmYXVsdCBjb21wb25lbnQuZXhwb3J0cyIsImltcG9ydCBtb2QgZnJvbSBcIi0hLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanM/P2Nsb25lZFJ1bGVTZXQtMVswXS5ydWxlc1swXS51c2UhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9BcHAudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIS4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzPz9jbG9uZWRSdWxlU2V0LTFbMF0ucnVsZXNbMF0udXNlIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vQXBwLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIiIsImltcG9ydCBtb2QgZnJvbSBcIi0hLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanM/P2Nsb25lZFJ1bGVTZXQtMVswXS5ydWxlc1swXS51c2UhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9OYXYudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzPz9jbG9uZWRSdWxlU2V0LTFbMF0ucnVsZXNbMF0udXNlIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vTmF2LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIiIsImltcG9ydCBtb2QgZnJvbSBcIi0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanM/P2Nsb25lZFJ1bGVTZXQtMVswXS5ydWxlc1swXS51c2UhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9BcnJheXMudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzPz9jbG9uZWRSdWxlU2V0LTFbMF0ucnVsZXNbMF0udXNlIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vQXJyYXlzLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIiIsImltcG9ydCBtb2QgZnJvbSBcIi0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanM/P2Nsb25lZFJ1bGVTZXQtMVswXS5ydWxlc1swXS51c2UhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9EaXNhYmxlZC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanM/P2Nsb25lZFJ1bGVTZXQtMVswXS5ydWxlc1swXS51c2UhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9EaXNhYmxlZC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCIiLCJpbXBvcnQgbW9kIGZyb20gXCItIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzPz9jbG9uZWRSdWxlU2V0LTFbMF0ucnVsZXNbMF0udXNlIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vTG9nUHJlZml4LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/Y2xvbmVkUnVsZVNldC0xWzBdLnJ1bGVzWzBdLnVzZSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0xvZ1ByZWZpeC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCIiLCJpbXBvcnQgbW9kIGZyb20gXCItIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzPz9jbG9uZWRSdWxlU2V0LTFbMF0ucnVsZXNbMF0udXNlIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vTWFnaWNhbC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanM/P2Nsb25lZFJ1bGVTZXQtMVswXS5ydWxlc1swXS51c2UhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9NYWdpY2FsLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIiIsImltcG9ydCBtb2QgZnJvbSBcIi0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanM/P2Nsb25lZFJ1bGVTZXQtMVswXS5ydWxlc1swXS51c2UhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9PYmplY3RzLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/Y2xvbmVkUnVsZVNldC0xWzBdLnJ1bGVzWzBdLnVzZSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL09iamVjdHMudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiIiwiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/Y2xvbmVkUnVsZVNldC0xWzBdLnJ1bGVzWzBdLnVzZSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL1NpbXBsZS52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanM/P2Nsb25lZFJ1bGVTZXQtMVswXS5ydWxlc1swXS51c2UhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9TaW1wbGUudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiIiwiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/Y2xvbmVkUnVsZVNldC0xWzBdLnJ1bGVzWzBdLnVzZSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL1N0eWxlcy52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanM/P2Nsb25lZFJ1bGVTZXQtMVswXS5ydWxlc1swXS51c2UhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9TdHlsZXMudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiIiwiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/Y2xvbmVkUnVsZVNldC0xWzBdLnJ1bGVzWzBdLnVzZSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL1RleHQudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzPz9jbG9uZWRSdWxlU2V0LTFbMF0ucnVsZXNbMF0udXNlIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vVGV4dC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCIiLCJpbXBvcnQgbW9kIGZyb20gXCItIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzPz9jbG9uZWRSdWxlU2V0LTFbMF0ucnVsZXNbMF0udXNlIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vVHlwZS52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanM/P2Nsb25lZFJ1bGVTZXQtMVswXS5ydWxlc1swXS51c2UhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9UeXBlLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIiIsImltcG9ydCBtb2QgZnJvbSBcIi0hLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanM/P2Nsb25lZFJ1bGVTZXQtMVswXS5ydWxlc1swXS51c2UhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9Vbmljb3JuTG9nLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/Y2xvbmVkUnVsZVNldC0xWzBdLnJ1bGVzWzBdLnVzZSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL1VuaWNvcm5Mb2cudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiIiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIF92bSA9IHRoaXNcbiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50XG4gIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICByZXR1cm4gX2MoXCJkaXZcIiwgW19jKFwiVW5pY29ybkxvZ1wiKV0sIDEpXG59XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cbnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZVxuXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIF92bSA9IHRoaXNcbiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50XG4gIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICByZXR1cm4gX2MoXG4gICAgXCJuYXZcIixcbiAgICB7XG4gICAgICBzdGF0aWNDbGFzczpcbiAgICAgICAgXCJuYXZiYXIgc3RpY2t5LXRvcCBuYXZiYXItZXhwYW5kLWxnIG5hdmJhci1kYXJrIGJnLWRhcmsgbWItNVwiLFxuICAgIH0sXG4gICAgW1xuICAgICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJjb250YWluZXJcIiB9LCBbXG4gICAgICAgIF9jKFwiYVwiLCB7IHN0YXRpY0NsYXNzOiBcIm5hdmJhci1icmFuZFwiLCBhdHRyczogeyBocmVmOiBcIi9cIiB9IH0sIFtcbiAgICAgICAgICBfdm0uX3YoXCLwn6aEIFZ1ZSBVbmljb3JuTG9nXCIpLFxuICAgICAgICBdKSxcbiAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgX3ZtLl9tKDApLFxuICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICBfYyhcbiAgICAgICAgICBcImRpdlwiLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiBcImNvbGxhcHNlIG5hdmJhci1jb2xsYXBzZVwiLFxuICAgICAgICAgICAgYXR0cnM6IHsgaWQ6IFwibmF2YmFyU3VwcG9ydGVkQ29udGVudFwiIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgICBbXG4gICAgICAgICAgICBfdm0uX20oMSksXG4gICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJkLWZsZXhcIiB9LCBbXG4gICAgICAgICAgICAgIF9jKFwidWxcIiwgeyBzdGF0aWNDbGFzczogXCJuYXZiYXItbmF2IG1lLWF1dG8gbWItMiBtYi1sZy0wXCIgfSwgW1xuICAgICAgICAgICAgICAgIF9jKFwibGlcIiwgeyBzdGF0aWNDbGFzczogXCJuYXYtaXRlbVwiIH0sIFtcbiAgICAgICAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICAgICAgICBcImFcIixcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiBcIm5hdi1saW5rXCIsXG4gICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogX3ZtLmxpbmtzLmdpdGh1YiB9LFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KFwiR2l0SHViXCIpXVxuICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgIF9jKFwibGlcIiwgeyBzdGF0aWNDbGFzczogXCJuYXYtaXRlbVwiIH0sIFtcbiAgICAgICAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICAgICAgICBcImFcIixcbiAgICAgICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogXCJuYXYtbGlua1wiLCBhdHRyczogeyBocmVmOiBfdm0ubGlua3MubnBtIH0gfSxcbiAgICAgICAgICAgICAgICAgICAgW192bS5fdihcIk5QTSBQYWNrYWdlXCIpXVxuICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICBdXG4gICAgICAgICksXG4gICAgICBdKSxcbiAgICBdXG4gIClcbn1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXG4gIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX3ZtID0gdGhpc1xuICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICAgIHJldHVybiBfYyhcbiAgICAgIFwiYnV0dG9uXCIsXG4gICAgICB7XG4gICAgICAgIHN0YXRpY0NsYXNzOiBcIm5hdmJhci10b2dnbGVyXCIsXG4gICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgdHlwZTogXCJidXR0b25cIixcbiAgICAgICAgICBcImRhdGEtYnMtdG9nZ2xlXCI6IFwiY29sbGFwc2VcIixcbiAgICAgICAgICBcImRhdGEtYnMtdGFyZ2V0XCI6IFwiI25hdmJhclN1cHBvcnRlZENvbnRlbnRcIixcbiAgICAgICAgICBcImFyaWEtY29udHJvbHNcIjogXCJuYXZiYXJTdXBwb3J0ZWRDb250ZW50XCIsXG4gICAgICAgICAgXCJhcmlhLWV4cGFuZGVkXCI6IFwiZmFsc2VcIixcbiAgICAgICAgICBcImFyaWEtbGFiZWxcIjogXCJUb2dnbGUgbmF2aWdhdGlvblwiLFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICAgIFtfYyhcInNwYW5cIiwgeyBzdGF0aWNDbGFzczogXCJuYXZiYXItdG9nZ2xlci1pY29uXCIgfSldXG4gICAgKVxuICB9LFxuICBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF92bSA9IHRoaXNcbiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2hcbiAgICByZXR1cm4gX2MoXCJ1bFwiLCB7IHN0YXRpY0NsYXNzOiBcIm5hdmJhci1uYXYgbWUtYXV0byBtYi0yIG1iLWxnLTBcIiB9LCBbXG4gICAgICBfYyhcImxpXCIsIHsgc3RhdGljQ2xhc3M6IFwibmF2LWl0ZW1cIiB9LCBbXG4gICAgICAgIF9jKFxuICAgICAgICAgIFwiYVwiLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiBcIm5hdi1saW5rIGFjdGl2ZVwiLFxuICAgICAgICAgICAgYXR0cnM6IHsgXCJhcmlhLWN1cnJlbnRcIjogXCJwYWdlXCIsIGhyZWY6IFwiL1wiIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgICBbX3ZtLl92KFwiSG9tZVwiKV1cbiAgICAgICAgKSxcbiAgICAgIF0pLFxuICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgIF9jKFwibGlcIiwgeyBzdGF0aWNDbGFzczogXCJuYXYtaXRlbSBkcm9wZG93blwiIH0sIFtcbiAgICAgICAgX2MoXG4gICAgICAgICAgXCJhXCIsXG4gICAgICAgICAge1xuICAgICAgICAgICAgc3RhdGljQ2xhc3M6IFwibmF2LWxpbmsgZHJvcGRvd24tdG9nZ2xlXCIsXG4gICAgICAgICAgICBhdHRyczoge1xuICAgICAgICAgICAgICBocmVmOiBcIiNcIixcbiAgICAgICAgICAgICAgaWQ6IFwiZG9jcy1kcm9wZG93blwiLFxuICAgICAgICAgICAgICByb2xlOiBcImJ1dHRvblwiLFxuICAgICAgICAgICAgICBcImRhdGEtYnMtdG9nZ2xlXCI6IFwiZHJvcGRvd25cIixcbiAgICAgICAgICAgICAgXCJhcmlhLWV4cGFuZGVkXCI6IFwiZmFsc2VcIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgICBbX3ZtLl92KFwiXFxuXFx0XFx0XFx0XFx0XFx0XFx0RG9jc1xcblxcdFxcdFxcdFxcdFxcdFwiKV1cbiAgICAgICAgKSxcbiAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgX2MoXG4gICAgICAgICAgXCJ1bFwiLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiBcImRyb3Bkb3duLW1lbnUgZHJvcGRvd24tbWVudS1kYXJrXCIsXG4gICAgICAgICAgICBhdHRyczogeyBcImFyaWEtbGFiZWxsZWRieVwiOiBcImRvY3MtZHJvcGRvd25cIiB9LFxuICAgICAgICAgIH0sXG4gICAgICAgICAgW1xuICAgICAgICAgICAgX2MoXCJsaVwiLCBbXG4gICAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICAgIFwiYVwiLFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiBcImRyb3Bkb3duLWl0ZW1cIixcbiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6IFwiI3VsLWluc3RhbGxhdGlvblwiIH0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBbX3ZtLl92KFwiXFxuXFx0XFx0XFx0XFx0XFx0XFx0XFx0XFx0SW5zdGFsbGF0aW9uXFxuXFx0XFx0XFx0XFx0XFx0XFx0XFx0XCIpXVxuICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgX2MoXCJsaVwiLCBbXG4gICAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICAgIFwiYVwiLFxuICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6IFwiZHJvcGRvd24taXRlbVwiLCBhdHRyczogeyBocmVmOiBcIiN1bC11c2FnZVwiIH0gfSxcbiAgICAgICAgICAgICAgICBbX3ZtLl92KFwiVXNhZ2VcIildXG4gICAgICAgICAgICAgICksXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICBfYyhcImxpXCIsIFtfYyhcImhyXCIsIHsgc3RhdGljQ2xhc3M6IFwiZHJvcGRvd24tZGl2aWRlclwiIH0pXSksXG4gICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgX2MoXCJsaVwiLCBbXG4gICAgICAgICAgICAgIF9jKFwiaDZcIiwgeyBzdGF0aWNDbGFzczogXCJkcm9wZG93bi1oZWFkZXJcIiB9LCBbX3ZtLl92KFwiT3B0aW9uc1wiKV0pLFxuICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgX2MoXCJsaVwiLCBbXG4gICAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICAgIFwiYVwiLFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiBcImRyb3Bkb3duLWl0ZW1cIixcbiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6IFwiI3VsLXBsdWdpbi1vcHRpb25zXCIgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIFtfdm0uX3YoXCJcXG5cXHRcXHRcXHRcXHRcXHRcXHRcXHRcXHRQbHVnaW4gT3B0aW9uc1xcblxcdFxcdFxcdFxcdFxcdFxcdFxcdFwiKV1cbiAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgIF9jKFwibGlcIiwgW1xuICAgICAgICAgICAgICBfYyhcbiAgICAgICAgICAgICAgICBcImFcIixcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogXCJkcm9wZG93bi1pdGVtXCIsXG4gICAgICAgICAgICAgICAgICBhdHRyczogeyBocmVmOiBcIiN1bC1sb2ctb3B0aW9uc1wiIH0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBbX3ZtLl92KFwiTG9nIE9wdGlvbnNcIildXG4gICAgICAgICAgICAgICksXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICBfYyhcImxpXCIsIFtfYyhcImhyXCIsIHsgc3RhdGljQ2xhc3M6IFwiZHJvcGRvd24tZGl2aWRlclwiIH0pXSksXG4gICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgX2MoXCJsaVwiLCBbXG4gICAgICAgICAgICAgIF9jKFwiaDZcIiwgeyBzdGF0aWNDbGFzczogXCJkcm9wZG93bi1oZWFkZXJcIiB9LCBbX3ZtLl92KFwiTWV0aG9kc1wiKV0pLFxuICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgX2MoXCJsaVwiLCBbXG4gICAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICAgIFwiYVwiLFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiBcImRyb3Bkb3duLWl0ZW1cIixcbiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6IFwiI3VsLWluc3RhbmNlLW1ldGhvZHNcIiB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgW192bS5fdihcIlxcblxcdFxcdFxcdFxcdFxcdFxcdFxcdFxcdEluc3RhbmNlIE1ldGhvZHNcXG5cXHRcXHRcXHRcXHRcXHRcXHRcXHRcIildXG4gICAgICAgICAgICAgICksXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICBfYyhcImxpXCIsIFtcbiAgICAgICAgICAgICAgX2MoXG4gICAgICAgICAgICAgICAgXCJhXCIsXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6IFwiZHJvcGRvd24taXRlbVwiLFxuICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogXCIjdWwtY29uc29sZS1tZXRob2RzXCIgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIFtfdm0uX3YoXCJcXG5cXHRcXHRcXHRcXHRcXHRcXHRcXHRcXHRDb25zb2xlIE1ldGhvZHNcXG5cXHRcXHRcXHRcXHRcXHRcXHRcXHRcIildXG4gICAgICAgICAgICAgICksXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICBfYyhcImxpXCIsIFtfYyhcImhyXCIsIHsgc3RhdGljQ2xhc3M6IFwiZHJvcGRvd24tZGl2aWRlclwiIH0pXSksXG4gICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgX2MoXCJsaVwiLCBbXG4gICAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICAgIFwiYVwiLFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiBcImRyb3Bkb3duLWl0ZW1cIixcbiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6IFwiI3VsLWV4YW1wbGVzXCIgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIFtfdm0uX3YoXCJFeGFtcGxlc1wiKV1cbiAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgIF1cbiAgICAgICAgKSxcbiAgICAgIF0pLFxuICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgIF9jKFwibGlcIiwgeyBzdGF0aWNDbGFzczogXCJuYXYtaXRlbSBkcm9wZG93blwiIH0sIFtcbiAgICAgICAgX2MoXG4gICAgICAgICAgXCJhXCIsXG4gICAgICAgICAge1xuICAgICAgICAgICAgc3RhdGljQ2xhc3M6IFwibmF2LWxpbmsgZHJvcGRvd24tdG9nZ2xlXCIsXG4gICAgICAgICAgICBhdHRyczoge1xuICAgICAgICAgICAgICBocmVmOiBcIiNcIixcbiAgICAgICAgICAgICAgaWQ6IFwiZXhhbXBsZXMtZHJvcGRvd25cIixcbiAgICAgICAgICAgICAgcm9sZTogXCJidXR0b25cIixcbiAgICAgICAgICAgICAgXCJkYXRhLWJzLXRvZ2dsZVwiOiBcImRyb3Bkb3duXCIsXG4gICAgICAgICAgICAgIFwiYXJpYS1leHBhbmRlZFwiOiBcImZhbHNlXCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0sXG4gICAgICAgICAgW192bS5fdihcIlxcblxcdFxcdFxcdFxcdFxcdFxcdEV4YW1wbGVzXFxuXFx0XFx0XFx0XFx0XFx0XCIpXVxuICAgICAgICApLFxuICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICBfYyhcbiAgICAgICAgICBcInVsXCIsXG4gICAgICAgICAge1xuICAgICAgICAgICAgc3RhdGljQ2xhc3M6IFwiZHJvcGRvd24tbWVudSBkcm9wZG93bi1tZW51LWRhcmtcIixcbiAgICAgICAgICAgIGF0dHJzOiB7IFwiYXJpYS1sYWJlbGxlZGJ5XCI6IFwiZXhhbXBsZXMtZHJvcGRvd25cIiB9LFxuICAgICAgICAgIH0sXG4gICAgICAgICAgW1xuICAgICAgICAgICAgX2MoXCJsaVwiLCBbXG4gICAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICAgIFwiYVwiLFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiBcImRyb3Bkb3duLWl0ZW1cIixcbiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6IFwiI3NpbXBsZS1leGFtcGxlc1wiIH0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBbX3ZtLl92KFwiU2ltcGxlXCIpXVxuICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgX2MoXCJsaVwiLCBbXG4gICAgICAgICAgICAgIF9jKFwiaDZcIiwgeyBzdGF0aWNDbGFzczogXCJkcm9wZG93bi1oZWFkZXJcIiB9LCBbX3ZtLl92KFwiT3B0aW9uc1wiKV0pLFxuICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgX2MoXCJsaVwiLCBbXG4gICAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICAgIFwiYVwiLFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiBcImRyb3Bkb3duLWl0ZW1cIixcbiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6IFwiI3RleHQtZXhhbXBsZXNcIiB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgW192bS5fdihcInRleHRcIildXG4gICAgICAgICAgICAgICksXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICBfYyhcImxpXCIsIFtcbiAgICAgICAgICAgICAgX2MoXG4gICAgICAgICAgICAgICAgXCJhXCIsXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6IFwiZHJvcGRvd24taXRlbVwiLFxuICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogXCIjdHlwZS1leGFtcGxlc1wiIH0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBbX3ZtLl92KFwidHlwZVwiKV1cbiAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgIF9jKFwibGlcIiwgW1xuICAgICAgICAgICAgICBfYyhcbiAgICAgICAgICAgICAgICBcImFcIixcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogXCJkcm9wZG93bi1pdGVtXCIsXG4gICAgICAgICAgICAgICAgICBhdHRyczogeyBocmVmOiBcIiNzdHlsZXMtZXhhbXBsZXNcIiB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgW192bS5fdihcInN0eWxlc1wiKV1cbiAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgIF9jKFwibGlcIiwgW1xuICAgICAgICAgICAgICBfYyhcbiAgICAgICAgICAgICAgICBcImFcIixcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogXCJkcm9wZG93bi1pdGVtXCIsXG4gICAgICAgICAgICAgICAgICBhdHRyczogeyBocmVmOiBcIiNkaXNhYmxlZC1leGFtcGxlc1wiIH0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBbX3ZtLl92KFwiZGlzYWJsZWRcIildXG4gICAgICAgICAgICAgICksXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICBfYyhcImxpXCIsIFtcbiAgICAgICAgICAgICAgX2MoXG4gICAgICAgICAgICAgICAgXCJhXCIsXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6IFwiZHJvcGRvd24taXRlbVwiLFxuICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogXCIjbG9nUHJlZml4LWV4YW1wbGVzXCIgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIFtfdm0uX3YoXCJcXG5cXHRcXHRcXHRcXHRcXHRcXHRcXHRcXHRsb2dQcmVmaXhcXG5cXHRcXHRcXHRcXHRcXHRcXHRcXHRcIildXG4gICAgICAgICAgICAgICksXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICBfYyhcImxpXCIsIFtcbiAgICAgICAgICAgICAgX2MoXG4gICAgICAgICAgICAgICAgXCJhXCIsXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6IFwiZHJvcGRvd24taXRlbVwiLFxuICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogXCIjbWFnaWNhbC1leGFtcGxlc1wiIH0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBbX3ZtLl92KFwibWFnaWNhbFwiKV1cbiAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgIF9jKFwibGlcIiwgW1xuICAgICAgICAgICAgICBfYyhcbiAgICAgICAgICAgICAgICBcImFcIixcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogXCJkcm9wZG93bi1pdGVtXCIsXG4gICAgICAgICAgICAgICAgICBhdHRyczogeyBocmVmOiBcIiNuYW1lLWV4YW1wbGVzXCIgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIFtfdm0uX3YoXCJuYW1lXCIpXVxuICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgX2MoXCJsaVwiLCBbXG4gICAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICAgIFwiYVwiLFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiBcImRyb3Bkb3duLWl0ZW1cIixcbiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6IFwiI29iamVjdHMtZXhhbXBsZXNcIiB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgW192bS5fdihcIm9iamVjdHNcIildXG4gICAgICAgICAgICAgICksXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICBfYyhcImxpXCIsIFtcbiAgICAgICAgICAgICAgX2MoXG4gICAgICAgICAgICAgICAgXCJhXCIsXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6IFwiZHJvcGRvd24taXRlbVwiLFxuICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogXCIjYXJyYXktZXhhbXBsZXNcIiB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgW192bS5fdihcImFycmF5XCIpXVxuICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgXSksXG4gICAgICAgICAgXVxuICAgICAgICApLFxuICAgICAgXSksXG4gICAgXSlcbiAgfSxcbl1cbnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZVxuXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIF92bSA9IHRoaXNcbiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50XG4gIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICByZXR1cm4gX2MoXCJkaXZcIiwgW1xuICAgIF92bS5fbSgwKSxcbiAgICBfdm0uX3YoXCIgXCIpLFxuICAgIF9jKFxuICAgICAgXCJkaXZcIixcbiAgICAgIHsgc3RhdGljQ2xhc3M6IFwicm93IG1iLTRcIiwgYXR0cnM6IHsgaWQ6IFwiYXJyYXktc2ltcGxlLWV4YW1wbGVcIiB9IH0sXG4gICAgICBbXG4gICAgICAgIF92bS5fbSgxKSxcbiAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgX2MoXG4gICAgICAgICAgXCJkaXZcIixcbiAgICAgICAgICB7XG4gICAgICAgICAgICBzdGF0aWNDbGFzczpcbiAgICAgICAgICAgICAgXCJjb2wteGwtNCBjb2wtNiBkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyIGp1c3RpZnktY29udGVudC1lbmRcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIFtcbiAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICBcImJ1dHRvblwiLFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6IFwiYnRuIGJ0bi1vdXRsaW5lLXByaW1hcnkgYnRuLXNtXCIsXG4gICAgICAgICAgICAgICAgYXR0cnM6IHsgdHlwZTogXCJidXR0b25cIiB9LFxuICAgICAgICAgICAgICAgIG9uOiB7IGNsaWNrOiBfdm0uc2ltcGxlRXhhbXBsZSB9LFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBbX3ZtLl92KFwiXFxuXFx0XFx0XFx0XFx0XFx0UnVuXFxuXFx0XFx0XFx0XFx0XCIpXVxuICAgICAgICAgICAgKSxcbiAgICAgICAgICBdXG4gICAgICAgICksXG4gICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgIF9jKFxuICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAgeyBzdGF0aWNDbGFzczogXCJjb2wteGwtOCBjb2wtbGctMTJcIiB9LFxuICAgICAgICAgIFtcbiAgICAgICAgICAgIF9jKFwidnVlLWNvZGUtaGlnaGxpZ2h0XCIsIHsgYXR0cnM6IHsgbGFuZ3VhZ2U6IFwianNcIiB9IH0sIFtcbiAgICAgICAgICAgICAgX2MoXCJwcmVcIiwgW1xuICAgICAgICAgICAgICAgIF92bS5fdihcbiAgICAgICAgICAgICAgICAgIFwidGhpcy4kdW5pY29ybkxvZyh7XFxuXFx0dGV4dDogJ0hlbGxvIFdvcmxkJyxcXG5cXHRhcnJheTogWydmb28nLCAnYmFyJ10sXFxufSk7XFxuXFx0XFx0XFx0XFx0XFx0XFx0XCJcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgIF0sXG4gICAgICAgICAgMVxuICAgICAgICApLFxuICAgICAgXVxuICAgICksXG4gICAgX3ZtLl92KFwiIFwiKSxcbiAgICBfYyhcbiAgICAgIFwiZGl2XCIsXG4gICAgICB7IHN0YXRpY0NsYXNzOiBcInJvdyBtYi00XCIsIGF0dHJzOiB7IGlkOiBcImFycmF5LW9iamVjdHMtZXhhbXBsZVwiIH0gfSxcbiAgICAgIFtcbiAgICAgICAgX3ZtLl9tKDIpLFxuICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICBfYyhcbiAgICAgICAgICBcImRpdlwiLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHN0YXRpY0NsYXNzOlxuICAgICAgICAgICAgICBcImNvbC14bC00IGNvbC02IGQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXIganVzdGlmeS1jb250ZW50LWVuZFwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgW1xuICAgICAgICAgICAgX2MoXG4gICAgICAgICAgICAgIFwiYnV0dG9uXCIsXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogXCJidG4gYnRuLW91dGxpbmUtcHJpbWFyeSBidG4tc21cIixcbiAgICAgICAgICAgICAgICBhdHRyczogeyB0eXBlOiBcImJ1dHRvblwiIH0sXG4gICAgICAgICAgICAgICAgb246IHsgY2xpY2s6IF92bS5vYmplY3RBcnJheSB9LFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBbX3ZtLl92KFwiXFxuXFx0XFx0XFx0XFx0XFx0UnVuXFxuXFx0XFx0XFx0XFx0XCIpXVxuICAgICAgICAgICAgKSxcbiAgICAgICAgICBdXG4gICAgICAgICksXG4gICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgIF9jKFxuICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAgeyBzdGF0aWNDbGFzczogXCJjb2wteGwtOCBjb2wtbGctMTJcIiB9LFxuICAgICAgICAgIFtcbiAgICAgICAgICAgIF9jKFwidnVlLWNvZGUtaGlnaGxpZ2h0XCIsIHsgYXR0cnM6IHsgbGFuZ3VhZ2U6IFwianNcIiB9IH0sIFtcbiAgICAgICAgICAgICAgX2MoXCJwcmVcIiwgW1xuICAgICAgICAgICAgICAgIF92bS5fdihcbiAgICAgICAgICAgICAgICAgIFwiY29uc3QgZm9vID0geyBmb286ICdmb28gJyB9O1xcbmNvbnN0IGJhciA9IHsgYmFyOiAnYmFyICcgfTtcXG5cXG50aGlzLiR1bmljb3JuTG9nKHtcXG5cXHR0ZXh0OiAnSGVsbG8gV29ybGQnLFxcblxcdGFycmF5OiBbZm9vLCBiYXJdLFxcbn0pO1xcblxcdFxcdFxcdFxcdFxcdFxcdFwiXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICBdLFxuICAgICAgICAgIDFcbiAgICAgICAgKSxcbiAgICAgIF1cbiAgICApLFxuICAgIF92bS5fdihcIiBcIiksXG4gICAgX2MoXG4gICAgICBcImRpdlwiLFxuICAgICAgeyBzdGF0aWNDbGFzczogXCJyb3cgbWItNFwiLCBhdHRyczogeyBpZDogXCJhcnJheS1zcHJlYWQtZXhhbXBsZVwiIH0gfSxcbiAgICAgIFtcbiAgICAgICAgX3ZtLl9tKDMpLFxuICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICBfYyhcbiAgICAgICAgICBcImRpdlwiLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHN0YXRpY0NsYXNzOlxuICAgICAgICAgICAgICBcImNvbC14bC00IGNvbC02IGQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXIganVzdGlmeS1jb250ZW50LWVuZFwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgW1xuICAgICAgICAgICAgX2MoXG4gICAgICAgICAgICAgIFwiYnV0dG9uXCIsXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogXCJidG4gYnRuLW91dGxpbmUtcHJpbWFyeSBidG4tc21cIixcbiAgICAgICAgICAgICAgICBhdHRyczogeyB0eXBlOiBcImJ1dHRvblwiIH0sXG4gICAgICAgICAgICAgICAgb246IHsgY2xpY2s6IF92bS5hcnJheVNwcmVhZE9wZXJhdG9yIH0sXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIFtfdm0uX3YoXCJcXG5cXHRcXHRcXHRcXHRcXHRSdW5cXG5cXHRcXHRcXHRcXHRcIildXG4gICAgICAgICAgICApLFxuICAgICAgICAgIF1cbiAgICAgICAgKSxcbiAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgX2MoXG4gICAgICAgICAgXCJkaXZcIixcbiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiBcImNvbC14bC04IGNvbC1sZy0xMlwiIH0sXG4gICAgICAgICAgW1xuICAgICAgICAgICAgX2MoXCJ2dWUtY29kZS1oaWdobGlnaHRcIiwgeyBhdHRyczogeyBsYW5ndWFnZTogXCJqc1wiIH0gfSwgW1xuICAgICAgICAgICAgICBfYyhcInByZVwiLCBbXG4gICAgICAgICAgICAgICAgX3ZtLl92KFxuICAgICAgICAgICAgICAgICAgXCJjb25zdCBmb28gPSBbJ2ZvbyddO1xcbmNvbnN0IGJhciA9IFsnYmFyJ107XFxuXFxudGhpcy4kdW5pY29ybkxvZyh7XFxuXFx0dGV4dDogJ0hlbGxvIFdvcmxkJyxcXG5cXHRhcnJheTogWy4uLmZvbywgLi4uYmFyXSxcXG59KTtcXG5cXHRcXHRcXHRcXHRcXHRcXHRcIlxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgXSksXG4gICAgICAgICAgXSxcbiAgICAgICAgICAxXG4gICAgICAgICksXG4gICAgICBdXG4gICAgKSxcbiAgXSlcbn1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXG4gIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX3ZtID0gdGhpc1xuICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICAgIHJldHVybiBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcInJvdyBtYi0yXCIgfSwgW1xuICAgICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJjb2wtMTJcIiB9LCBbXG4gICAgICAgIF9jKFwiaDVcIiwgeyBzdGF0aWNDbGFzczogXCJteS0wXCIgfSwgW19jKFwiY29kZVwiLCBbX3ZtLl92KFwiYXJyYXlcIildKV0pLFxuICAgICAgXSksXG4gICAgXSlcbiAgfSxcbiAgZnVuY3Rpb24gKCkge1xuICAgIHZhciBfdm0gPSB0aGlzXG4gICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50XG4gICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gICAgcmV0dXJuIF9jKFxuICAgICAgXCJkaXZcIixcbiAgICAgIHsgc3RhdGljQ2xhc3M6IFwiY29sLXhsLTQgY29sLTYgZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlclwiIH0sXG4gICAgICBbX2MoXCJoNlwiLCB7IHN0YXRpY0NsYXNzOiBcIm15LTBcIiB9LCBbX3ZtLl92KFwiU2luZ2xlIGFycmF5XCIpXSldXG4gICAgKVxuICB9LFxuICBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF92bSA9IHRoaXNcbiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2hcbiAgICByZXR1cm4gX2MoXG4gICAgICBcImRpdlwiLFxuICAgICAgeyBzdGF0aWNDbGFzczogXCJjb2wteGwtNCBjb2wtNiBkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyXCIgfSxcbiAgICAgIFtfYyhcImg2XCIsIHsgc3RhdGljQ2xhc3M6IFwibXktMFwiIH0sIFtfdm0uX3YoXCJVc2luZyBhbiBhcnJheSBvZiBvYmplY3RzXCIpXSldXG4gICAgKVxuICB9LFxuICBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF92bSA9IHRoaXNcbiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2hcbiAgICByZXR1cm4gX2MoXG4gICAgICBcImRpdlwiLFxuICAgICAgeyBzdGF0aWNDbGFzczogXCJjb2wteGwtNCBjb2wtNiBkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyXCIgfSxcbiAgICAgIFtcbiAgICAgICAgX2MoXCJoNlwiLCB7IHN0YXRpY0NsYXNzOiBcIm15LTBcIiB9LCBbXG4gICAgICAgICAgX3ZtLl92KFwiVXNpbmcgYXJyYXkgc3ByZWFkIE9wZXJhdG9yXCIpLFxuICAgICAgICBdKSxcbiAgICAgIF1cbiAgICApXG4gIH0sXG5dXG5yZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWVcblxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSIsInZhciByZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBfdm0gPSB0aGlzXG4gIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2hcbiAgcmV0dXJuIF9jKFwiZGl2XCIsIFtcbiAgICBfdm0uX20oMCksXG4gICAgX3ZtLl92KFwiIFwiKSxcbiAgICBfYyhcbiAgICAgIFwiZGl2XCIsXG4gICAgICB7IHN0YXRpY0NsYXNzOiBcInJvdyBtYi00XCIsIGF0dHJzOiB7IGlkOiBcImRpc2FibGVkLXNpbXBsZS1leGFtcGxlXCIgfSB9LFxuICAgICAgW1xuICAgICAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImNvbC14bC00IGNvbC02IGQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXJcIiB9LCBbXG4gICAgICAgICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJmb3JtLWNoZWNrIGZvcm0tc3dpdGNoXCIgfSwgW1xuICAgICAgICAgICAgX2MoXCJpbnB1dFwiLCB7XG4gICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBuYW1lOiBcIm1vZGVsXCIsXG4gICAgICAgICAgICAgICAgICByYXdOYW1lOiBcInYtbW9kZWxcIixcbiAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0uaXNEaXNhYmxlZCxcbiAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246IFwiaXNEaXNhYmxlZFwiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiBcImZvcm0tY2hlY2staW5wdXRcIixcbiAgICAgICAgICAgICAgYXR0cnM6IHsgdHlwZTogXCJjaGVja2JveFwiLCByb2xlOiBcInN3aXRjaFwiLCBjaGVja2VkOiBcIlwiIH0sXG4gICAgICAgICAgICAgIGRvbVByb3BzOiB7XG4gICAgICAgICAgICAgICAgY2hlY2tlZDogQXJyYXkuaXNBcnJheShfdm0uaXNEaXNhYmxlZClcbiAgICAgICAgICAgICAgICAgID8gX3ZtLl9pKF92bS5pc0Rpc2FibGVkLCBudWxsKSA+IC0xXG4gICAgICAgICAgICAgICAgICA6IF92bS5pc0Rpc2FibGVkLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBvbjoge1xuICAgICAgICAgICAgICAgIGNoYW5nZTogZnVuY3Rpb24gKCRldmVudCkge1xuICAgICAgICAgICAgICAgICAgdmFyICQkYSA9IF92bS5pc0Rpc2FibGVkLFxuICAgICAgICAgICAgICAgICAgICAkJGVsID0gJGV2ZW50LnRhcmdldCxcbiAgICAgICAgICAgICAgICAgICAgJCRjID0gJCRlbC5jaGVja2VkID8gdHJ1ZSA6IGZhbHNlXG4gICAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSgkJGEpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciAkJHYgPSBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICQkaSA9IF92bS5faSgkJGEsICQkdilcbiAgICAgICAgICAgICAgICAgICAgaWYgKCQkZWwuY2hlY2tlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICQkaSA8IDAgJiYgKF92bS5pc0Rpc2FibGVkID0gJCRhLmNvbmNhdChbJCR2XSkpXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgJCRpID4gLTEgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIChfdm0uaXNEaXNhYmxlZCA9ICQkYVxuICAgICAgICAgICAgICAgICAgICAgICAgICAuc2xpY2UoMCwgJCRpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAuY29uY2F0KCQkYS5zbGljZSgkJGkgKyAxKSkpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIF92bS5pc0Rpc2FibGVkID0gJCRjXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgIF9jKFwibGFiZWxcIiwgeyBzdGF0aWNDbGFzczogXCJmb3JtLWNoZWNrLWxhYmVsXCIgfSwgW1xuICAgICAgICAgICAgICBfdm0uX3YoXCJkaXNhYmxlZCA9XFxuXFx0XFx0XFx0XFx0XFx0XFx0XCIpLFxuICAgICAgICAgICAgICBfYyhcInNwYW5cIiwgeyBzdGF0aWNDbGFzczogXCJib29sZWFuLXN0eWxlXCIgfSwgW1xuICAgICAgICAgICAgICAgIF92bS5fdihfdm0uX3MoX3ZtLmlzRGlzYWJsZWQpKSxcbiAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICBdKSxcbiAgICAgICAgXSksXG4gICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgIF9jKFxuICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAge1xuICAgICAgICAgICAgc3RhdGljQ2xhc3M6XG4gICAgICAgICAgICAgIFwiY29sLXhsLTQgY29sLTYgZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNvbnRlbnQtZW5kXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICBbXG4gICAgICAgICAgICBfYyhcbiAgICAgICAgICAgICAgXCJidXR0b25cIixcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiBcImJ0biBidG4tb3V0bGluZS1wcmltYXJ5IGJ0bi1zbVwiLFxuICAgICAgICAgICAgICAgIGF0dHJzOiB7IHR5cGU6IFwiYnV0dG9uXCIgfSxcbiAgICAgICAgICAgICAgICBvbjogeyBjbGljazogX3ZtLnNpbXBsZUV4YW1wbGUgfSxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgW192bS5fdihcIlxcblxcdFxcdFxcdFxcdFxcdFJ1blxcblxcdFxcdFxcdFxcdFwiKV1cbiAgICAgICAgICAgICksXG4gICAgICAgICAgXVxuICAgICAgICApLFxuICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICBfYyhcbiAgICAgICAgICBcImRpdlwiLFxuICAgICAgICAgIHsgc3RhdGljQ2xhc3M6IFwiY29sLXhsLTggY29sLWxnLTEyXCIgfSxcbiAgICAgICAgICBbXG4gICAgICAgICAgICBfYyhcInZ1ZS1jb2RlLWhpZ2hsaWdodFwiLCB7IGF0dHJzOiB7IGxhbmd1YWdlOiBcImpzXCIgfSB9LCBbXG4gICAgICAgICAgICAgIF9jKFwicHJlXCIsIFtcbiAgICAgICAgICAgICAgICBfdm0uX3YoXG4gICAgICAgICAgICAgICAgICBcInRoaXMuJHVuaWNvcm5Mb2coe1xcblxcdHRleHQ6ICdIZWxsbyBXb3JsZCcsXFxuXFx0ZGlzYWJsZWQ6IHRydWUsXFxufSk7XFxuXFx0XFx0XFx0XFx0XFx0XFx0XCJcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgIF0sXG4gICAgICAgICAgMVxuICAgICAgICApLFxuICAgICAgXVxuICAgICksXG4gICAgX3ZtLl92KFwiIFwiKSxcbiAgICBfYyhcbiAgICAgIFwiZGl2XCIsXG4gICAgICB7XG4gICAgICAgIHN0YXRpY0NsYXNzOiBcInJvdyBtYi00XCIsXG4gICAgICAgIGF0dHJzOiB7IGlkOiBcImRpc2FibGVkLWNvbmRpdGlvbmFsLWV4YW1wbGVcIiB9LFxuICAgICAgfSxcbiAgICAgIFtcbiAgICAgICAgX3ZtLl9tKDEpLFxuICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICBfYyhcbiAgICAgICAgICBcImRpdlwiLFxuICAgICAgICAgIHsgc3RhdGljQ2xhc3M6IFwiY29sLXhsLTggY29sLWxnLTEyXCIgfSxcbiAgICAgICAgICBbXG4gICAgICAgICAgICBfYyhcInZ1ZS1jb2RlLWhpZ2hsaWdodFwiLCB7IGF0dHJzOiB7IGxhbmd1YWdlOiBcImpzXCIgfSB9LCBbXG4gICAgICAgICAgICAgIF9jKFwicHJlXCIsIFtcbiAgICAgICAgICAgICAgICBfdm0uX3YoXG4gICAgICAgICAgICAgICAgICBcInRoaXMuJHVuaWNvcm5Mb2coe1xcblxcdHRleHQ6ICdIZWxsbyBXb3JsZCcsXFxuXFx0ZGlzYWJsZWQ6IHByb2Nlc3MuZW52LlVOSUNPUk5fTE9HICE9PSAndHJ1ZScsXFxufSk7XFxuXFx0XFx0XFx0XFx0XFx0XFx0XCJcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgIF0sXG4gICAgICAgICAgMVxuICAgICAgICApLFxuICAgICAgXVxuICAgICksXG4gIF0pXG59XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW1xuICBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF92bSA9IHRoaXNcbiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2hcbiAgICByZXR1cm4gX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJyb3cgbWItMlwiIH0sIFtcbiAgICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiY29sLTEyXCIgfSwgW1xuICAgICAgICBfYyhcImg1XCIsIHsgc3RhdGljQ2xhc3M6IFwibXktMFwiIH0sIFtfYyhcImNvZGVcIiwgW192bS5fdihcImRpc2FibGVkXCIpXSldKSxcbiAgICAgIF0pLFxuICAgIF0pXG4gIH0sXG4gIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX3ZtID0gdGhpc1xuICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICAgIHJldHVybiBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImNvbC0xMlwiIH0sIFtcbiAgICAgIF9jKFwiaDZcIiwgeyBzdGF0aWNDbGFzczogXCJteS0wXCIgfSwgW192bS5fdihcIlVzaW5nIGFuIC5lbnYgdmFyaWFibGVcIildKSxcbiAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImZzdC1pdGFsaWNcIiB9LCBbXG4gICAgICAgIF92bS5fdihcbiAgICAgICAgICBcIlxcblxcdFxcdFxcdFxcdFxcdENvbmRpdGlvbmFsbHkgc2V0IHNvIGl0IHdpbGwgbG9nIGluIGRldmVsb3BtZW50LCBidXQgbm90IG9uIHRoZVxcblxcdFxcdFxcdFxcdFxcdHByb2R1Y3Rpb24gc2l0ZS5cXG5cXHRcXHRcXHRcXHRcIlxuICAgICAgICApLFxuICAgICAgXSksXG4gICAgXSlcbiAgfSxcbl1cbnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZVxuXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIF92bSA9IHRoaXNcbiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50XG4gIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICByZXR1cm4gX2MoXCJkaXZcIiwgW1xuICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwicm93IG1iLTJcIiB9LCBbXG4gICAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImNvbC0xMlwiIH0sIFtcbiAgICAgICAgX2MoXCJoNVwiLCB7IHN0YXRpY0NsYXNzOiBcIm15LTBcIiB9LCBbXG4gICAgICAgICAgX2MoXCJjb2RlXCIsIFtfdm0uX3YoX3ZtLl9zKF92bS5pc05hbWVPcHRpb24gPyBcIm5hbWVcIiA6IFwibG9nUHJlZml4XCIpKV0pLFxuICAgICAgICBdKSxcbiAgICAgIF0pLFxuICAgIF0pLFxuICAgIF92bS5fdihcIiBcIiksXG4gICAgIV92bS5pc05hbWVPcHRpb25cbiAgICAgID8gX2MoXG4gICAgICAgICAgXCJkaXZcIixcbiAgICAgICAgICB7XG4gICAgICAgICAgICBzdGF0aWNDbGFzczogXCJyb3cgbWItNFwiLFxuICAgICAgICAgICAgYXR0cnM6IHsgaWQ6IFwibG9nUHJlZml4LXNpbXBsZS1leGFtcGxlXCIgfSxcbiAgICAgICAgICB9LFxuICAgICAgICAgIFtcbiAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICBcImRpdlwiLFxuICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiBcImNvbC14bC00IGNvbC02IGQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXJcIiB9LFxuICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgX2MoXCJpbnB1dFwiLCB7XG4gICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIm1vZGVsXCIsXG4gICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogXCJ2LW1vZGVsXCIsXG4gICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS5sb2dQcmVmaXgsXG4gICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogXCJsb2dQcmVmaXhcIixcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogXCJmb3JtLWNvbnRyb2xcIixcbiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwidGV4dFwiLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogXCJbQnVubmllc106XCIsXG4gICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBcIltCdW5uaWVzXTpcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICBkb21Qcm9wczogeyB2YWx1ZTogX3ZtLmxvZ1ByZWZpeCB9LFxuICAgICAgICAgICAgICAgICAgb246IHtcbiAgICAgICAgICAgICAgICAgICAgaW5wdXQ6IGZ1bmN0aW9uICgkZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoJGV2ZW50LnRhcmdldC5jb21wb3NpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICBfdm0ubG9nUHJlZml4ID0gJGV2ZW50LnRhcmdldC52YWx1ZVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICBfYyhcbiAgICAgICAgICAgICAgXCJkaXZcIixcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOlxuICAgICAgICAgICAgICAgICAgXCJjb2wteGwtNCBjb2wtNiBkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyIGp1c3RpZnktY29udGVudC1lbmRcIixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICAgICAgXCJidXR0b25cIixcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6IFwiYnRuIGJ0bi1vdXRsaW5lLXByaW1hcnkgYnRuLXNtXCIsXG4gICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHR5cGU6IFwiYnV0dG9uXCIgfSxcbiAgICAgICAgICAgICAgICAgICAgb246IHsgY2xpY2s6IF92bS5zaW1wbGVFeGFtcGxlIH0sXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgW192bS5fdihcIlxcblxcdFxcdFxcdFxcdFxcdFJ1blxcblxcdFxcdFxcdFxcdFwiKV1cbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICBdXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICBcImRpdlwiLFxuICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiBcImNvbC14bC04IGNvbC1sZy0xMlwiIH0sXG4gICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICBfYyhcInZ1ZS1jb2RlLWhpZ2hsaWdodFwiLCB7IGF0dHJzOiB7IGxhbmd1YWdlOiBcImpzXCIgfSB9LCBbXG4gICAgICAgICAgICAgICAgICBfYyhcInByZVwiLCBbXG4gICAgICAgICAgICAgICAgICAgIF92bS5fdihcbiAgICAgICAgICAgICAgICAgICAgICBcInRoaXMuJHVuaWNvcm5Mb2coe1xcblxcdHRleHQ6ICdIZWxsbyBXb3JsZCcsXFxuXFx0bG9nUHJlZml4OiAnW0J1bm5pZXNdOicsXFxufSk7XFxuXFx0XFx0XFx0XFx0XFx0XFx0XCJcbiAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAxXG4gICAgICAgICAgICApLFxuICAgICAgICAgIF1cbiAgICAgICAgKVxuICAgICAgOiBfdm0uX2UoKSxcbiAgICBfdm0uX3YoXCIgXCIpLFxuICAgICFfdm0uaXNOYW1lT3B0aW9uXG4gICAgICA/IF9jKFxuICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAgeyBzdGF0aWNDbGFzczogXCJyb3cgbWItNFwiLCBhdHRyczogeyBpZDogXCJuYW1lLWRlZmF1bHQtZXhhbXBsZVwiIH0gfSxcbiAgICAgICAgICBbXG4gICAgICAgICAgICBfdm0uX20oMCksXG4gICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgX2MoXG4gICAgICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6IFwiY29sLXhsLTQgY29sLTYgZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlclwiIH0sXG4gICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImZvcm0tY2hlY2sgZm9ybS1zd2l0Y2hcIiB9LCBbXG4gICAgICAgICAgICAgICAgICBfYyhcImlucHV0XCIsIHtcbiAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogW1xuICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwibW9kZWxcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6IFwidi1tb2RlbFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS53aXRoTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246IFwid2l0aE5hbWVcIixcbiAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogXCJmb3JtLWNoZWNrLWlucHV0XCIsXG4gICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHR5cGU6IFwiY2hlY2tib3hcIiwgcm9sZTogXCJzd2l0Y2hcIiwgY2hlY2tlZDogXCJcIiB9LFxuICAgICAgICAgICAgICAgICAgICBkb21Qcm9wczoge1xuICAgICAgICAgICAgICAgICAgICAgIGNoZWNrZWQ6IEFycmF5LmlzQXJyYXkoX3ZtLndpdGhOYW1lKVxuICAgICAgICAgICAgICAgICAgICAgICAgPyBfdm0uX2koX3ZtLndpdGhOYW1lLCBudWxsKSA+IC0xXG4gICAgICAgICAgICAgICAgICAgICAgICA6IF92bS53aXRoTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgb246IHtcbiAgICAgICAgICAgICAgICAgICAgICBjaGFuZ2U6IGZ1bmN0aW9uICgkZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciAkJGEgPSBfdm0ud2l0aE5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICQkZWwgPSAkZXZlbnQudGFyZ2V0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAkJGMgPSAkJGVsLmNoZWNrZWQgPyB0cnVlIDogZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KCQkYSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyICQkdiA9IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJCRpID0gX3ZtLl9pKCQkYSwgJCR2KVxuICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJCRlbC5jaGVja2VkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJCRpIDwgMCAmJiAoX3ZtLndpdGhOYW1lID0gJCRhLmNvbmNhdChbJCR2XSkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJCRpID4gLTEgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChfdm0ud2l0aE5hbWUgPSAkJGFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnNsaWNlKDAsICQkaSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmNvbmNhdCgkJGEuc2xpY2UoJCRpICsgMSkpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0ud2l0aE5hbWUgPSAkJGNcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgX2MoXCJsYWJlbFwiLCB7IHN0YXRpY0NsYXNzOiBcImZvcm0tY2hlY2stbGFiZWxcIiB9LCBbXG4gICAgICAgICAgICAgICAgICAgIF92bS5fdihcImxvZ1ByZWZpeCBvcHRpb24gPVxcblxcdFxcdFxcdFxcdFxcdFxcdFwiKSxcbiAgICAgICAgICAgICAgICAgICAgX2MoXCJzcGFuXCIsIHsgc3RhdGljQ2xhc3M6IFwiYm9vbGVhbi1zdHlsZVwiIH0sIFtcbiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoX3ZtLl9zKF92bS53aXRoTmFtZSkpLFxuICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIHdpdGggZGVmYXVsdFxcblxcdFxcdFxcdFxcdFxcdFxcdFwiKSxcbiAgICAgICAgICAgICAgICAgICAgX2MoXCJjb2RlXCIsIFtfdm0uX3YoXCJuYW1lXCIpXSksXG4gICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBvcHRpb25cXG5cXHRcXHRcXHRcXHRcXHRcIiksXG4gICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICBfYyhcbiAgICAgICAgICAgICAgXCJkaXZcIixcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOlxuICAgICAgICAgICAgICAgICAgXCJjb2wteGwtNCBjb2wtNiBkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyIGp1c3RpZnktY29udGVudC1lbmRcIixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICAgICAgXCJidXR0b25cIixcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6IFwiYnRuIGJ0bi1vdXRsaW5lLXByaW1hcnkgYnRuLXNtXCIsXG4gICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHR5cGU6IFwiYnV0dG9uXCIgfSxcbiAgICAgICAgICAgICAgICAgICAgb246IHsgY2xpY2s6IF92bS5leGFtcGxlTmFtZURlZmF1bHQgfSxcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICBbX3ZtLl92KFwiXFxuXFx0XFx0XFx0XFx0XFx0UnVuXFxuXFx0XFx0XFx0XFx0XCIpXVxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgX2MoXG4gICAgICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6IFwiY29sLXhsLTggY29sLWxnLTEyXCIgfSxcbiAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgIF9jKFwidnVlLWNvZGUtaGlnaGxpZ2h0XCIsIHsgYXR0cnM6IHsgbGFuZ3VhZ2U6IFwianNcIiB9IH0sIFtcbiAgICAgICAgICAgICAgICAgIF9jKFwicHJlXCIsIFtcbiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFxuICAgICAgICAgICAgICAgICAgICAgIFwidGhpcy4kdW5pY29ybkxvZyh7XFxuXFx0dGV4dDogJ0hlbGxvIFdvcmxkJyxcXG5cXHRsb2dQcmVmaXg6IHRydWUsXFxufSk7XFxuXFx0XFx0XFx0XFx0XFx0XFx0XCJcbiAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAxXG4gICAgICAgICAgICApLFxuICAgICAgICAgIF1cbiAgICAgICAgKVxuICAgICAgOiBfdm0uX2UoKSxcbiAgICBfdm0uX3YoXCIgXCIpLFxuICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwicm93IG1iLTRcIiwgYXR0cnM6IHsgaWQ6IFwibmFtZS1leGFtcGxlXCIgfSB9LCBbXG4gICAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImNvbC14bC00IGNvbC02IGQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXJcIiB9LCBbXG4gICAgICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiZm9ybS1jaGVjayBmb3JtLXN3aXRjaFwiIH0sIFtcbiAgICAgICAgICBfYyhcImlucHV0XCIsIHtcbiAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFtcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwibW9kZWxcIixcbiAgICAgICAgICAgICAgICByYXdOYW1lOiBcInYtbW9kZWxcIixcbiAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLndpdGhOYW1lLFxuICAgICAgICAgICAgICAgIGV4cHJlc3Npb246IFwid2l0aE5hbWVcIixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBzdGF0aWNDbGFzczogXCJmb3JtLWNoZWNrLWlucHV0XCIsXG4gICAgICAgICAgICBhdHRyczogeyB0eXBlOiBcImNoZWNrYm94XCIsIHJvbGU6IFwic3dpdGNoXCIsIGNoZWNrZWQ6IFwiXCIgfSxcbiAgICAgICAgICAgIGRvbVByb3BzOiB7XG4gICAgICAgICAgICAgIGNoZWNrZWQ6IEFycmF5LmlzQXJyYXkoX3ZtLndpdGhOYW1lKVxuICAgICAgICAgICAgICAgID8gX3ZtLl9pKF92bS53aXRoTmFtZSwgbnVsbCkgPiAtMVxuICAgICAgICAgICAgICAgIDogX3ZtLndpdGhOYW1lLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9uOiB7XG4gICAgICAgICAgICAgIGNoYW5nZTogZnVuY3Rpb24gKCRldmVudCkge1xuICAgICAgICAgICAgICAgIHZhciAkJGEgPSBfdm0ud2l0aE5hbWUsXG4gICAgICAgICAgICAgICAgICAkJGVsID0gJGV2ZW50LnRhcmdldCxcbiAgICAgICAgICAgICAgICAgICQkYyA9ICQkZWwuY2hlY2tlZCA/IHRydWUgOiBmYWxzZVxuICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KCQkYSkpIHtcbiAgICAgICAgICAgICAgICAgIHZhciAkJHYgPSBudWxsLFxuICAgICAgICAgICAgICAgICAgICAkJGkgPSBfdm0uX2koJCRhLCAkJHYpXG4gICAgICAgICAgICAgICAgICBpZiAoJCRlbC5jaGVja2VkKSB7XG4gICAgICAgICAgICAgICAgICAgICQkaSA8IDAgJiYgKF92bS53aXRoTmFtZSA9ICQkYS5jb25jYXQoWyQkdl0pKVxuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgJCRpID4gLTEgJiZcbiAgICAgICAgICAgICAgICAgICAgICAoX3ZtLndpdGhOYW1lID0gJCRhXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2xpY2UoMCwgJCRpKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmNvbmNhdCgkJGEuc2xpY2UoJCRpICsgMSkpKVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBfdm0ud2l0aE5hbWUgPSAkJGNcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0pLFxuICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgX2MoXCJsYWJlbFwiLCB7IHN0YXRpY0NsYXNzOiBcImZvcm0tY2hlY2stbGFiZWxcIiB9LCBbXG4gICAgICAgICAgICBfdm0uX3YoXCJsb2dQcmVmaXggPSBcIiksXG4gICAgICAgICAgICBfYyhcInNwYW5cIiwgeyBzdGF0aWNDbGFzczogXCJib29sZWFuLXN0eWxlXCIgfSwgW1xuICAgICAgICAgICAgICBfdm0uX3YoX3ZtLl9zKF92bS53aXRoTmFtZSkpLFxuICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBfdm0uX3YoXCIgd2l0aFxcblxcdFxcdFxcdFxcdFxcdFxcdFwiKSxcbiAgICAgICAgICAgIF9jKFwiY29kZVwiLCBbX3ZtLl92KFwibmFtZVwiKV0pLFxuICAgICAgICAgICAgX3ZtLl92KFwiIG9wdGlvbiBzZXRcXG5cXHRcXHRcXHRcXHRcXHRcIiksXG4gICAgICAgICAgXSksXG4gICAgICAgIF0pLFxuICAgICAgXSksXG4gICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgX2MoXG4gICAgICAgIFwiZGl2XCIsXG4gICAgICAgIHtcbiAgICAgICAgICBzdGF0aWNDbGFzczpcbiAgICAgICAgICAgIFwiY29sLXhsLTQgY29sLTYgZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNvbnRlbnQtZW5kXCIsXG4gICAgICAgIH0sXG4gICAgICAgIFtcbiAgICAgICAgICBfYyhcbiAgICAgICAgICAgIFwiYnV0dG9uXCIsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiBcImJ0biBidG4tb3V0bGluZS1wcmltYXJ5IGJ0bi1zbVwiLFxuICAgICAgICAgICAgICBhdHRyczogeyB0eXBlOiBcImJ1dHRvblwiIH0sXG4gICAgICAgICAgICAgIG9uOiB7IGNsaWNrOiBfdm0uZXhhbXBsZU5hbWUgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBbX3ZtLl92KFwiXFxuXFx0XFx0XFx0XFx0XFx0UnVuXFxuXFx0XFx0XFx0XFx0XCIpXVxuICAgICAgICAgICksXG4gICAgICAgIF1cbiAgICAgICksXG4gICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgX2MoXG4gICAgICAgIFwiZGl2XCIsXG4gICAgICAgIHsgc3RhdGljQ2xhc3M6IFwiY29sLXhsLTggY29sLWxnLTEyXCIgfSxcbiAgICAgICAgW1xuICAgICAgICAgIF9jKFwidnVlLWNvZGUtaGlnaGxpZ2h0XCIsIHsgYXR0cnM6IHsgbGFuZ3VhZ2U6IFwianNcIiB9IH0sIFtcbiAgICAgICAgICAgIF9jKFwicHJlXCIsIFtcbiAgICAgICAgICAgICAgX3ZtLl92KFxuICAgICAgICAgICAgICAgIFwidGhpcy4kdW5pY29ybkxvZyh7XFxuXFx0dGV4dDogJ0hlbGxvIFdvcmxkJyxcXG5cXHRsb2dQcmVmaXg6IHRydWUsXFxuXFx0bmFtZTogJ1wiICtcbiAgICAgICAgICAgICAgICAgIF92bS5fcyhfdm0uaXNOYW1lT3B0aW9uID8gXCJTdXNhblwiIDogXCJCb2JcIikgK1xuICAgICAgICAgICAgICAgICAgXCInLFxcbn0pO1xcblxcdFxcdFxcdFxcdFxcdFxcdFwiXG4gICAgICAgICAgICAgICksXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICBdKSxcbiAgICAgICAgXSxcbiAgICAgICAgMVxuICAgICAgKSxcbiAgICBdKSxcbiAgXSlcbn1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXG4gIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX3ZtID0gdGhpc1xuICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICAgIHJldHVybiBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImNvbC0xMiBtYi0yXCIgfSwgW1xuICAgICAgX3ZtLl92KFwiXFxuXFx0XFx0XFx0XFx0SWYgXCIpLFxuICAgICAgX2MoXCJjb2RlXCIsIFtfdm0uX3YoXCJsb2dQcmVmaXhcIildKSxcbiAgICAgIF92bS5fdihcIiBvcHRpb24gaXMgc2V0IGFzIGFcXG5cXHRcXHRcXHRcXHRcIiksXG4gICAgICBfYyhcInNwYW5cIiwgeyBzdGF0aWNDbGFzczogXCJvcHRpb24tdHlwZVwiIH0sIFtfdm0uX3YoXCJCb29sZWFuXCIpXSksXG4gICAgICBfdm0uX3YoXCIgb2ZcXG5cXHRcXHRcXHRcXHRcIiksXG4gICAgICBfYyhcInNwYW5cIiwgeyBzdGF0aWNDbGFzczogXCJib29sZWFuLXN0eWxlXCIgfSwgW192bS5fdihcInRydWVcIildKSxcbiAgICAgIF92bS5fdihcIiwgaXQgd2lsbCB1c2UgdGhlXFxuXFx0XFx0XFx0XFx0XCIpLFxuICAgICAgX2MoXCJjb2RlXCIsIFtfdm0uX3YoXCJuYW1lXCIpXSksXG4gICAgICBfdm0uX3YoXCIgb3B0aW9uIGZvciB0aGUgcHJlZml4LlxcblxcdFxcdFxcdFwiKSxcbiAgICBdKVxuICB9LFxuXVxucmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlXG5cbmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0iLCJ2YXIgcmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICB2YXIgX3ZtID0gdGhpc1xuICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gIHJldHVybiBfYyhcImRpdlwiLCBbXG4gICAgX3ZtLl9tKDApLFxuICAgIF92bS5fdihcIiBcIiksXG4gICAgX2MoXG4gICAgICBcImRpdlwiLFxuICAgICAgeyBzdGF0aWNDbGFzczogXCJyb3cgbWItNFwiLCBhdHRyczogeyBpZDogXCJtYWdpY2FsLXNpbXBsZS1leGFtcGxlXCIgfSB9LFxuICAgICAgW1xuICAgICAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImNvbC14bC00IGNvbC02IGQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXJcIiB9LCBbXG4gICAgICAgICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJmb3JtLWNoZWNrIGZvcm0tc3dpdGNoXCIgfSwgW1xuICAgICAgICAgICAgX2MoXCJpbnB1dFwiLCB7XG4gICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBuYW1lOiBcIm1vZGVsXCIsXG4gICAgICAgICAgICAgICAgICByYXdOYW1lOiBcInYtbW9kZWxcIixcbiAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0ubWFnaWNhbCxcbiAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246IFwibWFnaWNhbFwiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiBcImZvcm0tY2hlY2staW5wdXRcIixcbiAgICAgICAgICAgICAgYXR0cnM6IHsgdHlwZTogXCJjaGVja2JveFwiLCByb2xlOiBcInN3aXRjaFwiLCBjaGVja2VkOiBcIlwiIH0sXG4gICAgICAgICAgICAgIGRvbVByb3BzOiB7XG4gICAgICAgICAgICAgICAgY2hlY2tlZDogQXJyYXkuaXNBcnJheShfdm0ubWFnaWNhbClcbiAgICAgICAgICAgICAgICAgID8gX3ZtLl9pKF92bS5tYWdpY2FsLCBudWxsKSA+IC0xXG4gICAgICAgICAgICAgICAgICA6IF92bS5tYWdpY2FsLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBvbjoge1xuICAgICAgICAgICAgICAgIGNoYW5nZTogZnVuY3Rpb24gKCRldmVudCkge1xuICAgICAgICAgICAgICAgICAgdmFyICQkYSA9IF92bS5tYWdpY2FsLFxuICAgICAgICAgICAgICAgICAgICAkJGVsID0gJGV2ZW50LnRhcmdldCxcbiAgICAgICAgICAgICAgICAgICAgJCRjID0gJCRlbC5jaGVja2VkID8gdHJ1ZSA6IGZhbHNlXG4gICAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSgkJGEpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciAkJHYgPSBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICQkaSA9IF92bS5faSgkJGEsICQkdilcbiAgICAgICAgICAgICAgICAgICAgaWYgKCQkZWwuY2hlY2tlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICQkaSA8IDAgJiYgKF92bS5tYWdpY2FsID0gJCRhLmNvbmNhdChbJCR2XSkpXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgJCRpID4gLTEgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIChfdm0ubWFnaWNhbCA9ICQkYVxuICAgICAgICAgICAgICAgICAgICAgICAgICAuc2xpY2UoMCwgJCRpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAuY29uY2F0KCQkYS5zbGljZSgkJGkgKyAxKSkpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIF92bS5tYWdpY2FsID0gJCRjXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgIF9jKFwibGFiZWxcIiwgeyBzdGF0aWNDbGFzczogXCJmb3JtLWNoZWNrLWxhYmVsXCIgfSwgW1xuICAgICAgICAgICAgICBfdm0uX3YoXCJtYWdpY2FsID1cXG5cXHRcXHRcXHRcXHRcXHRcXHRcIiksXG4gICAgICAgICAgICAgIF9jKFwic3BhblwiLCB7IHN0YXRpY0NsYXNzOiBcImJvb2xlYW4tc3R5bGVcIiB9LCBbXG4gICAgICAgICAgICAgICAgX3ZtLl92KF92bS5fcyhfdm0ubWFnaWNhbCkpLFxuICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgIF0pLFxuICAgICAgICBdKSxcbiAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgX2MoXG4gICAgICAgICAgXCJkaXZcIixcbiAgICAgICAgICB7XG4gICAgICAgICAgICBzdGF0aWNDbGFzczpcbiAgICAgICAgICAgICAgXCJjb2wteGwtNCBjb2wtNiBkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyIGp1c3RpZnktY29udGVudC1lbmRcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIFtcbiAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICBcImJ1dHRvblwiLFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6IFwiYnRuIGJ0bi1vdXRsaW5lLXByaW1hcnkgYnRuLXNtXCIsXG4gICAgICAgICAgICAgICAgYXR0cnM6IHsgdHlwZTogXCJidXR0b25cIiB9LFxuICAgICAgICAgICAgICAgIG9uOiB7IGNsaWNrOiBfdm0uc2ltcGxlRXhhbXBsZSB9LFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBbX3ZtLl92KFwiXFxuXFx0XFx0XFx0XFx0XFx0UnVuXFxuXFx0XFx0XFx0XFx0XCIpXVxuICAgICAgICAgICAgKSxcbiAgICAgICAgICBdXG4gICAgICAgICksXG4gICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgIF9jKFxuICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAgeyBzdGF0aWNDbGFzczogXCJjb2wteGwtOCBjb2wtbGctMTJcIiB9LFxuICAgICAgICAgIFtcbiAgICAgICAgICAgIF9jKFwidnVlLWNvZGUtaGlnaGxpZ2h0XCIsIHsgYXR0cnM6IHsgbGFuZ3VhZ2U6IFwianNcIiB9IH0sIFtcbiAgICAgICAgICAgICAgX2MoXCJwcmVcIiwgW1xuICAgICAgICAgICAgICAgIF92bS5fdihcbiAgICAgICAgICAgICAgICAgIFwidGhpcy4kdW5pY29ybkxvZyh7XFxuXFx0dGV4dDogJ0hlbGxvIFdvcmxkJyxcXG5cXHRtYWdpY2FsOiB0cnVlLFxcbn0pO1xcblxcdFxcdFxcdFxcdFxcdFxcdFwiXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICBdLFxuICAgICAgICAgIDFcbiAgICAgICAgKSxcbiAgICAgIF1cbiAgICApLFxuICBdKVxufVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtcbiAgZnVuY3Rpb24gKCkge1xuICAgIHZhciBfdm0gPSB0aGlzXG4gICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50XG4gICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gICAgcmV0dXJuIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwicm93IG1iLTJcIiB9LCBbXG4gICAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImNvbC0xMlwiIH0sIFtcbiAgICAgICAgX2MoXCJoNVwiLCB7IHN0YXRpY0NsYXNzOiBcIm15LTBcIiB9LCBbX2MoXCJjb2RlXCIsIFtfdm0uX3YoXCJtYWdpY2FsXCIpXSldKSxcbiAgICAgIF0pLFxuICAgIF0pXG4gIH0sXG5dXG5yZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWVcblxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSIsInZhciByZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBfdm0gPSB0aGlzXG4gIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2hcbiAgcmV0dXJuIF9jKFwiZGl2XCIsIFtcbiAgICBfdm0uX20oMCksXG4gICAgX3ZtLl92KFwiIFwiKSxcbiAgICBfYyhcbiAgICAgIFwiZGl2XCIsXG4gICAgICB7IHN0YXRpY0NsYXNzOiBcInJvdyBtYi00XCIsIGF0dHJzOiB7IGlkOiBcIm9iamVjdHMtc2ltcGxlLWV4YW1wbGVcIiB9IH0sXG4gICAgICBbXG4gICAgICAgIF92bS5fbSgxKSxcbiAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgX2MoXG4gICAgICAgICAgXCJkaXZcIixcbiAgICAgICAgICB7XG4gICAgICAgICAgICBzdGF0aWNDbGFzczpcbiAgICAgICAgICAgICAgXCJjb2wteGwtNCBjb2wtNiBkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyIGp1c3RpZnktY29udGVudC1lbmRcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIFtcbiAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICBcImJ1dHRvblwiLFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6IFwiYnRuIGJ0bi1vdXRsaW5lLXByaW1hcnkgYnRuLXNtXCIsXG4gICAgICAgICAgICAgICAgYXR0cnM6IHsgdHlwZTogXCJidXR0b25cIiB9LFxuICAgICAgICAgICAgICAgIG9uOiB7IGNsaWNrOiBfdm0uc2ltcGxlRXhhbXBsZSB9LFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBbX3ZtLl92KFwiXFxuXFx0XFx0XFx0XFx0XFx0UnVuXFxuXFx0XFx0XFx0XFx0XCIpXVxuICAgICAgICAgICAgKSxcbiAgICAgICAgICBdXG4gICAgICAgICksXG4gICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgIF9jKFxuICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAgeyBzdGF0aWNDbGFzczogXCJjb2wteGwtOCBjb2wtbGctMTJcIiB9LFxuICAgICAgICAgIFtcbiAgICAgICAgICAgIF9jKFwidnVlLWNvZGUtaGlnaGxpZ2h0XCIsIHsgYXR0cnM6IHsgbGFuZ3VhZ2U6IFwianNcIiB9IH0sIFtcbiAgICAgICAgICAgICAgX2MoXCJwcmVcIiwgW1xuICAgICAgICAgICAgICAgIF92bS5fdihcbiAgICAgICAgICAgICAgICAgIFwidGhpcy4kdW5pY29ybkxvZyh7XFxuXFx0dGV4dDogJ0hlbGxvIFdvcmxkJyxcXG5cXHRvYmplY3RzOiB7IGZvbzogJ2JhcicgfSxcXG59KTtcXG5cXHRcXHRcXHRcXHRcXHRcXHRcIlxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgXSksXG4gICAgICAgICAgXSxcbiAgICAgICAgICAxXG4gICAgICAgICksXG4gICAgICBdXG4gICAgKSxcbiAgICBfdm0uX3YoXCIgXCIpLFxuICAgIF9jKFxuICAgICAgXCJkaXZcIixcbiAgICAgIHsgc3RhdGljQ2xhc3M6IFwicm93IG1iLTRcIiwgYXR0cnM6IHsgaWQ6IFwib2JqZWN0cy1tdWx0aXBsZS1leGFtcGxlXCIgfSB9LFxuICAgICAgW1xuICAgICAgICBfdm0uX20oMiksXG4gICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgIF9jKFxuICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAge1xuICAgICAgICAgICAgc3RhdGljQ2xhc3M6XG4gICAgICAgICAgICAgIFwiY29sLXhsLTQgY29sLTYgZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNvbnRlbnQtZW5kXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICBbXG4gICAgICAgICAgICBfYyhcbiAgICAgICAgICAgICAgXCJidXR0b25cIixcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiBcImJ0biBidG4tb3V0bGluZS1wcmltYXJ5IGJ0bi1zbVwiLFxuICAgICAgICAgICAgICAgIGF0dHJzOiB7IHR5cGU6IFwiYnV0dG9uXCIgfSxcbiAgICAgICAgICAgICAgICBvbjogeyBjbGljazogX3ZtLm11bHRpcGxlT2JqZWN0cyB9LFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBbX3ZtLl92KFwiXFxuXFx0XFx0XFx0XFx0XFx0UnVuXFxuXFx0XFx0XFx0XFx0XCIpXVxuICAgICAgICAgICAgKSxcbiAgICAgICAgICBdXG4gICAgICAgICksXG4gICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgIF9jKFxuICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAgeyBzdGF0aWNDbGFzczogXCJjb2wteGwtOCBjb2wtbGctMTJcIiB9LFxuICAgICAgICAgIFtcbiAgICAgICAgICAgIF9jKFwidnVlLWNvZGUtaGlnaGxpZ2h0XCIsIHsgYXR0cnM6IHsgbGFuZ3VhZ2U6IFwianNcIiB9IH0sIFtcbiAgICAgICAgICAgICAgX2MoXCJwcmVcIiwgW1xuICAgICAgICAgICAgICAgIF92bS5fdihcbiAgICAgICAgICAgICAgICAgIFwiY29uc3QgZm9vID0geyBmb286ICdmb28gJyB9O1xcbmNvbnN0IGJhciA9IHsgYmFyOiAnYmFyICcgfTtcXG5cXG50aGlzLiR1bmljb3JuTG9nKHtcXG5cXHR0ZXh0OiAnSGVsbG8gV29ybGQnLFxcblxcdG9iamVjdHM6IHsgZm9vLCBiYXIgfSxcXG59KTtcXG5cXHRcXHRcXHRcXHRcXHRcXHRcIlxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgXSksXG4gICAgICAgICAgXSxcbiAgICAgICAgICAxXG4gICAgICAgICksXG4gICAgICBdXG4gICAgKSxcbiAgICBfdm0uX3YoXCIgXCIpLFxuICAgIF9jKFxuICAgICAgXCJkaXZcIixcbiAgICAgIHsgc3RhdGljQ2xhc3M6IFwicm93IG1iLTRcIiwgYXR0cnM6IHsgaWQ6IFwib2JqZWN0cy1zcHJlYWQtZXhhbXBsZVwiIH0gfSxcbiAgICAgIFtcbiAgICAgICAgX3ZtLl9tKDMpLFxuICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICBfYyhcbiAgICAgICAgICBcImRpdlwiLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHN0YXRpY0NsYXNzOlxuICAgICAgICAgICAgICBcImNvbC14bC00IGNvbC02IGQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXIganVzdGlmeS1jb250ZW50LWVuZFwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgW1xuICAgICAgICAgICAgX2MoXG4gICAgICAgICAgICAgIFwiYnV0dG9uXCIsXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogXCJidG4gYnRuLW91dGxpbmUtcHJpbWFyeSBidG4tc21cIixcbiAgICAgICAgICAgICAgICBhdHRyczogeyB0eXBlOiBcImJ1dHRvblwiIH0sXG4gICAgICAgICAgICAgICAgb246IHsgY2xpY2s6IF92bS5vYmplY3RTcHJlYWRPcGVyYXRvciB9LFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBbX3ZtLl92KFwiXFxuXFx0XFx0XFx0XFx0XFx0UnVuXFxuXFx0XFx0XFx0XFx0XCIpXVxuICAgICAgICAgICAgKSxcbiAgICAgICAgICBdXG4gICAgICAgICksXG4gICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgIF9jKFxuICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAgeyBzdGF0aWNDbGFzczogXCJjb2wteGwtOCBjb2wtbGctMTJcIiB9LFxuICAgICAgICAgIFtcbiAgICAgICAgICAgIF9jKFwidnVlLWNvZGUtaGlnaGxpZ2h0XCIsIHsgYXR0cnM6IHsgbGFuZ3VhZ2U6IFwianNcIiB9IH0sIFtcbiAgICAgICAgICAgICAgX2MoXCJwcmVcIiwgW1xuICAgICAgICAgICAgICAgIF92bS5fdihcbiAgICAgICAgICAgICAgICAgIFwiY29uc3QgZm9vID0geyBmb286ICdmb28gJyB9O1xcbmNvbnN0IGJhciA9IHsgYmFyOiAnYmFyICcgfTtcXG5cXG50aGlzLiR1bmljb3JuTG9nKHtcXG5cXHR0ZXh0OiAnSGVsbG8gV29ybGQnLFxcblxcdG9iamVjdHM6IHsgLi4uZm9vLCAuLi5iYXIgfSxcXG59KTtcXG5cXHRcXHRcXHRcXHRcXHRcXHRcIlxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgXSksXG4gICAgICAgICAgXSxcbiAgICAgICAgICAxXG4gICAgICAgICksXG4gICAgICBdXG4gICAgKSxcbiAgXSlcbn1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXG4gIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX3ZtID0gdGhpc1xuICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICAgIHJldHVybiBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcInJvdyBtYi0yXCIgfSwgW1xuICAgICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJjb2wtMTJcIiB9LCBbXG4gICAgICAgIF9jKFwiaDVcIiwgeyBzdGF0aWNDbGFzczogXCJteS0wXCIgfSwgW19jKFwiY29kZVwiLCBbX3ZtLl92KFwib2JqZWN0c1wiKV0pXSksXG4gICAgICBdKSxcbiAgICBdKVxuICB9LFxuICBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF92bSA9IHRoaXNcbiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2hcbiAgICByZXR1cm4gX2MoXG4gICAgICBcImRpdlwiLFxuICAgICAgeyBzdGF0aWNDbGFzczogXCJjb2wteGwtNCBjb2wtNiBkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyXCIgfSxcbiAgICAgIFtfYyhcImg2XCIsIHsgc3RhdGljQ2xhc3M6IFwibXktMFwiIH0sIFtfdm0uX3YoXCJTaW5nbGUgb2JqZWN0XCIpXSldXG4gICAgKVxuICB9LFxuICBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF92bSA9IHRoaXNcbiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2hcbiAgICByZXR1cm4gX2MoXG4gICAgICBcImRpdlwiLFxuICAgICAgeyBzdGF0aWNDbGFzczogXCJjb2wteGwtNCBjb2wtNiBkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyXCIgfSxcbiAgICAgIFtfYyhcImg2XCIsIHsgc3RhdGljQ2xhc3M6IFwibXktMFwiIH0sIFtfdm0uX3YoXCJNdWx0aXBsZSBvYmplY3RzXCIpXSldXG4gICAgKVxuICB9LFxuICBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF92bSA9IHRoaXNcbiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2hcbiAgICByZXR1cm4gX2MoXG4gICAgICBcImRpdlwiLFxuICAgICAgeyBzdGF0aWNDbGFzczogXCJjb2wteGwtNCBjb2wtNiBkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyXCIgfSxcbiAgICAgIFtcbiAgICAgICAgX2MoXCJoNlwiLCB7IHN0YXRpY0NsYXNzOiBcIm15LTBcIiB9LCBbXG4gICAgICAgICAgX3ZtLl92KFwiVXNpbmcgb2JqZWN0IHNwcmVhZCBPcGVyYXRvclwiKSxcbiAgICAgICAgXSksXG4gICAgICBdXG4gICAgKVxuICB9LFxuXVxucmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlXG5cbmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0iLCJ2YXIgcmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICB2YXIgX3ZtID0gdGhpc1xuICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gIHJldHVybiBfYyhcImRpdlwiLCBbXG4gICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJyb3cgbWItNFwiIH0sIFtcbiAgICAgIF92bS5fbSgwKSxcbiAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImNvbC14bC00IGNvbC02IGQtZmxleCBqdXN0aWZ5LWNvbnRlbnQtZW5kXCIgfSwgW1xuICAgICAgICBfYyhcbiAgICAgICAgICBcImJ1dHRvblwiLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiBcImJ0biBidG4tb3V0bGluZS1wcmltYXJ5IGJ0bi1zbVwiLFxuICAgICAgICAgICAgYXR0cnM6IHsgdHlwZTogXCJidXR0b25cIiB9LFxuICAgICAgICAgICAgb246IHsgY2xpY2s6IF92bS5zaW1wbGVFeGFtcGxlIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgICBbX3ZtLl92KFwiXFxuXFx0XFx0XFx0XFx0XFx0UnVuXFxuXFx0XFx0XFx0XFx0XCIpXVxuICAgICAgICApLFxuICAgICAgXSksXG4gICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgX2MoXG4gICAgICAgIFwiZGl2XCIsXG4gICAgICAgIHsgc3RhdGljQ2xhc3M6IFwiY29sLXhsLTggY29sLWxnLTEyXCIgfSxcbiAgICAgICAgW1xuICAgICAgICAgIF9jKFwidnVlLWNvZGUtaGlnaGxpZ2h0XCIsIHsgYXR0cnM6IHsgbGFuZ3VhZ2U6IFwianNcIiB9IH0sIFtcbiAgICAgICAgICAgIF9jKFwicHJlXCIsIFtfdm0uX3YoXCJ0aGlzLiR1bmljb3JuTG9nKCk7XFxuXFx0XFx0XFx0XFx0XFx0XFx0XCIpXSksXG4gICAgICAgICAgXSksXG4gICAgICAgIF0sXG4gICAgICAgIDFcbiAgICAgICksXG4gICAgXSksXG4gIF0pXG59XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW1xuICBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF92bSA9IHRoaXNcbiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2hcbiAgICByZXR1cm4gX2MoXG4gICAgICBcImRpdlwiLFxuICAgICAgeyBzdGF0aWNDbGFzczogXCJjb2wteGwtNCBjb2wtNiBkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyXCIgfSxcbiAgICAgIFtfYyhcImg1XCIsIHsgc3RhdGljQ2xhc3M6IFwibXktMFwiIH0sIFtfdm0uX3YoXCJTaW1wbGUgRXhhbXBsZVwiKV0pXVxuICAgIClcbiAgfSxcbl1cbnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZVxuXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIF92bSA9IHRoaXNcbiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50XG4gIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICByZXR1cm4gX2MoXCJkaXZcIiwgW1xuICAgIF92bS5fbSgwKSxcbiAgICBfdm0uX3YoXCIgXCIpLFxuICAgIF9jKFxuICAgICAgXCJkaXZcIixcbiAgICAgIHtcbiAgICAgICAgc3RhdGljQ2xhc3M6IFwicm93IG1iLTRcIixcbiAgICAgICAgYXR0cnM6IHsgaWQ6IFwiZGVmYXVsdFN0eWxlcy1zaW1wbGUtZXhhbXBsZVwiIH0sXG4gICAgICB9LFxuICAgICAgW1xuICAgICAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImNvbC14bC00IGNvbC02IGQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXJcIiB9LCBbXG4gICAgICAgICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJjb2wteGwtOCBjb2wtbGctMTIgbXQtMlwiIH0sIFtcbiAgICAgICAgICAgIF9jKFwiaW5wdXRcIiwge1xuICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgbmFtZTogXCJtb2RlbFwiLFxuICAgICAgICAgICAgICAgICAgcmF3TmFtZTogXCJ2LW1vZGVsXCIsXG4gICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLmRlZmF1bHRTdHlsZXMsXG4gICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiBcImRlZmF1bHRTdHlsZXNcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICBzdGF0aWNDbGFzczogXCJmb3JtLWNvbnRyb2xcIixcbiAgICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiBcInRleHRcIixcbiAgICAgICAgICAgICAgICB2YWx1ZTogXCJbQnVubmllc106XCIsXG4gICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6IFwiW0J1bm5pZXNdOlwiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBkb21Qcm9wczogeyB2YWx1ZTogX3ZtLmRlZmF1bHRTdHlsZXMgfSxcbiAgICAgICAgICAgICAgb246IHtcbiAgICAgICAgICAgICAgICBpbnB1dDogZnVuY3Rpb24gKCRldmVudCkge1xuICAgICAgICAgICAgICAgICAgaWYgKCRldmVudC50YXJnZXQuY29tcG9zaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgX3ZtLmRlZmF1bHRTdHlsZXMgPSAkZXZlbnQudGFyZ2V0LnZhbHVlXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgIF0pLFxuICAgICAgICBdKSxcbiAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgX2MoXG4gICAgICAgICAgXCJkaXZcIixcbiAgICAgICAgICB7XG4gICAgICAgICAgICBzdGF0aWNDbGFzczpcbiAgICAgICAgICAgICAgXCJjb2wteGwtNCBjb2wtNiBkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyIGp1c3RpZnktY29udGVudC1lbmRcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIFtcbiAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICBcImJ1dHRvblwiLFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6IFwiYnRuIGJ0bi1vdXRsaW5lLXByaW1hcnkgYnRuLXNtXCIsXG4gICAgICAgICAgICAgICAgYXR0cnM6IHsgdHlwZTogXCJidXR0b25cIiB9LFxuICAgICAgICAgICAgICAgIG9uOiB7IGNsaWNrOiBfdm0uc2ltcGxlRXhhbXBsZSB9LFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBbX3ZtLl92KFwiXFxuXFx0XFx0XFx0XFx0XFx0UnVuXFxuXFx0XFx0XFx0XFx0XCIpXVxuICAgICAgICAgICAgKSxcbiAgICAgICAgICBdXG4gICAgICAgICksXG4gICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgIF9jKFxuICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAgeyBzdGF0aWNDbGFzczogXCJjb2wteGwtOCBjb2wtbGctMTJcIiB9LFxuICAgICAgICAgIFtcbiAgICAgICAgICAgIF9jKFwidnVlLWNvZGUtaGlnaGxpZ2h0XCIsIHsgYXR0cnM6IHsgbGFuZ3VhZ2U6IFwianNcIiB9IH0sIFtcbiAgICAgICAgICAgICAgX2MoXCJwcmVcIiwgW1xuICAgICAgICAgICAgICAgIF92bS5fdihcbiAgICAgICAgICAgICAgICAgIFwidGhpcy4kdW5pY29ybkxvZyh7XFxuXFx0dGV4dDogJ0hlbGxvIFdvcmxkJyxcXG5cXHRzdHlsZXM6ICdcIiArXG4gICAgICAgICAgICAgICAgICAgIF92bS5fcyh0aGlzLmRlZmF1bHRTdHlsZXMpICtcbiAgICAgICAgICAgICAgICAgICAgXCInLFxcbn0pO1xcblxcdFxcdFxcdFxcdFxcdFxcdFwiXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICBdLFxuICAgICAgICAgIDFcbiAgICAgICAgKSxcbiAgICAgIF1cbiAgICApLFxuICAgIF92bS5fdihcIiBcIiksXG4gICAgX2MoXG4gICAgICBcImRpdlwiLFxuICAgICAge1xuICAgICAgICBzdGF0aWNDbGFzczogXCJyb3cgbWItNFwiLFxuICAgICAgICBhdHRyczogeyBpZDogXCJkZWZhdWx0U3R5bGVzLXNpbXBsZS1leGFtcGxlXCIgfSxcbiAgICAgIH0sXG4gICAgICBbXG4gICAgICAgIF92bS5fbSgxKSxcbiAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgX2MoXG4gICAgICAgICAgXCJkaXZcIixcbiAgICAgICAgICB7XG4gICAgICAgICAgICBzdGF0aWNDbGFzczpcbiAgICAgICAgICAgICAgXCJjb2wteGwtNCBjb2wtNiBkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyIGp1c3RpZnktY29udGVudC1lbmRcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIFtcbiAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICBcImJ1dHRvblwiLFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6IFwiYnRuIGJ0bi1vdXRsaW5lLXByaW1hcnkgYnRuLXNtXCIsXG4gICAgICAgICAgICAgICAgYXR0cnM6IHsgdHlwZTogXCJidXR0b25cIiB9LFxuICAgICAgICAgICAgICAgIG9uOiB7IGNsaWNrOiBfdm0uYXJyYXlFeGFtcGxlIH0sXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIFtfdm0uX3YoXCJcXG5cXHRcXHRcXHRcXHRcXHRSdW5cXG5cXHRcXHRcXHRcXHRcIildXG4gICAgICAgICAgICApLFxuICAgICAgICAgIF1cbiAgICAgICAgKSxcbiAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgX2MoXG4gICAgICAgICAgXCJkaXZcIixcbiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiBcImNvbC14bC04IGNvbC1sZy0xMlwiIH0sXG4gICAgICAgICAgW1xuICAgICAgICAgICAgX2MoXCJ2dWUtY29kZS1oaWdobGlnaHRcIiwgeyBhdHRyczogeyBsYW5ndWFnZTogXCJqc1wiIH0gfSwgW1xuICAgICAgICAgICAgICBfYyhcInByZVwiLCBbXG4gICAgICAgICAgICAgICAgX3ZtLl92KFxuICAgICAgICAgICAgICAgICAgXCJ0aGlzLiR1bmljb3JuTG9nKHtcXG5cXHR0ZXh0OiAnSGVsbG8gV29ybGQnLFxcblxcdHN0eWxlczogW1xcblxcdFxcdCdiYWNrZ3JvdW5kOiBibGFjaycsXFxuXFx0XFx0J2JvcmRlcjogMXB4IGRhc2hlZCBtYWdlbnRhJyxcXG5cXHRcXHQnY29sb3I6IG1hZ2VudGEnLFxcblxcdFxcdCdmb250LWZhbWlseTogbW9ub3NwYWNlJyxcXG5cXHRcXHQnZm9udC1zaXplOiAyZW0nLFxcblxcdFxcdCdwYWRkaW5nOiAxMHB4JyxcXG5cXHRdLFxcbn0pO1xcblxcdFxcdFxcdFxcdFxcdFxcdFwiXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICBdLFxuICAgICAgICAgIDFcbiAgICAgICAgKSxcbiAgICAgIF1cbiAgICApLFxuICAgIF92bS5fdihcIiBcIiksXG4gICAgX3ZtLl9tKDIpLFxuICAgIF92bS5fdihcIiBcIiksXG4gICAgX2MoXG4gICAgICBcImRpdlwiLFxuICAgICAgeyBzdGF0aWNDbGFzczogXCJyb3cgbWItNFwiLCBhdHRyczogeyBpZDogXCJkZWZhdWx0U3R5bGVzLXdvcmQtZXhhbXBsZVwiIH0gfSxcbiAgICAgIFtcbiAgICAgICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJjb2wteGwtNCBjb2wtNiBkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyXCIgfSwgW1xuICAgICAgICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiY29sLXhsLTggY29sLWxnLTEyIG10LTJcIiB9LCBbXG4gICAgICAgICAgICBfYyhcbiAgICAgICAgICAgICAgXCJzZWxlY3RcIixcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFtcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJtb2RlbFwiLFxuICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiBcInYtbW9kZWxcIixcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS5tYWdpY2FsV29yZCxcbiAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogXCJtYWdpY2FsV29yZFwiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiBcImZvcm0tc2VsZWN0XCIsXG4gICAgICAgICAgICAgICAgb246IHtcbiAgICAgICAgICAgICAgICAgIGNoYW5nZTogZnVuY3Rpb24gKCRldmVudCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgJCRzZWxlY3RlZFZhbCA9IEFycmF5LnByb3RvdHlwZS5maWx0ZXJcbiAgICAgICAgICAgICAgICAgICAgICAuY2FsbCgkZXZlbnQudGFyZ2V0Lm9wdGlvbnMsIGZ1bmN0aW9uIChvKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gby5zZWxlY3RlZFxuICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgLm1hcChmdW5jdGlvbiAobykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZhbCA9IFwiX3ZhbHVlXCIgaW4gbyA/IG8uX3ZhbHVlIDogby52YWx1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbFxuICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIF92bS5tYWdpY2FsV29yZCA9ICRldmVudC50YXJnZXQubXVsdGlwbGVcbiAgICAgICAgICAgICAgICAgICAgICA/ICQkc2VsZWN0ZWRWYWxcbiAgICAgICAgICAgICAgICAgICAgICA6ICQkc2VsZWN0ZWRWYWxbMF1cbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgX3ZtLl9sKF92bS5tYWdpY2FsV29yZHMsIGZ1bmN0aW9uICh3b3JkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9jKFwib3B0aW9uXCIsIHsga2V5OiB3b3JkIH0sIFtfdm0uX3YoX3ZtLl9zKHdvcmQpKV0pXG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAwXG4gICAgICAgICAgICApLFxuICAgICAgICAgIF0pLFxuICAgICAgICBdKSxcbiAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgX2MoXG4gICAgICAgICAgXCJkaXZcIixcbiAgICAgICAgICB7XG4gICAgICAgICAgICBzdGF0aWNDbGFzczpcbiAgICAgICAgICAgICAgXCJjb2wteGwtNCBjb2wtNiBkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyIGp1c3RpZnktY29udGVudC1lbmRcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIFtcbiAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICBcImJ1dHRvblwiLFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6IFwiYnRuIGJ0bi1vdXRsaW5lLXByaW1hcnkgYnRuLXNtXCIsXG4gICAgICAgICAgICAgICAgYXR0cnM6IHsgdHlwZTogXCJidXR0b25cIiB9LFxuICAgICAgICAgICAgICAgIG9uOiB7IGNsaWNrOiBfdm0ud29yZEV4YW1wbGUgfSxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgW192bS5fdihcIlxcblxcdFxcdFxcdFxcdFxcdFJ1blxcblxcdFxcdFxcdFxcdFwiKV1cbiAgICAgICAgICAgICksXG4gICAgICAgICAgXVxuICAgICAgICApLFxuICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICBfYyhcbiAgICAgICAgICBcImRpdlwiLFxuICAgICAgICAgIHsgc3RhdGljQ2xhc3M6IFwiY29sLXhsLTggY29sLWxnLTEyXCIgfSxcbiAgICAgICAgICBbXG4gICAgICAgICAgICBfYyhcInZ1ZS1jb2RlLWhpZ2hsaWdodFwiLCB7IGF0dHJzOiB7IGxhbmd1YWdlOiBcImpzXCIgfSB9LCBbXG4gICAgICAgICAgICAgIF9jKFwicHJlXCIsIFtcbiAgICAgICAgICAgICAgICBfdm0uX3YoXG4gICAgICAgICAgICAgICAgICBcInRoaXMuJHVuaWNvcm5Mb2coe1xcblxcdHRleHQ6ICdIZWxsbyBXb3JsZCcsXFxuXFx0c3R5bGVzOiAnXCIgK1xuICAgICAgICAgICAgICAgICAgICBfdm0uX3ModGhpcy5tYWdpY2FsV29yZCkgK1xuICAgICAgICAgICAgICAgICAgICBcIicsXFxufSk7XFxuXFx0XFx0XFx0XFx0XFx0XFx0XCJcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgIF0sXG4gICAgICAgICAgMVxuICAgICAgICApLFxuICAgICAgXVxuICAgICksXG4gIF0pXG59XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW1xuICBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF92bSA9IHRoaXNcbiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2hcbiAgICByZXR1cm4gX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJyb3cgbWItMlwiIH0sIFtcbiAgICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiY29sLTEyXCIgfSwgW1xuICAgICAgICBfYyhcImg1XCIsIHsgc3RhdGljQ2xhc3M6IFwibXktMFwiIH0sIFtfYyhcImNvZGVcIiwgW192bS5fdihcInN0eWxlc1wiKV0pXSksXG4gICAgICBdKSxcbiAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImNvbC14bC04IGNvbC1sZy0xMlwiIH0sIFtcbiAgICAgICAgX3ZtLl92KFxuICAgICAgICAgIFwiXFxuXFx0XFx0XFx0XFx0Rm9yIGEgbGlzdCBvZiB0aGUgZGlmZmVyZW50IGF2YWlsYWJsZSBzdHlsZXMsIHJlZmVyIHRvIHRoZVxcblxcdFxcdFxcdFxcdFwiXG4gICAgICAgICksXG4gICAgICAgIF9jKFxuICAgICAgICAgIFwiYVwiLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgICAgIGhyZWY6IFwiaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL2NvbnNvbGUjc3R5bGluZ19jb25zb2xlX291dHB1dFwiLFxuICAgICAgICAgICAgICB0YXJnZXQ6IFwiX2JsYW5rXCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0sXG4gICAgICAgICAgW192bS5fdihcIldlYiBBUElzIE1ETiBTdHlsaW5nIENvbnNvbGUgT3V0cHV0XFxuXFx0XFx0XFx0XFx0XCIpXVxuICAgICAgICApLFxuICAgICAgICBfdm0uX3YoXG4gICAgICAgICAgXCJcXG5cXHRcXHRcXHRcXHRkZXZlbG9wZXIgZG9jdW1lbnRhdGlvbi4gRGVwZW5kaW5nIG9uIHRoZSBicm93c2VyLCBzb21lIHN0eWxlcyBtYXkgbm90XFxuXFx0XFx0XFx0XFx0d29yay5cXG5cXHRcXHRcXHRcIlxuICAgICAgICApLFxuICAgICAgXSksXG4gICAgXSlcbiAgfSxcbiAgZnVuY3Rpb24gKCkge1xuICAgIHZhciBfdm0gPSB0aGlzXG4gICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50XG4gICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gICAgcmV0dXJuIF9jKFxuICAgICAgXCJkaXZcIixcbiAgICAgIHsgc3RhdGljQ2xhc3M6IFwiY29sLXhsLTQgY29sLTYgZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlclwiIH0sXG4gICAgICBbXG4gICAgICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiY29sLXhsLTggY29sLWxnLTEyXCIgfSwgW1xuICAgICAgICAgIF9jKFwiaDZcIiwgeyBzdGF0aWNDbGFzczogXCJteS0wXCIgfSwgW192bS5fdihcIlVzaW5nIGFuIEFycmF5LlwiKV0pLFxuICAgICAgICBdKSxcbiAgICAgIF1cbiAgICApXG4gIH0sXG4gIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX3ZtID0gdGhpc1xuICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICAgIHJldHVybiBfYyhcbiAgICAgIFwiZGl2XCIsXG4gICAgICB7IHN0YXRpY0NsYXNzOiBcInJvdyBtYi0yXCIsIGF0dHJzOiB7IGlkOiBcImRlZmF1bHRTdHlsZXMtd29yZC1leGFtcGxlXCIgfSB9LFxuICAgICAgW1xuICAgICAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImNvbC14bC04IGNvbC1sZy0xMlwiIH0sIFtcbiAgICAgICAgICBfdm0uX3YoXCJcXG5cXHRcXHRcXHRcXHRZb3UgY2FuIGFsc28gc2V0IHRoZSBcIiksXG4gICAgICAgICAgX2MoXCJjb2RlXCIsIFtfdm0uX3YoXCJzdHlsZVwiKV0pLFxuICAgICAgICAgIF92bS5fdihcbiAgICAgICAgICAgIFwiIG9wdGlvbiB0byBhIG1hZ2ljYWwgd29yZCB0byBtYWtlXFxuXFx0XFx0XFx0XFx0dGhlIG1hZ2ljIGhhcHBlbi4gVGhpcyBjYW4gYWxzbyBiZSBzZXQgd2l0aCB0aGVcXG5cXHRcXHRcXHRcXHRcIlxuICAgICAgICAgICksXG4gICAgICAgICAgX2MoXCJjb2RlXCIsIFtfdm0uX3YoXCJtYWdpY2FsXCIpXSksXG4gICAgICAgICAgX3ZtLl92KFwiIG9wdGlvbiB0byBcIiksXG4gICAgICAgICAgX2MoXCJzcGFuXCIsIHsgc3RhdGljQ2xhc3M6IFwiYm9vbGVhbi1zdHlsZVwiIH0sIFtfdm0uX3YoXCJ0cnVlXCIpXSksXG4gICAgICAgICAgX3ZtLl92KFwiLlxcblxcdFxcdFxcdFwiKSxcbiAgICAgICAgXSksXG4gICAgICBdXG4gICAgKVxuICB9LFxuXVxucmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlXG5cbmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0iLCJ2YXIgcmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICB2YXIgX3ZtID0gdGhpc1xuICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gIHJldHVybiBfYyhcImRpdlwiLCBbXG4gICAgX3ZtLl9tKDApLFxuICAgIF92bS5fdihcIiBcIiksXG4gICAgX2MoXG4gICAgICBcImRpdlwiLFxuICAgICAgeyBzdGF0aWNDbGFzczogXCJyb3cgbWItNFwiLCBhdHRyczogeyBpZDogXCJ0ZXh0LXNpbXBsZS1leGFtcGxlXCIgfSB9LFxuICAgICAgW1xuICAgICAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImNvbC14bC00IGNvbC02IGQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXJcIiB9LCBbXG4gICAgICAgICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJjb2wteGwtOCBjb2wtbGctMTIgbXQtMlwiIH0sIFtcbiAgICAgICAgICAgIF9jKFwiaW5wdXRcIiwge1xuICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgbmFtZTogXCJtb2RlbFwiLFxuICAgICAgICAgICAgICAgICAgcmF3TmFtZTogXCJ2LW1vZGVsXCIsXG4gICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLnRleHQsXG4gICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiBcInRleHRcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICBzdGF0aWNDbGFzczogXCJmb3JtLWNvbnRyb2xcIixcbiAgICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiBcInRleHRcIixcbiAgICAgICAgICAgICAgICB2YWx1ZTogXCJbQnVubmllc106XCIsXG4gICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6IFwiW0J1bm5pZXNdOlwiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBkb21Qcm9wczogeyB2YWx1ZTogX3ZtLnRleHQgfSxcbiAgICAgICAgICAgICAgb246IHtcbiAgICAgICAgICAgICAgICBpbnB1dDogZnVuY3Rpb24gKCRldmVudCkge1xuICAgICAgICAgICAgICAgICAgaWYgKCRldmVudC50YXJnZXQuY29tcG9zaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgX3ZtLnRleHQgPSAkZXZlbnQudGFyZ2V0LnZhbHVlXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgIF0pLFxuICAgICAgICBdKSxcbiAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgX2MoXG4gICAgICAgICAgXCJkaXZcIixcbiAgICAgICAgICB7XG4gICAgICAgICAgICBzdGF0aWNDbGFzczpcbiAgICAgICAgICAgICAgXCJjb2wteGwtNCBjb2wtNiBkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyIGp1c3RpZnktY29udGVudC1lbmRcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIFtcbiAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICBcImJ1dHRvblwiLFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6IFwiYnRuIGJ0bi1vdXRsaW5lLXByaW1hcnkgYnRuLXNtXCIsXG4gICAgICAgICAgICAgICAgYXR0cnM6IHsgdHlwZTogXCJidXR0b25cIiB9LFxuICAgICAgICAgICAgICAgIG9uOiB7IGNsaWNrOiBfdm0uc2ltcGxlRXhhbXBsZSB9LFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBbX3ZtLl92KFwiXFxuXFx0XFx0XFx0XFx0XFx0UnVuXFxuXFx0XFx0XFx0XFx0XCIpXVxuICAgICAgICAgICAgKSxcbiAgICAgICAgICBdXG4gICAgICAgICksXG4gICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgIF9jKFxuICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAgeyBzdGF0aWNDbGFzczogXCJjb2wteGwtOCBjb2wtbGctMTJcIiB9LFxuICAgICAgICAgIFtcbiAgICAgICAgICAgIF9jKFwidnVlLWNvZGUtaGlnaGxpZ2h0XCIsIHsgYXR0cnM6IHsgbGFuZ3VhZ2U6IFwianNcIiB9IH0sIFtcbiAgICAgICAgICAgICAgX2MoXCJwcmVcIiwgW1xuICAgICAgICAgICAgICAgIF92bS5fdihcbiAgICAgICAgICAgICAgICAgIFwidGhpcy4kdW5pY29ybkxvZyh7XFxuXFx0dGV4dDogJ0hlbGxvIFdvcmxkJyxcXG59KTtcXG5cXHRcXHRcXHRcXHRcXHRcXHRcIlxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgXSksXG4gICAgICAgICAgXSxcbiAgICAgICAgICAxXG4gICAgICAgICksXG4gICAgICBdXG4gICAgKSxcbiAgXSlcbn1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXG4gIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX3ZtID0gdGhpc1xuICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICAgIHJldHVybiBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcInJvdyBtYi0yXCIgfSwgW1xuICAgICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJjb2wtMTJcIiB9LCBbXG4gICAgICAgIF9jKFwiaDVcIiwgeyBzdGF0aWNDbGFzczogXCJteS0wXCIgfSwgW19jKFwiY29kZVwiLCBbX3ZtLl92KFwidGV4dFwiKV0pXSksXG4gICAgICBdKSxcbiAgICBdKVxuICB9LFxuXVxucmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlXG5cbmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0iLCJ2YXIgcmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICB2YXIgX3ZtID0gdGhpc1xuICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gIHJldHVybiBfYyhcImRpdlwiLCBbXG4gICAgX3ZtLl9tKDApLFxuICAgIF92bS5fdihcIiBcIiksXG4gICAgX2MoXG4gICAgICBcImRpdlwiLFxuICAgICAge1xuICAgICAgICBzdGF0aWNDbGFzczogXCJyb3cgbWItNFwiLFxuICAgICAgICBhdHRyczogeyBpZDogXCJkZWZhdWx0U3R5bGVzLXNpbXBsZS1leGFtcGxlXCIgfSxcbiAgICAgIH0sXG4gICAgICBbXG4gICAgICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiY29sLXhsLTQgY29sLTYgZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlclwiIH0sIFtcbiAgICAgICAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImNvbC14bC04IGNvbC1sZy0xMiBtdC0yXCIgfSwgW1xuICAgICAgICAgICAgX2MoXG4gICAgICAgICAgICAgIFwic2VsZWN0XCIsXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwibW9kZWxcIixcbiAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogXCJ2LW1vZGVsXCIsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0ubG9nVHlwZSxcbiAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogXCJsb2dUeXBlXCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6IFwiZm9ybS1zZWxlY3RcIixcbiAgICAgICAgICAgICAgICBvbjoge1xuICAgICAgICAgICAgICAgICAgY2hhbmdlOiBbXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uICgkZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICB2YXIgJCRzZWxlY3RlZFZhbCA9IEFycmF5LnByb3RvdHlwZS5maWx0ZXJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5jYWxsKCRldmVudC50YXJnZXQub3B0aW9ucywgZnVuY3Rpb24gKG8pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG8uc2VsZWN0ZWRcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAubWFwKGZ1bmN0aW9uIChvKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2YWwgPSBcIl92YWx1ZVwiIGluIG8gPyBvLl92YWx1ZSA6IG8udmFsdWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbFxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICBfdm0ubG9nVHlwZSA9ICRldmVudC50YXJnZXQubXVsdGlwbGVcbiAgICAgICAgICAgICAgICAgICAgICAgID8gJCRzZWxlY3RlZFZhbFxuICAgICAgICAgICAgICAgICAgICAgICAgOiAkJHNlbGVjdGVkVmFsWzBdXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIF92bS5jaGVja1R5cGUsXG4gICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIF92bS5fbChfdm0udHlwZXMsIGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9jKFwib3B0aW9uXCIsIHsga2V5OiB0eXBlIH0sIFtfdm0uX3YoX3ZtLl9zKHR5cGUpKV0pXG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAwXG4gICAgICAgICAgICApLFxuICAgICAgICAgIF0pLFxuICAgICAgICBdKSxcbiAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgX2MoXG4gICAgICAgICAgXCJkaXZcIixcbiAgICAgICAgICB7XG4gICAgICAgICAgICBzdGF0aWNDbGFzczpcbiAgICAgICAgICAgICAgXCJjb2wteGwtNCBjb2wtNiBkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyIGp1c3RpZnktY29udGVudC1lbmRcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIFtcbiAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICBcImJ1dHRvblwiLFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6IFwiYnRuIGJ0bi1vdXRsaW5lLXByaW1hcnkgYnRuLXNtXCIsXG4gICAgICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgICAgIHR5cGU6IFwiYnV0dG9uXCIsXG4gICAgICAgICAgICAgICAgICBkaXNhYmxlZDogdGhpcy5sb2dUeXBlID09PSBcImdyb3VwRW5kXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBvbjogeyBjbGljazogX3ZtLnNpbXBsZUV4YW1wbGUgfSxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgW192bS5fdihcIlxcblxcdFxcdFxcdFxcdFxcdFJ1blxcblxcdFxcdFxcdFxcdFwiKV1cbiAgICAgICAgICAgICksXG4gICAgICAgICAgXVxuICAgICAgICApLFxuICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICBfdm0ubG9nTm90ZVxuICAgICAgICAgID8gX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJjb2wteGwtOCBjb2wtbGctMTIgbXktMlwiIH0sIFtcbiAgICAgICAgICAgICAgX2MoXCJkaXZcIiwge1xuICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOlxuICAgICAgICAgICAgICAgICAgXCJhbGVydCBhbGVydC1wcmltYXJ5IGQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXIgbWItMFwiLFxuICAgICAgICAgICAgICAgIGF0dHJzOiB7IHJvbGU6IFwiYWxlcnRcIiB9LFxuICAgICAgICAgICAgICAgIGRvbVByb3BzOiB7IGlubmVySFRNTDogX3ZtLl9zKF92bS5sb2dOb3RlKSB9LFxuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIF0pXG4gICAgICAgICAgOiBfdm0uX2UoKSxcbiAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgX2MoXG4gICAgICAgICAgXCJkaXZcIixcbiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiBcImNvbC14bC04IGNvbC1sZy0xMlwiIH0sXG4gICAgICAgICAgW1xuICAgICAgICAgICAgX2MoXCJ2dWUtY29kZS1oaWdobGlnaHRcIiwgeyBhdHRyczogeyBsYW5ndWFnZTogXCJqc1wiIH0gfSwgW1xuICAgICAgICAgICAgICBfYyhcInByZVwiLCBbXG4gICAgICAgICAgICAgICAgX3ZtLl92KFxuICAgICAgICAgICAgICAgICAgXCJ0aGlzLiR1bmljb3JuTG9nKHtcXG5cXHR0ZXh0OiAnSGVsbG8gV29ybGQnLFxcblxcdHR5cGU6ICdsb2cnLFxcbn0pO1xcblxcdFxcdFxcdFxcdFxcdFxcdFwiXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICBdLFxuICAgICAgICAgIDFcbiAgICAgICAgKSxcbiAgICAgIF1cbiAgICApLFxuICBdKVxufVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtcbiAgZnVuY3Rpb24gKCkge1xuICAgIHZhciBfdm0gPSB0aGlzXG4gICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50XG4gICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gICAgcmV0dXJuIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwicm93IG1iLTJcIiB9LCBbXG4gICAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImNvbC0xMlwiIH0sIFtcbiAgICAgICAgX2MoXCJoNVwiLCB7IHN0YXRpY0NsYXNzOiBcIm15LTBcIiB9LCBbX2MoXCJjb2RlXCIsIFtfdm0uX3YoXCJ0eXBlXCIpXSldKSxcbiAgICAgIF0pLFxuICAgIF0pXG4gIH0sXG5dXG5yZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWVcblxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSIsInZhciByZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBfdm0gPSB0aGlzXG4gIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2hcbiAgcmV0dXJuIF9jKFxuICAgIFwiZGl2XCIsXG4gICAgW1xuICAgICAgX2MoXCJOYXZcIiksXG4gICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgX3ZtLl9tKDApLFxuICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiY29udGFpbmVyXCIgfSwgW1xuICAgICAgICBfYyhcbiAgICAgICAgICBcImRpdlwiLFxuICAgICAgICAgIHsgc3RhdGljQ2xhc3M6IFwicm93IG1iLTVcIiwgYXR0cnM6IHsgaWQ6IFwidWwtaW5zdGFsbGF0aW9uXCIgfSB9LFxuICAgICAgICAgIFtcbiAgICAgICAgICAgIF92bS5fbSgxKSxcbiAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICBfYyhcbiAgICAgICAgICAgICAgXCJkaXZcIixcbiAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogXCJjb2wteGwtOCBjb2wtbGctMTJcIiB9LFxuICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgX2MoXCJ2dWUtY29kZS1oaWdobGlnaHRcIiwgeyBhdHRyczogeyBsYW5ndWFnZTogXCJzaGVsbFwiIH0gfSwgW1xuICAgICAgICAgICAgICAgICAgX2MoXCJwcmVcIiwgW192bS5fdihcIm5wbSBpIC1EIHZ1ZS11bmljb3JuLWxvZ1xcblxcdFxcdFxcdFxcdFxcdFxcdFwiKV0pLFxuICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAxXG4gICAgICAgICAgICApLFxuICAgICAgICAgIF1cbiAgICAgICAgKSxcbiAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJyb3cgbWItNVwiLCBhdHRyczogeyBpZDogXCJ1bC11c2FnZVwiIH0gfSwgW1xuICAgICAgICAgIF92bS5fbSgyKSxcbiAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgIF9jKFxuICAgICAgICAgICAgXCJkaXZcIixcbiAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6IFwiY29sLXhsLTggY29sLWxnLTEyXCIgfSxcbiAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgX2MoXCJ2dWUtY29kZS1oaWdobGlnaHRcIiwgeyBhdHRyczogeyBsYW5ndWFnZTogXCJqc1wiIH0gfSwgW1xuICAgICAgICAgICAgICAgIF9jKFwicHJlXCIsIFtcbiAgICAgICAgICAgICAgICAgIF92bS5fdihcbiAgICAgICAgICAgICAgICAgICAgXCJpbXBvcnQgVnVlIGZyb20gJ3Z1ZSc7XFxuaW1wb3J0IFVuaWNvcm5Mb2cgZnJvbSAndnVlLXVuaWNvcm4tbG9nJztcXG5cXG5WdWUudXNlKFVuaWNvcm5Mb2cpO1xcblxcdFxcdFxcdFxcdFxcdFxcdFxcdFxcdFwiXG4gICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAxXG4gICAgICAgICAgKSxcbiAgICAgICAgXSksXG4gICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgIF9jKFxuICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAgeyBzdGF0aWNDbGFzczogXCJyb3cgbWItNVwiLCBhdHRyczogeyBpZDogXCJ1bC1wbHVnaW4tb3B0aW9uc1wiIH0gfSxcbiAgICAgICAgICBbXG4gICAgICAgICAgICBfdm0uX20oMyksXG4gICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJjb2wtMTIgbWItM1wiIH0sIFtcbiAgICAgICAgICAgICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJ0YWJsZS1yZXNwb25zaXZlXCIgfSwgW1xuICAgICAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICAgICAgXCJ0YWJsZVwiLFxuICAgICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogXCJ0YWJsZSB0YWJsZS1zdHJpcGVkIHRhYmxlLWJvcmRlcmVkXCIgfSxcbiAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgX3ZtLl9tKDQpLFxuICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICBfYyhcInRib2R5XCIsIFtcbiAgICAgICAgICAgICAgICAgICAgICBfYyhcInRyXCIsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jKFwidGRcIiwgeyBhdHRyczogeyB2YWxpZ246IFwidG9wXCIgfSB9LCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcImRlZmF1bHRTdHlsZXNcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICBfYyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ0ZFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6IFwib3B0aW9uLXR5cGVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyB2YWxpZ246IFwidG9wXCIgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgW192bS5fdihcIk9iamVjdFwiKV1cbiAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl9tKDUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fbSg2KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICBfYyhcInRkXCIsIHsgYXR0cnM6IHsgdmFsaWduOiBcInRvcFwiIH0gfSwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoX3ZtLl9zKF92bS5jb3B5LmRlZmF1bHRTdHlsZXMpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgICAgX2MoXCJ0clwiLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICBfYyhcInRkXCIsIHsgYXR0cnM6IHsgdmFsaWduOiBcInRvcFwiIH0gfSwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCJkaXNhYmxlZFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICAgICAgICAgICAgICBcInRkXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogXCJvcHRpb24tdHlwZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHZhbGlnbjogXCJ0b3BcIiB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KFwiQm9vbGVhblwiKV1cbiAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgX2MoXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwidGRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiBcImJvb2xlYW4tc3R5bGVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyB2YWxpZ246IFwidG9wXCIgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgW192bS5fdihcImZhbHNlXCIpXVxuICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICBfYyhcInRkXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgdmFsaWduOiBcInRvcFwiIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGRvbVByb3BzOiB7IGlubmVySFRNTDogX3ZtLl9zKF92bS5vcHRpb25zLmJvb2xlYW4pIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICBfYyhcInRkXCIsIHsgYXR0cnM6IHsgdmFsaWduOiBcInRvcFwiIH0gfSwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoX3ZtLl9zKF92bS5jb3B5LmRpc2FibGVkKSksXG4gICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICAgIF9jKFwidHJcIiwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgX2MoXCJ0ZFwiLCB7IGF0dHJzOiB7IHZhbGlnbjogXCJ0b3BcIiB9IH0sIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwibG9nUHJlZml4XCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgX2MoXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwidGRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiBcIm9wdGlvbi10eXBlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgdmFsaWduOiBcInRvcFwiIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoXCJCb29sZWFuIHwgU3RyaW5nXCIpXVxuICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICBfYyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ0ZFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6IFwiYm9vbGVhbi1zdHlsZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHZhbGlnbjogXCJ0b3BcIiB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KFwiZmFsc2VcIildXG4gICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jKFwidGRcIiwgeyBhdHRyczogeyB2YWxpZ246IFwidG9wXCIgfSB9LCBbX3ZtLl92KFwiLVwiKV0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jKFwidGRcIiwgeyBhdHRyczogeyB2YWxpZ246IFwidG9wXCIgfSB9LCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihfdm0uX3MoX3ZtLmNvcHkubG9nUHJlZml4KSksXG4gICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICAgIF9jKFwidHJcIiwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgX2MoXCJ0ZFwiLCB7IGF0dHJzOiB7IHZhbGlnbjogXCJ0b3BcIiB9IH0sIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwic3R5bGVzXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgX2MoXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwidGRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiBcIm9wdGlvbi10eXBlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgdmFsaWduOiBcInRvcFwiIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoXCJTdHJpbmcgfCBBcnJheVwiKV1cbiAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgX2MoXCJ0ZFwiLCB7IGF0dHJzOiB7IHZhbGlnbjogXCJ0b3BcIiB9IH0sIFtfdm0uX3YoXCItXCIpXSksXG4gICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgX2MoXCJ0ZFwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHZhbGlnbjogXCJ0b3BcIiB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICBkb21Qcm9wczogeyBpbm5lckhUTUw6IF92bS5fcyhfdm0ub3B0aW9ucy5zdHlsZXMpIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICBfYyhcInRkXCIsIHsgYXR0cnM6IHsgdmFsaWduOiBcInRvcFwiIH0gfSwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoX3ZtLl9zKF92bS5jb3B5LnN0eWxlcykpLFxuICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICBfYyhcInRyXCIsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jKFwidGRcIiwgeyBhdHRyczogeyB2YWxpZ246IFwidG9wXCIgfSB9LCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcInR5cGVcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICBfYyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ0ZFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6IFwib3B0aW9uLXR5cGVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyB2YWxpZ246IFwidG9wXCIgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgW192bS5fdihcIlN0cmluZ1wiKV1cbiAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgX2MoXCJ0ZFwiLCB7IGF0dHJzOiB7IHZhbGlnbjogXCJ0b3BcIiB9IH0sIFtfdm0uX3YoXCJsb2dcIildKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICBfYyhcInRkXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgdmFsaWduOiBcInRvcFwiIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGRvbVByb3BzOiB7IGlubmVySFRNTDogX3ZtLl9zKF92bS5vcHRpb25zLnR5cGUpIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICBfYyhcInRkXCIsIHsgYXR0cnM6IHsgdmFsaWduOiBcInRvcFwiIH0gfSwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoX3ZtLl9zKF92bS5jb3B5LnR5cGUpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgIF92bS5fbSg3KSxcbiAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICBfYyhcbiAgICAgICAgICAgICAgXCJkaXZcIixcbiAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogXCJjb2wteGwtOCBjb2wtbGctMTJcIiB9LFxuICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgX2MoXCJ2dWUtY29kZS1oaWdobGlnaHRcIiwgeyBhdHRyczogeyBsYW5ndWFnZTogXCJqc1wiIH0gfSwgW1xuICAgICAgICAgICAgICAgICAgX2MoXCJwcmVcIiwgW1xuICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXG4gICAgICAgICAgICAgICAgICAgICAgXCJpbXBvcnQgVnVlIGZyb20gJ3Z1ZSc7XFxuaW1wb3J0IFVuaWNvcm5Mb2cgZnJvbSAndnVlLXVuaWNvcm4tbG9nJztcXG5cXG5WdWUudXNlKFVuaWNvcm5Mb2csIHtcXG4gIGRlZmF1bHRTdHlsZXM6IHt9LFxcbiAgZGlzYWJsZWQ6IHByb2Nlc3MuZW52LlVOSUNPUk5fTE9HICE9PSAndHJ1ZScsXFxuICBsb2dQcmVmaXg6ICdbT01HIExPT0sgSEVSRSFdJyxcXG4gIHN0eWxlczogJ2ZvbnQtd2VpZ2h0OiBib2xkOycsXFxuICB0eXBlOiAnaW5mbydcXG59KTtcXG5cXHRcXHRcXHRcXHRcXHRcXHRcXHRcXHRcIlxuICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgIDFcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJjb2wtMTJcIiB9LCBbXG4gICAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICAgIFwic3ZnXCIsXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsgZGlzcGxheTogXCJub25lXCIgfSxcbiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHhtbG5zOiBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICAgICAgICBcInN5bWJvbFwiLFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBcImV4Y2xhbWF0aW9uLXRyaWFuZ2xlLWZpbGxcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGw6IFwiY3VycmVudENvbG9yXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB2aWV3Qm94OiBcIjAgMCAxNiAxNlwiLFxuICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICBfYyhcInBhdGhcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZDogXCJNOC45ODIgMS41NjZhMS4xMyAxLjEzIDAgMCAwLTEuOTYgMEwuMTY1IDEzLjIzM2MtLjQ1Ny43NzguMDkxIDEuNzY3Ljk4IDEuNzY3aDEzLjcxM2MuODg5IDAgMS40MzgtLjk5Ljk4LTEuNzY3TDguOTgyIDEuNTY2ek04IDVjLjUzNSAwIC45NTQuNDYyLjkuOTk1bC0uMzUgMy41MDdhLjU1Mi41NTIgMCAwIDEtMS4xIDBMNy4xIDUuOTk1QS45MDUuOTA1IDAgMCAxIDggNXptLjAwMiA2YTEgMSAwIDEgMSAwIDIgMSAxIDAgMCAxIDAtMnpcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICBfYyhcbiAgICAgICAgICAgICAgICBcImRpdlwiLFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOlxuICAgICAgICAgICAgICAgICAgICBcImFsZXJ0IGFsZXJ0LXByaW1hcnkgZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlciBteS0yXCIsXG4gICAgICAgICAgICAgICAgICBhdHRyczogeyByb2xlOiBcImFsZXJ0XCIgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICAgICAgICBcInN2Z1wiLFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6IFwiYmkgZmxleC1zaHJpbmstMCBtZS0yXCIsXG4gICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiBcIjI0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IFwiMjRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvbGU6IFwiaW1nXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImFyaWEtbGFiZWxcIjogXCJJbmZvOlwiLFxuICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICBfYyhcInVzZVwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBcInhsaW5rOmhyZWZcIjogXCIjZXhjbGFtYXRpb24tdHJpYW5nbGUtZmlsbFwiIH0sXG4gICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgX3ZtLl9tKDgpLFxuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgIF1cbiAgICAgICAgKSxcbiAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgX2MoXG4gICAgICAgICAgXCJkaXZcIixcbiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiBcInJvdyBtYi01XCIsIGF0dHJzOiB7IGlkOiBcInVsLWxvZy1vcHRpb25zXCIgfSB9LFxuICAgICAgICAgIFtcbiAgICAgICAgICAgIF92bS5fbSg5KSxcbiAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImNvbC1sZy0xMlwiIH0sIFtcbiAgICAgICAgICAgICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJ0YWJsZS1yZXNwb25zaXZlXCIgfSwgW1xuICAgICAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICAgICAgXCJ0YWJsZVwiLFxuICAgICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogXCJ0YWJsZSB0YWJsZS1zdHJpcGVkIHRhYmxlLWJvcmRlcmVkXCIgfSxcbiAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgX3ZtLl9tKDEwKSxcbiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgX2MoXCJ0Ym9keVwiLCBbXG4gICAgICAgICAgICAgICAgICAgICAgX2MoXCJ0clwiLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICBfYyhcInRkXCIsIHsgYXR0cnM6IHsgdmFsaWduOiBcInRvcFwiIH0gfSwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCJhcnJheVwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICAgICAgICAgICAgICBcInRkXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogXCJvcHRpb24tdHlwZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHZhbGlnbjogXCJ0b3BcIiB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KFwiQXJyYXlcIildXG4gICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fbSgxMSksXG4gICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgX2MoXCJ0ZFwiLCB7IGF0dHJzOiB7IHZhbGlnbjogXCJ0b3BcIiB9IH0sIFtfdm0uX3YoXCItXCIpXSksXG4gICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgX2MoXCJ0ZFwiLCB7IGF0dHJzOiB7IHZhbGlnbjogXCJ0b3BcIiB9IH0sIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KF92bS5fcyhfdm0uY29weS5hcnJheSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICBfYyhcInRyXCIsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jKFwidGRcIiwgeyBhdHRyczogeyB2YWxpZ246IFwidG9wXCIgfSB9LCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcImRpc2FibGVkXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgX2MoXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwidGRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiBcIm9wdGlvbi10eXBlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgdmFsaWduOiBcInRvcFwiIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoXCJCb29sZWFuXCIpXVxuICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICBfYyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ0ZFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6IFwiYm9vbGVhbi1zdHlsZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHZhbGlnbjogXCJ0b3BcIiB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KFwiZmFsc2VcIildXG4gICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jKFwidGRcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyB2YWxpZ246IFwidG9wXCIgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZG9tUHJvcHM6IHsgaW5uZXJIVE1MOiBfdm0uX3MoX3ZtLm9wdGlvbnMuYm9vbGVhbikgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jKFwidGRcIiwgeyBhdHRyczogeyB2YWxpZ246IFwidG9wXCIgfSB9LCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihfdm0uX3MoX3ZtLmNvcHkuZGlzYWJsZWQpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgICAgX2MoXCJ0clwiLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICBfYyhcInRkXCIsIHsgYXR0cnM6IHsgdmFsaWduOiBcInRvcFwiIH0gfSwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCJsb2dQcmVmaXhcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICBfYyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ0ZFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6IFwib3B0aW9uLXR5cGVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyB2YWxpZ246IFwidG9wXCIgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgW192bS5fdihcIkJvb2xlYW4gfCBTdHJpbmdcIildXG4gICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICAgICAgICAgICAgICBcInRkXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogXCJib29sZWFuLXN0eWxlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgdmFsaWduOiBcInRvcFwiIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoXCJmYWxzZVwiKV1cbiAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgX2MoXCJ0ZFwiLCB7IGF0dHJzOiB7IHZhbGlnbjogXCJ0b3BcIiB9IH0sIFtfdm0uX3YoXCItXCIpXSksXG4gICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgX2MoXCJ0ZFwiLCB7IGF0dHJzOiB7IHZhbGlnbjogXCJ0b3BcIiB9IH0sIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KF92bS5fcyhfdm0uY29weS5sb2dQcmVmaXgpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgICAgX2MoXCJ0clwiLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICBfYyhcInRkXCIsIHsgYXR0cnM6IHsgdmFsaWduOiBcInRvcFwiIH0gfSwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCJtYWdpY2FsXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgX2MoXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwidGRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiBcIm9wdGlvbi10eXBlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgdmFsaWduOiBcInRvcFwiIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoXCJCb29sZWFuXCIpXVxuICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICBfYyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ0ZFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6IFwiYm9vbGVhbi1zdHlsZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHZhbGlnbjogXCJ0b3BcIiB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KFwiZmFsc2VcIildXG4gICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jKFwidGRcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyB2YWxpZ246IFwidG9wXCIgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZG9tUHJvcHM6IHsgaW5uZXJIVE1MOiBfdm0uX3MoX3ZtLm9wdGlvbnMuYm9vbGVhbikgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jKFwidGRcIiwgeyBhdHRyczogeyB2YWxpZ246IFwidG9wXCIgfSB9LCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihfdm0uX3MoX3ZtLmNvcHkubWFnaWNhbCkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICBfdm0uX20oMTIpLFxuICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgICAgX2MoXCJ0clwiLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICBfYyhcInRkXCIsIHsgYXR0cnM6IHsgdmFsaWduOiBcInRvcFwiIH0gfSwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCJvYmplY3RzXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgX2MoXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwidGRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiBcIm9wdGlvbi10eXBlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgdmFsaWduOiBcInRvcFwiIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoXCJPYmplY3RcIildXG4gICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fbSgxMyksXG4gICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgX2MoXCJ0ZFwiLCB7IGF0dHJzOiB7IHZhbGlnbjogXCJ0b3BcIiB9IH0sIFtfdm0uX3YoXCItXCIpXSksXG4gICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgX2MoXCJ0ZFwiLCB7IGF0dHJzOiB7IHZhbGlnbjogXCJ0b3BcIiB9IH0sIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KF92bS5fcyhfdm0uY29weS5vYmplY3QpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgICAgX2MoXCJ0clwiLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICBfYyhcInRkXCIsIHsgYXR0cnM6IHsgdmFsaWduOiBcInRvcFwiIH0gfSwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCJzdHlsZXNcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICBfYyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ0ZFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6IFwib3B0aW9uLXR5cGVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyB2YWxpZ246IFwidG9wXCIgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgW192bS5fdihcIlN0cmluZyB8IEFycmF5XCIpXVxuICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICBfYyhcInRkXCIsIHsgYXR0cnM6IHsgdmFsaWduOiBcInRvcFwiIH0gfSwgW192bS5fdihcIi1cIildKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICBfYyhcInRkXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgdmFsaWduOiBcInRvcFwiIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGRvbVByb3BzOiB7IGlubmVySFRNTDogX3ZtLl9zKF92bS5vcHRpb25zLnN0eWxlcykgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jKFwidGRcIiwgeyBhdHRyczogeyB2YWxpZ246IFwidG9wXCIgfSB9LCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihfdm0uX3MoX3ZtLmNvcHkuc3R5bGVzKSksXG4gICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICAgIF9jKFwidHJcIiwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgX2MoXCJ0ZFwiLCB7IGF0dHJzOiB7IHZhbGlnbjogXCJ0b3BcIiB9IH0sIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwidGV4dFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICAgICAgICAgICAgICBcInRkXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogXCJvcHRpb24tdHlwZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHZhbGlnbjogXCJ0b3BcIiB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KFwiU3RyaW5nXCIpXVxuICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICBfYyhcInRkXCIsIHsgYXR0cnM6IHsgdmFsaWduOiBcInRvcFwiIH0gfSwgW192bS5fdihcIvCfpoRcIildKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICBfYyhcInRkXCIsIHsgYXR0cnM6IHsgdmFsaWduOiBcInRvcFwiIH0gfSwgW192bS5fdihcIi1cIildKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICBfYyhcInRkXCIsIHsgYXR0cnM6IHsgdmFsaWduOiBcInRvcFwiIH0gfSwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoX3ZtLl9zKF92bS5jb3B5LnRleHQpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgICAgX2MoXCJ0clwiLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICBfYyhcInRkXCIsIHsgYXR0cnM6IHsgdmFsaWduOiBcInRvcFwiIH0gfSwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCJ0eXBlXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgX2MoXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwidGRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiBcIm9wdGlvbi10eXBlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgdmFsaWduOiBcInRvcFwiIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoXCJTdHJpbmdcIildXG4gICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jKFwidGRcIiwgeyBhdHRyczogeyB2YWxpZ246IFwidG9wXCIgfSB9LCBbX3ZtLl92KFwibG9nXCIpXSksXG4gICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgX2MoXCJ0ZFwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHZhbGlnbjogXCJ0b3BcIiB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICBkb21Qcm9wczogeyBpbm5lckhUTUw6IF92bS5fcyhfdm0ub3B0aW9ucy50eXBlKSB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgX2MoXCJ0ZFwiLCB7IGF0dHJzOiB7IHZhbGlnbjogXCJ0b3BcIiB9IH0sIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KF92bS5fcyhfdm0uY29weS50eXBlKSksXG4gICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICBdXG4gICAgICAgICksXG4gICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgIF92bS5fbSgxNCksXG4gICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgIF92bS5fbSgxNSksXG4gICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgIF9jKFxuICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAgeyBzdGF0aWNDbGFzczogXCJtYi01XCIsIGF0dHJzOiB7IGlkOiBcInVsLWV4YW1wbGVzXCIgfSB9LFxuICAgICAgICAgIFtcbiAgICAgICAgICAgIF92bS5fbSgxNiksXG4gICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgX2MoXCJTaW1wbGVFeGFtcGxlXCIsIHsgYXR0cnM6IHsgaWQ6IFwic2ltcGxlLWV4YW1wbGVzXCIgfSB9KSxcbiAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICBfYyhcIlRleHRFeGFtcGxlXCIsIHsgYXR0cnM6IHsgaWQ6IFwidGV4dC1leGFtcGxlc1wiIH0gfSksXG4gICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgX2MoXCJUeXBlRXhhbXBsZVwiLCB7IGF0dHJzOiB7IGlkOiBcInR5cGUtZXhhbXBsZXNcIiB9IH0pLFxuICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgIF9jKFwiU3R5bGVzRXhhbXBsZVwiLCB7IGF0dHJzOiB7IGlkOiBcInN0eWxlcy1leGFtcGxlc1wiIH0gfSksXG4gICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgX2MoXCJEaXNhYmxlZEV4YW1wbGVcIiwgeyBhdHRyczogeyBpZDogXCJkaXNhYmxlZC1leGFtcGxlc1wiIH0gfSksXG4gICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgX2MoXCJMb2dQcmVmaXhFeGFtcGxlXCIsIHsgYXR0cnM6IHsgaWQ6IFwibG9nUHJlZml4LWV4YW1wbGVzXCIgfSB9KSxcbiAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICBfYyhcIk1hZ2ljYWxFeGFtcGxlXCIsIHsgYXR0cnM6IHsgaWQ6IFwibWFnaWNhbC1leGFtcGxlc1wiIH0gfSksXG4gICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgX2MoXCJMb2dQcmVmaXhFeGFtcGxlXCIsIHtcbiAgICAgICAgICAgICAgYXR0cnM6IHsgaWQ6IFwibmFtZS1leGFtcGxlc1wiLCBpc05hbWVPcHRpb246IHRydWUgfSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgIF9jKFwiT2JqZWN0c0V4YW1wbGVzXCIsIHsgYXR0cnM6IHsgaWQ6IFwib2JqZWN0cy1leGFtcGxlc1wiIH0gfSksXG4gICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgX2MoXCJBcnJheXNFeGFtcGxlXCIsIHsgYXR0cnM6IHsgaWQ6IFwiYXJyYXktZXhhbXBsZXNcIiB9IH0pLFxuICAgICAgICAgIF0sXG4gICAgICAgICAgMVxuICAgICAgICApLFxuICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICBfdm0uX20oMTcpLFxuICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICBfdm0uX20oMTgpLFxuICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICBfdm0uX20oMTkpLFxuICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICBfdm0uX20oMjApLFxuICAgICAgXSksXG4gICAgXSxcbiAgICAxXG4gIClcbn1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXG4gIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX3ZtID0gdGhpc1xuICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICAgIHJldHVybiBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImNvbnRhaW5lciBtYi01XCIgfSwgW1xuICAgICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJyb3cgbWItM1wiIH0sIFtcbiAgICAgICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJjb2wtMTIgdGV4dC1jZW50ZXJcIiB9LCBbXG4gICAgICAgICAgX2MoXCJoMVwiLCB7IHN0YXRpY0NsYXNzOiBcInJhaW5ib3ctdGV4dFwiIH0sIFtcbiAgICAgICAgICAgIF92bS5fdihcIlZ1ZSBVbmljb3JuIExvZ1wiKSxcbiAgICAgICAgICBdKSxcbiAgICAgICAgXSksXG4gICAgICBdKSxcbiAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcInJvd1wiIH0sIFtcbiAgICAgICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJjb2wtMTIgbWItNFwiIH0sIFtcbiAgICAgICAgICBfYyhcImgzXCIsIHsgc3RhdGljQ2xhc3M6IFwidGV4dC1jZW50ZXIgbWItNFwiIH0sIFtcbiAgICAgICAgICAgIF92bS5fdihcIlxcblxcdFxcdFxcdFxcdFxcdFxcdEEgXCIpLFxuICAgICAgICAgICAgX2MoXCJzcGFuXCIsIHsgc3RhdGljQ2xhc3M6IFwicmFpbmJvdy10ZXh0XCIgfSwgW192bS5fdihcIm1hZ2ljYWxcIildKSxcbiAgICAgICAgICAgIF92bS5fdihcbiAgICAgICAgICAgICAgXCIg8J+mhCBwbHVnaW4gdG8gbWFrZVxcblxcdFxcdFxcdFxcdFxcdFxcdGNvbG9yaW5nIHRoZSBjb25zb2xlIG91dHB1dCBlYXNpZXIgYW5kIG1vcmUgZmxleGlibGUuXFxuXFx0XFx0XFx0XFx0XFx0XCJcbiAgICAgICAgICAgICksXG4gICAgICAgICAgXSksXG4gICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICBfYyhcInBcIiwgW1xuICAgICAgICAgICAgX3ZtLl92KFxuICAgICAgICAgICAgICBcIlxcblxcdFxcdFxcdFxcdFxcdFxcdFNvbWV0aW1lcyB3aGVuIGJ1aWxkaW5nIHlvdXIgYXBwbGljYXRpb24vc2l0ZSB5b3UgZG9uJ3Qgd2FudCB0byBzZWVcXG5cXHRcXHRcXHRcXHRcXHRcXHR5b3VyIGxpbnRlciBjb21wbGFpbmluZyBhYm91dCB1c2luZyBjb25zb2xlIGZ1bmN0aW9ucy4gVGhpcyBoZWxwcyB0b1xcblxcdFxcdFxcdFxcdFxcdFxcdGtlZXAgeW91ciBsaW50ZXIgaGFwcHkgc28geW91IGNhbiBjb25jZW50cmF0ZSBvbiB3cml0aW5nIGJ1ZyBmcmVlXFxuXFx0XFx0XFx0XFx0XFx0XFx0bWFnaWNhbCBjb2RlLlxcblxcdFxcdFxcdFxcdFxcdFwiXG4gICAgICAgICAgICApLFxuICAgICAgICAgIF0pLFxuICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgX2MoXCJwXCIsIFtcbiAgICAgICAgICAgIF92bS5fdihcbiAgICAgICAgICAgICAgXCJcXG5cXHRcXHRcXHRcXHRcXHRcXHRJdCBhbHNvIGhhcyB0aGUgYWJpbGl0eSB0byBydW4gdGhlIGNvbnNvbGUgZnVuY3Rpb25zIGRlcGVuZGluZyBvblxcblxcdFxcdFxcdFxcdFxcdFxcdGVudmlyb25tZW50IHZhcmlhYmxlcyBzbyB5b3UgY2FuIGtlZXAgeW91ciBwcm9kdWN0aW9uIHNpdGUncyBjb25zb2xlXFxuXFx0XFx0XFx0XFx0XFx0XFx0cXVpZXQuXFxuXFx0XFx0XFx0XFx0XFx0XCJcbiAgICAgICAgICAgICksXG4gICAgICAgICAgXSksXG4gICAgICAgIF0pLFxuICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImNvbC0xMlwiIH0sIFtfYyhcImg1XCIsIFtfdm0uX3YoXCJEZW1vXCIpXSldKSxcbiAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJjb2wtMTJcIiB9LCBbXG4gICAgICAgICAgX3ZtLl92KFxuICAgICAgICAgICAgJ1xcblxcdFxcdFxcdFxcdFxcdE9wZW4gRGV2VG9vbHMgYW5kIGNsaWNrIG9uIHRoZSBcIkNvbnNvbGVcIiB0YWIgYW5kIHRyeSBvdXQgc29tZVxcblxcdFxcdFxcdFxcdFxcdCdcbiAgICAgICAgICApLFxuICAgICAgICAgIF9jKFwiYVwiLCB7IGF0dHJzOiB7IGhyZWY6IFwiI3VsLWV4YW1wbGVzXCIgfSB9LCBbX3ZtLl92KFwiRXhhbXBsZXNcIildKSxcbiAgICAgICAgICBfdm0uX3YoXCIuXFxuXFx0XFx0XFx0XFx0XCIpLFxuICAgICAgICBdKSxcbiAgICAgIF0pLFxuICAgIF0pXG4gIH0sXG4gIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX3ZtID0gdGhpc1xuICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICAgIHJldHVybiBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImNvbC0xMlwiIH0sIFtcbiAgICAgIF9jKFwiaDJcIiwgW192bS5fdihcIkluc3RhbGxhdGlvblwiKV0pLFxuICAgIF0pXG4gIH0sXG4gIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX3ZtID0gdGhpc1xuICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICAgIHJldHVybiBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImNvbC0xMlwiIH0sIFtfYyhcImgyXCIsIFtfdm0uX3YoXCJVc2FnZVwiKV0pXSlcbiAgfSxcbiAgZnVuY3Rpb24gKCkge1xuICAgIHZhciBfdm0gPSB0aGlzXG4gICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50XG4gICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gICAgcmV0dXJuIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiY29sLTEyIG1iLTNcIiB9LCBbXG4gICAgICBfYyhcImgyXCIsIFtfdm0uX3YoXCJQbHVnaW4gT3B0aW9uc1wiKV0pLFxuICAgIF0pXG4gIH0sXG4gIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX3ZtID0gdGhpc1xuICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICAgIHJldHVybiBfYyhcInRoZWFkXCIsIFtcbiAgICAgIF9jKFwidHJcIiwgW1xuICAgICAgICBfYyhcInRoXCIsIFtfdm0uX3YoXCJOYW1lXCIpXSksXG4gICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgIF9jKFwidGhcIiwgW192bS5fdihcIlR5cGVcIildKSxcbiAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgX2MoXCJ0aFwiLCBbX3ZtLl92KFwiRGVmYXVsdFwiKV0pLFxuICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICBfYyhcInRoXCIsIFtfdm0uX3YoXCJPcHRpb25zXCIpXSksXG4gICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgIF9jKFwidGhcIiwgW192bS5fdihcIkRlc2NyaXB0aW9uXCIpXSksXG4gICAgICBdKSxcbiAgICBdKVxuICB9LFxuICBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF92bSA9IHRoaXNcbiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2hcbiAgICByZXR1cm4gX2MoXCJ0ZFwiLCB7IGF0dHJzOiB7IHZhbGlnbjogXCJ0b3BcIiB9IH0sIFtcbiAgICAgIF9jKFwiY29kZVwiLCBbXG4gICAgICAgIF9jKFwicHJlXCIsIFtcbiAgICAgICAgICBfdm0uX3YoXG4gICAgICAgICAgICBcImNvbnN0IHJhaW5ib3dMaW5lYXJHcmFkaWVudCA9IGBsaW5lYXItZ3JhZGllbnQodG8gcmlnaHQsXFxuXFx0aHNsKDAsIDEwMCUsIDUwJSksXFxuXFx0aHNsKDYwLCAxMDAlLCA1MCUpLFxcblxcdGhzbCgxMjAsIDEwMCUsIDUwJSksXFxuXFx0aHNsKDE4MCwgMTAwJSwgNTAlKSxcXG5cXHRoc2woMjQwLCAxMDAlLCA1MCUpLFxcblxcdGhzbCgzMDAsIDEwMCUsIDUwJSksXFxuXFx0aHNsKDM2MCwgMTAwJSwgNTAlKVxcbilgO1xcblxcbmRlZmF1bHRTdHlsZXM6IHtcXG5cXHRsb2c6IFtcXG5cXHRcXHQnYmFja2dyb3VuZC1jb2xvcjogYmxhY2snLFxcblxcdFxcdGBib3JkZXItaW1hZ2U6ICR7cmFpbmJvd0xpbmVhckdyYWRpZW50fSAxYCxcXG5cXHRcXHQnYm9yZGVyLXN0eWxlOiBzb2xpZCcsXFxuXFx0XFx0J2JvcmRlci13aWR0aDogNHB4JyxcXG5cXHRcXHQnY29sb3I6ICNmZmYnLFxcblxcdFxcdCdmb250LXdlaWdodDogbm9ybWFsJyxcXG5cXHRcXHQncGFkZGluZzogOHB4JyxcXG5cXHRdLFxcblxcdGluZm86IFtcXG5cXHRcXHQnYmFja2dyb3VuZC1jb2xvcjogaHNsYSgyMjUsIDEwMCUsIDglLCAxKScsXFxuXFx0XFx0J2JveC1zaGFkb3c6IDk5OXB4IDAgMCBoc2xhKDIyNSwgMTAwJSwgOCUsIDEpJyxcXG5cXHRcXHQnY29sb3I6IGhzbGEoMjI1LCAxMDAlLCA4NSUsIDEpJyxcXG5cXHRcXHQnZGlzcGxheTogYmxvY2snLFxcblxcdFxcdCdwYWRkaW5nOiAycHgnLFxcblxcdF0sXFxufVwiXG4gICAgICAgICAgKSxcbiAgICAgICAgXSksXG4gICAgICBdKSxcbiAgICBdKVxuICB9LFxuICBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF92bSA9IHRoaXNcbiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2hcbiAgICByZXR1cm4gX2MoXCJ0ZFwiLCB7IGF0dHJzOiB7IHZhbGlnbjogXCJ0b3BcIiB9IH0sIFtcbiAgICAgIF9jKFwiY29kZVwiLCBbX2MoXCJwcmVcIiwgW192bS5fdihcIntcXG5cXHRsb2c6IFtdLFxcblxcdGluZm86IFtdLFxcbn1cIildKV0pLFxuICAgIF0pXG4gIH0sXG4gIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX3ZtID0gdGhpc1xuICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICAgIHJldHVybiBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImNvbC0xMlwiIH0sIFtcbiAgICAgIF9jKFwiaDVcIiwgW192bS5fdihcIk92ZXJyaWRpbmcgdGhlIHBsdWdpbiBkZWZhdWx0IG9wdGlvbnNcIildKSxcbiAgICBdKVxuICB9LFxuICBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF92bSA9IHRoaXNcbiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2hcbiAgICByZXR1cm4gX2MoXCJkaXZcIiwgW1xuICAgICAgX3ZtLl92KFwiXFxuXFx0XFx0XFx0XFx0XFx0XFx0XFx0SXQgaXMgcmVjb21tZW5kZWQgdG8gc2V0IHRoZSBcIiksXG4gICAgICBfYyhcImNvZGVcIiwgW192bS5fdihcImRpc2FibGVkXCIpXSksXG4gICAgICBfdm0uX3YoXCIgb3B0aW9uIHRvIHVzZSBhXFxuXFx0XFx0XFx0XFx0XFx0XFx0XFx0XCIpLFxuICAgICAgX2MoXCJzcGFuXCIsIHsgc3RhdGljQ2xhc3M6IFwiZnN0LWl0YWxpY1wiIH0sIFtfdm0uX3YoXCIuZW52XCIpXSksXG4gICAgICBfdm0uX3YoXG4gICAgICAgIFwiIHZhcmlhYmxlIHdoZW4gcG9zc2libGUuIFRoaXNcXG5cXHRcXHRcXHRcXHRcXHRcXHRcXHR3YXkgeW91IHdpbGwgbm90IGhhdmUgeW91ciBsb2dzIGV4cG9zZWQgdG8gdGhlIHB1YmxpYyB3aGVuIG9uIGFcXG5cXHRcXHRcXHRcXHRcXHRcXHRcXHRwcm9kdWN0aW9uIHNpdGUuXFxuXFx0XFx0XFx0XFx0XFx0XFx0XCJcbiAgICAgICksXG4gICAgXSlcbiAgfSxcbiAgZnVuY3Rpb24gKCkge1xuICAgIHZhciBfdm0gPSB0aGlzXG4gICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50XG4gICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gICAgcmV0dXJuIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiY29sLTEyIG1iLTNcIiB9LCBbXG4gICAgICBfYyhcImgyXCIsIFtfdm0uX3YoXCJMb2cgT3B0aW9uc1wiKV0pLFxuICAgIF0pXG4gIH0sXG4gIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX3ZtID0gdGhpc1xuICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICAgIHJldHVybiBfYyhcInRoZWFkXCIsIFtcbiAgICAgIF9jKFwidHJcIiwgW1xuICAgICAgICBfYyhcInRoXCIsIFtfdm0uX3YoXCJOYW1lXCIpXSksXG4gICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgIF9jKFwidGhcIiwgW192bS5fdihcIlR5cGVcIildKSxcbiAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgX2MoXCJ0aFwiLCBbX3ZtLl92KFwiRGVmYXVsdFwiKV0pLFxuICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICBfYyhcInRoXCIsIFtfdm0uX3YoXCJPcHRpb25zXCIpXSksXG4gICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgIF9jKFwidGhcIiwgW192bS5fdihcIkRlc2NyaXB0aW9uXCIpXSksXG4gICAgICBdKSxcbiAgICBdKVxuICB9LFxuICBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF92bSA9IHRoaXNcbiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2hcbiAgICByZXR1cm4gX2MoXCJ0ZFwiLCB7IGF0dHJzOiB7IHZhbGlnbjogXCJ0b3BcIiB9IH0sIFtfYyhcImNvZGVcIiwgW192bS5fdihcIltdXCIpXSldKVxuICB9LFxuICBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF92bSA9IHRoaXNcbiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2hcbiAgICByZXR1cm4gX2MoXCJ0clwiLCBbXG4gICAgICBfYyhcInRkXCIsIHsgYXR0cnM6IHsgdmFsaWduOiBcInRvcFwiIH0gfSwgW192bS5fdihcIm5hbWVcIildKSxcbiAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICBfYyhcInRkXCIsIHsgc3RhdGljQ2xhc3M6IFwib3B0aW9uLXR5cGVcIiwgYXR0cnM6IHsgdmFsaWduOiBcInRvcFwiIH0gfSwgW1xuICAgICAgICBfdm0uX3YoXCJTdHJpbmdcIiksXG4gICAgICBdKSxcbiAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICBfYyhcInRkXCIsIHsgYXR0cnM6IHsgdmFsaWduOiBcInRvcFwiIH0gfSwgW192bS5fdihcIltVbmljb3JuTG9nXTpcIildKSxcbiAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICBfYyhcInRkXCIsIHsgYXR0cnM6IHsgdmFsaWduOiBcInRvcFwiIH0gfSwgW192bS5fdihcIi1cIildKSxcbiAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICBfYyhcInRkXCIsIHsgYXR0cnM6IHsgdmFsaWduOiBcInRvcFwiIH0gfSwgW1xuICAgICAgICBfdm0uX3YoXCJcXG5cXHRcXHRcXHRcXHRcXHRcXHRcXHRcXHRcXHRcXHRJZiBcIiksXG4gICAgICAgIF9jKFwiY29kZVwiLCBbX3ZtLl92KFwibG9nUHJlZml4XCIpXSksXG4gICAgICAgIF92bS5fdihcIiBvcHRpb24gaXMgc2V0IGFzIGFcXG5cXHRcXHRcXHRcXHRcXHRcXHRcXHRcXHRcXHRcXHRcIiksXG4gICAgICAgIF9jKFwic3BhblwiLCB7IHN0YXRpY0NsYXNzOiBcIm9wdGlvbi10eXBlXCIgfSwgW192bS5fdihcIkJvb2xlYW5cIildKSxcbiAgICAgICAgX3ZtLl92KFwiIG9mXFxuXFx0XFx0XFx0XFx0XFx0XFx0XFx0XFx0XFx0XFx0XCIpLFxuICAgICAgICBfYyhcInNwYW5cIiwgeyBzdGF0aWNDbGFzczogXCJib29sZWFuLXN0eWxlXCIgfSwgW192bS5fdihcInRydWVcIildKSxcbiAgICAgICAgX3ZtLl92KFwiLCBpdCB3aWxsIHVzZSB0aGVcXG5cXHRcXHRcXHRcXHRcXHRcXHRcXHRcXHRcXHRcXHRcIiksXG4gICAgICAgIF9jKFwiY29kZVwiLCBbX3ZtLl92KFwibmFtZVwiKV0pLFxuICAgICAgICBfdm0uX3YoXCIgb3B0aW9uIGZvciB0aGUgcHJlZml4LlxcblxcdFxcdFxcdFxcdFxcdFxcdFxcdFxcdFxcdFwiKSxcbiAgICAgIF0pLFxuICAgIF0pXG4gIH0sXG4gIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX3ZtID0gdGhpc1xuICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICAgIHJldHVybiBfYyhcInRkXCIsIHsgYXR0cnM6IHsgdmFsaWduOiBcInRvcFwiIH0gfSwgW19jKFwiY29kZVwiLCBbX3ZtLl92KFwie31cIildKV0pXG4gIH0sXG4gIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX3ZtID0gdGhpc1xuICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICAgIHJldHVybiBfYyhcbiAgICAgIFwiZGl2XCIsXG4gICAgICB7IHN0YXRpY0NsYXNzOiBcInJvdyBtYi01XCIsIGF0dHJzOiB7IGlkOiBcInVsLWluc3RhbmNlLW1ldGhvZHNcIiB9IH0sXG4gICAgICBbXG4gICAgICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiY29sLTEyXCIgfSwgW1xuICAgICAgICAgIF9jKFwiaDJcIiwgW192bS5fdihcIkluc3RhbmNlIE1ldGhvZHNcIildKSxcbiAgICAgICAgXSksXG4gICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiY29sLTEyXCIgfSwgW1xuICAgICAgICAgIF92bS5fdihcbiAgICAgICAgICAgIFwiXFxuXFx0XFx0XFx0XFx0XFx0VGhlcmUgYXJlIHR3byBpbnN0YW5jZSBtZXRob2RzIGF2YWlsYWJsZSB0byB1c2U6XFxuXFx0XFx0XFx0XFx0XFx0XCJcbiAgICAgICAgICApLFxuICAgICAgICAgIF9jKFwiYnJcIiksXG4gICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICBfYyhcImNvZGVcIiwgW192bS5fdihcIiR1bmljb3JuTG9nXCIpXSksXG4gICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICBfYyhcImJyXCIpLFxuICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgX2MoXCJjb2RlXCIsIFtfdm0uX3YoXCIkdW5pTG9nXCIpXSksXG4gICAgICAgIF0pLFxuICAgICAgXVxuICAgIClcbiAgfSxcbiAgZnVuY3Rpb24gKCkge1xuICAgIHZhciBfdm0gPSB0aGlzXG4gICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50XG4gICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gICAgcmV0dXJuIF9jKFxuICAgICAgXCJkaXZcIixcbiAgICAgIHsgc3RhdGljQ2xhc3M6IFwicm93IG1iLTVcIiwgYXR0cnM6IHsgaWQ6IFwidWwtY29uc29sZS1tZXRob2RzXCIgfSB9LFxuICAgICAgW1xuICAgICAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImNvbC0xMlwiIH0sIFtcbiAgICAgICAgICBfYyhcImgyXCIsIFtfdm0uX3YoXCJDb25zb2xlIE1ldGhvZHNcIildKSxcbiAgICAgICAgXSksXG4gICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiY29sLTEyXCIgfSwgW1xuICAgICAgICAgIF92bS5fdihcbiAgICAgICAgICAgIFwiXFxuXFx0XFx0XFx0XFx0XFx0Rm9yIGEgZGVzY3JpcHRpb24gb2YgdGhlIGRpZmZlcmVudCBsb2cgbWV0aG9kcywgcmVmZXIgdG8gdGhlXFxuXFx0XFx0XFx0XFx0XFx0XCJcbiAgICAgICAgICApLFxuICAgICAgICAgIF9jKFxuICAgICAgICAgICAgXCJhXCIsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgICAgICAgaHJlZjogXCJodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvY29uc29sZVwiLFxuICAgICAgICAgICAgICAgIHRhcmdldDogXCJfYmxhbmtcIixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBbX3ZtLl92KFwiV2ViIEFQSXMgTUROXCIpXVxuICAgICAgICAgICksXG4gICAgICAgICAgX3ZtLl92KFwiXFxuXFx0XFx0XFx0XFx0XFx0ZGV2ZWxvcGVyIGRvY3VtZW50YXRpb24gZm9yIGNvbnNvbGUuXFxuXFx0XFx0XFx0XFx0XCIpLFxuICAgICAgICBdKSxcbiAgICAgIF1cbiAgICApXG4gIH0sXG4gIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX3ZtID0gdGhpc1xuICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICAgIHJldHVybiBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcInJvd1wiIH0sIFtcbiAgICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiY29sLTEyIG1iLTNcIiB9LCBbXG4gICAgICAgIF9jKFwiaDJcIiwgW192bS5fdihcIkV4YW1wbGVzXCIpXSksXG4gICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgIF9jKFwicFwiLCB7IHN0YXRpY0NsYXNzOiBcImZzdC1pdGFsaWNcIiB9LCBbXG4gICAgICAgICAgX3ZtLl92KFxuICAgICAgICAgICAgJ1xcblxcdFxcdFxcdFxcdFxcdFxcdFxcdE9wZW4gRGV2VG9vbHMgYW5kIGNsaWNrIG9uIHRoZSBcIkNvbnNvbGVcIiB0YWIgdG8gdmlldyBleGFtcGxlXFxuXFx0XFx0XFx0XFx0XFx0XFx0XFx0cmVzdWx0cy5cXG5cXHRcXHRcXHRcXHRcXHRcXHQnXG4gICAgICAgICAgKSxcbiAgICAgICAgXSksXG4gICAgICBdKSxcbiAgICBdKVxuICB9LFxuICBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF92bSA9IHRoaXNcbiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2hcbiAgICByZXR1cm4gX2MoXG4gICAgICBcImRpdlwiLFxuICAgICAgeyBzdGF0aWNDbGFzczogXCJyb3cgbWItNVwiLCBhdHRyczogeyBpZDogXCJ1bC1kZXBlbmRlbmNpZXNcIiB9IH0sXG4gICAgICBbXG4gICAgICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiY29sLTEyXCIgfSwgW1xuICAgICAgICAgIF9jKFwiaDJcIiwgW192bS5fdihcIkRlcGVuZGVuY2llc1wiKV0pLFxuICAgICAgICBdKSxcbiAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJjb2wteGwtOCBjb2wtbGctMTJcIiB9LCBbXG4gICAgICAgICAgX2MoXG4gICAgICAgICAgICBcImFcIixcbiAgICAgICAgICAgIHsgYXR0cnM6IHsgaHJlZjogXCJodHRwczovL3YyLnZ1ZWpzLm9yZy9cIiwgdGFyZ2V0OiBcIl9ibGFua1wiIH0gfSxcbiAgICAgICAgICAgIFtfdm0uX3YoXCJWdWUgMlwiKV1cbiAgICAgICAgICApLFxuICAgICAgICBdKSxcbiAgICAgIF1cbiAgICApXG4gIH0sXG4gIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX3ZtID0gdGhpc1xuICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICAgIHJldHVybiBfYyhcbiAgICAgIFwiZGl2XCIsXG4gICAgICB7IHN0YXRpY0NsYXNzOiBcInJvdyBtYi01XCIsIGF0dHJzOiB7IGlkOiBcInVsLWNoYW5nZS1sb2dcIiB9IH0sXG4gICAgICBbXG4gICAgICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiY29sLTEyXCIgfSwgW1xuICAgICAgICAgIF9jKFwiaDJcIiwgW192bS5fdihcIkNoYW5nZSBMb2dcIildKSxcbiAgICAgICAgXSksXG4gICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiY29sLTEyXCIgfSwgW1xuICAgICAgICAgIF9jKFxuICAgICAgICAgICAgXCJhXCIsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgICAgICAgaHJlZjogXCJodHRwczovL2dpdGh1Yi5jb20vd2ViZGV2bmVyZHN0dWZmL3Z1ZS11bmljb3JuLWxvZy9ibG9iL21hc3Rlci9DSEFOR0VMT0cubWRcIixcbiAgICAgICAgICAgICAgICB0YXJnZXQ6IFwiX2JsYW5rXCIsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgW192bS5fdihcIkNIQU5HRUxPRy5tZFwiKV1cbiAgICAgICAgICApLFxuICAgICAgICBdKSxcbiAgICAgIF1cbiAgICApXG4gIH0sXG4gIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX3ZtID0gdGhpc1xuICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICAgIHJldHVybiBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcInJvdyBtYi01XCIsIGF0dHJzOiB7IGlkOiBcInVsLWxpY2Vuc2VcIiB9IH0sIFtcbiAgICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiY29sLTEyXCIgfSwgW19jKFwiaDJcIiwgW192bS5fdihcIkxpY2Vuc2VcIildKV0pLFxuICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiY29sLTEyXCIgfSwgW1xuICAgICAgICBfYyhcInBcIiwgW1xuICAgICAgICAgIF92bS5fdihcbiAgICAgICAgICAgIFwiXFxuXFx0XFx0XFx0XFx0XFx0XFx0Q29weXJpZ2h0IMKpIDIwMjIgV2ViRGV2TmVyZFN0dWZmXFxuXFx0XFx0XFx0XFx0XFx0XFx0XCJcbiAgICAgICAgICApLFxuICAgICAgICAgIF9jKFwiYnJcIiksXG4gICAgICAgICAgX3ZtLl92KFwiXFxuXFx0XFx0XFx0XFx0XFx0XFx0TGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxcblxcdFxcdFxcdFxcdFxcdFwiKSxcbiAgICAgICAgXSksXG4gICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgIF9jKFwicFwiLCBbXG4gICAgICAgICAgX2MoXG4gICAgICAgICAgICBcImFcIixcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgICBocmVmOiBcImh0dHBzOi8vZ2l0aHViLmNvbS93ZWJkZXZuZXJkc3R1ZmYvdnVlLXVuaWNvcm4tbG9nL2Jsb2IvbWFzdGVyL0xJQ0VOU0UubWRcIixcbiAgICAgICAgICAgICAgICB0YXJnZXQ6IFwiX2JsYW5rXCIsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgW192bS5fdihcIlxcblxcdFxcdFxcdFxcdFxcdFxcdFxcdExJQ0VOU0UubWRcXG5cXHRcXHRcXHRcXHRcXHRcXHRcIildXG4gICAgICAgICAgKSxcbiAgICAgICAgXSksXG4gICAgICBdKSxcbiAgICBdKVxuICB9LFxuICBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF92bSA9IHRoaXNcbiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2hcbiAgICByZXR1cm4gX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJyb3cgbWItNVwiIH0sIFtcbiAgICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiY29sLTEyIHRleHQtY2VudGVyXCIgfSwgW1xuICAgICAgICBfYyhcImltZ1wiLCB7XG4gICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgIHNyYzogXCIvaW1hZ2VzL3Z1ZS11bmljb3JuLWxvZy1zb2NpYWwuanBnXCIsXG4gICAgICAgICAgICBhbHQ6IFwiVnVlIFVuaWNvcm4gTG9nIGJ5IEBXZWJEZXZOZXJkU3R1ZmZcIixcbiAgICAgICAgICB9LFxuICAgICAgICB9KSxcbiAgICAgIF0pLFxuICAgIF0pXG4gIH0sXG5dXG5yZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWVcblxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSIsIi8qIGdsb2JhbHMgX19WVUVfU1NSX0NPTlRFWFRfXyAqL1xuXG4vLyBJTVBPUlRBTlQ6IERvIE5PVCB1c2UgRVMyMDE1IGZlYXR1cmVzIGluIHRoaXMgZmlsZSAoZXhjZXB0IGZvciBtb2R1bGVzKS5cbi8vIFRoaXMgbW9kdWxlIGlzIGEgcnVudGltZSB1dGlsaXR5IGZvciBjbGVhbmVyIGNvbXBvbmVudCBtb2R1bGUgb3V0cHV0IGFuZCB3aWxsXG4vLyBiZSBpbmNsdWRlZCBpbiB0aGUgZmluYWwgd2VicGFjayB1c2VyIGJ1bmRsZS5cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbm9ybWFsaXplQ29tcG9uZW50IChcbiAgc2NyaXB0RXhwb3J0cyxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZ1bmN0aW9uYWxUZW1wbGF0ZSxcbiAgaW5qZWN0U3R5bGVzLFxuICBzY29wZUlkLFxuICBtb2R1bGVJZGVudGlmaWVyLCAvKiBzZXJ2ZXIgb25seSAqL1xuICBzaGFkb3dNb2RlIC8qIHZ1ZS1jbGkgb25seSAqL1xuKSB7XG4gIC8vIFZ1ZS5leHRlbmQgY29uc3RydWN0b3IgZXhwb3J0IGludGVyb3BcbiAgdmFyIG9wdGlvbnMgPSB0eXBlb2Ygc2NyaXB0RXhwb3J0cyA9PT0gJ2Z1bmN0aW9uJ1xuICAgID8gc2NyaXB0RXhwb3J0cy5vcHRpb25zXG4gICAgOiBzY3JpcHRFeHBvcnRzXG5cbiAgLy8gcmVuZGVyIGZ1bmN0aW9uc1xuICBpZiAocmVuZGVyKSB7XG4gICAgb3B0aW9ucy5yZW5kZXIgPSByZW5kZXJcbiAgICBvcHRpb25zLnN0YXRpY1JlbmRlckZucyA9IHN0YXRpY1JlbmRlckZuc1xuICAgIG9wdGlvbnMuX2NvbXBpbGVkID0gdHJ1ZVxuICB9XG5cbiAgLy8gZnVuY3Rpb25hbCB0ZW1wbGF0ZVxuICBpZiAoZnVuY3Rpb25hbFRlbXBsYXRlKSB7XG4gICAgb3B0aW9ucy5mdW5jdGlvbmFsID0gdHJ1ZVxuICB9XG5cbiAgLy8gc2NvcGVkSWRcbiAgaWYgKHNjb3BlSWQpIHtcbiAgICBvcHRpb25zLl9zY29wZUlkID0gJ2RhdGEtdi0nICsgc2NvcGVJZFxuICB9XG5cbiAgdmFyIGhvb2tcbiAgaWYgKG1vZHVsZUlkZW50aWZpZXIpIHsgLy8gc2VydmVyIGJ1aWxkXG4gICAgaG9vayA9IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAvLyAyLjMgaW5qZWN0aW9uXG4gICAgICBjb250ZXh0ID1cbiAgICAgICAgY29udGV4dCB8fCAvLyBjYWNoZWQgY2FsbFxuICAgICAgICAodGhpcy4kdm5vZGUgJiYgdGhpcy4kdm5vZGUuc3NyQ29udGV4dCkgfHwgLy8gc3RhdGVmdWxcbiAgICAgICAgKHRoaXMucGFyZW50ICYmIHRoaXMucGFyZW50LiR2bm9kZSAmJiB0aGlzLnBhcmVudC4kdm5vZGUuc3NyQ29udGV4dCkgLy8gZnVuY3Rpb25hbFxuICAgICAgLy8gMi4yIHdpdGggcnVuSW5OZXdDb250ZXh0OiB0cnVlXG4gICAgICBpZiAoIWNvbnRleHQgJiYgdHlwZW9mIF9fVlVFX1NTUl9DT05URVhUX18gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGNvbnRleHQgPSBfX1ZVRV9TU1JfQ09OVEVYVF9fXG4gICAgICB9XG4gICAgICAvLyBpbmplY3QgY29tcG9uZW50IHN0eWxlc1xuICAgICAgaWYgKGluamVjdFN0eWxlcykge1xuICAgICAgICBpbmplY3RTdHlsZXMuY2FsbCh0aGlzLCBjb250ZXh0KVxuICAgICAgfVxuICAgICAgLy8gcmVnaXN0ZXIgY29tcG9uZW50IG1vZHVsZSBpZGVudGlmaWVyIGZvciBhc3luYyBjaHVuayBpbmZlcnJlbmNlXG4gICAgICBpZiAoY29udGV4dCAmJiBjb250ZXh0Ll9yZWdpc3RlcmVkQ29tcG9uZW50cykge1xuICAgICAgICBjb250ZXh0Ll9yZWdpc3RlcmVkQ29tcG9uZW50cy5hZGQobW9kdWxlSWRlbnRpZmllcilcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gdXNlZCBieSBzc3IgaW4gY2FzZSBjb21wb25lbnQgaXMgY2FjaGVkIGFuZCBiZWZvcmVDcmVhdGVcbiAgICAvLyBuZXZlciBnZXRzIGNhbGxlZFxuICAgIG9wdGlvbnMuX3NzclJlZ2lzdGVyID0gaG9va1xuICB9IGVsc2UgaWYgKGluamVjdFN0eWxlcykge1xuICAgIGhvb2sgPSBzaGFkb3dNb2RlXG4gICAgICA/IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaW5qZWN0U3R5bGVzLmNhbGwoXG4gICAgICAgICAgdGhpcyxcbiAgICAgICAgICAob3B0aW9ucy5mdW5jdGlvbmFsID8gdGhpcy5wYXJlbnQgOiB0aGlzKS4kcm9vdC4kb3B0aW9ucy5zaGFkb3dSb290XG4gICAgICAgIClcbiAgICAgIH1cbiAgICAgIDogaW5qZWN0U3R5bGVzXG4gIH1cblxuICBpZiAoaG9vaykge1xuICAgIGlmIChvcHRpb25zLmZ1bmN0aW9uYWwpIHtcbiAgICAgIC8vIGZvciB0ZW1wbGF0ZS1vbmx5IGhvdC1yZWxvYWQgYmVjYXVzZSBpbiB0aGF0IGNhc2UgdGhlIHJlbmRlciBmbiBkb2Vzbid0XG4gICAgICAvLyBnbyB0aHJvdWdoIHRoZSBub3JtYWxpemVyXG4gICAgICBvcHRpb25zLl9pbmplY3RTdHlsZXMgPSBob29rXG4gICAgICAvLyByZWdpc3RlciBmb3IgZnVuY3Rpb25hbCBjb21wb25lbnQgaW4gdnVlIGZpbGVcbiAgICAgIHZhciBvcmlnaW5hbFJlbmRlciA9IG9wdGlvbnMucmVuZGVyXG4gICAgICBvcHRpb25zLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcldpdGhTdHlsZUluamVjdGlvbiAoaCwgY29udGV4dCkge1xuICAgICAgICBob29rLmNhbGwoY29udGV4dClcbiAgICAgICAgcmV0dXJuIG9yaWdpbmFsUmVuZGVyKGgsIGNvbnRleHQpXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGluamVjdCBjb21wb25lbnQgcmVnaXN0cmF0aW9uIGFzIGJlZm9yZUNyZWF0ZSBob29rXG4gICAgICB2YXIgZXhpc3RpbmcgPSBvcHRpb25zLmJlZm9yZUNyZWF0ZVxuICAgICAgb3B0aW9ucy5iZWZvcmVDcmVhdGUgPSBleGlzdGluZ1xuICAgICAgICA/IFtdLmNvbmNhdChleGlzdGluZywgaG9vaylcbiAgICAgICAgOiBbaG9va11cbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGV4cG9ydHM6IHNjcmlwdEV4cG9ydHMsXG4gICAgb3B0aW9uczogb3B0aW9uc1xuICB9XG59XG4iLCIvLyBzdHlsZS1sb2FkZXI6IEFkZHMgc29tZSBjc3MgdG8gdGhlIERPTSBieSBhZGRpbmcgYSA8c3R5bGU+IHRhZ1xuXG4vLyBsb2FkIHRoZSBzdHlsZXNcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcz8/Y2xvbmVkUnVsZVNldC0zWzBdLnJ1bGVzWzBdLnVzZVsyXSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL1VuaWNvcm5Mb2cudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmbGFuZz1zY3NzJlwiKTtcbmlmKGNvbnRlbnQuX19lc01vZHVsZSkgY29udGVudCA9IGNvbnRlbnQuZGVmYXVsdDtcbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG4vLyBhZGQgdGhlIHN0eWxlcyB0byB0aGUgRE9NXG52YXIgYWRkID0gcmVxdWlyZShcIiEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzQ2xpZW50LmpzXCIpLmRlZmF1bHRcbnZhciB1cGRhdGUgPSBhZGQoXCIxZWY3MzFjOVwiLCBjb250ZW50LCBmYWxzZSwge30pO1xuLy8gSG90IE1vZHVsZSBSZXBsYWNlbWVudFxuaWYobW9kdWxlLmhvdCkge1xuIC8vIFdoZW4gdGhlIHN0eWxlcyBjaGFuZ2UsIHVwZGF0ZSB0aGUgPHN0eWxlPiB0YWdzXG4gaWYoIWNvbnRlbnQubG9jYWxzKSB7XG4gICBtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcz8/Y2xvbmVkUnVsZVNldC0zWzBdLnJ1bGVzWzBdLnVzZVsyXSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL1VuaWNvcm5Mb2cudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmbGFuZz1zY3NzJlwiLCBmdW5jdGlvbigpIHtcbiAgICAgdmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9jbG9uZWRSdWxlU2V0LTNbMF0ucnVsZXNbMF0udXNlWzJdIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vVW5pY29ybkxvZy52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZsYW5nPXNjc3MmXCIpO1xuICAgICBpZihuZXdDb250ZW50Ll9fZXNNb2R1bGUpIG5ld0NvbnRlbnQgPSBuZXdDb250ZW50LmRlZmF1bHQ7XG4gICAgIGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuICAgICB1cGRhdGUobmV3Q29udGVudCk7XG4gICB9KTtcbiB9XG4gLy8gV2hlbiB0aGUgbW9kdWxlIGlzIGRpc3Bvc2VkLCByZW1vdmUgdGhlIDxzdHlsZT4gdGFnc1xuIG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsIi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiAgTW9kaWZpZWQgYnkgRXZhbiBZb3UgQHl5eDk5MDgwM1xuKi9cblxuaW1wb3J0IGxpc3RUb1N0eWxlcyBmcm9tICcuL2xpc3RUb1N0eWxlcydcblxudmFyIGhhc0RvY3VtZW50ID0gdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJ1xuXG5pZiAodHlwZW9mIERFQlVHICE9PSAndW5kZWZpbmVkJyAmJiBERUJVRykge1xuICBpZiAoIWhhc0RvY3VtZW50KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICd2dWUtc3R5bGUtbG9hZGVyIGNhbm5vdCBiZSB1c2VkIGluIGEgbm9uLWJyb3dzZXIgZW52aXJvbm1lbnQuICcgK1xuICAgIFwiVXNlIHsgdGFyZ2V0OiAnbm9kZScgfSBpbiB5b3VyIFdlYnBhY2sgY29uZmlnIHRvIGluZGljYXRlIGEgc2VydmVyLXJlbmRlcmluZyBlbnZpcm9ubWVudC5cIlxuICApIH1cbn1cblxuLypcbnR5cGUgU3R5bGVPYmplY3QgPSB7XG4gIGlkOiBudW1iZXI7XG4gIHBhcnRzOiBBcnJheTxTdHlsZU9iamVjdFBhcnQ+XG59XG5cbnR5cGUgU3R5bGVPYmplY3RQYXJ0ID0ge1xuICBjc3M6IHN0cmluZztcbiAgbWVkaWE6IHN0cmluZztcbiAgc291cmNlTWFwOiA/c3RyaW5nXG59XG4qL1xuXG52YXIgc3R5bGVzSW5Eb20gPSB7LypcbiAgW2lkOiBudW1iZXJdOiB7XG4gICAgaWQ6IG51bWJlcixcbiAgICByZWZzOiBudW1iZXIsXG4gICAgcGFydHM6IEFycmF5PChvYmo/OiBTdHlsZU9iamVjdFBhcnQpID0+IHZvaWQ+XG4gIH1cbiovfVxuXG52YXIgaGVhZCA9IGhhc0RvY3VtZW50ICYmIChkb2N1bWVudC5oZWFkIHx8IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF0pXG52YXIgc2luZ2xldG9uRWxlbWVudCA9IG51bGxcbnZhciBzaW5nbGV0b25Db3VudGVyID0gMFxudmFyIGlzUHJvZHVjdGlvbiA9IGZhbHNlXG52YXIgbm9vcCA9IGZ1bmN0aW9uICgpIHt9XG52YXIgb3B0aW9ucyA9IG51bGxcbnZhciBzc3JJZEtleSA9ICdkYXRhLXZ1ZS1zc3ItaWQnXG5cbi8vIEZvcmNlIHNpbmdsZS10YWcgc29sdXRpb24gb24gSUU2LTksIHdoaWNoIGhhcyBhIGhhcmQgbGltaXQgb24gdGhlICMgb2YgPHN0eWxlPlxuLy8gdGFncyBpdCB3aWxsIGFsbG93IG9uIGEgcGFnZVxudmFyIGlzT2xkSUUgPSB0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiAvbXNpZSBbNi05XVxcYi8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkpXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFkZFN0eWxlc0NsaWVudCAocGFyZW50SWQsIGxpc3QsIF9pc1Byb2R1Y3Rpb24sIF9vcHRpb25zKSB7XG4gIGlzUHJvZHVjdGlvbiA9IF9pc1Byb2R1Y3Rpb25cblxuICBvcHRpb25zID0gX29wdGlvbnMgfHwge31cblxuICB2YXIgc3R5bGVzID0gbGlzdFRvU3R5bGVzKHBhcmVudElkLCBsaXN0KVxuICBhZGRTdHlsZXNUb0RvbShzdHlsZXMpXG5cbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZSAobmV3TGlzdCkge1xuICAgIHZhciBtYXlSZW1vdmUgPSBbXVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaXRlbSA9IHN0eWxlc1tpXVxuICAgICAgdmFyIGRvbVN0eWxlID0gc3R5bGVzSW5Eb21baXRlbS5pZF1cbiAgICAgIGRvbVN0eWxlLnJlZnMtLVxuICAgICAgbWF5UmVtb3ZlLnB1c2goZG9tU3R5bGUpXG4gICAgfVxuICAgIGlmIChuZXdMaXN0KSB7XG4gICAgICBzdHlsZXMgPSBsaXN0VG9TdHlsZXMocGFyZW50SWQsIG5ld0xpc3QpXG4gICAgICBhZGRTdHlsZXNUb0RvbShzdHlsZXMpXG4gICAgfSBlbHNlIHtcbiAgICAgIHN0eWxlcyA9IFtdXG4gICAgfVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWF5UmVtb3ZlLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgZG9tU3R5bGUgPSBtYXlSZW1vdmVbaV1cbiAgICAgIGlmIChkb21TdHlsZS5yZWZzID09PSAwKSB7XG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgZG9tU3R5bGUucGFydHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICBkb21TdHlsZS5wYXJ0c1tqXSgpXG4gICAgICAgIH1cbiAgICAgICAgZGVsZXRlIHN0eWxlc0luRG9tW2RvbVN0eWxlLmlkXVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBhZGRTdHlsZXNUb0RvbSAoc3R5bGVzIC8qIEFycmF5PFN0eWxlT2JqZWN0PiAqLykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gc3R5bGVzW2ldXG4gICAgdmFyIGRvbVN0eWxlID0gc3R5bGVzSW5Eb21baXRlbS5pZF1cbiAgICBpZiAoZG9tU3R5bGUpIHtcbiAgICAgIGRvbVN0eWxlLnJlZnMrK1xuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBkb21TdHlsZS5wYXJ0cy5sZW5ndGg7IGorKykge1xuICAgICAgICBkb21TdHlsZS5wYXJ0c1tqXShpdGVtLnBhcnRzW2pdKVxuICAgICAgfVxuICAgICAgZm9yICg7IGogPCBpdGVtLnBhcnRzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIGRvbVN0eWxlLnBhcnRzLnB1c2goYWRkU3R5bGUoaXRlbS5wYXJ0c1tqXSkpXG4gICAgICB9XG4gICAgICBpZiAoZG9tU3R5bGUucGFydHMubGVuZ3RoID4gaXRlbS5wYXJ0cy5sZW5ndGgpIHtcbiAgICAgICAgZG9tU3R5bGUucGFydHMubGVuZ3RoID0gaXRlbS5wYXJ0cy5sZW5ndGhcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHBhcnRzID0gW11cbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgaXRlbS5wYXJ0cy5sZW5ndGg7IGorKykge1xuICAgICAgICBwYXJ0cy5wdXNoKGFkZFN0eWxlKGl0ZW0ucGFydHNbal0pKVxuICAgICAgfVxuICAgICAgc3R5bGVzSW5Eb21baXRlbS5pZF0gPSB7IGlkOiBpdGVtLmlkLCByZWZzOiAxLCBwYXJ0czogcGFydHMgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVTdHlsZUVsZW1lbnQgKCkge1xuICB2YXIgc3R5bGVFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKVxuICBzdHlsZUVsZW1lbnQudHlwZSA9ICd0ZXh0L2NzcydcbiAgaGVhZC5hcHBlbmRDaGlsZChzdHlsZUVsZW1lbnQpXG4gIHJldHVybiBzdHlsZUVsZW1lbnRcbn1cblxuZnVuY3Rpb24gYWRkU3R5bGUgKG9iaiAvKiBTdHlsZU9iamVjdFBhcnQgKi8pIHtcbiAgdmFyIHVwZGF0ZSwgcmVtb3ZlXG4gIHZhciBzdHlsZUVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdzdHlsZVsnICsgc3NySWRLZXkgKyAnfj1cIicgKyBvYmouaWQgKyAnXCJdJylcblxuICBpZiAoc3R5bGVFbGVtZW50KSB7XG4gICAgaWYgKGlzUHJvZHVjdGlvbikge1xuICAgICAgLy8gaGFzIFNTUiBzdHlsZXMgYW5kIGluIHByb2R1Y3Rpb24gbW9kZS5cbiAgICAgIC8vIHNpbXBseSBkbyBub3RoaW5nLlxuICAgICAgcmV0dXJuIG5vb3BcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gaGFzIFNTUiBzdHlsZXMgYnV0IGluIGRldiBtb2RlLlxuICAgICAgLy8gZm9yIHNvbWUgcmVhc29uIENocm9tZSBjYW4ndCBoYW5kbGUgc291cmNlIG1hcCBpbiBzZXJ2ZXItcmVuZGVyZWRcbiAgICAgIC8vIHN0eWxlIHRhZ3MgLSBzb3VyY2UgbWFwcyBpbiA8c3R5bGU+IG9ubHkgd29ya3MgaWYgdGhlIHN0eWxlIHRhZyBpc1xuICAgICAgLy8gY3JlYXRlZCBhbmQgaW5zZXJ0ZWQgZHluYW1pY2FsbHkuIFNvIHdlIHJlbW92ZSB0aGUgc2VydmVyIHJlbmRlcmVkXG4gICAgICAvLyBzdHlsZXMgYW5kIGluamVjdCBuZXcgb25lcy5cbiAgICAgIHN0eWxlRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudClcbiAgICB9XG4gIH1cblxuICBpZiAoaXNPbGRJRSkge1xuICAgIC8vIHVzZSBzaW5nbGV0b24gbW9kZSBmb3IgSUU5LlxuICAgIHZhciBzdHlsZUluZGV4ID0gc2luZ2xldG9uQ291bnRlcisrXG4gICAgc3R5bGVFbGVtZW50ID0gc2luZ2xldG9uRWxlbWVudCB8fCAoc2luZ2xldG9uRWxlbWVudCA9IGNyZWF0ZVN0eWxlRWxlbWVudCgpKVxuICAgIHVwZGF0ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZUVsZW1lbnQsIHN0eWxlSW5kZXgsIGZhbHNlKVxuICAgIHJlbW92ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZUVsZW1lbnQsIHN0eWxlSW5kZXgsIHRydWUpXG4gIH0gZWxzZSB7XG4gICAgLy8gdXNlIG11bHRpLXN0eWxlLXRhZyBtb2RlIGluIGFsbCBvdGhlciBjYXNlc1xuICAgIHN0eWxlRWxlbWVudCA9IGNyZWF0ZVN0eWxlRWxlbWVudCgpXG4gICAgdXBkYXRlID0gYXBwbHlUb1RhZy5iaW5kKG51bGwsIHN0eWxlRWxlbWVudClcbiAgICByZW1vdmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBzdHlsZUVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQpXG4gICAgfVxuICB9XG5cbiAgdXBkYXRlKG9iailcblxuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlU3R5bGUgKG5ld09iaiAvKiBTdHlsZU9iamVjdFBhcnQgKi8pIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJlxuICAgICAgICAgIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmXG4gICAgICAgICAgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIHVwZGF0ZShvYmogPSBuZXdPYmopXG4gICAgfSBlbHNlIHtcbiAgICAgIHJlbW92ZSgpXG4gICAgfVxuICB9XG59XG5cbnZhciByZXBsYWNlVGV4dCA9IChmdW5jdGlvbiAoKSB7XG4gIHZhciB0ZXh0U3RvcmUgPSBbXVxuXG4gIHJldHVybiBmdW5jdGlvbiAoaW5kZXgsIHJlcGxhY2VtZW50KSB7XG4gICAgdGV4dFN0b3JlW2luZGV4XSA9IHJlcGxhY2VtZW50XG4gICAgcmV0dXJuIHRleHRTdG9yZS5maWx0ZXIoQm9vbGVhbikuam9pbignXFxuJylcbiAgfVxufSkoKVxuXG5mdW5jdGlvbiBhcHBseVRvU2luZ2xldG9uVGFnIChzdHlsZUVsZW1lbnQsIGluZGV4LCByZW1vdmUsIG9iaikge1xuICB2YXIgY3NzID0gcmVtb3ZlID8gJycgOiBvYmouY3NzXG5cbiAgaWYgKHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQuY3NzVGV4dCA9IHJlcGxhY2VUZXh0KGluZGV4LCBjc3MpXG4gIH0gZWxzZSB7XG4gICAgdmFyIGNzc05vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpXG4gICAgdmFyIGNoaWxkTm9kZXMgPSBzdHlsZUVsZW1lbnQuY2hpbGROb2Rlc1xuICAgIGlmIChjaGlsZE5vZGVzW2luZGV4XSkgc3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKGNoaWxkTm9kZXNbaW5kZXhdKVxuICAgIGlmIChjaGlsZE5vZGVzLmxlbmd0aCkge1xuICAgICAgc3R5bGVFbGVtZW50Lmluc2VydEJlZm9yZShjc3NOb2RlLCBjaGlsZE5vZGVzW2luZGV4XSlcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGVFbGVtZW50LmFwcGVuZENoaWxkKGNzc05vZGUpXG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGFwcGx5VG9UYWcgKHN0eWxlRWxlbWVudCwgb2JqKSB7XG4gIHZhciBjc3MgPSBvYmouY3NzXG4gIHZhciBtZWRpYSA9IG9iai5tZWRpYVxuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcFxuXG4gIGlmIChtZWRpYSkge1xuICAgIHN0eWxlRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ21lZGlhJywgbWVkaWEpXG4gIH1cbiAgaWYgKG9wdGlvbnMuc3NySWQpIHtcbiAgICBzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKHNzcklkS2V5LCBvYmouaWQpXG4gIH1cblxuICBpZiAoc291cmNlTWFwKSB7XG4gICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIuY2hyb21lLmNvbS9kZXZ0b29scy9kb2NzL2phdmFzY3JpcHQtZGVidWdnaW5nXG4gICAgLy8gdGhpcyBtYWtlcyBzb3VyY2UgbWFwcyBpbnNpZGUgc3R5bGUgdGFncyB3b3JrIHByb3Blcmx5IGluIENocm9tZVxuICAgIGNzcyArPSAnXFxuLyojIHNvdXJjZVVSTD0nICsgc291cmNlTWFwLnNvdXJjZXNbMF0gKyAnICovJ1xuICAgIC8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzI2NjAzODc1XG4gICAgY3NzICs9ICdcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LCcgKyBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpICsgJyAqLydcbiAgfVxuXG4gIGlmIChzdHlsZUVsZW1lbnQuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3NcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlRWxlbWVudC5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZClcbiAgICB9XG4gICAgc3R5bGVFbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpXG4gIH1cbn1cbiIsIi8qKlxuICogVHJhbnNsYXRlcyB0aGUgbGlzdCBmb3JtYXQgcHJvZHVjZWQgYnkgY3NzLWxvYWRlciBpbnRvIHNvbWV0aGluZ1xuICogZWFzaWVyIHRvIG1hbmlwdWxhdGUuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGxpc3RUb1N0eWxlcyAocGFyZW50SWQsIGxpc3QpIHtcbiAgdmFyIHN0eWxlcyA9IFtdXG4gIHZhciBuZXdTdHlsZXMgPSB7fVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV1cbiAgICB2YXIgaWQgPSBpdGVtWzBdXG4gICAgdmFyIGNzcyA9IGl0ZW1bMV1cbiAgICB2YXIgbWVkaWEgPSBpdGVtWzJdXG4gICAgdmFyIHNvdXJjZU1hcCA9IGl0ZW1bM11cbiAgICB2YXIgcGFydCA9IHtcbiAgICAgIGlkOiBwYXJlbnRJZCArICc6JyArIGksXG4gICAgICBjc3M6IGNzcyxcbiAgICAgIG1lZGlhOiBtZWRpYSxcbiAgICAgIHNvdXJjZU1hcDogc291cmNlTWFwXG4gICAgfVxuICAgIGlmICghbmV3U3R5bGVzW2lkXSkge1xuICAgICAgc3R5bGVzLnB1c2gobmV3U3R5bGVzW2lkXSA9IHsgaWQ6IGlkLCBwYXJ0czogW3BhcnRdIH0pXG4gICAgfSBlbHNlIHtcbiAgICAgIG5ld1N0eWxlc1tpZF0ucGFydHMucHVzaChwYXJ0KVxuICAgIH1cbiAgfVxuICByZXR1cm4gc3R5bGVzXG59XG4iLCIvKiFcbiAqIFZ1ZS5qcyB2Mi42LjE0XG4gKiAoYykgMjAxNC0yMDIxIEV2YW4gWW91XG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG4gKi9cbi8qICAqL1xuXG52YXIgZW1wdHlPYmplY3QgPSBPYmplY3QuZnJlZXplKHt9KTtcblxuLy8gVGhlc2UgaGVscGVycyBwcm9kdWNlIGJldHRlciBWTSBjb2RlIGluIEpTIGVuZ2luZXMgZHVlIHRvIHRoZWlyXG4vLyBleHBsaWNpdG5lc3MgYW5kIGZ1bmN0aW9uIGlubGluaW5nLlxuZnVuY3Rpb24gaXNVbmRlZiAodikge1xuICByZXR1cm4gdiA9PT0gdW5kZWZpbmVkIHx8IHYgPT09IG51bGxcbn1cblxuZnVuY3Rpb24gaXNEZWYgKHYpIHtcbiAgcmV0dXJuIHYgIT09IHVuZGVmaW5lZCAmJiB2ICE9PSBudWxsXG59XG5cbmZ1bmN0aW9uIGlzVHJ1ZSAodikge1xuICByZXR1cm4gdiA9PT0gdHJ1ZVxufVxuXG5mdW5jdGlvbiBpc0ZhbHNlICh2KSB7XG4gIHJldHVybiB2ID09PSBmYWxzZVxufVxuXG4vKipcbiAqIENoZWNrIGlmIHZhbHVlIGlzIHByaW1pdGl2ZS5cbiAqL1xuZnVuY3Rpb24gaXNQcmltaXRpdmUgKHZhbHVlKSB7XG4gIHJldHVybiAoXG4gICAgdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyB8fFxuICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgfHxcbiAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICB0eXBlb2YgdmFsdWUgPT09ICdzeW1ib2wnIHx8XG4gICAgdHlwZW9mIHZhbHVlID09PSAnYm9vbGVhbidcbiAgKVxufVxuXG4vKipcbiAqIFF1aWNrIG9iamVjdCBjaGVjayAtIHRoaXMgaXMgcHJpbWFyaWx5IHVzZWQgdG8gdGVsbFxuICogT2JqZWN0cyBmcm9tIHByaW1pdGl2ZSB2YWx1ZXMgd2hlbiB3ZSBrbm93IHRoZSB2YWx1ZVxuICogaXMgYSBKU09OLWNvbXBsaWFudCB0eXBlLlxuICovXG5mdW5jdGlvbiBpc09iamVjdCAob2JqKSB7XG4gIHJldHVybiBvYmogIT09IG51bGwgJiYgdHlwZW9mIG9iaiA9PT0gJ29iamVjdCdcbn1cblxuLyoqXG4gKiBHZXQgdGhlIHJhdyB0eXBlIHN0cmluZyBvZiBhIHZhbHVlLCBlLmcuLCBbb2JqZWN0IE9iamVjdF0uXG4gKi9cbnZhciBfdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG5mdW5jdGlvbiB0b1Jhd1R5cGUgKHZhbHVlKSB7XG4gIHJldHVybiBfdG9TdHJpbmcuY2FsbCh2YWx1ZSkuc2xpY2UoOCwgLTEpXG59XG5cbi8qKlxuICogU3RyaWN0IG9iamVjdCB0eXBlIGNoZWNrLiBPbmx5IHJldHVybnMgdHJ1ZVxuICogZm9yIHBsYWluIEphdmFTY3JpcHQgb2JqZWN0cy5cbiAqL1xuZnVuY3Rpb24gaXNQbGFpbk9iamVjdCAob2JqKSB7XG4gIHJldHVybiBfdG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCBPYmplY3RdJ1xufVxuXG5mdW5jdGlvbiBpc1JlZ0V4cCAodikge1xuICByZXR1cm4gX3RvU3RyaW5nLmNhbGwodikgPT09ICdbb2JqZWN0IFJlZ0V4cF0nXG59XG5cbi8qKlxuICogQ2hlY2sgaWYgdmFsIGlzIGEgdmFsaWQgYXJyYXkgaW5kZXguXG4gKi9cbmZ1bmN0aW9uIGlzVmFsaWRBcnJheUluZGV4ICh2YWwpIHtcbiAgdmFyIG4gPSBwYXJzZUZsb2F0KFN0cmluZyh2YWwpKTtcbiAgcmV0dXJuIG4gPj0gMCAmJiBNYXRoLmZsb29yKG4pID09PSBuICYmIGlzRmluaXRlKHZhbClcbn1cblxuZnVuY3Rpb24gaXNQcm9taXNlICh2YWwpIHtcbiAgcmV0dXJuIChcbiAgICBpc0RlZih2YWwpICYmXG4gICAgdHlwZW9mIHZhbC50aGVuID09PSAnZnVuY3Rpb24nICYmXG4gICAgdHlwZW9mIHZhbC5jYXRjaCA9PT0gJ2Z1bmN0aW9uJ1xuICApXG59XG5cbi8qKlxuICogQ29udmVydCBhIHZhbHVlIHRvIGEgc3RyaW5nIHRoYXQgaXMgYWN0dWFsbHkgcmVuZGVyZWQuXG4gKi9cbmZ1bmN0aW9uIHRvU3RyaW5nICh2YWwpIHtcbiAgcmV0dXJuIHZhbCA9PSBudWxsXG4gICAgPyAnJ1xuICAgIDogQXJyYXkuaXNBcnJheSh2YWwpIHx8IChpc1BsYWluT2JqZWN0KHZhbCkgJiYgdmFsLnRvU3RyaW5nID09PSBfdG9TdHJpbmcpXG4gICAgICA/IEpTT04uc3RyaW5naWZ5KHZhbCwgbnVsbCwgMilcbiAgICAgIDogU3RyaW5nKHZhbClcbn1cblxuLyoqXG4gKiBDb252ZXJ0IGFuIGlucHV0IHZhbHVlIHRvIGEgbnVtYmVyIGZvciBwZXJzaXN0ZW5jZS5cbiAqIElmIHRoZSBjb252ZXJzaW9uIGZhaWxzLCByZXR1cm4gb3JpZ2luYWwgc3RyaW5nLlxuICovXG5mdW5jdGlvbiB0b051bWJlciAodmFsKSB7XG4gIHZhciBuID0gcGFyc2VGbG9hdCh2YWwpO1xuICByZXR1cm4gaXNOYU4obikgPyB2YWwgOiBuXG59XG5cbi8qKlxuICogTWFrZSBhIG1hcCBhbmQgcmV0dXJuIGEgZnVuY3Rpb24gZm9yIGNoZWNraW5nIGlmIGEga2V5XG4gKiBpcyBpbiB0aGF0IG1hcC5cbiAqL1xuZnVuY3Rpb24gbWFrZU1hcCAoXG4gIHN0cixcbiAgZXhwZWN0c0xvd2VyQ2FzZVxuKSB7XG4gIHZhciBtYXAgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB2YXIgbGlzdCA9IHN0ci5zcGxpdCgnLCcpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICBtYXBbbGlzdFtpXV0gPSB0cnVlO1xuICB9XG4gIHJldHVybiBleHBlY3RzTG93ZXJDYXNlXG4gICAgPyBmdW5jdGlvbiAodmFsKSB7IHJldHVybiBtYXBbdmFsLnRvTG93ZXJDYXNlKCldOyB9XG4gICAgOiBmdW5jdGlvbiAodmFsKSB7IHJldHVybiBtYXBbdmFsXTsgfVxufVxuXG4vKipcbiAqIENoZWNrIGlmIGEgdGFnIGlzIGEgYnVpbHQtaW4gdGFnLlxuICovXG52YXIgaXNCdWlsdEluVGFnID0gbWFrZU1hcCgnc2xvdCxjb21wb25lbnQnLCB0cnVlKTtcblxuLyoqXG4gKiBDaGVjayBpZiBhbiBhdHRyaWJ1dGUgaXMgYSByZXNlcnZlZCBhdHRyaWJ1dGUuXG4gKi9cbnZhciBpc1Jlc2VydmVkQXR0cmlidXRlID0gbWFrZU1hcCgna2V5LHJlZixzbG90LHNsb3Qtc2NvcGUsaXMnKTtcblxuLyoqXG4gKiBSZW1vdmUgYW4gaXRlbSBmcm9tIGFuIGFycmF5LlxuICovXG5mdW5jdGlvbiByZW1vdmUgKGFyciwgaXRlbSkge1xuICBpZiAoYXJyLmxlbmd0aCkge1xuICAgIHZhciBpbmRleCA9IGFyci5pbmRleE9mKGl0ZW0pO1xuICAgIGlmIChpbmRleCA+IC0xKSB7XG4gICAgICByZXR1cm4gYXJyLnNwbGljZShpbmRleCwgMSlcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBDaGVjayB3aGV0aGVyIGFuIG9iamVjdCBoYXMgdGhlIHByb3BlcnR5LlxuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuZnVuY3Rpb24gaGFzT3duIChvYmosIGtleSkge1xuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSlcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBjYWNoZWQgdmVyc2lvbiBvZiBhIHB1cmUgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGNhY2hlZCAoZm4pIHtcbiAgdmFyIGNhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgcmV0dXJuIChmdW5jdGlvbiBjYWNoZWRGbiAoc3RyKSB7XG4gICAgdmFyIGhpdCA9IGNhY2hlW3N0cl07XG4gICAgcmV0dXJuIGhpdCB8fCAoY2FjaGVbc3RyXSA9IGZuKHN0cikpXG4gIH0pXG59XG5cbi8qKlxuICogQ2FtZWxpemUgYSBoeXBoZW4tZGVsaW1pdGVkIHN0cmluZy5cbiAqL1xudmFyIGNhbWVsaXplUkUgPSAvLShcXHcpL2c7XG52YXIgY2FtZWxpemUgPSBjYWNoZWQoZnVuY3Rpb24gKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoY2FtZWxpemVSRSwgZnVuY3Rpb24gKF8sIGMpIHsgcmV0dXJuIGMgPyBjLnRvVXBwZXJDYXNlKCkgOiAnJzsgfSlcbn0pO1xuXG4vKipcbiAqIENhcGl0YWxpemUgYSBzdHJpbmcuXG4gKi9cbnZhciBjYXBpdGFsaXplID0gY2FjaGVkKGZ1bmN0aW9uIChzdHIpIHtcbiAgcmV0dXJuIHN0ci5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHN0ci5zbGljZSgxKVxufSk7XG5cbi8qKlxuICogSHlwaGVuYXRlIGEgY2FtZWxDYXNlIHN0cmluZy5cbiAqL1xudmFyIGh5cGhlbmF0ZVJFID0gL1xcQihbQS1aXSkvZztcbnZhciBoeXBoZW5hdGUgPSBjYWNoZWQoZnVuY3Rpb24gKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoaHlwaGVuYXRlUkUsICctJDEnKS50b0xvd2VyQ2FzZSgpXG59KTtcblxuLyoqXG4gKiBTaW1wbGUgYmluZCBwb2x5ZmlsbCBmb3IgZW52aXJvbm1lbnRzIHRoYXQgZG8gbm90IHN1cHBvcnQgaXQsXG4gKiBlLmcuLCBQaGFudG9tSlMgMS54LiBUZWNobmljYWxseSwgd2UgZG9uJ3QgbmVlZCB0aGlzIGFueW1vcmVcbiAqIHNpbmNlIG5hdGl2ZSBiaW5kIGlzIG5vdyBwZXJmb3JtYW50IGVub3VnaCBpbiBtb3N0IGJyb3dzZXJzLlxuICogQnV0IHJlbW92aW5nIGl0IHdvdWxkIG1lYW4gYnJlYWtpbmcgY29kZSB0aGF0IHdhcyBhYmxlIHRvIHJ1biBpblxuICogUGhhbnRvbUpTIDEueCwgc28gdGhpcyBtdXN0IGJlIGtlcHQgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkuXG4gKi9cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmZ1bmN0aW9uIHBvbHlmaWxsQmluZCAoZm4sIGN0eCkge1xuICBmdW5jdGlvbiBib3VuZEZuIChhKSB7XG4gICAgdmFyIGwgPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHJldHVybiBsXG4gICAgICA/IGwgPiAxXG4gICAgICAgID8gZm4uYXBwbHkoY3R4LCBhcmd1bWVudHMpXG4gICAgICAgIDogZm4uY2FsbChjdHgsIGEpXG4gICAgICA6IGZuLmNhbGwoY3R4KVxuICB9XG5cbiAgYm91bmRGbi5fbGVuZ3RoID0gZm4ubGVuZ3RoO1xuICByZXR1cm4gYm91bmRGblxufVxuXG5mdW5jdGlvbiBuYXRpdmVCaW5kIChmbiwgY3R4KSB7XG4gIHJldHVybiBmbi5iaW5kKGN0eClcbn1cblxudmFyIGJpbmQgPSBGdW5jdGlvbi5wcm90b3R5cGUuYmluZFxuICA/IG5hdGl2ZUJpbmRcbiAgOiBwb2x5ZmlsbEJpbmQ7XG5cbi8qKlxuICogQ29udmVydCBhbiBBcnJheS1saWtlIG9iamVjdCB0byBhIHJlYWwgQXJyYXkuXG4gKi9cbmZ1bmN0aW9uIHRvQXJyYXkgKGxpc3QsIHN0YXJ0KSB7XG4gIHN0YXJ0ID0gc3RhcnQgfHwgMDtcbiAgdmFyIGkgPSBsaXN0Lmxlbmd0aCAtIHN0YXJ0O1xuICB2YXIgcmV0ID0gbmV3IEFycmF5KGkpO1xuICB3aGlsZSAoaS0tKSB7XG4gICAgcmV0W2ldID0gbGlzdFtpICsgc3RhcnRdO1xuICB9XG4gIHJldHVybiByZXRcbn1cblxuLyoqXG4gKiBNaXggcHJvcGVydGllcyBpbnRvIHRhcmdldCBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGV4dGVuZCAodG8sIF9mcm9tKSB7XG4gIGZvciAodmFyIGtleSBpbiBfZnJvbSkge1xuICAgIHRvW2tleV0gPSBfZnJvbVtrZXldO1xuICB9XG4gIHJldHVybiB0b1xufVxuXG4vKipcbiAqIE1lcmdlIGFuIEFycmF5IG9mIE9iamVjdHMgaW50byBhIHNpbmdsZSBPYmplY3QuXG4gKi9cbmZ1bmN0aW9uIHRvT2JqZWN0IChhcnIpIHtcbiAgdmFyIHJlcyA9IHt9O1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuICAgIGlmIChhcnJbaV0pIHtcbiAgICAgIGV4dGVuZChyZXMsIGFycltpXSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cblxuLyoqXG4gKiBQZXJmb3JtIG5vIG9wZXJhdGlvbi5cbiAqIFN0dWJiaW5nIGFyZ3MgdG8gbWFrZSBGbG93IGhhcHB5IHdpdGhvdXQgbGVhdmluZyB1c2VsZXNzIHRyYW5zcGlsZWQgY29kZVxuICogd2l0aCAuLi5yZXN0IChodHRwczovL2Zsb3cub3JnL2Jsb2cvMjAxNy8wNS8wNy9TdHJpY3QtRnVuY3Rpb24tQ2FsbC1Bcml0eS8pLlxuICovXG5mdW5jdGlvbiBub29wIChhLCBiLCBjKSB7fVxuXG4vKipcbiAqIEFsd2F5cyByZXR1cm4gZmFsc2UuXG4gKi9cbnZhciBubyA9IGZ1bmN0aW9uIChhLCBiLCBjKSB7IHJldHVybiBmYWxzZTsgfTtcblxuLyogZXNsaW50LWVuYWJsZSBuby11bnVzZWQtdmFycyAqL1xuXG4vKipcbiAqIFJldHVybiB0aGUgc2FtZSB2YWx1ZS5cbiAqL1xudmFyIGlkZW50aXR5ID0gZnVuY3Rpb24gKF8pIHsgcmV0dXJuIF87IH07XG5cbi8qKlxuICogQ2hlY2sgaWYgdHdvIHZhbHVlcyBhcmUgbG9vc2VseSBlcXVhbCAtIHRoYXQgaXMsXG4gKiBpZiB0aGV5IGFyZSBwbGFpbiBvYmplY3RzLCBkbyB0aGV5IGhhdmUgdGhlIHNhbWUgc2hhcGU/XG4gKi9cbmZ1bmN0aW9uIGxvb3NlRXF1YWwgKGEsIGIpIHtcbiAgaWYgKGEgPT09IGIpIHsgcmV0dXJuIHRydWUgfVxuICB2YXIgaXNPYmplY3RBID0gaXNPYmplY3QoYSk7XG4gIHZhciBpc09iamVjdEIgPSBpc09iamVjdChiKTtcbiAgaWYgKGlzT2JqZWN0QSAmJiBpc09iamVjdEIpIHtcbiAgICB0cnkge1xuICAgICAgdmFyIGlzQXJyYXlBID0gQXJyYXkuaXNBcnJheShhKTtcbiAgICAgIHZhciBpc0FycmF5QiA9IEFycmF5LmlzQXJyYXkoYik7XG4gICAgICBpZiAoaXNBcnJheUEgJiYgaXNBcnJheUIpIHtcbiAgICAgICAgcmV0dXJuIGEubGVuZ3RoID09PSBiLmxlbmd0aCAmJiBhLmV2ZXJ5KGZ1bmN0aW9uIChlLCBpKSB7XG4gICAgICAgICAgcmV0dXJuIGxvb3NlRXF1YWwoZSwgYltpXSlcbiAgICAgICAgfSlcbiAgICAgIH0gZWxzZSBpZiAoYSBpbnN0YW5jZW9mIERhdGUgJiYgYiBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICAgICAgcmV0dXJuIGEuZ2V0VGltZSgpID09PSBiLmdldFRpbWUoKVxuICAgICAgfSBlbHNlIGlmICghaXNBcnJheUEgJiYgIWlzQXJyYXlCKSB7XG4gICAgICAgIHZhciBrZXlzQSA9IE9iamVjdC5rZXlzKGEpO1xuICAgICAgICB2YXIga2V5c0IgPSBPYmplY3Qua2V5cyhiKTtcbiAgICAgICAgcmV0dXJuIGtleXNBLmxlbmd0aCA9PT0ga2V5c0IubGVuZ3RoICYmIGtleXNBLmV2ZXJ5KGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICByZXR1cm4gbG9vc2VFcXVhbChhW2tleV0sIGJba2V5XSlcbiAgICAgICAgfSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gIH0gZWxzZSBpZiAoIWlzT2JqZWN0QSAmJiAhaXNPYmplY3RCKSB7XG4gICAgcmV0dXJuIFN0cmluZyhhKSA9PT0gU3RyaW5nKGIpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cblxuLyoqXG4gKiBSZXR1cm4gdGhlIGZpcnN0IGluZGV4IGF0IHdoaWNoIGEgbG9vc2VseSBlcXVhbCB2YWx1ZSBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBhcnJheSAoaWYgdmFsdWUgaXMgYSBwbGFpbiBvYmplY3QsIHRoZSBhcnJheSBtdXN0XG4gKiBjb250YWluIGFuIG9iamVjdCBvZiB0aGUgc2FtZSBzaGFwZSksIG9yIC0xIGlmIGl0IGlzIG5vdCBwcmVzZW50LlxuICovXG5mdW5jdGlvbiBsb29zZUluZGV4T2YgKGFyciwgdmFsKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGxvb3NlRXF1YWwoYXJyW2ldLCB2YWwpKSB7IHJldHVybiBpIH1cbiAgfVxuICByZXR1cm4gLTFcbn1cblxuLyoqXG4gKiBFbnN1cmUgYSBmdW5jdGlvbiBpcyBjYWxsZWQgb25seSBvbmNlLlxuICovXG5mdW5jdGlvbiBvbmNlIChmbikge1xuICB2YXIgY2FsbGVkID0gZmFsc2U7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFjYWxsZWQpIHtcbiAgICAgIGNhbGxlZCA9IHRydWU7XG4gICAgICBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgfVxufVxuXG52YXIgU1NSX0FUVFIgPSAnZGF0YS1zZXJ2ZXItcmVuZGVyZWQnO1xuXG52YXIgQVNTRVRfVFlQRVMgPSBbXG4gICdjb21wb25lbnQnLFxuICAnZGlyZWN0aXZlJyxcbiAgJ2ZpbHRlcidcbl07XG5cbnZhciBMSUZFQ1lDTEVfSE9PS1MgPSBbXG4gICdiZWZvcmVDcmVhdGUnLFxuICAnY3JlYXRlZCcsXG4gICdiZWZvcmVNb3VudCcsXG4gICdtb3VudGVkJyxcbiAgJ2JlZm9yZVVwZGF0ZScsXG4gICd1cGRhdGVkJyxcbiAgJ2JlZm9yZURlc3Ryb3knLFxuICAnZGVzdHJveWVkJyxcbiAgJ2FjdGl2YXRlZCcsXG4gICdkZWFjdGl2YXRlZCcsXG4gICdlcnJvckNhcHR1cmVkJyxcbiAgJ3NlcnZlclByZWZldGNoJ1xuXTtcblxuLyogICovXG5cblxuXG52YXIgY29uZmlnID0gKHtcbiAgLyoqXG4gICAqIE9wdGlvbiBtZXJnZSBzdHJhdGVnaWVzICh1c2VkIGluIGNvcmUvdXRpbC9vcHRpb25zKVxuICAgKi9cbiAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gIG9wdGlvbk1lcmdlU3RyYXRlZ2llczogT2JqZWN0LmNyZWF0ZShudWxsKSxcblxuICAvKipcbiAgICogV2hldGhlciB0byBzdXBwcmVzcyB3YXJuaW5ncy5cbiAgICovXG4gIHNpbGVudDogZmFsc2UsXG5cbiAgLyoqXG4gICAqIFNob3cgcHJvZHVjdGlvbiBtb2RlIHRpcCBtZXNzYWdlIG9uIGJvb3Q/XG4gICAqL1xuICBwcm9kdWN0aW9uVGlwOiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nLFxuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRvIGVuYWJsZSBkZXZ0b29sc1xuICAgKi9cbiAgZGV2dG9vbHM6IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicsXG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gcmVjb3JkIHBlcmZcbiAgICovXG4gIHBlcmZvcm1hbmNlOiBmYWxzZSxcblxuICAvKipcbiAgICogRXJyb3IgaGFuZGxlciBmb3Igd2F0Y2hlciBlcnJvcnNcbiAgICovXG4gIGVycm9ySGFuZGxlcjogbnVsbCxcblxuICAvKipcbiAgICogV2FybiBoYW5kbGVyIGZvciB3YXRjaGVyIHdhcm5zXG4gICAqL1xuICB3YXJuSGFuZGxlcjogbnVsbCxcblxuICAvKipcbiAgICogSWdub3JlIGNlcnRhaW4gY3VzdG9tIGVsZW1lbnRzXG4gICAqL1xuICBpZ25vcmVkRWxlbWVudHM6IFtdLFxuXG4gIC8qKlxuICAgKiBDdXN0b20gdXNlciBrZXkgYWxpYXNlcyBmb3Igdi1vblxuICAgKi9cbiAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gIGtleUNvZGVzOiBPYmplY3QuY3JlYXRlKG51bGwpLFxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhIHRhZyBpcyByZXNlcnZlZCBzbyB0aGF0IGl0IGNhbm5vdCBiZSByZWdpc3RlcmVkIGFzIGFcbiAgICogY29tcG9uZW50LiBUaGlzIGlzIHBsYXRmb3JtLWRlcGVuZGVudCBhbmQgbWF5IGJlIG92ZXJ3cml0dGVuLlxuICAgKi9cbiAgaXNSZXNlcnZlZFRhZzogbm8sXG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGFuIGF0dHJpYnV0ZSBpcyByZXNlcnZlZCBzbyB0aGF0IGl0IGNhbm5vdCBiZSB1c2VkIGFzIGEgY29tcG9uZW50XG4gICAqIHByb3AuIFRoaXMgaXMgcGxhdGZvcm0tZGVwZW5kZW50IGFuZCBtYXkgYmUgb3ZlcndyaXR0ZW4uXG4gICAqL1xuICBpc1Jlc2VydmVkQXR0cjogbm8sXG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGEgdGFnIGlzIGFuIHVua25vd24gZWxlbWVudC5cbiAgICogUGxhdGZvcm0tZGVwZW5kZW50LlxuICAgKi9cbiAgaXNVbmtub3duRWxlbWVudDogbm8sXG5cbiAgLyoqXG4gICAqIEdldCB0aGUgbmFtZXNwYWNlIG9mIGFuIGVsZW1lbnRcbiAgICovXG4gIGdldFRhZ05hbWVzcGFjZTogbm9vcCxcblxuICAvKipcbiAgICogUGFyc2UgdGhlIHJlYWwgdGFnIG5hbWUgZm9yIHRoZSBzcGVjaWZpYyBwbGF0Zm9ybS5cbiAgICovXG4gIHBhcnNlUGxhdGZvcm1UYWdOYW1lOiBpZGVudGl0eSxcblxuICAvKipcbiAgICogQ2hlY2sgaWYgYW4gYXR0cmlidXRlIG11c3QgYmUgYm91bmQgdXNpbmcgcHJvcGVydHksIGUuZy4gdmFsdWVcbiAgICogUGxhdGZvcm0tZGVwZW5kZW50LlxuICAgKi9cbiAgbXVzdFVzZVByb3A6IG5vLFxuXG4gIC8qKlxuICAgKiBQZXJmb3JtIHVwZGF0ZXMgYXN5bmNocm9ub3VzbHkuIEludGVuZGVkIHRvIGJlIHVzZWQgYnkgVnVlIFRlc3QgVXRpbHNcbiAgICogVGhpcyB3aWxsIHNpZ25pZmljYW50bHkgcmVkdWNlIHBlcmZvcm1hbmNlIGlmIHNldCB0byBmYWxzZS5cbiAgICovXG4gIGFzeW5jOiB0cnVlLFxuXG4gIC8qKlxuICAgKiBFeHBvc2VkIGZvciBsZWdhY3kgcmVhc29uc1xuICAgKi9cbiAgX2xpZmVjeWNsZUhvb2tzOiBMSUZFQ1lDTEVfSE9PS1Ncbn0pO1xuXG4vKiAgKi9cblxuLyoqXG4gKiB1bmljb2RlIGxldHRlcnMgdXNlZCBmb3IgcGFyc2luZyBodG1sIHRhZ3MsIGNvbXBvbmVudCBuYW1lcyBhbmQgcHJvcGVydHkgcGF0aHMuXG4gKiB1c2luZyBodHRwczovL3d3dy53My5vcmcvVFIvaHRtbDUzL3NlbWFudGljcy1zY3JpcHRpbmcuaHRtbCNwb3RlbnRpYWxjdXN0b21lbGVtZW50bmFtZVxuICogc2tpcHBpbmcgXFx1MTAwMDAtXFx1RUZGRkYgZHVlIHRvIGl0IGZyZWV6aW5nIHVwIFBoYW50b21KU1xuICovXG52YXIgdW5pY29kZVJlZ0V4cCA9IC9hLXpBLVpcXHUwMEI3XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjAzRi1cXHUyMDQwXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZELztcblxuLyoqXG4gKiBDaGVjayBpZiBhIHN0cmluZyBzdGFydHMgd2l0aCAkIG9yIF9cbiAqL1xuZnVuY3Rpb24gaXNSZXNlcnZlZCAoc3RyKSB7XG4gIHZhciBjID0gKHN0ciArICcnKS5jaGFyQ29kZUF0KDApO1xuICByZXR1cm4gYyA9PT0gMHgyNCB8fCBjID09PSAweDVGXG59XG5cbi8qKlxuICogRGVmaW5lIGEgcHJvcGVydHkuXG4gKi9cbmZ1bmN0aW9uIGRlZiAob2JqLCBrZXksIHZhbCwgZW51bWVyYWJsZSkge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICB2YWx1ZTogdmFsLFxuICAgIGVudW1lcmFibGU6ICEhZW51bWVyYWJsZSxcbiAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICBjb25maWd1cmFibGU6IHRydWVcbiAgfSk7XG59XG5cbi8qKlxuICogUGFyc2Ugc2ltcGxlIHBhdGguXG4gKi9cbnZhciBiYWlsUkUgPSBuZXcgUmVnRXhwKChcIlteXCIgKyAodW5pY29kZVJlZ0V4cC5zb3VyY2UpICsgXCIuJF9cXFxcZF1cIikpO1xuZnVuY3Rpb24gcGFyc2VQYXRoIChwYXRoKSB7XG4gIGlmIChiYWlsUkUudGVzdChwYXRoKSkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciBzZWdtZW50cyA9IHBhdGguc3BsaXQoJy4nKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIChvYmopIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlZ21lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoIW9iaikgeyByZXR1cm4gfVxuICAgICAgb2JqID0gb2JqW3NlZ21lbnRzW2ldXTtcbiAgICB9XG4gICAgcmV0dXJuIG9ialxuICB9XG59XG5cbi8qICAqL1xuXG4vLyBjYW4gd2UgdXNlIF9fcHJvdG9fXz9cbnZhciBoYXNQcm90byA9ICdfX3Byb3RvX18nIGluIHt9O1xuXG4vLyBCcm93c2VyIGVudmlyb25tZW50IHNuaWZmaW5nXG52YXIgaW5Ccm93c2VyID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCc7XG52YXIgaW5XZWV4ID0gdHlwZW9mIFdYRW52aXJvbm1lbnQgIT09ICd1bmRlZmluZWQnICYmICEhV1hFbnZpcm9ubWVudC5wbGF0Zm9ybTtcbnZhciB3ZWV4UGxhdGZvcm0gPSBpbldlZXggJiYgV1hFbnZpcm9ubWVudC5wbGF0Zm9ybS50b0xvd2VyQ2FzZSgpO1xudmFyIFVBID0gaW5Ccm93c2VyICYmIHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCk7XG52YXIgaXNJRSA9IFVBICYmIC9tc2llfHRyaWRlbnQvLnRlc3QoVUEpO1xudmFyIGlzSUU5ID0gVUEgJiYgVUEuaW5kZXhPZignbXNpZSA5LjAnKSA+IDA7XG52YXIgaXNFZGdlID0gVUEgJiYgVUEuaW5kZXhPZignZWRnZS8nKSA+IDA7XG52YXIgaXNBbmRyb2lkID0gKFVBICYmIFVBLmluZGV4T2YoJ2FuZHJvaWQnKSA+IDApIHx8ICh3ZWV4UGxhdGZvcm0gPT09ICdhbmRyb2lkJyk7XG52YXIgaXNJT1MgPSAoVUEgJiYgL2lwaG9uZXxpcGFkfGlwb2R8aW9zLy50ZXN0KFVBKSkgfHwgKHdlZXhQbGF0Zm9ybSA9PT0gJ2lvcycpO1xudmFyIGlzQ2hyb21lID0gVUEgJiYgL2Nocm9tZVxcL1xcZCsvLnRlc3QoVUEpICYmICFpc0VkZ2U7XG52YXIgaXNQaGFudG9tSlMgPSBVQSAmJiAvcGhhbnRvbWpzLy50ZXN0KFVBKTtcbnZhciBpc0ZGID0gVUEgJiYgVUEubWF0Y2goL2ZpcmVmb3hcXC8oXFxkKykvKTtcblxuLy8gRmlyZWZveCBoYXMgYSBcIndhdGNoXCIgZnVuY3Rpb24gb24gT2JqZWN0LnByb3RvdHlwZS4uLlxudmFyIG5hdGl2ZVdhdGNoID0gKHt9KS53YXRjaDtcblxudmFyIHN1cHBvcnRzUGFzc2l2ZSA9IGZhbHNlO1xuaWYgKGluQnJvd3Nlcikge1xuICB0cnkge1xuICAgIHZhciBvcHRzID0ge307XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9wdHMsICdwYXNzaXZlJywgKHtcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0ICgpIHtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgICAgc3VwcG9ydHNQYXNzaXZlID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9KSk7IC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9mbG93L2lzc3Vlcy8yODVcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndGVzdC1wYXNzaXZlJywgbnVsbCwgb3B0cyk7XG4gIH0gY2F0Y2ggKGUpIHt9XG59XG5cbi8vIHRoaXMgbmVlZHMgdG8gYmUgbGF6eS1ldmFsZWQgYmVjYXVzZSB2dWUgbWF5IGJlIHJlcXVpcmVkIGJlZm9yZVxuLy8gdnVlLXNlcnZlci1yZW5kZXJlciBjYW4gc2V0IFZVRV9FTlZcbnZhciBfaXNTZXJ2ZXI7XG52YXIgaXNTZXJ2ZXJSZW5kZXJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gIGlmIChfaXNTZXJ2ZXIgPT09IHVuZGVmaW5lZCkge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmICghaW5Ccm93c2VyICYmICFpbldlZXggJiYgdHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIC8vIGRldGVjdCBwcmVzZW5jZSBvZiB2dWUtc2VydmVyLXJlbmRlcmVyIGFuZCBhdm9pZFxuICAgICAgLy8gV2VicGFjayBzaGltbWluZyB0aGUgcHJvY2Vzc1xuICAgICAgX2lzU2VydmVyID0gZ2xvYmFsWydwcm9jZXNzJ10gJiYgZ2xvYmFsWydwcm9jZXNzJ10uZW52LlZVRV9FTlYgPT09ICdzZXJ2ZXInO1xuICAgIH0gZWxzZSB7XG4gICAgICBfaXNTZXJ2ZXIgPSBmYWxzZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIF9pc1NlcnZlclxufTtcblxuLy8gZGV0ZWN0IGRldnRvb2xzXG52YXIgZGV2dG9vbHMgPSBpbkJyb3dzZXIgJiYgd2luZG93Ll9fVlVFX0RFVlRPT0xTX0dMT0JBTF9IT09LX187XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5mdW5jdGlvbiBpc05hdGl2ZSAoQ3Rvcikge1xuICByZXR1cm4gdHlwZW9mIEN0b3IgPT09ICdmdW5jdGlvbicgJiYgL25hdGl2ZSBjb2RlLy50ZXN0KEN0b3IudG9TdHJpbmcoKSlcbn1cblxudmFyIGhhc1N5bWJvbCA9XG4gIHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIGlzTmF0aXZlKFN5bWJvbCkgJiZcbiAgdHlwZW9mIFJlZmxlY3QgIT09ICd1bmRlZmluZWQnICYmIGlzTmF0aXZlKFJlZmxlY3Qub3duS2V5cyk7XG5cbnZhciBfU2V0O1xuLyogaXN0YW5idWwgaWdub3JlIGlmICovIC8vICRmbG93LWRpc2FibGUtbGluZVxuaWYgKHR5cGVvZiBTZXQgIT09ICd1bmRlZmluZWQnICYmIGlzTmF0aXZlKFNldCkpIHtcbiAgLy8gdXNlIG5hdGl2ZSBTZXQgd2hlbiBhdmFpbGFibGUuXG4gIF9TZXQgPSBTZXQ7XG59IGVsc2Uge1xuICAvLyBhIG5vbi1zdGFuZGFyZCBTZXQgcG9seWZpbGwgdGhhdCBvbmx5IHdvcmtzIHdpdGggcHJpbWl0aXZlIGtleXMuXG4gIF9TZXQgPSAvKkBfX1BVUkVfXyovKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTZXQgKCkge1xuICAgICAgdGhpcy5zZXQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIH1cbiAgICBTZXQucHJvdG90eXBlLmhhcyA9IGZ1bmN0aW9uIGhhcyAoa2V5KSB7XG4gICAgICByZXR1cm4gdGhpcy5zZXRba2V5XSA9PT0gdHJ1ZVxuICAgIH07XG4gICAgU2V0LnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBhZGQgKGtleSkge1xuICAgICAgdGhpcy5zZXRba2V5XSA9IHRydWU7XG4gICAgfTtcbiAgICBTZXQucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gY2xlYXIgKCkge1xuICAgICAgdGhpcy5zZXQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIH07XG5cbiAgICByZXR1cm4gU2V0O1xuICB9KCkpO1xufVxuXG4vKiAgKi9cblxudmFyIHdhcm4gPSBub29wO1xudmFyIHRpcCA9IG5vb3A7XG52YXIgZ2VuZXJhdGVDb21wb25lbnRUcmFjZSA9IChub29wKTsgLy8gd29yayBhcm91bmQgZmxvdyBjaGVja1xudmFyIGZvcm1hdENvbXBvbmVudE5hbWUgPSAobm9vcCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBoYXNDb25zb2xlID0gdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnO1xuICB2YXIgY2xhc3NpZnlSRSA9IC8oPzpefFstX10pKFxcdykvZztcbiAgdmFyIGNsYXNzaWZ5ID0gZnVuY3Rpb24gKHN0cikgeyByZXR1cm4gc3RyXG4gICAgLnJlcGxhY2UoY2xhc3NpZnlSRSwgZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGMudG9VcHBlckNhc2UoKTsgfSlcbiAgICAucmVwbGFjZSgvWy1fXS9nLCAnJyk7IH07XG5cbiAgd2FybiA9IGZ1bmN0aW9uIChtc2csIHZtKSB7XG4gICAgdmFyIHRyYWNlID0gdm0gPyBnZW5lcmF0ZUNvbXBvbmVudFRyYWNlKHZtKSA6ICcnO1xuXG4gICAgaWYgKGNvbmZpZy53YXJuSGFuZGxlcikge1xuICAgICAgY29uZmlnLndhcm5IYW5kbGVyLmNhbGwobnVsbCwgbXNnLCB2bSwgdHJhY2UpO1xuICAgIH0gZWxzZSBpZiAoaGFzQ29uc29sZSAmJiAoIWNvbmZpZy5zaWxlbnQpKSB7XG4gICAgICBjb25zb2xlLmVycm9yKChcIltWdWUgd2Fybl06IFwiICsgbXNnICsgdHJhY2UpKTtcbiAgICB9XG4gIH07XG5cbiAgdGlwID0gZnVuY3Rpb24gKG1zZywgdm0pIHtcbiAgICBpZiAoaGFzQ29uc29sZSAmJiAoIWNvbmZpZy5zaWxlbnQpKSB7XG4gICAgICBjb25zb2xlLndhcm4oXCJbVnVlIHRpcF06IFwiICsgbXNnICsgKFxuICAgICAgICB2bSA/IGdlbmVyYXRlQ29tcG9uZW50VHJhY2Uodm0pIDogJydcbiAgICAgICkpO1xuICAgIH1cbiAgfTtcblxuICBmb3JtYXRDb21wb25lbnROYW1lID0gZnVuY3Rpb24gKHZtLCBpbmNsdWRlRmlsZSkge1xuICAgIGlmICh2bS4kcm9vdCA9PT0gdm0pIHtcbiAgICAgIHJldHVybiAnPFJvb3Q+J1xuICAgIH1cbiAgICB2YXIgb3B0aW9ucyA9IHR5cGVvZiB2bSA9PT0gJ2Z1bmN0aW9uJyAmJiB2bS5jaWQgIT0gbnVsbFxuICAgICAgPyB2bS5vcHRpb25zXG4gICAgICA6IHZtLl9pc1Z1ZVxuICAgICAgICA/IHZtLiRvcHRpb25zIHx8IHZtLmNvbnN0cnVjdG9yLm9wdGlvbnNcbiAgICAgICAgOiB2bTtcbiAgICB2YXIgbmFtZSA9IG9wdGlvbnMubmFtZSB8fCBvcHRpb25zLl9jb21wb25lbnRUYWc7XG4gICAgdmFyIGZpbGUgPSBvcHRpb25zLl9fZmlsZTtcbiAgICBpZiAoIW5hbWUgJiYgZmlsZSkge1xuICAgICAgdmFyIG1hdGNoID0gZmlsZS5tYXRjaCgvKFteL1xcXFxdKylcXC52dWUkLyk7XG4gICAgICBuYW1lID0gbWF0Y2ggJiYgbWF0Y2hbMV07XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIChuYW1lID8gKFwiPFwiICsgKGNsYXNzaWZ5KG5hbWUpKSArIFwiPlwiKSA6IFwiPEFub255bW91cz5cIikgK1xuICAgICAgKGZpbGUgJiYgaW5jbHVkZUZpbGUgIT09IGZhbHNlID8gKFwiIGF0IFwiICsgZmlsZSkgOiAnJylcbiAgICApXG4gIH07XG5cbiAgdmFyIHJlcGVhdCA9IGZ1bmN0aW9uIChzdHIsIG4pIHtcbiAgICB2YXIgcmVzID0gJyc7XG4gICAgd2hpbGUgKG4pIHtcbiAgICAgIGlmIChuICUgMiA9PT0gMSkgeyByZXMgKz0gc3RyOyB9XG4gICAgICBpZiAobiA+IDEpIHsgc3RyICs9IHN0cjsgfVxuICAgICAgbiA+Pj0gMTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc1xuICB9O1xuXG4gIGdlbmVyYXRlQ29tcG9uZW50VHJhY2UgPSBmdW5jdGlvbiAodm0pIHtcbiAgICBpZiAodm0uX2lzVnVlICYmIHZtLiRwYXJlbnQpIHtcbiAgICAgIHZhciB0cmVlID0gW107XG4gICAgICB2YXIgY3VycmVudFJlY3Vyc2l2ZVNlcXVlbmNlID0gMDtcbiAgICAgIHdoaWxlICh2bSkge1xuICAgICAgICBpZiAodHJlZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgdmFyIGxhc3QgPSB0cmVlW3RyZWUubGVuZ3RoIC0gMV07XG4gICAgICAgICAgaWYgKGxhc3QuY29uc3RydWN0b3IgPT09IHZtLmNvbnN0cnVjdG9yKSB7XG4gICAgICAgICAgICBjdXJyZW50UmVjdXJzaXZlU2VxdWVuY2UrKztcbiAgICAgICAgICAgIHZtID0gdm0uJHBhcmVudDtcbiAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgICAgfSBlbHNlIGlmIChjdXJyZW50UmVjdXJzaXZlU2VxdWVuY2UgPiAwKSB7XG4gICAgICAgICAgICB0cmVlW3RyZWUubGVuZ3RoIC0gMV0gPSBbbGFzdCwgY3VycmVudFJlY3Vyc2l2ZVNlcXVlbmNlXTtcbiAgICAgICAgICAgIGN1cnJlbnRSZWN1cnNpdmVTZXF1ZW5jZSA9IDA7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRyZWUucHVzaCh2bSk7XG4gICAgICAgIHZtID0gdm0uJHBhcmVudDtcbiAgICAgIH1cbiAgICAgIHJldHVybiAnXFxuXFxuZm91bmQgaW5cXG5cXG4nICsgdHJlZVxuICAgICAgICAubWFwKGZ1bmN0aW9uICh2bSwgaSkgeyByZXR1cm4gKFwiXCIgKyAoaSA9PT0gMCA/ICctLS0+ICcgOiByZXBlYXQoJyAnLCA1ICsgaSAqIDIpKSArIChBcnJheS5pc0FycmF5KHZtKVxuICAgICAgICAgICAgPyAoKGZvcm1hdENvbXBvbmVudE5hbWUodm1bMF0pKSArIFwiLi4uIChcIiArICh2bVsxXSkgKyBcIiByZWN1cnNpdmUgY2FsbHMpXCIpXG4gICAgICAgICAgICA6IGZvcm1hdENvbXBvbmVudE5hbWUodm0pKSk7IH0pXG4gICAgICAgIC5qb2luKCdcXG4nKVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKFwiXFxuXFxuKGZvdW5kIGluIFwiICsgKGZvcm1hdENvbXBvbmVudE5hbWUodm0pKSArIFwiKVwiKVxuICAgIH1cbiAgfTtcbn1cblxuLyogICovXG5cbnZhciB1aWQgPSAwO1xuXG4vKipcbiAqIEEgZGVwIGlzIGFuIG9ic2VydmFibGUgdGhhdCBjYW4gaGF2ZSBtdWx0aXBsZVxuICogZGlyZWN0aXZlcyBzdWJzY3JpYmluZyB0byBpdC5cbiAqL1xudmFyIERlcCA9IGZ1bmN0aW9uIERlcCAoKSB7XG4gIHRoaXMuaWQgPSB1aWQrKztcbiAgdGhpcy5zdWJzID0gW107XG59O1xuXG5EZXAucHJvdG90eXBlLmFkZFN1YiA9IGZ1bmN0aW9uIGFkZFN1YiAoc3ViKSB7XG4gIHRoaXMuc3Vicy5wdXNoKHN1Yik7XG59O1xuXG5EZXAucHJvdG90eXBlLnJlbW92ZVN1YiA9IGZ1bmN0aW9uIHJlbW92ZVN1YiAoc3ViKSB7XG4gIHJlbW92ZSh0aGlzLnN1YnMsIHN1Yik7XG59O1xuXG5EZXAucHJvdG90eXBlLmRlcGVuZCA9IGZ1bmN0aW9uIGRlcGVuZCAoKSB7XG4gIGlmIChEZXAudGFyZ2V0KSB7XG4gICAgRGVwLnRhcmdldC5hZGREZXAodGhpcyk7XG4gIH1cbn07XG5cbkRlcC5wcm90b3R5cGUubm90aWZ5ID0gZnVuY3Rpb24gbm90aWZ5ICgpIHtcbiAgLy8gc3RhYmlsaXplIHRoZSBzdWJzY3JpYmVyIGxpc3QgZmlyc3RcbiAgdmFyIHN1YnMgPSB0aGlzLnN1YnMuc2xpY2UoKTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIWNvbmZpZy5hc3luYykge1xuICAgIC8vIHN1YnMgYXJlbid0IHNvcnRlZCBpbiBzY2hlZHVsZXIgaWYgbm90IHJ1bm5pbmcgYXN5bmNcbiAgICAvLyB3ZSBuZWVkIHRvIHNvcnQgdGhlbSBub3cgdG8gbWFrZSBzdXJlIHRoZXkgZmlyZSBpbiBjb3JyZWN0XG4gICAgLy8gb3JkZXJcbiAgICBzdWJzLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIGEuaWQgLSBiLmlkOyB9KTtcbiAgfVxuICBmb3IgKHZhciBpID0gMCwgbCA9IHN1YnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgc3Vic1tpXS51cGRhdGUoKTtcbiAgfVxufTtcblxuLy8gVGhlIGN1cnJlbnQgdGFyZ2V0IHdhdGNoZXIgYmVpbmcgZXZhbHVhdGVkLlxuLy8gVGhpcyBpcyBnbG9iYWxseSB1bmlxdWUgYmVjYXVzZSBvbmx5IG9uZSB3YXRjaGVyXG4vLyBjYW4gYmUgZXZhbHVhdGVkIGF0IGEgdGltZS5cbkRlcC50YXJnZXQgPSBudWxsO1xudmFyIHRhcmdldFN0YWNrID0gW107XG5cbmZ1bmN0aW9uIHB1c2hUYXJnZXQgKHRhcmdldCkge1xuICB0YXJnZXRTdGFjay5wdXNoKHRhcmdldCk7XG4gIERlcC50YXJnZXQgPSB0YXJnZXQ7XG59XG5cbmZ1bmN0aW9uIHBvcFRhcmdldCAoKSB7XG4gIHRhcmdldFN0YWNrLnBvcCgpO1xuICBEZXAudGFyZ2V0ID0gdGFyZ2V0U3RhY2tbdGFyZ2V0U3RhY2subGVuZ3RoIC0gMV07XG59XG5cbi8qICAqL1xuXG52YXIgVk5vZGUgPSBmdW5jdGlvbiBWTm9kZSAoXG4gIHRhZyxcbiAgZGF0YSxcbiAgY2hpbGRyZW4sXG4gIHRleHQsXG4gIGVsbSxcbiAgY29udGV4dCxcbiAgY29tcG9uZW50T3B0aW9ucyxcbiAgYXN5bmNGYWN0b3J5XG4pIHtcbiAgdGhpcy50YWcgPSB0YWc7XG4gIHRoaXMuZGF0YSA9IGRhdGE7XG4gIHRoaXMuY2hpbGRyZW4gPSBjaGlsZHJlbjtcbiAgdGhpcy50ZXh0ID0gdGV4dDtcbiAgdGhpcy5lbG0gPSBlbG07XG4gIHRoaXMubnMgPSB1bmRlZmluZWQ7XG4gIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XG4gIHRoaXMuZm5Db250ZXh0ID0gdW5kZWZpbmVkO1xuICB0aGlzLmZuT3B0aW9ucyA9IHVuZGVmaW5lZDtcbiAgdGhpcy5mblNjb3BlSWQgPSB1bmRlZmluZWQ7XG4gIHRoaXMua2V5ID0gZGF0YSAmJiBkYXRhLmtleTtcbiAgdGhpcy5jb21wb25lbnRPcHRpb25zID0gY29tcG9uZW50T3B0aW9ucztcbiAgdGhpcy5jb21wb25lbnRJbnN0YW5jZSA9IHVuZGVmaW5lZDtcbiAgdGhpcy5wYXJlbnQgPSB1bmRlZmluZWQ7XG4gIHRoaXMucmF3ID0gZmFsc2U7XG4gIHRoaXMuaXNTdGF0aWMgPSBmYWxzZTtcbiAgdGhpcy5pc1Jvb3RJbnNlcnQgPSB0cnVlO1xuICB0aGlzLmlzQ29tbWVudCA9IGZhbHNlO1xuICB0aGlzLmlzQ2xvbmVkID0gZmFsc2U7XG4gIHRoaXMuaXNPbmNlID0gZmFsc2U7XG4gIHRoaXMuYXN5bmNGYWN0b3J5ID0gYXN5bmNGYWN0b3J5O1xuICB0aGlzLmFzeW5jTWV0YSA9IHVuZGVmaW5lZDtcbiAgdGhpcy5pc0FzeW5jUGxhY2Vob2xkZXIgPSBmYWxzZTtcbn07XG5cbnZhciBwcm90b3R5cGVBY2Nlc3NvcnMgPSB7IGNoaWxkOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH07XG5cbi8vIERFUFJFQ0FURUQ6IGFsaWFzIGZvciBjb21wb25lbnRJbnN0YW5jZSBmb3IgYmFja3dhcmRzIGNvbXBhdC5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5wcm90b3R5cGVBY2Nlc3NvcnMuY2hpbGQuZ2V0ID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5jb21wb25lbnRJbnN0YW5jZVxufTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIFZOb2RlLnByb3RvdHlwZSwgcHJvdG90eXBlQWNjZXNzb3JzICk7XG5cbnZhciBjcmVhdGVFbXB0eVZOb2RlID0gZnVuY3Rpb24gKHRleHQpIHtcbiAgaWYgKCB0ZXh0ID09PSB2b2lkIDAgKSB0ZXh0ID0gJyc7XG5cbiAgdmFyIG5vZGUgPSBuZXcgVk5vZGUoKTtcbiAgbm9kZS50ZXh0ID0gdGV4dDtcbiAgbm9kZS5pc0NvbW1lbnQgPSB0cnVlO1xuICByZXR1cm4gbm9kZVxufTtcblxuZnVuY3Rpb24gY3JlYXRlVGV4dFZOb2RlICh2YWwpIHtcbiAgcmV0dXJuIG5ldyBWTm9kZSh1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBTdHJpbmcodmFsKSlcbn1cblxuLy8gb3B0aW1pemVkIHNoYWxsb3cgY2xvbmVcbi8vIHVzZWQgZm9yIHN0YXRpYyBub2RlcyBhbmQgc2xvdCBub2RlcyBiZWNhdXNlIHRoZXkgbWF5IGJlIHJldXNlZCBhY3Jvc3Ncbi8vIG11bHRpcGxlIHJlbmRlcnMsIGNsb25pbmcgdGhlbSBhdm9pZHMgZXJyb3JzIHdoZW4gRE9NIG1hbmlwdWxhdGlvbnMgcmVseVxuLy8gb24gdGhlaXIgZWxtIHJlZmVyZW5jZS5cbmZ1bmN0aW9uIGNsb25lVk5vZGUgKHZub2RlKSB7XG4gIHZhciBjbG9uZWQgPSBuZXcgVk5vZGUoXG4gICAgdm5vZGUudGFnLFxuICAgIHZub2RlLmRhdGEsXG4gICAgLy8gIzc5NzVcbiAgICAvLyBjbG9uZSBjaGlsZHJlbiBhcnJheSB0byBhdm9pZCBtdXRhdGluZyBvcmlnaW5hbCBpbiBjYXNlIG9mIGNsb25pbmdcbiAgICAvLyBhIGNoaWxkLlxuICAgIHZub2RlLmNoaWxkcmVuICYmIHZub2RlLmNoaWxkcmVuLnNsaWNlKCksXG4gICAgdm5vZGUudGV4dCxcbiAgICB2bm9kZS5lbG0sXG4gICAgdm5vZGUuY29udGV4dCxcbiAgICB2bm9kZS5jb21wb25lbnRPcHRpb25zLFxuICAgIHZub2RlLmFzeW5jRmFjdG9yeVxuICApO1xuICBjbG9uZWQubnMgPSB2bm9kZS5ucztcbiAgY2xvbmVkLmlzU3RhdGljID0gdm5vZGUuaXNTdGF0aWM7XG4gIGNsb25lZC5rZXkgPSB2bm9kZS5rZXk7XG4gIGNsb25lZC5pc0NvbW1lbnQgPSB2bm9kZS5pc0NvbW1lbnQ7XG4gIGNsb25lZC5mbkNvbnRleHQgPSB2bm9kZS5mbkNvbnRleHQ7XG4gIGNsb25lZC5mbk9wdGlvbnMgPSB2bm9kZS5mbk9wdGlvbnM7XG4gIGNsb25lZC5mblNjb3BlSWQgPSB2bm9kZS5mblNjb3BlSWQ7XG4gIGNsb25lZC5hc3luY01ldGEgPSB2bm9kZS5hc3luY01ldGE7XG4gIGNsb25lZC5pc0Nsb25lZCA9IHRydWU7XG4gIHJldHVybiBjbG9uZWRcbn1cblxuLypcbiAqIG5vdCB0eXBlIGNoZWNraW5nIHRoaXMgZmlsZSBiZWNhdXNlIGZsb3cgZG9lc24ndCBwbGF5IHdlbGwgd2l0aFxuICogZHluYW1pY2FsbHkgYWNjZXNzaW5nIG1ldGhvZHMgb24gQXJyYXkgcHJvdG90eXBlXG4gKi9cblxudmFyIGFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGU7XG52YXIgYXJyYXlNZXRob2RzID0gT2JqZWN0LmNyZWF0ZShhcnJheVByb3RvKTtcblxudmFyIG1ldGhvZHNUb1BhdGNoID0gW1xuICAncHVzaCcsXG4gICdwb3AnLFxuICAnc2hpZnQnLFxuICAndW5zaGlmdCcsXG4gICdzcGxpY2UnLFxuICAnc29ydCcsXG4gICdyZXZlcnNlJ1xuXTtcblxuLyoqXG4gKiBJbnRlcmNlcHQgbXV0YXRpbmcgbWV0aG9kcyBhbmQgZW1pdCBldmVudHNcbiAqL1xubWV0aG9kc1RvUGF0Y2guZm9yRWFjaChmdW5jdGlvbiAobWV0aG9kKSB7XG4gIC8vIGNhY2hlIG9yaWdpbmFsIG1ldGhvZFxuICB2YXIgb3JpZ2luYWwgPSBhcnJheVByb3RvW21ldGhvZF07XG4gIGRlZihhcnJheU1ldGhvZHMsIG1ldGhvZCwgZnVuY3Rpb24gbXV0YXRvciAoKSB7XG4gICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gICAgdmFyIHJlc3VsdCA9IG9yaWdpbmFsLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIHZhciBvYiA9IHRoaXMuX19vYl9fO1xuICAgIHZhciBpbnNlcnRlZDtcbiAgICBzd2l0Y2ggKG1ldGhvZCkge1xuICAgICAgY2FzZSAncHVzaCc6XG4gICAgICBjYXNlICd1bnNoaWZ0JzpcbiAgICAgICAgaW5zZXJ0ZWQgPSBhcmdzO1xuICAgICAgICBicmVha1xuICAgICAgY2FzZSAnc3BsaWNlJzpcbiAgICAgICAgaW5zZXJ0ZWQgPSBhcmdzLnNsaWNlKDIpO1xuICAgICAgICBicmVha1xuICAgIH1cbiAgICBpZiAoaW5zZXJ0ZWQpIHsgb2Iub2JzZXJ2ZUFycmF5KGluc2VydGVkKTsgfVxuICAgIC8vIG5vdGlmeSBjaGFuZ2VcbiAgICBvYi5kZXAubm90aWZ5KCk7XG4gICAgcmV0dXJuIHJlc3VsdFxuICB9KTtcbn0pO1xuXG4vKiAgKi9cblxudmFyIGFycmF5S2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGFycmF5TWV0aG9kcyk7XG5cbi8qKlxuICogSW4gc29tZSBjYXNlcyB3ZSBtYXkgd2FudCB0byBkaXNhYmxlIG9ic2VydmF0aW9uIGluc2lkZSBhIGNvbXBvbmVudCdzXG4gKiB1cGRhdGUgY29tcHV0YXRpb24uXG4gKi9cbnZhciBzaG91bGRPYnNlcnZlID0gdHJ1ZTtcblxuZnVuY3Rpb24gdG9nZ2xlT2JzZXJ2aW5nICh2YWx1ZSkge1xuICBzaG91bGRPYnNlcnZlID0gdmFsdWU7XG59XG5cbi8qKlxuICogT2JzZXJ2ZXIgY2xhc3MgdGhhdCBpcyBhdHRhY2hlZCB0byBlYWNoIG9ic2VydmVkXG4gKiBvYmplY3QuIE9uY2UgYXR0YWNoZWQsIHRoZSBvYnNlcnZlciBjb252ZXJ0cyB0aGUgdGFyZ2V0XG4gKiBvYmplY3QncyBwcm9wZXJ0eSBrZXlzIGludG8gZ2V0dGVyL3NldHRlcnMgdGhhdFxuICogY29sbGVjdCBkZXBlbmRlbmNpZXMgYW5kIGRpc3BhdGNoIHVwZGF0ZXMuXG4gKi9cbnZhciBPYnNlcnZlciA9IGZ1bmN0aW9uIE9ic2VydmVyICh2YWx1ZSkge1xuICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gIHRoaXMuZGVwID0gbmV3IERlcCgpO1xuICB0aGlzLnZtQ291bnQgPSAwO1xuICBkZWYodmFsdWUsICdfX29iX18nLCB0aGlzKTtcbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgaWYgKGhhc1Byb3RvKSB7XG4gICAgICBwcm90b0F1Z21lbnQodmFsdWUsIGFycmF5TWV0aG9kcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvcHlBdWdtZW50KHZhbHVlLCBhcnJheU1ldGhvZHMsIGFycmF5S2V5cyk7XG4gICAgfVxuICAgIHRoaXMub2JzZXJ2ZUFycmF5KHZhbHVlKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLndhbGsodmFsdWUpO1xuICB9XG59O1xuXG4vKipcbiAqIFdhbGsgdGhyb3VnaCBhbGwgcHJvcGVydGllcyBhbmQgY29udmVydCB0aGVtIGludG9cbiAqIGdldHRlci9zZXR0ZXJzLiBUaGlzIG1ldGhvZCBzaG91bGQgb25seSBiZSBjYWxsZWQgd2hlblxuICogdmFsdWUgdHlwZSBpcyBPYmplY3QuXG4gKi9cbk9ic2VydmVyLnByb3RvdHlwZS53YWxrID0gZnVuY3Rpb24gd2FsayAob2JqKSB7XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgZGVmaW5lUmVhY3RpdmUkJDEob2JqLCBrZXlzW2ldKTtcbiAgfVxufTtcblxuLyoqXG4gKiBPYnNlcnZlIGEgbGlzdCBvZiBBcnJheSBpdGVtcy5cbiAqL1xuT2JzZXJ2ZXIucHJvdG90eXBlLm9ic2VydmVBcnJheSA9IGZ1bmN0aW9uIG9ic2VydmVBcnJheSAoaXRlbXMpIHtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBpdGVtcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBvYnNlcnZlKGl0ZW1zW2ldKTtcbiAgfVxufTtcblxuLy8gaGVscGVyc1xuXG4vKipcbiAqIEF1Z21lbnQgYSB0YXJnZXQgT2JqZWN0IG9yIEFycmF5IGJ5IGludGVyY2VwdGluZ1xuICogdGhlIHByb3RvdHlwZSBjaGFpbiB1c2luZyBfX3Byb3RvX19cbiAqL1xuZnVuY3Rpb24gcHJvdG9BdWdtZW50ICh0YXJnZXQsIHNyYykge1xuICAvKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xuICB0YXJnZXQuX19wcm90b19fID0gc3JjO1xuICAvKiBlc2xpbnQtZW5hYmxlIG5vLXByb3RvICovXG59XG5cbi8qKlxuICogQXVnbWVudCBhIHRhcmdldCBPYmplY3Qgb3IgQXJyYXkgYnkgZGVmaW5pbmdcbiAqIGhpZGRlbiBwcm9wZXJ0aWVzLlxuICovXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZnVuY3Rpb24gY29weUF1Z21lbnQgKHRhcmdldCwgc3JjLCBrZXlzKSB7XG4gIGZvciAodmFyIGkgPSAwLCBsID0ga2V5cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICBkZWYodGFyZ2V0LCBrZXksIHNyY1trZXldKTtcbiAgfVxufVxuXG4vKipcbiAqIEF0dGVtcHQgdG8gY3JlYXRlIGFuIG9ic2VydmVyIGluc3RhbmNlIGZvciBhIHZhbHVlLFxuICogcmV0dXJucyB0aGUgbmV3IG9ic2VydmVyIGlmIHN1Y2Nlc3NmdWxseSBvYnNlcnZlZCxcbiAqIG9yIHRoZSBleGlzdGluZyBvYnNlcnZlciBpZiB0aGUgdmFsdWUgYWxyZWFkeSBoYXMgb25lLlxuICovXG5mdW5jdGlvbiBvYnNlcnZlICh2YWx1ZSwgYXNSb290RGF0YSkge1xuICBpZiAoIWlzT2JqZWN0KHZhbHVlKSB8fCB2YWx1ZSBpbnN0YW5jZW9mIFZOb2RlKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIG9iO1xuICBpZiAoaGFzT3duKHZhbHVlLCAnX19vYl9fJykgJiYgdmFsdWUuX19vYl9fIGluc3RhbmNlb2YgT2JzZXJ2ZXIpIHtcbiAgICBvYiA9IHZhbHVlLl9fb2JfXztcbiAgfSBlbHNlIGlmIChcbiAgICBzaG91bGRPYnNlcnZlICYmXG4gICAgIWlzU2VydmVyUmVuZGVyaW5nKCkgJiZcbiAgICAoQXJyYXkuaXNBcnJheSh2YWx1ZSkgfHwgaXNQbGFpbk9iamVjdCh2YWx1ZSkpICYmXG4gICAgT2JqZWN0LmlzRXh0ZW5zaWJsZSh2YWx1ZSkgJiZcbiAgICAhdmFsdWUuX2lzVnVlXG4gICkge1xuICAgIG9iID0gbmV3IE9ic2VydmVyKHZhbHVlKTtcbiAgfVxuICBpZiAoYXNSb290RGF0YSAmJiBvYikge1xuICAgIG9iLnZtQ291bnQrKztcbiAgfVxuICByZXR1cm4gb2Jcbn1cblxuLyoqXG4gKiBEZWZpbmUgYSByZWFjdGl2ZSBwcm9wZXJ0eSBvbiBhbiBPYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGRlZmluZVJlYWN0aXZlJCQxIChcbiAgb2JqLFxuICBrZXksXG4gIHZhbCxcbiAgY3VzdG9tU2V0dGVyLFxuICBzaGFsbG93XG4pIHtcbiAgdmFyIGRlcCA9IG5ldyBEZXAoKTtcblxuICB2YXIgcHJvcGVydHkgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KTtcbiAgaWYgKHByb3BlcnR5ICYmIHByb3BlcnR5LmNvbmZpZ3VyYWJsZSA9PT0gZmFsc2UpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIC8vIGNhdGVyIGZvciBwcmUtZGVmaW5lZCBnZXR0ZXIvc2V0dGVyc1xuICB2YXIgZ2V0dGVyID0gcHJvcGVydHkgJiYgcHJvcGVydHkuZ2V0O1xuICB2YXIgc2V0dGVyID0gcHJvcGVydHkgJiYgcHJvcGVydHkuc2V0O1xuICBpZiAoKCFnZXR0ZXIgfHwgc2V0dGVyKSAmJiBhcmd1bWVudHMubGVuZ3RoID09PSAyKSB7XG4gICAgdmFsID0gb2JqW2tleV07XG4gIH1cblxuICB2YXIgY2hpbGRPYiA9ICFzaGFsbG93ICYmIG9ic2VydmUodmFsKTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiByZWFjdGl2ZUdldHRlciAoKSB7XG4gICAgICB2YXIgdmFsdWUgPSBnZXR0ZXIgPyBnZXR0ZXIuY2FsbChvYmopIDogdmFsO1xuICAgICAgaWYgKERlcC50YXJnZXQpIHtcbiAgICAgICAgZGVwLmRlcGVuZCgpO1xuICAgICAgICBpZiAoY2hpbGRPYikge1xuICAgICAgICAgIGNoaWxkT2IuZGVwLmRlcGVuZCgpO1xuICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgICAgZGVwZW5kQXJyYXkodmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHZhbHVlXG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIHJlYWN0aXZlU2V0dGVyIChuZXdWYWwpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGdldHRlciA/IGdldHRlci5jYWxsKG9iaikgOiB2YWw7XG4gICAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby1zZWxmLWNvbXBhcmUgKi9cbiAgICAgIGlmIChuZXdWYWwgPT09IHZhbHVlIHx8IChuZXdWYWwgIT09IG5ld1ZhbCAmJiB2YWx1ZSAhPT0gdmFsdWUpKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgLyogZXNsaW50LWVuYWJsZSBuby1zZWxmLWNvbXBhcmUgKi9cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGN1c3RvbVNldHRlcikge1xuICAgICAgICBjdXN0b21TZXR0ZXIoKTtcbiAgICAgIH1cbiAgICAgIC8vICM3OTgxOiBmb3IgYWNjZXNzb3IgcHJvcGVydGllcyB3aXRob3V0IHNldHRlclxuICAgICAgaWYgKGdldHRlciAmJiAhc2V0dGVyKSB7IHJldHVybiB9XG4gICAgICBpZiAoc2V0dGVyKSB7XG4gICAgICAgIHNldHRlci5jYWxsKG9iaiwgbmV3VmFsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbCA9IG5ld1ZhbDtcbiAgICAgIH1cbiAgICAgIGNoaWxkT2IgPSAhc2hhbGxvdyAmJiBvYnNlcnZlKG5ld1ZhbCk7XG4gICAgICBkZXAubm90aWZ5KCk7XG4gICAgfVxuICB9KTtcbn1cblxuLyoqXG4gKiBTZXQgYSBwcm9wZXJ0eSBvbiBhbiBvYmplY3QuIEFkZHMgdGhlIG5ldyBwcm9wZXJ0eSBhbmRcbiAqIHRyaWdnZXJzIGNoYW5nZSBub3RpZmljYXRpb24gaWYgdGhlIHByb3BlcnR5IGRvZXNuJ3RcbiAqIGFscmVhZHkgZXhpc3QuXG4gKi9cbmZ1bmN0aW9uIHNldCAodGFyZ2V0LCBrZXksIHZhbCkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgIChpc1VuZGVmKHRhcmdldCkgfHwgaXNQcmltaXRpdmUodGFyZ2V0KSlcbiAgKSB7XG4gICAgd2FybigoXCJDYW5ub3Qgc2V0IHJlYWN0aXZlIHByb3BlcnR5IG9uIHVuZGVmaW5lZCwgbnVsbCwgb3IgcHJpbWl0aXZlIHZhbHVlOiBcIiArICgodGFyZ2V0KSkpKTtcbiAgfVxuICBpZiAoQXJyYXkuaXNBcnJheSh0YXJnZXQpICYmIGlzVmFsaWRBcnJheUluZGV4KGtleSkpIHtcbiAgICB0YXJnZXQubGVuZ3RoID0gTWF0aC5tYXgodGFyZ2V0Lmxlbmd0aCwga2V5KTtcbiAgICB0YXJnZXQuc3BsaWNlKGtleSwgMSwgdmFsKTtcbiAgICByZXR1cm4gdmFsXG4gIH1cbiAgaWYgKGtleSBpbiB0YXJnZXQgJiYgIShrZXkgaW4gT2JqZWN0LnByb3RvdHlwZSkpIHtcbiAgICB0YXJnZXRba2V5XSA9IHZhbDtcbiAgICByZXR1cm4gdmFsXG4gIH1cbiAgdmFyIG9iID0gKHRhcmdldCkuX19vYl9fO1xuICBpZiAodGFyZ2V0Ll9pc1Z1ZSB8fCAob2IgJiYgb2Iudm1Db3VudCkpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAnQXZvaWQgYWRkaW5nIHJlYWN0aXZlIHByb3BlcnRpZXMgdG8gYSBWdWUgaW5zdGFuY2Ugb3IgaXRzIHJvb3QgJGRhdGEgJyArXG4gICAgICAnYXQgcnVudGltZSAtIGRlY2xhcmUgaXQgdXBmcm9udCBpbiB0aGUgZGF0YSBvcHRpb24uJ1xuICAgICk7XG4gICAgcmV0dXJuIHZhbFxuICB9XG4gIGlmICghb2IpIHtcbiAgICB0YXJnZXRba2V5XSA9IHZhbDtcbiAgICByZXR1cm4gdmFsXG4gIH1cbiAgZGVmaW5lUmVhY3RpdmUkJDEob2IudmFsdWUsIGtleSwgdmFsKTtcbiAgb2IuZGVwLm5vdGlmeSgpO1xuICByZXR1cm4gdmFsXG59XG5cbi8qKlxuICogRGVsZXRlIGEgcHJvcGVydHkgYW5kIHRyaWdnZXIgY2hhbmdlIGlmIG5lY2Vzc2FyeS5cbiAqL1xuZnVuY3Rpb24gZGVsICh0YXJnZXQsIGtleSkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgIChpc1VuZGVmKHRhcmdldCkgfHwgaXNQcmltaXRpdmUodGFyZ2V0KSlcbiAgKSB7XG4gICAgd2FybigoXCJDYW5ub3QgZGVsZXRlIHJlYWN0aXZlIHByb3BlcnR5IG9uIHVuZGVmaW5lZCwgbnVsbCwgb3IgcHJpbWl0aXZlIHZhbHVlOiBcIiArICgodGFyZ2V0KSkpKTtcbiAgfVxuICBpZiAoQXJyYXkuaXNBcnJheSh0YXJnZXQpICYmIGlzVmFsaWRBcnJheUluZGV4KGtleSkpIHtcbiAgICB0YXJnZXQuc3BsaWNlKGtleSwgMSk7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIG9iID0gKHRhcmdldCkuX19vYl9fO1xuICBpZiAodGFyZ2V0Ll9pc1Z1ZSB8fCAob2IgJiYgb2Iudm1Db3VudCkpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAnQXZvaWQgZGVsZXRpbmcgcHJvcGVydGllcyBvbiBhIFZ1ZSBpbnN0YW5jZSBvciBpdHMgcm9vdCAkZGF0YSAnICtcbiAgICAgICctIGp1c3Qgc2V0IGl0IHRvIG51bGwuJ1xuICAgICk7XG4gICAgcmV0dXJuXG4gIH1cbiAgaWYgKCFoYXNPd24odGFyZ2V0LCBrZXkpKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgZGVsZXRlIHRhcmdldFtrZXldO1xuICBpZiAoIW9iKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgb2IuZGVwLm5vdGlmeSgpO1xufVxuXG4vKipcbiAqIENvbGxlY3QgZGVwZW5kZW5jaWVzIG9uIGFycmF5IGVsZW1lbnRzIHdoZW4gdGhlIGFycmF5IGlzIHRvdWNoZWQsIHNpbmNlXG4gKiB3ZSBjYW5ub3QgaW50ZXJjZXB0IGFycmF5IGVsZW1lbnQgYWNjZXNzIGxpa2UgcHJvcGVydHkgZ2V0dGVycy5cbiAqL1xuZnVuY3Rpb24gZGVwZW5kQXJyYXkgKHZhbHVlKSB7XG4gIGZvciAodmFyIGUgPSAodm9pZCAwKSwgaSA9IDAsIGwgPSB2YWx1ZS5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBlID0gdmFsdWVbaV07XG4gICAgZSAmJiBlLl9fb2JfXyAmJiBlLl9fb2JfXy5kZXAuZGVwZW5kKCk7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZSkpIHtcbiAgICAgIGRlcGVuZEFycmF5KGUpO1xuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxuLyoqXG4gKiBPcHRpb24gb3ZlcndyaXRpbmcgc3RyYXRlZ2llcyBhcmUgZnVuY3Rpb25zIHRoYXQgaGFuZGxlXG4gKiBob3cgdG8gbWVyZ2UgYSBwYXJlbnQgb3B0aW9uIHZhbHVlIGFuZCBhIGNoaWxkIG9wdGlvblxuICogdmFsdWUgaW50byB0aGUgZmluYWwgdmFsdWUuXG4gKi9cbnZhciBzdHJhdHMgPSBjb25maWcub3B0aW9uTWVyZ2VTdHJhdGVnaWVzO1xuXG4vKipcbiAqIE9wdGlvbnMgd2l0aCByZXN0cmljdGlvbnNcbiAqL1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgc3RyYXRzLmVsID0gc3RyYXRzLnByb3BzRGF0YSA9IGZ1bmN0aW9uIChwYXJlbnQsIGNoaWxkLCB2bSwga2V5KSB7XG4gICAgaWYgKCF2bSkge1xuICAgICAgd2FybihcbiAgICAgICAgXCJvcHRpb24gXFxcIlwiICsga2V5ICsgXCJcXFwiIGNhbiBvbmx5IGJlIHVzZWQgZHVyaW5nIGluc3RhbmNlIFwiICtcbiAgICAgICAgJ2NyZWF0aW9uIHdpdGggdGhlIGBuZXdgIGtleXdvcmQuJ1xuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIGRlZmF1bHRTdHJhdChwYXJlbnQsIGNoaWxkKVxuICB9O1xufVxuXG4vKipcbiAqIEhlbHBlciB0aGF0IHJlY3Vyc2l2ZWx5IG1lcmdlcyB0d28gZGF0YSBvYmplY3RzIHRvZ2V0aGVyLlxuICovXG5mdW5jdGlvbiBtZXJnZURhdGEgKHRvLCBmcm9tKSB7XG4gIGlmICghZnJvbSkgeyByZXR1cm4gdG8gfVxuICB2YXIga2V5LCB0b1ZhbCwgZnJvbVZhbDtcblxuICB2YXIga2V5cyA9IGhhc1N5bWJvbFxuICAgID8gUmVmbGVjdC5vd25LZXlzKGZyb20pXG4gICAgOiBPYmplY3Qua2V5cyhmcm9tKTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBrZXkgPSBrZXlzW2ldO1xuICAgIC8vIGluIGNhc2UgdGhlIG9iamVjdCBpcyBhbHJlYWR5IG9ic2VydmVkLi4uXG4gICAgaWYgKGtleSA9PT0gJ19fb2JfXycpIHsgY29udGludWUgfVxuICAgIHRvVmFsID0gdG9ba2V5XTtcbiAgICBmcm9tVmFsID0gZnJvbVtrZXldO1xuICAgIGlmICghaGFzT3duKHRvLCBrZXkpKSB7XG4gICAgICBzZXQodG8sIGtleSwgZnJvbVZhbCk7XG4gICAgfSBlbHNlIGlmIChcbiAgICAgIHRvVmFsICE9PSBmcm9tVmFsICYmXG4gICAgICBpc1BsYWluT2JqZWN0KHRvVmFsKSAmJlxuICAgICAgaXNQbGFpbk9iamVjdChmcm9tVmFsKVxuICAgICkge1xuICAgICAgbWVyZ2VEYXRhKHRvVmFsLCBmcm9tVmFsKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRvXG59XG5cbi8qKlxuICogRGF0YVxuICovXG5mdW5jdGlvbiBtZXJnZURhdGFPckZuIChcbiAgcGFyZW50VmFsLFxuICBjaGlsZFZhbCxcbiAgdm1cbikge1xuICBpZiAoIXZtKSB7XG4gICAgLy8gaW4gYSBWdWUuZXh0ZW5kIG1lcmdlLCBib3RoIHNob3VsZCBiZSBmdW5jdGlvbnNcbiAgICBpZiAoIWNoaWxkVmFsKSB7XG4gICAgICByZXR1cm4gcGFyZW50VmFsXG4gICAgfVxuICAgIGlmICghcGFyZW50VmFsKSB7XG4gICAgICByZXR1cm4gY2hpbGRWYWxcbiAgICB9XG4gICAgLy8gd2hlbiBwYXJlbnRWYWwgJiBjaGlsZFZhbCBhcmUgYm90aCBwcmVzZW50LFxuICAgIC8vIHdlIG5lZWQgdG8gcmV0dXJuIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZVxuICAgIC8vIG1lcmdlZCByZXN1bHQgb2YgYm90aCBmdW5jdGlvbnMuLi4gbm8gbmVlZCB0b1xuICAgIC8vIGNoZWNrIGlmIHBhcmVudFZhbCBpcyBhIGZ1bmN0aW9uIGhlcmUgYmVjYXVzZVxuICAgIC8vIGl0IGhhcyB0byBiZSBhIGZ1bmN0aW9uIHRvIHBhc3MgcHJldmlvdXMgbWVyZ2VzLlxuICAgIHJldHVybiBmdW5jdGlvbiBtZXJnZWREYXRhRm4gKCkge1xuICAgICAgcmV0dXJuIG1lcmdlRGF0YShcbiAgICAgICAgdHlwZW9mIGNoaWxkVmFsID09PSAnZnVuY3Rpb24nID8gY2hpbGRWYWwuY2FsbCh0aGlzLCB0aGlzKSA6IGNoaWxkVmFsLFxuICAgICAgICB0eXBlb2YgcGFyZW50VmFsID09PSAnZnVuY3Rpb24nID8gcGFyZW50VmFsLmNhbGwodGhpcywgdGhpcykgOiBwYXJlbnRWYWxcbiAgICAgIClcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIG1lcmdlZEluc3RhbmNlRGF0YUZuICgpIHtcbiAgICAgIC8vIGluc3RhbmNlIG1lcmdlXG4gICAgICB2YXIgaW5zdGFuY2VEYXRhID0gdHlwZW9mIGNoaWxkVmFsID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gY2hpbGRWYWwuY2FsbCh2bSwgdm0pXG4gICAgICAgIDogY2hpbGRWYWw7XG4gICAgICB2YXIgZGVmYXVsdERhdGEgPSB0eXBlb2YgcGFyZW50VmFsID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gcGFyZW50VmFsLmNhbGwodm0sIHZtKVxuICAgICAgICA6IHBhcmVudFZhbDtcbiAgICAgIGlmIChpbnN0YW5jZURhdGEpIHtcbiAgICAgICAgcmV0dXJuIG1lcmdlRGF0YShpbnN0YW5jZURhdGEsIGRlZmF1bHREYXRhKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGRlZmF1bHREYXRhXG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbnN0cmF0cy5kYXRhID0gZnVuY3Rpb24gKFxuICBwYXJlbnRWYWwsXG4gIGNoaWxkVmFsLFxuICB2bVxuKSB7XG4gIGlmICghdm0pIHtcbiAgICBpZiAoY2hpbGRWYWwgJiYgdHlwZW9mIGNoaWxkVmFsICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAgICdUaGUgXCJkYXRhXCIgb3B0aW9uIHNob3VsZCBiZSBhIGZ1bmN0aW9uICcgK1xuICAgICAgICAndGhhdCByZXR1cm5zIGEgcGVyLWluc3RhbmNlIHZhbHVlIGluIGNvbXBvbmVudCAnICtcbiAgICAgICAgJ2RlZmluaXRpb25zLicsXG4gICAgICAgIHZtXG4gICAgICApO1xuXG4gICAgICByZXR1cm4gcGFyZW50VmFsXG4gICAgfVxuICAgIHJldHVybiBtZXJnZURhdGFPckZuKHBhcmVudFZhbCwgY2hpbGRWYWwpXG4gIH1cblxuICByZXR1cm4gbWVyZ2VEYXRhT3JGbihwYXJlbnRWYWwsIGNoaWxkVmFsLCB2bSlcbn07XG5cbi8qKlxuICogSG9va3MgYW5kIHByb3BzIGFyZSBtZXJnZWQgYXMgYXJyYXlzLlxuICovXG5mdW5jdGlvbiBtZXJnZUhvb2sgKFxuICBwYXJlbnRWYWwsXG4gIGNoaWxkVmFsXG4pIHtcbiAgdmFyIHJlcyA9IGNoaWxkVmFsXG4gICAgPyBwYXJlbnRWYWxcbiAgICAgID8gcGFyZW50VmFsLmNvbmNhdChjaGlsZFZhbClcbiAgICAgIDogQXJyYXkuaXNBcnJheShjaGlsZFZhbClcbiAgICAgICAgPyBjaGlsZFZhbFxuICAgICAgICA6IFtjaGlsZFZhbF1cbiAgICA6IHBhcmVudFZhbDtcbiAgcmV0dXJuIHJlc1xuICAgID8gZGVkdXBlSG9va3MocmVzKVxuICAgIDogcmVzXG59XG5cbmZ1bmN0aW9uIGRlZHVwZUhvb2tzIChob29rcykge1xuICB2YXIgcmVzID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgaG9va3MubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAocmVzLmluZGV4T2YoaG9va3NbaV0pID09PSAtMSkge1xuICAgICAgcmVzLnB1c2goaG9va3NbaV0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbkxJRkVDWUNMRV9IT09LUy5mb3JFYWNoKGZ1bmN0aW9uIChob29rKSB7XG4gIHN0cmF0c1tob29rXSA9IG1lcmdlSG9vaztcbn0pO1xuXG4vKipcbiAqIEFzc2V0c1xuICpcbiAqIFdoZW4gYSB2bSBpcyBwcmVzZW50IChpbnN0YW5jZSBjcmVhdGlvbiksIHdlIG5lZWQgdG8gZG9cbiAqIGEgdGhyZWUtd2F5IG1lcmdlIGJldHdlZW4gY29uc3RydWN0b3Igb3B0aW9ucywgaW5zdGFuY2VcbiAqIG9wdGlvbnMgYW5kIHBhcmVudCBvcHRpb25zLlxuICovXG5mdW5jdGlvbiBtZXJnZUFzc2V0cyAoXG4gIHBhcmVudFZhbCxcbiAgY2hpbGRWYWwsXG4gIHZtLFxuICBrZXlcbikge1xuICB2YXIgcmVzID0gT2JqZWN0LmNyZWF0ZShwYXJlbnRWYWwgfHwgbnVsbCk7XG4gIGlmIChjaGlsZFZhbCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgYXNzZXJ0T2JqZWN0VHlwZShrZXksIGNoaWxkVmFsLCB2bSk7XG4gICAgcmV0dXJuIGV4dGVuZChyZXMsIGNoaWxkVmFsKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiByZXNcbiAgfVxufVxuXG5BU1NFVF9UWVBFUy5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gIHN0cmF0c1t0eXBlICsgJ3MnXSA9IG1lcmdlQXNzZXRzO1xufSk7XG5cbi8qKlxuICogV2F0Y2hlcnMuXG4gKlxuICogV2F0Y2hlcnMgaGFzaGVzIHNob3VsZCBub3Qgb3ZlcndyaXRlIG9uZVxuICogYW5vdGhlciwgc28gd2UgbWVyZ2UgdGhlbSBhcyBhcnJheXMuXG4gKi9cbnN0cmF0cy53YXRjaCA9IGZ1bmN0aW9uIChcbiAgcGFyZW50VmFsLFxuICBjaGlsZFZhbCxcbiAgdm0sXG4gIGtleVxuKSB7XG4gIC8vIHdvcmsgYXJvdW5kIEZpcmVmb3gncyBPYmplY3QucHJvdG90eXBlLndhdGNoLi4uXG4gIGlmIChwYXJlbnRWYWwgPT09IG5hdGl2ZVdhdGNoKSB7IHBhcmVudFZhbCA9IHVuZGVmaW5lZDsgfVxuICBpZiAoY2hpbGRWYWwgPT09IG5hdGl2ZVdhdGNoKSB7IGNoaWxkVmFsID0gdW5kZWZpbmVkOyB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoIWNoaWxkVmFsKSB7IHJldHVybiBPYmplY3QuY3JlYXRlKHBhcmVudFZhbCB8fCBudWxsKSB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgYXNzZXJ0T2JqZWN0VHlwZShrZXksIGNoaWxkVmFsLCB2bSk7XG4gIH1cbiAgaWYgKCFwYXJlbnRWYWwpIHsgcmV0dXJuIGNoaWxkVmFsIH1cbiAgdmFyIHJldCA9IHt9O1xuICBleHRlbmQocmV0LCBwYXJlbnRWYWwpO1xuICBmb3IgKHZhciBrZXkkMSBpbiBjaGlsZFZhbCkge1xuICAgIHZhciBwYXJlbnQgPSByZXRba2V5JDFdO1xuICAgIHZhciBjaGlsZCA9IGNoaWxkVmFsW2tleSQxXTtcbiAgICBpZiAocGFyZW50ICYmICFBcnJheS5pc0FycmF5KHBhcmVudCkpIHtcbiAgICAgIHBhcmVudCA9IFtwYXJlbnRdO1xuICAgIH1cbiAgICByZXRba2V5JDFdID0gcGFyZW50XG4gICAgICA/IHBhcmVudC5jb25jYXQoY2hpbGQpXG4gICAgICA6IEFycmF5LmlzQXJyYXkoY2hpbGQpID8gY2hpbGQgOiBbY2hpbGRdO1xuICB9XG4gIHJldHVybiByZXRcbn07XG5cbi8qKlxuICogT3RoZXIgb2JqZWN0IGhhc2hlcy5cbiAqL1xuc3RyYXRzLnByb3BzID1cbnN0cmF0cy5tZXRob2RzID1cbnN0cmF0cy5pbmplY3QgPVxuc3RyYXRzLmNvbXB1dGVkID0gZnVuY3Rpb24gKFxuICBwYXJlbnRWYWwsXG4gIGNoaWxkVmFsLFxuICB2bSxcbiAga2V5XG4pIHtcbiAgaWYgKGNoaWxkVmFsICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBhc3NlcnRPYmplY3RUeXBlKGtleSwgY2hpbGRWYWwsIHZtKTtcbiAgfVxuICBpZiAoIXBhcmVudFZhbCkgeyByZXR1cm4gY2hpbGRWYWwgfVxuICB2YXIgcmV0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgZXh0ZW5kKHJldCwgcGFyZW50VmFsKTtcbiAgaWYgKGNoaWxkVmFsKSB7IGV4dGVuZChyZXQsIGNoaWxkVmFsKTsgfVxuICByZXR1cm4gcmV0XG59O1xuc3RyYXRzLnByb3ZpZGUgPSBtZXJnZURhdGFPckZuO1xuXG4vKipcbiAqIERlZmF1bHQgc3RyYXRlZ3kuXG4gKi9cbnZhciBkZWZhdWx0U3RyYXQgPSBmdW5jdGlvbiAocGFyZW50VmFsLCBjaGlsZFZhbCkge1xuICByZXR1cm4gY2hpbGRWYWwgPT09IHVuZGVmaW5lZFxuICAgID8gcGFyZW50VmFsXG4gICAgOiBjaGlsZFZhbFxufTtcblxuLyoqXG4gKiBWYWxpZGF0ZSBjb21wb25lbnQgbmFtZXNcbiAqL1xuZnVuY3Rpb24gY2hlY2tDb21wb25lbnRzIChvcHRpb25zKSB7XG4gIGZvciAodmFyIGtleSBpbiBvcHRpb25zLmNvbXBvbmVudHMpIHtcbiAgICB2YWxpZGF0ZUNvbXBvbmVudE5hbWUoa2V5KTtcbiAgfVxufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZUNvbXBvbmVudE5hbWUgKG5hbWUpIHtcbiAgaWYgKCFuZXcgUmVnRXhwKChcIl5bYS16QS1aXVtcXFxcLVxcXFwuMC05X1wiICsgKHVuaWNvZGVSZWdFeHAuc291cmNlKSArIFwiXSokXCIpKS50ZXN0KG5hbWUpKSB7XG4gICAgd2FybihcbiAgICAgICdJbnZhbGlkIGNvbXBvbmVudCBuYW1lOiBcIicgKyBuYW1lICsgJ1wiLiBDb21wb25lbnQgbmFtZXMgJyArXG4gICAgICAnc2hvdWxkIGNvbmZvcm0gdG8gdmFsaWQgY3VzdG9tIGVsZW1lbnQgbmFtZSBpbiBodG1sNSBzcGVjaWZpY2F0aW9uLidcbiAgICApO1xuICB9XG4gIGlmIChpc0J1aWx0SW5UYWcobmFtZSkgfHwgY29uZmlnLmlzUmVzZXJ2ZWRUYWcobmFtZSkpIHtcbiAgICB3YXJuKFxuICAgICAgJ0RvIG5vdCB1c2UgYnVpbHQtaW4gb3IgcmVzZXJ2ZWQgSFRNTCBlbGVtZW50cyBhcyBjb21wb25lbnQgJyArXG4gICAgICAnaWQ6ICcgKyBuYW1lXG4gICAgKTtcbiAgfVxufVxuXG4vKipcbiAqIEVuc3VyZSBhbGwgcHJvcHMgb3B0aW9uIHN5bnRheCBhcmUgbm9ybWFsaXplZCBpbnRvIHRoZVxuICogT2JqZWN0LWJhc2VkIGZvcm1hdC5cbiAqL1xuZnVuY3Rpb24gbm9ybWFsaXplUHJvcHMgKG9wdGlvbnMsIHZtKSB7XG4gIHZhciBwcm9wcyA9IG9wdGlvbnMucHJvcHM7XG4gIGlmICghcHJvcHMpIHsgcmV0dXJuIH1cbiAgdmFyIHJlcyA9IHt9O1xuICB2YXIgaSwgdmFsLCBuYW1lO1xuICBpZiAoQXJyYXkuaXNBcnJheShwcm9wcykpIHtcbiAgICBpID0gcHJvcHMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIHZhbCA9IHByb3BzW2ldO1xuICAgICAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIG5hbWUgPSBjYW1lbGl6ZSh2YWwpO1xuICAgICAgICByZXNbbmFtZV0gPSB7IHR5cGU6IG51bGwgfTtcbiAgICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICB3YXJuKCdwcm9wcyBtdXN0IGJlIHN0cmluZ3Mgd2hlbiB1c2luZyBhcnJheSBzeW50YXguJyk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzUGxhaW5PYmplY3QocHJvcHMpKSB7XG4gICAgZm9yICh2YXIga2V5IGluIHByb3BzKSB7XG4gICAgICB2YWwgPSBwcm9wc1trZXldO1xuICAgICAgbmFtZSA9IGNhbWVsaXplKGtleSk7XG4gICAgICByZXNbbmFtZV0gPSBpc1BsYWluT2JqZWN0KHZhbClcbiAgICAgICAgPyB2YWxcbiAgICAgICAgOiB7IHR5cGU6IHZhbCB9O1xuICAgIH1cbiAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgd2FybihcbiAgICAgIFwiSW52YWxpZCB2YWx1ZSBmb3Igb3B0aW9uIFxcXCJwcm9wc1xcXCI6IGV4cGVjdGVkIGFuIEFycmF5IG9yIGFuIE9iamVjdCwgXCIgK1xuICAgICAgXCJidXQgZ290IFwiICsgKHRvUmF3VHlwZShwcm9wcykpICsgXCIuXCIsXG4gICAgICB2bVxuICAgICk7XG4gIH1cbiAgb3B0aW9ucy5wcm9wcyA9IHJlcztcbn1cblxuLyoqXG4gKiBOb3JtYWxpemUgYWxsIGluamVjdGlvbnMgaW50byBPYmplY3QtYmFzZWQgZm9ybWF0XG4gKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZUluamVjdCAob3B0aW9ucywgdm0pIHtcbiAgdmFyIGluamVjdCA9IG9wdGlvbnMuaW5qZWN0O1xuICBpZiAoIWluamVjdCkgeyByZXR1cm4gfVxuICB2YXIgbm9ybWFsaXplZCA9IG9wdGlvbnMuaW5qZWN0ID0ge307XG4gIGlmIChBcnJheS5pc0FycmF5KGluamVjdCkpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGluamVjdC5sZW5ndGg7IGkrKykge1xuICAgICAgbm9ybWFsaXplZFtpbmplY3RbaV1dID0geyBmcm9tOiBpbmplY3RbaV0gfTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNQbGFpbk9iamVjdChpbmplY3QpKSB7XG4gICAgZm9yICh2YXIga2V5IGluIGluamVjdCkge1xuICAgICAgdmFyIHZhbCA9IGluamVjdFtrZXldO1xuICAgICAgbm9ybWFsaXplZFtrZXldID0gaXNQbGFpbk9iamVjdCh2YWwpXG4gICAgICAgID8gZXh0ZW5kKHsgZnJvbToga2V5IH0sIHZhbClcbiAgICAgICAgOiB7IGZyb206IHZhbCB9O1xuICAgIH1cbiAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgd2FybihcbiAgICAgIFwiSW52YWxpZCB2YWx1ZSBmb3Igb3B0aW9uIFxcXCJpbmplY3RcXFwiOiBleHBlY3RlZCBhbiBBcnJheSBvciBhbiBPYmplY3QsIFwiICtcbiAgICAgIFwiYnV0IGdvdCBcIiArICh0b1Jhd1R5cGUoaW5qZWN0KSkgKyBcIi5cIixcbiAgICAgIHZtXG4gICAgKTtcbiAgfVxufVxuXG4vKipcbiAqIE5vcm1hbGl6ZSByYXcgZnVuY3Rpb24gZGlyZWN0aXZlcyBpbnRvIG9iamVjdCBmb3JtYXQuXG4gKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZURpcmVjdGl2ZXMgKG9wdGlvbnMpIHtcbiAgdmFyIGRpcnMgPSBvcHRpb25zLmRpcmVjdGl2ZXM7XG4gIGlmIChkaXJzKSB7XG4gICAgZm9yICh2YXIga2V5IGluIGRpcnMpIHtcbiAgICAgIHZhciBkZWYkJDEgPSBkaXJzW2tleV07XG4gICAgICBpZiAodHlwZW9mIGRlZiQkMSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBkaXJzW2tleV0gPSB7IGJpbmQ6IGRlZiQkMSwgdXBkYXRlOiBkZWYkJDEgfTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYXNzZXJ0T2JqZWN0VHlwZSAobmFtZSwgdmFsdWUsIHZtKSB7XG4gIGlmICghaXNQbGFpbk9iamVjdCh2YWx1ZSkpIHtcbiAgICB3YXJuKFxuICAgICAgXCJJbnZhbGlkIHZhbHVlIGZvciBvcHRpb24gXFxcIlwiICsgbmFtZSArIFwiXFxcIjogZXhwZWN0ZWQgYW4gT2JqZWN0LCBcIiArXG4gICAgICBcImJ1dCBnb3QgXCIgKyAodG9SYXdUeXBlKHZhbHVlKSkgKyBcIi5cIixcbiAgICAgIHZtXG4gICAgKTtcbiAgfVxufVxuXG4vKipcbiAqIE1lcmdlIHR3byBvcHRpb24gb2JqZWN0cyBpbnRvIGEgbmV3IG9uZS5cbiAqIENvcmUgdXRpbGl0eSB1c2VkIGluIGJvdGggaW5zdGFudGlhdGlvbiBhbmQgaW5oZXJpdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIG1lcmdlT3B0aW9ucyAoXG4gIHBhcmVudCxcbiAgY2hpbGQsXG4gIHZtXG4pIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBjaGVja0NvbXBvbmVudHMoY2hpbGQpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBjaGlsZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNoaWxkID0gY2hpbGQub3B0aW9ucztcbiAgfVxuXG4gIG5vcm1hbGl6ZVByb3BzKGNoaWxkLCB2bSk7XG4gIG5vcm1hbGl6ZUluamVjdChjaGlsZCwgdm0pO1xuICBub3JtYWxpemVEaXJlY3RpdmVzKGNoaWxkKTtcblxuICAvLyBBcHBseSBleHRlbmRzIGFuZCBtaXhpbnMgb24gdGhlIGNoaWxkIG9wdGlvbnMsXG4gIC8vIGJ1dCBvbmx5IGlmIGl0IGlzIGEgcmF3IG9wdGlvbnMgb2JqZWN0IHRoYXQgaXNuJ3RcbiAgLy8gdGhlIHJlc3VsdCBvZiBhbm90aGVyIG1lcmdlT3B0aW9ucyBjYWxsLlxuICAvLyBPbmx5IG1lcmdlZCBvcHRpb25zIGhhcyB0aGUgX2Jhc2UgcHJvcGVydHkuXG4gIGlmICghY2hpbGQuX2Jhc2UpIHtcbiAgICBpZiAoY2hpbGQuZXh0ZW5kcykge1xuICAgICAgcGFyZW50ID0gbWVyZ2VPcHRpb25zKHBhcmVudCwgY2hpbGQuZXh0ZW5kcywgdm0pO1xuICAgIH1cbiAgICBpZiAoY2hpbGQubWl4aW5zKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGNoaWxkLm1peGlucy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgcGFyZW50ID0gbWVyZ2VPcHRpb25zKHBhcmVudCwgY2hpbGQubWl4aW5zW2ldLCB2bSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdmFyIG9wdGlvbnMgPSB7fTtcbiAgdmFyIGtleTtcbiAgZm9yIChrZXkgaW4gcGFyZW50KSB7XG4gICAgbWVyZ2VGaWVsZChrZXkpO1xuICB9XG4gIGZvciAoa2V5IGluIGNoaWxkKSB7XG4gICAgaWYgKCFoYXNPd24ocGFyZW50LCBrZXkpKSB7XG4gICAgICBtZXJnZUZpZWxkKGtleSk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIG1lcmdlRmllbGQgKGtleSkge1xuICAgIHZhciBzdHJhdCA9IHN0cmF0c1trZXldIHx8IGRlZmF1bHRTdHJhdDtcbiAgICBvcHRpb25zW2tleV0gPSBzdHJhdChwYXJlbnRba2V5XSwgY2hpbGRba2V5XSwgdm0sIGtleSk7XG4gIH1cbiAgcmV0dXJuIG9wdGlvbnNcbn1cblxuLyoqXG4gKiBSZXNvbHZlIGFuIGFzc2V0LlxuICogVGhpcyBmdW5jdGlvbiBpcyB1c2VkIGJlY2F1c2UgY2hpbGQgaW5zdGFuY2VzIG5lZWQgYWNjZXNzXG4gKiB0byBhc3NldHMgZGVmaW5lZCBpbiBpdHMgYW5jZXN0b3IgY2hhaW4uXG4gKi9cbmZ1bmN0aW9uIHJlc29sdmVBc3NldCAoXG4gIG9wdGlvbnMsXG4gIHR5cGUsXG4gIGlkLFxuICB3YXJuTWlzc2luZ1xuKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAodHlwZW9mIGlkICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVyblxuICB9XG4gIHZhciBhc3NldHMgPSBvcHRpb25zW3R5cGVdO1xuICAvLyBjaGVjayBsb2NhbCByZWdpc3RyYXRpb24gdmFyaWF0aW9ucyBmaXJzdFxuICBpZiAoaGFzT3duKGFzc2V0cywgaWQpKSB7IHJldHVybiBhc3NldHNbaWRdIH1cbiAgdmFyIGNhbWVsaXplZElkID0gY2FtZWxpemUoaWQpO1xuICBpZiAoaGFzT3duKGFzc2V0cywgY2FtZWxpemVkSWQpKSB7IHJldHVybiBhc3NldHNbY2FtZWxpemVkSWRdIH1cbiAgdmFyIFBhc2NhbENhc2VJZCA9IGNhcGl0YWxpemUoY2FtZWxpemVkSWQpO1xuICBpZiAoaGFzT3duKGFzc2V0cywgUGFzY2FsQ2FzZUlkKSkgeyByZXR1cm4gYXNzZXRzW1Bhc2NhbENhc2VJZF0gfVxuICAvLyBmYWxsYmFjayB0byBwcm90b3R5cGUgY2hhaW5cbiAgdmFyIHJlcyA9IGFzc2V0c1tpZF0gfHwgYXNzZXRzW2NhbWVsaXplZElkXSB8fCBhc3NldHNbUGFzY2FsQ2FzZUlkXTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2Fybk1pc3NpbmcgJiYgIXJlcykge1xuICAgIHdhcm4oXG4gICAgICAnRmFpbGVkIHRvIHJlc29sdmUgJyArIHR5cGUuc2xpY2UoMCwgLTEpICsgJzogJyArIGlkLFxuICAgICAgb3B0aW9uc1xuICAgICk7XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG4vKiAgKi9cblxuXG5cbmZ1bmN0aW9uIHZhbGlkYXRlUHJvcCAoXG4gIGtleSxcbiAgcHJvcE9wdGlvbnMsXG4gIHByb3BzRGF0YSxcbiAgdm1cbikge1xuICB2YXIgcHJvcCA9IHByb3BPcHRpb25zW2tleV07XG4gIHZhciBhYnNlbnQgPSAhaGFzT3duKHByb3BzRGF0YSwga2V5KTtcbiAgdmFyIHZhbHVlID0gcHJvcHNEYXRhW2tleV07XG4gIC8vIGJvb2xlYW4gY2FzdGluZ1xuICB2YXIgYm9vbGVhbkluZGV4ID0gZ2V0VHlwZUluZGV4KEJvb2xlYW4sIHByb3AudHlwZSk7XG4gIGlmIChib29sZWFuSW5kZXggPiAtMSkge1xuICAgIGlmIChhYnNlbnQgJiYgIWhhc093bihwcm9wLCAnZGVmYXVsdCcpKSB7XG4gICAgICB2YWx1ZSA9IGZhbHNlO1xuICAgIH0gZWxzZSBpZiAodmFsdWUgPT09ICcnIHx8IHZhbHVlID09PSBoeXBoZW5hdGUoa2V5KSkge1xuICAgICAgLy8gb25seSBjYXN0IGVtcHR5IHN0cmluZyAvIHNhbWUgbmFtZSB0byBib29sZWFuIGlmXG4gICAgICAvLyBib29sZWFuIGhhcyBoaWdoZXIgcHJpb3JpdHlcbiAgICAgIHZhciBzdHJpbmdJbmRleCA9IGdldFR5cGVJbmRleChTdHJpbmcsIHByb3AudHlwZSk7XG4gICAgICBpZiAoc3RyaW5nSW5kZXggPCAwIHx8IGJvb2xlYW5JbmRleCA8IHN0cmluZ0luZGV4KSB7XG4gICAgICAgIHZhbHVlID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLy8gY2hlY2sgZGVmYXVsdCB2YWx1ZVxuICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgIHZhbHVlID0gZ2V0UHJvcERlZmF1bHRWYWx1ZSh2bSwgcHJvcCwga2V5KTtcbiAgICAvLyBzaW5jZSB0aGUgZGVmYXVsdCB2YWx1ZSBpcyBhIGZyZXNoIGNvcHksXG4gICAgLy8gbWFrZSBzdXJlIHRvIG9ic2VydmUgaXQuXG4gICAgdmFyIHByZXZTaG91bGRPYnNlcnZlID0gc2hvdWxkT2JzZXJ2ZTtcbiAgICB0b2dnbGVPYnNlcnZpbmcodHJ1ZSk7XG4gICAgb2JzZXJ2ZSh2YWx1ZSk7XG4gICAgdG9nZ2xlT2JzZXJ2aW5nKHByZXZTaG91bGRPYnNlcnZlKTtcbiAgfVxuICBpZiAoXG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgIC8vIHNraXAgdmFsaWRhdGlvbiBmb3Igd2VleCByZWN5Y2xlLWxpc3QgY2hpbGQgY29tcG9uZW50IHByb3BzXG4gICAgIShmYWxzZSlcbiAgKSB7XG4gICAgYXNzZXJ0UHJvcChwcm9wLCBrZXksIHZhbHVlLCB2bSwgYWJzZW50KTtcbiAgfVxuICByZXR1cm4gdmFsdWVcbn1cblxuLyoqXG4gKiBHZXQgdGhlIGRlZmF1bHQgdmFsdWUgb2YgYSBwcm9wLlxuICovXG5mdW5jdGlvbiBnZXRQcm9wRGVmYXVsdFZhbHVlICh2bSwgcHJvcCwga2V5KSB7XG4gIC8vIG5vIGRlZmF1bHQsIHJldHVybiB1bmRlZmluZWRcbiAgaWYgKCFoYXNPd24ocHJvcCwgJ2RlZmF1bHQnKSkge1xuICAgIHJldHVybiB1bmRlZmluZWRcbiAgfVxuICB2YXIgZGVmID0gcHJvcC5kZWZhdWx0O1xuICAvLyB3YXJuIGFnYWluc3Qgbm9uLWZhY3RvcnkgZGVmYXVsdHMgZm9yIE9iamVjdCAmIEFycmF5XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGlzT2JqZWN0KGRlZikpIHtcbiAgICB3YXJuKFxuICAgICAgJ0ludmFsaWQgZGVmYXVsdCB2YWx1ZSBmb3IgcHJvcCBcIicgKyBrZXkgKyAnXCI6ICcgK1xuICAgICAgJ1Byb3BzIHdpdGggdHlwZSBPYmplY3QvQXJyYXkgbXVzdCB1c2UgYSBmYWN0b3J5IGZ1bmN0aW9uICcgK1xuICAgICAgJ3RvIHJldHVybiB0aGUgZGVmYXVsdCB2YWx1ZS4nLFxuICAgICAgdm1cbiAgICApO1xuICB9XG4gIC8vIHRoZSByYXcgcHJvcCB2YWx1ZSB3YXMgYWxzbyB1bmRlZmluZWQgZnJvbSBwcmV2aW91cyByZW5kZXIsXG4gIC8vIHJldHVybiBwcmV2aW91cyBkZWZhdWx0IHZhbHVlIHRvIGF2b2lkIHVubmVjZXNzYXJ5IHdhdGNoZXIgdHJpZ2dlclxuICBpZiAodm0gJiYgdm0uJG9wdGlvbnMucHJvcHNEYXRhICYmXG4gICAgdm0uJG9wdGlvbnMucHJvcHNEYXRhW2tleV0gPT09IHVuZGVmaW5lZCAmJlxuICAgIHZtLl9wcm9wc1trZXldICE9PSB1bmRlZmluZWRcbiAgKSB7XG4gICAgcmV0dXJuIHZtLl9wcm9wc1trZXldXG4gIH1cbiAgLy8gY2FsbCBmYWN0b3J5IGZ1bmN0aW9uIGZvciBub24tRnVuY3Rpb24gdHlwZXNcbiAgLy8gYSB2YWx1ZSBpcyBGdW5jdGlvbiBpZiBpdHMgcHJvdG90eXBlIGlzIGZ1bmN0aW9uIGV2ZW4gYWNyb3NzIGRpZmZlcmVudCBleGVjdXRpb24gY29udGV4dFxuICByZXR1cm4gdHlwZW9mIGRlZiA9PT0gJ2Z1bmN0aW9uJyAmJiBnZXRUeXBlKHByb3AudHlwZSkgIT09ICdGdW5jdGlvbidcbiAgICA/IGRlZi5jYWxsKHZtKVxuICAgIDogZGVmXG59XG5cbi8qKlxuICogQXNzZXJ0IHdoZXRoZXIgYSBwcm9wIGlzIHZhbGlkLlxuICovXG5mdW5jdGlvbiBhc3NlcnRQcm9wIChcbiAgcHJvcCxcbiAgbmFtZSxcbiAgdmFsdWUsXG4gIHZtLFxuICBhYnNlbnRcbikge1xuICBpZiAocHJvcC5yZXF1aXJlZCAmJiBhYnNlbnQpIHtcbiAgICB3YXJuKFxuICAgICAgJ01pc3NpbmcgcmVxdWlyZWQgcHJvcDogXCInICsgbmFtZSArICdcIicsXG4gICAgICB2bVxuICAgICk7XG4gICAgcmV0dXJuXG4gIH1cbiAgaWYgKHZhbHVlID09IG51bGwgJiYgIXByb3AucmVxdWlyZWQpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgdHlwZSA9IHByb3AudHlwZTtcbiAgdmFyIHZhbGlkID0gIXR5cGUgfHwgdHlwZSA9PT0gdHJ1ZTtcbiAgdmFyIGV4cGVjdGVkVHlwZXMgPSBbXTtcbiAgaWYgKHR5cGUpIHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkodHlwZSkpIHtcbiAgICAgIHR5cGUgPSBbdHlwZV07XG4gICAgfVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdHlwZS5sZW5ndGggJiYgIXZhbGlkOyBpKyspIHtcbiAgICAgIHZhciBhc3NlcnRlZFR5cGUgPSBhc3NlcnRUeXBlKHZhbHVlLCB0eXBlW2ldLCB2bSk7XG4gICAgICBleHBlY3RlZFR5cGVzLnB1c2goYXNzZXJ0ZWRUeXBlLmV4cGVjdGVkVHlwZSB8fCAnJyk7XG4gICAgICB2YWxpZCA9IGFzc2VydGVkVHlwZS52YWxpZDtcbiAgICB9XG4gIH1cblxuICB2YXIgaGF2ZUV4cGVjdGVkVHlwZXMgPSBleHBlY3RlZFR5cGVzLnNvbWUoZnVuY3Rpb24gKHQpIHsgcmV0dXJuIHQ7IH0pO1xuICBpZiAoIXZhbGlkICYmIGhhdmVFeHBlY3RlZFR5cGVzKSB7XG4gICAgd2FybihcbiAgICAgIGdldEludmFsaWRUeXBlTWVzc2FnZShuYW1lLCB2YWx1ZSwgZXhwZWN0ZWRUeXBlcyksXG4gICAgICB2bVxuICAgICk7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIHZhbGlkYXRvciA9IHByb3AudmFsaWRhdG9yO1xuICBpZiAodmFsaWRhdG9yKSB7XG4gICAgaWYgKCF2YWxpZGF0b3IodmFsdWUpKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAnSW52YWxpZCBwcm9wOiBjdXN0b20gdmFsaWRhdG9yIGNoZWNrIGZhaWxlZCBmb3IgcHJvcCBcIicgKyBuYW1lICsgJ1wiLicsXG4gICAgICAgIHZtXG4gICAgICApO1xuICAgIH1cbiAgfVxufVxuXG52YXIgc2ltcGxlQ2hlY2tSRSA9IC9eKFN0cmluZ3xOdW1iZXJ8Qm9vbGVhbnxGdW5jdGlvbnxTeW1ib2x8QmlnSW50KSQvO1xuXG5mdW5jdGlvbiBhc3NlcnRUeXBlICh2YWx1ZSwgdHlwZSwgdm0pIHtcbiAgdmFyIHZhbGlkO1xuICB2YXIgZXhwZWN0ZWRUeXBlID0gZ2V0VHlwZSh0eXBlKTtcbiAgaWYgKHNpbXBsZUNoZWNrUkUudGVzdChleHBlY3RlZFR5cGUpKSB7XG4gICAgdmFyIHQgPSB0eXBlb2YgdmFsdWU7XG4gICAgdmFsaWQgPSB0ID09PSBleHBlY3RlZFR5cGUudG9Mb3dlckNhc2UoKTtcbiAgICAvLyBmb3IgcHJpbWl0aXZlIHdyYXBwZXIgb2JqZWN0c1xuICAgIGlmICghdmFsaWQgJiYgdCA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHZhbGlkID0gdmFsdWUgaW5zdGFuY2VvZiB0eXBlO1xuICAgIH1cbiAgfSBlbHNlIGlmIChleHBlY3RlZFR5cGUgPT09ICdPYmplY3QnKSB7XG4gICAgdmFsaWQgPSBpc1BsYWluT2JqZWN0KHZhbHVlKTtcbiAgfSBlbHNlIGlmIChleHBlY3RlZFR5cGUgPT09ICdBcnJheScpIHtcbiAgICB2YWxpZCA9IEFycmF5LmlzQXJyYXkodmFsdWUpO1xuICB9IGVsc2Uge1xuICAgIHRyeSB7XG4gICAgICB2YWxpZCA9IHZhbHVlIGluc3RhbmNlb2YgdHlwZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB3YXJuKCdJbnZhbGlkIHByb3AgdHlwZTogXCInICsgU3RyaW5nKHR5cGUpICsgJ1wiIGlzIG5vdCBhIGNvbnN0cnVjdG9yJywgdm0pO1xuICAgICAgdmFsaWQgPSBmYWxzZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHtcbiAgICB2YWxpZDogdmFsaWQsXG4gICAgZXhwZWN0ZWRUeXBlOiBleHBlY3RlZFR5cGVcbiAgfVxufVxuXG52YXIgZnVuY3Rpb25UeXBlQ2hlY2tSRSA9IC9eXFxzKmZ1bmN0aW9uIChcXHcrKS87XG5cbi8qKlxuICogVXNlIGZ1bmN0aW9uIHN0cmluZyBuYW1lIHRvIGNoZWNrIGJ1aWx0LWluIHR5cGVzLFxuICogYmVjYXVzZSBhIHNpbXBsZSBlcXVhbGl0eSBjaGVjayB3aWxsIGZhaWwgd2hlbiBydW5uaW5nXG4gKiBhY3Jvc3MgZGlmZmVyZW50IHZtcyAvIGlmcmFtZXMuXG4gKi9cbmZ1bmN0aW9uIGdldFR5cGUgKGZuKSB7XG4gIHZhciBtYXRjaCA9IGZuICYmIGZuLnRvU3RyaW5nKCkubWF0Y2goZnVuY3Rpb25UeXBlQ2hlY2tSRSk7XG4gIHJldHVybiBtYXRjaCA/IG1hdGNoWzFdIDogJydcbn1cblxuZnVuY3Rpb24gaXNTYW1lVHlwZSAoYSwgYikge1xuICByZXR1cm4gZ2V0VHlwZShhKSA9PT0gZ2V0VHlwZShiKVxufVxuXG5mdW5jdGlvbiBnZXRUeXBlSW5kZXggKHR5cGUsIGV4cGVjdGVkVHlwZXMpIHtcbiAgaWYgKCFBcnJheS5pc0FycmF5KGV4cGVjdGVkVHlwZXMpKSB7XG4gICAgcmV0dXJuIGlzU2FtZVR5cGUoZXhwZWN0ZWRUeXBlcywgdHlwZSkgPyAwIDogLTFcbiAgfVxuICBmb3IgKHZhciBpID0gMCwgbGVuID0gZXhwZWN0ZWRUeXBlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIGlmIChpc1NhbWVUeXBlKGV4cGVjdGVkVHlwZXNbaV0sIHR5cGUpKSB7XG4gICAgICByZXR1cm4gaVxuICAgIH1cbiAgfVxuICByZXR1cm4gLTFcbn1cblxuZnVuY3Rpb24gZ2V0SW52YWxpZFR5cGVNZXNzYWdlIChuYW1lLCB2YWx1ZSwgZXhwZWN0ZWRUeXBlcykge1xuICB2YXIgbWVzc2FnZSA9IFwiSW52YWxpZCBwcm9wOiB0eXBlIGNoZWNrIGZhaWxlZCBmb3IgcHJvcCBcXFwiXCIgKyBuYW1lICsgXCJcXFwiLlwiICtcbiAgICBcIiBFeHBlY3RlZCBcIiArIChleHBlY3RlZFR5cGVzLm1hcChjYXBpdGFsaXplKS5qb2luKCcsICcpKTtcbiAgdmFyIGV4cGVjdGVkVHlwZSA9IGV4cGVjdGVkVHlwZXNbMF07XG4gIHZhciByZWNlaXZlZFR5cGUgPSB0b1Jhd1R5cGUodmFsdWUpO1xuICAvLyBjaGVjayBpZiB3ZSBuZWVkIHRvIHNwZWNpZnkgZXhwZWN0ZWQgdmFsdWVcbiAgaWYgKFxuICAgIGV4cGVjdGVkVHlwZXMubGVuZ3RoID09PSAxICYmXG4gICAgaXNFeHBsaWNhYmxlKGV4cGVjdGVkVHlwZSkgJiZcbiAgICBpc0V4cGxpY2FibGUodHlwZW9mIHZhbHVlKSAmJlxuICAgICFpc0Jvb2xlYW4oZXhwZWN0ZWRUeXBlLCByZWNlaXZlZFR5cGUpXG4gICkge1xuICAgIG1lc3NhZ2UgKz0gXCIgd2l0aCB2YWx1ZSBcIiArIChzdHlsZVZhbHVlKHZhbHVlLCBleHBlY3RlZFR5cGUpKTtcbiAgfVxuICBtZXNzYWdlICs9IFwiLCBnb3QgXCIgKyByZWNlaXZlZFR5cGUgKyBcIiBcIjtcbiAgLy8gY2hlY2sgaWYgd2UgbmVlZCB0byBzcGVjaWZ5IHJlY2VpdmVkIHZhbHVlXG4gIGlmIChpc0V4cGxpY2FibGUocmVjZWl2ZWRUeXBlKSkge1xuICAgIG1lc3NhZ2UgKz0gXCJ3aXRoIHZhbHVlIFwiICsgKHN0eWxlVmFsdWUodmFsdWUsIHJlY2VpdmVkVHlwZSkpICsgXCIuXCI7XG4gIH1cbiAgcmV0dXJuIG1lc3NhZ2Vcbn1cblxuZnVuY3Rpb24gc3R5bGVWYWx1ZSAodmFsdWUsIHR5cGUpIHtcbiAgaWYgKHR5cGUgPT09ICdTdHJpbmcnKSB7XG4gICAgcmV0dXJuIChcIlxcXCJcIiArIHZhbHVlICsgXCJcXFwiXCIpXG4gIH0gZWxzZSBpZiAodHlwZSA9PT0gJ051bWJlcicpIHtcbiAgICByZXR1cm4gKFwiXCIgKyAoTnVtYmVyKHZhbHVlKSkpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIChcIlwiICsgdmFsdWUpXG4gIH1cbn1cblxudmFyIEVYUExJQ0FCTEVfVFlQRVMgPSBbJ3N0cmluZycsICdudW1iZXInLCAnYm9vbGVhbiddO1xuZnVuY3Rpb24gaXNFeHBsaWNhYmxlICh2YWx1ZSkge1xuICByZXR1cm4gRVhQTElDQUJMRV9UWVBFUy5zb21lKGZ1bmN0aW9uIChlbGVtKSB7IHJldHVybiB2YWx1ZS50b0xvd2VyQ2FzZSgpID09PSBlbGVtOyB9KVxufVxuXG5mdW5jdGlvbiBpc0Jvb2xlYW4gKCkge1xuICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gIHJldHVybiBhcmdzLnNvbWUoZnVuY3Rpb24gKGVsZW0pIHsgcmV0dXJuIGVsZW0udG9Mb3dlckNhc2UoKSA9PT0gJ2Jvb2xlYW4nOyB9KVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaGFuZGxlRXJyb3IgKGVyciwgdm0sIGluZm8pIHtcbiAgLy8gRGVhY3RpdmF0ZSBkZXBzIHRyYWNraW5nIHdoaWxlIHByb2Nlc3NpbmcgZXJyb3IgaGFuZGxlciB0byBhdm9pZCBwb3NzaWJsZSBpbmZpbml0ZSByZW5kZXJpbmcuXG4gIC8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3Z1ZXgvaXNzdWVzLzE1MDVcbiAgcHVzaFRhcmdldCgpO1xuICB0cnkge1xuICAgIGlmICh2bSkge1xuICAgICAgdmFyIGN1ciA9IHZtO1xuICAgICAgd2hpbGUgKChjdXIgPSBjdXIuJHBhcmVudCkpIHtcbiAgICAgICAgdmFyIGhvb2tzID0gY3VyLiRvcHRpb25zLmVycm9yQ2FwdHVyZWQ7XG4gICAgICAgIGlmIChob29rcykge1xuICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaG9va3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIHZhciBjYXB0dXJlID0gaG9va3NbaV0uY2FsbChjdXIsIGVyciwgdm0sIGluZm8pID09PSBmYWxzZTtcbiAgICAgICAgICAgICAgaWYgKGNhcHR1cmUpIHsgcmV0dXJuIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgZ2xvYmFsSGFuZGxlRXJyb3IoZSwgY3VyLCAnZXJyb3JDYXB0dXJlZCBob29rJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGdsb2JhbEhhbmRsZUVycm9yKGVyciwgdm0sIGluZm8pO1xuICB9IGZpbmFsbHkge1xuICAgIHBvcFRhcmdldCgpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGludm9rZVdpdGhFcnJvckhhbmRsaW5nIChcbiAgaGFuZGxlcixcbiAgY29udGV4dCxcbiAgYXJncyxcbiAgdm0sXG4gIGluZm9cbikge1xuICB2YXIgcmVzO1xuICB0cnkge1xuICAgIHJlcyA9IGFyZ3MgPyBoYW5kbGVyLmFwcGx5KGNvbnRleHQsIGFyZ3MpIDogaGFuZGxlci5jYWxsKGNvbnRleHQpO1xuICAgIGlmIChyZXMgJiYgIXJlcy5faXNWdWUgJiYgaXNQcm9taXNlKHJlcykgJiYgIXJlcy5faGFuZGxlZCkge1xuICAgICAgcmVzLmNhdGNoKGZ1bmN0aW9uIChlKSB7IHJldHVybiBoYW5kbGVFcnJvcihlLCB2bSwgaW5mbyArIFwiIChQcm9taXNlL2FzeW5jKVwiKTsgfSk7XG4gICAgICAvLyBpc3N1ZSAjOTUxMVxuICAgICAgLy8gYXZvaWQgY2F0Y2ggdHJpZ2dlcmluZyBtdWx0aXBsZSB0aW1lcyB3aGVuIG5lc3RlZCBjYWxsc1xuICAgICAgcmVzLl9oYW5kbGVkID0gdHJ1ZTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBoYW5kbGVFcnJvcihlLCB2bSwgaW5mbyk7XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBnbG9iYWxIYW5kbGVFcnJvciAoZXJyLCB2bSwgaW5mbykge1xuICBpZiAoY29uZmlnLmVycm9ySGFuZGxlcikge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gY29uZmlnLmVycm9ySGFuZGxlci5jYWxsKG51bGwsIGVyciwgdm0sIGluZm8pXG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gaWYgdGhlIHVzZXIgaW50ZW50aW9uYWxseSB0aHJvd3MgdGhlIG9yaWdpbmFsIGVycm9yIGluIHRoZSBoYW5kbGVyLFxuICAgICAgLy8gZG8gbm90IGxvZyBpdCB0d2ljZVxuICAgICAgaWYgKGUgIT09IGVycikge1xuICAgICAgICBsb2dFcnJvcihlLCBudWxsLCAnY29uZmlnLmVycm9ySGFuZGxlcicpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBsb2dFcnJvcihlcnIsIHZtLCBpbmZvKTtcbn1cblxuZnVuY3Rpb24gbG9nRXJyb3IgKGVyciwgdm0sIGluZm8pIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB3YXJuKChcIkVycm9yIGluIFwiICsgaW5mbyArIFwiOiBcXFwiXCIgKyAoZXJyLnRvU3RyaW5nKCkpICsgXCJcXFwiXCIpLCB2bSk7XG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKChpbkJyb3dzZXIgfHwgaW5XZWV4KSAmJiB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgZXJyXG4gIH1cbn1cblxuLyogICovXG5cbnZhciBpc1VzaW5nTWljcm9UYXNrID0gZmFsc2U7XG5cbnZhciBjYWxsYmFja3MgPSBbXTtcbnZhciBwZW5kaW5nID0gZmFsc2U7XG5cbmZ1bmN0aW9uIGZsdXNoQ2FsbGJhY2tzICgpIHtcbiAgcGVuZGluZyA9IGZhbHNlO1xuICB2YXIgY29waWVzID0gY2FsbGJhY2tzLnNsaWNlKDApO1xuICBjYWxsYmFja3MubGVuZ3RoID0gMDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb3BpZXMubGVuZ3RoOyBpKyspIHtcbiAgICBjb3BpZXNbaV0oKTtcbiAgfVxufVxuXG4vLyBIZXJlIHdlIGhhdmUgYXN5bmMgZGVmZXJyaW5nIHdyYXBwZXJzIHVzaW5nIG1pY3JvdGFza3MuXG4vLyBJbiAyLjUgd2UgdXNlZCAobWFjcm8pIHRhc2tzIChpbiBjb21iaW5hdGlvbiB3aXRoIG1pY3JvdGFza3MpLlxuLy8gSG93ZXZlciwgaXQgaGFzIHN1YnRsZSBwcm9ibGVtcyB3aGVuIHN0YXRlIGlzIGNoYW5nZWQgcmlnaHQgYmVmb3JlIHJlcGFpbnRcbi8vIChlLmcuICM2ODEzLCBvdXQtaW4gdHJhbnNpdGlvbnMpLlxuLy8gQWxzbywgdXNpbmcgKG1hY3JvKSB0YXNrcyBpbiBldmVudCBoYW5kbGVyIHdvdWxkIGNhdXNlIHNvbWUgd2VpcmQgYmVoYXZpb3JzXG4vLyB0aGF0IGNhbm5vdCBiZSBjaXJjdW12ZW50ZWQgKGUuZy4gIzcxMDksICM3MTUzLCAjNzU0NiwgIzc4MzQsICM4MTA5KS5cbi8vIFNvIHdlIG5vdyB1c2UgbWljcm90YXNrcyBldmVyeXdoZXJlLCBhZ2Fpbi5cbi8vIEEgbWFqb3IgZHJhd2JhY2sgb2YgdGhpcyB0cmFkZW9mZiBpcyB0aGF0IHRoZXJlIGFyZSBzb21lIHNjZW5hcmlvc1xuLy8gd2hlcmUgbWljcm90YXNrcyBoYXZlIHRvbyBoaWdoIGEgcHJpb3JpdHkgYW5kIGZpcmUgaW4gYmV0d2VlbiBzdXBwb3NlZGx5XG4vLyBzZXF1ZW50aWFsIGV2ZW50cyAoZS5nLiAjNDUyMSwgIzY2OTAsIHdoaWNoIGhhdmUgd29ya2Fyb3VuZHMpXG4vLyBvciBldmVuIGJldHdlZW4gYnViYmxpbmcgb2YgdGhlIHNhbWUgZXZlbnQgKCM2NTY2KS5cbnZhciB0aW1lckZ1bmM7XG5cbi8vIFRoZSBuZXh0VGljayBiZWhhdmlvciBsZXZlcmFnZXMgdGhlIG1pY3JvdGFzayBxdWV1ZSwgd2hpY2ggY2FuIGJlIGFjY2Vzc2VkXG4vLyB2aWEgZWl0aGVyIG5hdGl2ZSBQcm9taXNlLnRoZW4gb3IgTXV0YXRpb25PYnNlcnZlci5cbi8vIE11dGF0aW9uT2JzZXJ2ZXIgaGFzIHdpZGVyIHN1cHBvcnQsIGhvd2V2ZXIgaXQgaXMgc2VyaW91c2x5IGJ1Z2dlZCBpblxuLy8gVUlXZWJWaWV3IGluIGlPUyA+PSA5LjMuMyB3aGVuIHRyaWdnZXJlZCBpbiB0b3VjaCBldmVudCBoYW5kbGVycy4gSXRcbi8vIGNvbXBsZXRlbHkgc3RvcHMgd29ya2luZyBhZnRlciB0cmlnZ2VyaW5nIGEgZmV3IHRpbWVzLi4uIHNvLCBpZiBuYXRpdmVcbi8vIFByb21pc2UgaXMgYXZhaWxhYmxlLCB3ZSB3aWxsIHVzZSBpdDpcbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0LCAkZmxvdy1kaXNhYmxlLWxpbmUgKi9cbmlmICh0eXBlb2YgUHJvbWlzZSAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoUHJvbWlzZSkpIHtcbiAgdmFyIHAgPSBQcm9taXNlLnJlc29sdmUoKTtcbiAgdGltZXJGdW5jID0gZnVuY3Rpb24gKCkge1xuICAgIHAudGhlbihmbHVzaENhbGxiYWNrcyk7XG4gICAgLy8gSW4gcHJvYmxlbWF0aWMgVUlXZWJWaWV3cywgUHJvbWlzZS50aGVuIGRvZXNuJ3QgY29tcGxldGVseSBicmVhaywgYnV0XG4gICAgLy8gaXQgY2FuIGdldCBzdHVjayBpbiBhIHdlaXJkIHN0YXRlIHdoZXJlIGNhbGxiYWNrcyBhcmUgcHVzaGVkIGludG8gdGhlXG4gICAgLy8gbWljcm90YXNrIHF1ZXVlIGJ1dCB0aGUgcXVldWUgaXNuJ3QgYmVpbmcgZmx1c2hlZCwgdW50aWwgdGhlIGJyb3dzZXJcbiAgICAvLyBuZWVkcyB0byBkbyBzb21lIG90aGVyIHdvcmssIGUuZy4gaGFuZGxlIGEgdGltZXIuIFRoZXJlZm9yZSB3ZSBjYW5cbiAgICAvLyBcImZvcmNlXCIgdGhlIG1pY3JvdGFzayBxdWV1ZSB0byBiZSBmbHVzaGVkIGJ5IGFkZGluZyBhbiBlbXB0eSB0aW1lci5cbiAgICBpZiAoaXNJT1MpIHsgc2V0VGltZW91dChub29wKTsgfVxuICB9O1xuICBpc1VzaW5nTWljcm9UYXNrID0gdHJ1ZTtcbn0gZWxzZSBpZiAoIWlzSUUgJiYgdHlwZW9mIE11dGF0aW9uT2JzZXJ2ZXIgIT09ICd1bmRlZmluZWQnICYmIChcbiAgaXNOYXRpdmUoTXV0YXRpb25PYnNlcnZlcikgfHxcbiAgLy8gUGhhbnRvbUpTIGFuZCBpT1MgNy54XG4gIE11dGF0aW9uT2JzZXJ2ZXIudG9TdHJpbmcoKSA9PT0gJ1tvYmplY3QgTXV0YXRpb25PYnNlcnZlckNvbnN0cnVjdG9yXSdcbikpIHtcbiAgLy8gVXNlIE11dGF0aW9uT2JzZXJ2ZXIgd2hlcmUgbmF0aXZlIFByb21pc2UgaXMgbm90IGF2YWlsYWJsZSxcbiAgLy8gZS5nLiBQaGFudG9tSlMsIGlPUzcsIEFuZHJvaWQgNC40XG4gIC8vICgjNjQ2NiBNdXRhdGlvbk9ic2VydmVyIGlzIHVucmVsaWFibGUgaW4gSUUxMSlcbiAgdmFyIGNvdW50ZXIgPSAxO1xuICB2YXIgb2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcihmbHVzaENhbGxiYWNrcyk7XG4gIHZhciB0ZXh0Tm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKFN0cmluZyhjb3VudGVyKSk7XG4gIG9ic2VydmVyLm9ic2VydmUodGV4dE5vZGUsIHtcbiAgICBjaGFyYWN0ZXJEYXRhOiB0cnVlXG4gIH0pO1xuICB0aW1lckZ1bmMgPSBmdW5jdGlvbiAoKSB7XG4gICAgY291bnRlciA9IChjb3VudGVyICsgMSkgJSAyO1xuICAgIHRleHROb2RlLmRhdGEgPSBTdHJpbmcoY291bnRlcik7XG4gIH07XG4gIGlzVXNpbmdNaWNyb1Rhc2sgPSB0cnVlO1xufSBlbHNlIGlmICh0eXBlb2Ygc2V0SW1tZWRpYXRlICE9PSAndW5kZWZpbmVkJyAmJiBpc05hdGl2ZShzZXRJbW1lZGlhdGUpKSB7XG4gIC8vIEZhbGxiYWNrIHRvIHNldEltbWVkaWF0ZS5cbiAgLy8gVGVjaG5pY2FsbHkgaXQgbGV2ZXJhZ2VzIHRoZSAobWFjcm8pIHRhc2sgcXVldWUsXG4gIC8vIGJ1dCBpdCBpcyBzdGlsbCBhIGJldHRlciBjaG9pY2UgdGhhbiBzZXRUaW1lb3V0LlxuICB0aW1lckZ1bmMgPSBmdW5jdGlvbiAoKSB7XG4gICAgc2V0SW1tZWRpYXRlKGZsdXNoQ2FsbGJhY2tzKTtcbiAgfTtcbn0gZWxzZSB7XG4gIC8vIEZhbGxiYWNrIHRvIHNldFRpbWVvdXQuXG4gIHRpbWVyRnVuYyA9IGZ1bmN0aW9uICgpIHtcbiAgICBzZXRUaW1lb3V0KGZsdXNoQ2FsbGJhY2tzLCAwKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gbmV4dFRpY2sgKGNiLCBjdHgpIHtcbiAgdmFyIF9yZXNvbHZlO1xuICBjYWxsYmFja3MucHVzaChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGNiKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjYi5jYWxsKGN0eCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGhhbmRsZUVycm9yKGUsIGN0eCwgJ25leHRUaWNrJyk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChfcmVzb2x2ZSkge1xuICAgICAgX3Jlc29sdmUoY3R4KTtcbiAgICB9XG4gIH0pO1xuICBpZiAoIXBlbmRpbmcpIHtcbiAgICBwZW5kaW5nID0gdHJ1ZTtcbiAgICB0aW1lckZ1bmMoKTtcbiAgfVxuICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgaWYgKCFjYiAmJiB0eXBlb2YgUHJvbWlzZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgIF9yZXNvbHZlID0gcmVzb2x2ZTtcbiAgICB9KVxuICB9XG59XG5cbi8qICAqL1xuXG4vKiBub3QgdHlwZSBjaGVja2luZyB0aGlzIGZpbGUgYmVjYXVzZSBmbG93IGRvZXNuJ3QgcGxheSB3ZWxsIHdpdGggUHJveHkgKi9cblxudmFyIGluaXRQcm94eTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIGFsbG93ZWRHbG9iYWxzID0gbWFrZU1hcChcbiAgICAnSW5maW5pdHksdW5kZWZpbmVkLE5hTixpc0Zpbml0ZSxpc05hTiwnICtcbiAgICAncGFyc2VGbG9hdCxwYXJzZUludCxkZWNvZGVVUkksZGVjb2RlVVJJQ29tcG9uZW50LGVuY29kZVVSSSxlbmNvZGVVUklDb21wb25lbnQsJyArXG4gICAgJ01hdGgsTnVtYmVyLERhdGUsQXJyYXksT2JqZWN0LEJvb2xlYW4sU3RyaW5nLFJlZ0V4cCxNYXAsU2V0LEpTT04sSW50bCxCaWdJbnQsJyArXG4gICAgJ3JlcXVpcmUnIC8vIGZvciBXZWJwYWNrL0Jyb3dzZXJpZnlcbiAgKTtcblxuICB2YXIgd2Fybk5vblByZXNlbnQgPSBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHtcbiAgICB3YXJuKFxuICAgICAgXCJQcm9wZXJ0eSBvciBtZXRob2QgXFxcIlwiICsga2V5ICsgXCJcXFwiIGlzIG5vdCBkZWZpbmVkIG9uIHRoZSBpbnN0YW5jZSBidXQgXCIgK1xuICAgICAgJ3JlZmVyZW5jZWQgZHVyaW5nIHJlbmRlci4gTWFrZSBzdXJlIHRoYXQgdGhpcyBwcm9wZXJ0eSBpcyByZWFjdGl2ZSwgJyArXG4gICAgICAnZWl0aGVyIGluIHRoZSBkYXRhIG9wdGlvbiwgb3IgZm9yIGNsYXNzLWJhc2VkIGNvbXBvbmVudHMsIGJ5ICcgK1xuICAgICAgJ2luaXRpYWxpemluZyB0aGUgcHJvcGVydHkuICcgK1xuICAgICAgJ1NlZTogaHR0cHM6Ly92dWVqcy5vcmcvdjIvZ3VpZGUvcmVhY3Rpdml0eS5odG1sI0RlY2xhcmluZy1SZWFjdGl2ZS1Qcm9wZXJ0aWVzLicsXG4gICAgICB0YXJnZXRcbiAgICApO1xuICB9O1xuXG4gIHZhciB3YXJuUmVzZXJ2ZWRQcmVmaXggPSBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHtcbiAgICB3YXJuKFxuICAgICAgXCJQcm9wZXJ0eSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgbXVzdCBiZSBhY2Nlc3NlZCB3aXRoIFxcXCIkZGF0YS5cIiArIGtleSArIFwiXFxcIiBiZWNhdXNlIFwiICtcbiAgICAgICdwcm9wZXJ0aWVzIHN0YXJ0aW5nIHdpdGggXCIkXCIgb3IgXCJfXCIgYXJlIG5vdCBwcm94aWVkIGluIHRoZSBWdWUgaW5zdGFuY2UgdG8gJyArXG4gICAgICAncHJldmVudCBjb25mbGljdHMgd2l0aCBWdWUgaW50ZXJuYWxzLiAnICtcbiAgICAgICdTZWU6IGh0dHBzOi8vdnVlanMub3JnL3YyL2FwaS8jZGF0YScsXG4gICAgICB0YXJnZXRcbiAgICApO1xuICB9O1xuXG4gIHZhciBoYXNQcm94eSA9XG4gICAgdHlwZW9mIFByb3h5ICE9PSAndW5kZWZpbmVkJyAmJiBpc05hdGl2ZShQcm94eSk7XG5cbiAgaWYgKGhhc1Byb3h5KSB7XG4gICAgdmFyIGlzQnVpbHRJbk1vZGlmaWVyID0gbWFrZU1hcCgnc3RvcCxwcmV2ZW50LHNlbGYsY3RybCxzaGlmdCxhbHQsbWV0YSxleGFjdCcpO1xuICAgIGNvbmZpZy5rZXlDb2RlcyA9IG5ldyBQcm94eShjb25maWcua2V5Q29kZXMsIHtcbiAgICAgIHNldDogZnVuY3Rpb24gc2V0ICh0YXJnZXQsIGtleSwgdmFsdWUpIHtcbiAgICAgICAgaWYgKGlzQnVpbHRJbk1vZGlmaWVyKGtleSkpIHtcbiAgICAgICAgICB3YXJuKChcIkF2b2lkIG92ZXJ3cml0aW5nIGJ1aWx0LWluIG1vZGlmaWVyIGluIGNvbmZpZy5rZXlDb2RlczogLlwiICsga2V5KSk7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICB2YXIgaGFzSGFuZGxlciA9IHtcbiAgICBoYXM6IGZ1bmN0aW9uIGhhcyAodGFyZ2V0LCBrZXkpIHtcbiAgICAgIHZhciBoYXMgPSBrZXkgaW4gdGFyZ2V0O1xuICAgICAgdmFyIGlzQWxsb3dlZCA9IGFsbG93ZWRHbG9iYWxzKGtleSkgfHxcbiAgICAgICAgKHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnICYmIGtleS5jaGFyQXQoMCkgPT09ICdfJyAmJiAhKGtleSBpbiB0YXJnZXQuJGRhdGEpKTtcbiAgICAgIGlmICghaGFzICYmICFpc0FsbG93ZWQpIHtcbiAgICAgICAgaWYgKGtleSBpbiB0YXJnZXQuJGRhdGEpIHsgd2FyblJlc2VydmVkUHJlZml4KHRhcmdldCwga2V5KTsgfVxuICAgICAgICBlbHNlIHsgd2Fybk5vblByZXNlbnQodGFyZ2V0LCBrZXkpOyB9XG4gICAgICB9XG4gICAgICByZXR1cm4gaGFzIHx8ICFpc0FsbG93ZWRcbiAgICB9XG4gIH07XG5cbiAgdmFyIGdldEhhbmRsZXIgPSB7XG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQgKHRhcmdldCwga2V5KSB7XG4gICAgICBpZiAodHlwZW9mIGtleSA9PT0gJ3N0cmluZycgJiYgIShrZXkgaW4gdGFyZ2V0KSkge1xuICAgICAgICBpZiAoa2V5IGluIHRhcmdldC4kZGF0YSkgeyB3YXJuUmVzZXJ2ZWRQcmVmaXgodGFyZ2V0LCBrZXkpOyB9XG4gICAgICAgIGVsc2UgeyB3YXJuTm9uUHJlc2VudCh0YXJnZXQsIGtleSk7IH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0YXJnZXRba2V5XVxuICAgIH1cbiAgfTtcblxuICBpbml0UHJveHkgPSBmdW5jdGlvbiBpbml0UHJveHkgKHZtKSB7XG4gICAgaWYgKGhhc1Byb3h5KSB7XG4gICAgICAvLyBkZXRlcm1pbmUgd2hpY2ggcHJveHkgaGFuZGxlciB0byB1c2VcbiAgICAgIHZhciBvcHRpb25zID0gdm0uJG9wdGlvbnM7XG4gICAgICB2YXIgaGFuZGxlcnMgPSBvcHRpb25zLnJlbmRlciAmJiBvcHRpb25zLnJlbmRlci5fd2l0aFN0cmlwcGVkXG4gICAgICAgID8gZ2V0SGFuZGxlclxuICAgICAgICA6IGhhc0hhbmRsZXI7XG4gICAgICB2bS5fcmVuZGVyUHJveHkgPSBuZXcgUHJveHkodm0sIGhhbmRsZXJzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdm0uX3JlbmRlclByb3h5ID0gdm07XG4gICAgfVxuICB9O1xufVxuXG4vKiAgKi9cblxudmFyIHNlZW5PYmplY3RzID0gbmV3IF9TZXQoKTtcblxuLyoqXG4gKiBSZWN1cnNpdmVseSB0cmF2ZXJzZSBhbiBvYmplY3QgdG8gZXZva2UgYWxsIGNvbnZlcnRlZFxuICogZ2V0dGVycywgc28gdGhhdCBldmVyeSBuZXN0ZWQgcHJvcGVydHkgaW5zaWRlIHRoZSBvYmplY3RcbiAqIGlzIGNvbGxlY3RlZCBhcyBhIFwiZGVlcFwiIGRlcGVuZGVuY3kuXG4gKi9cbmZ1bmN0aW9uIHRyYXZlcnNlICh2YWwpIHtcbiAgX3RyYXZlcnNlKHZhbCwgc2Vlbk9iamVjdHMpO1xuICBzZWVuT2JqZWN0cy5jbGVhcigpO1xufVxuXG5mdW5jdGlvbiBfdHJhdmVyc2UgKHZhbCwgc2Vlbikge1xuICB2YXIgaSwga2V5cztcbiAgdmFyIGlzQSA9IEFycmF5LmlzQXJyYXkodmFsKTtcbiAgaWYgKCghaXNBICYmICFpc09iamVjdCh2YWwpKSB8fCBPYmplY3QuaXNGcm96ZW4odmFsKSB8fCB2YWwgaW5zdGFuY2VvZiBWTm9kZSkge1xuICAgIHJldHVyblxuICB9XG4gIGlmICh2YWwuX19vYl9fKSB7XG4gICAgdmFyIGRlcElkID0gdmFsLl9fb2JfXy5kZXAuaWQ7XG4gICAgaWYgKHNlZW4uaGFzKGRlcElkKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIHNlZW4uYWRkKGRlcElkKTtcbiAgfVxuICBpZiAoaXNBKSB7XG4gICAgaSA9IHZhbC5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkgeyBfdHJhdmVyc2UodmFsW2ldLCBzZWVuKTsgfVxuICB9IGVsc2Uge1xuICAgIGtleXMgPSBPYmplY3Qua2V5cyh2YWwpO1xuICAgIGkgPSBrZXlzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7IF90cmF2ZXJzZSh2YWxba2V5c1tpXV0sIHNlZW4pOyB9XG4gIH1cbn1cblxudmFyIG1hcms7XG52YXIgbWVhc3VyZTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIHBlcmYgPSBpbkJyb3dzZXIgJiYgd2luZG93LnBlcmZvcm1hbmNlO1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKFxuICAgIHBlcmYgJiZcbiAgICBwZXJmLm1hcmsgJiZcbiAgICBwZXJmLm1lYXN1cmUgJiZcbiAgICBwZXJmLmNsZWFyTWFya3MgJiZcbiAgICBwZXJmLmNsZWFyTWVhc3VyZXNcbiAgKSB7XG4gICAgbWFyayA9IGZ1bmN0aW9uICh0YWcpIHsgcmV0dXJuIHBlcmYubWFyayh0YWcpOyB9O1xuICAgIG1lYXN1cmUgPSBmdW5jdGlvbiAobmFtZSwgc3RhcnRUYWcsIGVuZFRhZykge1xuICAgICAgcGVyZi5tZWFzdXJlKG5hbWUsIHN0YXJ0VGFnLCBlbmRUYWcpO1xuICAgICAgcGVyZi5jbGVhck1hcmtzKHN0YXJ0VGFnKTtcbiAgICAgIHBlcmYuY2xlYXJNYXJrcyhlbmRUYWcpO1xuICAgICAgLy8gcGVyZi5jbGVhck1lYXN1cmVzKG5hbWUpXG4gICAgfTtcbiAgfVxufVxuXG4vKiAgKi9cblxudmFyIG5vcm1hbGl6ZUV2ZW50ID0gY2FjaGVkKGZ1bmN0aW9uIChuYW1lKSB7XG4gIHZhciBwYXNzaXZlID0gbmFtZS5jaGFyQXQoMCkgPT09ICcmJztcbiAgbmFtZSA9IHBhc3NpdmUgPyBuYW1lLnNsaWNlKDEpIDogbmFtZTtcbiAgdmFyIG9uY2UkJDEgPSBuYW1lLmNoYXJBdCgwKSA9PT0gJ34nOyAvLyBQcmVmaXhlZCBsYXN0LCBjaGVja2VkIGZpcnN0XG4gIG5hbWUgPSBvbmNlJCQxID8gbmFtZS5zbGljZSgxKSA6IG5hbWU7XG4gIHZhciBjYXB0dXJlID0gbmFtZS5jaGFyQXQoMCkgPT09ICchJztcbiAgbmFtZSA9IGNhcHR1cmUgPyBuYW1lLnNsaWNlKDEpIDogbmFtZTtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBuYW1lLFxuICAgIG9uY2U6IG9uY2UkJDEsXG4gICAgY2FwdHVyZTogY2FwdHVyZSxcbiAgICBwYXNzaXZlOiBwYXNzaXZlXG4gIH1cbn0pO1xuXG5mdW5jdGlvbiBjcmVhdGVGbkludm9rZXIgKGZucywgdm0pIHtcbiAgZnVuY3Rpb24gaW52b2tlciAoKSB7XG4gICAgdmFyIGFyZ3VtZW50cyQxID0gYXJndW1lbnRzO1xuXG4gICAgdmFyIGZucyA9IGludm9rZXIuZm5zO1xuICAgIGlmIChBcnJheS5pc0FycmF5KGZucykpIHtcbiAgICAgIHZhciBjbG9uZWQgPSBmbnMuc2xpY2UoKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2xvbmVkLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGludm9rZVdpdGhFcnJvckhhbmRsaW5nKGNsb25lZFtpXSwgbnVsbCwgYXJndW1lbnRzJDEsIHZtLCBcInYtb24gaGFuZGxlclwiKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gcmV0dXJuIGhhbmRsZXIgcmV0dXJuIHZhbHVlIGZvciBzaW5nbGUgaGFuZGxlcnNcbiAgICAgIHJldHVybiBpbnZva2VXaXRoRXJyb3JIYW5kbGluZyhmbnMsIG51bGwsIGFyZ3VtZW50cywgdm0sIFwidi1vbiBoYW5kbGVyXCIpXG4gICAgfVxuICB9XG4gIGludm9rZXIuZm5zID0gZm5zO1xuICByZXR1cm4gaW52b2tlclxufVxuXG5mdW5jdGlvbiB1cGRhdGVMaXN0ZW5lcnMgKFxuICBvbixcbiAgb2xkT24sXG4gIGFkZCxcbiAgcmVtb3ZlJCQxLFxuICBjcmVhdGVPbmNlSGFuZGxlcixcbiAgdm1cbikge1xuICB2YXIgbmFtZSwgZGVmJCQxLCBjdXIsIG9sZCwgZXZlbnQ7XG4gIGZvciAobmFtZSBpbiBvbikge1xuICAgIGRlZiQkMSA9IGN1ciA9IG9uW25hbWVdO1xuICAgIG9sZCA9IG9sZE9uW25hbWVdO1xuICAgIGV2ZW50ID0gbm9ybWFsaXplRXZlbnQobmFtZSk7XG4gICAgaWYgKGlzVW5kZWYoY3VyKSkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICBcIkludmFsaWQgaGFuZGxlciBmb3IgZXZlbnQgXFxcIlwiICsgKGV2ZW50Lm5hbWUpICsgXCJcXFwiOiBnb3QgXCIgKyBTdHJpbmcoY3VyKSxcbiAgICAgICAgdm1cbiAgICAgICk7XG4gICAgfSBlbHNlIGlmIChpc1VuZGVmKG9sZCkpIHtcbiAgICAgIGlmIChpc1VuZGVmKGN1ci5mbnMpKSB7XG4gICAgICAgIGN1ciA9IG9uW25hbWVdID0gY3JlYXRlRm5JbnZva2VyKGN1ciwgdm0pO1xuICAgICAgfVxuICAgICAgaWYgKGlzVHJ1ZShldmVudC5vbmNlKSkge1xuICAgICAgICBjdXIgPSBvbltuYW1lXSA9IGNyZWF0ZU9uY2VIYW5kbGVyKGV2ZW50Lm5hbWUsIGN1ciwgZXZlbnQuY2FwdHVyZSk7XG4gICAgICB9XG4gICAgICBhZGQoZXZlbnQubmFtZSwgY3VyLCBldmVudC5jYXB0dXJlLCBldmVudC5wYXNzaXZlLCBldmVudC5wYXJhbXMpO1xuICAgIH0gZWxzZSBpZiAoY3VyICE9PSBvbGQpIHtcbiAgICAgIG9sZC5mbnMgPSBjdXI7XG4gICAgICBvbltuYW1lXSA9IG9sZDtcbiAgICB9XG4gIH1cbiAgZm9yIChuYW1lIGluIG9sZE9uKSB7XG4gICAgaWYgKGlzVW5kZWYob25bbmFtZV0pKSB7XG4gICAgICBldmVudCA9IG5vcm1hbGl6ZUV2ZW50KG5hbWUpO1xuICAgICAgcmVtb3ZlJCQxKGV2ZW50Lm5hbWUsIG9sZE9uW25hbWVdLCBldmVudC5jYXB0dXJlKTtcbiAgICB9XG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIG1lcmdlVk5vZGVIb29rIChkZWYsIGhvb2tLZXksIGhvb2spIHtcbiAgaWYgKGRlZiBpbnN0YW5jZW9mIFZOb2RlKSB7XG4gICAgZGVmID0gZGVmLmRhdGEuaG9vayB8fCAoZGVmLmRhdGEuaG9vayA9IHt9KTtcbiAgfVxuICB2YXIgaW52b2tlcjtcbiAgdmFyIG9sZEhvb2sgPSBkZWZbaG9va0tleV07XG5cbiAgZnVuY3Rpb24gd3JhcHBlZEhvb2sgKCkge1xuICAgIGhvb2suYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAvLyBpbXBvcnRhbnQ6IHJlbW92ZSBtZXJnZWQgaG9vayB0byBlbnN1cmUgaXQncyBjYWxsZWQgb25seSBvbmNlXG4gICAgLy8gYW5kIHByZXZlbnQgbWVtb3J5IGxlYWtcbiAgICByZW1vdmUoaW52b2tlci5mbnMsIHdyYXBwZWRIb29rKTtcbiAgfVxuXG4gIGlmIChpc1VuZGVmKG9sZEhvb2spKSB7XG4gICAgLy8gbm8gZXhpc3RpbmcgaG9va1xuICAgIGludm9rZXIgPSBjcmVhdGVGbkludm9rZXIoW3dyYXBwZWRIb29rXSk7XG4gIH0gZWxzZSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKGlzRGVmKG9sZEhvb2suZm5zKSAmJiBpc1RydWUob2xkSG9vay5tZXJnZWQpKSB7XG4gICAgICAvLyBhbHJlYWR5IGEgbWVyZ2VkIGludm9rZXJcbiAgICAgIGludm9rZXIgPSBvbGRIb29rO1xuICAgICAgaW52b2tlci5mbnMucHVzaCh3cmFwcGVkSG9vayk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGV4aXN0aW5nIHBsYWluIGhvb2tcbiAgICAgIGludm9rZXIgPSBjcmVhdGVGbkludm9rZXIoW29sZEhvb2ssIHdyYXBwZWRIb29rXSk7XG4gICAgfVxuICB9XG5cbiAgaW52b2tlci5tZXJnZWQgPSB0cnVlO1xuICBkZWZbaG9va0tleV0gPSBpbnZva2VyO1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gZXh0cmFjdFByb3BzRnJvbVZOb2RlRGF0YSAoXG4gIGRhdGEsXG4gIEN0b3IsXG4gIHRhZ1xuKSB7XG4gIC8vIHdlIGFyZSBvbmx5IGV4dHJhY3RpbmcgcmF3IHZhbHVlcyBoZXJlLlxuICAvLyB2YWxpZGF0aW9uIGFuZCBkZWZhdWx0IHZhbHVlcyBhcmUgaGFuZGxlZCBpbiB0aGUgY2hpbGRcbiAgLy8gY29tcG9uZW50IGl0c2VsZi5cbiAgdmFyIHByb3BPcHRpb25zID0gQ3Rvci5vcHRpb25zLnByb3BzO1xuICBpZiAoaXNVbmRlZihwcm9wT3B0aW9ucykpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgcmVzID0ge307XG4gIHZhciBhdHRycyA9IGRhdGEuYXR0cnM7XG4gIHZhciBwcm9wcyA9IGRhdGEucHJvcHM7XG4gIGlmIChpc0RlZihhdHRycykgfHwgaXNEZWYocHJvcHMpKSB7XG4gICAgZm9yICh2YXIga2V5IGluIHByb3BPcHRpb25zKSB7XG4gICAgICB2YXIgYWx0S2V5ID0gaHlwaGVuYXRlKGtleSk7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICB2YXIga2V5SW5Mb3dlckNhc2UgPSBrZXkudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIGtleSAhPT0ga2V5SW5Mb3dlckNhc2UgJiZcbiAgICAgICAgICBhdHRycyAmJiBoYXNPd24oYXR0cnMsIGtleUluTG93ZXJDYXNlKVxuICAgICAgICApIHtcbiAgICAgICAgICB0aXAoXG4gICAgICAgICAgICBcIlByb3AgXFxcIlwiICsga2V5SW5Mb3dlckNhc2UgKyBcIlxcXCIgaXMgcGFzc2VkIHRvIGNvbXBvbmVudCBcIiArXG4gICAgICAgICAgICAoZm9ybWF0Q29tcG9uZW50TmFtZSh0YWcgfHwgQ3RvcikpICsgXCIsIGJ1dCB0aGUgZGVjbGFyZWQgcHJvcCBuYW1lIGlzXCIgK1xuICAgICAgICAgICAgXCIgXFxcIlwiICsga2V5ICsgXCJcXFwiLiBcIiArXG4gICAgICAgICAgICBcIk5vdGUgdGhhdCBIVE1MIGF0dHJpYnV0ZXMgYXJlIGNhc2UtaW5zZW5zaXRpdmUgYW5kIGNhbWVsQ2FzZWQgXCIgK1xuICAgICAgICAgICAgXCJwcm9wcyBuZWVkIHRvIHVzZSB0aGVpciBrZWJhYi1jYXNlIGVxdWl2YWxlbnRzIHdoZW4gdXNpbmcgaW4tRE9NIFwiICtcbiAgICAgICAgICAgIFwidGVtcGxhdGVzLiBZb3Ugc2hvdWxkIHByb2JhYmx5IHVzZSBcXFwiXCIgKyBhbHRLZXkgKyBcIlxcXCIgaW5zdGVhZCBvZiBcXFwiXCIgKyBrZXkgKyBcIlxcXCIuXCJcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjaGVja1Byb3AocmVzLCBwcm9wcywga2V5LCBhbHRLZXksIHRydWUpIHx8XG4gICAgICBjaGVja1Byb3AocmVzLCBhdHRycywga2V5LCBhbHRLZXksIGZhbHNlKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBjaGVja1Byb3AgKFxuICByZXMsXG4gIGhhc2gsXG4gIGtleSxcbiAgYWx0S2V5LFxuICBwcmVzZXJ2ZVxuKSB7XG4gIGlmIChpc0RlZihoYXNoKSkge1xuICAgIGlmIChoYXNPd24oaGFzaCwga2V5KSkge1xuICAgICAgcmVzW2tleV0gPSBoYXNoW2tleV07XG4gICAgICBpZiAoIXByZXNlcnZlKSB7XG4gICAgICAgIGRlbGV0ZSBoYXNoW2tleV07XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH0gZWxzZSBpZiAoaGFzT3duKGhhc2gsIGFsdEtleSkpIHtcbiAgICAgIHJlc1trZXldID0gaGFzaFthbHRLZXldO1xuICAgICAgaWYgKCFwcmVzZXJ2ZSkge1xuICAgICAgICBkZWxldGUgaGFzaFthbHRLZXldO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlXG59XG5cbi8qICAqL1xuXG4vLyBUaGUgdGVtcGxhdGUgY29tcGlsZXIgYXR0ZW1wdHMgdG8gbWluaW1pemUgdGhlIG5lZWQgZm9yIG5vcm1hbGl6YXRpb24gYnlcbi8vIHN0YXRpY2FsbHkgYW5hbHl6aW5nIHRoZSB0ZW1wbGF0ZSBhdCBjb21waWxlIHRpbWUuXG4vL1xuLy8gRm9yIHBsYWluIEhUTUwgbWFya3VwLCBub3JtYWxpemF0aW9uIGNhbiBiZSBjb21wbGV0ZWx5IHNraXBwZWQgYmVjYXVzZSB0aGVcbi8vIGdlbmVyYXRlZCByZW5kZXIgZnVuY3Rpb24gaXMgZ3VhcmFudGVlZCB0byByZXR1cm4gQXJyYXk8Vk5vZGU+LiBUaGVyZSBhcmVcbi8vIHR3byBjYXNlcyB3aGVyZSBleHRyYSBub3JtYWxpemF0aW9uIGlzIG5lZWRlZDpcblxuLy8gMS4gV2hlbiB0aGUgY2hpbGRyZW4gY29udGFpbnMgY29tcG9uZW50cyAtIGJlY2F1c2UgYSBmdW5jdGlvbmFsIGNvbXBvbmVudFxuLy8gbWF5IHJldHVybiBhbiBBcnJheSBpbnN0ZWFkIG9mIGEgc2luZ2xlIHJvb3QuIEluIHRoaXMgY2FzZSwganVzdCBhIHNpbXBsZVxuLy8gbm9ybWFsaXphdGlvbiBpcyBuZWVkZWQgLSBpZiBhbnkgY2hpbGQgaXMgYW4gQXJyYXksIHdlIGZsYXR0ZW4gdGhlIHdob2xlXG4vLyB0aGluZyB3aXRoIEFycmF5LnByb3RvdHlwZS5jb25jYXQuIEl0IGlzIGd1YXJhbnRlZWQgdG8gYmUgb25seSAxLWxldmVsIGRlZXBcbi8vIGJlY2F1c2UgZnVuY3Rpb25hbCBjb21wb25lbnRzIGFscmVhZHkgbm9ybWFsaXplIHRoZWlyIG93biBjaGlsZHJlbi5cbmZ1bmN0aW9uIHNpbXBsZU5vcm1hbGl6ZUNoaWxkcmVuIChjaGlsZHJlbikge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW5baV0pKSB7XG4gICAgICByZXR1cm4gQXJyYXkucHJvdG90eXBlLmNvbmNhdC5hcHBseShbXSwgY2hpbGRyZW4pXG4gICAgfVxuICB9XG4gIHJldHVybiBjaGlsZHJlblxufVxuXG4vLyAyLiBXaGVuIHRoZSBjaGlsZHJlbiBjb250YWlucyBjb25zdHJ1Y3RzIHRoYXQgYWx3YXlzIGdlbmVyYXRlZCBuZXN0ZWQgQXJyYXlzLFxuLy8gZS5nLiA8dGVtcGxhdGU+LCA8c2xvdD4sIHYtZm9yLCBvciB3aGVuIHRoZSBjaGlsZHJlbiBpcyBwcm92aWRlZCBieSB1c2VyXG4vLyB3aXRoIGhhbmQtd3JpdHRlbiByZW5kZXIgZnVuY3Rpb25zIC8gSlNYLiBJbiBzdWNoIGNhc2VzIGEgZnVsbCBub3JtYWxpemF0aW9uXG4vLyBpcyBuZWVkZWQgdG8gY2F0ZXIgdG8gYWxsIHBvc3NpYmxlIHR5cGVzIG9mIGNoaWxkcmVuIHZhbHVlcy5cbmZ1bmN0aW9uIG5vcm1hbGl6ZUNoaWxkcmVuIChjaGlsZHJlbikge1xuICByZXR1cm4gaXNQcmltaXRpdmUoY2hpbGRyZW4pXG4gICAgPyBbY3JlYXRlVGV4dFZOb2RlKGNoaWxkcmVuKV1cbiAgICA6IEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pXG4gICAgICA/IG5vcm1hbGl6ZUFycmF5Q2hpbGRyZW4oY2hpbGRyZW4pXG4gICAgICA6IHVuZGVmaW5lZFxufVxuXG5mdW5jdGlvbiBpc1RleHROb2RlIChub2RlKSB7XG4gIHJldHVybiBpc0RlZihub2RlKSAmJiBpc0RlZihub2RlLnRleHQpICYmIGlzRmFsc2Uobm9kZS5pc0NvbW1lbnQpXG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZUFycmF5Q2hpbGRyZW4gKGNoaWxkcmVuLCBuZXN0ZWRJbmRleCkge1xuICB2YXIgcmVzID0gW107XG4gIHZhciBpLCBjLCBsYXN0SW5kZXgsIGxhc3Q7XG4gIGZvciAoaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgIGMgPSBjaGlsZHJlbltpXTtcbiAgICBpZiAoaXNVbmRlZihjKSB8fCB0eXBlb2YgYyA9PT0gJ2Jvb2xlYW4nKSB7IGNvbnRpbnVlIH1cbiAgICBsYXN0SW5kZXggPSByZXMubGVuZ3RoIC0gMTtcbiAgICBsYXN0ID0gcmVzW2xhc3RJbmRleF07XG4gICAgLy8gIG5lc3RlZFxuICAgIGlmIChBcnJheS5pc0FycmF5KGMpKSB7XG4gICAgICBpZiAoYy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGMgPSBub3JtYWxpemVBcnJheUNoaWxkcmVuKGMsICgobmVzdGVkSW5kZXggfHwgJycpICsgXCJfXCIgKyBpKSk7XG4gICAgICAgIC8vIG1lcmdlIGFkamFjZW50IHRleHQgbm9kZXNcbiAgICAgICAgaWYgKGlzVGV4dE5vZGUoY1swXSkgJiYgaXNUZXh0Tm9kZShsYXN0KSkge1xuICAgICAgICAgIHJlc1tsYXN0SW5kZXhdID0gY3JlYXRlVGV4dFZOb2RlKGxhc3QudGV4dCArIChjWzBdKS50ZXh0KTtcbiAgICAgICAgICBjLnNoaWZ0KCk7XG4gICAgICAgIH1cbiAgICAgICAgcmVzLnB1c2guYXBwbHkocmVzLCBjKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzUHJpbWl0aXZlKGMpKSB7XG4gICAgICBpZiAoaXNUZXh0Tm9kZShsYXN0KSkge1xuICAgICAgICAvLyBtZXJnZSBhZGphY2VudCB0ZXh0IG5vZGVzXG4gICAgICAgIC8vIHRoaXMgaXMgbmVjZXNzYXJ5IGZvciBTU1IgaHlkcmF0aW9uIGJlY2F1c2UgdGV4dCBub2RlcyBhcmVcbiAgICAgICAgLy8gZXNzZW50aWFsbHkgbWVyZ2VkIHdoZW4gcmVuZGVyZWQgdG8gSFRNTCBzdHJpbmdzXG4gICAgICAgIHJlc1tsYXN0SW5kZXhdID0gY3JlYXRlVGV4dFZOb2RlKGxhc3QudGV4dCArIGMpO1xuICAgICAgfSBlbHNlIGlmIChjICE9PSAnJykge1xuICAgICAgICAvLyBjb252ZXJ0IHByaW1pdGl2ZSB0byB2bm9kZVxuICAgICAgICByZXMucHVzaChjcmVhdGVUZXh0Vk5vZGUoYykpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoaXNUZXh0Tm9kZShjKSAmJiBpc1RleHROb2RlKGxhc3QpKSB7XG4gICAgICAgIC8vIG1lcmdlIGFkamFjZW50IHRleHQgbm9kZXNcbiAgICAgICAgcmVzW2xhc3RJbmRleF0gPSBjcmVhdGVUZXh0Vk5vZGUobGFzdC50ZXh0ICsgYy50ZXh0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGRlZmF1bHQga2V5IGZvciBuZXN0ZWQgYXJyYXkgY2hpbGRyZW4gKGxpa2VseSBnZW5lcmF0ZWQgYnkgdi1mb3IpXG4gICAgICAgIGlmIChpc1RydWUoY2hpbGRyZW4uX2lzVkxpc3QpICYmXG4gICAgICAgICAgaXNEZWYoYy50YWcpICYmXG4gICAgICAgICAgaXNVbmRlZihjLmtleSkgJiZcbiAgICAgICAgICBpc0RlZihuZXN0ZWRJbmRleCkpIHtcbiAgICAgICAgICBjLmtleSA9IFwiX192bGlzdFwiICsgbmVzdGVkSW5kZXggKyBcIl9cIiArIGkgKyBcIl9fXCI7XG4gICAgICAgIH1cbiAgICAgICAgcmVzLnB1c2goYyk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRQcm92aWRlICh2bSkge1xuICB2YXIgcHJvdmlkZSA9IHZtLiRvcHRpb25zLnByb3ZpZGU7XG4gIGlmIChwcm92aWRlKSB7XG4gICAgdm0uX3Byb3ZpZGVkID0gdHlwZW9mIHByb3ZpZGUgPT09ICdmdW5jdGlvbidcbiAgICAgID8gcHJvdmlkZS5jYWxsKHZtKVxuICAgICAgOiBwcm92aWRlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluaXRJbmplY3Rpb25zICh2bSkge1xuICB2YXIgcmVzdWx0ID0gcmVzb2x2ZUluamVjdCh2bS4kb3B0aW9ucy5pbmplY3QsIHZtKTtcbiAgaWYgKHJlc3VsdCkge1xuICAgIHRvZ2dsZU9ic2VydmluZyhmYWxzZSk7XG4gICAgT2JqZWN0LmtleXMocmVzdWx0KS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBkZWZpbmVSZWFjdGl2ZSQkMSh2bSwga2V5LCByZXN1bHRba2V5XSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICBcIkF2b2lkIG11dGF0aW5nIGFuIGluamVjdGVkIHZhbHVlIGRpcmVjdGx5IHNpbmNlIHRoZSBjaGFuZ2VzIHdpbGwgYmUgXCIgK1xuICAgICAgICAgICAgXCJvdmVyd3JpdHRlbiB3aGVuZXZlciB0aGUgcHJvdmlkZWQgY29tcG9uZW50IHJlLXJlbmRlcnMuIFwiICtcbiAgICAgICAgICAgIFwiaW5qZWN0aW9uIGJlaW5nIG11dGF0ZWQ6IFxcXCJcIiArIGtleSArIFwiXFxcIlwiLFxuICAgICAgICAgICAgdm1cbiAgICAgICAgICApO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRlZmluZVJlYWN0aXZlJCQxKHZtLCBrZXksIHJlc3VsdFtrZXldKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB0b2dnbGVPYnNlcnZpbmcodHJ1ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVzb2x2ZUluamVjdCAoaW5qZWN0LCB2bSkge1xuICBpZiAoaW5qZWN0KSB7XG4gICAgLy8gaW5qZWN0IGlzIDphbnkgYmVjYXVzZSBmbG93IGlzIG5vdCBzbWFydCBlbm91Z2ggdG8gZmlndXJlIG91dCBjYWNoZWRcbiAgICB2YXIgcmVzdWx0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB2YXIga2V5cyA9IGhhc1N5bWJvbFxuICAgICAgPyBSZWZsZWN0Lm93bktleXMoaW5qZWN0KVxuICAgICAgOiBPYmplY3Qua2V5cyhpbmplY3QpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICAgIC8vICM2NTc0IGluIGNhc2UgdGhlIGluamVjdCBvYmplY3QgaXMgb2JzZXJ2ZWQuLi5cbiAgICAgIGlmIChrZXkgPT09ICdfX29iX18nKSB7IGNvbnRpbnVlIH1cbiAgICAgIHZhciBwcm92aWRlS2V5ID0gaW5qZWN0W2tleV0uZnJvbTtcbiAgICAgIHZhciBzb3VyY2UgPSB2bTtcbiAgICAgIHdoaWxlIChzb3VyY2UpIHtcbiAgICAgICAgaWYgKHNvdXJjZS5fcHJvdmlkZWQgJiYgaGFzT3duKHNvdXJjZS5fcHJvdmlkZWQsIHByb3ZpZGVLZXkpKSB7XG4gICAgICAgICAgcmVzdWx0W2tleV0gPSBzb3VyY2UuX3Byb3ZpZGVkW3Byb3ZpZGVLZXldO1xuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgICAgc291cmNlID0gc291cmNlLiRwYXJlbnQ7XG4gICAgICB9XG4gICAgICBpZiAoIXNvdXJjZSkge1xuICAgICAgICBpZiAoJ2RlZmF1bHQnIGluIGluamVjdFtrZXldKSB7XG4gICAgICAgICAgdmFyIHByb3ZpZGVEZWZhdWx0ID0gaW5qZWN0W2tleV0uZGVmYXVsdDtcbiAgICAgICAgICByZXN1bHRba2V5XSA9IHR5cGVvZiBwcm92aWRlRGVmYXVsdCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgPyBwcm92aWRlRGVmYXVsdC5jYWxsKHZtKVxuICAgICAgICAgICAgOiBwcm92aWRlRGVmYXVsdDtcbiAgICAgICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgd2FybigoXCJJbmplY3Rpb24gXFxcIlwiICsga2V5ICsgXCJcXFwiIG5vdCBmb3VuZFwiKSwgdm0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHRcbiAgfVxufVxuXG4vKiAgKi9cblxuXG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIHJlc29sdmluZyByYXcgY2hpbGRyZW4gVk5vZGVzIGludG8gYSBzbG90IG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gcmVzb2x2ZVNsb3RzIChcbiAgY2hpbGRyZW4sXG4gIGNvbnRleHRcbikge1xuICBpZiAoIWNoaWxkcmVuIHx8ICFjaGlsZHJlbi5sZW5ndGgpIHtcbiAgICByZXR1cm4ge31cbiAgfVxuICB2YXIgc2xvdHMgPSB7fTtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICB2YXIgY2hpbGQgPSBjaGlsZHJlbltpXTtcbiAgICB2YXIgZGF0YSA9IGNoaWxkLmRhdGE7XG4gICAgLy8gcmVtb3ZlIHNsb3QgYXR0cmlidXRlIGlmIHRoZSBub2RlIGlzIHJlc29sdmVkIGFzIGEgVnVlIHNsb3Qgbm9kZVxuICAgIGlmIChkYXRhICYmIGRhdGEuYXR0cnMgJiYgZGF0YS5hdHRycy5zbG90KSB7XG4gICAgICBkZWxldGUgZGF0YS5hdHRycy5zbG90O1xuICAgIH1cbiAgICAvLyBuYW1lZCBzbG90cyBzaG91bGQgb25seSBiZSByZXNwZWN0ZWQgaWYgdGhlIHZub2RlIHdhcyByZW5kZXJlZCBpbiB0aGVcbiAgICAvLyBzYW1lIGNvbnRleHQuXG4gICAgaWYgKChjaGlsZC5jb250ZXh0ID09PSBjb250ZXh0IHx8IGNoaWxkLmZuQ29udGV4dCA9PT0gY29udGV4dCkgJiZcbiAgICAgIGRhdGEgJiYgZGF0YS5zbG90ICE9IG51bGxcbiAgICApIHtcbiAgICAgIHZhciBuYW1lID0gZGF0YS5zbG90O1xuICAgICAgdmFyIHNsb3QgPSAoc2xvdHNbbmFtZV0gfHwgKHNsb3RzW25hbWVdID0gW10pKTtcbiAgICAgIGlmIChjaGlsZC50YWcgPT09ICd0ZW1wbGF0ZScpIHtcbiAgICAgICAgc2xvdC5wdXNoLmFwcGx5KHNsb3QsIGNoaWxkLmNoaWxkcmVuIHx8IFtdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNsb3QucHVzaChjaGlsZCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIChzbG90cy5kZWZhdWx0IHx8IChzbG90cy5kZWZhdWx0ID0gW10pKS5wdXNoKGNoaWxkKTtcbiAgICB9XG4gIH1cbiAgLy8gaWdub3JlIHNsb3RzIHRoYXQgY29udGFpbnMgb25seSB3aGl0ZXNwYWNlXG4gIGZvciAodmFyIG5hbWUkMSBpbiBzbG90cykge1xuICAgIGlmIChzbG90c1tuYW1lJDFdLmV2ZXJ5KGlzV2hpdGVzcGFjZSkpIHtcbiAgICAgIGRlbGV0ZSBzbG90c1tuYW1lJDFdO1xuICAgIH1cbiAgfVxuICByZXR1cm4gc2xvdHNcbn1cblxuZnVuY3Rpb24gaXNXaGl0ZXNwYWNlIChub2RlKSB7XG4gIHJldHVybiAobm9kZS5pc0NvbW1lbnQgJiYgIW5vZGUuYXN5bmNGYWN0b3J5KSB8fCBub2RlLnRleHQgPT09ICcgJ1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaXNBc3luY1BsYWNlaG9sZGVyIChub2RlKSB7XG4gIHJldHVybiBub2RlLmlzQ29tbWVudCAmJiBub2RlLmFzeW5jRmFjdG9yeVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gbm9ybWFsaXplU2NvcGVkU2xvdHMgKFxuICBzbG90cyxcbiAgbm9ybWFsU2xvdHMsXG4gIHByZXZTbG90c1xuKSB7XG4gIHZhciByZXM7XG4gIHZhciBoYXNOb3JtYWxTbG90cyA9IE9iamVjdC5rZXlzKG5vcm1hbFNsb3RzKS5sZW5ndGggPiAwO1xuICB2YXIgaXNTdGFibGUgPSBzbG90cyA/ICEhc2xvdHMuJHN0YWJsZSA6ICFoYXNOb3JtYWxTbG90cztcbiAgdmFyIGtleSA9IHNsb3RzICYmIHNsb3RzLiRrZXk7XG4gIGlmICghc2xvdHMpIHtcbiAgICByZXMgPSB7fTtcbiAgfSBlbHNlIGlmIChzbG90cy5fbm9ybWFsaXplZCkge1xuICAgIC8vIGZhc3QgcGF0aCAxOiBjaGlsZCBjb21wb25lbnQgcmUtcmVuZGVyIG9ubHksIHBhcmVudCBkaWQgbm90IGNoYW5nZVxuICAgIHJldHVybiBzbG90cy5fbm9ybWFsaXplZFxuICB9IGVsc2UgaWYgKFxuICAgIGlzU3RhYmxlICYmXG4gICAgcHJldlNsb3RzICYmXG4gICAgcHJldlNsb3RzICE9PSBlbXB0eU9iamVjdCAmJlxuICAgIGtleSA9PT0gcHJldlNsb3RzLiRrZXkgJiZcbiAgICAhaGFzTm9ybWFsU2xvdHMgJiZcbiAgICAhcHJldlNsb3RzLiRoYXNOb3JtYWxcbiAgKSB7XG4gICAgLy8gZmFzdCBwYXRoIDI6IHN0YWJsZSBzY29wZWQgc2xvdHMgdy8gbm8gbm9ybWFsIHNsb3RzIHRvIHByb3h5LFxuICAgIC8vIG9ubHkgbmVlZCB0byBub3JtYWxpemUgb25jZVxuICAgIHJldHVybiBwcmV2U2xvdHNcbiAgfSBlbHNlIHtcbiAgICByZXMgPSB7fTtcbiAgICBmb3IgKHZhciBrZXkkMSBpbiBzbG90cykge1xuICAgICAgaWYgKHNsb3RzW2tleSQxXSAmJiBrZXkkMVswXSAhPT0gJyQnKSB7XG4gICAgICAgIHJlc1trZXkkMV0gPSBub3JtYWxpemVTY29wZWRTbG90KG5vcm1hbFNsb3RzLCBrZXkkMSwgc2xvdHNba2V5JDFdKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLy8gZXhwb3NlIG5vcm1hbCBzbG90cyBvbiBzY29wZWRTbG90c1xuICBmb3IgKHZhciBrZXkkMiBpbiBub3JtYWxTbG90cykge1xuICAgIGlmICghKGtleSQyIGluIHJlcykpIHtcbiAgICAgIHJlc1trZXkkMl0gPSBwcm94eU5vcm1hbFNsb3Qobm9ybWFsU2xvdHMsIGtleSQyKTtcbiAgICB9XG4gIH1cbiAgLy8gYXZvcmlheiBzZWVtcyB0byBtb2NrIGEgbm9uLWV4dGVuc2libGUgJHNjb3BlZFNsb3RzIG9iamVjdFxuICAvLyBhbmQgd2hlbiB0aGF0IGlzIHBhc3NlZCBkb3duIHRoaXMgd291bGQgY2F1c2UgYW4gZXJyb3JcbiAgaWYgKHNsb3RzICYmIE9iamVjdC5pc0V4dGVuc2libGUoc2xvdHMpKSB7XG4gICAgKHNsb3RzKS5fbm9ybWFsaXplZCA9IHJlcztcbiAgfVxuICBkZWYocmVzLCAnJHN0YWJsZScsIGlzU3RhYmxlKTtcbiAgZGVmKHJlcywgJyRrZXknLCBrZXkpO1xuICBkZWYocmVzLCAnJGhhc05vcm1hbCcsIGhhc05vcm1hbFNsb3RzKTtcbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBub3JtYWxpemVTY29wZWRTbG90KG5vcm1hbFNsb3RzLCBrZXksIGZuKSB7XG4gIHZhciBub3JtYWxpemVkID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciByZXMgPSBhcmd1bWVudHMubGVuZ3RoID8gZm4uYXBwbHkobnVsbCwgYXJndW1lbnRzKSA6IGZuKHt9KTtcbiAgICByZXMgPSByZXMgJiYgdHlwZW9mIHJlcyA9PT0gJ29iamVjdCcgJiYgIUFycmF5LmlzQXJyYXkocmVzKVxuICAgICAgPyBbcmVzXSAvLyBzaW5nbGUgdm5vZGVcbiAgICAgIDogbm9ybWFsaXplQ2hpbGRyZW4ocmVzKTtcbiAgICB2YXIgdm5vZGUgPSByZXMgJiYgcmVzWzBdO1xuICAgIHJldHVybiByZXMgJiYgKFxuICAgICAgIXZub2RlIHx8XG4gICAgICAocmVzLmxlbmd0aCA9PT0gMSAmJiB2bm9kZS5pc0NvbW1lbnQgJiYgIWlzQXN5bmNQbGFjZWhvbGRlcih2bm9kZSkpIC8vICM5NjU4LCAjMTAzOTFcbiAgICApID8gdW5kZWZpbmVkXG4gICAgICA6IHJlc1xuICB9O1xuICAvLyB0aGlzIGlzIGEgc2xvdCB1c2luZyB0aGUgbmV3IHYtc2xvdCBzeW50YXggd2l0aG91dCBzY29wZS4gYWx0aG91Z2ggaXQgaXNcbiAgLy8gY29tcGlsZWQgYXMgYSBzY29wZWQgc2xvdCwgcmVuZGVyIGZuIHVzZXJzIHdvdWxkIGV4cGVjdCBpdCB0byBiZSBwcmVzZW50XG4gIC8vIG9uIHRoaXMuJHNsb3RzIGJlY2F1c2UgdGhlIHVzYWdlIGlzIHNlbWFudGljYWxseSBhIG5vcm1hbCBzbG90LlxuICBpZiAoZm4ucHJveHkpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobm9ybWFsU2xvdHMsIGtleSwge1xuICAgICAgZ2V0OiBub3JtYWxpemVkLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9XG4gIHJldHVybiBub3JtYWxpemVkXG59XG5cbmZ1bmN0aW9uIHByb3h5Tm9ybWFsU2xvdChzbG90cywga2V5KSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7IHJldHVybiBzbG90c1trZXldOyB9XG59XG5cbi8qICAqL1xuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciByZW5kZXJpbmcgdi1mb3IgbGlzdHMuXG4gKi9cbmZ1bmN0aW9uIHJlbmRlckxpc3QgKFxuICB2YWwsXG4gIHJlbmRlclxuKSB7XG4gIHZhciByZXQsIGksIGwsIGtleXMsIGtleTtcbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsKSB8fCB0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgIHJldCA9IG5ldyBBcnJheSh2YWwubGVuZ3RoKTtcbiAgICBmb3IgKGkgPSAwLCBsID0gdmFsLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgcmV0W2ldID0gcmVuZGVyKHZhbFtpXSwgaSk7XG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgcmV0ID0gbmV3IEFycmF5KHZhbCk7XG4gICAgZm9yIChpID0gMDsgaSA8IHZhbDsgaSsrKSB7XG4gICAgICByZXRbaV0gPSByZW5kZXIoaSArIDEsIGkpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc09iamVjdCh2YWwpKSB7XG4gICAgaWYgKGhhc1N5bWJvbCAmJiB2YWxbU3ltYm9sLml0ZXJhdG9yXSkge1xuICAgICAgcmV0ID0gW107XG4gICAgICB2YXIgaXRlcmF0b3IgPSB2YWxbU3ltYm9sLml0ZXJhdG9yXSgpO1xuICAgICAgdmFyIHJlc3VsdCA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgIHdoaWxlICghcmVzdWx0LmRvbmUpIHtcbiAgICAgICAgcmV0LnB1c2gocmVuZGVyKHJlc3VsdC52YWx1ZSwgcmV0Lmxlbmd0aCkpO1xuICAgICAgICByZXN1bHQgPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGtleXMgPSBPYmplY3Qua2V5cyh2YWwpO1xuICAgICAgcmV0ID0gbmV3IEFycmF5KGtleXMubGVuZ3RoKTtcbiAgICAgIGZvciAoaSA9IDAsIGwgPSBrZXlzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICBrZXkgPSBrZXlzW2ldO1xuICAgICAgICByZXRbaV0gPSByZW5kZXIodmFsW2tleV0sIGtleSwgaSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmICghaXNEZWYocmV0KSkge1xuICAgIHJldCA9IFtdO1xuICB9XG4gIChyZXQpLl9pc1ZMaXN0ID0gdHJ1ZTtcbiAgcmV0dXJuIHJldFxufVxuXG4vKiAgKi9cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgcmVuZGVyaW5nIDxzbG90PlxuICovXG5mdW5jdGlvbiByZW5kZXJTbG90IChcbiAgbmFtZSxcbiAgZmFsbGJhY2tSZW5kZXIsXG4gIHByb3BzLFxuICBiaW5kT2JqZWN0XG4pIHtcbiAgdmFyIHNjb3BlZFNsb3RGbiA9IHRoaXMuJHNjb3BlZFNsb3RzW25hbWVdO1xuICB2YXIgbm9kZXM7XG4gIGlmIChzY29wZWRTbG90Rm4pIHtcbiAgICAvLyBzY29wZWQgc2xvdFxuICAgIHByb3BzID0gcHJvcHMgfHwge307XG4gICAgaWYgKGJpbmRPYmplY3QpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFpc09iamVjdChiaW5kT2JqZWN0KSkge1xuICAgICAgICB3YXJuKCdzbG90IHYtYmluZCB3aXRob3V0IGFyZ3VtZW50IGV4cGVjdHMgYW4gT2JqZWN0JywgdGhpcyk7XG4gICAgICB9XG4gICAgICBwcm9wcyA9IGV4dGVuZChleHRlbmQoe30sIGJpbmRPYmplY3QpLCBwcm9wcyk7XG4gICAgfVxuICAgIG5vZGVzID1cbiAgICAgIHNjb3BlZFNsb3RGbihwcm9wcykgfHxcbiAgICAgICh0eXBlb2YgZmFsbGJhY2tSZW5kZXIgPT09ICdmdW5jdGlvbicgPyBmYWxsYmFja1JlbmRlcigpIDogZmFsbGJhY2tSZW5kZXIpO1xuICB9IGVsc2Uge1xuICAgIG5vZGVzID1cbiAgICAgIHRoaXMuJHNsb3RzW25hbWVdIHx8XG4gICAgICAodHlwZW9mIGZhbGxiYWNrUmVuZGVyID09PSAnZnVuY3Rpb24nID8gZmFsbGJhY2tSZW5kZXIoKSA6IGZhbGxiYWNrUmVuZGVyKTtcbiAgfVxuXG4gIHZhciB0YXJnZXQgPSBwcm9wcyAmJiBwcm9wcy5zbG90O1xuICBpZiAodGFyZ2V0KSB7XG4gICAgcmV0dXJuIHRoaXMuJGNyZWF0ZUVsZW1lbnQoJ3RlbXBsYXRlJywgeyBzbG90OiB0YXJnZXQgfSwgbm9kZXMpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG5vZGVzXG4gIH1cbn1cblxuLyogICovXG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIHJlc29sdmluZyBmaWx0ZXJzXG4gKi9cbmZ1bmN0aW9uIHJlc29sdmVGaWx0ZXIgKGlkKSB7XG4gIHJldHVybiByZXNvbHZlQXNzZXQodGhpcy4kb3B0aW9ucywgJ2ZpbHRlcnMnLCBpZCwgdHJ1ZSkgfHwgaWRlbnRpdHlcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGlzS2V5Tm90TWF0Y2ggKGV4cGVjdCwgYWN0dWFsKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGV4cGVjdCkpIHtcbiAgICByZXR1cm4gZXhwZWN0LmluZGV4T2YoYWN0dWFsKSA9PT0gLTFcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZXhwZWN0ICE9PSBhY3R1YWxcbiAgfVxufVxuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciBjaGVja2luZyBrZXlDb2RlcyBmcm9tIGNvbmZpZy5cbiAqIGV4cG9zZWQgYXMgVnVlLnByb3RvdHlwZS5fa1xuICogcGFzc2luZyBpbiBldmVudEtleU5hbWUgYXMgbGFzdCBhcmd1bWVudCBzZXBhcmF0ZWx5IGZvciBiYWNrd2FyZHMgY29tcGF0XG4gKi9cbmZ1bmN0aW9uIGNoZWNrS2V5Q29kZXMgKFxuICBldmVudEtleUNvZGUsXG4gIGtleSxcbiAgYnVpbHRJbktleUNvZGUsXG4gIGV2ZW50S2V5TmFtZSxcbiAgYnVpbHRJbktleU5hbWVcbikge1xuICB2YXIgbWFwcGVkS2V5Q29kZSA9IGNvbmZpZy5rZXlDb2Rlc1trZXldIHx8IGJ1aWx0SW5LZXlDb2RlO1xuICBpZiAoYnVpbHRJbktleU5hbWUgJiYgZXZlbnRLZXlOYW1lICYmICFjb25maWcua2V5Q29kZXNba2V5XSkge1xuICAgIHJldHVybiBpc0tleU5vdE1hdGNoKGJ1aWx0SW5LZXlOYW1lLCBldmVudEtleU5hbWUpXG4gIH0gZWxzZSBpZiAobWFwcGVkS2V5Q29kZSkge1xuICAgIHJldHVybiBpc0tleU5vdE1hdGNoKG1hcHBlZEtleUNvZGUsIGV2ZW50S2V5Q29kZSlcbiAgfSBlbHNlIGlmIChldmVudEtleU5hbWUpIHtcbiAgICByZXR1cm4gaHlwaGVuYXRlKGV2ZW50S2V5TmFtZSkgIT09IGtleVxuICB9XG4gIHJldHVybiBldmVudEtleUNvZGUgPT09IHVuZGVmaW5lZFxufVxuXG4vKiAgKi9cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgbWVyZ2luZyB2LWJpbmQ9XCJvYmplY3RcIiBpbnRvIGEgVk5vZGUncyBkYXRhLlxuICovXG5mdW5jdGlvbiBiaW5kT2JqZWN0UHJvcHMgKFxuICBkYXRhLFxuICB0YWcsXG4gIHZhbHVlLFxuICBhc1Byb3AsXG4gIGlzU3luY1xuKSB7XG4gIGlmICh2YWx1ZSkge1xuICAgIGlmICghaXNPYmplY3QodmFsdWUpKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAgICd2LWJpbmQgd2l0aG91dCBhcmd1bWVudCBleHBlY3RzIGFuIE9iamVjdCBvciBBcnJheSB2YWx1ZScsXG4gICAgICAgIHRoaXNcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICB2YWx1ZSA9IHRvT2JqZWN0KHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHZhciBoYXNoO1xuICAgICAgdmFyIGxvb3AgPSBmdW5jdGlvbiAoIGtleSApIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIGtleSA9PT0gJ2NsYXNzJyB8fFxuICAgICAgICAgIGtleSA9PT0gJ3N0eWxlJyB8fFxuICAgICAgICAgIGlzUmVzZXJ2ZWRBdHRyaWJ1dGUoa2V5KVxuICAgICAgICApIHtcbiAgICAgICAgICBoYXNoID0gZGF0YTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgdHlwZSA9IGRhdGEuYXR0cnMgJiYgZGF0YS5hdHRycy50eXBlO1xuICAgICAgICAgIGhhc2ggPSBhc1Byb3AgfHwgY29uZmlnLm11c3RVc2VQcm9wKHRhZywgdHlwZSwga2V5KVxuICAgICAgICAgICAgPyBkYXRhLmRvbVByb3BzIHx8IChkYXRhLmRvbVByb3BzID0ge30pXG4gICAgICAgICAgICA6IGRhdGEuYXR0cnMgfHwgKGRhdGEuYXR0cnMgPSB7fSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNhbWVsaXplZEtleSA9IGNhbWVsaXplKGtleSk7XG4gICAgICAgIHZhciBoeXBoZW5hdGVkS2V5ID0gaHlwaGVuYXRlKGtleSk7XG4gICAgICAgIGlmICghKGNhbWVsaXplZEtleSBpbiBoYXNoKSAmJiAhKGh5cGhlbmF0ZWRLZXkgaW4gaGFzaCkpIHtcbiAgICAgICAgICBoYXNoW2tleV0gPSB2YWx1ZVtrZXldO1xuXG4gICAgICAgICAgaWYgKGlzU3luYykge1xuICAgICAgICAgICAgdmFyIG9uID0gZGF0YS5vbiB8fCAoZGF0YS5vbiA9IHt9KTtcbiAgICAgICAgICAgIG9uWyhcInVwZGF0ZTpcIiArIGtleSldID0gZnVuY3Rpb24gKCRldmVudCkge1xuICAgICAgICAgICAgICB2YWx1ZVtrZXldID0gJGV2ZW50O1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiB2YWx1ZSkgbG9vcCgga2V5ICk7XG4gICAgfVxuICB9XG4gIHJldHVybiBkYXRhXG59XG5cbi8qICAqL1xuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciByZW5kZXJpbmcgc3RhdGljIHRyZWVzLlxuICovXG5mdW5jdGlvbiByZW5kZXJTdGF0aWMgKFxuICBpbmRleCxcbiAgaXNJbkZvclxuKSB7XG4gIHZhciBjYWNoZWQgPSB0aGlzLl9zdGF0aWNUcmVlcyB8fCAodGhpcy5fc3RhdGljVHJlZXMgPSBbXSk7XG4gIHZhciB0cmVlID0gY2FjaGVkW2luZGV4XTtcbiAgLy8gaWYgaGFzIGFscmVhZHktcmVuZGVyZWQgc3RhdGljIHRyZWUgYW5kIG5vdCBpbnNpZGUgdi1mb3IsXG4gIC8vIHdlIGNhbiByZXVzZSB0aGUgc2FtZSB0cmVlLlxuICBpZiAodHJlZSAmJiAhaXNJbkZvcikge1xuICAgIHJldHVybiB0cmVlXG4gIH1cbiAgLy8gb3RoZXJ3aXNlLCByZW5kZXIgYSBmcmVzaCB0cmVlLlxuICB0cmVlID0gY2FjaGVkW2luZGV4XSA9IHRoaXMuJG9wdGlvbnMuc3RhdGljUmVuZGVyRm5zW2luZGV4XS5jYWxsKFxuICAgIHRoaXMuX3JlbmRlclByb3h5LFxuICAgIG51bGwsXG4gICAgdGhpcyAvLyBmb3IgcmVuZGVyIGZucyBnZW5lcmF0ZWQgZm9yIGZ1bmN0aW9uYWwgY29tcG9uZW50IHRlbXBsYXRlc1xuICApO1xuICBtYXJrU3RhdGljKHRyZWUsIChcIl9fc3RhdGljX19cIiArIGluZGV4KSwgZmFsc2UpO1xuICByZXR1cm4gdHJlZVxufVxuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciB2LW9uY2UuXG4gKiBFZmZlY3RpdmVseSBpdCBtZWFucyBtYXJraW5nIHRoZSBub2RlIGFzIHN0YXRpYyB3aXRoIGEgdW5pcXVlIGtleS5cbiAqL1xuZnVuY3Rpb24gbWFya09uY2UgKFxuICB0cmVlLFxuICBpbmRleCxcbiAga2V5XG4pIHtcbiAgbWFya1N0YXRpYyh0cmVlLCAoXCJfX29uY2VfX1wiICsgaW5kZXggKyAoa2V5ID8gKFwiX1wiICsga2V5KSA6IFwiXCIpKSwgdHJ1ZSk7XG4gIHJldHVybiB0cmVlXG59XG5cbmZ1bmN0aW9uIG1hcmtTdGF0aWMgKFxuICB0cmVlLFxuICBrZXksXG4gIGlzT25jZVxuKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KHRyZWUpKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0cmVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAodHJlZVtpXSAmJiB0eXBlb2YgdHJlZVtpXSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgbWFya1N0YXRpY05vZGUodHJlZVtpXSwgKGtleSArIFwiX1wiICsgaSksIGlzT25jZSk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIG1hcmtTdGF0aWNOb2RlKHRyZWUsIGtleSwgaXNPbmNlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBtYXJrU3RhdGljTm9kZSAobm9kZSwga2V5LCBpc09uY2UpIHtcbiAgbm9kZS5pc1N0YXRpYyA9IHRydWU7XG4gIG5vZGUua2V5ID0ga2V5O1xuICBub2RlLmlzT25jZSA9IGlzT25jZTtcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGJpbmRPYmplY3RMaXN0ZW5lcnMgKGRhdGEsIHZhbHVlKSB7XG4gIGlmICh2YWx1ZSkge1xuICAgIGlmICghaXNQbGFpbk9iamVjdCh2YWx1ZSkpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgJ3Ytb24gd2l0aG91dCBhcmd1bWVudCBleHBlY3RzIGFuIE9iamVjdCB2YWx1ZScsXG4gICAgICAgIHRoaXNcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBvbiA9IGRhdGEub24gPSBkYXRhLm9uID8gZXh0ZW5kKHt9LCBkYXRhLm9uKSA6IHt9O1xuICAgICAgZm9yICh2YXIga2V5IGluIHZhbHVlKSB7XG4gICAgICAgIHZhciBleGlzdGluZyA9IG9uW2tleV07XG4gICAgICAgIHZhciBvdXJzID0gdmFsdWVba2V5XTtcbiAgICAgICAgb25ba2V5XSA9IGV4aXN0aW5nID8gW10uY29uY2F0KGV4aXN0aW5nLCBvdXJzKSA6IG91cnM7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBkYXRhXG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiByZXNvbHZlU2NvcGVkU2xvdHMgKFxuICBmbnMsIC8vIHNlZSBmbG93L3Zub2RlXG4gIHJlcyxcbiAgLy8gdGhlIGZvbGxvd2luZyBhcmUgYWRkZWQgaW4gMi42XG4gIGhhc0R5bmFtaWNLZXlzLFxuICBjb250ZW50SGFzaEtleVxuKSB7XG4gIHJlcyA9IHJlcyB8fCB7ICRzdGFibGU6ICFoYXNEeW5hbWljS2V5cyB9O1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGZucy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzbG90ID0gZm5zW2ldO1xuICAgIGlmIChBcnJheS5pc0FycmF5KHNsb3QpKSB7XG4gICAgICByZXNvbHZlU2NvcGVkU2xvdHMoc2xvdCwgcmVzLCBoYXNEeW5hbWljS2V5cyk7XG4gICAgfSBlbHNlIGlmIChzbG90KSB7XG4gICAgICAvLyBtYXJrZXIgZm9yIHJldmVyc2UgcHJveHlpbmcgdi1zbG90IHdpdGhvdXQgc2NvcGUgb24gdGhpcy4kc2xvdHNcbiAgICAgIGlmIChzbG90LnByb3h5KSB7XG4gICAgICAgIHNsb3QuZm4ucHJveHkgPSB0cnVlO1xuICAgICAgfVxuICAgICAgcmVzW3Nsb3Qua2V5XSA9IHNsb3QuZm47XG4gICAgfVxuICB9XG4gIGlmIChjb250ZW50SGFzaEtleSkge1xuICAgIChyZXMpLiRrZXkgPSBjb250ZW50SGFzaEtleTtcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBiaW5kRHluYW1pY0tleXMgKGJhc2VPYmosIHZhbHVlcykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHZhbHVlcy5sZW5ndGg7IGkgKz0gMikge1xuICAgIHZhciBrZXkgPSB2YWx1ZXNbaV07XG4gICAgaWYgKHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnICYmIGtleSkge1xuICAgICAgYmFzZU9ialt2YWx1ZXNbaV1dID0gdmFsdWVzW2kgKyAxXTtcbiAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYga2V5ICE9PSAnJyAmJiBrZXkgIT09IG51bGwpIHtcbiAgICAgIC8vIG51bGwgaXMgYSBzcGVjaWFsIHZhbHVlIGZvciBleHBsaWNpdGx5IHJlbW92aW5nIGEgYmluZGluZ1xuICAgICAgd2FybihcbiAgICAgICAgKFwiSW52YWxpZCB2YWx1ZSBmb3IgZHluYW1pYyBkaXJlY3RpdmUgYXJndW1lbnQgKGV4cGVjdGVkIHN0cmluZyBvciBudWxsKTogXCIgKyBrZXkpLFxuICAgICAgICB0aGlzXG4gICAgICApO1xuICAgIH1cbiAgfVxuICByZXR1cm4gYmFzZU9ialxufVxuXG4vLyBoZWxwZXIgdG8gZHluYW1pY2FsbHkgYXBwZW5kIG1vZGlmaWVyIHJ1bnRpbWUgbWFya2VycyB0byBldmVudCBuYW1lcy5cbi8vIGVuc3VyZSBvbmx5IGFwcGVuZCB3aGVuIHZhbHVlIGlzIGFscmVhZHkgc3RyaW5nLCBvdGhlcndpc2UgaXQgd2lsbCBiZSBjYXN0XG4vLyB0byBzdHJpbmcgYW5kIGNhdXNlIHRoZSB0eXBlIGNoZWNrIHRvIG1pc3MuXG5mdW5jdGlvbiBwcmVwZW5kTW9kaWZpZXIgKHZhbHVlLCBzeW1ib2wpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgPyBzeW1ib2wgKyB2YWx1ZSA6IHZhbHVlXG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbnN0YWxsUmVuZGVySGVscGVycyAodGFyZ2V0KSB7XG4gIHRhcmdldC5fbyA9IG1hcmtPbmNlO1xuICB0YXJnZXQuX24gPSB0b051bWJlcjtcbiAgdGFyZ2V0Ll9zID0gdG9TdHJpbmc7XG4gIHRhcmdldC5fbCA9IHJlbmRlckxpc3Q7XG4gIHRhcmdldC5fdCA9IHJlbmRlclNsb3Q7XG4gIHRhcmdldC5fcSA9IGxvb3NlRXF1YWw7XG4gIHRhcmdldC5faSA9IGxvb3NlSW5kZXhPZjtcbiAgdGFyZ2V0Ll9tID0gcmVuZGVyU3RhdGljO1xuICB0YXJnZXQuX2YgPSByZXNvbHZlRmlsdGVyO1xuICB0YXJnZXQuX2sgPSBjaGVja0tleUNvZGVzO1xuICB0YXJnZXQuX2IgPSBiaW5kT2JqZWN0UHJvcHM7XG4gIHRhcmdldC5fdiA9IGNyZWF0ZVRleHRWTm9kZTtcbiAgdGFyZ2V0Ll9lID0gY3JlYXRlRW1wdHlWTm9kZTtcbiAgdGFyZ2V0Ll91ID0gcmVzb2x2ZVNjb3BlZFNsb3RzO1xuICB0YXJnZXQuX2cgPSBiaW5kT2JqZWN0TGlzdGVuZXJzO1xuICB0YXJnZXQuX2QgPSBiaW5kRHluYW1pY0tleXM7XG4gIHRhcmdldC5fcCA9IHByZXBlbmRNb2RpZmllcjtcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIEZ1bmN0aW9uYWxSZW5kZXJDb250ZXh0IChcbiAgZGF0YSxcbiAgcHJvcHMsXG4gIGNoaWxkcmVuLFxuICBwYXJlbnQsXG4gIEN0b3Jcbikge1xuICB2YXIgdGhpcyQxID0gdGhpcztcblxuICB2YXIgb3B0aW9ucyA9IEN0b3Iub3B0aW9ucztcbiAgLy8gZW5zdXJlIHRoZSBjcmVhdGVFbGVtZW50IGZ1bmN0aW9uIGluIGZ1bmN0aW9uYWwgY29tcG9uZW50c1xuICAvLyBnZXRzIGEgdW5pcXVlIGNvbnRleHQgLSB0aGlzIGlzIG5lY2Vzc2FyeSBmb3IgY29ycmVjdCBuYW1lZCBzbG90IGNoZWNrXG4gIHZhciBjb250ZXh0Vm07XG4gIGlmIChoYXNPd24ocGFyZW50LCAnX3VpZCcpKSB7XG4gICAgY29udGV4dFZtID0gT2JqZWN0LmNyZWF0ZShwYXJlbnQpO1xuICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgIGNvbnRleHRWbS5fb3JpZ2luYWwgPSBwYXJlbnQ7XG4gIH0gZWxzZSB7XG4gICAgLy8gdGhlIGNvbnRleHQgdm0gcGFzc2VkIGluIGlzIGEgZnVuY3Rpb25hbCBjb250ZXh0IGFzIHdlbGwuXG4gICAgLy8gaW4gdGhpcyBjYXNlIHdlIHdhbnQgdG8gbWFrZSBzdXJlIHdlIGFyZSBhYmxlIHRvIGdldCBhIGhvbGQgdG8gdGhlXG4gICAgLy8gcmVhbCBjb250ZXh0IGluc3RhbmNlLlxuICAgIGNvbnRleHRWbSA9IHBhcmVudDtcbiAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICBwYXJlbnQgPSBwYXJlbnQuX29yaWdpbmFsO1xuICB9XG4gIHZhciBpc0NvbXBpbGVkID0gaXNUcnVlKG9wdGlvbnMuX2NvbXBpbGVkKTtcbiAgdmFyIG5lZWROb3JtYWxpemF0aW9uID0gIWlzQ29tcGlsZWQ7XG5cbiAgdGhpcy5kYXRhID0gZGF0YTtcbiAgdGhpcy5wcm9wcyA9IHByb3BzO1xuICB0aGlzLmNoaWxkcmVuID0gY2hpbGRyZW47XG4gIHRoaXMucGFyZW50ID0gcGFyZW50O1xuICB0aGlzLmxpc3RlbmVycyA9IGRhdGEub24gfHwgZW1wdHlPYmplY3Q7XG4gIHRoaXMuaW5qZWN0aW9ucyA9IHJlc29sdmVJbmplY3Qob3B0aW9ucy5pbmplY3QsIHBhcmVudCk7XG4gIHRoaXMuc2xvdHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCF0aGlzJDEuJHNsb3RzKSB7XG4gICAgICBub3JtYWxpemVTY29wZWRTbG90cyhcbiAgICAgICAgZGF0YS5zY29wZWRTbG90cyxcbiAgICAgICAgdGhpcyQxLiRzbG90cyA9IHJlc29sdmVTbG90cyhjaGlsZHJlbiwgcGFyZW50KVxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMkMS4kc2xvdHNcbiAgfTtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ3Njb3BlZFNsb3RzJywgKHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0ICgpIHtcbiAgICAgIHJldHVybiBub3JtYWxpemVTY29wZWRTbG90cyhkYXRhLnNjb3BlZFNsb3RzLCB0aGlzLnNsb3RzKCkpXG4gICAgfVxuICB9KSk7XG5cbiAgLy8gc3VwcG9ydCBmb3IgY29tcGlsZWQgZnVuY3Rpb25hbCB0ZW1wbGF0ZVxuICBpZiAoaXNDb21waWxlZCkge1xuICAgIC8vIGV4cG9zaW5nICRvcHRpb25zIGZvciByZW5kZXJTdGF0aWMoKVxuICAgIHRoaXMuJG9wdGlvbnMgPSBvcHRpb25zO1xuICAgIC8vIHByZS1yZXNvbHZlIHNsb3RzIGZvciByZW5kZXJTbG90KClcbiAgICB0aGlzLiRzbG90cyA9IHRoaXMuc2xvdHMoKTtcbiAgICB0aGlzLiRzY29wZWRTbG90cyA9IG5vcm1hbGl6ZVNjb3BlZFNsb3RzKGRhdGEuc2NvcGVkU2xvdHMsIHRoaXMuJHNsb3RzKTtcbiAgfVxuXG4gIGlmIChvcHRpb25zLl9zY29wZUlkKSB7XG4gICAgdGhpcy5fYyA9IGZ1bmN0aW9uIChhLCBiLCBjLCBkKSB7XG4gICAgICB2YXIgdm5vZGUgPSBjcmVhdGVFbGVtZW50KGNvbnRleHRWbSwgYSwgYiwgYywgZCwgbmVlZE5vcm1hbGl6YXRpb24pO1xuICAgICAgaWYgKHZub2RlICYmICFBcnJheS5pc0FycmF5KHZub2RlKSkge1xuICAgICAgICB2bm9kZS5mblNjb3BlSWQgPSBvcHRpb25zLl9zY29wZUlkO1xuICAgICAgICB2bm9kZS5mbkNvbnRleHQgPSBwYXJlbnQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gdm5vZGVcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIHRoaXMuX2MgPSBmdW5jdGlvbiAoYSwgYiwgYywgZCkgeyByZXR1cm4gY3JlYXRlRWxlbWVudChjb250ZXh0Vm0sIGEsIGIsIGMsIGQsIG5lZWROb3JtYWxpemF0aW9uKTsgfTtcbiAgfVxufVxuXG5pbnN0YWxsUmVuZGVySGVscGVycyhGdW5jdGlvbmFsUmVuZGVyQ29udGV4dC5wcm90b3R5cGUpO1xuXG5mdW5jdGlvbiBjcmVhdGVGdW5jdGlvbmFsQ29tcG9uZW50IChcbiAgQ3RvcixcbiAgcHJvcHNEYXRhLFxuICBkYXRhLFxuICBjb250ZXh0Vm0sXG4gIGNoaWxkcmVuXG4pIHtcbiAgdmFyIG9wdGlvbnMgPSBDdG9yLm9wdGlvbnM7XG4gIHZhciBwcm9wcyA9IHt9O1xuICB2YXIgcHJvcE9wdGlvbnMgPSBvcHRpb25zLnByb3BzO1xuICBpZiAoaXNEZWYocHJvcE9wdGlvbnMpKSB7XG4gICAgZm9yICh2YXIga2V5IGluIHByb3BPcHRpb25zKSB7XG4gICAgICBwcm9wc1trZXldID0gdmFsaWRhdGVQcm9wKGtleSwgcHJvcE9wdGlvbnMsIHByb3BzRGF0YSB8fCBlbXB0eU9iamVjdCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChpc0RlZihkYXRhLmF0dHJzKSkgeyBtZXJnZVByb3BzKHByb3BzLCBkYXRhLmF0dHJzKTsgfVxuICAgIGlmIChpc0RlZihkYXRhLnByb3BzKSkgeyBtZXJnZVByb3BzKHByb3BzLCBkYXRhLnByb3BzKTsgfVxuICB9XG5cbiAgdmFyIHJlbmRlckNvbnRleHQgPSBuZXcgRnVuY3Rpb25hbFJlbmRlckNvbnRleHQoXG4gICAgZGF0YSxcbiAgICBwcm9wcyxcbiAgICBjaGlsZHJlbixcbiAgICBjb250ZXh0Vm0sXG4gICAgQ3RvclxuICApO1xuXG4gIHZhciB2bm9kZSA9IG9wdGlvbnMucmVuZGVyLmNhbGwobnVsbCwgcmVuZGVyQ29udGV4dC5fYywgcmVuZGVyQ29udGV4dCk7XG5cbiAgaWYgKHZub2RlIGluc3RhbmNlb2YgVk5vZGUpIHtcbiAgICByZXR1cm4gY2xvbmVBbmRNYXJrRnVuY3Rpb25hbFJlc3VsdCh2bm9kZSwgZGF0YSwgcmVuZGVyQ29udGV4dC5wYXJlbnQsIG9wdGlvbnMsIHJlbmRlckNvbnRleHQpXG4gIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheSh2bm9kZSkpIHtcbiAgICB2YXIgdm5vZGVzID0gbm9ybWFsaXplQ2hpbGRyZW4odm5vZGUpIHx8IFtdO1xuICAgIHZhciByZXMgPSBuZXcgQXJyYXkodm5vZGVzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2bm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHJlc1tpXSA9IGNsb25lQW5kTWFya0Z1bmN0aW9uYWxSZXN1bHQodm5vZGVzW2ldLCBkYXRhLCByZW5kZXJDb250ZXh0LnBhcmVudCwgb3B0aW9ucywgcmVuZGVyQ29udGV4dCk7XG4gICAgfVxuICAgIHJldHVybiByZXNcbiAgfVxufVxuXG5mdW5jdGlvbiBjbG9uZUFuZE1hcmtGdW5jdGlvbmFsUmVzdWx0ICh2bm9kZSwgZGF0YSwgY29udGV4dFZtLCBvcHRpb25zLCByZW5kZXJDb250ZXh0KSB7XG4gIC8vICM3ODE3IGNsb25lIG5vZGUgYmVmb3JlIHNldHRpbmcgZm5Db250ZXh0LCBvdGhlcndpc2UgaWYgdGhlIG5vZGUgaXMgcmV1c2VkXG4gIC8vIChlLmcuIGl0IHdhcyBmcm9tIGEgY2FjaGVkIG5vcm1hbCBzbG90KSB0aGUgZm5Db250ZXh0IGNhdXNlcyBuYW1lZCBzbG90c1xuICAvLyB0aGF0IHNob3VsZCBub3QgYmUgbWF0Y2hlZCB0byBtYXRjaC5cbiAgdmFyIGNsb25lID0gY2xvbmVWTm9kZSh2bm9kZSk7XG4gIGNsb25lLmZuQ29udGV4dCA9IGNvbnRleHRWbTtcbiAgY2xvbmUuZm5PcHRpb25zID0gb3B0aW9ucztcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAoY2xvbmUuZGV2dG9vbHNNZXRhID0gY2xvbmUuZGV2dG9vbHNNZXRhIHx8IHt9KS5yZW5kZXJDb250ZXh0ID0gcmVuZGVyQ29udGV4dDtcbiAgfVxuICBpZiAoZGF0YS5zbG90KSB7XG4gICAgKGNsb25lLmRhdGEgfHwgKGNsb25lLmRhdGEgPSB7fSkpLnNsb3QgPSBkYXRhLnNsb3Q7XG4gIH1cbiAgcmV0dXJuIGNsb25lXG59XG5cbmZ1bmN0aW9uIG1lcmdlUHJvcHMgKHRvLCBmcm9tKSB7XG4gIGZvciAodmFyIGtleSBpbiBmcm9tKSB7XG4gICAgdG9bY2FtZWxpemUoa2V5KV0gPSBmcm9tW2tleV07XG4gIH1cbn1cblxuLyogICovXG5cbi8qICAqL1xuXG4vKiAgKi9cblxuLyogICovXG5cbi8vIGlubGluZSBob29rcyB0byBiZSBpbnZva2VkIG9uIGNvbXBvbmVudCBWTm9kZXMgZHVyaW5nIHBhdGNoXG52YXIgY29tcG9uZW50Vk5vZGVIb29rcyA9IHtcbiAgaW5pdDogZnVuY3Rpb24gaW5pdCAodm5vZGUsIGh5ZHJhdGluZykge1xuICAgIGlmIChcbiAgICAgIHZub2RlLmNvbXBvbmVudEluc3RhbmNlICYmXG4gICAgICAhdm5vZGUuY29tcG9uZW50SW5zdGFuY2UuX2lzRGVzdHJveWVkICYmXG4gICAgICB2bm9kZS5kYXRhLmtlZXBBbGl2ZVxuICAgICkge1xuICAgICAgLy8ga2VwdC1hbGl2ZSBjb21wb25lbnRzLCB0cmVhdCBhcyBhIHBhdGNoXG4gICAgICB2YXIgbW91bnRlZE5vZGUgPSB2bm9kZTsgLy8gd29yayBhcm91bmQgZmxvd1xuICAgICAgY29tcG9uZW50Vk5vZGVIb29rcy5wcmVwYXRjaChtb3VudGVkTm9kZSwgbW91bnRlZE5vZGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgY2hpbGQgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSA9IGNyZWF0ZUNvbXBvbmVudEluc3RhbmNlRm9yVm5vZGUoXG4gICAgICAgIHZub2RlLFxuICAgICAgICBhY3RpdmVJbnN0YW5jZVxuICAgICAgKTtcbiAgICAgIGNoaWxkLiRtb3VudChoeWRyYXRpbmcgPyB2bm9kZS5lbG0gOiB1bmRlZmluZWQsIGh5ZHJhdGluZyk7XG4gICAgfVxuICB9LFxuXG4gIHByZXBhdGNoOiBmdW5jdGlvbiBwcmVwYXRjaCAob2xkVm5vZGUsIHZub2RlKSB7XG4gICAgdmFyIG9wdGlvbnMgPSB2bm9kZS5jb21wb25lbnRPcHRpb25zO1xuICAgIHZhciBjaGlsZCA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlID0gb2xkVm5vZGUuY29tcG9uZW50SW5zdGFuY2U7XG4gICAgdXBkYXRlQ2hpbGRDb21wb25lbnQoXG4gICAgICBjaGlsZCxcbiAgICAgIG9wdGlvbnMucHJvcHNEYXRhLCAvLyB1cGRhdGVkIHByb3BzXG4gICAgICBvcHRpb25zLmxpc3RlbmVycywgLy8gdXBkYXRlZCBsaXN0ZW5lcnNcbiAgICAgIHZub2RlLCAvLyBuZXcgcGFyZW50IHZub2RlXG4gICAgICBvcHRpb25zLmNoaWxkcmVuIC8vIG5ldyBjaGlsZHJlblxuICAgICk7XG4gIH0sXG5cbiAgaW5zZXJ0OiBmdW5jdGlvbiBpbnNlcnQgKHZub2RlKSB7XG4gICAgdmFyIGNvbnRleHQgPSB2bm9kZS5jb250ZXh0O1xuICAgIHZhciBjb21wb25lbnRJbnN0YW5jZSA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlO1xuICAgIGlmICghY29tcG9uZW50SW5zdGFuY2UuX2lzTW91bnRlZCkge1xuICAgICAgY29tcG9uZW50SW5zdGFuY2UuX2lzTW91bnRlZCA9IHRydWU7XG4gICAgICBjYWxsSG9vayhjb21wb25lbnRJbnN0YW5jZSwgJ21vdW50ZWQnKTtcbiAgICB9XG4gICAgaWYgKHZub2RlLmRhdGEua2VlcEFsaXZlKSB7XG4gICAgICBpZiAoY29udGV4dC5faXNNb3VudGVkKSB7XG4gICAgICAgIC8vIHZ1ZS1yb3V0ZXIjMTIxMlxuICAgICAgICAvLyBEdXJpbmcgdXBkYXRlcywgYSBrZXB0LWFsaXZlIGNvbXBvbmVudCdzIGNoaWxkIGNvbXBvbmVudHMgbWF5XG4gICAgICAgIC8vIGNoYW5nZSwgc28gZGlyZWN0bHkgd2Fsa2luZyB0aGUgdHJlZSBoZXJlIG1heSBjYWxsIGFjdGl2YXRlZCBob29rc1xuICAgICAgICAvLyBvbiBpbmNvcnJlY3QgY2hpbGRyZW4uIEluc3RlYWQgd2UgcHVzaCB0aGVtIGludG8gYSBxdWV1ZSB3aGljaCB3aWxsXG4gICAgICAgIC8vIGJlIHByb2Nlc3NlZCBhZnRlciB0aGUgd2hvbGUgcGF0Y2ggcHJvY2VzcyBlbmRlZC5cbiAgICAgICAgcXVldWVBY3RpdmF0ZWRDb21wb25lbnQoY29tcG9uZW50SW5zdGFuY2UpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYWN0aXZhdGVDaGlsZENvbXBvbmVudChjb21wb25lbnRJbnN0YW5jZSwgdHJ1ZSAvKiBkaXJlY3QgKi8pO1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95ICh2bm9kZSkge1xuICAgIHZhciBjb21wb25lbnRJbnN0YW5jZSA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlO1xuICAgIGlmICghY29tcG9uZW50SW5zdGFuY2UuX2lzRGVzdHJveWVkKSB7XG4gICAgICBpZiAoIXZub2RlLmRhdGEua2VlcEFsaXZlKSB7XG4gICAgICAgIGNvbXBvbmVudEluc3RhbmNlLiRkZXN0cm95KCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkZWFjdGl2YXRlQ2hpbGRDb21wb25lbnQoY29tcG9uZW50SW5zdGFuY2UsIHRydWUgLyogZGlyZWN0ICovKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbnZhciBob29rc1RvTWVyZ2UgPSBPYmplY3Qua2V5cyhjb21wb25lbnRWTm9kZUhvb2tzKTtcblxuZnVuY3Rpb24gY3JlYXRlQ29tcG9uZW50IChcbiAgQ3RvcixcbiAgZGF0YSxcbiAgY29udGV4dCxcbiAgY2hpbGRyZW4sXG4gIHRhZ1xuKSB7XG4gIGlmIChpc1VuZGVmKEN0b3IpKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgYmFzZUN0b3IgPSBjb250ZXh0LiRvcHRpb25zLl9iYXNlO1xuXG4gIC8vIHBsYWluIG9wdGlvbnMgb2JqZWN0OiB0dXJuIGl0IGludG8gYSBjb25zdHJ1Y3RvclxuICBpZiAoaXNPYmplY3QoQ3RvcikpIHtcbiAgICBDdG9yID0gYmFzZUN0b3IuZXh0ZW5kKEN0b3IpO1xuICB9XG5cbiAgLy8gaWYgYXQgdGhpcyBzdGFnZSBpdCdzIG5vdCBhIGNvbnN0cnVjdG9yIG9yIGFuIGFzeW5jIGNvbXBvbmVudCBmYWN0b3J5LFxuICAvLyByZWplY3QuXG4gIGlmICh0eXBlb2YgQ3RvciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB3YXJuKChcIkludmFsaWQgQ29tcG9uZW50IGRlZmluaXRpb246IFwiICsgKFN0cmluZyhDdG9yKSkpLCBjb250ZXh0KTtcbiAgICB9XG4gICAgcmV0dXJuXG4gIH1cblxuICAvLyBhc3luYyBjb21wb25lbnRcbiAgdmFyIGFzeW5jRmFjdG9yeTtcbiAgaWYgKGlzVW5kZWYoQ3Rvci5jaWQpKSB7XG4gICAgYXN5bmNGYWN0b3J5ID0gQ3RvcjtcbiAgICBDdG9yID0gcmVzb2x2ZUFzeW5jQ29tcG9uZW50KGFzeW5jRmFjdG9yeSwgYmFzZUN0b3IpO1xuICAgIGlmIChDdG9yID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIHJldHVybiBhIHBsYWNlaG9sZGVyIG5vZGUgZm9yIGFzeW5jIGNvbXBvbmVudCwgd2hpY2ggaXMgcmVuZGVyZWRcbiAgICAgIC8vIGFzIGEgY29tbWVudCBub2RlIGJ1dCBwcmVzZXJ2ZXMgYWxsIHRoZSByYXcgaW5mb3JtYXRpb24gZm9yIHRoZSBub2RlLlxuICAgICAgLy8gdGhlIGluZm9ybWF0aW9uIHdpbGwgYmUgdXNlZCBmb3IgYXN5bmMgc2VydmVyLXJlbmRlcmluZyBhbmQgaHlkcmF0aW9uLlxuICAgICAgcmV0dXJuIGNyZWF0ZUFzeW5jUGxhY2Vob2xkZXIoXG4gICAgICAgIGFzeW5jRmFjdG9yeSxcbiAgICAgICAgZGF0YSxcbiAgICAgICAgY29udGV4dCxcbiAgICAgICAgY2hpbGRyZW4sXG4gICAgICAgIHRhZ1xuICAgICAgKVxuICAgIH1cbiAgfVxuXG4gIGRhdGEgPSBkYXRhIHx8IHt9O1xuXG4gIC8vIHJlc29sdmUgY29uc3RydWN0b3Igb3B0aW9ucyBpbiBjYXNlIGdsb2JhbCBtaXhpbnMgYXJlIGFwcGxpZWQgYWZ0ZXJcbiAgLy8gY29tcG9uZW50IGNvbnN0cnVjdG9yIGNyZWF0aW9uXG4gIHJlc29sdmVDb25zdHJ1Y3Rvck9wdGlvbnMoQ3Rvcik7XG5cbiAgLy8gdHJhbnNmb3JtIGNvbXBvbmVudCB2LW1vZGVsIGRhdGEgaW50byBwcm9wcyAmIGV2ZW50c1xuICBpZiAoaXNEZWYoZGF0YS5tb2RlbCkpIHtcbiAgICB0cmFuc2Zvcm1Nb2RlbChDdG9yLm9wdGlvbnMsIGRhdGEpO1xuICB9XG5cbiAgLy8gZXh0cmFjdCBwcm9wc1xuICB2YXIgcHJvcHNEYXRhID0gZXh0cmFjdFByb3BzRnJvbVZOb2RlRGF0YShkYXRhLCBDdG9yLCB0YWcpO1xuXG4gIC8vIGZ1bmN0aW9uYWwgY29tcG9uZW50XG4gIGlmIChpc1RydWUoQ3Rvci5vcHRpb25zLmZ1bmN0aW9uYWwpKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUZ1bmN0aW9uYWxDb21wb25lbnQoQ3RvciwgcHJvcHNEYXRhLCBkYXRhLCBjb250ZXh0LCBjaGlsZHJlbilcbiAgfVxuXG4gIC8vIGV4dHJhY3QgbGlzdGVuZXJzLCBzaW5jZSB0aGVzZSBuZWVkcyB0byBiZSB0cmVhdGVkIGFzXG4gIC8vIGNoaWxkIGNvbXBvbmVudCBsaXN0ZW5lcnMgaW5zdGVhZCBvZiBET00gbGlzdGVuZXJzXG4gIHZhciBsaXN0ZW5lcnMgPSBkYXRhLm9uO1xuICAvLyByZXBsYWNlIHdpdGggbGlzdGVuZXJzIHdpdGggLm5hdGl2ZSBtb2RpZmllclxuICAvLyBzbyBpdCBnZXRzIHByb2Nlc3NlZCBkdXJpbmcgcGFyZW50IGNvbXBvbmVudCBwYXRjaC5cbiAgZGF0YS5vbiA9IGRhdGEubmF0aXZlT247XG5cbiAgaWYgKGlzVHJ1ZShDdG9yLm9wdGlvbnMuYWJzdHJhY3QpKSB7XG4gICAgLy8gYWJzdHJhY3QgY29tcG9uZW50cyBkbyBub3Qga2VlcCBhbnl0aGluZ1xuICAgIC8vIG90aGVyIHRoYW4gcHJvcHMgJiBsaXN0ZW5lcnMgJiBzbG90XG5cbiAgICAvLyB3b3JrIGFyb3VuZCBmbG93XG4gICAgdmFyIHNsb3QgPSBkYXRhLnNsb3Q7XG4gICAgZGF0YSA9IHt9O1xuICAgIGlmIChzbG90KSB7XG4gICAgICBkYXRhLnNsb3QgPSBzbG90O1xuICAgIH1cbiAgfVxuXG4gIC8vIGluc3RhbGwgY29tcG9uZW50IG1hbmFnZW1lbnQgaG9va3Mgb250byB0aGUgcGxhY2Vob2xkZXIgbm9kZVxuICBpbnN0YWxsQ29tcG9uZW50SG9va3MoZGF0YSk7XG5cbiAgLy8gcmV0dXJuIGEgcGxhY2Vob2xkZXIgdm5vZGVcbiAgdmFyIG5hbWUgPSBDdG9yLm9wdGlvbnMubmFtZSB8fCB0YWc7XG4gIHZhciB2bm9kZSA9IG5ldyBWTm9kZShcbiAgICAoXCJ2dWUtY29tcG9uZW50LVwiICsgKEN0b3IuY2lkKSArIChuYW1lID8gKFwiLVwiICsgbmFtZSkgOiAnJykpLFxuICAgIGRhdGEsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGNvbnRleHQsXG4gICAgeyBDdG9yOiBDdG9yLCBwcm9wc0RhdGE6IHByb3BzRGF0YSwgbGlzdGVuZXJzOiBsaXN0ZW5lcnMsIHRhZzogdGFnLCBjaGlsZHJlbjogY2hpbGRyZW4gfSxcbiAgICBhc3luY0ZhY3RvcnlcbiAgKTtcblxuICByZXR1cm4gdm5vZGVcbn1cblxuZnVuY3Rpb24gY3JlYXRlQ29tcG9uZW50SW5zdGFuY2VGb3JWbm9kZSAoXG4gIC8vIHdlIGtub3cgaXQncyBNb3VudGVkQ29tcG9uZW50Vk5vZGUgYnV0IGZsb3cgZG9lc24ndFxuICB2bm9kZSxcbiAgLy8gYWN0aXZlSW5zdGFuY2UgaW4gbGlmZWN5Y2xlIHN0YXRlXG4gIHBhcmVudFxuKSB7XG4gIHZhciBvcHRpb25zID0ge1xuICAgIF9pc0NvbXBvbmVudDogdHJ1ZSxcbiAgICBfcGFyZW50Vm5vZGU6IHZub2RlLFxuICAgIHBhcmVudDogcGFyZW50XG4gIH07XG4gIC8vIGNoZWNrIGlubGluZS10ZW1wbGF0ZSByZW5kZXIgZnVuY3Rpb25zXG4gIHZhciBpbmxpbmVUZW1wbGF0ZSA9IHZub2RlLmRhdGEuaW5saW5lVGVtcGxhdGU7XG4gIGlmIChpc0RlZihpbmxpbmVUZW1wbGF0ZSkpIHtcbiAgICBvcHRpb25zLnJlbmRlciA9IGlubGluZVRlbXBsYXRlLnJlbmRlcjtcbiAgICBvcHRpb25zLnN0YXRpY1JlbmRlckZucyA9IGlubGluZVRlbXBsYXRlLnN0YXRpY1JlbmRlckZucztcbiAgfVxuICByZXR1cm4gbmV3IHZub2RlLmNvbXBvbmVudE9wdGlvbnMuQ3RvcihvcHRpb25zKVxufVxuXG5mdW5jdGlvbiBpbnN0YWxsQ29tcG9uZW50SG9va3MgKGRhdGEpIHtcbiAgdmFyIGhvb2tzID0gZGF0YS5ob29rIHx8IChkYXRhLmhvb2sgPSB7fSk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgaG9va3NUb01lcmdlLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IGhvb2tzVG9NZXJnZVtpXTtcbiAgICB2YXIgZXhpc3RpbmcgPSBob29rc1trZXldO1xuICAgIHZhciB0b01lcmdlID0gY29tcG9uZW50Vk5vZGVIb29rc1trZXldO1xuICAgIGlmIChleGlzdGluZyAhPT0gdG9NZXJnZSAmJiAhKGV4aXN0aW5nICYmIGV4aXN0aW5nLl9tZXJnZWQpKSB7XG4gICAgICBob29rc1trZXldID0gZXhpc3RpbmcgPyBtZXJnZUhvb2skMSh0b01lcmdlLCBleGlzdGluZykgOiB0b01lcmdlO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBtZXJnZUhvb2skMSAoZjEsIGYyKSB7XG4gIHZhciBtZXJnZWQgPSBmdW5jdGlvbiAoYSwgYikge1xuICAgIC8vIGZsb3cgY29tcGxhaW5zIGFib3V0IGV4dHJhIGFyZ3Mgd2hpY2ggaXMgd2h5IHdlIHVzZSBhbnlcbiAgICBmMShhLCBiKTtcbiAgICBmMihhLCBiKTtcbiAgfTtcbiAgbWVyZ2VkLl9tZXJnZWQgPSB0cnVlO1xuICByZXR1cm4gbWVyZ2VkXG59XG5cbi8vIHRyYW5zZm9ybSBjb21wb25lbnQgdi1tb2RlbCBpbmZvICh2YWx1ZSBhbmQgY2FsbGJhY2spIGludG9cbi8vIHByb3AgYW5kIGV2ZW50IGhhbmRsZXIgcmVzcGVjdGl2ZWx5LlxuZnVuY3Rpb24gdHJhbnNmb3JtTW9kZWwgKG9wdGlvbnMsIGRhdGEpIHtcbiAgdmFyIHByb3AgPSAob3B0aW9ucy5tb2RlbCAmJiBvcHRpb25zLm1vZGVsLnByb3ApIHx8ICd2YWx1ZSc7XG4gIHZhciBldmVudCA9IChvcHRpb25zLm1vZGVsICYmIG9wdGlvbnMubW9kZWwuZXZlbnQpIHx8ICdpbnB1dCdcbiAgOyhkYXRhLmF0dHJzIHx8IChkYXRhLmF0dHJzID0ge30pKVtwcm9wXSA9IGRhdGEubW9kZWwudmFsdWU7XG4gIHZhciBvbiA9IGRhdGEub24gfHwgKGRhdGEub24gPSB7fSk7XG4gIHZhciBleGlzdGluZyA9IG9uW2V2ZW50XTtcbiAgdmFyIGNhbGxiYWNrID0gZGF0YS5tb2RlbC5jYWxsYmFjaztcbiAgaWYgKGlzRGVmKGV4aXN0aW5nKSkge1xuICAgIGlmIChcbiAgICAgIEFycmF5LmlzQXJyYXkoZXhpc3RpbmcpXG4gICAgICAgID8gZXhpc3RpbmcuaW5kZXhPZihjYWxsYmFjaykgPT09IC0xXG4gICAgICAgIDogZXhpc3RpbmcgIT09IGNhbGxiYWNrXG4gICAgKSB7XG4gICAgICBvbltldmVudF0gPSBbY2FsbGJhY2tdLmNvbmNhdChleGlzdGluZyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIG9uW2V2ZW50XSA9IGNhbGxiYWNrO1xuICB9XG59XG5cbi8qICAqL1xuXG52YXIgU0lNUExFX05PUk1BTElaRSA9IDE7XG52YXIgQUxXQVlTX05PUk1BTElaRSA9IDI7XG5cbi8vIHdyYXBwZXIgZnVuY3Rpb24gZm9yIHByb3ZpZGluZyBhIG1vcmUgZmxleGlibGUgaW50ZXJmYWNlXG4vLyB3aXRob3V0IGdldHRpbmcgeWVsbGVkIGF0IGJ5IGZsb3dcbmZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnQgKFxuICBjb250ZXh0LFxuICB0YWcsXG4gIGRhdGEsXG4gIGNoaWxkcmVuLFxuICBub3JtYWxpemF0aW9uVHlwZSxcbiAgYWx3YXlzTm9ybWFsaXplXG4pIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoZGF0YSkgfHwgaXNQcmltaXRpdmUoZGF0YSkpIHtcbiAgICBub3JtYWxpemF0aW9uVHlwZSA9IGNoaWxkcmVuO1xuICAgIGNoaWxkcmVuID0gZGF0YTtcbiAgICBkYXRhID0gdW5kZWZpbmVkO1xuICB9XG4gIGlmIChpc1RydWUoYWx3YXlzTm9ybWFsaXplKSkge1xuICAgIG5vcm1hbGl6YXRpb25UeXBlID0gQUxXQVlTX05PUk1BTElaRTtcbiAgfVxuICByZXR1cm4gX2NyZWF0ZUVsZW1lbnQoY29udGV4dCwgdGFnLCBkYXRhLCBjaGlsZHJlbiwgbm9ybWFsaXphdGlvblR5cGUpXG59XG5cbmZ1bmN0aW9uIF9jcmVhdGVFbGVtZW50IChcbiAgY29udGV4dCxcbiAgdGFnLFxuICBkYXRhLFxuICBjaGlsZHJlbixcbiAgbm9ybWFsaXphdGlvblR5cGVcbikge1xuICBpZiAoaXNEZWYoZGF0YSkgJiYgaXNEZWYoKGRhdGEpLl9fb2JfXykpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICBcIkF2b2lkIHVzaW5nIG9ic2VydmVkIGRhdGEgb2JqZWN0IGFzIHZub2RlIGRhdGE6IFwiICsgKEpTT04uc3RyaW5naWZ5KGRhdGEpKSArIFwiXFxuXCIgK1xuICAgICAgJ0Fsd2F5cyBjcmVhdGUgZnJlc2ggdm5vZGUgZGF0YSBvYmplY3RzIGluIGVhY2ggcmVuZGVyIScsXG4gICAgICBjb250ZXh0XG4gICAgKTtcbiAgICByZXR1cm4gY3JlYXRlRW1wdHlWTm9kZSgpXG4gIH1cbiAgLy8gb2JqZWN0IHN5bnRheCBpbiB2LWJpbmRcbiAgaWYgKGlzRGVmKGRhdGEpICYmIGlzRGVmKGRhdGEuaXMpKSB7XG4gICAgdGFnID0gZGF0YS5pcztcbiAgfVxuICBpZiAoIXRhZykge1xuICAgIC8vIGluIGNhc2Ugb2YgY29tcG9uZW50IDppcyBzZXQgdG8gZmFsc3kgdmFsdWVcbiAgICByZXR1cm4gY3JlYXRlRW1wdHlWTm9kZSgpXG4gIH1cbiAgLy8gd2FybiBhZ2FpbnN0IG5vbi1wcmltaXRpdmUga2V5XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgaXNEZWYoZGF0YSkgJiYgaXNEZWYoZGF0YS5rZXkpICYmICFpc1ByaW1pdGl2ZShkYXRhLmtleSlcbiAgKSB7XG4gICAge1xuICAgICAgd2FybihcbiAgICAgICAgJ0F2b2lkIHVzaW5nIG5vbi1wcmltaXRpdmUgdmFsdWUgYXMga2V5LCAnICtcbiAgICAgICAgJ3VzZSBzdHJpbmcvbnVtYmVyIHZhbHVlIGluc3RlYWQuJyxcbiAgICAgICAgY29udGV4dFxuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgLy8gc3VwcG9ydCBzaW5nbGUgZnVuY3Rpb24gY2hpbGRyZW4gYXMgZGVmYXVsdCBzY29wZWQgc2xvdFxuICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbikgJiZcbiAgICB0eXBlb2YgY2hpbGRyZW5bMF0gPT09ICdmdW5jdGlvbidcbiAgKSB7XG4gICAgZGF0YSA9IGRhdGEgfHwge307XG4gICAgZGF0YS5zY29wZWRTbG90cyA9IHsgZGVmYXVsdDogY2hpbGRyZW5bMF0gfTtcbiAgICBjaGlsZHJlbi5sZW5ndGggPSAwO1xuICB9XG4gIGlmIChub3JtYWxpemF0aW9uVHlwZSA9PT0gQUxXQVlTX05PUk1BTElaRSkge1xuICAgIGNoaWxkcmVuID0gbm9ybWFsaXplQ2hpbGRyZW4oY2hpbGRyZW4pO1xuICB9IGVsc2UgaWYgKG5vcm1hbGl6YXRpb25UeXBlID09PSBTSU1QTEVfTk9STUFMSVpFKSB7XG4gICAgY2hpbGRyZW4gPSBzaW1wbGVOb3JtYWxpemVDaGlsZHJlbihjaGlsZHJlbik7XG4gIH1cbiAgdmFyIHZub2RlLCBucztcbiAgaWYgKHR5cGVvZiB0YWcgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFyIEN0b3I7XG4gICAgbnMgPSAoY29udGV4dC4kdm5vZGUgJiYgY29udGV4dC4kdm5vZGUubnMpIHx8IGNvbmZpZy5nZXRUYWdOYW1lc3BhY2UodGFnKTtcbiAgICBpZiAoY29uZmlnLmlzUmVzZXJ2ZWRUYWcodGFnKSkge1xuICAgICAgLy8gcGxhdGZvcm0gYnVpbHQtaW4gZWxlbWVudHNcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGlzRGVmKGRhdGEpICYmIGlzRGVmKGRhdGEubmF0aXZlT24pICYmIGRhdGEudGFnICE9PSAnY29tcG9uZW50Jykge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIChcIlRoZSAubmF0aXZlIG1vZGlmaWVyIGZvciB2LW9uIGlzIG9ubHkgdmFsaWQgb24gY29tcG9uZW50cyBidXQgaXQgd2FzIHVzZWQgb24gPFwiICsgdGFnICsgXCI+LlwiKSxcbiAgICAgICAgICBjb250ZXh0XG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICB2bm9kZSA9IG5ldyBWTm9kZShcbiAgICAgICAgY29uZmlnLnBhcnNlUGxhdGZvcm1UYWdOYW1lKHRhZyksIGRhdGEsIGNoaWxkcmVuLFxuICAgICAgICB1bmRlZmluZWQsIHVuZGVmaW5lZCwgY29udGV4dFxuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKCghZGF0YSB8fCAhZGF0YS5wcmUpICYmIGlzRGVmKEN0b3IgPSByZXNvbHZlQXNzZXQoY29udGV4dC4kb3B0aW9ucywgJ2NvbXBvbmVudHMnLCB0YWcpKSkge1xuICAgICAgLy8gY29tcG9uZW50XG4gICAgICB2bm9kZSA9IGNyZWF0ZUNvbXBvbmVudChDdG9yLCBkYXRhLCBjb250ZXh0LCBjaGlsZHJlbiwgdGFnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gdW5rbm93biBvciB1bmxpc3RlZCBuYW1lc3BhY2VkIGVsZW1lbnRzXG4gICAgICAvLyBjaGVjayBhdCBydW50aW1lIGJlY2F1c2UgaXQgbWF5IGdldCBhc3NpZ25lZCBhIG5hbWVzcGFjZSB3aGVuIGl0c1xuICAgICAgLy8gcGFyZW50IG5vcm1hbGl6ZXMgY2hpbGRyZW5cbiAgICAgIHZub2RlID0gbmV3IFZOb2RlKFxuICAgICAgICB0YWcsIGRhdGEsIGNoaWxkcmVuLFxuICAgICAgICB1bmRlZmluZWQsIHVuZGVmaW5lZCwgY29udGV4dFxuICAgICAgKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gZGlyZWN0IGNvbXBvbmVudCBvcHRpb25zIC8gY29uc3RydWN0b3JcbiAgICB2bm9kZSA9IGNyZWF0ZUNvbXBvbmVudCh0YWcsIGRhdGEsIGNvbnRleHQsIGNoaWxkcmVuKTtcbiAgfVxuICBpZiAoQXJyYXkuaXNBcnJheSh2bm9kZSkpIHtcbiAgICByZXR1cm4gdm5vZGVcbiAgfSBlbHNlIGlmIChpc0RlZih2bm9kZSkpIHtcbiAgICBpZiAoaXNEZWYobnMpKSB7IGFwcGx5TlModm5vZGUsIG5zKTsgfVxuICAgIGlmIChpc0RlZihkYXRhKSkgeyByZWdpc3RlckRlZXBCaW5kaW5ncyhkYXRhKTsgfVxuICAgIHJldHVybiB2bm9kZVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBjcmVhdGVFbXB0eVZOb2RlKClcbiAgfVxufVxuXG5mdW5jdGlvbiBhcHBseU5TICh2bm9kZSwgbnMsIGZvcmNlKSB7XG4gIHZub2RlLm5zID0gbnM7XG4gIGlmICh2bm9kZS50YWcgPT09ICdmb3JlaWduT2JqZWN0Jykge1xuICAgIC8vIHVzZSBkZWZhdWx0IG5hbWVzcGFjZSBpbnNpZGUgZm9yZWlnbk9iamVjdFxuICAgIG5zID0gdW5kZWZpbmVkO1xuICAgIGZvcmNlID0gdHJ1ZTtcbiAgfVxuICBpZiAoaXNEZWYodm5vZGUuY2hpbGRyZW4pKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSB2bm9kZS5jaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHZhciBjaGlsZCA9IHZub2RlLmNoaWxkcmVuW2ldO1xuICAgICAgaWYgKGlzRGVmKGNoaWxkLnRhZykgJiYgKFxuICAgICAgICBpc1VuZGVmKGNoaWxkLm5zKSB8fCAoaXNUcnVlKGZvcmNlKSAmJiBjaGlsZC50YWcgIT09ICdzdmcnKSkpIHtcbiAgICAgICAgYXBwbHlOUyhjaGlsZCwgbnMsIGZvcmNlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLy8gcmVmICM1MzE4XG4vLyBuZWNlc3NhcnkgdG8gZW5zdXJlIHBhcmVudCByZS1yZW5kZXIgd2hlbiBkZWVwIGJpbmRpbmdzIGxpa2UgOnN0eWxlIGFuZFxuLy8gOmNsYXNzIGFyZSB1c2VkIG9uIHNsb3Qgbm9kZXNcbmZ1bmN0aW9uIHJlZ2lzdGVyRGVlcEJpbmRpbmdzIChkYXRhKSB7XG4gIGlmIChpc09iamVjdChkYXRhLnN0eWxlKSkge1xuICAgIHRyYXZlcnNlKGRhdGEuc3R5bGUpO1xuICB9XG4gIGlmIChpc09iamVjdChkYXRhLmNsYXNzKSkge1xuICAgIHRyYXZlcnNlKGRhdGEuY2xhc3MpO1xuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0UmVuZGVyICh2bSkge1xuICB2bS5fdm5vZGUgPSBudWxsOyAvLyB0aGUgcm9vdCBvZiB0aGUgY2hpbGQgdHJlZVxuICB2bS5fc3RhdGljVHJlZXMgPSBudWxsOyAvLyB2LW9uY2UgY2FjaGVkIHRyZWVzXG4gIHZhciBvcHRpb25zID0gdm0uJG9wdGlvbnM7XG4gIHZhciBwYXJlbnRWbm9kZSA9IHZtLiR2bm9kZSA9IG9wdGlvbnMuX3BhcmVudFZub2RlOyAvLyB0aGUgcGxhY2Vob2xkZXIgbm9kZSBpbiBwYXJlbnQgdHJlZVxuICB2YXIgcmVuZGVyQ29udGV4dCA9IHBhcmVudFZub2RlICYmIHBhcmVudFZub2RlLmNvbnRleHQ7XG4gIHZtLiRzbG90cyA9IHJlc29sdmVTbG90cyhvcHRpb25zLl9yZW5kZXJDaGlsZHJlbiwgcmVuZGVyQ29udGV4dCk7XG4gIHZtLiRzY29wZWRTbG90cyA9IGVtcHR5T2JqZWN0O1xuICAvLyBiaW5kIHRoZSBjcmVhdGVFbGVtZW50IGZuIHRvIHRoaXMgaW5zdGFuY2VcbiAgLy8gc28gdGhhdCB3ZSBnZXQgcHJvcGVyIHJlbmRlciBjb250ZXh0IGluc2lkZSBpdC5cbiAgLy8gYXJncyBvcmRlcjogdGFnLCBkYXRhLCBjaGlsZHJlbiwgbm9ybWFsaXphdGlvblR5cGUsIGFsd2F5c05vcm1hbGl6ZVxuICAvLyBpbnRlcm5hbCB2ZXJzaW9uIGlzIHVzZWQgYnkgcmVuZGVyIGZ1bmN0aW9ucyBjb21waWxlZCBmcm9tIHRlbXBsYXRlc1xuICB2bS5fYyA9IGZ1bmN0aW9uIChhLCBiLCBjLCBkKSB7IHJldHVybiBjcmVhdGVFbGVtZW50KHZtLCBhLCBiLCBjLCBkLCBmYWxzZSk7IH07XG4gIC8vIG5vcm1hbGl6YXRpb24gaXMgYWx3YXlzIGFwcGxpZWQgZm9yIHRoZSBwdWJsaWMgdmVyc2lvbiwgdXNlZCBpblxuICAvLyB1c2VyLXdyaXR0ZW4gcmVuZGVyIGZ1bmN0aW9ucy5cbiAgdm0uJGNyZWF0ZUVsZW1lbnQgPSBmdW5jdGlvbiAoYSwgYiwgYywgZCkgeyByZXR1cm4gY3JlYXRlRWxlbWVudCh2bSwgYSwgYiwgYywgZCwgdHJ1ZSk7IH07XG5cbiAgLy8gJGF0dHJzICYgJGxpc3RlbmVycyBhcmUgZXhwb3NlZCBmb3IgZWFzaWVyIEhPQyBjcmVhdGlvbi5cbiAgLy8gdGhleSBuZWVkIHRvIGJlIHJlYWN0aXZlIHNvIHRoYXQgSE9DcyB1c2luZyB0aGVtIGFyZSBhbHdheXMgdXBkYXRlZFxuICB2YXIgcGFyZW50RGF0YSA9IHBhcmVudFZub2RlICYmIHBhcmVudFZub2RlLmRhdGE7XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBkZWZpbmVSZWFjdGl2ZSQkMSh2bSwgJyRhdHRycycsIHBhcmVudERhdGEgJiYgcGFyZW50RGF0YS5hdHRycyB8fCBlbXB0eU9iamVjdCwgZnVuY3Rpb24gKCkge1xuICAgICAgIWlzVXBkYXRpbmdDaGlsZENvbXBvbmVudCAmJiB3YXJuKFwiJGF0dHJzIGlzIHJlYWRvbmx5LlwiLCB2bSk7XG4gICAgfSwgdHJ1ZSk7XG4gICAgZGVmaW5lUmVhY3RpdmUkJDEodm0sICckbGlzdGVuZXJzJywgb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzIHx8IGVtcHR5T2JqZWN0LCBmdW5jdGlvbiAoKSB7XG4gICAgICAhaXNVcGRhdGluZ0NoaWxkQ29tcG9uZW50ICYmIHdhcm4oXCIkbGlzdGVuZXJzIGlzIHJlYWRvbmx5LlwiLCB2bSk7XG4gICAgfSwgdHJ1ZSk7XG4gIH0gZWxzZSB7XG4gICAgZGVmaW5lUmVhY3RpdmUkJDEodm0sICckYXR0cnMnLCBwYXJlbnREYXRhICYmIHBhcmVudERhdGEuYXR0cnMgfHwgZW1wdHlPYmplY3QsIG51bGwsIHRydWUpO1xuICAgIGRlZmluZVJlYWN0aXZlJCQxKHZtLCAnJGxpc3RlbmVycycsIG9wdGlvbnMuX3BhcmVudExpc3RlbmVycyB8fCBlbXB0eU9iamVjdCwgbnVsbCwgdHJ1ZSk7XG4gIH1cbn1cblxudmFyIGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSA9IG51bGw7XG5cbmZ1bmN0aW9uIHJlbmRlck1peGluIChWdWUpIHtcbiAgLy8gaW5zdGFsbCBydW50aW1lIGNvbnZlbmllbmNlIGhlbHBlcnNcbiAgaW5zdGFsbFJlbmRlckhlbHBlcnMoVnVlLnByb3RvdHlwZSk7XG5cbiAgVnVlLnByb3RvdHlwZS4kbmV4dFRpY2sgPSBmdW5jdGlvbiAoZm4pIHtcbiAgICByZXR1cm4gbmV4dFRpY2soZm4sIHRoaXMpXG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS5fcmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgdmFyIHJlZiA9IHZtLiRvcHRpb25zO1xuICAgIHZhciByZW5kZXIgPSByZWYucmVuZGVyO1xuICAgIHZhciBfcGFyZW50Vm5vZGUgPSByZWYuX3BhcmVudFZub2RlO1xuXG4gICAgaWYgKF9wYXJlbnRWbm9kZSkge1xuICAgICAgdm0uJHNjb3BlZFNsb3RzID0gbm9ybWFsaXplU2NvcGVkU2xvdHMoXG4gICAgICAgIF9wYXJlbnRWbm9kZS5kYXRhLnNjb3BlZFNsb3RzLFxuICAgICAgICB2bS4kc2xvdHMsXG4gICAgICAgIHZtLiRzY29wZWRTbG90c1xuICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyBzZXQgcGFyZW50IHZub2RlLiB0aGlzIGFsbG93cyByZW5kZXIgZnVuY3Rpb25zIHRvIGhhdmUgYWNjZXNzXG4gICAgLy8gdG8gdGhlIGRhdGEgb24gdGhlIHBsYWNlaG9sZGVyIG5vZGUuXG4gICAgdm0uJHZub2RlID0gX3BhcmVudFZub2RlO1xuICAgIC8vIHJlbmRlciBzZWxmXG4gICAgdmFyIHZub2RlO1xuICAgIHRyeSB7XG4gICAgICAvLyBUaGVyZSdzIG5vIG5lZWQgdG8gbWFpbnRhaW4gYSBzdGFjayBiZWNhdXNlIGFsbCByZW5kZXIgZm5zIGFyZSBjYWxsZWRcbiAgICAgIC8vIHNlcGFyYXRlbHkgZnJvbSBvbmUgYW5vdGhlci4gTmVzdGVkIGNvbXBvbmVudCdzIHJlbmRlciBmbnMgYXJlIGNhbGxlZFxuICAgICAgLy8gd2hlbiBwYXJlbnQgY29tcG9uZW50IGlzIHBhdGNoZWQuXG4gICAgICBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UgPSB2bTtcbiAgICAgIHZub2RlID0gcmVuZGVyLmNhbGwodm0uX3JlbmRlclByb3h5LCB2bS4kY3JlYXRlRWxlbWVudCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaGFuZGxlRXJyb3IoZSwgdm0sIFwicmVuZGVyXCIpO1xuICAgICAgLy8gcmV0dXJuIGVycm9yIHJlbmRlciByZXN1bHQsXG4gICAgICAvLyBvciBwcmV2aW91cyB2bm9kZSB0byBwcmV2ZW50IHJlbmRlciBlcnJvciBjYXVzaW5nIGJsYW5rIGNvbXBvbmVudFxuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHZtLiRvcHRpb25zLnJlbmRlckVycm9yKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdm5vZGUgPSB2bS4kb3B0aW9ucy5yZW5kZXJFcnJvci5jYWxsKHZtLl9yZW5kZXJQcm94eSwgdm0uJGNyZWF0ZUVsZW1lbnQsIGUpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgaGFuZGxlRXJyb3IoZSwgdm0sIFwicmVuZGVyRXJyb3JcIik7XG4gICAgICAgICAgdm5vZGUgPSB2bS5fdm5vZGU7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZub2RlID0gdm0uX3Zub2RlO1xuICAgICAgfVxuICAgIH0gZmluYWxseSB7XG4gICAgICBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UgPSBudWxsO1xuICAgIH1cbiAgICAvLyBpZiB0aGUgcmV0dXJuZWQgYXJyYXkgY29udGFpbnMgb25seSBhIHNpbmdsZSBub2RlLCBhbGxvdyBpdFxuICAgIGlmIChBcnJheS5pc0FycmF5KHZub2RlKSAmJiB2bm9kZS5sZW5ndGggPT09IDEpIHtcbiAgICAgIHZub2RlID0gdm5vZGVbMF07XG4gICAgfVxuICAgIC8vIHJldHVybiBlbXB0eSB2bm9kZSBpbiBjYXNlIHRoZSByZW5kZXIgZnVuY3Rpb24gZXJyb3JlZCBvdXRcbiAgICBpZiAoISh2bm9kZSBpbnN0YW5jZW9mIFZOb2RlKSkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgQXJyYXkuaXNBcnJheSh2bm9kZSkpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAnTXVsdGlwbGUgcm9vdCBub2RlcyByZXR1cm5lZCBmcm9tIHJlbmRlciBmdW5jdGlvbi4gUmVuZGVyIGZ1bmN0aW9uICcgK1xuICAgICAgICAgICdzaG91bGQgcmV0dXJuIGEgc2luZ2xlIHJvb3Qgbm9kZS4nLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICB2bm9kZSA9IGNyZWF0ZUVtcHR5Vk5vZGUoKTtcbiAgICB9XG4gICAgLy8gc2V0IHBhcmVudFxuICAgIHZub2RlLnBhcmVudCA9IF9wYXJlbnRWbm9kZTtcbiAgICByZXR1cm4gdm5vZGVcbiAgfTtcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGVuc3VyZUN0b3IgKGNvbXAsIGJhc2UpIHtcbiAgaWYgKFxuICAgIGNvbXAuX19lc01vZHVsZSB8fFxuICAgIChoYXNTeW1ib2wgJiYgY29tcFtTeW1ib2wudG9TdHJpbmdUYWddID09PSAnTW9kdWxlJylcbiAgKSB7XG4gICAgY29tcCA9IGNvbXAuZGVmYXVsdDtcbiAgfVxuICByZXR1cm4gaXNPYmplY3QoY29tcClcbiAgICA/IGJhc2UuZXh0ZW5kKGNvbXApXG4gICAgOiBjb21wXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUFzeW5jUGxhY2Vob2xkZXIgKFxuICBmYWN0b3J5LFxuICBkYXRhLFxuICBjb250ZXh0LFxuICBjaGlsZHJlbixcbiAgdGFnXG4pIHtcbiAgdmFyIG5vZGUgPSBjcmVhdGVFbXB0eVZOb2RlKCk7XG4gIG5vZGUuYXN5bmNGYWN0b3J5ID0gZmFjdG9yeTtcbiAgbm9kZS5hc3luY01ldGEgPSB7IGRhdGE6IGRhdGEsIGNvbnRleHQ6IGNvbnRleHQsIGNoaWxkcmVuOiBjaGlsZHJlbiwgdGFnOiB0YWcgfTtcbiAgcmV0dXJuIG5vZGVcbn1cblxuZnVuY3Rpb24gcmVzb2x2ZUFzeW5jQ29tcG9uZW50IChcbiAgZmFjdG9yeSxcbiAgYmFzZUN0b3Jcbikge1xuICBpZiAoaXNUcnVlKGZhY3RvcnkuZXJyb3IpICYmIGlzRGVmKGZhY3RvcnkuZXJyb3JDb21wKSkge1xuICAgIHJldHVybiBmYWN0b3J5LmVycm9yQ29tcFxuICB9XG5cbiAgaWYgKGlzRGVmKGZhY3RvcnkucmVzb2x2ZWQpKSB7XG4gICAgcmV0dXJuIGZhY3RvcnkucmVzb2x2ZWRcbiAgfVxuXG4gIHZhciBvd25lciA9IGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZTtcbiAgaWYgKG93bmVyICYmIGlzRGVmKGZhY3Rvcnkub3duZXJzKSAmJiBmYWN0b3J5Lm93bmVycy5pbmRleE9mKG93bmVyKSA9PT0gLTEpIHtcbiAgICAvLyBhbHJlYWR5IHBlbmRpbmdcbiAgICBmYWN0b3J5Lm93bmVycy5wdXNoKG93bmVyKTtcbiAgfVxuXG4gIGlmIChpc1RydWUoZmFjdG9yeS5sb2FkaW5nKSAmJiBpc0RlZihmYWN0b3J5LmxvYWRpbmdDb21wKSkge1xuICAgIHJldHVybiBmYWN0b3J5LmxvYWRpbmdDb21wXG4gIH1cblxuICBpZiAob3duZXIgJiYgIWlzRGVmKGZhY3Rvcnkub3duZXJzKSkge1xuICAgIHZhciBvd25lcnMgPSBmYWN0b3J5Lm93bmVycyA9IFtvd25lcl07XG4gICAgdmFyIHN5bmMgPSB0cnVlO1xuICAgIHZhciB0aW1lckxvYWRpbmcgPSBudWxsO1xuICAgIHZhciB0aW1lclRpbWVvdXQgPSBudWxsXG5cbiAgICA7KG93bmVyKS4kb24oJ2hvb2s6ZGVzdHJveWVkJywgZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVtb3ZlKG93bmVycywgb3duZXIpOyB9KTtcblxuICAgIHZhciBmb3JjZVJlbmRlciA9IGZ1bmN0aW9uIChyZW5kZXJDb21wbGV0ZWQpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gb3duZXJzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAob3duZXJzW2ldKS4kZm9yY2VVcGRhdGUoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHJlbmRlckNvbXBsZXRlZCkge1xuICAgICAgICBvd25lcnMubGVuZ3RoID0gMDtcbiAgICAgICAgaWYgKHRpbWVyTG9hZGluZyAhPT0gbnVsbCkge1xuICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lckxvYWRpbmcpO1xuICAgICAgICAgIHRpbWVyTG9hZGluZyA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRpbWVyVGltZW91dCAhPT0gbnVsbCkge1xuICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lclRpbWVvdXQpO1xuICAgICAgICAgIHRpbWVyVGltZW91dCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIHJlc29sdmUgPSBvbmNlKGZ1bmN0aW9uIChyZXMpIHtcbiAgICAgIC8vIGNhY2hlIHJlc29sdmVkXG4gICAgICBmYWN0b3J5LnJlc29sdmVkID0gZW5zdXJlQ3RvcihyZXMsIGJhc2VDdG9yKTtcbiAgICAgIC8vIGludm9rZSBjYWxsYmFja3Mgb25seSBpZiB0aGlzIGlzIG5vdCBhIHN5bmNocm9ub3VzIHJlc29sdmVcbiAgICAgIC8vIChhc3luYyByZXNvbHZlcyBhcmUgc2hpbW1lZCBhcyBzeW5jaHJvbm91cyBkdXJpbmcgU1NSKVxuICAgICAgaWYgKCFzeW5jKSB7XG4gICAgICAgIGZvcmNlUmVuZGVyKHRydWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3duZXJzLmxlbmd0aCA9IDA7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICB2YXIgcmVqZWN0ID0gb25jZShmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAgIFwiRmFpbGVkIHRvIHJlc29sdmUgYXN5bmMgY29tcG9uZW50OiBcIiArIChTdHJpbmcoZmFjdG9yeSkpICtcbiAgICAgICAgKHJlYXNvbiA/IChcIlxcblJlYXNvbjogXCIgKyByZWFzb24pIDogJycpXG4gICAgICApO1xuICAgICAgaWYgKGlzRGVmKGZhY3RvcnkuZXJyb3JDb21wKSkge1xuICAgICAgICBmYWN0b3J5LmVycm9yID0gdHJ1ZTtcbiAgICAgICAgZm9yY2VSZW5kZXIodHJ1ZSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICB2YXIgcmVzID0gZmFjdG9yeShyZXNvbHZlLCByZWplY3QpO1xuXG4gICAgaWYgKGlzT2JqZWN0KHJlcykpIHtcbiAgICAgIGlmIChpc1Byb21pc2UocmVzKSkge1xuICAgICAgICAvLyAoKSA9PiBQcm9taXNlXG4gICAgICAgIGlmIChpc1VuZGVmKGZhY3RvcnkucmVzb2x2ZWQpKSB7XG4gICAgICAgICAgcmVzLnRoZW4ocmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChpc1Byb21pc2UocmVzLmNvbXBvbmVudCkpIHtcbiAgICAgICAgcmVzLmNvbXBvbmVudC50aGVuKHJlc29sdmUsIHJlamVjdCk7XG5cbiAgICAgICAgaWYgKGlzRGVmKHJlcy5lcnJvcikpIHtcbiAgICAgICAgICBmYWN0b3J5LmVycm9yQ29tcCA9IGVuc3VyZUN0b3IocmVzLmVycm9yLCBiYXNlQ3Rvcik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNEZWYocmVzLmxvYWRpbmcpKSB7XG4gICAgICAgICAgZmFjdG9yeS5sb2FkaW5nQ29tcCA9IGVuc3VyZUN0b3IocmVzLmxvYWRpbmcsIGJhc2VDdG9yKTtcbiAgICAgICAgICBpZiAocmVzLmRlbGF5ID09PSAwKSB7XG4gICAgICAgICAgICBmYWN0b3J5LmxvYWRpbmcgPSB0cnVlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aW1lckxvYWRpbmcgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgdGltZXJMb2FkaW5nID0gbnVsbDtcbiAgICAgICAgICAgICAgaWYgKGlzVW5kZWYoZmFjdG9yeS5yZXNvbHZlZCkgJiYgaXNVbmRlZihmYWN0b3J5LmVycm9yKSkge1xuICAgICAgICAgICAgICAgIGZhY3RvcnkubG9hZGluZyA9IHRydWU7XG4gICAgICAgICAgICAgICAgZm9yY2VSZW5kZXIoZmFsc2UpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCByZXMuZGVsYXkgfHwgMjAwKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNEZWYocmVzLnRpbWVvdXQpKSB7XG4gICAgICAgICAgdGltZXJUaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aW1lclRpbWVvdXQgPSBudWxsO1xuICAgICAgICAgICAgaWYgKGlzVW5kZWYoZmFjdG9yeS5yZXNvbHZlZCkpIHtcbiAgICAgICAgICAgICAgcmVqZWN0KFxuICAgICAgICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbidcbiAgICAgICAgICAgICAgICAgID8gKFwidGltZW91dCAoXCIgKyAocmVzLnRpbWVvdXQpICsgXCJtcylcIilcbiAgICAgICAgICAgICAgICAgIDogbnVsbFxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sIHJlcy50aW1lb3V0KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHN5bmMgPSBmYWxzZTtcbiAgICAvLyByZXR1cm4gaW4gY2FzZSByZXNvbHZlZCBzeW5jaHJvbm91c2x5XG4gICAgcmV0dXJuIGZhY3RvcnkubG9hZGluZ1xuICAgICAgPyBmYWN0b3J5LmxvYWRpbmdDb21wXG4gICAgICA6IGZhY3RvcnkucmVzb2x2ZWRcbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gZ2V0Rmlyc3RDb21wb25lbnRDaGlsZCAoY2hpbGRyZW4pIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGMgPSBjaGlsZHJlbltpXTtcbiAgICAgIGlmIChpc0RlZihjKSAmJiAoaXNEZWYoYy5jb21wb25lbnRPcHRpb25zKSB8fCBpc0FzeW5jUGxhY2Vob2xkZXIoYykpKSB7XG4gICAgICAgIHJldHVybiBjXG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qICAqL1xuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdEV2ZW50cyAodm0pIHtcbiAgdm0uX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHZtLl9oYXNIb29rRXZlbnQgPSBmYWxzZTtcbiAgLy8gaW5pdCBwYXJlbnQgYXR0YWNoZWQgZXZlbnRzXG4gIHZhciBsaXN0ZW5lcnMgPSB2bS4kb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzO1xuICBpZiAobGlzdGVuZXJzKSB7XG4gICAgdXBkYXRlQ29tcG9uZW50TGlzdGVuZXJzKHZtLCBsaXN0ZW5lcnMpO1xuICB9XG59XG5cbnZhciB0YXJnZXQ7XG5cbmZ1bmN0aW9uIGFkZCAoZXZlbnQsIGZuKSB7XG4gIHRhcmdldC4kb24oZXZlbnQsIGZuKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlJDEgKGV2ZW50LCBmbikge1xuICB0YXJnZXQuJG9mZihldmVudCwgZm4pO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVPbmNlSGFuZGxlciAoZXZlbnQsIGZuKSB7XG4gIHZhciBfdGFyZ2V0ID0gdGFyZ2V0O1xuICByZXR1cm4gZnVuY3Rpb24gb25jZUhhbmRsZXIgKCkge1xuICAgIHZhciByZXMgPSBmbi5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgIGlmIChyZXMgIT09IG51bGwpIHtcbiAgICAgIF90YXJnZXQuJG9mZihldmVudCwgb25jZUhhbmRsZXIpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiB1cGRhdGVDb21wb25lbnRMaXN0ZW5lcnMgKFxuICB2bSxcbiAgbGlzdGVuZXJzLFxuICBvbGRMaXN0ZW5lcnNcbikge1xuICB0YXJnZXQgPSB2bTtcbiAgdXBkYXRlTGlzdGVuZXJzKGxpc3RlbmVycywgb2xkTGlzdGVuZXJzIHx8IHt9LCBhZGQsIHJlbW92ZSQxLCBjcmVhdGVPbmNlSGFuZGxlciwgdm0pO1xuICB0YXJnZXQgPSB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIGV2ZW50c01peGluIChWdWUpIHtcbiAgdmFyIGhvb2tSRSA9IC9eaG9vazovO1xuICBWdWUucHJvdG90eXBlLiRvbiA9IGZ1bmN0aW9uIChldmVudCwgZm4pIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIGlmIChBcnJheS5pc0FycmF5KGV2ZW50KSkge1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBldmVudC5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgdm0uJG9uKGV2ZW50W2ldLCBmbik7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICh2bS5fZXZlbnRzW2V2ZW50XSB8fCAodm0uX2V2ZW50c1tldmVudF0gPSBbXSkpLnB1c2goZm4pO1xuICAgICAgLy8gb3B0aW1pemUgaG9vazpldmVudCBjb3N0IGJ5IHVzaW5nIGEgYm9vbGVhbiBmbGFnIG1hcmtlZCBhdCByZWdpc3RyYXRpb25cbiAgICAgIC8vIGluc3RlYWQgb2YgYSBoYXNoIGxvb2t1cFxuICAgICAgaWYgKGhvb2tSRS50ZXN0KGV2ZW50KSkge1xuICAgICAgICB2bS5faGFzSG9va0V2ZW50ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZtXG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS4kb25jZSA9IGZ1bmN0aW9uIChldmVudCwgZm4pIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIGZ1bmN0aW9uIG9uICgpIHtcbiAgICAgIHZtLiRvZmYoZXZlbnQsIG9uKTtcbiAgICAgIGZuLmFwcGx5KHZtLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgICBvbi5mbiA9IGZuO1xuICAgIHZtLiRvbihldmVudCwgb24pO1xuICAgIHJldHVybiB2bVxuICB9O1xuXG4gIFZ1ZS5wcm90b3R5cGUuJG9mZiA9IGZ1bmN0aW9uIChldmVudCwgZm4pIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIC8vIGFsbFxuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgdm0uX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICByZXR1cm4gdm1cbiAgICB9XG4gICAgLy8gYXJyYXkgb2YgZXZlbnRzXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZXZlbnQpKSB7XG4gICAgICBmb3IgKHZhciBpJDEgPSAwLCBsID0gZXZlbnQubGVuZ3RoOyBpJDEgPCBsOyBpJDErKykge1xuICAgICAgICB2bS4kb2ZmKGV2ZW50W2kkMV0sIGZuKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2bVxuICAgIH1cbiAgICAvLyBzcGVjaWZpYyBldmVudFxuICAgIHZhciBjYnMgPSB2bS5fZXZlbnRzW2V2ZW50XTtcbiAgICBpZiAoIWNicykge1xuICAgICAgcmV0dXJuIHZtXG4gICAgfVxuICAgIGlmICghZm4pIHtcbiAgICAgIHZtLl9ldmVudHNbZXZlbnRdID0gbnVsbDtcbiAgICAgIHJldHVybiB2bVxuICAgIH1cbiAgICAvLyBzcGVjaWZpYyBoYW5kbGVyXG4gICAgdmFyIGNiO1xuICAgIHZhciBpID0gY2JzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICBjYiA9IGNic1tpXTtcbiAgICAgIGlmIChjYiA9PT0gZm4gfHwgY2IuZm4gPT09IGZuKSB7XG4gICAgICAgIGNicy5zcGxpY2UoaSwgMSk7XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB2bVxuICB9O1xuXG4gIFZ1ZS5wcm90b3R5cGUuJGVtaXQgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgbG93ZXJDYXNlRXZlbnQgPSBldmVudC50b0xvd2VyQ2FzZSgpO1xuICAgICAgaWYgKGxvd2VyQ2FzZUV2ZW50ICE9PSBldmVudCAmJiB2bS5fZXZlbnRzW2xvd2VyQ2FzZUV2ZW50XSkge1xuICAgICAgICB0aXAoXG4gICAgICAgICAgXCJFdmVudCBcXFwiXCIgKyBsb3dlckNhc2VFdmVudCArIFwiXFxcIiBpcyBlbWl0dGVkIGluIGNvbXBvbmVudCBcIiArXG4gICAgICAgICAgKGZvcm1hdENvbXBvbmVudE5hbWUodm0pKSArIFwiIGJ1dCB0aGUgaGFuZGxlciBpcyByZWdpc3RlcmVkIGZvciBcXFwiXCIgKyBldmVudCArIFwiXFxcIi4gXCIgK1xuICAgICAgICAgIFwiTm90ZSB0aGF0IEhUTUwgYXR0cmlidXRlcyBhcmUgY2FzZS1pbnNlbnNpdGl2ZSBhbmQgeW91IGNhbm5vdCB1c2UgXCIgK1xuICAgICAgICAgIFwidi1vbiB0byBsaXN0ZW4gdG8gY2FtZWxDYXNlIGV2ZW50cyB3aGVuIHVzaW5nIGluLURPTSB0ZW1wbGF0ZXMuIFwiICtcbiAgICAgICAgICBcIllvdSBzaG91bGQgcHJvYmFibHkgdXNlIFxcXCJcIiArIChoeXBoZW5hdGUoZXZlbnQpKSArIFwiXFxcIiBpbnN0ZWFkIG9mIFxcXCJcIiArIGV2ZW50ICsgXCJcXFwiLlwiXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIHZhciBjYnMgPSB2bS5fZXZlbnRzW2V2ZW50XTtcbiAgICBpZiAoY2JzKSB7XG4gICAgICBjYnMgPSBjYnMubGVuZ3RoID4gMSA/IHRvQXJyYXkoY2JzKSA6IGNicztcbiAgICAgIHZhciBhcmdzID0gdG9BcnJheShhcmd1bWVudHMsIDEpO1xuICAgICAgdmFyIGluZm8gPSBcImV2ZW50IGhhbmRsZXIgZm9yIFxcXCJcIiArIGV2ZW50ICsgXCJcXFwiXCI7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGNicy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgaW52b2tlV2l0aEVycm9ySGFuZGxpbmcoY2JzW2ldLCB2bSwgYXJncywgdm0sIGluZm8pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdm1cbiAgfTtcbn1cblxuLyogICovXG5cbnZhciBhY3RpdmVJbnN0YW5jZSA9IG51bGw7XG52YXIgaXNVcGRhdGluZ0NoaWxkQ29tcG9uZW50ID0gZmFsc2U7XG5cbmZ1bmN0aW9uIHNldEFjdGl2ZUluc3RhbmNlKHZtKSB7XG4gIHZhciBwcmV2QWN0aXZlSW5zdGFuY2UgPSBhY3RpdmVJbnN0YW5jZTtcbiAgYWN0aXZlSW5zdGFuY2UgPSB2bTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBhY3RpdmVJbnN0YW5jZSA9IHByZXZBY3RpdmVJbnN0YW5jZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbml0TGlmZWN5Y2xlICh2bSkge1xuICB2YXIgb3B0aW9ucyA9IHZtLiRvcHRpb25zO1xuXG4gIC8vIGxvY2F0ZSBmaXJzdCBub24tYWJzdHJhY3QgcGFyZW50XG4gIHZhciBwYXJlbnQgPSBvcHRpb25zLnBhcmVudDtcbiAgaWYgKHBhcmVudCAmJiAhb3B0aW9ucy5hYnN0cmFjdCkge1xuICAgIHdoaWxlIChwYXJlbnQuJG9wdGlvbnMuYWJzdHJhY3QgJiYgcGFyZW50LiRwYXJlbnQpIHtcbiAgICAgIHBhcmVudCA9IHBhcmVudC4kcGFyZW50O1xuICAgIH1cbiAgICBwYXJlbnQuJGNoaWxkcmVuLnB1c2godm0pO1xuICB9XG5cbiAgdm0uJHBhcmVudCA9IHBhcmVudDtcbiAgdm0uJHJvb3QgPSBwYXJlbnQgPyBwYXJlbnQuJHJvb3QgOiB2bTtcblxuICB2bS4kY2hpbGRyZW4gPSBbXTtcbiAgdm0uJHJlZnMgPSB7fTtcblxuICB2bS5fd2F0Y2hlciA9IG51bGw7XG4gIHZtLl9pbmFjdGl2ZSA9IG51bGw7XG4gIHZtLl9kaXJlY3RJbmFjdGl2ZSA9IGZhbHNlO1xuICB2bS5faXNNb3VudGVkID0gZmFsc2U7XG4gIHZtLl9pc0Rlc3Ryb3llZCA9IGZhbHNlO1xuICB2bS5faXNCZWluZ0Rlc3Ryb3llZCA9IGZhbHNlO1xufVxuXG5mdW5jdGlvbiBsaWZlY3ljbGVNaXhpbiAoVnVlKSB7XG4gIFZ1ZS5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uICh2bm9kZSwgaHlkcmF0aW5nKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICB2YXIgcHJldkVsID0gdm0uJGVsO1xuICAgIHZhciBwcmV2Vm5vZGUgPSB2bS5fdm5vZGU7XG4gICAgdmFyIHJlc3RvcmVBY3RpdmVJbnN0YW5jZSA9IHNldEFjdGl2ZUluc3RhbmNlKHZtKTtcbiAgICB2bS5fdm5vZGUgPSB2bm9kZTtcbiAgICAvLyBWdWUucHJvdG90eXBlLl9fcGF0Y2hfXyBpcyBpbmplY3RlZCBpbiBlbnRyeSBwb2ludHNcbiAgICAvLyBiYXNlZCBvbiB0aGUgcmVuZGVyaW5nIGJhY2tlbmQgdXNlZC5cbiAgICBpZiAoIXByZXZWbm9kZSkge1xuICAgICAgLy8gaW5pdGlhbCByZW5kZXJcbiAgICAgIHZtLiRlbCA9IHZtLl9fcGF0Y2hfXyh2bS4kZWwsIHZub2RlLCBoeWRyYXRpbmcsIGZhbHNlIC8qIHJlbW92ZU9ubHkgKi8pO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyB1cGRhdGVzXG4gICAgICB2bS4kZWwgPSB2bS5fX3BhdGNoX18ocHJldlZub2RlLCB2bm9kZSk7XG4gICAgfVxuICAgIHJlc3RvcmVBY3RpdmVJbnN0YW5jZSgpO1xuICAgIC8vIHVwZGF0ZSBfX3Z1ZV9fIHJlZmVyZW5jZVxuICAgIGlmIChwcmV2RWwpIHtcbiAgICAgIHByZXZFbC5fX3Z1ZV9fID0gbnVsbDtcbiAgICB9XG4gICAgaWYgKHZtLiRlbCkge1xuICAgICAgdm0uJGVsLl9fdnVlX18gPSB2bTtcbiAgICB9XG4gICAgLy8gaWYgcGFyZW50IGlzIGFuIEhPQywgdXBkYXRlIGl0cyAkZWwgYXMgd2VsbFxuICAgIGlmICh2bS4kdm5vZGUgJiYgdm0uJHBhcmVudCAmJiB2bS4kdm5vZGUgPT09IHZtLiRwYXJlbnQuX3Zub2RlKSB7XG4gICAgICB2bS4kcGFyZW50LiRlbCA9IHZtLiRlbDtcbiAgICB9XG4gICAgLy8gdXBkYXRlZCBob29rIGlzIGNhbGxlZCBieSB0aGUgc2NoZWR1bGVyIHRvIGVuc3VyZSB0aGF0IGNoaWxkcmVuIGFyZVxuICAgIC8vIHVwZGF0ZWQgaW4gYSBwYXJlbnQncyB1cGRhdGVkIGhvb2suXG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS4kZm9yY2VVcGRhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICBpZiAodm0uX3dhdGNoZXIpIHtcbiAgICAgIHZtLl93YXRjaGVyLnVwZGF0ZSgpO1xuICAgIH1cbiAgfTtcblxuICBWdWUucHJvdG90eXBlLiRkZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgaWYgKHZtLl9pc0JlaW5nRGVzdHJveWVkKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgY2FsbEhvb2sodm0sICdiZWZvcmVEZXN0cm95Jyk7XG4gICAgdm0uX2lzQmVpbmdEZXN0cm95ZWQgPSB0cnVlO1xuICAgIC8vIHJlbW92ZSBzZWxmIGZyb20gcGFyZW50XG4gICAgdmFyIHBhcmVudCA9IHZtLiRwYXJlbnQ7XG4gICAgaWYgKHBhcmVudCAmJiAhcGFyZW50Ll9pc0JlaW5nRGVzdHJveWVkICYmICF2bS4kb3B0aW9ucy5hYnN0cmFjdCkge1xuICAgICAgcmVtb3ZlKHBhcmVudC4kY2hpbGRyZW4sIHZtKTtcbiAgICB9XG4gICAgLy8gdGVhcmRvd24gd2F0Y2hlcnNcbiAgICBpZiAodm0uX3dhdGNoZXIpIHtcbiAgICAgIHZtLl93YXRjaGVyLnRlYXJkb3duKCk7XG4gICAgfVxuICAgIHZhciBpID0gdm0uX3dhdGNoZXJzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICB2bS5fd2F0Y2hlcnNbaV0udGVhcmRvd24oKTtcbiAgICB9XG4gICAgLy8gcmVtb3ZlIHJlZmVyZW5jZSBmcm9tIGRhdGEgb2JcbiAgICAvLyBmcm96ZW4gb2JqZWN0IG1heSBub3QgaGF2ZSBvYnNlcnZlci5cbiAgICBpZiAodm0uX2RhdGEuX19vYl9fKSB7XG4gICAgICB2bS5fZGF0YS5fX29iX18udm1Db3VudC0tO1xuICAgIH1cbiAgICAvLyBjYWxsIHRoZSBsYXN0IGhvb2suLi5cbiAgICB2bS5faXNEZXN0cm95ZWQgPSB0cnVlO1xuICAgIC8vIGludm9rZSBkZXN0cm95IGhvb2tzIG9uIGN1cnJlbnQgcmVuZGVyZWQgdHJlZVxuICAgIHZtLl9fcGF0Y2hfXyh2bS5fdm5vZGUsIG51bGwpO1xuICAgIC8vIGZpcmUgZGVzdHJveWVkIGhvb2tcbiAgICBjYWxsSG9vayh2bSwgJ2Rlc3Ryb3llZCcpO1xuICAgIC8vIHR1cm4gb2ZmIGFsbCBpbnN0YW5jZSBsaXN0ZW5lcnMuXG4gICAgdm0uJG9mZigpO1xuICAgIC8vIHJlbW92ZSBfX3Z1ZV9fIHJlZmVyZW5jZVxuICAgIGlmICh2bS4kZWwpIHtcbiAgICAgIHZtLiRlbC5fX3Z1ZV9fID0gbnVsbDtcbiAgICB9XG4gICAgLy8gcmVsZWFzZSBjaXJjdWxhciByZWZlcmVuY2UgKCM2NzU5KVxuICAgIGlmICh2bS4kdm5vZGUpIHtcbiAgICAgIHZtLiR2bm9kZS5wYXJlbnQgPSBudWxsO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gbW91bnRDb21wb25lbnQgKFxuICB2bSxcbiAgZWwsXG4gIGh5ZHJhdGluZ1xuKSB7XG4gIHZtLiRlbCA9IGVsO1xuICBpZiAoIXZtLiRvcHRpb25zLnJlbmRlcikge1xuICAgIHZtLiRvcHRpb25zLnJlbmRlciA9IGNyZWF0ZUVtcHR5Vk5vZGU7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgaWYgKCh2bS4kb3B0aW9ucy50ZW1wbGF0ZSAmJiB2bS4kb3B0aW9ucy50ZW1wbGF0ZS5jaGFyQXQoMCkgIT09ICcjJykgfHxcbiAgICAgICAgdm0uJG9wdGlvbnMuZWwgfHwgZWwpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAnWW91IGFyZSB1c2luZyB0aGUgcnVudGltZS1vbmx5IGJ1aWxkIG9mIFZ1ZSB3aGVyZSB0aGUgdGVtcGxhdGUgJyArXG4gICAgICAgICAgJ2NvbXBpbGVyIGlzIG5vdCBhdmFpbGFibGUuIEVpdGhlciBwcmUtY29tcGlsZSB0aGUgdGVtcGxhdGVzIGludG8gJyArXG4gICAgICAgICAgJ3JlbmRlciBmdW5jdGlvbnMsIG9yIHVzZSB0aGUgY29tcGlsZXItaW5jbHVkZWQgYnVpbGQuJyxcbiAgICAgICAgICB2bVxuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAnRmFpbGVkIHRvIG1vdW50IGNvbXBvbmVudDogdGVtcGxhdGUgb3IgcmVuZGVyIGZ1bmN0aW9uIG5vdCBkZWZpbmVkLicsXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgY2FsbEhvb2sodm0sICdiZWZvcmVNb3VudCcpO1xuXG4gIHZhciB1cGRhdGVDb21wb25lbnQ7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBjb25maWcucGVyZm9ybWFuY2UgJiYgbWFyaykge1xuICAgIHVwZGF0ZUNvbXBvbmVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBuYW1lID0gdm0uX25hbWU7XG4gICAgICB2YXIgaWQgPSB2bS5fdWlkO1xuICAgICAgdmFyIHN0YXJ0VGFnID0gXCJ2dWUtcGVyZi1zdGFydDpcIiArIGlkO1xuICAgICAgdmFyIGVuZFRhZyA9IFwidnVlLXBlcmYtZW5kOlwiICsgaWQ7XG5cbiAgICAgIG1hcmsoc3RhcnRUYWcpO1xuICAgICAgdmFyIHZub2RlID0gdm0uX3JlbmRlcigpO1xuICAgICAgbWFyayhlbmRUYWcpO1xuICAgICAgbWVhc3VyZSgoXCJ2dWUgXCIgKyBuYW1lICsgXCIgcmVuZGVyXCIpLCBzdGFydFRhZywgZW5kVGFnKTtcblxuICAgICAgbWFyayhzdGFydFRhZyk7XG4gICAgICB2bS5fdXBkYXRlKHZub2RlLCBoeWRyYXRpbmcpO1xuICAgICAgbWFyayhlbmRUYWcpO1xuICAgICAgbWVhc3VyZSgoXCJ2dWUgXCIgKyBuYW1lICsgXCIgcGF0Y2hcIiksIHN0YXJ0VGFnLCBlbmRUYWcpO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgdXBkYXRlQ29tcG9uZW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgdm0uX3VwZGF0ZSh2bS5fcmVuZGVyKCksIGh5ZHJhdGluZyk7XG4gICAgfTtcbiAgfVxuXG4gIC8vIHdlIHNldCB0aGlzIHRvIHZtLl93YXRjaGVyIGluc2lkZSB0aGUgd2F0Y2hlcidzIGNvbnN0cnVjdG9yXG4gIC8vIHNpbmNlIHRoZSB3YXRjaGVyJ3MgaW5pdGlhbCBwYXRjaCBtYXkgY2FsbCAkZm9yY2VVcGRhdGUgKGUuZy4gaW5zaWRlIGNoaWxkXG4gIC8vIGNvbXBvbmVudCdzIG1vdW50ZWQgaG9vayksIHdoaWNoIHJlbGllcyBvbiB2bS5fd2F0Y2hlciBiZWluZyBhbHJlYWR5IGRlZmluZWRcbiAgbmV3IFdhdGNoZXIodm0sIHVwZGF0ZUNvbXBvbmVudCwgbm9vcCwge1xuICAgIGJlZm9yZTogZnVuY3Rpb24gYmVmb3JlICgpIHtcbiAgICAgIGlmICh2bS5faXNNb3VudGVkICYmICF2bS5faXNEZXN0cm95ZWQpIHtcbiAgICAgICAgY2FsbEhvb2sodm0sICdiZWZvcmVVcGRhdGUnKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHRydWUgLyogaXNSZW5kZXJXYXRjaGVyICovKTtcbiAgaHlkcmF0aW5nID0gZmFsc2U7XG5cbiAgLy8gbWFudWFsbHkgbW91bnRlZCBpbnN0YW5jZSwgY2FsbCBtb3VudGVkIG9uIHNlbGZcbiAgLy8gbW91bnRlZCBpcyBjYWxsZWQgZm9yIHJlbmRlci1jcmVhdGVkIGNoaWxkIGNvbXBvbmVudHMgaW4gaXRzIGluc2VydGVkIGhvb2tcbiAgaWYgKHZtLiR2bm9kZSA9PSBudWxsKSB7XG4gICAgdm0uX2lzTW91bnRlZCA9IHRydWU7XG4gICAgY2FsbEhvb2sodm0sICdtb3VudGVkJyk7XG4gIH1cbiAgcmV0dXJuIHZtXG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUNoaWxkQ29tcG9uZW50IChcbiAgdm0sXG4gIHByb3BzRGF0YSxcbiAgbGlzdGVuZXJzLFxuICBwYXJlbnRWbm9kZSxcbiAgcmVuZGVyQ2hpbGRyZW5cbikge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlzVXBkYXRpbmdDaGlsZENvbXBvbmVudCA9IHRydWU7XG4gIH1cblxuICAvLyBkZXRlcm1pbmUgd2hldGhlciBjb21wb25lbnQgaGFzIHNsb3QgY2hpbGRyZW5cbiAgLy8gd2UgbmVlZCB0byBkbyB0aGlzIGJlZm9yZSBvdmVyd3JpdGluZyAkb3B0aW9ucy5fcmVuZGVyQ2hpbGRyZW4uXG5cbiAgLy8gY2hlY2sgaWYgdGhlcmUgYXJlIGR5bmFtaWMgc2NvcGVkU2xvdHMgKGhhbmQtd3JpdHRlbiBvciBjb21waWxlZCBidXQgd2l0aFxuICAvLyBkeW5hbWljIHNsb3QgbmFtZXMpLiBTdGF0aWMgc2NvcGVkIHNsb3RzIGNvbXBpbGVkIGZyb20gdGVtcGxhdGUgaGFzIHRoZVxuICAvLyBcIiRzdGFibGVcIiBtYXJrZXIuXG4gIHZhciBuZXdTY29wZWRTbG90cyA9IHBhcmVudFZub2RlLmRhdGEuc2NvcGVkU2xvdHM7XG4gIHZhciBvbGRTY29wZWRTbG90cyA9IHZtLiRzY29wZWRTbG90cztcbiAgdmFyIGhhc0R5bmFtaWNTY29wZWRTbG90ID0gISEoXG4gICAgKG5ld1Njb3BlZFNsb3RzICYmICFuZXdTY29wZWRTbG90cy4kc3RhYmxlKSB8fFxuICAgIChvbGRTY29wZWRTbG90cyAhPT0gZW1wdHlPYmplY3QgJiYgIW9sZFNjb3BlZFNsb3RzLiRzdGFibGUpIHx8XG4gICAgKG5ld1Njb3BlZFNsb3RzICYmIHZtLiRzY29wZWRTbG90cy4ka2V5ICE9PSBuZXdTY29wZWRTbG90cy4ka2V5KSB8fFxuICAgICghbmV3U2NvcGVkU2xvdHMgJiYgdm0uJHNjb3BlZFNsb3RzLiRrZXkpXG4gICk7XG5cbiAgLy8gQW55IHN0YXRpYyBzbG90IGNoaWxkcmVuIGZyb20gdGhlIHBhcmVudCBtYXkgaGF2ZSBjaGFuZ2VkIGR1cmluZyBwYXJlbnQnc1xuICAvLyB1cGRhdGUuIER5bmFtaWMgc2NvcGVkIHNsb3RzIG1heSBhbHNvIGhhdmUgY2hhbmdlZC4gSW4gc3VjaCBjYXNlcywgYSBmb3JjZWRcbiAgLy8gdXBkYXRlIGlzIG5lY2Vzc2FyeSB0byBlbnN1cmUgY29ycmVjdG5lc3MuXG4gIHZhciBuZWVkc0ZvcmNlVXBkYXRlID0gISEoXG4gICAgcmVuZGVyQ2hpbGRyZW4gfHwgICAgICAgICAgICAgICAvLyBoYXMgbmV3IHN0YXRpYyBzbG90c1xuICAgIHZtLiRvcHRpb25zLl9yZW5kZXJDaGlsZHJlbiB8fCAgLy8gaGFzIG9sZCBzdGF0aWMgc2xvdHNcbiAgICBoYXNEeW5hbWljU2NvcGVkU2xvdFxuICApO1xuXG4gIHZtLiRvcHRpb25zLl9wYXJlbnRWbm9kZSA9IHBhcmVudFZub2RlO1xuICB2bS4kdm5vZGUgPSBwYXJlbnRWbm9kZTsgLy8gdXBkYXRlIHZtJ3MgcGxhY2Vob2xkZXIgbm9kZSB3aXRob3V0IHJlLXJlbmRlclxuXG4gIGlmICh2bS5fdm5vZGUpIHsgLy8gdXBkYXRlIGNoaWxkIHRyZWUncyBwYXJlbnRcbiAgICB2bS5fdm5vZGUucGFyZW50ID0gcGFyZW50Vm5vZGU7XG4gIH1cbiAgdm0uJG9wdGlvbnMuX3JlbmRlckNoaWxkcmVuID0gcmVuZGVyQ2hpbGRyZW47XG5cbiAgLy8gdXBkYXRlICRhdHRycyBhbmQgJGxpc3RlbmVycyBoYXNoXG4gIC8vIHRoZXNlIGFyZSBhbHNvIHJlYWN0aXZlIHNvIHRoZXkgbWF5IHRyaWdnZXIgY2hpbGQgdXBkYXRlIGlmIHRoZSBjaGlsZFxuICAvLyB1c2VkIHRoZW0gZHVyaW5nIHJlbmRlclxuICB2bS4kYXR0cnMgPSBwYXJlbnRWbm9kZS5kYXRhLmF0dHJzIHx8IGVtcHR5T2JqZWN0O1xuICB2bS4kbGlzdGVuZXJzID0gbGlzdGVuZXJzIHx8IGVtcHR5T2JqZWN0O1xuXG4gIC8vIHVwZGF0ZSBwcm9wc1xuICBpZiAocHJvcHNEYXRhICYmIHZtLiRvcHRpb25zLnByb3BzKSB7XG4gICAgdG9nZ2xlT2JzZXJ2aW5nKGZhbHNlKTtcbiAgICB2YXIgcHJvcHMgPSB2bS5fcHJvcHM7XG4gICAgdmFyIHByb3BLZXlzID0gdm0uJG9wdGlvbnMuX3Byb3BLZXlzIHx8IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcEtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBrZXkgPSBwcm9wS2V5c1tpXTtcbiAgICAgIHZhciBwcm9wT3B0aW9ucyA9IHZtLiRvcHRpb25zLnByb3BzOyAvLyB3dGYgZmxvdz9cbiAgICAgIHByb3BzW2tleV0gPSB2YWxpZGF0ZVByb3Aoa2V5LCBwcm9wT3B0aW9ucywgcHJvcHNEYXRhLCB2bSk7XG4gICAgfVxuICAgIHRvZ2dsZU9ic2VydmluZyh0cnVlKTtcbiAgICAvLyBrZWVwIGEgY29weSBvZiByYXcgcHJvcHNEYXRhXG4gICAgdm0uJG9wdGlvbnMucHJvcHNEYXRhID0gcHJvcHNEYXRhO1xuICB9XG5cbiAgLy8gdXBkYXRlIGxpc3RlbmVyc1xuICBsaXN0ZW5lcnMgPSBsaXN0ZW5lcnMgfHwgZW1wdHlPYmplY3Q7XG4gIHZhciBvbGRMaXN0ZW5lcnMgPSB2bS4kb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzO1xuICB2bS4kb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzID0gbGlzdGVuZXJzO1xuICB1cGRhdGVDb21wb25lbnRMaXN0ZW5lcnModm0sIGxpc3RlbmVycywgb2xkTGlzdGVuZXJzKTtcblxuICAvLyByZXNvbHZlIHNsb3RzICsgZm9yY2UgdXBkYXRlIGlmIGhhcyBjaGlsZHJlblxuICBpZiAobmVlZHNGb3JjZVVwZGF0ZSkge1xuICAgIHZtLiRzbG90cyA9IHJlc29sdmVTbG90cyhyZW5kZXJDaGlsZHJlbiwgcGFyZW50Vm5vZGUuY29udGV4dCk7XG4gICAgdm0uJGZvcmNlVXBkYXRlKCk7XG4gIH1cblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlzVXBkYXRpbmdDaGlsZENvbXBvbmVudCA9IGZhbHNlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGlzSW5JbmFjdGl2ZVRyZWUgKHZtKSB7XG4gIHdoaWxlICh2bSAmJiAodm0gPSB2bS4kcGFyZW50KSkge1xuICAgIGlmICh2bS5faW5hY3RpdmUpIHsgcmV0dXJuIHRydWUgfVxuICB9XG4gIHJldHVybiBmYWxzZVxufVxuXG5mdW5jdGlvbiBhY3RpdmF0ZUNoaWxkQ29tcG9uZW50ICh2bSwgZGlyZWN0KSB7XG4gIGlmIChkaXJlY3QpIHtcbiAgICB2bS5fZGlyZWN0SW5hY3RpdmUgPSBmYWxzZTtcbiAgICBpZiAoaXNJbkluYWN0aXZlVHJlZSh2bSkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgfSBlbHNlIGlmICh2bS5fZGlyZWN0SW5hY3RpdmUpIHtcbiAgICByZXR1cm5cbiAgfVxuICBpZiAodm0uX2luYWN0aXZlIHx8IHZtLl9pbmFjdGl2ZSA9PT0gbnVsbCkge1xuICAgIHZtLl9pbmFjdGl2ZSA9IGZhbHNlO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdm0uJGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhY3RpdmF0ZUNoaWxkQ29tcG9uZW50KHZtLiRjaGlsZHJlbltpXSk7XG4gICAgfVxuICAgIGNhbGxIb29rKHZtLCAnYWN0aXZhdGVkJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZGVhY3RpdmF0ZUNoaWxkQ29tcG9uZW50ICh2bSwgZGlyZWN0KSB7XG4gIGlmIChkaXJlY3QpIHtcbiAgICB2bS5fZGlyZWN0SW5hY3RpdmUgPSB0cnVlO1xuICAgIGlmIChpc0luSW5hY3RpdmVUcmVlKHZtKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICB9XG4gIGlmICghdm0uX2luYWN0aXZlKSB7XG4gICAgdm0uX2luYWN0aXZlID0gdHJ1ZTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZtLiRjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgZGVhY3RpdmF0ZUNoaWxkQ29tcG9uZW50KHZtLiRjaGlsZHJlbltpXSk7XG4gICAgfVxuICAgIGNhbGxIb29rKHZtLCAnZGVhY3RpdmF0ZWQnKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjYWxsSG9vayAodm0sIGhvb2spIHtcbiAgLy8gIzc1NzMgZGlzYWJsZSBkZXAgY29sbGVjdGlvbiB3aGVuIGludm9raW5nIGxpZmVjeWNsZSBob29rc1xuICBwdXNoVGFyZ2V0KCk7XG4gIHZhciBoYW5kbGVycyA9IHZtLiRvcHRpb25zW2hvb2tdO1xuICB2YXIgaW5mbyA9IGhvb2sgKyBcIiBob29rXCI7XG4gIGlmIChoYW5kbGVycykge1xuICAgIGZvciAodmFyIGkgPSAwLCBqID0gaGFuZGxlcnMubGVuZ3RoOyBpIDwgajsgaSsrKSB7XG4gICAgICBpbnZva2VXaXRoRXJyb3JIYW5kbGluZyhoYW5kbGVyc1tpXSwgdm0sIG51bGwsIHZtLCBpbmZvKTtcbiAgICB9XG4gIH1cbiAgaWYgKHZtLl9oYXNIb29rRXZlbnQpIHtcbiAgICB2bS4kZW1pdCgnaG9vazonICsgaG9vayk7XG4gIH1cbiAgcG9wVGFyZ2V0KCk7XG59XG5cbi8qICAqL1xuXG52YXIgTUFYX1VQREFURV9DT1VOVCA9IDEwMDtcblxudmFyIHF1ZXVlID0gW107XG52YXIgYWN0aXZhdGVkQ2hpbGRyZW4gPSBbXTtcbnZhciBoYXMgPSB7fTtcbnZhciBjaXJjdWxhciA9IHt9O1xudmFyIHdhaXRpbmcgPSBmYWxzZTtcbnZhciBmbHVzaGluZyA9IGZhbHNlO1xudmFyIGluZGV4ID0gMDtcblxuLyoqXG4gKiBSZXNldCB0aGUgc2NoZWR1bGVyJ3Mgc3RhdGUuXG4gKi9cbmZ1bmN0aW9uIHJlc2V0U2NoZWR1bGVyU3RhdGUgKCkge1xuICBpbmRleCA9IHF1ZXVlLmxlbmd0aCA9IGFjdGl2YXRlZENoaWxkcmVuLmxlbmd0aCA9IDA7XG4gIGhhcyA9IHt9O1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGNpcmN1bGFyID0ge307XG4gIH1cbiAgd2FpdGluZyA9IGZsdXNoaW5nID0gZmFsc2U7XG59XG5cbi8vIEFzeW5jIGVkZ2UgY2FzZSAjNjU2NiByZXF1aXJlcyBzYXZpbmcgdGhlIHRpbWVzdGFtcCB3aGVuIGV2ZW50IGxpc3RlbmVycyBhcmVcbi8vIGF0dGFjaGVkLiBIb3dldmVyLCBjYWxsaW5nIHBlcmZvcm1hbmNlLm5vdygpIGhhcyBhIHBlcmYgb3ZlcmhlYWQgZXNwZWNpYWxseVxuLy8gaWYgdGhlIHBhZ2UgaGFzIHRob3VzYW5kcyBvZiBldmVudCBsaXN0ZW5lcnMuIEluc3RlYWQsIHdlIHRha2UgYSB0aW1lc3RhbXBcbi8vIGV2ZXJ5IHRpbWUgdGhlIHNjaGVkdWxlciBmbHVzaGVzIGFuZCB1c2UgdGhhdCBmb3IgYWxsIGV2ZW50IGxpc3RlbmVyc1xuLy8gYXR0YWNoZWQgZHVyaW5nIHRoYXQgZmx1c2guXG52YXIgY3VycmVudEZsdXNoVGltZXN0YW1wID0gMDtcblxuLy8gQXN5bmMgZWRnZSBjYXNlIGZpeCByZXF1aXJlcyBzdG9yaW5nIGFuIGV2ZW50IGxpc3RlbmVyJ3MgYXR0YWNoIHRpbWVzdGFtcC5cbnZhciBnZXROb3cgPSBEYXRlLm5vdztcblxuLy8gRGV0ZXJtaW5lIHdoYXQgZXZlbnQgdGltZXN0YW1wIHRoZSBicm93c2VyIGlzIHVzaW5nLiBBbm5veWluZ2x5LCB0aGVcbi8vIHRpbWVzdGFtcCBjYW4gZWl0aGVyIGJlIGhpLXJlcyAocmVsYXRpdmUgdG8gcGFnZSBsb2FkKSBvciBsb3ctcmVzXG4vLyAocmVsYXRpdmUgdG8gVU5JWCBlcG9jaCksIHNvIGluIG9yZGVyIHRvIGNvbXBhcmUgdGltZSB3ZSBoYXZlIHRvIHVzZSB0aGVcbi8vIHNhbWUgdGltZXN0YW1wIHR5cGUgd2hlbiBzYXZpbmcgdGhlIGZsdXNoIHRpbWVzdGFtcC5cbi8vIEFsbCBJRSB2ZXJzaW9ucyB1c2UgbG93LXJlcyBldmVudCB0aW1lc3RhbXBzLCBhbmQgaGF2ZSBwcm9ibGVtYXRpYyBjbG9ja1xuLy8gaW1wbGVtZW50YXRpb25zICgjOTYzMilcbmlmIChpbkJyb3dzZXIgJiYgIWlzSUUpIHtcbiAgdmFyIHBlcmZvcm1hbmNlID0gd2luZG93LnBlcmZvcm1hbmNlO1xuICBpZiAoXG4gICAgcGVyZm9ybWFuY2UgJiZcbiAgICB0eXBlb2YgcGVyZm9ybWFuY2Uubm93ID09PSAnZnVuY3Rpb24nICYmXG4gICAgZ2V0Tm93KCkgPiBkb2N1bWVudC5jcmVhdGVFdmVudCgnRXZlbnQnKS50aW1lU3RhbXBcbiAgKSB7XG4gICAgLy8gaWYgdGhlIGV2ZW50IHRpbWVzdGFtcCwgYWx0aG91Z2ggZXZhbHVhdGVkIEFGVEVSIHRoZSBEYXRlLm5vdygpLCBpc1xuICAgIC8vIHNtYWxsZXIgdGhhbiBpdCwgaXQgbWVhbnMgdGhlIGV2ZW50IGlzIHVzaW5nIGEgaGktcmVzIHRpbWVzdGFtcCxcbiAgICAvLyBhbmQgd2UgbmVlZCB0byB1c2UgdGhlIGhpLXJlcyB2ZXJzaW9uIGZvciBldmVudCBsaXN0ZW5lciB0aW1lc3RhbXBzIGFzXG4gICAgLy8gd2VsbC5cbiAgICBnZXROb3cgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBwZXJmb3JtYW5jZS5ub3coKTsgfTtcbiAgfVxufVxuXG4vKipcbiAqIEZsdXNoIGJvdGggcXVldWVzIGFuZCBydW4gdGhlIHdhdGNoZXJzLlxuICovXG5mdW5jdGlvbiBmbHVzaFNjaGVkdWxlclF1ZXVlICgpIHtcbiAgY3VycmVudEZsdXNoVGltZXN0YW1wID0gZ2V0Tm93KCk7XG4gIGZsdXNoaW5nID0gdHJ1ZTtcbiAgdmFyIHdhdGNoZXIsIGlkO1xuXG4gIC8vIFNvcnQgcXVldWUgYmVmb3JlIGZsdXNoLlxuICAvLyBUaGlzIGVuc3VyZXMgdGhhdDpcbiAgLy8gMS4gQ29tcG9uZW50cyBhcmUgdXBkYXRlZCBmcm9tIHBhcmVudCB0byBjaGlsZC4gKGJlY2F1c2UgcGFyZW50IGlzIGFsd2F5c1xuICAvLyAgICBjcmVhdGVkIGJlZm9yZSB0aGUgY2hpbGQpXG4gIC8vIDIuIEEgY29tcG9uZW50J3MgdXNlciB3YXRjaGVycyBhcmUgcnVuIGJlZm9yZSBpdHMgcmVuZGVyIHdhdGNoZXIgKGJlY2F1c2VcbiAgLy8gICAgdXNlciB3YXRjaGVycyBhcmUgY3JlYXRlZCBiZWZvcmUgdGhlIHJlbmRlciB3YXRjaGVyKVxuICAvLyAzLiBJZiBhIGNvbXBvbmVudCBpcyBkZXN0cm95ZWQgZHVyaW5nIGEgcGFyZW50IGNvbXBvbmVudCdzIHdhdGNoZXIgcnVuLFxuICAvLyAgICBpdHMgd2F0Y2hlcnMgY2FuIGJlIHNraXBwZWQuXG4gIHF1ZXVlLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIGEuaWQgLSBiLmlkOyB9KTtcblxuICAvLyBkbyBub3QgY2FjaGUgbGVuZ3RoIGJlY2F1c2UgbW9yZSB3YXRjaGVycyBtaWdodCBiZSBwdXNoZWRcbiAgLy8gYXMgd2UgcnVuIGV4aXN0aW5nIHdhdGNoZXJzXG4gIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IHF1ZXVlLmxlbmd0aDsgaW5kZXgrKykge1xuICAgIHdhdGNoZXIgPSBxdWV1ZVtpbmRleF07XG4gICAgaWYgKHdhdGNoZXIuYmVmb3JlKSB7XG4gICAgICB3YXRjaGVyLmJlZm9yZSgpO1xuICAgIH1cbiAgICBpZCA9IHdhdGNoZXIuaWQ7XG4gICAgaGFzW2lkXSA9IG51bGw7XG4gICAgd2F0Y2hlci5ydW4oKTtcbiAgICAvLyBpbiBkZXYgYnVpbGQsIGNoZWNrIGFuZCBzdG9wIGNpcmN1bGFyIHVwZGF0ZXMuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgaGFzW2lkXSAhPSBudWxsKSB7XG4gICAgICBjaXJjdWxhcltpZF0gPSAoY2lyY3VsYXJbaWRdIHx8IDApICsgMTtcbiAgICAgIGlmIChjaXJjdWxhcltpZF0gPiBNQVhfVVBEQVRFX0NPVU5UKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgJ1lvdSBtYXkgaGF2ZSBhbiBpbmZpbml0ZSB1cGRhdGUgbG9vcCAnICsgKFxuICAgICAgICAgICAgd2F0Y2hlci51c2VyXG4gICAgICAgICAgICAgID8gKFwiaW4gd2F0Y2hlciB3aXRoIGV4cHJlc3Npb24gXFxcIlwiICsgKHdhdGNoZXIuZXhwcmVzc2lvbikgKyBcIlxcXCJcIilcbiAgICAgICAgICAgICAgOiBcImluIGEgY29tcG9uZW50IHJlbmRlciBmdW5jdGlvbi5cIlxuICAgICAgICAgICksXG4gICAgICAgICAgd2F0Y2hlci52bVxuICAgICAgICApO1xuICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIGtlZXAgY29waWVzIG9mIHBvc3QgcXVldWVzIGJlZm9yZSByZXNldHRpbmcgc3RhdGVcbiAgdmFyIGFjdGl2YXRlZFF1ZXVlID0gYWN0aXZhdGVkQ2hpbGRyZW4uc2xpY2UoKTtcbiAgdmFyIHVwZGF0ZWRRdWV1ZSA9IHF1ZXVlLnNsaWNlKCk7XG5cbiAgcmVzZXRTY2hlZHVsZXJTdGF0ZSgpO1xuXG4gIC8vIGNhbGwgY29tcG9uZW50IHVwZGF0ZWQgYW5kIGFjdGl2YXRlZCBob29rc1xuICBjYWxsQWN0aXZhdGVkSG9va3MoYWN0aXZhdGVkUXVldWUpO1xuICBjYWxsVXBkYXRlZEhvb2tzKHVwZGF0ZWRRdWV1ZSk7XG5cbiAgLy8gZGV2dG9vbCBob29rXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoZGV2dG9vbHMgJiYgY29uZmlnLmRldnRvb2xzKSB7XG4gICAgZGV2dG9vbHMuZW1pdCgnZmx1c2gnKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjYWxsVXBkYXRlZEhvb2tzIChxdWV1ZSkge1xuICB2YXIgaSA9IHF1ZXVlLmxlbmd0aDtcbiAgd2hpbGUgKGktLSkge1xuICAgIHZhciB3YXRjaGVyID0gcXVldWVbaV07XG4gICAgdmFyIHZtID0gd2F0Y2hlci52bTtcbiAgICBpZiAodm0uX3dhdGNoZXIgPT09IHdhdGNoZXIgJiYgdm0uX2lzTW91bnRlZCAmJiAhdm0uX2lzRGVzdHJveWVkKSB7XG4gICAgICBjYWxsSG9vayh2bSwgJ3VwZGF0ZWQnKTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBRdWV1ZSBhIGtlcHQtYWxpdmUgY29tcG9uZW50IHRoYXQgd2FzIGFjdGl2YXRlZCBkdXJpbmcgcGF0Y2guXG4gKiBUaGUgcXVldWUgd2lsbCBiZSBwcm9jZXNzZWQgYWZ0ZXIgdGhlIGVudGlyZSB0cmVlIGhhcyBiZWVuIHBhdGNoZWQuXG4gKi9cbmZ1bmN0aW9uIHF1ZXVlQWN0aXZhdGVkQ29tcG9uZW50ICh2bSkge1xuICAvLyBzZXR0aW5nIF9pbmFjdGl2ZSB0byBmYWxzZSBoZXJlIHNvIHRoYXQgYSByZW5kZXIgZnVuY3Rpb24gY2FuXG4gIC8vIHJlbHkgb24gY2hlY2tpbmcgd2hldGhlciBpdCdzIGluIGFuIGluYWN0aXZlIHRyZWUgKGUuZy4gcm91dGVyLXZpZXcpXG4gIHZtLl9pbmFjdGl2ZSA9IGZhbHNlO1xuICBhY3RpdmF0ZWRDaGlsZHJlbi5wdXNoKHZtKTtcbn1cblxuZnVuY3Rpb24gY2FsbEFjdGl2YXRlZEhvb2tzIChxdWV1ZSkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHF1ZXVlLmxlbmd0aDsgaSsrKSB7XG4gICAgcXVldWVbaV0uX2luYWN0aXZlID0gdHJ1ZTtcbiAgICBhY3RpdmF0ZUNoaWxkQ29tcG9uZW50KHF1ZXVlW2ldLCB0cnVlIC8qIHRydWUgKi8pO1xuICB9XG59XG5cbi8qKlxuICogUHVzaCBhIHdhdGNoZXIgaW50byB0aGUgd2F0Y2hlciBxdWV1ZS5cbiAqIEpvYnMgd2l0aCBkdXBsaWNhdGUgSURzIHdpbGwgYmUgc2tpcHBlZCB1bmxlc3MgaXQnc1xuICogcHVzaGVkIHdoZW4gdGhlIHF1ZXVlIGlzIGJlaW5nIGZsdXNoZWQuXG4gKi9cbmZ1bmN0aW9uIHF1ZXVlV2F0Y2hlciAod2F0Y2hlcikge1xuICB2YXIgaWQgPSB3YXRjaGVyLmlkO1xuICBpZiAoaGFzW2lkXSA9PSBudWxsKSB7XG4gICAgaGFzW2lkXSA9IHRydWU7XG4gICAgaWYgKCFmbHVzaGluZykge1xuICAgICAgcXVldWUucHVzaCh3YXRjaGVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gaWYgYWxyZWFkeSBmbHVzaGluZywgc3BsaWNlIHRoZSB3YXRjaGVyIGJhc2VkIG9uIGl0cyBpZFxuICAgICAgLy8gaWYgYWxyZWFkeSBwYXN0IGl0cyBpZCwgaXQgd2lsbCBiZSBydW4gbmV4dCBpbW1lZGlhdGVseS5cbiAgICAgIHZhciBpID0gcXVldWUubGVuZ3RoIC0gMTtcbiAgICAgIHdoaWxlIChpID4gaW5kZXggJiYgcXVldWVbaV0uaWQgPiB3YXRjaGVyLmlkKSB7XG4gICAgICAgIGktLTtcbiAgICAgIH1cbiAgICAgIHF1ZXVlLnNwbGljZShpICsgMSwgMCwgd2F0Y2hlcik7XG4gICAgfVxuICAgIC8vIHF1ZXVlIHRoZSBmbHVzaFxuICAgIGlmICghd2FpdGluZykge1xuICAgICAgd2FpdGluZyA9IHRydWU7XG5cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFjb25maWcuYXN5bmMpIHtcbiAgICAgICAgZmx1c2hTY2hlZHVsZXJRdWV1ZSgpO1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIG5leHRUaWNrKGZsdXNoU2NoZWR1bGVyUXVldWUpO1xuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxuXG5cbnZhciB1aWQkMiA9IDA7XG5cbi8qKlxuICogQSB3YXRjaGVyIHBhcnNlcyBhbiBleHByZXNzaW9uLCBjb2xsZWN0cyBkZXBlbmRlbmNpZXMsXG4gKiBhbmQgZmlyZXMgY2FsbGJhY2sgd2hlbiB0aGUgZXhwcmVzc2lvbiB2YWx1ZSBjaGFuZ2VzLlxuICogVGhpcyBpcyB1c2VkIGZvciBib3RoIHRoZSAkd2F0Y2goKSBhcGkgYW5kIGRpcmVjdGl2ZXMuXG4gKi9cbnZhciBXYXRjaGVyID0gZnVuY3Rpb24gV2F0Y2hlciAoXG4gIHZtLFxuICBleHBPckZuLFxuICBjYixcbiAgb3B0aW9ucyxcbiAgaXNSZW5kZXJXYXRjaGVyXG4pIHtcbiAgdGhpcy52bSA9IHZtO1xuICBpZiAoaXNSZW5kZXJXYXRjaGVyKSB7XG4gICAgdm0uX3dhdGNoZXIgPSB0aGlzO1xuICB9XG4gIHZtLl93YXRjaGVycy5wdXNoKHRoaXMpO1xuICAvLyBvcHRpb25zXG4gIGlmIChvcHRpb25zKSB7XG4gICAgdGhpcy5kZWVwID0gISFvcHRpb25zLmRlZXA7XG4gICAgdGhpcy51c2VyID0gISFvcHRpb25zLnVzZXI7XG4gICAgdGhpcy5sYXp5ID0gISFvcHRpb25zLmxhenk7XG4gICAgdGhpcy5zeW5jID0gISFvcHRpb25zLnN5bmM7XG4gICAgdGhpcy5iZWZvcmUgPSBvcHRpb25zLmJlZm9yZTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmRlZXAgPSB0aGlzLnVzZXIgPSB0aGlzLmxhenkgPSB0aGlzLnN5bmMgPSBmYWxzZTtcbiAgfVxuICB0aGlzLmNiID0gY2I7XG4gIHRoaXMuaWQgPSArK3VpZCQyOyAvLyB1aWQgZm9yIGJhdGNoaW5nXG4gIHRoaXMuYWN0aXZlID0gdHJ1ZTtcbiAgdGhpcy5kaXJ0eSA9IHRoaXMubGF6eTsgLy8gZm9yIGxhenkgd2F0Y2hlcnNcbiAgdGhpcy5kZXBzID0gW107XG4gIHRoaXMubmV3RGVwcyA9IFtdO1xuICB0aGlzLmRlcElkcyA9IG5ldyBfU2V0KCk7XG4gIHRoaXMubmV3RGVwSWRzID0gbmV3IF9TZXQoKTtcbiAgdGhpcy5leHByZXNzaW9uID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJ1xuICAgID8gZXhwT3JGbi50b1N0cmluZygpXG4gICAgOiAnJztcbiAgLy8gcGFyc2UgZXhwcmVzc2lvbiBmb3IgZ2V0dGVyXG4gIGlmICh0eXBlb2YgZXhwT3JGbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHRoaXMuZ2V0dGVyID0gZXhwT3JGbjtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmdldHRlciA9IHBhcnNlUGF0aChleHBPckZuKTtcbiAgICBpZiAoIXRoaXMuZ2V0dGVyKSB7XG4gICAgICB0aGlzLmdldHRlciA9IG5vb3A7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAgIFwiRmFpbGVkIHdhdGNoaW5nIHBhdGg6IFxcXCJcIiArIGV4cE9yRm4gKyBcIlxcXCIgXCIgK1xuICAgICAgICAnV2F0Y2hlciBvbmx5IGFjY2VwdHMgc2ltcGxlIGRvdC1kZWxpbWl0ZWQgcGF0aHMuICcgK1xuICAgICAgICAnRm9yIGZ1bGwgY29udHJvbCwgdXNlIGEgZnVuY3Rpb24gaW5zdGVhZC4nLFxuICAgICAgICB2bVxuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgdGhpcy52YWx1ZSA9IHRoaXMubGF6eVxuICAgID8gdW5kZWZpbmVkXG4gICAgOiB0aGlzLmdldCgpO1xufTtcblxuLyoqXG4gKiBFdmFsdWF0ZSB0aGUgZ2V0dGVyLCBhbmQgcmUtY29sbGVjdCBkZXBlbmRlbmNpZXMuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIGdldCAoKSB7XG4gIHB1c2hUYXJnZXQodGhpcyk7XG4gIHZhciB2YWx1ZTtcbiAgdmFyIHZtID0gdGhpcy52bTtcbiAgdHJ5IHtcbiAgICB2YWx1ZSA9IHRoaXMuZ2V0dGVyLmNhbGwodm0sIHZtKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGlmICh0aGlzLnVzZXIpIHtcbiAgICAgIGhhbmRsZUVycm9yKGUsIHZtLCAoXCJnZXR0ZXIgZm9yIHdhdGNoZXIgXFxcIlwiICsgKHRoaXMuZXhwcmVzc2lvbikgKyBcIlxcXCJcIikpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBlXG4gICAgfVxuICB9IGZpbmFsbHkge1xuICAgIC8vIFwidG91Y2hcIiBldmVyeSBwcm9wZXJ0eSBzbyB0aGV5IGFyZSBhbGwgdHJhY2tlZCBhc1xuICAgIC8vIGRlcGVuZGVuY2llcyBmb3IgZGVlcCB3YXRjaGluZ1xuICAgIGlmICh0aGlzLmRlZXApIHtcbiAgICAgIHRyYXZlcnNlKHZhbHVlKTtcbiAgICB9XG4gICAgcG9wVGFyZ2V0KCk7XG4gICAgdGhpcy5jbGVhbnVwRGVwcygpO1xuICB9XG4gIHJldHVybiB2YWx1ZVxufTtcblxuLyoqXG4gKiBBZGQgYSBkZXBlbmRlbmN5IHRvIHRoaXMgZGlyZWN0aXZlLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS5hZGREZXAgPSBmdW5jdGlvbiBhZGREZXAgKGRlcCkge1xuICB2YXIgaWQgPSBkZXAuaWQ7XG4gIGlmICghdGhpcy5uZXdEZXBJZHMuaGFzKGlkKSkge1xuICAgIHRoaXMubmV3RGVwSWRzLmFkZChpZCk7XG4gICAgdGhpcy5uZXdEZXBzLnB1c2goZGVwKTtcbiAgICBpZiAoIXRoaXMuZGVwSWRzLmhhcyhpZCkpIHtcbiAgICAgIGRlcC5hZGRTdWIodGhpcyk7XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIENsZWFuIHVwIGZvciBkZXBlbmRlbmN5IGNvbGxlY3Rpb24uXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLmNsZWFudXBEZXBzID0gZnVuY3Rpb24gY2xlYW51cERlcHMgKCkge1xuICB2YXIgaSA9IHRoaXMuZGVwcy5sZW5ndGg7XG4gIHdoaWxlIChpLS0pIHtcbiAgICB2YXIgZGVwID0gdGhpcy5kZXBzW2ldO1xuICAgIGlmICghdGhpcy5uZXdEZXBJZHMuaGFzKGRlcC5pZCkpIHtcbiAgICAgIGRlcC5yZW1vdmVTdWIodGhpcyk7XG4gICAgfVxuICB9XG4gIHZhciB0bXAgPSB0aGlzLmRlcElkcztcbiAgdGhpcy5kZXBJZHMgPSB0aGlzLm5ld0RlcElkcztcbiAgdGhpcy5uZXdEZXBJZHMgPSB0bXA7XG4gIHRoaXMubmV3RGVwSWRzLmNsZWFyKCk7XG4gIHRtcCA9IHRoaXMuZGVwcztcbiAgdGhpcy5kZXBzID0gdGhpcy5uZXdEZXBzO1xuICB0aGlzLm5ld0RlcHMgPSB0bXA7XG4gIHRoaXMubmV3RGVwcy5sZW5ndGggPSAwO1xufTtcblxuLyoqXG4gKiBTdWJzY3JpYmVyIGludGVyZmFjZS5cbiAqIFdpbGwgYmUgY2FsbGVkIHdoZW4gYSBkZXBlbmRlbmN5IGNoYW5nZXMuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZSAoKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmICh0aGlzLmxhenkpIHtcbiAgICB0aGlzLmRpcnR5ID0gdHJ1ZTtcbiAgfSBlbHNlIGlmICh0aGlzLnN5bmMpIHtcbiAgICB0aGlzLnJ1bigpO1xuICB9IGVsc2Uge1xuICAgIHF1ZXVlV2F0Y2hlcih0aGlzKTtcbiAgfVxufTtcblxuLyoqXG4gKiBTY2hlZHVsZXIgam9iIGludGVyZmFjZS5cbiAqIFdpbGwgYmUgY2FsbGVkIGJ5IHRoZSBzY2hlZHVsZXIuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uIHJ1biAoKSB7XG4gIGlmICh0aGlzLmFjdGl2ZSkge1xuICAgIHZhciB2YWx1ZSA9IHRoaXMuZ2V0KCk7XG4gICAgaWYgKFxuICAgICAgdmFsdWUgIT09IHRoaXMudmFsdWUgfHxcbiAgICAgIC8vIERlZXAgd2F0Y2hlcnMgYW5kIHdhdGNoZXJzIG9uIE9iamVjdC9BcnJheXMgc2hvdWxkIGZpcmUgZXZlblxuICAgICAgLy8gd2hlbiB0aGUgdmFsdWUgaXMgdGhlIHNhbWUsIGJlY2F1c2UgdGhlIHZhbHVlIG1heVxuICAgICAgLy8gaGF2ZSBtdXRhdGVkLlxuICAgICAgaXNPYmplY3QodmFsdWUpIHx8XG4gICAgICB0aGlzLmRlZXBcbiAgICApIHtcbiAgICAgIC8vIHNldCBuZXcgdmFsdWVcbiAgICAgIHZhciBvbGRWYWx1ZSA9IHRoaXMudmFsdWU7XG4gICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICBpZiAodGhpcy51c2VyKSB7XG4gICAgICAgIHZhciBpbmZvID0gXCJjYWxsYmFjayBmb3Igd2F0Y2hlciBcXFwiXCIgKyAodGhpcy5leHByZXNzaW9uKSArIFwiXFxcIlwiO1xuICAgICAgICBpbnZva2VXaXRoRXJyb3JIYW5kbGluZyh0aGlzLmNiLCB0aGlzLnZtLCBbdmFsdWUsIG9sZFZhbHVlXSwgdGhpcy52bSwgaW5mbyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmNiLmNhbGwodGhpcy52bSwgdmFsdWUsIG9sZFZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogRXZhbHVhdGUgdGhlIHZhbHVlIG9mIHRoZSB3YXRjaGVyLlxuICogVGhpcyBvbmx5IGdldHMgY2FsbGVkIGZvciBsYXp5IHdhdGNoZXJzLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS5ldmFsdWF0ZSA9IGZ1bmN0aW9uIGV2YWx1YXRlICgpIHtcbiAgdGhpcy52YWx1ZSA9IHRoaXMuZ2V0KCk7XG4gIHRoaXMuZGlydHkgPSBmYWxzZTtcbn07XG5cbi8qKlxuICogRGVwZW5kIG9uIGFsbCBkZXBzIGNvbGxlY3RlZCBieSB0aGlzIHdhdGNoZXIuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLmRlcGVuZCA9IGZ1bmN0aW9uIGRlcGVuZCAoKSB7XG4gIHZhciBpID0gdGhpcy5kZXBzLmxlbmd0aDtcbiAgd2hpbGUgKGktLSkge1xuICAgIHRoaXMuZGVwc1tpXS5kZXBlbmQoKTtcbiAgfVxufTtcblxuLyoqXG4gKiBSZW1vdmUgc2VsZiBmcm9tIGFsbCBkZXBlbmRlbmNpZXMnIHN1YnNjcmliZXIgbGlzdC5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUudGVhcmRvd24gPSBmdW5jdGlvbiB0ZWFyZG93biAoKSB7XG4gIGlmICh0aGlzLmFjdGl2ZSkge1xuICAgIC8vIHJlbW92ZSBzZWxmIGZyb20gdm0ncyB3YXRjaGVyIGxpc3RcbiAgICAvLyB0aGlzIGlzIGEgc29tZXdoYXQgZXhwZW5zaXZlIG9wZXJhdGlvbiBzbyB3ZSBza2lwIGl0XG4gICAgLy8gaWYgdGhlIHZtIGlzIGJlaW5nIGRlc3Ryb3llZC5cbiAgICBpZiAoIXRoaXMudm0uX2lzQmVpbmdEZXN0cm95ZWQpIHtcbiAgICAgIHJlbW92ZSh0aGlzLnZtLl93YXRjaGVycywgdGhpcyk7XG4gICAgfVxuICAgIHZhciBpID0gdGhpcy5kZXBzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICB0aGlzLmRlcHNbaV0ucmVtb3ZlU3ViKHRoaXMpO1xuICAgIH1cbiAgICB0aGlzLmFjdGl2ZSA9IGZhbHNlO1xuICB9XG59O1xuXG4vKiAgKi9cblxudmFyIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbiA9IHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBnZXQ6IG5vb3AsXG4gIHNldDogbm9vcFxufTtcblxuZnVuY3Rpb24gcHJveHkgKHRhcmdldCwgc291cmNlS2V5LCBrZXkpIHtcbiAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLmdldCA9IGZ1bmN0aW9uIHByb3h5R2V0dGVyICgpIHtcbiAgICByZXR1cm4gdGhpc1tzb3VyY2VLZXldW2tleV1cbiAgfTtcbiAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLnNldCA9IGZ1bmN0aW9uIHByb3h5U2V0dGVyICh2YWwpIHtcbiAgICB0aGlzW3NvdXJjZUtleV1ba2V5XSA9IHZhbDtcbiAgfTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24pO1xufVxuXG5mdW5jdGlvbiBpbml0U3RhdGUgKHZtKSB7XG4gIHZtLl93YXRjaGVycyA9IFtdO1xuICB2YXIgb3B0cyA9IHZtLiRvcHRpb25zO1xuICBpZiAob3B0cy5wcm9wcykgeyBpbml0UHJvcHModm0sIG9wdHMucHJvcHMpOyB9XG4gIGlmIChvcHRzLm1ldGhvZHMpIHsgaW5pdE1ldGhvZHModm0sIG9wdHMubWV0aG9kcyk7IH1cbiAgaWYgKG9wdHMuZGF0YSkge1xuICAgIGluaXREYXRhKHZtKTtcbiAgfSBlbHNlIHtcbiAgICBvYnNlcnZlKHZtLl9kYXRhID0ge30sIHRydWUgLyogYXNSb290RGF0YSAqLyk7XG4gIH1cbiAgaWYgKG9wdHMuY29tcHV0ZWQpIHsgaW5pdENvbXB1dGVkKHZtLCBvcHRzLmNvbXB1dGVkKTsgfVxuICBpZiAob3B0cy53YXRjaCAmJiBvcHRzLndhdGNoICE9PSBuYXRpdmVXYXRjaCkge1xuICAgIGluaXRXYXRjaCh2bSwgb3B0cy53YXRjaCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdFByb3BzICh2bSwgcHJvcHNPcHRpb25zKSB7XG4gIHZhciBwcm9wc0RhdGEgPSB2bS4kb3B0aW9ucy5wcm9wc0RhdGEgfHwge307XG4gIHZhciBwcm9wcyA9IHZtLl9wcm9wcyA9IHt9O1xuICAvLyBjYWNoZSBwcm9wIGtleXMgc28gdGhhdCBmdXR1cmUgcHJvcHMgdXBkYXRlcyBjYW4gaXRlcmF0ZSB1c2luZyBBcnJheVxuICAvLyBpbnN0ZWFkIG9mIGR5bmFtaWMgb2JqZWN0IGtleSBlbnVtZXJhdGlvbi5cbiAgdmFyIGtleXMgPSB2bS4kb3B0aW9ucy5fcHJvcEtleXMgPSBbXTtcbiAgdmFyIGlzUm9vdCA9ICF2bS4kcGFyZW50O1xuICAvLyByb290IGluc3RhbmNlIHByb3BzIHNob3VsZCBiZSBjb252ZXJ0ZWRcbiAgaWYgKCFpc1Jvb3QpIHtcbiAgICB0b2dnbGVPYnNlcnZpbmcoZmFsc2UpO1xuICB9XG4gIHZhciBsb29wID0gZnVuY3Rpb24gKCBrZXkgKSB7XG4gICAga2V5cy5wdXNoKGtleSk7XG4gICAgdmFyIHZhbHVlID0gdmFsaWRhdGVQcm9wKGtleSwgcHJvcHNPcHRpb25zLCBwcm9wc0RhdGEsIHZtKTtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgaHlwaGVuYXRlZEtleSA9IGh5cGhlbmF0ZShrZXkpO1xuICAgICAgaWYgKGlzUmVzZXJ2ZWRBdHRyaWJ1dGUoaHlwaGVuYXRlZEtleSkgfHxcbiAgICAgICAgICBjb25maWcuaXNSZXNlcnZlZEF0dHIoaHlwaGVuYXRlZEtleSkpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAoXCJcXFwiXCIgKyBoeXBoZW5hdGVkS2V5ICsgXCJcXFwiIGlzIGEgcmVzZXJ2ZWQgYXR0cmlidXRlIGFuZCBjYW5ub3QgYmUgdXNlZCBhcyBjb21wb25lbnQgcHJvcC5cIiksXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGRlZmluZVJlYWN0aXZlJCQxKHByb3BzLCBrZXksIHZhbHVlLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghaXNSb290ICYmICFpc1VwZGF0aW5nQ2hpbGRDb21wb25lbnQpIHtcbiAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgXCJBdm9pZCBtdXRhdGluZyBhIHByb3AgZGlyZWN0bHkgc2luY2UgdGhlIHZhbHVlIHdpbGwgYmUgXCIgK1xuICAgICAgICAgICAgXCJvdmVyd3JpdHRlbiB3aGVuZXZlciB0aGUgcGFyZW50IGNvbXBvbmVudCByZS1yZW5kZXJzLiBcIiArXG4gICAgICAgICAgICBcIkluc3RlYWQsIHVzZSBhIGRhdGEgb3IgY29tcHV0ZWQgcHJvcGVydHkgYmFzZWQgb24gdGhlIHByb3AncyBcIiArXG4gICAgICAgICAgICBcInZhbHVlLiBQcm9wIGJlaW5nIG11dGF0ZWQ6IFxcXCJcIiArIGtleSArIFwiXFxcIlwiLFxuICAgICAgICAgICAgdm1cbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVmaW5lUmVhY3RpdmUkJDEocHJvcHMsIGtleSwgdmFsdWUpO1xuICAgIH1cbiAgICAvLyBzdGF0aWMgcHJvcHMgYXJlIGFscmVhZHkgcHJveGllZCBvbiB0aGUgY29tcG9uZW50J3MgcHJvdG90eXBlXG4gICAgLy8gZHVyaW5nIFZ1ZS5leHRlbmQoKS4gV2Ugb25seSBuZWVkIHRvIHByb3h5IHByb3BzIGRlZmluZWQgYXRcbiAgICAvLyBpbnN0YW50aWF0aW9uIGhlcmUuXG4gICAgaWYgKCEoa2V5IGluIHZtKSkge1xuICAgICAgcHJveHkodm0sIFwiX3Byb3BzXCIsIGtleSk7XG4gICAgfVxuICB9O1xuXG4gIGZvciAodmFyIGtleSBpbiBwcm9wc09wdGlvbnMpIGxvb3AoIGtleSApO1xuICB0b2dnbGVPYnNlcnZpbmcodHJ1ZSk7XG59XG5cbmZ1bmN0aW9uIGluaXREYXRhICh2bSkge1xuICB2YXIgZGF0YSA9IHZtLiRvcHRpb25zLmRhdGE7XG4gIGRhdGEgPSB2bS5fZGF0YSA9IHR5cGVvZiBkYXRhID09PSAnZnVuY3Rpb24nXG4gICAgPyBnZXREYXRhKGRhdGEsIHZtKVxuICAgIDogZGF0YSB8fCB7fTtcbiAgaWYgKCFpc1BsYWluT2JqZWN0KGRhdGEpKSB7XG4gICAgZGF0YSA9IHt9O1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICdkYXRhIGZ1bmN0aW9ucyBzaG91bGQgcmV0dXJuIGFuIG9iamVjdDpcXG4nICtcbiAgICAgICdodHRwczovL3Z1ZWpzLm9yZy92Mi9ndWlkZS9jb21wb25lbnRzLmh0bWwjZGF0YS1NdXN0LUJlLWEtRnVuY3Rpb24nLFxuICAgICAgdm1cbiAgICApO1xuICB9XG4gIC8vIHByb3h5IGRhdGEgb24gaW5zdGFuY2VcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhkYXRhKTtcbiAgdmFyIHByb3BzID0gdm0uJG9wdGlvbnMucHJvcHM7XG4gIHZhciBtZXRob2RzID0gdm0uJG9wdGlvbnMubWV0aG9kcztcbiAgdmFyIGkgPSBrZXlzLmxlbmd0aDtcbiAgd2hpbGUgKGktLSkge1xuICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAobWV0aG9kcyAmJiBoYXNPd24obWV0aG9kcywga2V5KSkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIChcIk1ldGhvZCBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaGFzIGFscmVhZHkgYmVlbiBkZWZpbmVkIGFzIGEgZGF0YSBwcm9wZXJ0eS5cIiksXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHByb3BzICYmIGhhc093bihwcm9wcywga2V5KSkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICBcIlRoZSBkYXRhIHByb3BlcnR5IFxcXCJcIiArIGtleSArIFwiXFxcIiBpcyBhbHJlYWR5IGRlY2xhcmVkIGFzIGEgcHJvcC4gXCIgK1xuICAgICAgICBcIlVzZSBwcm9wIGRlZmF1bHQgdmFsdWUgaW5zdGVhZC5cIixcbiAgICAgICAgdm1cbiAgICAgICk7XG4gICAgfSBlbHNlIGlmICghaXNSZXNlcnZlZChrZXkpKSB7XG4gICAgICBwcm94eSh2bSwgXCJfZGF0YVwiLCBrZXkpO1xuICAgIH1cbiAgfVxuICAvLyBvYnNlcnZlIGRhdGFcbiAgb2JzZXJ2ZShkYXRhLCB0cnVlIC8qIGFzUm9vdERhdGEgKi8pO1xufVxuXG5mdW5jdGlvbiBnZXREYXRhIChkYXRhLCB2bSkge1xuICAvLyAjNzU3MyBkaXNhYmxlIGRlcCBjb2xsZWN0aW9uIHdoZW4gaW52b2tpbmcgZGF0YSBnZXR0ZXJzXG4gIHB1c2hUYXJnZXQoKTtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZGF0YS5jYWxsKHZtLCB2bSlcbiAgfSBjYXRjaCAoZSkge1xuICAgIGhhbmRsZUVycm9yKGUsIHZtLCBcImRhdGEoKVwiKTtcbiAgICByZXR1cm4ge31cbiAgfSBmaW5hbGx5IHtcbiAgICBwb3BUYXJnZXQoKTtcbiAgfVxufVxuXG52YXIgY29tcHV0ZWRXYXRjaGVyT3B0aW9ucyA9IHsgbGF6eTogdHJ1ZSB9O1xuXG5mdW5jdGlvbiBpbml0Q29tcHV0ZWQgKHZtLCBjb21wdXRlZCkge1xuICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgdmFyIHdhdGNoZXJzID0gdm0uX2NvbXB1dGVkV2F0Y2hlcnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAvLyBjb21wdXRlZCBwcm9wZXJ0aWVzIGFyZSBqdXN0IGdldHRlcnMgZHVyaW5nIFNTUlxuICB2YXIgaXNTU1IgPSBpc1NlcnZlclJlbmRlcmluZygpO1xuXG4gIGZvciAodmFyIGtleSBpbiBjb21wdXRlZCkge1xuICAgIHZhciB1c2VyRGVmID0gY29tcHV0ZWRba2V5XTtcbiAgICB2YXIgZ2V0dGVyID0gdHlwZW9mIHVzZXJEZWYgPT09ICdmdW5jdGlvbicgPyB1c2VyRGVmIDogdXNlckRlZi5nZXQ7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgZ2V0dGVyID09IG51bGwpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgIChcIkdldHRlciBpcyBtaXNzaW5nIGZvciBjb21wdXRlZCBwcm9wZXJ0eSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIuXCIpLFxuICAgICAgICB2bVxuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAoIWlzU1NSKSB7XG4gICAgICAvLyBjcmVhdGUgaW50ZXJuYWwgd2F0Y2hlciBmb3IgdGhlIGNvbXB1dGVkIHByb3BlcnR5LlxuICAgICAgd2F0Y2hlcnNba2V5XSA9IG5ldyBXYXRjaGVyKFxuICAgICAgICB2bSxcbiAgICAgICAgZ2V0dGVyIHx8IG5vb3AsXG4gICAgICAgIG5vb3AsXG4gICAgICAgIGNvbXB1dGVkV2F0Y2hlck9wdGlvbnNcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLy8gY29tcG9uZW50LWRlZmluZWQgY29tcHV0ZWQgcHJvcGVydGllcyBhcmUgYWxyZWFkeSBkZWZpbmVkIG9uIHRoZVxuICAgIC8vIGNvbXBvbmVudCBwcm90b3R5cGUuIFdlIG9ubHkgbmVlZCB0byBkZWZpbmUgY29tcHV0ZWQgcHJvcGVydGllcyBkZWZpbmVkXG4gICAgLy8gYXQgaW5zdGFudGlhdGlvbiBoZXJlLlxuICAgIGlmICghKGtleSBpbiB2bSkpIHtcbiAgICAgIGRlZmluZUNvbXB1dGVkKHZtLCBrZXksIHVzZXJEZWYpO1xuICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKGtleSBpbiB2bS4kZGF0YSkge1xuICAgICAgICB3YXJuKChcIlRoZSBjb21wdXRlZCBwcm9wZXJ0eSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaXMgYWxyZWFkeSBkZWZpbmVkIGluIGRhdGEuXCIpLCB2bSk7XG4gICAgICB9IGVsc2UgaWYgKHZtLiRvcHRpb25zLnByb3BzICYmIGtleSBpbiB2bS4kb3B0aW9ucy5wcm9wcykge1xuICAgICAgICB3YXJuKChcIlRoZSBjb21wdXRlZCBwcm9wZXJ0eSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaXMgYWxyZWFkeSBkZWZpbmVkIGFzIGEgcHJvcC5cIiksIHZtKTtcbiAgICAgIH0gZWxzZSBpZiAodm0uJG9wdGlvbnMubWV0aG9kcyAmJiBrZXkgaW4gdm0uJG9wdGlvbnMubWV0aG9kcykge1xuICAgICAgICB3YXJuKChcIlRoZSBjb21wdXRlZCBwcm9wZXJ0eSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaXMgYWxyZWFkeSBkZWZpbmVkIGFzIGEgbWV0aG9kLlwiKSwgdm0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBkZWZpbmVDb21wdXRlZCAoXG4gIHRhcmdldCxcbiAga2V5LFxuICB1c2VyRGVmXG4pIHtcbiAgdmFyIHNob3VsZENhY2hlID0gIWlzU2VydmVyUmVuZGVyaW5nKCk7XG4gIGlmICh0eXBlb2YgdXNlckRlZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5nZXQgPSBzaG91bGRDYWNoZVxuICAgICAgPyBjcmVhdGVDb21wdXRlZEdldHRlcihrZXkpXG4gICAgICA6IGNyZWF0ZUdldHRlckludm9rZXIodXNlckRlZik7XG4gICAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLnNldCA9IG5vb3A7XG4gIH0gZWxzZSB7XG4gICAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLmdldCA9IHVzZXJEZWYuZ2V0XG4gICAgICA/IHNob3VsZENhY2hlICYmIHVzZXJEZWYuY2FjaGUgIT09IGZhbHNlXG4gICAgICAgID8gY3JlYXRlQ29tcHV0ZWRHZXR0ZXIoa2V5KVxuICAgICAgICA6IGNyZWF0ZUdldHRlckludm9rZXIodXNlckRlZi5nZXQpXG4gICAgICA6IG5vb3A7XG4gICAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLnNldCA9IHVzZXJEZWYuc2V0IHx8IG5vb3A7XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAgIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5zZXQgPT09IG5vb3ApIHtcbiAgICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uc2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgd2FybihcbiAgICAgICAgKFwiQ29tcHV0ZWQgcHJvcGVydHkgXFxcIlwiICsga2V5ICsgXCJcXFwiIHdhcyBhc3NpZ25lZCB0byBidXQgaXQgaGFzIG5vIHNldHRlci5cIiksXG4gICAgICAgIHRoaXNcbiAgICAgICk7XG4gICAgfTtcbiAgfVxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbik7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbXB1dGVkR2V0dGVyIChrZXkpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGNvbXB1dGVkR2V0dGVyICgpIHtcbiAgICB2YXIgd2F0Y2hlciA9IHRoaXMuX2NvbXB1dGVkV2F0Y2hlcnMgJiYgdGhpcy5fY29tcHV0ZWRXYXRjaGVyc1trZXldO1xuICAgIGlmICh3YXRjaGVyKSB7XG4gICAgICBpZiAod2F0Y2hlci5kaXJ0eSkge1xuICAgICAgICB3YXRjaGVyLmV2YWx1YXRlKCk7XG4gICAgICB9XG4gICAgICBpZiAoRGVwLnRhcmdldCkge1xuICAgICAgICB3YXRjaGVyLmRlcGVuZCgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHdhdGNoZXIudmFsdWVcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlR2V0dGVySW52b2tlcihmbikge1xuICByZXR1cm4gZnVuY3Rpb24gY29tcHV0ZWRHZXR0ZXIgKCkge1xuICAgIHJldHVybiBmbi5jYWxsKHRoaXMsIHRoaXMpXG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdE1ldGhvZHMgKHZtLCBtZXRob2RzKSB7XG4gIHZhciBwcm9wcyA9IHZtLiRvcHRpb25zLnByb3BzO1xuICBmb3IgKHZhciBrZXkgaW4gbWV0aG9kcykge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAodHlwZW9mIG1ldGhvZHNba2V5XSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIFwiTWV0aG9kIFxcXCJcIiArIGtleSArIFwiXFxcIiBoYXMgdHlwZSBcXFwiXCIgKyAodHlwZW9mIG1ldGhvZHNba2V5XSkgKyBcIlxcXCIgaW4gdGhlIGNvbXBvbmVudCBkZWZpbml0aW9uLiBcIiArXG4gICAgICAgICAgXCJEaWQgeW91IHJlZmVyZW5jZSB0aGUgZnVuY3Rpb24gY29ycmVjdGx5P1wiLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAocHJvcHMgJiYgaGFzT3duKHByb3BzLCBrZXkpKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgKFwiTWV0aG9kIFxcXCJcIiArIGtleSArIFwiXFxcIiBoYXMgYWxyZWFkeSBiZWVuIGRlZmluZWQgYXMgYSBwcm9wLlwiKSxcbiAgICAgICAgICB2bVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKChrZXkgaW4gdm0pICYmIGlzUmVzZXJ2ZWQoa2V5KSkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIFwiTWV0aG9kIFxcXCJcIiArIGtleSArIFwiXFxcIiBjb25mbGljdHMgd2l0aCBhbiBleGlzdGluZyBWdWUgaW5zdGFuY2UgbWV0aG9kLiBcIiArXG4gICAgICAgICAgXCJBdm9pZCBkZWZpbmluZyBjb21wb25lbnQgbWV0aG9kcyB0aGF0IHN0YXJ0IHdpdGggXyBvciAkLlwiXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIHZtW2tleV0gPSB0eXBlb2YgbWV0aG9kc1trZXldICE9PSAnZnVuY3Rpb24nID8gbm9vcCA6IGJpbmQobWV0aG9kc1trZXldLCB2bSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdFdhdGNoICh2bSwgd2F0Y2gpIHtcbiAgZm9yICh2YXIga2V5IGluIHdhdGNoKSB7XG4gICAgdmFyIGhhbmRsZXIgPSB3YXRjaFtrZXldO1xuICAgIGlmIChBcnJheS5pc0FycmF5KGhhbmRsZXIpKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGhhbmRsZXIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY3JlYXRlV2F0Y2hlcih2bSwga2V5LCBoYW5kbGVyW2ldKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY3JlYXRlV2F0Y2hlcih2bSwga2V5LCBoYW5kbGVyKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlV2F0Y2hlciAoXG4gIHZtLFxuICBleHBPckZuLFxuICBoYW5kbGVyLFxuICBvcHRpb25zXG4pIHtcbiAgaWYgKGlzUGxhaW5PYmplY3QoaGFuZGxlcikpIHtcbiAgICBvcHRpb25zID0gaGFuZGxlcjtcbiAgICBoYW5kbGVyID0gaGFuZGxlci5oYW5kbGVyO1xuICB9XG4gIGlmICh0eXBlb2YgaGFuZGxlciA9PT0gJ3N0cmluZycpIHtcbiAgICBoYW5kbGVyID0gdm1baGFuZGxlcl07XG4gIH1cbiAgcmV0dXJuIHZtLiR3YXRjaChleHBPckZuLCBoYW5kbGVyLCBvcHRpb25zKVxufVxuXG5mdW5jdGlvbiBzdGF0ZU1peGluIChWdWUpIHtcbiAgLy8gZmxvdyBzb21laG93IGhhcyBwcm9ibGVtcyB3aXRoIGRpcmVjdGx5IGRlY2xhcmVkIGRlZmluaXRpb24gb2JqZWN0XG4gIC8vIHdoZW4gdXNpbmcgT2JqZWN0LmRlZmluZVByb3BlcnR5LCBzbyB3ZSBoYXZlIHRvIHByb2NlZHVyYWxseSBidWlsZCB1cFxuICAvLyB0aGUgb2JqZWN0IGhlcmUuXG4gIHZhciBkYXRhRGVmID0ge307XG4gIGRhdGFEZWYuZ2V0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fZGF0YSB9O1xuICB2YXIgcHJvcHNEZWYgPSB7fTtcbiAgcHJvcHNEZWYuZ2V0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fcHJvcHMgfTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBkYXRhRGVmLnNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICdBdm9pZCByZXBsYWNpbmcgaW5zdGFuY2Ugcm9vdCAkZGF0YS4gJyArXG4gICAgICAgICdVc2UgbmVzdGVkIGRhdGEgcHJvcGVydGllcyBpbnN0ZWFkLicsXG4gICAgICAgIHRoaXNcbiAgICAgICk7XG4gICAgfTtcbiAgICBwcm9wc0RlZi5zZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB3YXJuKFwiJHByb3BzIGlzIHJlYWRvbmx5LlwiLCB0aGlzKTtcbiAgICB9O1xuICB9XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUucHJvdG90eXBlLCAnJGRhdGEnLCBkYXRhRGVmKTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFZ1ZS5wcm90b3R5cGUsICckcHJvcHMnLCBwcm9wc0RlZik7XG5cbiAgVnVlLnByb3RvdHlwZS4kc2V0ID0gc2V0O1xuICBWdWUucHJvdG90eXBlLiRkZWxldGUgPSBkZWw7XG5cbiAgVnVlLnByb3RvdHlwZS4kd2F0Y2ggPSBmdW5jdGlvbiAoXG4gICAgZXhwT3JGbixcbiAgICBjYixcbiAgICBvcHRpb25zXG4gICkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgaWYgKGlzUGxhaW5PYmplY3QoY2IpKSB7XG4gICAgICByZXR1cm4gY3JlYXRlV2F0Y2hlcih2bSwgZXhwT3JGbiwgY2IsIG9wdGlvbnMpXG4gICAgfVxuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgIG9wdGlvbnMudXNlciA9IHRydWU7XG4gICAgdmFyIHdhdGNoZXIgPSBuZXcgV2F0Y2hlcih2bSwgZXhwT3JGbiwgY2IsIG9wdGlvbnMpO1xuICAgIGlmIChvcHRpb25zLmltbWVkaWF0ZSkge1xuICAgICAgdmFyIGluZm8gPSBcImNhbGxiYWNrIGZvciBpbW1lZGlhdGUgd2F0Y2hlciBcXFwiXCIgKyAod2F0Y2hlci5leHByZXNzaW9uKSArIFwiXFxcIlwiO1xuICAgICAgcHVzaFRhcmdldCgpO1xuICAgICAgaW52b2tlV2l0aEVycm9ySGFuZGxpbmcoY2IsIHZtLCBbd2F0Y2hlci52YWx1ZV0sIHZtLCBpbmZvKTtcbiAgICAgIHBvcFRhcmdldCgpO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gdW53YXRjaEZuICgpIHtcbiAgICAgIHdhdGNoZXIudGVhcmRvd24oKTtcbiAgICB9XG4gIH07XG59XG5cbi8qICAqL1xuXG52YXIgdWlkJDMgPSAwO1xuXG5mdW5jdGlvbiBpbml0TWl4aW4gKFZ1ZSkge1xuICBWdWUucHJvdG90eXBlLl9pbml0ID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIC8vIGEgdWlkXG4gICAgdm0uX3VpZCA9IHVpZCQzKys7XG5cbiAgICB2YXIgc3RhcnRUYWcsIGVuZFRhZztcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBjb25maWcucGVyZm9ybWFuY2UgJiYgbWFyaykge1xuICAgICAgc3RhcnRUYWcgPSBcInZ1ZS1wZXJmLXN0YXJ0OlwiICsgKHZtLl91aWQpO1xuICAgICAgZW5kVGFnID0gXCJ2dWUtcGVyZi1lbmQ6XCIgKyAodm0uX3VpZCk7XG4gICAgICBtYXJrKHN0YXJ0VGFnKTtcbiAgICB9XG5cbiAgICAvLyBhIGZsYWcgdG8gYXZvaWQgdGhpcyBiZWluZyBvYnNlcnZlZFxuICAgIHZtLl9pc1Z1ZSA9IHRydWU7XG4gICAgLy8gbWVyZ2Ugb3B0aW9uc1xuICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMuX2lzQ29tcG9uZW50KSB7XG4gICAgICAvLyBvcHRpbWl6ZSBpbnRlcm5hbCBjb21wb25lbnQgaW5zdGFudGlhdGlvblxuICAgICAgLy8gc2luY2UgZHluYW1pYyBvcHRpb25zIG1lcmdpbmcgaXMgcHJldHR5IHNsb3csIGFuZCBub25lIG9mIHRoZVxuICAgICAgLy8gaW50ZXJuYWwgY29tcG9uZW50IG9wdGlvbnMgbmVlZHMgc3BlY2lhbCB0cmVhdG1lbnQuXG4gICAgICBpbml0SW50ZXJuYWxDb21wb25lbnQodm0sIG9wdGlvbnMpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2bS4kb3B0aW9ucyA9IG1lcmdlT3B0aW9ucyhcbiAgICAgICAgcmVzb2x2ZUNvbnN0cnVjdG9yT3B0aW9ucyh2bS5jb25zdHJ1Y3RvciksXG4gICAgICAgIG9wdGlvbnMgfHwge30sXG4gICAgICAgIHZtXG4gICAgICApO1xuICAgIH1cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpbml0UHJveHkodm0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB2bS5fcmVuZGVyUHJveHkgPSB2bTtcbiAgICB9XG4gICAgLy8gZXhwb3NlIHJlYWwgc2VsZlxuICAgIHZtLl9zZWxmID0gdm07XG4gICAgaW5pdExpZmVjeWNsZSh2bSk7XG4gICAgaW5pdEV2ZW50cyh2bSk7XG4gICAgaW5pdFJlbmRlcih2bSk7XG4gICAgY2FsbEhvb2sodm0sICdiZWZvcmVDcmVhdGUnKTtcbiAgICBpbml0SW5qZWN0aW9ucyh2bSk7IC8vIHJlc29sdmUgaW5qZWN0aW9ucyBiZWZvcmUgZGF0YS9wcm9wc1xuICAgIGluaXRTdGF0ZSh2bSk7XG4gICAgaW5pdFByb3ZpZGUodm0pOyAvLyByZXNvbHZlIHByb3ZpZGUgYWZ0ZXIgZGF0YS9wcm9wc1xuICAgIGNhbGxIb29rKHZtLCAnY3JlYXRlZCcpO1xuXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgY29uZmlnLnBlcmZvcm1hbmNlICYmIG1hcmspIHtcbiAgICAgIHZtLl9uYW1lID0gZm9ybWF0Q29tcG9uZW50TmFtZSh2bSwgZmFsc2UpO1xuICAgICAgbWFyayhlbmRUYWcpO1xuICAgICAgbWVhc3VyZSgoXCJ2dWUgXCIgKyAodm0uX25hbWUpICsgXCIgaW5pdFwiKSwgc3RhcnRUYWcsIGVuZFRhZyk7XG4gICAgfVxuXG4gICAgaWYgKHZtLiRvcHRpb25zLmVsKSB7XG4gICAgICB2bS4kbW91bnQodm0uJG9wdGlvbnMuZWwpO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gaW5pdEludGVybmFsQ29tcG9uZW50ICh2bSwgb3B0aW9ucykge1xuICB2YXIgb3B0cyA9IHZtLiRvcHRpb25zID0gT2JqZWN0LmNyZWF0ZSh2bS5jb25zdHJ1Y3Rvci5vcHRpb25zKTtcbiAgLy8gZG9pbmcgdGhpcyBiZWNhdXNlIGl0J3MgZmFzdGVyIHRoYW4gZHluYW1pYyBlbnVtZXJhdGlvbi5cbiAgdmFyIHBhcmVudFZub2RlID0gb3B0aW9ucy5fcGFyZW50Vm5vZGU7XG4gIG9wdHMucGFyZW50ID0gb3B0aW9ucy5wYXJlbnQ7XG4gIG9wdHMuX3BhcmVudFZub2RlID0gcGFyZW50Vm5vZGU7XG5cbiAgdmFyIHZub2RlQ29tcG9uZW50T3B0aW9ucyA9IHBhcmVudFZub2RlLmNvbXBvbmVudE9wdGlvbnM7XG4gIG9wdHMucHJvcHNEYXRhID0gdm5vZGVDb21wb25lbnRPcHRpb25zLnByb3BzRGF0YTtcbiAgb3B0cy5fcGFyZW50TGlzdGVuZXJzID0gdm5vZGVDb21wb25lbnRPcHRpb25zLmxpc3RlbmVycztcbiAgb3B0cy5fcmVuZGVyQ2hpbGRyZW4gPSB2bm9kZUNvbXBvbmVudE9wdGlvbnMuY2hpbGRyZW47XG4gIG9wdHMuX2NvbXBvbmVudFRhZyA9IHZub2RlQ29tcG9uZW50T3B0aW9ucy50YWc7XG5cbiAgaWYgKG9wdGlvbnMucmVuZGVyKSB7XG4gICAgb3B0cy5yZW5kZXIgPSBvcHRpb25zLnJlbmRlcjtcbiAgICBvcHRzLnN0YXRpY1JlbmRlckZucyA9IG9wdGlvbnMuc3RhdGljUmVuZGVyRm5zO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlc29sdmVDb25zdHJ1Y3Rvck9wdGlvbnMgKEN0b3IpIHtcbiAgdmFyIG9wdGlvbnMgPSBDdG9yLm9wdGlvbnM7XG4gIGlmIChDdG9yLnN1cGVyKSB7XG4gICAgdmFyIHN1cGVyT3B0aW9ucyA9IHJlc29sdmVDb25zdHJ1Y3Rvck9wdGlvbnMoQ3Rvci5zdXBlcik7XG4gICAgdmFyIGNhY2hlZFN1cGVyT3B0aW9ucyA9IEN0b3Iuc3VwZXJPcHRpb25zO1xuICAgIGlmIChzdXBlck9wdGlvbnMgIT09IGNhY2hlZFN1cGVyT3B0aW9ucykge1xuICAgICAgLy8gc3VwZXIgb3B0aW9uIGNoYW5nZWQsXG4gICAgICAvLyBuZWVkIHRvIHJlc29sdmUgbmV3IG9wdGlvbnMuXG4gICAgICBDdG9yLnN1cGVyT3B0aW9ucyA9IHN1cGVyT3B0aW9ucztcbiAgICAgIC8vIGNoZWNrIGlmIHRoZXJlIGFyZSBhbnkgbGF0ZS1tb2RpZmllZC9hdHRhY2hlZCBvcHRpb25zICgjNDk3NilcbiAgICAgIHZhciBtb2RpZmllZE9wdGlvbnMgPSByZXNvbHZlTW9kaWZpZWRPcHRpb25zKEN0b3IpO1xuICAgICAgLy8gdXBkYXRlIGJhc2UgZXh0ZW5kIG9wdGlvbnNcbiAgICAgIGlmIChtb2RpZmllZE9wdGlvbnMpIHtcbiAgICAgICAgZXh0ZW5kKEN0b3IuZXh0ZW5kT3B0aW9ucywgbW9kaWZpZWRPcHRpb25zKTtcbiAgICAgIH1cbiAgICAgIG9wdGlvbnMgPSBDdG9yLm9wdGlvbnMgPSBtZXJnZU9wdGlvbnMoc3VwZXJPcHRpb25zLCBDdG9yLmV4dGVuZE9wdGlvbnMpO1xuICAgICAgaWYgKG9wdGlvbnMubmFtZSkge1xuICAgICAgICBvcHRpb25zLmNvbXBvbmVudHNbb3B0aW9ucy5uYW1lXSA9IEN0b3I7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBvcHRpb25zXG59XG5cbmZ1bmN0aW9uIHJlc29sdmVNb2RpZmllZE9wdGlvbnMgKEN0b3IpIHtcbiAgdmFyIG1vZGlmaWVkO1xuICB2YXIgbGF0ZXN0ID0gQ3Rvci5vcHRpb25zO1xuICB2YXIgc2VhbGVkID0gQ3Rvci5zZWFsZWRPcHRpb25zO1xuICBmb3IgKHZhciBrZXkgaW4gbGF0ZXN0KSB7XG4gICAgaWYgKGxhdGVzdFtrZXldICE9PSBzZWFsZWRba2V5XSkge1xuICAgICAgaWYgKCFtb2RpZmllZCkgeyBtb2RpZmllZCA9IHt9OyB9XG4gICAgICBtb2RpZmllZFtrZXldID0gbGF0ZXN0W2tleV07XG4gICAgfVxuICB9XG4gIHJldHVybiBtb2RpZmllZFxufVxuXG5mdW5jdGlvbiBWdWUgKG9wdGlvbnMpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAhKHRoaXMgaW5zdGFuY2VvZiBWdWUpXG4gICkge1xuICAgIHdhcm4oJ1Z1ZSBpcyBhIGNvbnN0cnVjdG9yIGFuZCBzaG91bGQgYmUgY2FsbGVkIHdpdGggdGhlIGBuZXdgIGtleXdvcmQnKTtcbiAgfVxuICB0aGlzLl9pbml0KG9wdGlvbnMpO1xufVxuXG5pbml0TWl4aW4oVnVlKTtcbnN0YXRlTWl4aW4oVnVlKTtcbmV2ZW50c01peGluKFZ1ZSk7XG5saWZlY3ljbGVNaXhpbihWdWUpO1xucmVuZGVyTWl4aW4oVnVlKTtcblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRVc2UgKFZ1ZSkge1xuICBWdWUudXNlID0gZnVuY3Rpb24gKHBsdWdpbikge1xuICAgIHZhciBpbnN0YWxsZWRQbHVnaW5zID0gKHRoaXMuX2luc3RhbGxlZFBsdWdpbnMgfHwgKHRoaXMuX2luc3RhbGxlZFBsdWdpbnMgPSBbXSkpO1xuICAgIGlmIChpbnN0YWxsZWRQbHVnaW5zLmluZGV4T2YocGx1Z2luKSA+IC0xKSB7XG4gICAgICByZXR1cm4gdGhpc1xuICAgIH1cblxuICAgIC8vIGFkZGl0aW9uYWwgcGFyYW1ldGVyc1xuICAgIHZhciBhcmdzID0gdG9BcnJheShhcmd1bWVudHMsIDEpO1xuICAgIGFyZ3MudW5zaGlmdCh0aGlzKTtcbiAgICBpZiAodHlwZW9mIHBsdWdpbi5pbnN0YWxsID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBwbHVnaW4uaW5zdGFsbC5hcHBseShwbHVnaW4sIGFyZ3MpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIHBsdWdpbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcGx1Z2luLmFwcGx5KG51bGwsIGFyZ3MpO1xuICAgIH1cbiAgICBpbnN0YWxsZWRQbHVnaW5zLnB1c2gocGx1Z2luKTtcbiAgICByZXR1cm4gdGhpc1xuICB9O1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdE1peGluJDEgKFZ1ZSkge1xuICBWdWUubWl4aW4gPSBmdW5jdGlvbiAobWl4aW4pIHtcbiAgICB0aGlzLm9wdGlvbnMgPSBtZXJnZU9wdGlvbnModGhpcy5vcHRpb25zLCBtaXhpbik7XG4gICAgcmV0dXJuIHRoaXNcbiAgfTtcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRFeHRlbmQgKFZ1ZSkge1xuICAvKipcbiAgICogRWFjaCBpbnN0YW5jZSBjb25zdHJ1Y3RvciwgaW5jbHVkaW5nIFZ1ZSwgaGFzIGEgdW5pcXVlXG4gICAqIGNpZC4gVGhpcyBlbmFibGVzIHVzIHRvIGNyZWF0ZSB3cmFwcGVkIFwiY2hpbGRcbiAgICogY29uc3RydWN0b3JzXCIgZm9yIHByb3RvdHlwYWwgaW5oZXJpdGFuY2UgYW5kIGNhY2hlIHRoZW0uXG4gICAqL1xuICBWdWUuY2lkID0gMDtcbiAgdmFyIGNpZCA9IDE7XG5cbiAgLyoqXG4gICAqIENsYXNzIGluaGVyaXRhbmNlXG4gICAqL1xuICBWdWUuZXh0ZW5kID0gZnVuY3Rpb24gKGV4dGVuZE9wdGlvbnMpIHtcbiAgICBleHRlbmRPcHRpb25zID0gZXh0ZW5kT3B0aW9ucyB8fCB7fTtcbiAgICB2YXIgU3VwZXIgPSB0aGlzO1xuICAgIHZhciBTdXBlcklkID0gU3VwZXIuY2lkO1xuICAgIHZhciBjYWNoZWRDdG9ycyA9IGV4dGVuZE9wdGlvbnMuX0N0b3IgfHwgKGV4dGVuZE9wdGlvbnMuX0N0b3IgPSB7fSk7XG4gICAgaWYgKGNhY2hlZEN0b3JzW1N1cGVySWRdKSB7XG4gICAgICByZXR1cm4gY2FjaGVkQ3RvcnNbU3VwZXJJZF1cbiAgICB9XG5cbiAgICB2YXIgbmFtZSA9IGV4dGVuZE9wdGlvbnMubmFtZSB8fCBTdXBlci5vcHRpb25zLm5hbWU7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgbmFtZSkge1xuICAgICAgdmFsaWRhdGVDb21wb25lbnROYW1lKG5hbWUpO1xuICAgIH1cblxuICAgIHZhciBTdWIgPSBmdW5jdGlvbiBWdWVDb21wb25lbnQgKG9wdGlvbnMpIHtcbiAgICAgIHRoaXMuX2luaXQob3B0aW9ucyk7XG4gICAgfTtcbiAgICBTdWIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShTdXBlci5wcm90b3R5cGUpO1xuICAgIFN1Yi5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBTdWI7XG4gICAgU3ViLmNpZCA9IGNpZCsrO1xuICAgIFN1Yi5vcHRpb25zID0gbWVyZ2VPcHRpb25zKFxuICAgICAgU3VwZXIub3B0aW9ucyxcbiAgICAgIGV4dGVuZE9wdGlvbnNcbiAgICApO1xuICAgIFN1Ylsnc3VwZXInXSA9IFN1cGVyO1xuXG4gICAgLy8gRm9yIHByb3BzIGFuZCBjb21wdXRlZCBwcm9wZXJ0aWVzLCB3ZSBkZWZpbmUgdGhlIHByb3h5IGdldHRlcnMgb25cbiAgICAvLyB0aGUgVnVlIGluc3RhbmNlcyBhdCBleHRlbnNpb24gdGltZSwgb24gdGhlIGV4dGVuZGVkIHByb3RvdHlwZS4gVGhpc1xuICAgIC8vIGF2b2lkcyBPYmplY3QuZGVmaW5lUHJvcGVydHkgY2FsbHMgZm9yIGVhY2ggaW5zdGFuY2UgY3JlYXRlZC5cbiAgICBpZiAoU3ViLm9wdGlvbnMucHJvcHMpIHtcbiAgICAgIGluaXRQcm9wcyQxKFN1Yik7XG4gICAgfVxuICAgIGlmIChTdWIub3B0aW9ucy5jb21wdXRlZCkge1xuICAgICAgaW5pdENvbXB1dGVkJDEoU3ViKTtcbiAgICB9XG5cbiAgICAvLyBhbGxvdyBmdXJ0aGVyIGV4dGVuc2lvbi9taXhpbi9wbHVnaW4gdXNhZ2VcbiAgICBTdWIuZXh0ZW5kID0gU3VwZXIuZXh0ZW5kO1xuICAgIFN1Yi5taXhpbiA9IFN1cGVyLm1peGluO1xuICAgIFN1Yi51c2UgPSBTdXBlci51c2U7XG5cbiAgICAvLyBjcmVhdGUgYXNzZXQgcmVnaXN0ZXJzLCBzbyBleHRlbmRlZCBjbGFzc2VzXG4gICAgLy8gY2FuIGhhdmUgdGhlaXIgcHJpdmF0ZSBhc3NldHMgdG9vLlxuICAgIEFTU0VUX1RZUEVTLmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHtcbiAgICAgIFN1Ylt0eXBlXSA9IFN1cGVyW3R5cGVdO1xuICAgIH0pO1xuICAgIC8vIGVuYWJsZSByZWN1cnNpdmUgc2VsZi1sb29rdXBcbiAgICBpZiAobmFtZSkge1xuICAgICAgU3ViLm9wdGlvbnMuY29tcG9uZW50c1tuYW1lXSA9IFN1YjtcbiAgICB9XG5cbiAgICAvLyBrZWVwIGEgcmVmZXJlbmNlIHRvIHRoZSBzdXBlciBvcHRpb25zIGF0IGV4dGVuc2lvbiB0aW1lLlxuICAgIC8vIGxhdGVyIGF0IGluc3RhbnRpYXRpb24gd2UgY2FuIGNoZWNrIGlmIFN1cGVyJ3Mgb3B0aW9ucyBoYXZlXG4gICAgLy8gYmVlbiB1cGRhdGVkLlxuICAgIFN1Yi5zdXBlck9wdGlvbnMgPSBTdXBlci5vcHRpb25zO1xuICAgIFN1Yi5leHRlbmRPcHRpb25zID0gZXh0ZW5kT3B0aW9ucztcbiAgICBTdWIuc2VhbGVkT3B0aW9ucyA9IGV4dGVuZCh7fSwgU3ViLm9wdGlvbnMpO1xuXG4gICAgLy8gY2FjaGUgY29uc3RydWN0b3JcbiAgICBjYWNoZWRDdG9yc1tTdXBlcklkXSA9IFN1YjtcbiAgICByZXR1cm4gU3ViXG4gIH07XG59XG5cbmZ1bmN0aW9uIGluaXRQcm9wcyQxIChDb21wKSB7XG4gIHZhciBwcm9wcyA9IENvbXAub3B0aW9ucy5wcm9wcztcbiAgZm9yICh2YXIga2V5IGluIHByb3BzKSB7XG4gICAgcHJveHkoQ29tcC5wcm90b3R5cGUsIFwiX3Byb3BzXCIsIGtleSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdENvbXB1dGVkJDEgKENvbXApIHtcbiAgdmFyIGNvbXB1dGVkID0gQ29tcC5vcHRpb25zLmNvbXB1dGVkO1xuICBmb3IgKHZhciBrZXkgaW4gY29tcHV0ZWQpIHtcbiAgICBkZWZpbmVDb21wdXRlZChDb21wLnByb3RvdHlwZSwga2V5LCBjb21wdXRlZFtrZXldKTtcbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdEFzc2V0UmVnaXN0ZXJzIChWdWUpIHtcbiAgLyoqXG4gICAqIENyZWF0ZSBhc3NldCByZWdpc3RyYXRpb24gbWV0aG9kcy5cbiAgICovXG4gIEFTU0VUX1RZUEVTLmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHtcbiAgICBWdWVbdHlwZV0gPSBmdW5jdGlvbiAoXG4gICAgICBpZCxcbiAgICAgIGRlZmluaXRpb25cbiAgICApIHtcbiAgICAgIGlmICghZGVmaW5pdGlvbikge1xuICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zW3R5cGUgKyAncyddW2lkXVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHR5cGUgPT09ICdjb21wb25lbnQnKSB7XG4gICAgICAgICAgdmFsaWRhdGVDb21wb25lbnROYW1lKGlkKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZSA9PT0gJ2NvbXBvbmVudCcgJiYgaXNQbGFpbk9iamVjdChkZWZpbml0aW9uKSkge1xuICAgICAgICAgIGRlZmluaXRpb24ubmFtZSA9IGRlZmluaXRpb24ubmFtZSB8fCBpZDtcbiAgICAgICAgICBkZWZpbml0aW9uID0gdGhpcy5vcHRpb25zLl9iYXNlLmV4dGVuZChkZWZpbml0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZSA9PT0gJ2RpcmVjdGl2ZScgJiYgdHlwZW9mIGRlZmluaXRpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBkZWZpbml0aW9uID0geyBiaW5kOiBkZWZpbml0aW9uLCB1cGRhdGU6IGRlZmluaXRpb24gfTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm9wdGlvbnNbdHlwZSArICdzJ11baWRdID0gZGVmaW5pdGlvbjtcbiAgICAgICAgcmV0dXJuIGRlZmluaXRpb25cbiAgICAgIH1cbiAgICB9O1xuICB9KTtcbn1cblxuLyogICovXG5cblxuXG5cblxuZnVuY3Rpb24gZ2V0Q29tcG9uZW50TmFtZSAob3B0cykge1xuICByZXR1cm4gb3B0cyAmJiAob3B0cy5DdG9yLm9wdGlvbnMubmFtZSB8fCBvcHRzLnRhZylcbn1cblxuZnVuY3Rpb24gbWF0Y2hlcyAocGF0dGVybiwgbmFtZSkge1xuICBpZiAoQXJyYXkuaXNBcnJheShwYXR0ZXJuKSkge1xuICAgIHJldHVybiBwYXR0ZXJuLmluZGV4T2YobmFtZSkgPiAtMVxuICB9IGVsc2UgaWYgKHR5cGVvZiBwYXR0ZXJuID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBwYXR0ZXJuLnNwbGl0KCcsJykuaW5kZXhPZihuYW1lKSA+IC0xXG4gIH0gZWxzZSBpZiAoaXNSZWdFeHAocGF0dGVybikpIHtcbiAgICByZXR1cm4gcGF0dGVybi50ZXN0KG5hbWUpXG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgcmV0dXJuIGZhbHNlXG59XG5cbmZ1bmN0aW9uIHBydW5lQ2FjaGUgKGtlZXBBbGl2ZUluc3RhbmNlLCBmaWx0ZXIpIHtcbiAgdmFyIGNhY2hlID0ga2VlcEFsaXZlSW5zdGFuY2UuY2FjaGU7XG4gIHZhciBrZXlzID0ga2VlcEFsaXZlSW5zdGFuY2Uua2V5cztcbiAgdmFyIF92bm9kZSA9IGtlZXBBbGl2ZUluc3RhbmNlLl92bm9kZTtcbiAgZm9yICh2YXIga2V5IGluIGNhY2hlKSB7XG4gICAgdmFyIGVudHJ5ID0gY2FjaGVba2V5XTtcbiAgICBpZiAoZW50cnkpIHtcbiAgICAgIHZhciBuYW1lID0gZW50cnkubmFtZTtcbiAgICAgIGlmIChuYW1lICYmICFmaWx0ZXIobmFtZSkpIHtcbiAgICAgICAgcHJ1bmVDYWNoZUVudHJ5KGNhY2hlLCBrZXksIGtleXMsIF92bm9kZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHBydW5lQ2FjaGVFbnRyeSAoXG4gIGNhY2hlLFxuICBrZXksXG4gIGtleXMsXG4gIGN1cnJlbnRcbikge1xuICB2YXIgZW50cnkgPSBjYWNoZVtrZXldO1xuICBpZiAoZW50cnkgJiYgKCFjdXJyZW50IHx8IGVudHJ5LnRhZyAhPT0gY3VycmVudC50YWcpKSB7XG4gICAgZW50cnkuY29tcG9uZW50SW5zdGFuY2UuJGRlc3Ryb3koKTtcbiAgfVxuICBjYWNoZVtrZXldID0gbnVsbDtcbiAgcmVtb3ZlKGtleXMsIGtleSk7XG59XG5cbnZhciBwYXR0ZXJuVHlwZXMgPSBbU3RyaW5nLCBSZWdFeHAsIEFycmF5XTtcblxudmFyIEtlZXBBbGl2ZSA9IHtcbiAgbmFtZTogJ2tlZXAtYWxpdmUnLFxuICBhYnN0cmFjdDogdHJ1ZSxcblxuICBwcm9wczoge1xuICAgIGluY2x1ZGU6IHBhdHRlcm5UeXBlcyxcbiAgICBleGNsdWRlOiBwYXR0ZXJuVHlwZXMsXG4gICAgbWF4OiBbU3RyaW5nLCBOdW1iZXJdXG4gIH0sXG5cbiAgbWV0aG9kczoge1xuICAgIGNhY2hlVk5vZGU6IGZ1bmN0aW9uIGNhY2hlVk5vZGUoKSB7XG4gICAgICB2YXIgcmVmID0gdGhpcztcbiAgICAgIHZhciBjYWNoZSA9IHJlZi5jYWNoZTtcbiAgICAgIHZhciBrZXlzID0gcmVmLmtleXM7XG4gICAgICB2YXIgdm5vZGVUb0NhY2hlID0gcmVmLnZub2RlVG9DYWNoZTtcbiAgICAgIHZhciBrZXlUb0NhY2hlID0gcmVmLmtleVRvQ2FjaGU7XG4gICAgICBpZiAodm5vZGVUb0NhY2hlKSB7XG4gICAgICAgIHZhciB0YWcgPSB2bm9kZVRvQ2FjaGUudGFnO1xuICAgICAgICB2YXIgY29tcG9uZW50SW5zdGFuY2UgPSB2bm9kZVRvQ2FjaGUuY29tcG9uZW50SW5zdGFuY2U7XG4gICAgICAgIHZhciBjb21wb25lbnRPcHRpb25zID0gdm5vZGVUb0NhY2hlLmNvbXBvbmVudE9wdGlvbnM7XG4gICAgICAgIGNhY2hlW2tleVRvQ2FjaGVdID0ge1xuICAgICAgICAgIG5hbWU6IGdldENvbXBvbmVudE5hbWUoY29tcG9uZW50T3B0aW9ucyksXG4gICAgICAgICAgdGFnOiB0YWcsXG4gICAgICAgICAgY29tcG9uZW50SW5zdGFuY2U6IGNvbXBvbmVudEluc3RhbmNlLFxuICAgICAgICB9O1xuICAgICAgICBrZXlzLnB1c2goa2V5VG9DYWNoZSk7XG4gICAgICAgIC8vIHBydW5lIG9sZGVzdCBlbnRyeVxuICAgICAgICBpZiAodGhpcy5tYXggJiYga2V5cy5sZW5ndGggPiBwYXJzZUludCh0aGlzLm1heCkpIHtcbiAgICAgICAgICBwcnVuZUNhY2hlRW50cnkoY2FjaGUsIGtleXNbMF0sIGtleXMsIHRoaXMuX3Zub2RlKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnZub2RlVG9DYWNoZSA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIGNyZWF0ZWQ6IGZ1bmN0aW9uIGNyZWF0ZWQgKCkge1xuICAgIHRoaXMuY2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRoaXMua2V5cyA9IFtdO1xuICB9LFxuXG4gIGRlc3Ryb3llZDogZnVuY3Rpb24gZGVzdHJveWVkICgpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5jYWNoZSkge1xuICAgICAgcHJ1bmVDYWNoZUVudHJ5KHRoaXMuY2FjaGUsIGtleSwgdGhpcy5rZXlzKTtcbiAgICB9XG4gIH0sXG5cbiAgbW91bnRlZDogZnVuY3Rpb24gbW91bnRlZCAoKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICB0aGlzLmNhY2hlVk5vZGUoKTtcbiAgICB0aGlzLiR3YXRjaCgnaW5jbHVkZScsIGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgIHBydW5lQ2FjaGUodGhpcyQxLCBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gbWF0Y2hlcyh2YWwsIG5hbWUpOyB9KTtcbiAgICB9KTtcbiAgICB0aGlzLiR3YXRjaCgnZXhjbHVkZScsIGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgIHBydW5lQ2FjaGUodGhpcyQxLCBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gIW1hdGNoZXModmFsLCBuYW1lKTsgfSk7XG4gICAgfSk7XG4gIH0sXG5cbiAgdXBkYXRlZDogZnVuY3Rpb24gdXBkYXRlZCAoKSB7XG4gICAgdGhpcy5jYWNoZVZOb2RlKCk7XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIgKCkge1xuICAgIHZhciBzbG90ID0gdGhpcy4kc2xvdHMuZGVmYXVsdDtcbiAgICB2YXIgdm5vZGUgPSBnZXRGaXJzdENvbXBvbmVudENoaWxkKHNsb3QpO1xuICAgIHZhciBjb21wb25lbnRPcHRpb25zID0gdm5vZGUgJiYgdm5vZGUuY29tcG9uZW50T3B0aW9ucztcbiAgICBpZiAoY29tcG9uZW50T3B0aW9ucykge1xuICAgICAgLy8gY2hlY2sgcGF0dGVyblxuICAgICAgdmFyIG5hbWUgPSBnZXRDb21wb25lbnROYW1lKGNvbXBvbmVudE9wdGlvbnMpO1xuICAgICAgdmFyIHJlZiA9IHRoaXM7XG4gICAgICB2YXIgaW5jbHVkZSA9IHJlZi5pbmNsdWRlO1xuICAgICAgdmFyIGV4Y2x1ZGUgPSByZWYuZXhjbHVkZTtcbiAgICAgIGlmIChcbiAgICAgICAgLy8gbm90IGluY2x1ZGVkXG4gICAgICAgIChpbmNsdWRlICYmICghbmFtZSB8fCAhbWF0Y2hlcyhpbmNsdWRlLCBuYW1lKSkpIHx8XG4gICAgICAgIC8vIGV4Y2x1ZGVkXG4gICAgICAgIChleGNsdWRlICYmIG5hbWUgJiYgbWF0Y2hlcyhleGNsdWRlLCBuYW1lKSlcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gdm5vZGVcbiAgICAgIH1cblxuICAgICAgdmFyIHJlZiQxID0gdGhpcztcbiAgICAgIHZhciBjYWNoZSA9IHJlZiQxLmNhY2hlO1xuICAgICAgdmFyIGtleXMgPSByZWYkMS5rZXlzO1xuICAgICAgdmFyIGtleSA9IHZub2RlLmtleSA9PSBudWxsXG4gICAgICAgIC8vIHNhbWUgY29uc3RydWN0b3IgbWF5IGdldCByZWdpc3RlcmVkIGFzIGRpZmZlcmVudCBsb2NhbCBjb21wb25lbnRzXG4gICAgICAgIC8vIHNvIGNpZCBhbG9uZSBpcyBub3QgZW5vdWdoICgjMzI2OSlcbiAgICAgICAgPyBjb21wb25lbnRPcHRpb25zLkN0b3IuY2lkICsgKGNvbXBvbmVudE9wdGlvbnMudGFnID8gKFwiOjpcIiArIChjb21wb25lbnRPcHRpb25zLnRhZykpIDogJycpXG4gICAgICAgIDogdm5vZGUua2V5O1xuICAgICAgaWYgKGNhY2hlW2tleV0pIHtcbiAgICAgICAgdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgPSBjYWNoZVtrZXldLmNvbXBvbmVudEluc3RhbmNlO1xuICAgICAgICAvLyBtYWtlIGN1cnJlbnQga2V5IGZyZXNoZXN0XG4gICAgICAgIHJlbW92ZShrZXlzLCBrZXkpO1xuICAgICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGRlbGF5IHNldHRpbmcgdGhlIGNhY2hlIHVudGlsIHVwZGF0ZVxuICAgICAgICB0aGlzLnZub2RlVG9DYWNoZSA9IHZub2RlO1xuICAgICAgICB0aGlzLmtleVRvQ2FjaGUgPSBrZXk7XG4gICAgICB9XG5cbiAgICAgIHZub2RlLmRhdGEua2VlcEFsaXZlID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHZub2RlIHx8IChzbG90ICYmIHNsb3RbMF0pXG4gIH1cbn07XG5cbnZhciBidWlsdEluQ29tcG9uZW50cyA9IHtcbiAgS2VlcEFsaXZlOiBLZWVwQWxpdmVcbn07XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0R2xvYmFsQVBJIChWdWUpIHtcbiAgLy8gY29uZmlnXG4gIHZhciBjb25maWdEZWYgPSB7fTtcbiAgY29uZmlnRGVmLmdldCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvbmZpZzsgfTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBjb25maWdEZWYuc2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgd2FybihcbiAgICAgICAgJ0RvIG5vdCByZXBsYWNlIHRoZSBWdWUuY29uZmlnIG9iamVjdCwgc2V0IGluZGl2aWR1YWwgZmllbGRzIGluc3RlYWQuJ1xuICAgICAgKTtcbiAgICB9O1xuICB9XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUsICdjb25maWcnLCBjb25maWdEZWYpO1xuXG4gIC8vIGV4cG9zZWQgdXRpbCBtZXRob2RzLlxuICAvLyBOT1RFOiB0aGVzZSBhcmUgbm90IGNvbnNpZGVyZWQgcGFydCBvZiB0aGUgcHVibGljIEFQSSAtIGF2b2lkIHJlbHlpbmcgb25cbiAgLy8gdGhlbSB1bmxlc3MgeW91IGFyZSBhd2FyZSBvZiB0aGUgcmlzay5cbiAgVnVlLnV0aWwgPSB7XG4gICAgd2Fybjogd2FybixcbiAgICBleHRlbmQ6IGV4dGVuZCxcbiAgICBtZXJnZU9wdGlvbnM6IG1lcmdlT3B0aW9ucyxcbiAgICBkZWZpbmVSZWFjdGl2ZTogZGVmaW5lUmVhY3RpdmUkJDFcbiAgfTtcblxuICBWdWUuc2V0ID0gc2V0O1xuICBWdWUuZGVsZXRlID0gZGVsO1xuICBWdWUubmV4dFRpY2sgPSBuZXh0VGljaztcblxuICAvLyAyLjYgZXhwbGljaXQgb2JzZXJ2YWJsZSBBUElcbiAgVnVlLm9ic2VydmFibGUgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgb2JzZXJ2ZShvYmopO1xuICAgIHJldHVybiBvYmpcbiAgfTtcblxuICBWdWUub3B0aW9ucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIEFTU0VUX1RZUEVTLmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHtcbiAgICBWdWUub3B0aW9uc1t0eXBlICsgJ3MnXSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIH0pO1xuXG4gIC8vIHRoaXMgaXMgdXNlZCB0byBpZGVudGlmeSB0aGUgXCJiYXNlXCIgY29uc3RydWN0b3IgdG8gZXh0ZW5kIGFsbCBwbGFpbi1vYmplY3RcbiAgLy8gY29tcG9uZW50cyB3aXRoIGluIFdlZXgncyBtdWx0aS1pbnN0YW5jZSBzY2VuYXJpb3MuXG4gIFZ1ZS5vcHRpb25zLl9iYXNlID0gVnVlO1xuXG4gIGV4dGVuZChWdWUub3B0aW9ucy5jb21wb25lbnRzLCBidWlsdEluQ29tcG9uZW50cyk7XG5cbiAgaW5pdFVzZShWdWUpO1xuICBpbml0TWl4aW4kMShWdWUpO1xuICBpbml0RXh0ZW5kKFZ1ZSk7XG4gIGluaXRBc3NldFJlZ2lzdGVycyhWdWUpO1xufVxuXG5pbml0R2xvYmFsQVBJKFZ1ZSk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUucHJvdG90eXBlLCAnJGlzU2VydmVyJywge1xuICBnZXQ6IGlzU2VydmVyUmVuZGVyaW5nXG59KTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFZ1ZS5wcm90b3R5cGUsICckc3NyQ29udGV4dCcsIHtcbiAgZ2V0OiBmdW5jdGlvbiBnZXQgKCkge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgcmV0dXJuIHRoaXMuJHZub2RlICYmIHRoaXMuJHZub2RlLnNzckNvbnRleHRcbiAgfVxufSk7XG5cbi8vIGV4cG9zZSBGdW5jdGlvbmFsUmVuZGVyQ29udGV4dCBmb3Igc3NyIHJ1bnRpbWUgaGVscGVyIGluc3RhbGxhdGlvblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFZ1ZSwgJ0Z1bmN0aW9uYWxSZW5kZXJDb250ZXh0Jywge1xuICB2YWx1ZTogRnVuY3Rpb25hbFJlbmRlckNvbnRleHRcbn0pO1xuXG5WdWUudmVyc2lvbiA9ICcyLjYuMTQnO1xuXG4vKiAgKi9cblxuLy8gdGhlc2UgYXJlIHJlc2VydmVkIGZvciB3ZWIgYmVjYXVzZSB0aGV5IGFyZSBkaXJlY3RseSBjb21waWxlZCBhd2F5XG4vLyBkdXJpbmcgdGVtcGxhdGUgY29tcGlsYXRpb25cbnZhciBpc1Jlc2VydmVkQXR0ciA9IG1ha2VNYXAoJ3N0eWxlLGNsYXNzJyk7XG5cbi8vIGF0dHJpYnV0ZXMgdGhhdCBzaG91bGQgYmUgdXNpbmcgcHJvcHMgZm9yIGJpbmRpbmdcbnZhciBhY2NlcHRWYWx1ZSA9IG1ha2VNYXAoJ2lucHV0LHRleHRhcmVhLG9wdGlvbixzZWxlY3QscHJvZ3Jlc3MnKTtcbnZhciBtdXN0VXNlUHJvcCA9IGZ1bmN0aW9uICh0YWcsIHR5cGUsIGF0dHIpIHtcbiAgcmV0dXJuIChcbiAgICAoYXR0ciA9PT0gJ3ZhbHVlJyAmJiBhY2NlcHRWYWx1ZSh0YWcpKSAmJiB0eXBlICE9PSAnYnV0dG9uJyB8fFxuICAgIChhdHRyID09PSAnc2VsZWN0ZWQnICYmIHRhZyA9PT0gJ29wdGlvbicpIHx8XG4gICAgKGF0dHIgPT09ICdjaGVja2VkJyAmJiB0YWcgPT09ICdpbnB1dCcpIHx8XG4gICAgKGF0dHIgPT09ICdtdXRlZCcgJiYgdGFnID09PSAndmlkZW8nKVxuICApXG59O1xuXG52YXIgaXNFbnVtZXJhdGVkQXR0ciA9IG1ha2VNYXAoJ2NvbnRlbnRlZGl0YWJsZSxkcmFnZ2FibGUsc3BlbGxjaGVjaycpO1xuXG52YXIgaXNWYWxpZENvbnRlbnRFZGl0YWJsZVZhbHVlID0gbWFrZU1hcCgnZXZlbnRzLGNhcmV0LHR5cGluZyxwbGFpbnRleHQtb25seScpO1xuXG52YXIgY29udmVydEVudW1lcmF0ZWRWYWx1ZSA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gIHJldHVybiBpc0ZhbHN5QXR0clZhbHVlKHZhbHVlKSB8fCB2YWx1ZSA9PT0gJ2ZhbHNlJ1xuICAgID8gJ2ZhbHNlJ1xuICAgIC8vIGFsbG93IGFyYml0cmFyeSBzdHJpbmcgdmFsdWUgZm9yIGNvbnRlbnRlZGl0YWJsZVxuICAgIDoga2V5ID09PSAnY29udGVudGVkaXRhYmxlJyAmJiBpc1ZhbGlkQ29udGVudEVkaXRhYmxlVmFsdWUodmFsdWUpXG4gICAgICA/IHZhbHVlXG4gICAgICA6ICd0cnVlJ1xufTtcblxudmFyIGlzQm9vbGVhbkF0dHIgPSBtYWtlTWFwKFxuICAnYWxsb3dmdWxsc2NyZWVuLGFzeW5jLGF1dG9mb2N1cyxhdXRvcGxheSxjaGVja2VkLGNvbXBhY3QsY29udHJvbHMsZGVjbGFyZSwnICtcbiAgJ2RlZmF1bHQsZGVmYXVsdGNoZWNrZWQsZGVmYXVsdG11dGVkLGRlZmF1bHRzZWxlY3RlZCxkZWZlcixkaXNhYmxlZCwnICtcbiAgJ2VuYWJsZWQsZm9ybW5vdmFsaWRhdGUsaGlkZGVuLGluZGV0ZXJtaW5hdGUsaW5lcnQsaXNtYXAsaXRlbXNjb3BlLGxvb3AsbXVsdGlwbGUsJyArXG4gICdtdXRlZCxub2hyZWYsbm9yZXNpemUsbm9zaGFkZSxub3ZhbGlkYXRlLG5vd3JhcCxvcGVuLHBhdXNlb25leGl0LHJlYWRvbmx5LCcgK1xuICAncmVxdWlyZWQscmV2ZXJzZWQsc2NvcGVkLHNlYW1sZXNzLHNlbGVjdGVkLHNvcnRhYmxlLCcgK1xuICAndHJ1ZXNwZWVkLHR5cGVtdXN0bWF0Y2gsdmlzaWJsZSdcbik7XG5cbnZhciB4bGlua05TID0gJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsnO1xuXG52YXIgaXNYbGluayA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiBuYW1lLmNoYXJBdCg1KSA9PT0gJzonICYmIG5hbWUuc2xpY2UoMCwgNSkgPT09ICd4bGluaydcbn07XG5cbnZhciBnZXRYbGlua1Byb3AgPSBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gaXNYbGluayhuYW1lKSA/IG5hbWUuc2xpY2UoNiwgbmFtZS5sZW5ndGgpIDogJydcbn07XG5cbnZhciBpc0ZhbHN5QXR0clZhbHVlID0gZnVuY3Rpb24gKHZhbCkge1xuICByZXR1cm4gdmFsID09IG51bGwgfHwgdmFsID09PSBmYWxzZVxufTtcblxuLyogICovXG5cbmZ1bmN0aW9uIGdlbkNsYXNzRm9yVm5vZGUgKHZub2RlKSB7XG4gIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgdmFyIHBhcmVudE5vZGUgPSB2bm9kZTtcbiAgdmFyIGNoaWxkTm9kZSA9IHZub2RlO1xuICB3aGlsZSAoaXNEZWYoY2hpbGROb2RlLmNvbXBvbmVudEluc3RhbmNlKSkge1xuICAgIGNoaWxkTm9kZSA9IGNoaWxkTm9kZS5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGU7XG4gICAgaWYgKGNoaWxkTm9kZSAmJiBjaGlsZE5vZGUuZGF0YSkge1xuICAgICAgZGF0YSA9IG1lcmdlQ2xhc3NEYXRhKGNoaWxkTm9kZS5kYXRhLCBkYXRhKTtcbiAgICB9XG4gIH1cbiAgd2hpbGUgKGlzRGVmKHBhcmVudE5vZGUgPSBwYXJlbnROb2RlLnBhcmVudCkpIHtcbiAgICBpZiAocGFyZW50Tm9kZSAmJiBwYXJlbnROb2RlLmRhdGEpIHtcbiAgICAgIGRhdGEgPSBtZXJnZUNsYXNzRGF0YShkYXRhLCBwYXJlbnROb2RlLmRhdGEpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVuZGVyQ2xhc3MoZGF0YS5zdGF0aWNDbGFzcywgZGF0YS5jbGFzcylcbn1cblxuZnVuY3Rpb24gbWVyZ2VDbGFzc0RhdGEgKGNoaWxkLCBwYXJlbnQpIHtcbiAgcmV0dXJuIHtcbiAgICBzdGF0aWNDbGFzczogY29uY2F0KGNoaWxkLnN0YXRpY0NsYXNzLCBwYXJlbnQuc3RhdGljQ2xhc3MpLFxuICAgIGNsYXNzOiBpc0RlZihjaGlsZC5jbGFzcylcbiAgICAgID8gW2NoaWxkLmNsYXNzLCBwYXJlbnQuY2xhc3NdXG4gICAgICA6IHBhcmVudC5jbGFzc1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlbmRlckNsYXNzIChcbiAgc3RhdGljQ2xhc3MsXG4gIGR5bmFtaWNDbGFzc1xuKSB7XG4gIGlmIChpc0RlZihzdGF0aWNDbGFzcykgfHwgaXNEZWYoZHluYW1pY0NsYXNzKSkge1xuICAgIHJldHVybiBjb25jYXQoc3RhdGljQ2xhc3MsIHN0cmluZ2lmeUNsYXNzKGR5bmFtaWNDbGFzcykpXG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgcmV0dXJuICcnXG59XG5cbmZ1bmN0aW9uIGNvbmNhdCAoYSwgYikge1xuICByZXR1cm4gYSA/IGIgPyAoYSArICcgJyArIGIpIDogYSA6IChiIHx8ICcnKVxufVxuXG5mdW5jdGlvbiBzdHJpbmdpZnlDbGFzcyAodmFsdWUpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgcmV0dXJuIHN0cmluZ2lmeUFycmF5KHZhbHVlKVxuICB9XG4gIGlmIChpc09iamVjdCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gc3RyaW5naWZ5T2JqZWN0KHZhbHVlKVxuICB9XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHZhbHVlXG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgcmV0dXJuICcnXG59XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeUFycmF5ICh2YWx1ZSkge1xuICB2YXIgcmVzID0gJyc7XG4gIHZhciBzdHJpbmdpZmllZDtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSB2YWx1ZS5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBpZiAoaXNEZWYoc3RyaW5naWZpZWQgPSBzdHJpbmdpZnlDbGFzcyh2YWx1ZVtpXSkpICYmIHN0cmluZ2lmaWVkICE9PSAnJykge1xuICAgICAgaWYgKHJlcykgeyByZXMgKz0gJyAnOyB9XG4gICAgICByZXMgKz0gc3RyaW5naWZpZWQ7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gc3RyaW5naWZ5T2JqZWN0ICh2YWx1ZSkge1xuICB2YXIgcmVzID0gJyc7XG4gIGZvciAodmFyIGtleSBpbiB2YWx1ZSkge1xuICAgIGlmICh2YWx1ZVtrZXldKSB7XG4gICAgICBpZiAocmVzKSB7IHJlcyArPSAnICc7IH1cbiAgICAgIHJlcyArPSBrZXk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuLyogICovXG5cbnZhciBuYW1lc3BhY2VNYXAgPSB7XG4gIHN2ZzogJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyxcbiAgbWF0aDogJ2h0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUwnXG59O1xuXG52YXIgaXNIVE1MVGFnID0gbWFrZU1hcChcbiAgJ2h0bWwsYm9keSxiYXNlLGhlYWQsbGluayxtZXRhLHN0eWxlLHRpdGxlLCcgK1xuICAnYWRkcmVzcyxhcnRpY2xlLGFzaWRlLGZvb3RlcixoZWFkZXIsaDEsaDIsaDMsaDQsaDUsaDYsaGdyb3VwLG5hdixzZWN0aW9uLCcgK1xuICAnZGl2LGRkLGRsLGR0LGZpZ2NhcHRpb24sZmlndXJlLHBpY3R1cmUsaHIsaW1nLGxpLG1haW4sb2wscCxwcmUsdWwsJyArXG4gICdhLGIsYWJicixiZGksYmRvLGJyLGNpdGUsY29kZSxkYXRhLGRmbixlbSxpLGtiZCxtYXJrLHEscnAscnQscnRjLHJ1YnksJyArXG4gICdzLHNhbXAsc21hbGwsc3BhbixzdHJvbmcsc3ViLHN1cCx0aW1lLHUsdmFyLHdicixhcmVhLGF1ZGlvLG1hcCx0cmFjayx2aWRlbywnICtcbiAgJ2VtYmVkLG9iamVjdCxwYXJhbSxzb3VyY2UsY2FudmFzLHNjcmlwdCxub3NjcmlwdCxkZWwsaW5zLCcgK1xuICAnY2FwdGlvbixjb2wsY29sZ3JvdXAsdGFibGUsdGhlYWQsdGJvZHksdGQsdGgsdHIsJyArXG4gICdidXR0b24sZGF0YWxpc3QsZmllbGRzZXQsZm9ybSxpbnB1dCxsYWJlbCxsZWdlbmQsbWV0ZXIsb3B0Z3JvdXAsb3B0aW9uLCcgK1xuICAnb3V0cHV0LHByb2dyZXNzLHNlbGVjdCx0ZXh0YXJlYSwnICtcbiAgJ2RldGFpbHMsZGlhbG9nLG1lbnUsbWVudWl0ZW0sc3VtbWFyeSwnICtcbiAgJ2NvbnRlbnQsZWxlbWVudCxzaGFkb3csdGVtcGxhdGUsYmxvY2txdW90ZSxpZnJhbWUsdGZvb3QnXG4pO1xuXG4vLyB0aGlzIG1hcCBpcyBpbnRlbnRpb25hbGx5IHNlbGVjdGl2ZSwgb25seSBjb3ZlcmluZyBTVkcgZWxlbWVudHMgdGhhdCBtYXlcbi8vIGNvbnRhaW4gY2hpbGQgZWxlbWVudHMuXG52YXIgaXNTVkcgPSBtYWtlTWFwKFxuICAnc3ZnLGFuaW1hdGUsY2lyY2xlLGNsaXBwYXRoLGN1cnNvcixkZWZzLGRlc2MsZWxsaXBzZSxmaWx0ZXIsZm9udC1mYWNlLCcgK1xuICAnZm9yZWlnbm9iamVjdCxnLGdseXBoLGltYWdlLGxpbmUsbWFya2VyLG1hc2ssbWlzc2luZy1nbHlwaCxwYXRoLHBhdHRlcm4sJyArXG4gICdwb2x5Z29uLHBvbHlsaW5lLHJlY3Qsc3dpdGNoLHN5bWJvbCx0ZXh0LHRleHRwYXRoLHRzcGFuLHVzZSx2aWV3JyxcbiAgdHJ1ZVxuKTtcblxudmFyIGlzUmVzZXJ2ZWRUYWcgPSBmdW5jdGlvbiAodGFnKSB7XG4gIHJldHVybiBpc0hUTUxUYWcodGFnKSB8fCBpc1NWRyh0YWcpXG59O1xuXG5mdW5jdGlvbiBnZXRUYWdOYW1lc3BhY2UgKHRhZykge1xuICBpZiAoaXNTVkcodGFnKSkge1xuICAgIHJldHVybiAnc3ZnJ1xuICB9XG4gIC8vIGJhc2ljIHN1cHBvcnQgZm9yIE1hdGhNTFxuICAvLyBub3RlIGl0IGRvZXNuJ3Qgc3VwcG9ydCBvdGhlciBNYXRoTUwgZWxlbWVudHMgYmVpbmcgY29tcG9uZW50IHJvb3RzXG4gIGlmICh0YWcgPT09ICdtYXRoJykge1xuICAgIHJldHVybiAnbWF0aCdcbiAgfVxufVxuXG52YXIgdW5rbm93bkVsZW1lbnRDYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5mdW5jdGlvbiBpc1Vua25vd25FbGVtZW50ICh0YWcpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICghaW5Ccm93c2VyKSB7XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuICBpZiAoaXNSZXNlcnZlZFRhZyh0YWcpKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbiAgdGFnID0gdGFnLnRvTG93ZXJDYXNlKCk7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAodW5rbm93bkVsZW1lbnRDYWNoZVt0YWddICE9IG51bGwpIHtcbiAgICByZXR1cm4gdW5rbm93bkVsZW1lbnRDYWNoZVt0YWddXG4gIH1cbiAgdmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0YWcpO1xuICBpZiAodGFnLmluZGV4T2YoJy0nKSA+IC0xKSB7XG4gICAgLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjgyMTAzNjQvMTA3MDI0NFxuICAgIHJldHVybiAodW5rbm93bkVsZW1lbnRDYWNoZVt0YWddID0gKFxuICAgICAgZWwuY29uc3RydWN0b3IgPT09IHdpbmRvdy5IVE1MVW5rbm93bkVsZW1lbnQgfHxcbiAgICAgIGVsLmNvbnN0cnVjdG9yID09PSB3aW5kb3cuSFRNTEVsZW1lbnRcbiAgICApKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiAodW5rbm93bkVsZW1lbnRDYWNoZVt0YWddID0gL0hUTUxVbmtub3duRWxlbWVudC8udGVzdChlbC50b1N0cmluZygpKSlcbiAgfVxufVxuXG52YXIgaXNUZXh0SW5wdXRUeXBlID0gbWFrZU1hcCgndGV4dCxudW1iZXIscGFzc3dvcmQsc2VhcmNoLGVtYWlsLHRlbCx1cmwnKTtcblxuLyogICovXG5cbi8qKlxuICogUXVlcnkgYW4gZWxlbWVudCBzZWxlY3RvciBpZiBpdCdzIG5vdCBhbiBlbGVtZW50IGFscmVhZHkuXG4gKi9cbmZ1bmN0aW9uIHF1ZXJ5IChlbCkge1xuICBpZiAodHlwZW9mIGVsID09PSAnc3RyaW5nJykge1xuICAgIHZhciBzZWxlY3RlZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZWwpO1xuICAgIGlmICghc2VsZWN0ZWQpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgJ0Nhbm5vdCBmaW5kIGVsZW1lbnQ6ICcgKyBlbFxuICAgICAgKTtcbiAgICAgIHJldHVybiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuICAgIH1cbiAgICByZXR1cm4gc2VsZWN0ZWRcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZWxcbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gY3JlYXRlRWxlbWVudCQxICh0YWdOYW1lLCB2bm9kZSkge1xuICB2YXIgZWxtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0YWdOYW1lKTtcbiAgaWYgKHRhZ05hbWUgIT09ICdzZWxlY3QnKSB7XG4gICAgcmV0dXJuIGVsbVxuICB9XG4gIC8vIGZhbHNlIG9yIG51bGwgd2lsbCByZW1vdmUgdGhlIGF0dHJpYnV0ZSBidXQgdW5kZWZpbmVkIHdpbGwgbm90XG4gIGlmICh2bm9kZS5kYXRhICYmIHZub2RlLmRhdGEuYXR0cnMgJiYgdm5vZGUuZGF0YS5hdHRycy5tdWx0aXBsZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgZWxtLnNldEF0dHJpYnV0ZSgnbXVsdGlwbGUnLCAnbXVsdGlwbGUnKTtcbiAgfVxuICByZXR1cm4gZWxtXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnROUyAobmFtZXNwYWNlLCB0YWdOYW1lKSB7XG4gIHJldHVybiBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMobmFtZXNwYWNlTWFwW25hbWVzcGFjZV0sIHRhZ05hbWUpXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVRleHROb2RlICh0ZXh0KSB7XG4gIHJldHVybiBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh0ZXh0KVxufVxuXG5mdW5jdGlvbiBjcmVhdGVDb21tZW50ICh0ZXh0KSB7XG4gIHJldHVybiBkb2N1bWVudC5jcmVhdGVDb21tZW50KHRleHQpXG59XG5cbmZ1bmN0aW9uIGluc2VydEJlZm9yZSAocGFyZW50Tm9kZSwgbmV3Tm9kZSwgcmVmZXJlbmNlTm9kZSkge1xuICBwYXJlbnROb2RlLmluc2VydEJlZm9yZShuZXdOb2RlLCByZWZlcmVuY2VOb2RlKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlQ2hpbGQgKG5vZGUsIGNoaWxkKSB7XG4gIG5vZGUucmVtb3ZlQ2hpbGQoY2hpbGQpO1xufVxuXG5mdW5jdGlvbiBhcHBlbmRDaGlsZCAobm9kZSwgY2hpbGQpIHtcbiAgbm9kZS5hcHBlbmRDaGlsZChjaGlsZCk7XG59XG5cbmZ1bmN0aW9uIHBhcmVudE5vZGUgKG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUucGFyZW50Tm9kZVxufVxuXG5mdW5jdGlvbiBuZXh0U2libGluZyAobm9kZSkge1xuICByZXR1cm4gbm9kZS5uZXh0U2libGluZ1xufVxuXG5mdW5jdGlvbiB0YWdOYW1lIChub2RlKSB7XG4gIHJldHVybiBub2RlLnRhZ05hbWVcbn1cblxuZnVuY3Rpb24gc2V0VGV4dENvbnRlbnQgKG5vZGUsIHRleHQpIHtcbiAgbm9kZS50ZXh0Q29udGVudCA9IHRleHQ7XG59XG5cbmZ1bmN0aW9uIHNldFN0eWxlU2NvcGUgKG5vZGUsIHNjb3BlSWQpIHtcbiAgbm9kZS5zZXRBdHRyaWJ1dGUoc2NvcGVJZCwgJycpO1xufVxuXG52YXIgbm9kZU9wcyA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcbiAgY3JlYXRlRWxlbWVudDogY3JlYXRlRWxlbWVudCQxLFxuICBjcmVhdGVFbGVtZW50TlM6IGNyZWF0ZUVsZW1lbnROUyxcbiAgY3JlYXRlVGV4dE5vZGU6IGNyZWF0ZVRleHROb2RlLFxuICBjcmVhdGVDb21tZW50OiBjcmVhdGVDb21tZW50LFxuICBpbnNlcnRCZWZvcmU6IGluc2VydEJlZm9yZSxcbiAgcmVtb3ZlQ2hpbGQ6IHJlbW92ZUNoaWxkLFxuICBhcHBlbmRDaGlsZDogYXBwZW5kQ2hpbGQsXG4gIHBhcmVudE5vZGU6IHBhcmVudE5vZGUsXG4gIG5leHRTaWJsaW5nOiBuZXh0U2libGluZyxcbiAgdGFnTmFtZTogdGFnTmFtZSxcbiAgc2V0VGV4dENvbnRlbnQ6IHNldFRleHRDb250ZW50LFxuICBzZXRTdHlsZVNjb3BlOiBzZXRTdHlsZVNjb3BlXG59KTtcblxuLyogICovXG5cbnZhciByZWYgPSB7XG4gIGNyZWF0ZTogZnVuY3Rpb24gY3JlYXRlIChfLCB2bm9kZSkge1xuICAgIHJlZ2lzdGVyUmVmKHZub2RlKTtcbiAgfSxcbiAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUgKG9sZFZub2RlLCB2bm9kZSkge1xuICAgIGlmIChvbGRWbm9kZS5kYXRhLnJlZiAhPT0gdm5vZGUuZGF0YS5yZWYpIHtcbiAgICAgIHJlZ2lzdGVyUmVmKG9sZFZub2RlLCB0cnVlKTtcbiAgICAgIHJlZ2lzdGVyUmVmKHZub2RlKTtcbiAgICB9XG4gIH0sXG4gIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3kgKHZub2RlKSB7XG4gICAgcmVnaXN0ZXJSZWYodm5vZGUsIHRydWUpO1xuICB9XG59O1xuXG5mdW5jdGlvbiByZWdpc3RlclJlZiAodm5vZGUsIGlzUmVtb3ZhbCkge1xuICB2YXIga2V5ID0gdm5vZGUuZGF0YS5yZWY7XG4gIGlmICghaXNEZWYoa2V5KSkgeyByZXR1cm4gfVxuXG4gIHZhciB2bSA9IHZub2RlLmNvbnRleHQ7XG4gIHZhciByZWYgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSB8fCB2bm9kZS5lbG07XG4gIHZhciByZWZzID0gdm0uJHJlZnM7XG4gIGlmIChpc1JlbW92YWwpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShyZWZzW2tleV0pKSB7XG4gICAgICByZW1vdmUocmVmc1trZXldLCByZWYpO1xuICAgIH0gZWxzZSBpZiAocmVmc1trZXldID09PSByZWYpIHtcbiAgICAgIHJlZnNba2V5XSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKHZub2RlLmRhdGEucmVmSW5Gb3IpIHtcbiAgICAgIGlmICghQXJyYXkuaXNBcnJheShyZWZzW2tleV0pKSB7XG4gICAgICAgIHJlZnNba2V5XSA9IFtyZWZdO1xuICAgICAgfSBlbHNlIGlmIChyZWZzW2tleV0uaW5kZXhPZihyZWYpIDwgMCkge1xuICAgICAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICAgICAgcmVmc1trZXldLnB1c2gocmVmKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmVmc1trZXldID0gcmVmO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIFZpcnR1YWwgRE9NIHBhdGNoaW5nIGFsZ29yaXRobSBiYXNlZCBvbiBTbmFiYmRvbSBieVxuICogU2ltb24gRnJpaXMgVmluZHVtIChAcGFsZGVwaW5kKVxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlXG4gKiBodHRwczovL2dpdGh1Yi5jb20vcGFsZGVwaW5kL3NuYWJiZG9tL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqXG4gKiBtb2RpZmllZCBieSBFdmFuIFlvdSAoQHl5eDk5MDgwMylcbiAqXG4gKiBOb3QgdHlwZS1jaGVja2luZyB0aGlzIGJlY2F1c2UgdGhpcyBmaWxlIGlzIHBlcmYtY3JpdGljYWwgYW5kIHRoZSBjb3N0XG4gKiBvZiBtYWtpbmcgZmxvdyB1bmRlcnN0YW5kIGl0IGlzIG5vdCB3b3J0aCBpdC5cbiAqL1xuXG52YXIgZW1wdHlOb2RlID0gbmV3IFZOb2RlKCcnLCB7fSwgW10pO1xuXG52YXIgaG9va3MgPSBbJ2NyZWF0ZScsICdhY3RpdmF0ZScsICd1cGRhdGUnLCAncmVtb3ZlJywgJ2Rlc3Ryb3knXTtcblxuZnVuY3Rpb24gc2FtZVZub2RlIChhLCBiKSB7XG4gIHJldHVybiAoXG4gICAgYS5rZXkgPT09IGIua2V5ICYmXG4gICAgYS5hc3luY0ZhY3RvcnkgPT09IGIuYXN5bmNGYWN0b3J5ICYmIChcbiAgICAgIChcbiAgICAgICAgYS50YWcgPT09IGIudGFnICYmXG4gICAgICAgIGEuaXNDb21tZW50ID09PSBiLmlzQ29tbWVudCAmJlxuICAgICAgICBpc0RlZihhLmRhdGEpID09PSBpc0RlZihiLmRhdGEpICYmXG4gICAgICAgIHNhbWVJbnB1dFR5cGUoYSwgYilcbiAgICAgICkgfHwgKFxuICAgICAgICBpc1RydWUoYS5pc0FzeW5jUGxhY2Vob2xkZXIpICYmXG4gICAgICAgIGlzVW5kZWYoYi5hc3luY0ZhY3RvcnkuZXJyb3IpXG4gICAgICApXG4gICAgKVxuICApXG59XG5cbmZ1bmN0aW9uIHNhbWVJbnB1dFR5cGUgKGEsIGIpIHtcbiAgaWYgKGEudGFnICE9PSAnaW5wdXQnKSB7IHJldHVybiB0cnVlIH1cbiAgdmFyIGk7XG4gIHZhciB0eXBlQSA9IGlzRGVmKGkgPSBhLmRhdGEpICYmIGlzRGVmKGkgPSBpLmF0dHJzKSAmJiBpLnR5cGU7XG4gIHZhciB0eXBlQiA9IGlzRGVmKGkgPSBiLmRhdGEpICYmIGlzRGVmKGkgPSBpLmF0dHJzKSAmJiBpLnR5cGU7XG4gIHJldHVybiB0eXBlQSA9PT0gdHlwZUIgfHwgaXNUZXh0SW5wdXRUeXBlKHR5cGVBKSAmJiBpc1RleHRJbnB1dFR5cGUodHlwZUIpXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUtleVRvT2xkSWR4IChjaGlsZHJlbiwgYmVnaW5JZHgsIGVuZElkeCkge1xuICB2YXIgaSwga2V5O1xuICB2YXIgbWFwID0ge307XG4gIGZvciAoaSA9IGJlZ2luSWR4OyBpIDw9IGVuZElkeDsgKytpKSB7XG4gICAga2V5ID0gY2hpbGRyZW5baV0ua2V5O1xuICAgIGlmIChpc0RlZihrZXkpKSB7IG1hcFtrZXldID0gaTsgfVxuICB9XG4gIHJldHVybiBtYXBcbn1cblxuZnVuY3Rpb24gY3JlYXRlUGF0Y2hGdW5jdGlvbiAoYmFja2VuZCkge1xuICB2YXIgaSwgajtcbiAgdmFyIGNicyA9IHt9O1xuXG4gIHZhciBtb2R1bGVzID0gYmFja2VuZC5tb2R1bGVzO1xuICB2YXIgbm9kZU9wcyA9IGJhY2tlbmQubm9kZU9wcztcblxuICBmb3IgKGkgPSAwOyBpIDwgaG9va3MubGVuZ3RoOyArK2kpIHtcbiAgICBjYnNbaG9va3NbaV1dID0gW107XG4gICAgZm9yIChqID0gMDsgaiA8IG1vZHVsZXMubGVuZ3RoOyArK2opIHtcbiAgICAgIGlmIChpc0RlZihtb2R1bGVzW2pdW2hvb2tzW2ldXSkpIHtcbiAgICAgICAgY2JzW2hvb2tzW2ldXS5wdXNoKG1vZHVsZXNbal1baG9va3NbaV1dKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBlbXB0eU5vZGVBdCAoZWxtKSB7XG4gICAgcmV0dXJuIG5ldyBWTm9kZShub2RlT3BzLnRhZ05hbWUoZWxtKS50b0xvd2VyQ2FzZSgpLCB7fSwgW10sIHVuZGVmaW5lZCwgZWxtKVxuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlUm1DYiAoY2hpbGRFbG0sIGxpc3RlbmVycykge1xuICAgIGZ1bmN0aW9uIHJlbW92ZSQkMSAoKSB7XG4gICAgICBpZiAoLS1yZW1vdmUkJDEubGlzdGVuZXJzID09PSAwKSB7XG4gICAgICAgIHJlbW92ZU5vZGUoY2hpbGRFbG0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZW1vdmUkJDEubGlzdGVuZXJzID0gbGlzdGVuZXJzO1xuICAgIHJldHVybiByZW1vdmUkJDFcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZU5vZGUgKGVsKSB7XG4gICAgdmFyIHBhcmVudCA9IG5vZGVPcHMucGFyZW50Tm9kZShlbCk7XG4gICAgLy8gZWxlbWVudCBtYXkgaGF2ZSBhbHJlYWR5IGJlZW4gcmVtb3ZlZCBkdWUgdG8gdi1odG1sIC8gdi10ZXh0XG4gICAgaWYgKGlzRGVmKHBhcmVudCkpIHtcbiAgICAgIG5vZGVPcHMucmVtb3ZlQ2hpbGQocGFyZW50LCBlbCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaXNVbmtub3duRWxlbWVudCQkMSAodm5vZGUsIGluVlByZSkge1xuICAgIHJldHVybiAoXG4gICAgICAhaW5WUHJlICYmXG4gICAgICAhdm5vZGUubnMgJiZcbiAgICAgICEoXG4gICAgICAgIGNvbmZpZy5pZ25vcmVkRWxlbWVudHMubGVuZ3RoICYmXG4gICAgICAgIGNvbmZpZy5pZ25vcmVkRWxlbWVudHMuc29tZShmdW5jdGlvbiAoaWdub3JlKSB7XG4gICAgICAgICAgcmV0dXJuIGlzUmVnRXhwKGlnbm9yZSlcbiAgICAgICAgICAgID8gaWdub3JlLnRlc3Qodm5vZGUudGFnKVxuICAgICAgICAgICAgOiBpZ25vcmUgPT09IHZub2RlLnRhZ1xuICAgICAgICB9KVxuICAgICAgKSAmJlxuICAgICAgY29uZmlnLmlzVW5rbm93bkVsZW1lbnQodm5vZGUudGFnKVxuICAgIClcbiAgfVxuXG4gIHZhciBjcmVhdGluZ0VsbUluVlByZSA9IDA7XG5cbiAgZnVuY3Rpb24gY3JlYXRlRWxtIChcbiAgICB2bm9kZSxcbiAgICBpbnNlcnRlZFZub2RlUXVldWUsXG4gICAgcGFyZW50RWxtLFxuICAgIHJlZkVsbSxcbiAgICBuZXN0ZWQsXG4gICAgb3duZXJBcnJheSxcbiAgICBpbmRleFxuICApIHtcbiAgICBpZiAoaXNEZWYodm5vZGUuZWxtKSAmJiBpc0RlZihvd25lckFycmF5KSkge1xuICAgICAgLy8gVGhpcyB2bm9kZSB3YXMgdXNlZCBpbiBhIHByZXZpb3VzIHJlbmRlciFcbiAgICAgIC8vIG5vdyBpdCdzIHVzZWQgYXMgYSBuZXcgbm9kZSwgb3ZlcndyaXRpbmcgaXRzIGVsbSB3b3VsZCBjYXVzZVxuICAgICAgLy8gcG90ZW50aWFsIHBhdGNoIGVycm9ycyBkb3duIHRoZSByb2FkIHdoZW4gaXQncyB1c2VkIGFzIGFuIGluc2VydGlvblxuICAgICAgLy8gcmVmZXJlbmNlIG5vZGUuIEluc3RlYWQsIHdlIGNsb25lIHRoZSBub2RlIG9uLWRlbWFuZCBiZWZvcmUgY3JlYXRpbmdcbiAgICAgIC8vIGFzc29jaWF0ZWQgRE9NIGVsZW1lbnQgZm9yIGl0LlxuICAgICAgdm5vZGUgPSBvd25lckFycmF5W2luZGV4XSA9IGNsb25lVk5vZGUodm5vZGUpO1xuICAgIH1cblxuICAgIHZub2RlLmlzUm9vdEluc2VydCA9ICFuZXN0ZWQ7IC8vIGZvciB0cmFuc2l0aW9uIGVudGVyIGNoZWNrXG4gICAgaWYgKGNyZWF0ZUNvbXBvbmVudCh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIHJlZkVsbSkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgICB2YXIgY2hpbGRyZW4gPSB2bm9kZS5jaGlsZHJlbjtcbiAgICB2YXIgdGFnID0gdm5vZGUudGFnO1xuICAgIGlmIChpc0RlZih0YWcpKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBpZiAoZGF0YSAmJiBkYXRhLnByZSkge1xuICAgICAgICAgIGNyZWF0aW5nRWxtSW5WUHJlKys7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzVW5rbm93bkVsZW1lbnQkJDEodm5vZGUsIGNyZWF0aW5nRWxtSW5WUHJlKSkge1xuICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICAnVW5rbm93biBjdXN0b20gZWxlbWVudDogPCcgKyB0YWcgKyAnPiAtIGRpZCB5b3UgJyArXG4gICAgICAgICAgICAncmVnaXN0ZXIgdGhlIGNvbXBvbmVudCBjb3JyZWN0bHk/IEZvciByZWN1cnNpdmUgY29tcG9uZW50cywgJyArXG4gICAgICAgICAgICAnbWFrZSBzdXJlIHRvIHByb3ZpZGUgdGhlIFwibmFtZVwiIG9wdGlvbi4nLFxuICAgICAgICAgICAgdm5vZGUuY29udGV4dFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdm5vZGUuZWxtID0gdm5vZGUubnNcbiAgICAgICAgPyBub2RlT3BzLmNyZWF0ZUVsZW1lbnROUyh2bm9kZS5ucywgdGFnKVxuICAgICAgICA6IG5vZGVPcHMuY3JlYXRlRWxlbWVudCh0YWcsIHZub2RlKTtcbiAgICAgIHNldFNjb3BlKHZub2RlKTtcblxuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICB7XG4gICAgICAgIGNyZWF0ZUNoaWxkcmVuKHZub2RlLCBjaGlsZHJlbiwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgaWYgKGlzRGVmKGRhdGEpKSB7XG4gICAgICAgICAgaW52b2tlQ3JlYXRlSG9va3Modm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaW5zZXJ0KHBhcmVudEVsbSwgdm5vZGUuZWxtLCByZWZFbG0pO1xuICAgICAgfVxuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBkYXRhICYmIGRhdGEucHJlKSB7XG4gICAgICAgIGNyZWF0aW5nRWxtSW5WUHJlLS07XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpc1RydWUodm5vZGUuaXNDb21tZW50KSkge1xuICAgICAgdm5vZGUuZWxtID0gbm9kZU9wcy5jcmVhdGVDb21tZW50KHZub2RlLnRleHQpO1xuICAgICAgaW5zZXJ0KHBhcmVudEVsbSwgdm5vZGUuZWxtLCByZWZFbG0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB2bm9kZS5lbG0gPSBub2RlT3BzLmNyZWF0ZVRleHROb2RlKHZub2RlLnRleHQpO1xuICAgICAgaW5zZXJ0KHBhcmVudEVsbSwgdm5vZGUuZWxtLCByZWZFbG0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUNvbXBvbmVudCAodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCByZWZFbG0pIHtcbiAgICB2YXIgaSA9IHZub2RlLmRhdGE7XG4gICAgaWYgKGlzRGVmKGkpKSB7XG4gICAgICB2YXIgaXNSZWFjdGl2YXRlZCA9IGlzRGVmKHZub2RlLmNvbXBvbmVudEluc3RhbmNlKSAmJiBpLmtlZXBBbGl2ZTtcbiAgICAgIGlmIChpc0RlZihpID0gaS5ob29rKSAmJiBpc0RlZihpID0gaS5pbml0KSkge1xuICAgICAgICBpKHZub2RlLCBmYWxzZSAvKiBoeWRyYXRpbmcgKi8pO1xuICAgICAgfVxuICAgICAgLy8gYWZ0ZXIgY2FsbGluZyB0aGUgaW5pdCBob29rLCBpZiB0aGUgdm5vZGUgaXMgYSBjaGlsZCBjb21wb25lbnRcbiAgICAgIC8vIGl0IHNob3VsZCd2ZSBjcmVhdGVkIGEgY2hpbGQgaW5zdGFuY2UgYW5kIG1vdW50ZWQgaXQuIHRoZSBjaGlsZFxuICAgICAgLy8gY29tcG9uZW50IGFsc28gaGFzIHNldCB0aGUgcGxhY2Vob2xkZXIgdm5vZGUncyBlbG0uXG4gICAgICAvLyBpbiB0aGF0IGNhc2Ugd2UgY2FuIGp1c3QgcmV0dXJuIHRoZSBlbGVtZW50IGFuZCBiZSBkb25lLlxuICAgICAgaWYgKGlzRGVmKHZub2RlLmNvbXBvbmVudEluc3RhbmNlKSkge1xuICAgICAgICBpbml0Q29tcG9uZW50KHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICBpbnNlcnQocGFyZW50RWxtLCB2bm9kZS5lbG0sIHJlZkVsbSk7XG4gICAgICAgIGlmIChpc1RydWUoaXNSZWFjdGl2YXRlZCkpIHtcbiAgICAgICAgICByZWFjdGl2YXRlQ29tcG9uZW50KHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgcmVmRWxtKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXRDb21wb25lbnQgKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpIHtcbiAgICBpZiAoaXNEZWYodm5vZGUuZGF0YS5wZW5kaW5nSW5zZXJ0KSkge1xuICAgICAgaW5zZXJ0ZWRWbm9kZVF1ZXVlLnB1c2guYXBwbHkoaW5zZXJ0ZWRWbm9kZVF1ZXVlLCB2bm9kZS5kYXRhLnBlbmRpbmdJbnNlcnQpO1xuICAgICAgdm5vZGUuZGF0YS5wZW5kaW5nSW5zZXJ0ID0gbnVsbDtcbiAgICB9XG4gICAgdm5vZGUuZWxtID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UuJGVsO1xuICAgIGlmIChpc1BhdGNoYWJsZSh2bm9kZSkpIHtcbiAgICAgIGludm9rZUNyZWF0ZUhvb2tzKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgc2V0U2NvcGUodm5vZGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBlbXB0eSBjb21wb25lbnQgcm9vdC5cbiAgICAgIC8vIHNraXAgYWxsIGVsZW1lbnQtcmVsYXRlZCBtb2R1bGVzIGV4Y2VwdCBmb3IgcmVmICgjMzQ1NSlcbiAgICAgIHJlZ2lzdGVyUmVmKHZub2RlKTtcbiAgICAgIC8vIG1ha2Ugc3VyZSB0byBpbnZva2UgdGhlIGluc2VydCBob29rXG4gICAgICBpbnNlcnRlZFZub2RlUXVldWUucHVzaCh2bm9kZSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVhY3RpdmF0ZUNvbXBvbmVudCAodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCByZWZFbG0pIHtcbiAgICB2YXIgaTtcbiAgICAvLyBoYWNrIGZvciAjNDMzOTogYSByZWFjdGl2YXRlZCBjb21wb25lbnQgd2l0aCBpbm5lciB0cmFuc2l0aW9uXG4gICAgLy8gZG9lcyBub3QgdHJpZ2dlciBiZWNhdXNlIHRoZSBpbm5lciBub2RlJ3MgY3JlYXRlZCBob29rcyBhcmUgbm90IGNhbGxlZFxuICAgIC8vIGFnYWluLiBJdCdzIG5vdCBpZGVhbCB0byBpbnZvbHZlIG1vZHVsZS1zcGVjaWZpYyBsb2dpYyBpbiBoZXJlIGJ1dFxuICAgIC8vIHRoZXJlIGRvZXNuJ3Qgc2VlbSB0byBiZSBhIGJldHRlciB3YXkgdG8gZG8gaXQuXG4gICAgdmFyIGlubmVyTm9kZSA9IHZub2RlO1xuICAgIHdoaWxlIChpbm5lck5vZGUuY29tcG9uZW50SW5zdGFuY2UpIHtcbiAgICAgIGlubmVyTm9kZSA9IGlubmVyTm9kZS5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGU7XG4gICAgICBpZiAoaXNEZWYoaSA9IGlubmVyTm9kZS5kYXRhKSAmJiBpc0RlZihpID0gaS50cmFuc2l0aW9uKSkge1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgY2JzLmFjdGl2YXRlLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgY2JzLmFjdGl2YXRlW2ldKGVtcHR5Tm9kZSwgaW5uZXJOb2RlKTtcbiAgICAgICAgfVxuICAgICAgICBpbnNlcnRlZFZub2RlUXVldWUucHVzaChpbm5lck5vZGUpO1xuICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cbiAgICAvLyB1bmxpa2UgYSBuZXdseSBjcmVhdGVkIGNvbXBvbmVudCxcbiAgICAvLyBhIHJlYWN0aXZhdGVkIGtlZXAtYWxpdmUgY29tcG9uZW50IGRvZXNuJ3QgaW5zZXJ0IGl0c2VsZlxuICAgIGluc2VydChwYXJlbnRFbG0sIHZub2RlLmVsbSwgcmVmRWxtKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGluc2VydCAocGFyZW50LCBlbG0sIHJlZiQkMSkge1xuICAgIGlmIChpc0RlZihwYXJlbnQpKSB7XG4gICAgICBpZiAoaXNEZWYocmVmJCQxKSkge1xuICAgICAgICBpZiAobm9kZU9wcy5wYXJlbnROb2RlKHJlZiQkMSkgPT09IHBhcmVudCkge1xuICAgICAgICAgIG5vZGVPcHMuaW5zZXJ0QmVmb3JlKHBhcmVudCwgZWxtLCByZWYkJDEpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub2RlT3BzLmFwcGVuZENoaWxkKHBhcmVudCwgZWxtKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVDaGlsZHJlbiAodm5vZGUsIGNoaWxkcmVuLCBpbnNlcnRlZFZub2RlUXVldWUpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbikpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGNoZWNrRHVwbGljYXRlS2V5cyhjaGlsZHJlbik7XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGNyZWF0ZUVsbShjaGlsZHJlbltpXSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCB2bm9kZS5lbG0sIG51bGwsIHRydWUsIGNoaWxkcmVuLCBpKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzUHJpbWl0aXZlKHZub2RlLnRleHQpKSB7XG4gICAgICBub2RlT3BzLmFwcGVuZENoaWxkKHZub2RlLmVsbSwgbm9kZU9wcy5jcmVhdGVUZXh0Tm9kZShTdHJpbmcodm5vZGUudGV4dCkpKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpc1BhdGNoYWJsZSAodm5vZGUpIHtcbiAgICB3aGlsZSAodm5vZGUuY29tcG9uZW50SW5zdGFuY2UpIHtcbiAgICAgIHZub2RlID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlO1xuICAgIH1cbiAgICByZXR1cm4gaXNEZWYodm5vZGUudGFnKVxuICB9XG5cbiAgZnVuY3Rpb24gaW52b2tlQ3JlYXRlSG9va3MgKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpIHtcbiAgICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCBjYnMuY3JlYXRlLmxlbmd0aDsgKytpJDEpIHtcbiAgICAgIGNicy5jcmVhdGVbaSQxXShlbXB0eU5vZGUsIHZub2RlKTtcbiAgICB9XG4gICAgaSA9IHZub2RlLmRhdGEuaG9vazsgLy8gUmV1c2UgdmFyaWFibGVcbiAgICBpZiAoaXNEZWYoaSkpIHtcbiAgICAgIGlmIChpc0RlZihpLmNyZWF0ZSkpIHsgaS5jcmVhdGUoZW1wdHlOb2RlLCB2bm9kZSk7IH1cbiAgICAgIGlmIChpc0RlZihpLmluc2VydCkpIHsgaW5zZXJ0ZWRWbm9kZVF1ZXVlLnB1c2godm5vZGUpOyB9XG4gICAgfVxuICB9XG5cbiAgLy8gc2V0IHNjb3BlIGlkIGF0dHJpYnV0ZSBmb3Igc2NvcGVkIENTUy5cbiAgLy8gdGhpcyBpcyBpbXBsZW1lbnRlZCBhcyBhIHNwZWNpYWwgY2FzZSB0byBhdm9pZCB0aGUgb3ZlcmhlYWRcbiAgLy8gb2YgZ29pbmcgdGhyb3VnaCB0aGUgbm9ybWFsIGF0dHJpYnV0ZSBwYXRjaGluZyBwcm9jZXNzLlxuICBmdW5jdGlvbiBzZXRTY29wZSAodm5vZGUpIHtcbiAgICB2YXIgaTtcbiAgICBpZiAoaXNEZWYoaSA9IHZub2RlLmZuU2NvcGVJZCkpIHtcbiAgICAgIG5vZGVPcHMuc2V0U3R5bGVTY29wZSh2bm9kZS5lbG0sIGkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYW5jZXN0b3IgPSB2bm9kZTtcbiAgICAgIHdoaWxlIChhbmNlc3Rvcikge1xuICAgICAgICBpZiAoaXNEZWYoaSA9IGFuY2VzdG9yLmNvbnRleHQpICYmIGlzRGVmKGkgPSBpLiRvcHRpb25zLl9zY29wZUlkKSkge1xuICAgICAgICAgIG5vZGVPcHMuc2V0U3R5bGVTY29wZSh2bm9kZS5lbG0sIGkpO1xuICAgICAgICB9XG4gICAgICAgIGFuY2VzdG9yID0gYW5jZXN0b3IucGFyZW50O1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBmb3Igc2xvdCBjb250ZW50IHRoZXkgc2hvdWxkIGFsc28gZ2V0IHRoZSBzY29wZUlkIGZyb20gdGhlIGhvc3QgaW5zdGFuY2UuXG4gICAgaWYgKGlzRGVmKGkgPSBhY3RpdmVJbnN0YW5jZSkgJiZcbiAgICAgIGkgIT09IHZub2RlLmNvbnRleHQgJiZcbiAgICAgIGkgIT09IHZub2RlLmZuQ29udGV4dCAmJlxuICAgICAgaXNEZWYoaSA9IGkuJG9wdGlvbnMuX3Njb3BlSWQpXG4gICAgKSB7XG4gICAgICBub2RlT3BzLnNldFN0eWxlU2NvcGUodm5vZGUuZWxtLCBpKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBhZGRWbm9kZXMgKHBhcmVudEVsbSwgcmVmRWxtLCB2bm9kZXMsIHN0YXJ0SWR4LCBlbmRJZHgsIGluc2VydGVkVm5vZGVRdWV1ZSkge1xuICAgIGZvciAoOyBzdGFydElkeCA8PSBlbmRJZHg7ICsrc3RhcnRJZHgpIHtcbiAgICAgIGNyZWF0ZUVsbSh2bm9kZXNbc3RhcnRJZHhdLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgcmVmRWxtLCBmYWxzZSwgdm5vZGVzLCBzdGFydElkeCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaW52b2tlRGVzdHJveUhvb2sgKHZub2RlKSB7XG4gICAgdmFyIGksIGo7XG4gICAgdmFyIGRhdGEgPSB2bm9kZS5kYXRhO1xuICAgIGlmIChpc0RlZihkYXRhKSkge1xuICAgICAgaWYgKGlzRGVmKGkgPSBkYXRhLmhvb2spICYmIGlzRGVmKGkgPSBpLmRlc3Ryb3kpKSB7IGkodm5vZGUpOyB9XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgY2JzLmRlc3Ryb3kubGVuZ3RoOyArK2kpIHsgY2JzLmRlc3Ryb3lbaV0odm5vZGUpOyB9XG4gICAgfVxuICAgIGlmIChpc0RlZihpID0gdm5vZGUuY2hpbGRyZW4pKSB7XG4gICAgICBmb3IgKGogPSAwOyBqIDwgdm5vZGUuY2hpbGRyZW4ubGVuZ3RoOyArK2opIHtcbiAgICAgICAgaW52b2tlRGVzdHJveUhvb2sodm5vZGUuY2hpbGRyZW5bal0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZVZub2RlcyAodm5vZGVzLCBzdGFydElkeCwgZW5kSWR4KSB7XG4gICAgZm9yICg7IHN0YXJ0SWR4IDw9IGVuZElkeDsgKytzdGFydElkeCkge1xuICAgICAgdmFyIGNoID0gdm5vZGVzW3N0YXJ0SWR4XTtcbiAgICAgIGlmIChpc0RlZihjaCkpIHtcbiAgICAgICAgaWYgKGlzRGVmKGNoLnRhZykpIHtcbiAgICAgICAgICByZW1vdmVBbmRJbnZva2VSZW1vdmVIb29rKGNoKTtcbiAgICAgICAgICBpbnZva2VEZXN0cm95SG9vayhjaCk7XG4gICAgICAgIH0gZWxzZSB7IC8vIFRleHQgbm9kZVxuICAgICAgICAgIHJlbW92ZU5vZGUoY2guZWxtKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZUFuZEludm9rZVJlbW92ZUhvb2sgKHZub2RlLCBybSkge1xuICAgIGlmIChpc0RlZihybSkgfHwgaXNEZWYodm5vZGUuZGF0YSkpIHtcbiAgICAgIHZhciBpO1xuICAgICAgdmFyIGxpc3RlbmVycyA9IGNicy5yZW1vdmUubGVuZ3RoICsgMTtcbiAgICAgIGlmIChpc0RlZihybSkpIHtcbiAgICAgICAgLy8gd2UgaGF2ZSBhIHJlY3Vyc2l2ZWx5IHBhc3NlZCBkb3duIHJtIGNhbGxiYWNrXG4gICAgICAgIC8vIGluY3JlYXNlIHRoZSBsaXN0ZW5lcnMgY291bnRcbiAgICAgICAgcm0ubGlzdGVuZXJzICs9IGxpc3RlbmVycztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGRpcmVjdGx5IHJlbW92aW5nXG4gICAgICAgIHJtID0gY3JlYXRlUm1DYih2bm9kZS5lbG0sIGxpc3RlbmVycyk7XG4gICAgICB9XG4gICAgICAvLyByZWN1cnNpdmVseSBpbnZva2UgaG9va3Mgb24gY2hpbGQgY29tcG9uZW50IHJvb3Qgbm9kZVxuICAgICAgaWYgKGlzRGVmKGkgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSkgJiYgaXNEZWYoaSA9IGkuX3Zub2RlKSAmJiBpc0RlZihpLmRhdGEpKSB7XG4gICAgICAgIHJlbW92ZUFuZEludm9rZVJlbW92ZUhvb2soaSwgcm0pO1xuICAgICAgfVxuICAgICAgZm9yIChpID0gMDsgaSA8IGNicy5yZW1vdmUubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgY2JzLnJlbW92ZVtpXSh2bm9kZSwgcm0pO1xuICAgICAgfVxuICAgICAgaWYgKGlzRGVmKGkgPSB2bm9kZS5kYXRhLmhvb2spICYmIGlzRGVmKGkgPSBpLnJlbW92ZSkpIHtcbiAgICAgICAgaSh2bm9kZSwgcm0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcm0oKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmVtb3ZlTm9kZSh2bm9kZS5lbG0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZUNoaWxkcmVuIChwYXJlbnRFbG0sIG9sZENoLCBuZXdDaCwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCByZW1vdmVPbmx5KSB7XG4gICAgdmFyIG9sZFN0YXJ0SWR4ID0gMDtcbiAgICB2YXIgbmV3U3RhcnRJZHggPSAwO1xuICAgIHZhciBvbGRFbmRJZHggPSBvbGRDaC5sZW5ndGggLSAxO1xuICAgIHZhciBvbGRTdGFydFZub2RlID0gb2xkQ2hbMF07XG4gICAgdmFyIG9sZEVuZFZub2RlID0gb2xkQ2hbb2xkRW5kSWR4XTtcbiAgICB2YXIgbmV3RW5kSWR4ID0gbmV3Q2gubGVuZ3RoIC0gMTtcbiAgICB2YXIgbmV3U3RhcnRWbm9kZSA9IG5ld0NoWzBdO1xuICAgIHZhciBuZXdFbmRWbm9kZSA9IG5ld0NoW25ld0VuZElkeF07XG4gICAgdmFyIG9sZEtleVRvSWR4LCBpZHhJbk9sZCwgdm5vZGVUb01vdmUsIHJlZkVsbTtcblxuICAgIC8vIHJlbW92ZU9ubHkgaXMgYSBzcGVjaWFsIGZsYWcgdXNlZCBvbmx5IGJ5IDx0cmFuc2l0aW9uLWdyb3VwPlxuICAgIC8vIHRvIGVuc3VyZSByZW1vdmVkIGVsZW1lbnRzIHN0YXkgaW4gY29ycmVjdCByZWxhdGl2ZSBwb3NpdGlvbnNcbiAgICAvLyBkdXJpbmcgbGVhdmluZyB0cmFuc2l0aW9uc1xuICAgIHZhciBjYW5Nb3ZlID0gIXJlbW92ZU9ubHk7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgY2hlY2tEdXBsaWNhdGVLZXlzKG5ld0NoKTtcbiAgICB9XG5cbiAgICB3aGlsZSAob2xkU3RhcnRJZHggPD0gb2xkRW5kSWR4ICYmIG5ld1N0YXJ0SWR4IDw9IG5ld0VuZElkeCkge1xuICAgICAgaWYgKGlzVW5kZWYob2xkU3RhcnRWbm9kZSkpIHtcbiAgICAgICAgb2xkU3RhcnRWbm9kZSA9IG9sZENoWysrb2xkU3RhcnRJZHhdOyAvLyBWbm9kZSBoYXMgYmVlbiBtb3ZlZCBsZWZ0XG4gICAgICB9IGVsc2UgaWYgKGlzVW5kZWYob2xkRW5kVm5vZGUpKSB7XG4gICAgICAgIG9sZEVuZFZub2RlID0gb2xkQ2hbLS1vbGRFbmRJZHhdO1xuICAgICAgfSBlbHNlIGlmIChzYW1lVm5vZGUob2xkU3RhcnRWbm9kZSwgbmV3U3RhcnRWbm9kZSkpIHtcbiAgICAgICAgcGF0Y2hWbm9kZShvbGRTdGFydFZub2RlLCBuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIG5ld0NoLCBuZXdTdGFydElkeCk7XG4gICAgICAgIG9sZFN0YXJ0Vm5vZGUgPSBvbGRDaFsrK29sZFN0YXJ0SWR4XTtcbiAgICAgICAgbmV3U3RhcnRWbm9kZSA9IG5ld0NoWysrbmV3U3RhcnRJZHhdO1xuICAgICAgfSBlbHNlIGlmIChzYW1lVm5vZGUob2xkRW5kVm5vZGUsIG5ld0VuZFZub2RlKSkge1xuICAgICAgICBwYXRjaFZub2RlKG9sZEVuZFZub2RlLCBuZXdFbmRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBuZXdDaCwgbmV3RW5kSWR4KTtcbiAgICAgICAgb2xkRW5kVm5vZGUgPSBvbGRDaFstLW9sZEVuZElkeF07XG4gICAgICAgIG5ld0VuZFZub2RlID0gbmV3Q2hbLS1uZXdFbmRJZHhdO1xuICAgICAgfSBlbHNlIGlmIChzYW1lVm5vZGUob2xkU3RhcnRWbm9kZSwgbmV3RW5kVm5vZGUpKSB7IC8vIFZub2RlIG1vdmVkIHJpZ2h0XG4gICAgICAgIHBhdGNoVm5vZGUob2xkU3RhcnRWbm9kZSwgbmV3RW5kVm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgbmV3Q2gsIG5ld0VuZElkeCk7XG4gICAgICAgIGNhbk1vdmUgJiYgbm9kZU9wcy5pbnNlcnRCZWZvcmUocGFyZW50RWxtLCBvbGRTdGFydFZub2RlLmVsbSwgbm9kZU9wcy5uZXh0U2libGluZyhvbGRFbmRWbm9kZS5lbG0pKTtcbiAgICAgICAgb2xkU3RhcnRWbm9kZSA9IG9sZENoWysrb2xkU3RhcnRJZHhdO1xuICAgICAgICBuZXdFbmRWbm9kZSA9IG5ld0NoWy0tbmV3RW5kSWR4XTtcbiAgICAgIH0gZWxzZSBpZiAoc2FtZVZub2RlKG9sZEVuZFZub2RlLCBuZXdTdGFydFZub2RlKSkgeyAvLyBWbm9kZSBtb3ZlZCBsZWZ0XG4gICAgICAgIHBhdGNoVm5vZGUob2xkRW5kVm5vZGUsIG5ld1N0YXJ0Vm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgbmV3Q2gsIG5ld1N0YXJ0SWR4KTtcbiAgICAgICAgY2FuTW92ZSAmJiBub2RlT3BzLmluc2VydEJlZm9yZShwYXJlbnRFbG0sIG9sZEVuZFZub2RlLmVsbSwgb2xkU3RhcnRWbm9kZS5lbG0pO1xuICAgICAgICBvbGRFbmRWbm9kZSA9IG9sZENoWy0tb2xkRW5kSWR4XTtcbiAgICAgICAgbmV3U3RhcnRWbm9kZSA9IG5ld0NoWysrbmV3U3RhcnRJZHhdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGlzVW5kZWYob2xkS2V5VG9JZHgpKSB7IG9sZEtleVRvSWR4ID0gY3JlYXRlS2V5VG9PbGRJZHgob2xkQ2gsIG9sZFN0YXJ0SWR4LCBvbGRFbmRJZHgpOyB9XG4gICAgICAgIGlkeEluT2xkID0gaXNEZWYobmV3U3RhcnRWbm9kZS5rZXkpXG4gICAgICAgICAgPyBvbGRLZXlUb0lkeFtuZXdTdGFydFZub2RlLmtleV1cbiAgICAgICAgICA6IGZpbmRJZHhJbk9sZChuZXdTdGFydFZub2RlLCBvbGRDaCwgb2xkU3RhcnRJZHgsIG9sZEVuZElkeCk7XG4gICAgICAgIGlmIChpc1VuZGVmKGlkeEluT2xkKSkgeyAvLyBOZXcgZWxlbWVudFxuICAgICAgICAgIGNyZWF0ZUVsbShuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgb2xkU3RhcnRWbm9kZS5lbG0sIGZhbHNlLCBuZXdDaCwgbmV3U3RhcnRJZHgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZub2RlVG9Nb3ZlID0gb2xkQ2hbaWR4SW5PbGRdO1xuICAgICAgICAgIGlmIChzYW1lVm5vZGUodm5vZGVUb01vdmUsIG5ld1N0YXJ0Vm5vZGUpKSB7XG4gICAgICAgICAgICBwYXRjaFZub2RlKHZub2RlVG9Nb3ZlLCBuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIG5ld0NoLCBuZXdTdGFydElkeCk7XG4gICAgICAgICAgICBvbGRDaFtpZHhJbk9sZF0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICBjYW5Nb3ZlICYmIG5vZGVPcHMuaW5zZXJ0QmVmb3JlKHBhcmVudEVsbSwgdm5vZGVUb01vdmUuZWxtLCBvbGRTdGFydFZub2RlLmVsbSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIHNhbWUga2V5IGJ1dCBkaWZmZXJlbnQgZWxlbWVudC4gdHJlYXQgYXMgbmV3IGVsZW1lbnRcbiAgICAgICAgICAgIGNyZWF0ZUVsbShuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgb2xkU3RhcnRWbm9kZS5lbG0sIGZhbHNlLCBuZXdDaCwgbmV3U3RhcnRJZHgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBuZXdTdGFydFZub2RlID0gbmV3Q2hbKytuZXdTdGFydElkeF07XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChvbGRTdGFydElkeCA+IG9sZEVuZElkeCkge1xuICAgICAgcmVmRWxtID0gaXNVbmRlZihuZXdDaFtuZXdFbmRJZHggKyAxXSkgPyBudWxsIDogbmV3Q2hbbmV3RW5kSWR4ICsgMV0uZWxtO1xuICAgICAgYWRkVm5vZGVzKHBhcmVudEVsbSwgcmVmRWxtLCBuZXdDaCwgbmV3U3RhcnRJZHgsIG5ld0VuZElkeCwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICB9IGVsc2UgaWYgKG5ld1N0YXJ0SWR4ID4gbmV3RW5kSWR4KSB7XG4gICAgICByZW1vdmVWbm9kZXMob2xkQ2gsIG9sZFN0YXJ0SWR4LCBvbGRFbmRJZHgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNoZWNrRHVwbGljYXRlS2V5cyAoY2hpbGRyZW4pIHtcbiAgICB2YXIgc2VlbktleXMgPSB7fTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdm5vZGUgPSBjaGlsZHJlbltpXTtcbiAgICAgIHZhciBrZXkgPSB2bm9kZS5rZXk7XG4gICAgICBpZiAoaXNEZWYoa2V5KSkge1xuICAgICAgICBpZiAoc2VlbktleXNba2V5XSkge1xuICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICAoXCJEdXBsaWNhdGUga2V5cyBkZXRlY3RlZDogJ1wiICsga2V5ICsgXCInLiBUaGlzIG1heSBjYXVzZSBhbiB1cGRhdGUgZXJyb3IuXCIpLFxuICAgICAgICAgICAgdm5vZGUuY29udGV4dFxuICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2VlbktleXNba2V5XSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBmaW5kSWR4SW5PbGQgKG5vZGUsIG9sZENoLCBzdGFydCwgZW5kKSB7XG4gICAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpKyspIHtcbiAgICAgIHZhciBjID0gb2xkQ2hbaV07XG4gICAgICBpZiAoaXNEZWYoYykgJiYgc2FtZVZub2RlKG5vZGUsIGMpKSB7IHJldHVybiBpIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwYXRjaFZub2RlIChcbiAgICBvbGRWbm9kZSxcbiAgICB2bm9kZSxcbiAgICBpbnNlcnRlZFZub2RlUXVldWUsXG4gICAgb3duZXJBcnJheSxcbiAgICBpbmRleCxcbiAgICByZW1vdmVPbmx5XG4gICkge1xuICAgIGlmIChvbGRWbm9kZSA9PT0gdm5vZGUpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGlmIChpc0RlZih2bm9kZS5lbG0pICYmIGlzRGVmKG93bmVyQXJyYXkpKSB7XG4gICAgICAvLyBjbG9uZSByZXVzZWQgdm5vZGVcbiAgICAgIHZub2RlID0gb3duZXJBcnJheVtpbmRleF0gPSBjbG9uZVZOb2RlKHZub2RlKTtcbiAgICB9XG5cbiAgICB2YXIgZWxtID0gdm5vZGUuZWxtID0gb2xkVm5vZGUuZWxtO1xuXG4gICAgaWYgKGlzVHJ1ZShvbGRWbm9kZS5pc0FzeW5jUGxhY2Vob2xkZXIpKSB7XG4gICAgICBpZiAoaXNEZWYodm5vZGUuYXN5bmNGYWN0b3J5LnJlc29sdmVkKSkge1xuICAgICAgICBoeWRyYXRlKG9sZFZub2RlLmVsbSwgdm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2bm9kZS5pc0FzeW5jUGxhY2Vob2xkZXIgPSB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgLy8gcmV1c2UgZWxlbWVudCBmb3Igc3RhdGljIHRyZWVzLlxuICAgIC8vIG5vdGUgd2Ugb25seSBkbyB0aGlzIGlmIHRoZSB2bm9kZSBpcyBjbG9uZWQgLVxuICAgIC8vIGlmIHRoZSBuZXcgbm9kZSBpcyBub3QgY2xvbmVkIGl0IG1lYW5zIHRoZSByZW5kZXIgZnVuY3Rpb25zIGhhdmUgYmVlblxuICAgIC8vIHJlc2V0IGJ5IHRoZSBob3QtcmVsb2FkLWFwaSBhbmQgd2UgbmVlZCB0byBkbyBhIHByb3BlciByZS1yZW5kZXIuXG4gICAgaWYgKGlzVHJ1ZSh2bm9kZS5pc1N0YXRpYykgJiZcbiAgICAgIGlzVHJ1ZShvbGRWbm9kZS5pc1N0YXRpYykgJiZcbiAgICAgIHZub2RlLmtleSA9PT0gb2xkVm5vZGUua2V5ICYmXG4gICAgICAoaXNUcnVlKHZub2RlLmlzQ2xvbmVkKSB8fCBpc1RydWUodm5vZGUuaXNPbmNlKSlcbiAgICApIHtcbiAgICAgIHZub2RlLmNvbXBvbmVudEluc3RhbmNlID0gb2xkVm5vZGUuY29tcG9uZW50SW5zdGFuY2U7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICB2YXIgaTtcbiAgICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7XG4gICAgaWYgKGlzRGVmKGRhdGEpICYmIGlzRGVmKGkgPSBkYXRhLmhvb2spICYmIGlzRGVmKGkgPSBpLnByZXBhdGNoKSkge1xuICAgICAgaShvbGRWbm9kZSwgdm5vZGUpO1xuICAgIH1cblxuICAgIHZhciBvbGRDaCA9IG9sZFZub2RlLmNoaWxkcmVuO1xuICAgIHZhciBjaCA9IHZub2RlLmNoaWxkcmVuO1xuICAgIGlmIChpc0RlZihkYXRhKSAmJiBpc1BhdGNoYWJsZSh2bm9kZSkpIHtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBjYnMudXBkYXRlLmxlbmd0aDsgKytpKSB7IGNicy51cGRhdGVbaV0ob2xkVm5vZGUsIHZub2RlKTsgfVxuICAgICAgaWYgKGlzRGVmKGkgPSBkYXRhLmhvb2spICYmIGlzRGVmKGkgPSBpLnVwZGF0ZSkpIHsgaShvbGRWbm9kZSwgdm5vZGUpOyB9XG4gICAgfVxuICAgIGlmIChpc1VuZGVmKHZub2RlLnRleHQpKSB7XG4gICAgICBpZiAoaXNEZWYob2xkQ2gpICYmIGlzRGVmKGNoKSkge1xuICAgICAgICBpZiAob2xkQ2ggIT09IGNoKSB7IHVwZGF0ZUNoaWxkcmVuKGVsbSwgb2xkQ2gsIGNoLCBpbnNlcnRlZFZub2RlUXVldWUsIHJlbW92ZU9ubHkpOyB9XG4gICAgICB9IGVsc2UgaWYgKGlzRGVmKGNoKSkge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIGNoZWNrRHVwbGljYXRlS2V5cyhjaCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzRGVmKG9sZFZub2RlLnRleHQpKSB7IG5vZGVPcHMuc2V0VGV4dENvbnRlbnQoZWxtLCAnJyk7IH1cbiAgICAgICAgYWRkVm5vZGVzKGVsbSwgbnVsbCwgY2gsIDAsIGNoLmxlbmd0aCAtIDEsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICB9IGVsc2UgaWYgKGlzRGVmKG9sZENoKSkge1xuICAgICAgICByZW1vdmVWbm9kZXMob2xkQ2gsIDAsIG9sZENoLmxlbmd0aCAtIDEpO1xuICAgICAgfSBlbHNlIGlmIChpc0RlZihvbGRWbm9kZS50ZXh0KSkge1xuICAgICAgICBub2RlT3BzLnNldFRleHRDb250ZW50KGVsbSwgJycpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAob2xkVm5vZGUudGV4dCAhPT0gdm5vZGUudGV4dCkge1xuICAgICAgbm9kZU9wcy5zZXRUZXh0Q29udGVudChlbG0sIHZub2RlLnRleHQpO1xuICAgIH1cbiAgICBpZiAoaXNEZWYoZGF0YSkpIHtcbiAgICAgIGlmIChpc0RlZihpID0gZGF0YS5ob29rKSAmJiBpc0RlZihpID0gaS5wb3N0cGF0Y2gpKSB7IGkob2xkVm5vZGUsIHZub2RlKTsgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGludm9rZUluc2VydEhvb2sgKHZub2RlLCBxdWV1ZSwgaW5pdGlhbCkge1xuICAgIC8vIGRlbGF5IGluc2VydCBob29rcyBmb3IgY29tcG9uZW50IHJvb3Qgbm9kZXMsIGludm9rZSB0aGVtIGFmdGVyIHRoZVxuICAgIC8vIGVsZW1lbnQgaXMgcmVhbGx5IGluc2VydGVkXG4gICAgaWYgKGlzVHJ1ZShpbml0aWFsKSAmJiBpc0RlZih2bm9kZS5wYXJlbnQpKSB7XG4gICAgICB2bm9kZS5wYXJlbnQuZGF0YS5wZW5kaW5nSW5zZXJ0ID0gcXVldWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcXVldWUubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgcXVldWVbaV0uZGF0YS5ob29rLmluc2VydChxdWV1ZVtpXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdmFyIGh5ZHJhdGlvbkJhaWxlZCA9IGZhbHNlO1xuICAvLyBsaXN0IG9mIG1vZHVsZXMgdGhhdCBjYW4gc2tpcCBjcmVhdGUgaG9vayBkdXJpbmcgaHlkcmF0aW9uIGJlY2F1c2UgdGhleVxuICAvLyBhcmUgYWxyZWFkeSByZW5kZXJlZCBvbiB0aGUgY2xpZW50IG9yIGhhcyBubyBuZWVkIGZvciBpbml0aWFsaXphdGlvblxuICAvLyBOb3RlOiBzdHlsZSBpcyBleGNsdWRlZCBiZWNhdXNlIGl0IHJlbGllcyBvbiBpbml0aWFsIGNsb25lIGZvciBmdXR1cmVcbiAgLy8gZGVlcCB1cGRhdGVzICgjNzA2MykuXG4gIHZhciBpc1JlbmRlcmVkTW9kdWxlID0gbWFrZU1hcCgnYXR0cnMsY2xhc3Msc3RhdGljQ2xhc3Msc3RhdGljU3R5bGUsa2V5Jyk7XG5cbiAgLy8gTm90ZTogdGhpcyBpcyBhIGJyb3dzZXItb25seSBmdW5jdGlvbiBzbyB3ZSBjYW4gYXNzdW1lIGVsbXMgYXJlIERPTSBub2Rlcy5cbiAgZnVuY3Rpb24gaHlkcmF0ZSAoZWxtLCB2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBpblZQcmUpIHtcbiAgICB2YXIgaTtcbiAgICB2YXIgdGFnID0gdm5vZGUudGFnO1xuICAgIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgICB2YXIgY2hpbGRyZW4gPSB2bm9kZS5jaGlsZHJlbjtcbiAgICBpblZQcmUgPSBpblZQcmUgfHwgKGRhdGEgJiYgZGF0YS5wcmUpO1xuICAgIHZub2RlLmVsbSA9IGVsbTtcblxuICAgIGlmIChpc1RydWUodm5vZGUuaXNDb21tZW50KSAmJiBpc0RlZih2bm9kZS5hc3luY0ZhY3RvcnkpKSB7XG4gICAgICB2bm9kZS5pc0FzeW5jUGxhY2Vob2xkZXIgPSB0cnVlO1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gICAgLy8gYXNzZXJ0IG5vZGUgbWF0Y2hcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKCFhc3NlcnROb2RlTWF0Y2goZWxtLCB2bm9kZSwgaW5WUHJlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzRGVmKGRhdGEpKSB7XG4gICAgICBpZiAoaXNEZWYoaSA9IGRhdGEuaG9vaykgJiYgaXNEZWYoaSA9IGkuaW5pdCkpIHsgaSh2bm9kZSwgdHJ1ZSAvKiBoeWRyYXRpbmcgKi8pOyB9XG4gICAgICBpZiAoaXNEZWYoaSA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlKSkge1xuICAgICAgICAvLyBjaGlsZCBjb21wb25lbnQuIGl0IHNob3VsZCBoYXZlIGh5ZHJhdGVkIGl0cyBvd24gdHJlZS5cbiAgICAgICAgaW5pdENvbXBvbmVudCh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzRGVmKHRhZykpIHtcbiAgICAgIGlmIChpc0RlZihjaGlsZHJlbikpIHtcbiAgICAgICAgLy8gZW1wdHkgZWxlbWVudCwgYWxsb3cgY2xpZW50IHRvIHBpY2sgdXAgYW5kIHBvcHVsYXRlIGNoaWxkcmVuXG4gICAgICAgIGlmICghZWxtLmhhc0NoaWxkTm9kZXMoKSkge1xuICAgICAgICAgIGNyZWF0ZUNoaWxkcmVuKHZub2RlLCBjaGlsZHJlbiwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyB2LWh0bWwgYW5kIGRvbVByb3BzOiBpbm5lckhUTUxcbiAgICAgICAgICBpZiAoaXNEZWYoaSA9IGRhdGEpICYmIGlzRGVmKGkgPSBpLmRvbVByb3BzKSAmJiBpc0RlZihpID0gaS5pbm5lckhUTUwpKSB7XG4gICAgICAgICAgICBpZiAoaSAhPT0gZWxtLmlubmVySFRNTCkge1xuICAgICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgICAgICAgICAhaHlkcmF0aW9uQmFpbGVkXG4gICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIGh5ZHJhdGlvbkJhaWxlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdQYXJlbnQ6ICcsIGVsbSk7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdzZXJ2ZXIgaW5uZXJIVE1MOiAnLCBpKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ2NsaWVudCBpbm5lckhUTUw6ICcsIGVsbS5pbm5lckhUTUwpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBpdGVyYXRlIGFuZCBjb21wYXJlIGNoaWxkcmVuIGxpc3RzXG4gICAgICAgICAgICB2YXIgY2hpbGRyZW5NYXRjaCA9IHRydWU7XG4gICAgICAgICAgICB2YXIgY2hpbGROb2RlID0gZWxtLmZpcnN0Q2hpbGQ7XG4gICAgICAgICAgICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCBjaGlsZHJlbi5sZW5ndGg7IGkkMSsrKSB7XG4gICAgICAgICAgICAgIGlmICghY2hpbGROb2RlIHx8ICFoeWRyYXRlKGNoaWxkTm9kZSwgY2hpbGRyZW5baSQxXSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBpblZQcmUpKSB7XG4gICAgICAgICAgICAgICAgY2hpbGRyZW5NYXRjaCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgY2hpbGROb2RlID0gY2hpbGROb2RlLm5leHRTaWJsaW5nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gaWYgY2hpbGROb2RlIGlzIG5vdCBudWxsLCBpdCBtZWFucyB0aGUgYWN0dWFsIGNoaWxkTm9kZXMgbGlzdCBpc1xuICAgICAgICAgICAgLy8gbG9uZ2VyIHRoYW4gdGhlIHZpcnR1YWwgY2hpbGRyZW4gbGlzdC5cbiAgICAgICAgICAgIGlmICghY2hpbGRyZW5NYXRjaCB8fCBjaGlsZE5vZGUpIHtcbiAgICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgICAgICAgICAgICAgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgICAgICAgICAgIWh5ZHJhdGlvbkJhaWxlZFxuICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBoeWRyYXRpb25CYWlsZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignUGFyZW50OiAnLCBlbG0pO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignTWlzbWF0Y2hpbmcgY2hpbGROb2RlcyB2cy4gVk5vZGVzOiAnLCBlbG0uY2hpbGROb2RlcywgY2hpbGRyZW4pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGlzRGVmKGRhdGEpKSB7XG4gICAgICAgIHZhciBmdWxsSW52b2tlID0gZmFsc2U7XG4gICAgICAgIGZvciAodmFyIGtleSBpbiBkYXRhKSB7XG4gICAgICAgICAgaWYgKCFpc1JlbmRlcmVkTW9kdWxlKGtleSkpIHtcbiAgICAgICAgICAgIGZ1bGxJbnZva2UgPSB0cnVlO1xuICAgICAgICAgICAgaW52b2tlQ3JlYXRlSG9va3Modm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgICAgICBicmVha1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIWZ1bGxJbnZva2UgJiYgZGF0YVsnY2xhc3MnXSkge1xuICAgICAgICAgIC8vIGVuc3VyZSBjb2xsZWN0aW5nIGRlcHMgZm9yIGRlZXAgY2xhc3MgYmluZGluZ3MgZm9yIGZ1dHVyZSB1cGRhdGVzXG4gICAgICAgICAgdHJhdmVyc2UoZGF0YVsnY2xhc3MnXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGVsbS5kYXRhICE9PSB2bm9kZS50ZXh0KSB7XG4gICAgICBlbG0uZGF0YSA9IHZub2RlLnRleHQ7XG4gICAgfVxuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICBmdW5jdGlvbiBhc3NlcnROb2RlTWF0Y2ggKG5vZGUsIHZub2RlLCBpblZQcmUpIHtcbiAgICBpZiAoaXNEZWYodm5vZGUudGFnKSkge1xuICAgICAgcmV0dXJuIHZub2RlLnRhZy5pbmRleE9mKCd2dWUtY29tcG9uZW50JykgPT09IDAgfHwgKFxuICAgICAgICAhaXNVbmtub3duRWxlbWVudCQkMSh2bm9kZSwgaW5WUHJlKSAmJlxuICAgICAgICB2bm9kZS50YWcudG9Mb3dlckNhc2UoKSA9PT0gKG5vZGUudGFnTmFtZSAmJiBub2RlLnRhZ05hbWUudG9Mb3dlckNhc2UoKSlcbiAgICAgIClcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG5vZGUubm9kZVR5cGUgPT09ICh2bm9kZS5pc0NvbW1lbnQgPyA4IDogMylcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gcGF0Y2ggKG9sZFZub2RlLCB2bm9kZSwgaHlkcmF0aW5nLCByZW1vdmVPbmx5KSB7XG4gICAgaWYgKGlzVW5kZWYodm5vZGUpKSB7XG4gICAgICBpZiAoaXNEZWYob2xkVm5vZGUpKSB7IGludm9rZURlc3Ryb3lIb29rKG9sZFZub2RlKTsgfVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdmFyIGlzSW5pdGlhbFBhdGNoID0gZmFsc2U7XG4gICAgdmFyIGluc2VydGVkVm5vZGVRdWV1ZSA9IFtdO1xuXG4gICAgaWYgKGlzVW5kZWYob2xkVm5vZGUpKSB7XG4gICAgICAvLyBlbXB0eSBtb3VudCAobGlrZWx5IGFzIGNvbXBvbmVudCksIGNyZWF0ZSBuZXcgcm9vdCBlbGVtZW50XG4gICAgICBpc0luaXRpYWxQYXRjaCA9IHRydWU7XG4gICAgICBjcmVhdGVFbG0odm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBpc1JlYWxFbGVtZW50ID0gaXNEZWYob2xkVm5vZGUubm9kZVR5cGUpO1xuICAgICAgaWYgKCFpc1JlYWxFbGVtZW50ICYmIHNhbWVWbm9kZShvbGRWbm9kZSwgdm5vZGUpKSB7XG4gICAgICAgIC8vIHBhdGNoIGV4aXN0aW5nIHJvb3Qgbm9kZVxuICAgICAgICBwYXRjaFZub2RlKG9sZFZub2RlLCB2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBudWxsLCBudWxsLCByZW1vdmVPbmx5KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChpc1JlYWxFbGVtZW50KSB7XG4gICAgICAgICAgLy8gbW91bnRpbmcgdG8gYSByZWFsIGVsZW1lbnRcbiAgICAgICAgICAvLyBjaGVjayBpZiB0aGlzIGlzIHNlcnZlci1yZW5kZXJlZCBjb250ZW50IGFuZCBpZiB3ZSBjYW4gcGVyZm9ybVxuICAgICAgICAgIC8vIGEgc3VjY2Vzc2Z1bCBoeWRyYXRpb24uXG4gICAgICAgICAgaWYgKG9sZFZub2RlLm5vZGVUeXBlID09PSAxICYmIG9sZFZub2RlLmhhc0F0dHJpYnV0ZShTU1JfQVRUUikpIHtcbiAgICAgICAgICAgIG9sZFZub2RlLnJlbW92ZUF0dHJpYnV0ZShTU1JfQVRUUik7XG4gICAgICAgICAgICBoeWRyYXRpbmcgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaXNUcnVlKGh5ZHJhdGluZykpIHtcbiAgICAgICAgICAgIGlmIChoeWRyYXRlKG9sZFZub2RlLCB2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKSkge1xuICAgICAgICAgICAgICBpbnZva2VJbnNlcnRIb29rKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHRydWUpO1xuICAgICAgICAgICAgICByZXR1cm4gb2xkVm5vZGVcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgICAgICdUaGUgY2xpZW50LXNpZGUgcmVuZGVyZWQgdmlydHVhbCBET00gdHJlZSBpcyBub3QgbWF0Y2hpbmcgJyArXG4gICAgICAgICAgICAgICAgJ3NlcnZlci1yZW5kZXJlZCBjb250ZW50LiBUaGlzIGlzIGxpa2VseSBjYXVzZWQgYnkgaW5jb3JyZWN0ICcgK1xuICAgICAgICAgICAgICAgICdIVE1MIG1hcmt1cCwgZm9yIGV4YW1wbGUgbmVzdGluZyBibG9jay1sZXZlbCBlbGVtZW50cyBpbnNpZGUgJyArXG4gICAgICAgICAgICAgICAgJzxwPiwgb3IgbWlzc2luZyA8dGJvZHk+LiBCYWlsaW5nIGh5ZHJhdGlvbiBhbmQgcGVyZm9ybWluZyAnICtcbiAgICAgICAgICAgICAgICAnZnVsbCBjbGllbnQtc2lkZSByZW5kZXIuJ1xuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBlaXRoZXIgbm90IHNlcnZlci1yZW5kZXJlZCwgb3IgaHlkcmF0aW9uIGZhaWxlZC5cbiAgICAgICAgICAvLyBjcmVhdGUgYW4gZW1wdHkgbm9kZSBhbmQgcmVwbGFjZSBpdFxuICAgICAgICAgIG9sZFZub2RlID0gZW1wdHlOb2RlQXQob2xkVm5vZGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gcmVwbGFjaW5nIGV4aXN0aW5nIGVsZW1lbnRcbiAgICAgICAgdmFyIG9sZEVsbSA9IG9sZFZub2RlLmVsbTtcbiAgICAgICAgdmFyIHBhcmVudEVsbSA9IG5vZGVPcHMucGFyZW50Tm9kZShvbGRFbG0pO1xuXG4gICAgICAgIC8vIGNyZWF0ZSBuZXcgbm9kZVxuICAgICAgICBjcmVhdGVFbG0oXG4gICAgICAgICAgdm5vZGUsXG4gICAgICAgICAgaW5zZXJ0ZWRWbm9kZVF1ZXVlLFxuICAgICAgICAgIC8vIGV4dHJlbWVseSByYXJlIGVkZ2UgY2FzZTogZG8gbm90IGluc2VydCBpZiBvbGQgZWxlbWVudCBpcyBpbiBhXG4gICAgICAgICAgLy8gbGVhdmluZyB0cmFuc2l0aW9uLiBPbmx5IGhhcHBlbnMgd2hlbiBjb21iaW5pbmcgdHJhbnNpdGlvbiArXG4gICAgICAgICAgLy8ga2VlcC1hbGl2ZSArIEhPQ3MuICgjNDU5MClcbiAgICAgICAgICBvbGRFbG0uX2xlYXZlQ2IgPyBudWxsIDogcGFyZW50RWxtLFxuICAgICAgICAgIG5vZGVPcHMubmV4dFNpYmxpbmcob2xkRWxtKVxuICAgICAgICApO1xuXG4gICAgICAgIC8vIHVwZGF0ZSBwYXJlbnQgcGxhY2Vob2xkZXIgbm9kZSBlbGVtZW50LCByZWN1cnNpdmVseVxuICAgICAgICBpZiAoaXNEZWYodm5vZGUucGFyZW50KSkge1xuICAgICAgICAgIHZhciBhbmNlc3RvciA9IHZub2RlLnBhcmVudDtcbiAgICAgICAgICB2YXIgcGF0Y2hhYmxlID0gaXNQYXRjaGFibGUodm5vZGUpO1xuICAgICAgICAgIHdoaWxlIChhbmNlc3Rvcikge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjYnMuZGVzdHJveS5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICBjYnMuZGVzdHJveVtpXShhbmNlc3Rvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhbmNlc3Rvci5lbG0gPSB2bm9kZS5lbG07XG4gICAgICAgICAgICBpZiAocGF0Y2hhYmxlKSB7XG4gICAgICAgICAgICAgIGZvciAodmFyIGkkMSA9IDA7IGkkMSA8IGNicy5jcmVhdGUubGVuZ3RoOyArK2kkMSkge1xuICAgICAgICAgICAgICAgIGNicy5jcmVhdGVbaSQxXShlbXB0eU5vZGUsIGFuY2VzdG9yKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAvLyAjNjUxM1xuICAgICAgICAgICAgICAvLyBpbnZva2UgaW5zZXJ0IGhvb2tzIHRoYXQgbWF5IGhhdmUgYmVlbiBtZXJnZWQgYnkgY3JlYXRlIGhvb2tzLlxuICAgICAgICAgICAgICAvLyBlLmcuIGZvciBkaXJlY3RpdmVzIHRoYXQgdXNlcyB0aGUgXCJpbnNlcnRlZFwiIGhvb2suXG4gICAgICAgICAgICAgIHZhciBpbnNlcnQgPSBhbmNlc3Rvci5kYXRhLmhvb2suaW5zZXJ0O1xuICAgICAgICAgICAgICBpZiAoaW5zZXJ0Lm1lcmdlZCkge1xuICAgICAgICAgICAgICAgIC8vIHN0YXJ0IGF0IGluZGV4IDEgdG8gYXZvaWQgcmUtaW52b2tpbmcgY29tcG9uZW50IG1vdW50ZWQgaG9va1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkkMiA9IDE7IGkkMiA8IGluc2VydC5mbnMubGVuZ3RoOyBpJDIrKykge1xuICAgICAgICAgICAgICAgICAgaW5zZXJ0LmZuc1tpJDJdKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZWdpc3RlclJlZihhbmNlc3Rvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhbmNlc3RvciA9IGFuY2VzdG9yLnBhcmVudDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBkZXN0cm95IG9sZCBub2RlXG4gICAgICAgIGlmIChpc0RlZihwYXJlbnRFbG0pKSB7XG4gICAgICAgICAgcmVtb3ZlVm5vZGVzKFtvbGRWbm9kZV0sIDAsIDApO1xuICAgICAgICB9IGVsc2UgaWYgKGlzRGVmKG9sZFZub2RlLnRhZykpIHtcbiAgICAgICAgICBpbnZva2VEZXN0cm95SG9vayhvbGRWbm9kZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpbnZva2VJbnNlcnRIb29rKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIGlzSW5pdGlhbFBhdGNoKTtcbiAgICByZXR1cm4gdm5vZGUuZWxtXG4gIH1cbn1cblxuLyogICovXG5cbnZhciBkaXJlY3RpdmVzID0ge1xuICBjcmVhdGU6IHVwZGF0ZURpcmVjdGl2ZXMsXG4gIHVwZGF0ZTogdXBkYXRlRGlyZWN0aXZlcyxcbiAgZGVzdHJveTogZnVuY3Rpb24gdW5iaW5kRGlyZWN0aXZlcyAodm5vZGUpIHtcbiAgICB1cGRhdGVEaXJlY3RpdmVzKHZub2RlLCBlbXB0eU5vZGUpO1xuICB9XG59O1xuXG5mdW5jdGlvbiB1cGRhdGVEaXJlY3RpdmVzIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgaWYgKG9sZFZub2RlLmRhdGEuZGlyZWN0aXZlcyB8fCB2bm9kZS5kYXRhLmRpcmVjdGl2ZXMpIHtcbiAgICBfdXBkYXRlKG9sZFZub2RlLCB2bm9kZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gX3VwZGF0ZSAob2xkVm5vZGUsIHZub2RlKSB7XG4gIHZhciBpc0NyZWF0ZSA9IG9sZFZub2RlID09PSBlbXB0eU5vZGU7XG4gIHZhciBpc0Rlc3Ryb3kgPSB2bm9kZSA9PT0gZW1wdHlOb2RlO1xuICB2YXIgb2xkRGlycyA9IG5vcm1hbGl6ZURpcmVjdGl2ZXMkMShvbGRWbm9kZS5kYXRhLmRpcmVjdGl2ZXMsIG9sZFZub2RlLmNvbnRleHQpO1xuICB2YXIgbmV3RGlycyA9IG5vcm1hbGl6ZURpcmVjdGl2ZXMkMSh2bm9kZS5kYXRhLmRpcmVjdGl2ZXMsIHZub2RlLmNvbnRleHQpO1xuXG4gIHZhciBkaXJzV2l0aEluc2VydCA9IFtdO1xuICB2YXIgZGlyc1dpdGhQb3N0cGF0Y2ggPSBbXTtcblxuICB2YXIga2V5LCBvbGREaXIsIGRpcjtcbiAgZm9yIChrZXkgaW4gbmV3RGlycykge1xuICAgIG9sZERpciA9IG9sZERpcnNba2V5XTtcbiAgICBkaXIgPSBuZXdEaXJzW2tleV07XG4gICAgaWYgKCFvbGREaXIpIHtcbiAgICAgIC8vIG5ldyBkaXJlY3RpdmUsIGJpbmRcbiAgICAgIGNhbGxIb29rJDEoZGlyLCAnYmluZCcsIHZub2RlLCBvbGRWbm9kZSk7XG4gICAgICBpZiAoZGlyLmRlZiAmJiBkaXIuZGVmLmluc2VydGVkKSB7XG4gICAgICAgIGRpcnNXaXRoSW5zZXJ0LnB1c2goZGlyKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZXhpc3RpbmcgZGlyZWN0aXZlLCB1cGRhdGVcbiAgICAgIGRpci5vbGRWYWx1ZSA9IG9sZERpci52YWx1ZTtcbiAgICAgIGRpci5vbGRBcmcgPSBvbGREaXIuYXJnO1xuICAgICAgY2FsbEhvb2skMShkaXIsICd1cGRhdGUnLCB2bm9kZSwgb2xkVm5vZGUpO1xuICAgICAgaWYgKGRpci5kZWYgJiYgZGlyLmRlZi5jb21wb25lbnRVcGRhdGVkKSB7XG4gICAgICAgIGRpcnNXaXRoUG9zdHBhdGNoLnB1c2goZGlyKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoZGlyc1dpdGhJbnNlcnQubGVuZ3RoKSB7XG4gICAgdmFyIGNhbGxJbnNlcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRpcnNXaXRoSW5zZXJ0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNhbGxIb29rJDEoZGlyc1dpdGhJbnNlcnRbaV0sICdpbnNlcnRlZCcsIHZub2RlLCBvbGRWbm9kZSk7XG4gICAgICB9XG4gICAgfTtcbiAgICBpZiAoaXNDcmVhdGUpIHtcbiAgICAgIG1lcmdlVk5vZGVIb29rKHZub2RlLCAnaW5zZXJ0JywgY2FsbEluc2VydCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhbGxJbnNlcnQoKTtcbiAgICB9XG4gIH1cblxuICBpZiAoZGlyc1dpdGhQb3N0cGF0Y2gubGVuZ3RoKSB7XG4gICAgbWVyZ2VWTm9kZUhvb2sodm5vZGUsICdwb3N0cGF0Y2gnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRpcnNXaXRoUG9zdHBhdGNoLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNhbGxIb29rJDEoZGlyc1dpdGhQb3N0cGF0Y2hbaV0sICdjb21wb25lbnRVcGRhdGVkJywgdm5vZGUsIG9sZFZub2RlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGlmICghaXNDcmVhdGUpIHtcbiAgICBmb3IgKGtleSBpbiBvbGREaXJzKSB7XG4gICAgICBpZiAoIW5ld0RpcnNba2V5XSkge1xuICAgICAgICAvLyBubyBsb25nZXIgcHJlc2VudCwgdW5iaW5kXG4gICAgICAgIGNhbGxIb29rJDEob2xkRGlyc1trZXldLCAndW5iaW5kJywgb2xkVm5vZGUsIG9sZFZub2RlLCBpc0Rlc3Ryb3kpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG52YXIgZW1wdHlNb2RpZmllcnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG5mdW5jdGlvbiBub3JtYWxpemVEaXJlY3RpdmVzJDEgKFxuICBkaXJzLFxuICB2bVxuKSB7XG4gIHZhciByZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBpZiAoIWRpcnMpIHtcbiAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICByZXR1cm4gcmVzXG4gIH1cbiAgdmFyIGksIGRpcjtcbiAgZm9yIChpID0gMDsgaSA8IGRpcnMubGVuZ3RoOyBpKyspIHtcbiAgICBkaXIgPSBkaXJzW2ldO1xuICAgIGlmICghZGlyLm1vZGlmaWVycykge1xuICAgICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgICBkaXIubW9kaWZpZXJzID0gZW1wdHlNb2RpZmllcnM7XG4gICAgfVxuICAgIHJlc1tnZXRSYXdEaXJOYW1lKGRpcildID0gZGlyO1xuICAgIGRpci5kZWYgPSByZXNvbHZlQXNzZXQodm0uJG9wdGlvbnMsICdkaXJlY3RpdmVzJywgZGlyLm5hbWUsIHRydWUpO1xuICB9XG4gIC8vICRmbG93LWRpc2FibGUtbGluZVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIGdldFJhd0Rpck5hbWUgKGRpcikge1xuICByZXR1cm4gZGlyLnJhd05hbWUgfHwgKChkaXIubmFtZSkgKyBcIi5cIiArIChPYmplY3Qua2V5cyhkaXIubW9kaWZpZXJzIHx8IHt9KS5qb2luKCcuJykpKVxufVxuXG5mdW5jdGlvbiBjYWxsSG9vayQxIChkaXIsIGhvb2ssIHZub2RlLCBvbGRWbm9kZSwgaXNEZXN0cm95KSB7XG4gIHZhciBmbiA9IGRpci5kZWYgJiYgZGlyLmRlZltob29rXTtcbiAgaWYgKGZuKSB7XG4gICAgdHJ5IHtcbiAgICAgIGZuKHZub2RlLmVsbSwgZGlyLCB2bm9kZSwgb2xkVm5vZGUsIGlzRGVzdHJveSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaGFuZGxlRXJyb3IoZSwgdm5vZGUuY29udGV4dCwgKFwiZGlyZWN0aXZlIFwiICsgKGRpci5uYW1lKSArIFwiIFwiICsgaG9vayArIFwiIGhvb2tcIikpO1xuICAgIH1cbiAgfVxufVxuXG52YXIgYmFzZU1vZHVsZXMgPSBbXG4gIHJlZixcbiAgZGlyZWN0aXZlc1xuXTtcblxuLyogICovXG5cbmZ1bmN0aW9uIHVwZGF0ZUF0dHJzIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgdmFyIG9wdHMgPSB2bm9kZS5jb21wb25lbnRPcHRpb25zO1xuICBpZiAoaXNEZWYob3B0cykgJiYgb3B0cy5DdG9yLm9wdGlvbnMuaW5oZXJpdEF0dHJzID09PSBmYWxzZSkge1xuICAgIHJldHVyblxuICB9XG4gIGlmIChpc1VuZGVmKG9sZFZub2RlLmRhdGEuYXR0cnMpICYmIGlzVW5kZWYodm5vZGUuZGF0YS5hdHRycykpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIga2V5LCBjdXIsIG9sZDtcbiAgdmFyIGVsbSA9IHZub2RlLmVsbTtcbiAgdmFyIG9sZEF0dHJzID0gb2xkVm5vZGUuZGF0YS5hdHRycyB8fCB7fTtcbiAgdmFyIGF0dHJzID0gdm5vZGUuZGF0YS5hdHRycyB8fCB7fTtcbiAgLy8gY2xvbmUgb2JzZXJ2ZWQgb2JqZWN0cywgYXMgdGhlIHVzZXIgcHJvYmFibHkgd2FudHMgdG8gbXV0YXRlIGl0XG4gIGlmIChpc0RlZihhdHRycy5fX29iX18pKSB7XG4gICAgYXR0cnMgPSB2bm9kZS5kYXRhLmF0dHJzID0gZXh0ZW5kKHt9LCBhdHRycyk7XG4gIH1cblxuICBmb3IgKGtleSBpbiBhdHRycykge1xuICAgIGN1ciA9IGF0dHJzW2tleV07XG4gICAgb2xkID0gb2xkQXR0cnNba2V5XTtcbiAgICBpZiAob2xkICE9PSBjdXIpIHtcbiAgICAgIHNldEF0dHIoZWxtLCBrZXksIGN1ciwgdm5vZGUuZGF0YS5wcmUpO1xuICAgIH1cbiAgfVxuICAvLyAjNDM5MTogaW4gSUU5LCBzZXR0aW5nIHR5cGUgY2FuIHJlc2V0IHZhbHVlIGZvciBpbnB1dFt0eXBlPXJhZGlvXVxuICAvLyAjNjY2NjogSUUvRWRnZSBmb3JjZXMgcHJvZ3Jlc3MgdmFsdWUgZG93biB0byAxIGJlZm9yZSBzZXR0aW5nIGEgbWF4XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoKGlzSUUgfHwgaXNFZGdlKSAmJiBhdHRycy52YWx1ZSAhPT0gb2xkQXR0cnMudmFsdWUpIHtcbiAgICBzZXRBdHRyKGVsbSwgJ3ZhbHVlJywgYXR0cnMudmFsdWUpO1xuICB9XG4gIGZvciAoa2V5IGluIG9sZEF0dHJzKSB7XG4gICAgaWYgKGlzVW5kZWYoYXR0cnNba2V5XSkpIHtcbiAgICAgIGlmIChpc1hsaW5rKGtleSkpIHtcbiAgICAgICAgZWxtLnJlbW92ZUF0dHJpYnV0ZU5TKHhsaW5rTlMsIGdldFhsaW5rUHJvcChrZXkpKTtcbiAgICAgIH0gZWxzZSBpZiAoIWlzRW51bWVyYXRlZEF0dHIoa2V5KSkge1xuICAgICAgICBlbG0ucmVtb3ZlQXR0cmlidXRlKGtleSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHNldEF0dHIgKGVsLCBrZXksIHZhbHVlLCBpc0luUHJlKSB7XG4gIGlmIChpc0luUHJlIHx8IGVsLnRhZ05hbWUuaW5kZXhPZignLScpID4gLTEpIHtcbiAgICBiYXNlU2V0QXR0cihlbCwga2V5LCB2YWx1ZSk7XG4gIH0gZWxzZSBpZiAoaXNCb29sZWFuQXR0cihrZXkpKSB7XG4gICAgLy8gc2V0IGF0dHJpYnV0ZSBmb3IgYmxhbmsgdmFsdWVcbiAgICAvLyBlLmcuIDxvcHRpb24gZGlzYWJsZWQ+U2VsZWN0IG9uZTwvb3B0aW9uPlxuICAgIGlmIChpc0ZhbHN5QXR0clZhbHVlKHZhbHVlKSkge1xuICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKGtleSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHRlY2huaWNhbGx5IGFsbG93ZnVsbHNjcmVlbiBpcyBhIGJvb2xlYW4gYXR0cmlidXRlIGZvciA8aWZyYW1lPixcbiAgICAgIC8vIGJ1dCBGbGFzaCBleHBlY3RzIGEgdmFsdWUgb2YgXCJ0cnVlXCIgd2hlbiB1c2VkIG9uIDxlbWJlZD4gdGFnXG4gICAgICB2YWx1ZSA9IGtleSA9PT0gJ2FsbG93ZnVsbHNjcmVlbicgJiYgZWwudGFnTmFtZSA9PT0gJ0VNQkVEJ1xuICAgICAgICA/ICd0cnVlJ1xuICAgICAgICA6IGtleTtcbiAgICAgIGVsLnNldEF0dHJpYnV0ZShrZXksIHZhbHVlKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNFbnVtZXJhdGVkQXR0cihrZXkpKSB7XG4gICAgZWwuc2V0QXR0cmlidXRlKGtleSwgY29udmVydEVudW1lcmF0ZWRWYWx1ZShrZXksIHZhbHVlKSk7XG4gIH0gZWxzZSBpZiAoaXNYbGluayhrZXkpKSB7XG4gICAgaWYgKGlzRmFsc3lBdHRyVmFsdWUodmFsdWUpKSB7XG4gICAgICBlbC5yZW1vdmVBdHRyaWJ1dGVOUyh4bGlua05TLCBnZXRYbGlua1Byb3Aoa2V5KSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLnNldEF0dHJpYnV0ZU5TKHhsaW5rTlMsIGtleSwgdmFsdWUpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBiYXNlU2V0QXR0cihlbCwga2V5LCB2YWx1ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gYmFzZVNldEF0dHIgKGVsLCBrZXksIHZhbHVlKSB7XG4gIGlmIChpc0ZhbHN5QXR0clZhbHVlKHZhbHVlKSkge1xuICAgIGVsLnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xuICB9IGVsc2Uge1xuICAgIC8vICM3MTM4OiBJRTEwICYgMTEgZmlyZXMgaW5wdXQgZXZlbnQgd2hlbiBzZXR0aW5nIHBsYWNlaG9sZGVyIG9uXG4gICAgLy8gPHRleHRhcmVhPi4uLiBibG9jayB0aGUgZmlyc3QgaW5wdXQgZXZlbnQgYW5kIHJlbW92ZSB0aGUgYmxvY2tlclxuICAgIC8vIGltbWVkaWF0ZWx5LlxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChcbiAgICAgIGlzSUUgJiYgIWlzSUU5ICYmXG4gICAgICBlbC50YWdOYW1lID09PSAnVEVYVEFSRUEnICYmXG4gICAgICBrZXkgPT09ICdwbGFjZWhvbGRlcicgJiYgdmFsdWUgIT09ICcnICYmICFlbC5fX2llcGhcbiAgICApIHtcbiAgICAgIHZhciBibG9ja2VyID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignaW5wdXQnLCBibG9ja2VyKTtcbiAgICAgIH07XG4gICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIGJsb2NrZXIpO1xuICAgICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgICBlbC5fX2llcGggPSB0cnVlOyAvKiBJRSBwbGFjZWhvbGRlciBwYXRjaGVkICovXG4gICAgfVxuICAgIGVsLnNldEF0dHJpYnV0ZShrZXksIHZhbHVlKTtcbiAgfVxufVxuXG52YXIgYXR0cnMgPSB7XG4gIGNyZWF0ZTogdXBkYXRlQXR0cnMsXG4gIHVwZGF0ZTogdXBkYXRlQXR0cnNcbn07XG5cbi8qICAqL1xuXG5mdW5jdGlvbiB1cGRhdGVDbGFzcyAob2xkVm5vZGUsIHZub2RlKSB7XG4gIHZhciBlbCA9IHZub2RlLmVsbTtcbiAgdmFyIGRhdGEgPSB2bm9kZS5kYXRhO1xuICB2YXIgb2xkRGF0YSA9IG9sZFZub2RlLmRhdGE7XG4gIGlmIChcbiAgICBpc1VuZGVmKGRhdGEuc3RhdGljQ2xhc3MpICYmXG4gICAgaXNVbmRlZihkYXRhLmNsYXNzKSAmJiAoXG4gICAgICBpc1VuZGVmKG9sZERhdGEpIHx8IChcbiAgICAgICAgaXNVbmRlZihvbGREYXRhLnN0YXRpY0NsYXNzKSAmJlxuICAgICAgICBpc1VuZGVmKG9sZERhdGEuY2xhc3MpXG4gICAgICApXG4gICAgKVxuICApIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHZhciBjbHMgPSBnZW5DbGFzc0ZvclZub2RlKHZub2RlKTtcblxuICAvLyBoYW5kbGUgdHJhbnNpdGlvbiBjbGFzc2VzXG4gIHZhciB0cmFuc2l0aW9uQ2xhc3MgPSBlbC5fdHJhbnNpdGlvbkNsYXNzZXM7XG4gIGlmIChpc0RlZih0cmFuc2l0aW9uQ2xhc3MpKSB7XG4gICAgY2xzID0gY29uY2F0KGNscywgc3RyaW5naWZ5Q2xhc3ModHJhbnNpdGlvbkNsYXNzKSk7XG4gIH1cblxuICAvLyBzZXQgdGhlIGNsYXNzXG4gIGlmIChjbHMgIT09IGVsLl9wcmV2Q2xhc3MpIHtcbiAgICBlbC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgY2xzKTtcbiAgICBlbC5fcHJldkNsYXNzID0gY2xzO1xuICB9XG59XG5cbnZhciBrbGFzcyA9IHtcbiAgY3JlYXRlOiB1cGRhdGVDbGFzcyxcbiAgdXBkYXRlOiB1cGRhdGVDbGFzc1xufTtcblxuLyogICovXG5cbi8qICAqL1xuXG4vKiAgKi9cblxuLyogICovXG5cbi8vIGluIHNvbWUgY2FzZXMsIHRoZSBldmVudCB1c2VkIGhhcyB0byBiZSBkZXRlcm1pbmVkIGF0IHJ1bnRpbWVcbi8vIHNvIHdlIHVzZWQgc29tZSByZXNlcnZlZCB0b2tlbnMgZHVyaW5nIGNvbXBpbGUuXG52YXIgUkFOR0VfVE9LRU4gPSAnX19yJztcbnZhciBDSEVDS0JPWF9SQURJT19UT0tFTiA9ICdfX2MnO1xuXG4vKiAgKi9cblxuLy8gbm9ybWFsaXplIHYtbW9kZWwgZXZlbnQgdG9rZW5zIHRoYXQgY2FuIG9ubHkgYmUgZGV0ZXJtaW5lZCBhdCBydW50aW1lLlxuLy8gaXQncyBpbXBvcnRhbnQgdG8gcGxhY2UgdGhlIGV2ZW50IGFzIHRoZSBmaXJzdCBpbiB0aGUgYXJyYXkgYmVjYXVzZVxuLy8gdGhlIHdob2xlIHBvaW50IGlzIGVuc3VyaW5nIHRoZSB2LW1vZGVsIGNhbGxiYWNrIGdldHMgY2FsbGVkIGJlZm9yZVxuLy8gdXNlci1hdHRhY2hlZCBoYW5kbGVycy5cbmZ1bmN0aW9uIG5vcm1hbGl6ZUV2ZW50cyAob24pIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChpc0RlZihvbltSQU5HRV9UT0tFTl0pKSB7XG4gICAgLy8gSUUgaW5wdXRbdHlwZT1yYW5nZV0gb25seSBzdXBwb3J0cyBgY2hhbmdlYCBldmVudFxuICAgIHZhciBldmVudCA9IGlzSUUgPyAnY2hhbmdlJyA6ICdpbnB1dCc7XG4gICAgb25bZXZlbnRdID0gW10uY29uY2F0KG9uW1JBTkdFX1RPS0VOXSwgb25bZXZlbnRdIHx8IFtdKTtcbiAgICBkZWxldGUgb25bUkFOR0VfVE9LRU5dO1xuICB9XG4gIC8vIFRoaXMgd2FzIG9yaWdpbmFsbHkgaW50ZW5kZWQgdG8gZml4ICM0NTIxIGJ1dCBubyBsb25nZXIgbmVjZXNzYXJ5XG4gIC8vIGFmdGVyIDIuNS4gS2VlcGluZyBpdCBmb3IgYmFja3dhcmRzIGNvbXBhdCB3aXRoIGdlbmVyYXRlZCBjb2RlIGZyb20gPCAyLjRcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChpc0RlZihvbltDSEVDS0JPWF9SQURJT19UT0tFTl0pKSB7XG4gICAgb24uY2hhbmdlID0gW10uY29uY2F0KG9uW0NIRUNLQk9YX1JBRElPX1RPS0VOXSwgb24uY2hhbmdlIHx8IFtdKTtcbiAgICBkZWxldGUgb25bQ0hFQ0tCT1hfUkFESU9fVE9LRU5dO1xuICB9XG59XG5cbnZhciB0YXJnZXQkMTtcblxuZnVuY3Rpb24gY3JlYXRlT25jZUhhbmRsZXIkMSAoZXZlbnQsIGhhbmRsZXIsIGNhcHR1cmUpIHtcbiAgdmFyIF90YXJnZXQgPSB0YXJnZXQkMTsgLy8gc2F2ZSBjdXJyZW50IHRhcmdldCBlbGVtZW50IGluIGNsb3N1cmVcbiAgcmV0dXJuIGZ1bmN0aW9uIG9uY2VIYW5kbGVyICgpIHtcbiAgICB2YXIgcmVzID0gaGFuZGxlci5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgIGlmIChyZXMgIT09IG51bGwpIHtcbiAgICAgIHJlbW92ZSQyKGV2ZW50LCBvbmNlSGFuZGxlciwgY2FwdHVyZSwgX3RhcmdldCk7XG4gICAgfVxuICB9XG59XG5cbi8vICM5NDQ2OiBGaXJlZm94IDw9IDUzIChpbiBwYXJ0aWN1bGFyLCBFU1IgNTIpIGhhcyBpbmNvcnJlY3QgRXZlbnQudGltZVN0YW1wXG4vLyBpbXBsZW1lbnRhdGlvbiBhbmQgZG9lcyBub3QgZmlyZSBtaWNyb3Rhc2tzIGluIGJldHdlZW4gZXZlbnQgcHJvcGFnYXRpb24sIHNvXG4vLyBzYWZlIHRvIGV4Y2x1ZGUuXG52YXIgdXNlTWljcm90YXNrRml4ID0gaXNVc2luZ01pY3JvVGFzayAmJiAhKGlzRkYgJiYgTnVtYmVyKGlzRkZbMV0pIDw9IDUzKTtcblxuZnVuY3Rpb24gYWRkJDEgKFxuICBuYW1lLFxuICBoYW5kbGVyLFxuICBjYXB0dXJlLFxuICBwYXNzaXZlXG4pIHtcbiAgLy8gYXN5bmMgZWRnZSBjYXNlICM2NTY2OiBpbm5lciBjbGljayBldmVudCB0cmlnZ2VycyBwYXRjaCwgZXZlbnQgaGFuZGxlclxuICAvLyBhdHRhY2hlZCB0byBvdXRlciBlbGVtZW50IGR1cmluZyBwYXRjaCwgYW5kIHRyaWdnZXJlZCBhZ2Fpbi4gVGhpc1xuICAvLyBoYXBwZW5zIGJlY2F1c2UgYnJvd3NlcnMgZmlyZSBtaWNyb3Rhc2sgdGlja3MgYmV0d2VlbiBldmVudCBwcm9wYWdhdGlvbi5cbiAgLy8gdGhlIHNvbHV0aW9uIGlzIHNpbXBsZTogd2Ugc2F2ZSB0aGUgdGltZXN0YW1wIHdoZW4gYSBoYW5kbGVyIGlzIGF0dGFjaGVkLFxuICAvLyBhbmQgdGhlIGhhbmRsZXIgd291bGQgb25seSBmaXJlIGlmIHRoZSBldmVudCBwYXNzZWQgdG8gaXQgd2FzIGZpcmVkXG4gIC8vIEFGVEVSIGl0IHdhcyBhdHRhY2hlZC5cbiAgaWYgKHVzZU1pY3JvdGFza0ZpeCkge1xuICAgIHZhciBhdHRhY2hlZFRpbWVzdGFtcCA9IGN1cnJlbnRGbHVzaFRpbWVzdGFtcDtcbiAgICB2YXIgb3JpZ2luYWwgPSBoYW5kbGVyO1xuICAgIGhhbmRsZXIgPSBvcmlnaW5hbC5fd3JhcHBlciA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICBpZiAoXG4gICAgICAgIC8vIG5vIGJ1YmJsaW5nLCBzaG91bGQgYWx3YXlzIGZpcmUuXG4gICAgICAgIC8vIHRoaXMgaXMganVzdCBhIHNhZmV0eSBuZXQgaW4gY2FzZSBldmVudC50aW1lU3RhbXAgaXMgdW5yZWxpYWJsZSBpblxuICAgICAgICAvLyBjZXJ0YWluIHdlaXJkIGVudmlyb25tZW50cy4uLlxuICAgICAgICBlLnRhcmdldCA9PT0gZS5jdXJyZW50VGFyZ2V0IHx8XG4gICAgICAgIC8vIGV2ZW50IGlzIGZpcmVkIGFmdGVyIGhhbmRsZXIgYXR0YWNobWVudFxuICAgICAgICBlLnRpbWVTdGFtcCA+PSBhdHRhY2hlZFRpbWVzdGFtcCB8fFxuICAgICAgICAvLyBiYWlsIGZvciBlbnZpcm9ubWVudHMgdGhhdCBoYXZlIGJ1Z2d5IGV2ZW50LnRpbWVTdGFtcCBpbXBsZW1lbnRhdGlvbnNcbiAgICAgICAgLy8gIzk0NjIgaU9TIDkgYnVnOiBldmVudC50aW1lU3RhbXAgaXMgMCBhZnRlciBoaXN0b3J5LnB1c2hTdGF0ZVxuICAgICAgICAvLyAjOTY4MSBRdFdlYkVuZ2luZSBldmVudC50aW1lU3RhbXAgaXMgbmVnYXRpdmUgdmFsdWVcbiAgICAgICAgZS50aW1lU3RhbXAgPD0gMCB8fFxuICAgICAgICAvLyAjOTQ0OCBiYWlsIGlmIGV2ZW50IGlzIGZpcmVkIGluIGFub3RoZXIgZG9jdW1lbnQgaW4gYSBtdWx0aS1wYWdlXG4gICAgICAgIC8vIGVsZWN0cm9uL253LmpzIGFwcCwgc2luY2UgZXZlbnQudGltZVN0YW1wIHdpbGwgYmUgdXNpbmcgYSBkaWZmZXJlbnRcbiAgICAgICAgLy8gc3RhcnRpbmcgcmVmZXJlbmNlXG4gICAgICAgIGUudGFyZ2V0Lm93bmVyRG9jdW1lbnQgIT09IGRvY3VtZW50XG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuIG9yaWdpbmFsLmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIHRhcmdldCQxLmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgbmFtZSxcbiAgICBoYW5kbGVyLFxuICAgIHN1cHBvcnRzUGFzc2l2ZVxuICAgICAgPyB7IGNhcHR1cmU6IGNhcHR1cmUsIHBhc3NpdmU6IHBhc3NpdmUgfVxuICAgICAgOiBjYXB0dXJlXG4gICk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZSQyIChcbiAgbmFtZSxcbiAgaGFuZGxlcixcbiAgY2FwdHVyZSxcbiAgX3RhcmdldFxuKSB7XG4gIChfdGFyZ2V0IHx8IHRhcmdldCQxKS5yZW1vdmVFdmVudExpc3RlbmVyKFxuICAgIG5hbWUsXG4gICAgaGFuZGxlci5fd3JhcHBlciB8fCBoYW5kbGVyLFxuICAgIGNhcHR1cmVcbiAgKTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlRE9NTGlzdGVuZXJzIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgaWYgKGlzVW5kZWYob2xkVm5vZGUuZGF0YS5vbikgJiYgaXNVbmRlZih2bm9kZS5kYXRhLm9uKSkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciBvbiA9IHZub2RlLmRhdGEub24gfHwge307XG4gIHZhciBvbGRPbiA9IG9sZFZub2RlLmRhdGEub24gfHwge307XG4gIHRhcmdldCQxID0gdm5vZGUuZWxtO1xuICBub3JtYWxpemVFdmVudHMob24pO1xuICB1cGRhdGVMaXN0ZW5lcnMob24sIG9sZE9uLCBhZGQkMSwgcmVtb3ZlJDIsIGNyZWF0ZU9uY2VIYW5kbGVyJDEsIHZub2RlLmNvbnRleHQpO1xuICB0YXJnZXQkMSA9IHVuZGVmaW5lZDtcbn1cblxudmFyIGV2ZW50cyA9IHtcbiAgY3JlYXRlOiB1cGRhdGVET01MaXN0ZW5lcnMsXG4gIHVwZGF0ZTogdXBkYXRlRE9NTGlzdGVuZXJzXG59O1xuXG4vKiAgKi9cblxudmFyIHN2Z0NvbnRhaW5lcjtcblxuZnVuY3Rpb24gdXBkYXRlRE9NUHJvcHMgKG9sZFZub2RlLCB2bm9kZSkge1xuICBpZiAoaXNVbmRlZihvbGRWbm9kZS5kYXRhLmRvbVByb3BzKSAmJiBpc1VuZGVmKHZub2RlLmRhdGEuZG9tUHJvcHMpKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIGtleSwgY3VyO1xuICB2YXIgZWxtID0gdm5vZGUuZWxtO1xuICB2YXIgb2xkUHJvcHMgPSBvbGRWbm9kZS5kYXRhLmRvbVByb3BzIHx8IHt9O1xuICB2YXIgcHJvcHMgPSB2bm9kZS5kYXRhLmRvbVByb3BzIHx8IHt9O1xuICAvLyBjbG9uZSBvYnNlcnZlZCBvYmplY3RzLCBhcyB0aGUgdXNlciBwcm9iYWJseSB3YW50cyB0byBtdXRhdGUgaXRcbiAgaWYgKGlzRGVmKHByb3BzLl9fb2JfXykpIHtcbiAgICBwcm9wcyA9IHZub2RlLmRhdGEuZG9tUHJvcHMgPSBleHRlbmQoe30sIHByb3BzKTtcbiAgfVxuXG4gIGZvciAoa2V5IGluIG9sZFByb3BzKSB7XG4gICAgaWYgKCEoa2V5IGluIHByb3BzKSkge1xuICAgICAgZWxtW2tleV0gPSAnJztcbiAgICB9XG4gIH1cblxuICBmb3IgKGtleSBpbiBwcm9wcykge1xuICAgIGN1ciA9IHByb3BzW2tleV07XG4gICAgLy8gaWdub3JlIGNoaWxkcmVuIGlmIHRoZSBub2RlIGhhcyB0ZXh0Q29udGVudCBvciBpbm5lckhUTUwsXG4gICAgLy8gYXMgdGhlc2Ugd2lsbCB0aHJvdyBhd2F5IGV4aXN0aW5nIERPTSBub2RlcyBhbmQgY2F1c2UgcmVtb3ZhbCBlcnJvcnNcbiAgICAvLyBvbiBzdWJzZXF1ZW50IHBhdGNoZXMgKCMzMzYwKVxuICAgIGlmIChrZXkgPT09ICd0ZXh0Q29udGVudCcgfHwga2V5ID09PSAnaW5uZXJIVE1MJykge1xuICAgICAgaWYgKHZub2RlLmNoaWxkcmVuKSB7IHZub2RlLmNoaWxkcmVuLmxlbmd0aCA9IDA7IH1cbiAgICAgIGlmIChjdXIgPT09IG9sZFByb3BzW2tleV0pIHsgY29udGludWUgfVxuICAgICAgLy8gIzY2MDEgd29yayBhcm91bmQgQ2hyb21lIHZlcnNpb24gPD0gNTUgYnVnIHdoZXJlIHNpbmdsZSB0ZXh0Tm9kZVxuICAgICAgLy8gcmVwbGFjZWQgYnkgaW5uZXJIVE1ML3RleHRDb250ZW50IHJldGFpbnMgaXRzIHBhcmVudE5vZGUgcHJvcGVydHlcbiAgICAgIGlmIChlbG0uY2hpbGROb2Rlcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgZWxtLnJlbW92ZUNoaWxkKGVsbS5jaGlsZE5vZGVzWzBdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoa2V5ID09PSAndmFsdWUnICYmIGVsbS50YWdOYW1lICE9PSAnUFJPR1JFU1MnKSB7XG4gICAgICAvLyBzdG9yZSB2YWx1ZSBhcyBfdmFsdWUgYXMgd2VsbCBzaW5jZVxuICAgICAgLy8gbm9uLXN0cmluZyB2YWx1ZXMgd2lsbCBiZSBzdHJpbmdpZmllZFxuICAgICAgZWxtLl92YWx1ZSA9IGN1cjtcbiAgICAgIC8vIGF2b2lkIHJlc2V0dGluZyBjdXJzb3IgcG9zaXRpb24gd2hlbiB2YWx1ZSBpcyB0aGUgc2FtZVxuICAgICAgdmFyIHN0ckN1ciA9IGlzVW5kZWYoY3VyKSA/ICcnIDogU3RyaW5nKGN1cik7XG4gICAgICBpZiAoc2hvdWxkVXBkYXRlVmFsdWUoZWxtLCBzdHJDdXIpKSB7XG4gICAgICAgIGVsbS52YWx1ZSA9IHN0ckN1cjtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ2lubmVySFRNTCcgJiYgaXNTVkcoZWxtLnRhZ05hbWUpICYmIGlzVW5kZWYoZWxtLmlubmVySFRNTCkpIHtcbiAgICAgIC8vIElFIGRvZXNuJ3Qgc3VwcG9ydCBpbm5lckhUTUwgZm9yIFNWRyBlbGVtZW50c1xuICAgICAgc3ZnQ29udGFpbmVyID0gc3ZnQ29udGFpbmVyIHx8IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgc3ZnQ29udGFpbmVyLmlubmVySFRNTCA9IFwiPHN2Zz5cIiArIGN1ciArIFwiPC9zdmc+XCI7XG4gICAgICB2YXIgc3ZnID0gc3ZnQ29udGFpbmVyLmZpcnN0Q2hpbGQ7XG4gICAgICB3aGlsZSAoZWxtLmZpcnN0Q2hpbGQpIHtcbiAgICAgICAgZWxtLnJlbW92ZUNoaWxkKGVsbS5maXJzdENoaWxkKTtcbiAgICAgIH1cbiAgICAgIHdoaWxlIChzdmcuZmlyc3RDaGlsZCkge1xuICAgICAgICBlbG0uYXBwZW5kQ2hpbGQoc3ZnLmZpcnN0Q2hpbGQpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoXG4gICAgICAvLyBza2lwIHRoZSB1cGRhdGUgaWYgb2xkIGFuZCBuZXcgVkRPTSBzdGF0ZSBpcyB0aGUgc2FtZS5cbiAgICAgIC8vIGB2YWx1ZWAgaXMgaGFuZGxlZCBzZXBhcmF0ZWx5IGJlY2F1c2UgdGhlIERPTSB2YWx1ZSBtYXkgYmUgdGVtcG9yYXJpbHlcbiAgICAgIC8vIG91dCBvZiBzeW5jIHdpdGggVkRPTSBzdGF0ZSBkdWUgdG8gZm9jdXMsIGNvbXBvc2l0aW9uIGFuZCBtb2RpZmllcnMuXG4gICAgICAvLyBUaGlzICAjNDUyMSBieSBza2lwcGluZyB0aGUgdW5uZWNlc3NhcnkgYGNoZWNrZWRgIHVwZGF0ZS5cbiAgICAgIGN1ciAhPT0gb2xkUHJvcHNba2V5XVxuICAgICkge1xuICAgICAgLy8gc29tZSBwcm9wZXJ0eSB1cGRhdGVzIGNhbiB0aHJvd1xuICAgICAgLy8gZS5nLiBgdmFsdWVgIG9uIDxwcm9ncmVzcz4gdy8gbm9uLWZpbml0ZSB2YWx1ZVxuICAgICAgdHJ5IHtcbiAgICAgICAgZWxtW2tleV0gPSBjdXI7XG4gICAgICB9IGNhdGNoIChlKSB7fVxuICAgIH1cbiAgfVxufVxuXG4vLyBjaGVjayBwbGF0Zm9ybXMvd2ViL3V0aWwvYXR0cnMuanMgYWNjZXB0VmFsdWVcblxuXG5mdW5jdGlvbiBzaG91bGRVcGRhdGVWYWx1ZSAoZWxtLCBjaGVja1ZhbCkge1xuICByZXR1cm4gKCFlbG0uY29tcG9zaW5nICYmIChcbiAgICBlbG0udGFnTmFtZSA9PT0gJ09QVElPTicgfHxcbiAgICBpc05vdEluRm9jdXNBbmREaXJ0eShlbG0sIGNoZWNrVmFsKSB8fFxuICAgIGlzRGlydHlXaXRoTW9kaWZpZXJzKGVsbSwgY2hlY2tWYWwpXG4gICkpXG59XG5cbmZ1bmN0aW9uIGlzTm90SW5Gb2N1c0FuZERpcnR5IChlbG0sIGNoZWNrVmFsKSB7XG4gIC8vIHJldHVybiB0cnVlIHdoZW4gdGV4dGJveCAoLm51bWJlciBhbmQgLnRyaW0pIGxvc2VzIGZvY3VzIGFuZCBpdHMgdmFsdWUgaXNcbiAgLy8gbm90IGVxdWFsIHRvIHRoZSB1cGRhdGVkIHZhbHVlXG4gIHZhciBub3RJbkZvY3VzID0gdHJ1ZTtcbiAgLy8gIzYxNTdcbiAgLy8gd29yayBhcm91bmQgSUUgYnVnIHdoZW4gYWNjZXNzaW5nIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgaW4gYW4gaWZyYW1lXG4gIHRyeSB7IG5vdEluRm9jdXMgPSBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICE9PSBlbG07IH0gY2F0Y2ggKGUpIHt9XG4gIHJldHVybiBub3RJbkZvY3VzICYmIGVsbS52YWx1ZSAhPT0gY2hlY2tWYWxcbn1cblxuZnVuY3Rpb24gaXNEaXJ0eVdpdGhNb2RpZmllcnMgKGVsbSwgbmV3VmFsKSB7XG4gIHZhciB2YWx1ZSA9IGVsbS52YWx1ZTtcbiAgdmFyIG1vZGlmaWVycyA9IGVsbS5fdk1vZGlmaWVyczsgLy8gaW5qZWN0ZWQgYnkgdi1tb2RlbCBydW50aW1lXG4gIGlmIChpc0RlZihtb2RpZmllcnMpKSB7XG4gICAgaWYgKG1vZGlmaWVycy5udW1iZXIpIHtcbiAgICAgIHJldHVybiB0b051bWJlcih2YWx1ZSkgIT09IHRvTnVtYmVyKG5ld1ZhbClcbiAgICB9XG4gICAgaWYgKG1vZGlmaWVycy50cmltKSB7XG4gICAgICByZXR1cm4gdmFsdWUudHJpbSgpICE9PSBuZXdWYWwudHJpbSgpXG4gICAgfVxuICB9XG4gIHJldHVybiB2YWx1ZSAhPT0gbmV3VmFsXG59XG5cbnZhciBkb21Qcm9wcyA9IHtcbiAgY3JlYXRlOiB1cGRhdGVET01Qcm9wcyxcbiAgdXBkYXRlOiB1cGRhdGVET01Qcm9wc1xufTtcblxuLyogICovXG5cbnZhciBwYXJzZVN0eWxlVGV4dCA9IGNhY2hlZChmdW5jdGlvbiAoY3NzVGV4dCkge1xuICB2YXIgcmVzID0ge307XG4gIHZhciBsaXN0RGVsaW1pdGVyID0gLzsoPyFbXihdKlxcKSkvZztcbiAgdmFyIHByb3BlcnR5RGVsaW1pdGVyID0gLzooLispLztcbiAgY3NzVGV4dC5zcGxpdChsaXN0RGVsaW1pdGVyKS5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgaWYgKGl0ZW0pIHtcbiAgICAgIHZhciB0bXAgPSBpdGVtLnNwbGl0KHByb3BlcnR5RGVsaW1pdGVyKTtcbiAgICAgIHRtcC5sZW5ndGggPiAxICYmIChyZXNbdG1wWzBdLnRyaW0oKV0gPSB0bXBbMV0udHJpbSgpKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmVzXG59KTtcblxuLy8gbWVyZ2Ugc3RhdGljIGFuZCBkeW5hbWljIHN0eWxlIGRhdGEgb24gdGhlIHNhbWUgdm5vZGVcbmZ1bmN0aW9uIG5vcm1hbGl6ZVN0eWxlRGF0YSAoZGF0YSkge1xuICB2YXIgc3R5bGUgPSBub3JtYWxpemVTdHlsZUJpbmRpbmcoZGF0YS5zdHlsZSk7XG4gIC8vIHN0YXRpYyBzdHlsZSBpcyBwcmUtcHJvY2Vzc2VkIGludG8gYW4gb2JqZWN0IGR1cmluZyBjb21waWxhdGlvblxuICAvLyBhbmQgaXMgYWx3YXlzIGEgZnJlc2ggb2JqZWN0LCBzbyBpdCdzIHNhZmUgdG8gbWVyZ2UgaW50byBpdFxuICByZXR1cm4gZGF0YS5zdGF0aWNTdHlsZVxuICAgID8gZXh0ZW5kKGRhdGEuc3RhdGljU3R5bGUsIHN0eWxlKVxuICAgIDogc3R5bGVcbn1cblxuLy8gbm9ybWFsaXplIHBvc3NpYmxlIGFycmF5IC8gc3RyaW5nIHZhbHVlcyBpbnRvIE9iamVjdFxuZnVuY3Rpb24gbm9ybWFsaXplU3R5bGVCaW5kaW5nIChiaW5kaW5nU3R5bGUpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYmluZGluZ1N0eWxlKSkge1xuICAgIHJldHVybiB0b09iamVjdChiaW5kaW5nU3R5bGUpXG4gIH1cbiAgaWYgKHR5cGVvZiBiaW5kaW5nU3R5bGUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHBhcnNlU3R5bGVUZXh0KGJpbmRpbmdTdHlsZSlcbiAgfVxuICByZXR1cm4gYmluZGluZ1N0eWxlXG59XG5cbi8qKlxuICogcGFyZW50IGNvbXBvbmVudCBzdHlsZSBzaG91bGQgYmUgYWZ0ZXIgY2hpbGQnc1xuICogc28gdGhhdCBwYXJlbnQgY29tcG9uZW50J3Mgc3R5bGUgY291bGQgb3ZlcnJpZGUgaXRcbiAqL1xuZnVuY3Rpb24gZ2V0U3R5bGUgKHZub2RlLCBjaGVja0NoaWxkKSB7XG4gIHZhciByZXMgPSB7fTtcbiAgdmFyIHN0eWxlRGF0YTtcblxuICBpZiAoY2hlY2tDaGlsZCkge1xuICAgIHZhciBjaGlsZE5vZGUgPSB2bm9kZTtcbiAgICB3aGlsZSAoY2hpbGROb2RlLmNvbXBvbmVudEluc3RhbmNlKSB7XG4gICAgICBjaGlsZE5vZGUgPSBjaGlsZE5vZGUuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlO1xuICAgICAgaWYgKFxuICAgICAgICBjaGlsZE5vZGUgJiYgY2hpbGROb2RlLmRhdGEgJiZcbiAgICAgICAgKHN0eWxlRGF0YSA9IG5vcm1hbGl6ZVN0eWxlRGF0YShjaGlsZE5vZGUuZGF0YSkpXG4gICAgICApIHtcbiAgICAgICAgZXh0ZW5kKHJlcywgc3R5bGVEYXRhKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoKHN0eWxlRGF0YSA9IG5vcm1hbGl6ZVN0eWxlRGF0YSh2bm9kZS5kYXRhKSkpIHtcbiAgICBleHRlbmQocmVzLCBzdHlsZURhdGEpO1xuICB9XG5cbiAgdmFyIHBhcmVudE5vZGUgPSB2bm9kZTtcbiAgd2hpbGUgKChwYXJlbnROb2RlID0gcGFyZW50Tm9kZS5wYXJlbnQpKSB7XG4gICAgaWYgKHBhcmVudE5vZGUuZGF0YSAmJiAoc3R5bGVEYXRhID0gbm9ybWFsaXplU3R5bGVEYXRhKHBhcmVudE5vZGUuZGF0YSkpKSB7XG4gICAgICBleHRlbmQocmVzLCBzdHlsZURhdGEpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbi8qICAqL1xuXG52YXIgY3NzVmFyUkUgPSAvXi0tLztcbnZhciBpbXBvcnRhbnRSRSA9IC9cXHMqIWltcG9ydGFudCQvO1xudmFyIHNldFByb3AgPSBmdW5jdGlvbiAoZWwsIG5hbWUsIHZhbCkge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGNzc1ZhclJFLnRlc3QobmFtZSkpIHtcbiAgICBlbC5zdHlsZS5zZXRQcm9wZXJ0eShuYW1lLCB2YWwpO1xuICB9IGVsc2UgaWYgKGltcG9ydGFudFJFLnRlc3QodmFsKSkge1xuICAgIGVsLnN0eWxlLnNldFByb3BlcnR5KGh5cGhlbmF0ZShuYW1lKSwgdmFsLnJlcGxhY2UoaW1wb3J0YW50UkUsICcnKSwgJ2ltcG9ydGFudCcpO1xuICB9IGVsc2Uge1xuICAgIHZhciBub3JtYWxpemVkTmFtZSA9IG5vcm1hbGl6ZShuYW1lKTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWwpKSB7XG4gICAgICAvLyBTdXBwb3J0IHZhbHVlcyBhcnJheSBjcmVhdGVkIGJ5IGF1dG9wcmVmaXhlciwgZS5nLlxuICAgICAgLy8ge2Rpc3BsYXk6IFtcIi13ZWJraXQtYm94XCIsIFwiLW1zLWZsZXhib3hcIiwgXCJmbGV4XCJdfVxuICAgICAgLy8gU2V0IHRoZW0gb25lIGJ5IG9uZSwgYW5kIHRoZSBicm93c2VyIHdpbGwgb25seSBzZXQgdGhvc2UgaXQgY2FuIHJlY29nbml6ZVxuICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHZhbC5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBlbC5zdHlsZVtub3JtYWxpemVkTmFtZV0gPSB2YWxbaV07XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLnN0eWxlW25vcm1hbGl6ZWROYW1lXSA9IHZhbDtcbiAgICB9XG4gIH1cbn07XG5cbnZhciB2ZW5kb3JOYW1lcyA9IFsnV2Via2l0JywgJ01veicsICdtcyddO1xuXG52YXIgZW1wdHlTdHlsZTtcbnZhciBub3JtYWxpemUgPSBjYWNoZWQoZnVuY3Rpb24gKHByb3ApIHtcbiAgZW1wdHlTdHlsZSA9IGVtcHR5U3R5bGUgfHwgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jykuc3R5bGU7XG4gIHByb3AgPSBjYW1lbGl6ZShwcm9wKTtcbiAgaWYgKHByb3AgIT09ICdmaWx0ZXInICYmIChwcm9wIGluIGVtcHR5U3R5bGUpKSB7XG4gICAgcmV0dXJuIHByb3BcbiAgfVxuICB2YXIgY2FwTmFtZSA9IHByb3AuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBwcm9wLnNsaWNlKDEpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHZlbmRvck5hbWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIG5hbWUgPSB2ZW5kb3JOYW1lc1tpXSArIGNhcE5hbWU7XG4gICAgaWYgKG5hbWUgaW4gZW1wdHlTdHlsZSkge1xuICAgICAgcmV0dXJuIG5hbWVcbiAgICB9XG4gIH1cbn0pO1xuXG5mdW5jdGlvbiB1cGRhdGVTdHlsZSAob2xkVm5vZGUsIHZub2RlKSB7XG4gIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgdmFyIG9sZERhdGEgPSBvbGRWbm9kZS5kYXRhO1xuXG4gIGlmIChpc1VuZGVmKGRhdGEuc3RhdGljU3R5bGUpICYmIGlzVW5kZWYoZGF0YS5zdHlsZSkgJiZcbiAgICBpc1VuZGVmKG9sZERhdGEuc3RhdGljU3R5bGUpICYmIGlzVW5kZWYob2xkRGF0YS5zdHlsZSlcbiAgKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgY3VyLCBuYW1lO1xuICB2YXIgZWwgPSB2bm9kZS5lbG07XG4gIHZhciBvbGRTdGF0aWNTdHlsZSA9IG9sZERhdGEuc3RhdGljU3R5bGU7XG4gIHZhciBvbGRTdHlsZUJpbmRpbmcgPSBvbGREYXRhLm5vcm1hbGl6ZWRTdHlsZSB8fCBvbGREYXRhLnN0eWxlIHx8IHt9O1xuXG4gIC8vIGlmIHN0YXRpYyBzdHlsZSBleGlzdHMsIHN0eWxlYmluZGluZyBhbHJlYWR5IG1lcmdlZCBpbnRvIGl0IHdoZW4gZG9pbmcgbm9ybWFsaXplU3R5bGVEYXRhXG4gIHZhciBvbGRTdHlsZSA9IG9sZFN0YXRpY1N0eWxlIHx8IG9sZFN0eWxlQmluZGluZztcblxuICB2YXIgc3R5bGUgPSBub3JtYWxpemVTdHlsZUJpbmRpbmcodm5vZGUuZGF0YS5zdHlsZSkgfHwge307XG5cbiAgLy8gc3RvcmUgbm9ybWFsaXplZCBzdHlsZSB1bmRlciBhIGRpZmZlcmVudCBrZXkgZm9yIG5leHQgZGlmZlxuICAvLyBtYWtlIHN1cmUgdG8gY2xvbmUgaXQgaWYgaXQncyByZWFjdGl2ZSwgc2luY2UgdGhlIHVzZXIgbGlrZWx5IHdhbnRzXG4gIC8vIHRvIG11dGF0ZSBpdC5cbiAgdm5vZGUuZGF0YS5ub3JtYWxpemVkU3R5bGUgPSBpc0RlZihzdHlsZS5fX29iX18pXG4gICAgPyBleHRlbmQoe30sIHN0eWxlKVxuICAgIDogc3R5bGU7XG5cbiAgdmFyIG5ld1N0eWxlID0gZ2V0U3R5bGUodm5vZGUsIHRydWUpO1xuXG4gIGZvciAobmFtZSBpbiBvbGRTdHlsZSkge1xuICAgIGlmIChpc1VuZGVmKG5ld1N0eWxlW25hbWVdKSkge1xuICAgICAgc2V0UHJvcChlbCwgbmFtZSwgJycpO1xuICAgIH1cbiAgfVxuICBmb3IgKG5hbWUgaW4gbmV3U3R5bGUpIHtcbiAgICBjdXIgPSBuZXdTdHlsZVtuYW1lXTtcbiAgICBpZiAoY3VyICE9PSBvbGRTdHlsZVtuYW1lXSkge1xuICAgICAgLy8gaWU5IHNldHRpbmcgdG8gbnVsbCBoYXMgbm8gZWZmZWN0LCBtdXN0IHVzZSBlbXB0eSBzdHJpbmdcbiAgICAgIHNldFByb3AoZWwsIG5hbWUsIGN1ciA9PSBudWxsID8gJycgOiBjdXIpO1xuICAgIH1cbiAgfVxufVxuXG52YXIgc3R5bGUgPSB7XG4gIGNyZWF0ZTogdXBkYXRlU3R5bGUsXG4gIHVwZGF0ZTogdXBkYXRlU3R5bGVcbn07XG5cbi8qICAqL1xuXG52YXIgd2hpdGVzcGFjZVJFID0gL1xccysvO1xuXG4vKipcbiAqIEFkZCBjbGFzcyB3aXRoIGNvbXBhdGliaWxpdHkgZm9yIFNWRyBzaW5jZSBjbGFzc0xpc3QgaXMgbm90IHN1cHBvcnRlZCBvblxuICogU1ZHIGVsZW1lbnRzIGluIElFXG4gKi9cbmZ1bmN0aW9uIGFkZENsYXNzIChlbCwgY2xzKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoIWNscyB8fCAhKGNscyA9IGNscy50cmltKCkpKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAoZWwuY2xhc3NMaXN0KSB7XG4gICAgaWYgKGNscy5pbmRleE9mKCcgJykgPiAtMSkge1xuICAgICAgY2xzLnNwbGl0KHdoaXRlc3BhY2VSRSkuZm9yRWFjaChmdW5jdGlvbiAoYykgeyByZXR1cm4gZWwuY2xhc3NMaXN0LmFkZChjKTsgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLmNsYXNzTGlzdC5hZGQoY2xzKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIGN1ciA9IFwiIFwiICsgKGVsLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSB8fCAnJykgKyBcIiBcIjtcbiAgICBpZiAoY3VyLmluZGV4T2YoJyAnICsgY2xzICsgJyAnKSA8IDApIHtcbiAgICAgIGVsLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAoY3VyICsgY2xzKS50cmltKCkpO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIFJlbW92ZSBjbGFzcyB3aXRoIGNvbXBhdGliaWxpdHkgZm9yIFNWRyBzaW5jZSBjbGFzc0xpc3QgaXMgbm90IHN1cHBvcnRlZCBvblxuICogU1ZHIGVsZW1lbnRzIGluIElFXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZUNsYXNzIChlbCwgY2xzKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoIWNscyB8fCAhKGNscyA9IGNscy50cmltKCkpKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAoZWwuY2xhc3NMaXN0KSB7XG4gICAgaWYgKGNscy5pbmRleE9mKCcgJykgPiAtMSkge1xuICAgICAgY2xzLnNwbGl0KHdoaXRlc3BhY2VSRSkuZm9yRWFjaChmdW5jdGlvbiAoYykgeyByZXR1cm4gZWwuY2xhc3NMaXN0LnJlbW92ZShjKTsgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoY2xzKTtcbiAgICB9XG4gICAgaWYgKCFlbC5jbGFzc0xpc3QubGVuZ3RoKSB7XG4gICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoJ2NsYXNzJyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciBjdXIgPSBcIiBcIiArIChlbC5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykgfHwgJycpICsgXCIgXCI7XG4gICAgdmFyIHRhciA9ICcgJyArIGNscyArICcgJztcbiAgICB3aGlsZSAoY3VyLmluZGV4T2YodGFyKSA+PSAwKSB7XG4gICAgICBjdXIgPSBjdXIucmVwbGFjZSh0YXIsICcgJyk7XG4gICAgfVxuICAgIGN1ciA9IGN1ci50cmltKCk7XG4gICAgaWYgKGN1cikge1xuICAgICAgZWwuc2V0QXR0cmlidXRlKCdjbGFzcycsIGN1cik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZSgnY2xhc3MnKTtcbiAgICB9XG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIHJlc29sdmVUcmFuc2l0aW9uIChkZWYkJDEpIHtcbiAgaWYgKCFkZWYkJDEpIHtcbiAgICByZXR1cm5cbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAodHlwZW9mIGRlZiQkMSA9PT0gJ29iamVjdCcpIHtcbiAgICB2YXIgcmVzID0ge307XG4gICAgaWYgKGRlZiQkMS5jc3MgIT09IGZhbHNlKSB7XG4gICAgICBleHRlbmQocmVzLCBhdXRvQ3NzVHJhbnNpdGlvbihkZWYkJDEubmFtZSB8fCAndicpKTtcbiAgICB9XG4gICAgZXh0ZW5kKHJlcywgZGVmJCQxKTtcbiAgICByZXR1cm4gcmVzXG4gIH0gZWxzZSBpZiAodHlwZW9mIGRlZiQkMSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gYXV0b0Nzc1RyYW5zaXRpb24oZGVmJCQxKVxuICB9XG59XG5cbnZhciBhdXRvQ3NzVHJhbnNpdGlvbiA9IGNhY2hlZChmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4ge1xuICAgIGVudGVyQ2xhc3M6IChuYW1lICsgXCItZW50ZXJcIiksXG4gICAgZW50ZXJUb0NsYXNzOiAobmFtZSArIFwiLWVudGVyLXRvXCIpLFxuICAgIGVudGVyQWN0aXZlQ2xhc3M6IChuYW1lICsgXCItZW50ZXItYWN0aXZlXCIpLFxuICAgIGxlYXZlQ2xhc3M6IChuYW1lICsgXCItbGVhdmVcIiksXG4gICAgbGVhdmVUb0NsYXNzOiAobmFtZSArIFwiLWxlYXZlLXRvXCIpLFxuICAgIGxlYXZlQWN0aXZlQ2xhc3M6IChuYW1lICsgXCItbGVhdmUtYWN0aXZlXCIpXG4gIH1cbn0pO1xuXG52YXIgaGFzVHJhbnNpdGlvbiA9IGluQnJvd3NlciAmJiAhaXNJRTk7XG52YXIgVFJBTlNJVElPTiA9ICd0cmFuc2l0aW9uJztcbnZhciBBTklNQVRJT04gPSAnYW5pbWF0aW9uJztcblxuLy8gVHJhbnNpdGlvbiBwcm9wZXJ0eS9ldmVudCBzbmlmZmluZ1xudmFyIHRyYW5zaXRpb25Qcm9wID0gJ3RyYW5zaXRpb24nO1xudmFyIHRyYW5zaXRpb25FbmRFdmVudCA9ICd0cmFuc2l0aW9uZW5kJztcbnZhciBhbmltYXRpb25Qcm9wID0gJ2FuaW1hdGlvbic7XG52YXIgYW5pbWF0aW9uRW5kRXZlbnQgPSAnYW5pbWF0aW9uZW5kJztcbmlmIChoYXNUcmFuc2l0aW9uKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAod2luZG93Lm9udHJhbnNpdGlvbmVuZCA9PT0gdW5kZWZpbmVkICYmXG4gICAgd2luZG93Lm9ud2Via2l0dHJhbnNpdGlvbmVuZCAhPT0gdW5kZWZpbmVkXG4gICkge1xuICAgIHRyYW5zaXRpb25Qcm9wID0gJ1dlYmtpdFRyYW5zaXRpb24nO1xuICAgIHRyYW5zaXRpb25FbmRFdmVudCA9ICd3ZWJraXRUcmFuc2l0aW9uRW5kJztcbiAgfVxuICBpZiAod2luZG93Lm9uYW5pbWF0aW9uZW5kID09PSB1bmRlZmluZWQgJiZcbiAgICB3aW5kb3cub253ZWJraXRhbmltYXRpb25lbmQgIT09IHVuZGVmaW5lZFxuICApIHtcbiAgICBhbmltYXRpb25Qcm9wID0gJ1dlYmtpdEFuaW1hdGlvbic7XG4gICAgYW5pbWF0aW9uRW5kRXZlbnQgPSAnd2Via2l0QW5pbWF0aW9uRW5kJztcbiAgfVxufVxuXG4vLyBiaW5kaW5nIHRvIHdpbmRvdyBpcyBuZWNlc3NhcnkgdG8gbWFrZSBob3QgcmVsb2FkIHdvcmsgaW4gSUUgaW4gc3RyaWN0IG1vZGVcbnZhciByYWYgPSBpbkJyb3dzZXJcbiAgPyB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lXG4gICAgPyB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lLmJpbmQod2luZG93KVxuICAgIDogc2V0VGltZW91dFxuICA6IC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovIGZ1bmN0aW9uIChmbikgeyByZXR1cm4gZm4oKTsgfTtcblxuZnVuY3Rpb24gbmV4dEZyYW1lIChmbikge1xuICByYWYoZnVuY3Rpb24gKCkge1xuICAgIHJhZihmbik7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBhZGRUcmFuc2l0aW9uQ2xhc3MgKGVsLCBjbHMpIHtcbiAgdmFyIHRyYW5zaXRpb25DbGFzc2VzID0gZWwuX3RyYW5zaXRpb25DbGFzc2VzIHx8IChlbC5fdHJhbnNpdGlvbkNsYXNzZXMgPSBbXSk7XG4gIGlmICh0cmFuc2l0aW9uQ2xhc3Nlcy5pbmRleE9mKGNscykgPCAwKSB7XG4gICAgdHJhbnNpdGlvbkNsYXNzZXMucHVzaChjbHMpO1xuICAgIGFkZENsYXNzKGVsLCBjbHMpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVRyYW5zaXRpb25DbGFzcyAoZWwsIGNscykge1xuICBpZiAoZWwuX3RyYW5zaXRpb25DbGFzc2VzKSB7XG4gICAgcmVtb3ZlKGVsLl90cmFuc2l0aW9uQ2xhc3NlcywgY2xzKTtcbiAgfVxuICByZW1vdmVDbGFzcyhlbCwgY2xzKTtcbn1cblxuZnVuY3Rpb24gd2hlblRyYW5zaXRpb25FbmRzIChcbiAgZWwsXG4gIGV4cGVjdGVkVHlwZSxcbiAgY2Jcbikge1xuICB2YXIgcmVmID0gZ2V0VHJhbnNpdGlvbkluZm8oZWwsIGV4cGVjdGVkVHlwZSk7XG4gIHZhciB0eXBlID0gcmVmLnR5cGU7XG4gIHZhciB0aW1lb3V0ID0gcmVmLnRpbWVvdXQ7XG4gIHZhciBwcm9wQ291bnQgPSByZWYucHJvcENvdW50O1xuICBpZiAoIXR5cGUpIHsgcmV0dXJuIGNiKCkgfVxuICB2YXIgZXZlbnQgPSB0eXBlID09PSBUUkFOU0lUSU9OID8gdHJhbnNpdGlvbkVuZEV2ZW50IDogYW5pbWF0aW9uRW5kRXZlbnQ7XG4gIHZhciBlbmRlZCA9IDA7XG4gIHZhciBlbmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgb25FbmQpO1xuICAgIGNiKCk7XG4gIH07XG4gIHZhciBvbkVuZCA9IGZ1bmN0aW9uIChlKSB7XG4gICAgaWYgKGUudGFyZ2V0ID09PSBlbCkge1xuICAgICAgaWYgKCsrZW5kZWQgPj0gcHJvcENvdW50KSB7XG4gICAgICAgIGVuZCgpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGVuZGVkIDwgcHJvcENvdW50KSB7XG4gICAgICBlbmQoKTtcbiAgICB9XG4gIH0sIHRpbWVvdXQgKyAxKTtcbiAgZWwuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgb25FbmQpO1xufVxuXG52YXIgdHJhbnNmb3JtUkUgPSAvXFxiKHRyYW5zZm9ybXxhbGwpKCx8JCkvO1xuXG5mdW5jdGlvbiBnZXRUcmFuc2l0aW9uSW5mbyAoZWwsIGV4cGVjdGVkVHlwZSkge1xuICB2YXIgc3R5bGVzID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwpO1xuICAvLyBKU0RPTSBtYXkgcmV0dXJuIHVuZGVmaW5lZCBmb3IgdHJhbnNpdGlvbiBwcm9wZXJ0aWVzXG4gIHZhciB0cmFuc2l0aW9uRGVsYXlzID0gKHN0eWxlc1t0cmFuc2l0aW9uUHJvcCArICdEZWxheSddIHx8ICcnKS5zcGxpdCgnLCAnKTtcbiAgdmFyIHRyYW5zaXRpb25EdXJhdGlvbnMgPSAoc3R5bGVzW3RyYW5zaXRpb25Qcm9wICsgJ0R1cmF0aW9uJ10gfHwgJycpLnNwbGl0KCcsICcpO1xuICB2YXIgdHJhbnNpdGlvblRpbWVvdXQgPSBnZXRUaW1lb3V0KHRyYW5zaXRpb25EZWxheXMsIHRyYW5zaXRpb25EdXJhdGlvbnMpO1xuICB2YXIgYW5pbWF0aW9uRGVsYXlzID0gKHN0eWxlc1thbmltYXRpb25Qcm9wICsgJ0RlbGF5J10gfHwgJycpLnNwbGl0KCcsICcpO1xuICB2YXIgYW5pbWF0aW9uRHVyYXRpb25zID0gKHN0eWxlc1thbmltYXRpb25Qcm9wICsgJ0R1cmF0aW9uJ10gfHwgJycpLnNwbGl0KCcsICcpO1xuICB2YXIgYW5pbWF0aW9uVGltZW91dCA9IGdldFRpbWVvdXQoYW5pbWF0aW9uRGVsYXlzLCBhbmltYXRpb25EdXJhdGlvbnMpO1xuXG4gIHZhciB0eXBlO1xuICB2YXIgdGltZW91dCA9IDA7XG4gIHZhciBwcm9wQ291bnQgPSAwO1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGV4cGVjdGVkVHlwZSA9PT0gVFJBTlNJVElPTikge1xuICAgIGlmICh0cmFuc2l0aW9uVGltZW91dCA+IDApIHtcbiAgICAgIHR5cGUgPSBUUkFOU0lUSU9OO1xuICAgICAgdGltZW91dCA9IHRyYW5zaXRpb25UaW1lb3V0O1xuICAgICAgcHJvcENvdW50ID0gdHJhbnNpdGlvbkR1cmF0aW9ucy5sZW5ndGg7XG4gICAgfVxuICB9IGVsc2UgaWYgKGV4cGVjdGVkVHlwZSA9PT0gQU5JTUFUSU9OKSB7XG4gICAgaWYgKGFuaW1hdGlvblRpbWVvdXQgPiAwKSB7XG4gICAgICB0eXBlID0gQU5JTUFUSU9OO1xuICAgICAgdGltZW91dCA9IGFuaW1hdGlvblRpbWVvdXQ7XG4gICAgICBwcm9wQ291bnQgPSBhbmltYXRpb25EdXJhdGlvbnMubGVuZ3RoO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0aW1lb3V0ID0gTWF0aC5tYXgodHJhbnNpdGlvblRpbWVvdXQsIGFuaW1hdGlvblRpbWVvdXQpO1xuICAgIHR5cGUgPSB0aW1lb3V0ID4gMFxuICAgICAgPyB0cmFuc2l0aW9uVGltZW91dCA+IGFuaW1hdGlvblRpbWVvdXRcbiAgICAgICAgPyBUUkFOU0lUSU9OXG4gICAgICAgIDogQU5JTUFUSU9OXG4gICAgICA6IG51bGw7XG4gICAgcHJvcENvdW50ID0gdHlwZVxuICAgICAgPyB0eXBlID09PSBUUkFOU0lUSU9OXG4gICAgICAgID8gdHJhbnNpdGlvbkR1cmF0aW9ucy5sZW5ndGhcbiAgICAgICAgOiBhbmltYXRpb25EdXJhdGlvbnMubGVuZ3RoXG4gICAgICA6IDA7XG4gIH1cbiAgdmFyIGhhc1RyYW5zZm9ybSA9XG4gICAgdHlwZSA9PT0gVFJBTlNJVElPTiAmJlxuICAgIHRyYW5zZm9ybVJFLnRlc3Qoc3R5bGVzW3RyYW5zaXRpb25Qcm9wICsgJ1Byb3BlcnR5J10pO1xuICByZXR1cm4ge1xuICAgIHR5cGU6IHR5cGUsXG4gICAgdGltZW91dDogdGltZW91dCxcbiAgICBwcm9wQ291bnQ6IHByb3BDb3VudCxcbiAgICBoYXNUcmFuc2Zvcm06IGhhc1RyYW5zZm9ybVxuICB9XG59XG5cbmZ1bmN0aW9uIGdldFRpbWVvdXQgKGRlbGF5cywgZHVyYXRpb25zKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIHdoaWxlIChkZWxheXMubGVuZ3RoIDwgZHVyYXRpb25zLmxlbmd0aCkge1xuICAgIGRlbGF5cyA9IGRlbGF5cy5jb25jYXQoZGVsYXlzKTtcbiAgfVxuXG4gIHJldHVybiBNYXRoLm1heC5hcHBseShudWxsLCBkdXJhdGlvbnMubWFwKGZ1bmN0aW9uIChkLCBpKSB7XG4gICAgcmV0dXJuIHRvTXMoZCkgKyB0b01zKGRlbGF5c1tpXSlcbiAgfSkpXG59XG5cbi8vIE9sZCB2ZXJzaW9ucyBvZiBDaHJvbWl1bSAoYmVsb3cgNjEuMC4zMTYzLjEwMCkgZm9ybWF0cyBmbG9hdGluZyBwb2ludGVyIG51bWJlcnNcbi8vIGluIGEgbG9jYWxlLWRlcGVuZGVudCB3YXksIHVzaW5nIGEgY29tbWEgaW5zdGVhZCBvZiBhIGRvdC5cbi8vIElmIGNvbW1hIGlzIG5vdCByZXBsYWNlZCB3aXRoIGEgZG90LCB0aGUgaW5wdXQgd2lsbCBiZSByb3VuZGVkIGRvd24gKGkuZS4gYWN0aW5nXG4vLyBhcyBhIGZsb29yIGZ1bmN0aW9uKSBjYXVzaW5nIHVuZXhwZWN0ZWQgYmVoYXZpb3JzXG5mdW5jdGlvbiB0b01zIChzKSB7XG4gIHJldHVybiBOdW1iZXIocy5zbGljZSgwLCAtMSkucmVwbGFjZSgnLCcsICcuJykpICogMTAwMFxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gZW50ZXIgKHZub2RlLCB0b2dnbGVEaXNwbGF5KSB7XG4gIHZhciBlbCA9IHZub2RlLmVsbTtcblxuICAvLyBjYWxsIGxlYXZlIGNhbGxiYWNrIG5vd1xuICBpZiAoaXNEZWYoZWwuX2xlYXZlQ2IpKSB7XG4gICAgZWwuX2xlYXZlQ2IuY2FuY2VsbGVkID0gdHJ1ZTtcbiAgICBlbC5fbGVhdmVDYigpO1xuICB9XG5cbiAgdmFyIGRhdGEgPSByZXNvbHZlVHJhbnNpdGlvbih2bm9kZS5kYXRhLnRyYW5zaXRpb24pO1xuICBpZiAoaXNVbmRlZihkYXRhKSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChpc0RlZihlbC5fZW50ZXJDYikgfHwgZWwubm9kZVR5cGUgIT09IDEpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHZhciBjc3MgPSBkYXRhLmNzcztcbiAgdmFyIHR5cGUgPSBkYXRhLnR5cGU7XG4gIHZhciBlbnRlckNsYXNzID0gZGF0YS5lbnRlckNsYXNzO1xuICB2YXIgZW50ZXJUb0NsYXNzID0gZGF0YS5lbnRlclRvQ2xhc3M7XG4gIHZhciBlbnRlckFjdGl2ZUNsYXNzID0gZGF0YS5lbnRlckFjdGl2ZUNsYXNzO1xuICB2YXIgYXBwZWFyQ2xhc3MgPSBkYXRhLmFwcGVhckNsYXNzO1xuICB2YXIgYXBwZWFyVG9DbGFzcyA9IGRhdGEuYXBwZWFyVG9DbGFzcztcbiAgdmFyIGFwcGVhckFjdGl2ZUNsYXNzID0gZGF0YS5hcHBlYXJBY3RpdmVDbGFzcztcbiAgdmFyIGJlZm9yZUVudGVyID0gZGF0YS5iZWZvcmVFbnRlcjtcbiAgdmFyIGVudGVyID0gZGF0YS5lbnRlcjtcbiAgdmFyIGFmdGVyRW50ZXIgPSBkYXRhLmFmdGVyRW50ZXI7XG4gIHZhciBlbnRlckNhbmNlbGxlZCA9IGRhdGEuZW50ZXJDYW5jZWxsZWQ7XG4gIHZhciBiZWZvcmVBcHBlYXIgPSBkYXRhLmJlZm9yZUFwcGVhcjtcbiAgdmFyIGFwcGVhciA9IGRhdGEuYXBwZWFyO1xuICB2YXIgYWZ0ZXJBcHBlYXIgPSBkYXRhLmFmdGVyQXBwZWFyO1xuICB2YXIgYXBwZWFyQ2FuY2VsbGVkID0gZGF0YS5hcHBlYXJDYW5jZWxsZWQ7XG4gIHZhciBkdXJhdGlvbiA9IGRhdGEuZHVyYXRpb247XG5cbiAgLy8gYWN0aXZlSW5zdGFuY2Ugd2lsbCBhbHdheXMgYmUgdGhlIDx0cmFuc2l0aW9uPiBjb21wb25lbnQgbWFuYWdpbmcgdGhpc1xuICAvLyB0cmFuc2l0aW9uLiBPbmUgZWRnZSBjYXNlIHRvIGNoZWNrIGlzIHdoZW4gdGhlIDx0cmFuc2l0aW9uPiBpcyBwbGFjZWRcbiAgLy8gYXMgdGhlIHJvb3Qgbm9kZSBvZiBhIGNoaWxkIGNvbXBvbmVudC4gSW4gdGhhdCBjYXNlIHdlIG5lZWQgdG8gY2hlY2tcbiAgLy8gPHRyYW5zaXRpb24+J3MgcGFyZW50IGZvciBhcHBlYXIgY2hlY2suXG4gIHZhciBjb250ZXh0ID0gYWN0aXZlSW5zdGFuY2U7XG4gIHZhciB0cmFuc2l0aW9uTm9kZSA9IGFjdGl2ZUluc3RhbmNlLiR2bm9kZTtcbiAgd2hpbGUgKHRyYW5zaXRpb25Ob2RlICYmIHRyYW5zaXRpb25Ob2RlLnBhcmVudCkge1xuICAgIGNvbnRleHQgPSB0cmFuc2l0aW9uTm9kZS5jb250ZXh0O1xuICAgIHRyYW5zaXRpb25Ob2RlID0gdHJhbnNpdGlvbk5vZGUucGFyZW50O1xuICB9XG5cbiAgdmFyIGlzQXBwZWFyID0gIWNvbnRleHQuX2lzTW91bnRlZCB8fCAhdm5vZGUuaXNSb290SW5zZXJ0O1xuXG4gIGlmIChpc0FwcGVhciAmJiAhYXBwZWFyICYmIGFwcGVhciAhPT0gJycpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHZhciBzdGFydENsYXNzID0gaXNBcHBlYXIgJiYgYXBwZWFyQ2xhc3NcbiAgICA/IGFwcGVhckNsYXNzXG4gICAgOiBlbnRlckNsYXNzO1xuICB2YXIgYWN0aXZlQ2xhc3MgPSBpc0FwcGVhciAmJiBhcHBlYXJBY3RpdmVDbGFzc1xuICAgID8gYXBwZWFyQWN0aXZlQ2xhc3NcbiAgICA6IGVudGVyQWN0aXZlQ2xhc3M7XG4gIHZhciB0b0NsYXNzID0gaXNBcHBlYXIgJiYgYXBwZWFyVG9DbGFzc1xuICAgID8gYXBwZWFyVG9DbGFzc1xuICAgIDogZW50ZXJUb0NsYXNzO1xuXG4gIHZhciBiZWZvcmVFbnRlckhvb2sgPSBpc0FwcGVhclxuICAgID8gKGJlZm9yZUFwcGVhciB8fCBiZWZvcmVFbnRlcilcbiAgICA6IGJlZm9yZUVudGVyO1xuICB2YXIgZW50ZXJIb29rID0gaXNBcHBlYXJcbiAgICA/ICh0eXBlb2YgYXBwZWFyID09PSAnZnVuY3Rpb24nID8gYXBwZWFyIDogZW50ZXIpXG4gICAgOiBlbnRlcjtcbiAgdmFyIGFmdGVyRW50ZXJIb29rID0gaXNBcHBlYXJcbiAgICA/IChhZnRlckFwcGVhciB8fCBhZnRlckVudGVyKVxuICAgIDogYWZ0ZXJFbnRlcjtcbiAgdmFyIGVudGVyQ2FuY2VsbGVkSG9vayA9IGlzQXBwZWFyXG4gICAgPyAoYXBwZWFyQ2FuY2VsbGVkIHx8IGVudGVyQ2FuY2VsbGVkKVxuICAgIDogZW50ZXJDYW5jZWxsZWQ7XG5cbiAgdmFyIGV4cGxpY2l0RW50ZXJEdXJhdGlvbiA9IHRvTnVtYmVyKFxuICAgIGlzT2JqZWN0KGR1cmF0aW9uKVxuICAgICAgPyBkdXJhdGlvbi5lbnRlclxuICAgICAgOiBkdXJhdGlvblxuICApO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGV4cGxpY2l0RW50ZXJEdXJhdGlvbiAhPSBudWxsKSB7XG4gICAgY2hlY2tEdXJhdGlvbihleHBsaWNpdEVudGVyRHVyYXRpb24sICdlbnRlcicsIHZub2RlKTtcbiAgfVxuXG4gIHZhciBleHBlY3RzQ1NTID0gY3NzICE9PSBmYWxzZSAmJiAhaXNJRTk7XG4gIHZhciB1c2VyV2FudHNDb250cm9sID0gZ2V0SG9va0FyZ3VtZW50c0xlbmd0aChlbnRlckhvb2spO1xuXG4gIHZhciBjYiA9IGVsLl9lbnRlckNiID0gb25jZShmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGV4cGVjdHNDU1MpIHtcbiAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgdG9DbGFzcyk7XG4gICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIGFjdGl2ZUNsYXNzKTtcbiAgICB9XG4gICAgaWYgKGNiLmNhbmNlbGxlZCkge1xuICAgICAgaWYgKGV4cGVjdHNDU1MpIHtcbiAgICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBzdGFydENsYXNzKTtcbiAgICAgIH1cbiAgICAgIGVudGVyQ2FuY2VsbGVkSG9vayAmJiBlbnRlckNhbmNlbGxlZEhvb2soZWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhZnRlckVudGVySG9vayAmJiBhZnRlckVudGVySG9vayhlbCk7XG4gICAgfVxuICAgIGVsLl9lbnRlckNiID0gbnVsbDtcbiAgfSk7XG5cbiAgaWYgKCF2bm9kZS5kYXRhLnNob3cpIHtcbiAgICAvLyByZW1vdmUgcGVuZGluZyBsZWF2ZSBlbGVtZW50IG9uIGVudGVyIGJ5IGluamVjdGluZyBhbiBpbnNlcnQgaG9va1xuICAgIG1lcmdlVk5vZGVIb29rKHZub2RlLCAnaW5zZXJ0JywgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHBhcmVudCA9IGVsLnBhcmVudE5vZGU7XG4gICAgICB2YXIgcGVuZGluZ05vZGUgPSBwYXJlbnQgJiYgcGFyZW50Ll9wZW5kaW5nICYmIHBhcmVudC5fcGVuZGluZ1t2bm9kZS5rZXldO1xuICAgICAgaWYgKHBlbmRpbmdOb2RlICYmXG4gICAgICAgIHBlbmRpbmdOb2RlLnRhZyA9PT0gdm5vZGUudGFnICYmXG4gICAgICAgIHBlbmRpbmdOb2RlLmVsbS5fbGVhdmVDYlxuICAgICAgKSB7XG4gICAgICAgIHBlbmRpbmdOb2RlLmVsbS5fbGVhdmVDYigpO1xuICAgICAgfVxuICAgICAgZW50ZXJIb29rICYmIGVudGVySG9vayhlbCwgY2IpO1xuICAgIH0pO1xuICB9XG5cbiAgLy8gc3RhcnQgZW50ZXIgdHJhbnNpdGlvblxuICBiZWZvcmVFbnRlckhvb2sgJiYgYmVmb3JlRW50ZXJIb29rKGVsKTtcbiAgaWYgKGV4cGVjdHNDU1MpIHtcbiAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIHN0YXJ0Q2xhc3MpO1xuICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgYWN0aXZlQ2xhc3MpO1xuICAgIG5leHRGcmFtZShmdW5jdGlvbiAoKSB7XG4gICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIHN0YXJ0Q2xhc3MpO1xuICAgICAgaWYgKCFjYi5jYW5jZWxsZWQpIHtcbiAgICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCB0b0NsYXNzKTtcbiAgICAgICAgaWYgKCF1c2VyV2FudHNDb250cm9sKSB7XG4gICAgICAgICAgaWYgKGlzVmFsaWREdXJhdGlvbihleHBsaWNpdEVudGVyRHVyYXRpb24pKSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KGNiLCBleHBsaWNpdEVudGVyRHVyYXRpb24pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB3aGVuVHJhbnNpdGlvbkVuZHMoZWwsIHR5cGUsIGNiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGlmICh2bm9kZS5kYXRhLnNob3cpIHtcbiAgICB0b2dnbGVEaXNwbGF5ICYmIHRvZ2dsZURpc3BsYXkoKTtcbiAgICBlbnRlckhvb2sgJiYgZW50ZXJIb29rKGVsLCBjYik7XG4gIH1cblxuICBpZiAoIWV4cGVjdHNDU1MgJiYgIXVzZXJXYW50c0NvbnRyb2wpIHtcbiAgICBjYigpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGxlYXZlICh2bm9kZSwgcm0pIHtcbiAgdmFyIGVsID0gdm5vZGUuZWxtO1xuXG4gIC8vIGNhbGwgZW50ZXIgY2FsbGJhY2sgbm93XG4gIGlmIChpc0RlZihlbC5fZW50ZXJDYikpIHtcbiAgICBlbC5fZW50ZXJDYi5jYW5jZWxsZWQgPSB0cnVlO1xuICAgIGVsLl9lbnRlckNiKCk7XG4gIH1cblxuICB2YXIgZGF0YSA9IHJlc29sdmVUcmFuc2l0aW9uKHZub2RlLmRhdGEudHJhbnNpdGlvbik7XG4gIGlmIChpc1VuZGVmKGRhdGEpIHx8IGVsLm5vZGVUeXBlICE9PSAxKSB7XG4gICAgcmV0dXJuIHJtKClcbiAgfVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoaXNEZWYoZWwuX2xlYXZlQ2IpKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgY3NzID0gZGF0YS5jc3M7XG4gIHZhciB0eXBlID0gZGF0YS50eXBlO1xuICB2YXIgbGVhdmVDbGFzcyA9IGRhdGEubGVhdmVDbGFzcztcbiAgdmFyIGxlYXZlVG9DbGFzcyA9IGRhdGEubGVhdmVUb0NsYXNzO1xuICB2YXIgbGVhdmVBY3RpdmVDbGFzcyA9IGRhdGEubGVhdmVBY3RpdmVDbGFzcztcbiAgdmFyIGJlZm9yZUxlYXZlID0gZGF0YS5iZWZvcmVMZWF2ZTtcbiAgdmFyIGxlYXZlID0gZGF0YS5sZWF2ZTtcbiAgdmFyIGFmdGVyTGVhdmUgPSBkYXRhLmFmdGVyTGVhdmU7XG4gIHZhciBsZWF2ZUNhbmNlbGxlZCA9IGRhdGEubGVhdmVDYW5jZWxsZWQ7XG4gIHZhciBkZWxheUxlYXZlID0gZGF0YS5kZWxheUxlYXZlO1xuICB2YXIgZHVyYXRpb24gPSBkYXRhLmR1cmF0aW9uO1xuXG4gIHZhciBleHBlY3RzQ1NTID0gY3NzICE9PSBmYWxzZSAmJiAhaXNJRTk7XG4gIHZhciB1c2VyV2FudHNDb250cm9sID0gZ2V0SG9va0FyZ3VtZW50c0xlbmd0aChsZWF2ZSk7XG5cbiAgdmFyIGV4cGxpY2l0TGVhdmVEdXJhdGlvbiA9IHRvTnVtYmVyKFxuICAgIGlzT2JqZWN0KGR1cmF0aW9uKVxuICAgICAgPyBkdXJhdGlvbi5sZWF2ZVxuICAgICAgOiBkdXJhdGlvblxuICApO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGlzRGVmKGV4cGxpY2l0TGVhdmVEdXJhdGlvbikpIHtcbiAgICBjaGVja0R1cmF0aW9uKGV4cGxpY2l0TGVhdmVEdXJhdGlvbiwgJ2xlYXZlJywgdm5vZGUpO1xuICB9XG5cbiAgdmFyIGNiID0gZWwuX2xlYXZlQ2IgPSBvbmNlKGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoZWwucGFyZW50Tm9kZSAmJiBlbC5wYXJlbnROb2RlLl9wZW5kaW5nKSB7XG4gICAgICBlbC5wYXJlbnROb2RlLl9wZW5kaW5nW3Zub2RlLmtleV0gPSBudWxsO1xuICAgIH1cbiAgICBpZiAoZXhwZWN0c0NTUykge1xuICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZVRvQ2xhc3MpO1xuICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUFjdGl2ZUNsYXNzKTtcbiAgICB9XG4gICAgaWYgKGNiLmNhbmNlbGxlZCkge1xuICAgICAgaWYgKGV4cGVjdHNDU1MpIHtcbiAgICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUNsYXNzKTtcbiAgICAgIH1cbiAgICAgIGxlYXZlQ2FuY2VsbGVkICYmIGxlYXZlQ2FuY2VsbGVkKGVsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcm0oKTtcbiAgICAgIGFmdGVyTGVhdmUgJiYgYWZ0ZXJMZWF2ZShlbCk7XG4gICAgfVxuICAgIGVsLl9sZWF2ZUNiID0gbnVsbDtcbiAgfSk7XG5cbiAgaWYgKGRlbGF5TGVhdmUpIHtcbiAgICBkZWxheUxlYXZlKHBlcmZvcm1MZWF2ZSk7XG4gIH0gZWxzZSB7XG4gICAgcGVyZm9ybUxlYXZlKCk7XG4gIH1cblxuICBmdW5jdGlvbiBwZXJmb3JtTGVhdmUgKCkge1xuICAgIC8vIHRoZSBkZWxheWVkIGxlYXZlIG1heSBoYXZlIGFscmVhZHkgYmVlbiBjYW5jZWxsZWRcbiAgICBpZiAoY2IuY2FuY2VsbGVkKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgLy8gcmVjb3JkIGxlYXZpbmcgZWxlbWVudFxuICAgIGlmICghdm5vZGUuZGF0YS5zaG93ICYmIGVsLnBhcmVudE5vZGUpIHtcbiAgICAgIChlbC5wYXJlbnROb2RlLl9wZW5kaW5nIHx8IChlbC5wYXJlbnROb2RlLl9wZW5kaW5nID0ge30pKVsodm5vZGUua2V5KV0gPSB2bm9kZTtcbiAgICB9XG4gICAgYmVmb3JlTGVhdmUgJiYgYmVmb3JlTGVhdmUoZWwpO1xuICAgIGlmIChleHBlY3RzQ1NTKSB7XG4gICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlQ2xhc3MpO1xuICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUFjdGl2ZUNsYXNzKTtcbiAgICAgIG5leHRGcmFtZShmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVDbGFzcyk7XG4gICAgICAgIGlmICghY2IuY2FuY2VsbGVkKSB7XG4gICAgICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZVRvQ2xhc3MpO1xuICAgICAgICAgIGlmICghdXNlcldhbnRzQ29udHJvbCkge1xuICAgICAgICAgICAgaWYgKGlzVmFsaWREdXJhdGlvbihleHBsaWNpdExlYXZlRHVyYXRpb24pKSB7XG4gICAgICAgICAgICAgIHNldFRpbWVvdXQoY2IsIGV4cGxpY2l0TGVhdmVEdXJhdGlvbik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB3aGVuVHJhbnNpdGlvbkVuZHMoZWwsIHR5cGUsIGNiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICBsZWF2ZSAmJiBsZWF2ZShlbCwgY2IpO1xuICAgIGlmICghZXhwZWN0c0NTUyAmJiAhdXNlcldhbnRzQ29udHJvbCkge1xuICAgICAgY2IoKTtcbiAgICB9XG4gIH1cbn1cblxuLy8gb25seSB1c2VkIGluIGRldiBtb2RlXG5mdW5jdGlvbiBjaGVja0R1cmF0aW9uICh2YWwsIG5hbWUsIHZub2RlKSB7XG4gIGlmICh0eXBlb2YgdmFsICE9PSAnbnVtYmVyJykge1xuICAgIHdhcm4oXG4gICAgICBcIjx0cmFuc2l0aW9uPiBleHBsaWNpdCBcIiArIG5hbWUgKyBcIiBkdXJhdGlvbiBpcyBub3QgYSB2YWxpZCBudW1iZXIgLSBcIiArXG4gICAgICBcImdvdCBcIiArIChKU09OLnN0cmluZ2lmeSh2YWwpKSArIFwiLlwiLFxuICAgICAgdm5vZGUuY29udGV4dFxuICAgICk7XG4gIH0gZWxzZSBpZiAoaXNOYU4odmFsKSkge1xuICAgIHdhcm4oXG4gICAgICBcIjx0cmFuc2l0aW9uPiBleHBsaWNpdCBcIiArIG5hbWUgKyBcIiBkdXJhdGlvbiBpcyBOYU4gLSBcIiArXG4gICAgICAndGhlIGR1cmF0aW9uIGV4cHJlc3Npb24gbWlnaHQgYmUgaW5jb3JyZWN0LicsXG4gICAgICB2bm9kZS5jb250ZXh0XG4gICAgKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpc1ZhbGlkRHVyYXRpb24gKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ251bWJlcicgJiYgIWlzTmFOKHZhbClcbn1cblxuLyoqXG4gKiBOb3JtYWxpemUgYSB0cmFuc2l0aW9uIGhvb2sncyBhcmd1bWVudCBsZW5ndGguIFRoZSBob29rIG1heSBiZTpcbiAqIC0gYSBtZXJnZWQgaG9vayAoaW52b2tlcikgd2l0aCB0aGUgb3JpZ2luYWwgaW4gLmZuc1xuICogLSBhIHdyYXBwZWQgY29tcG9uZW50IG1ldGhvZCAoY2hlY2sgLl9sZW5ndGgpXG4gKiAtIGEgcGxhaW4gZnVuY3Rpb24gKC5sZW5ndGgpXG4gKi9cbmZ1bmN0aW9uIGdldEhvb2tBcmd1bWVudHNMZW5ndGggKGZuKSB7XG4gIGlmIChpc1VuZGVmKGZuKSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG4gIHZhciBpbnZva2VyRm5zID0gZm4uZm5zO1xuICBpZiAoaXNEZWYoaW52b2tlckZucykpIHtcbiAgICAvLyBpbnZva2VyXG4gICAgcmV0dXJuIGdldEhvb2tBcmd1bWVudHNMZW5ndGgoXG4gICAgICBBcnJheS5pc0FycmF5KGludm9rZXJGbnMpXG4gICAgICAgID8gaW52b2tlckZuc1swXVxuICAgICAgICA6IGludm9rZXJGbnNcbiAgICApXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIChmbi5fbGVuZ3RoIHx8IGZuLmxlbmd0aCkgPiAxXG4gIH1cbn1cblxuZnVuY3Rpb24gX2VudGVyIChfLCB2bm9kZSkge1xuICBpZiAodm5vZGUuZGF0YS5zaG93ICE9PSB0cnVlKSB7XG4gICAgZW50ZXIodm5vZGUpO1xuICB9XG59XG5cbnZhciB0cmFuc2l0aW9uID0gaW5Ccm93c2VyID8ge1xuICBjcmVhdGU6IF9lbnRlcixcbiAgYWN0aXZhdGU6IF9lbnRlcixcbiAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUkJDEgKHZub2RlLCBybSkge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgaWYgKHZub2RlLmRhdGEuc2hvdyAhPT0gdHJ1ZSkge1xuICAgICAgbGVhdmUodm5vZGUsIHJtKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcm0oKTtcbiAgICB9XG4gIH1cbn0gOiB7fTtcblxudmFyIHBsYXRmb3JtTW9kdWxlcyA9IFtcbiAgYXR0cnMsXG4gIGtsYXNzLFxuICBldmVudHMsXG4gIGRvbVByb3BzLFxuICBzdHlsZSxcbiAgdHJhbnNpdGlvblxuXTtcblxuLyogICovXG5cbi8vIHRoZSBkaXJlY3RpdmUgbW9kdWxlIHNob3VsZCBiZSBhcHBsaWVkIGxhc3QsIGFmdGVyIGFsbFxuLy8gYnVpbHQtaW4gbW9kdWxlcyBoYXZlIGJlZW4gYXBwbGllZC5cbnZhciBtb2R1bGVzID0gcGxhdGZvcm1Nb2R1bGVzLmNvbmNhdChiYXNlTW9kdWxlcyk7XG5cbnZhciBwYXRjaCA9IGNyZWF0ZVBhdGNoRnVuY3Rpb24oeyBub2RlT3BzOiBub2RlT3BzLCBtb2R1bGVzOiBtb2R1bGVzIH0pO1xuXG4vKipcbiAqIE5vdCB0eXBlIGNoZWNraW5nIHRoaXMgZmlsZSBiZWNhdXNlIGZsb3cgZG9lc24ndCBsaWtlIGF0dGFjaGluZ1xuICogcHJvcGVydGllcyB0byBFbGVtZW50cy5cbiAqL1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbmlmIChpc0lFOSkge1xuICAvLyBodHRwOi8vd3d3Lm1hdHRzNDExLmNvbS9wb3N0L2ludGVybmV0LWV4cGxvcmVyLTktb25pbnB1dC9cbiAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignc2VsZWN0aW9uY2hhbmdlJywgZnVuY3Rpb24gKCkge1xuICAgIHZhciBlbCA9IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XG4gICAgaWYgKGVsICYmIGVsLnZtb2RlbCkge1xuICAgICAgdHJpZ2dlcihlbCwgJ2lucHV0Jyk7XG4gICAgfVxuICB9KTtcbn1cblxudmFyIGRpcmVjdGl2ZSA9IHtcbiAgaW5zZXJ0ZWQ6IGZ1bmN0aW9uIGluc2VydGVkIChlbCwgYmluZGluZywgdm5vZGUsIG9sZFZub2RlKSB7XG4gICAgaWYgKHZub2RlLnRhZyA9PT0gJ3NlbGVjdCcpIHtcbiAgICAgIC8vICM2OTAzXG4gICAgICBpZiAob2xkVm5vZGUuZWxtICYmICFvbGRWbm9kZS5lbG0uX3ZPcHRpb25zKSB7XG4gICAgICAgIG1lcmdlVk5vZGVIb29rKHZub2RlLCAncG9zdHBhdGNoJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGRpcmVjdGl2ZS5jb21wb25lbnRVcGRhdGVkKGVsLCBiaW5kaW5nLCB2bm9kZSk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2V0U2VsZWN0ZWQoZWwsIGJpbmRpbmcsIHZub2RlLmNvbnRleHQpO1xuICAgICAgfVxuICAgICAgZWwuX3ZPcHRpb25zID0gW10ubWFwLmNhbGwoZWwub3B0aW9ucywgZ2V0VmFsdWUpO1xuICAgIH0gZWxzZSBpZiAodm5vZGUudGFnID09PSAndGV4dGFyZWEnIHx8IGlzVGV4dElucHV0VHlwZShlbC50eXBlKSkge1xuICAgICAgZWwuX3ZNb2RpZmllcnMgPSBiaW5kaW5nLm1vZGlmaWVycztcbiAgICAgIGlmICghYmluZGluZy5tb2RpZmllcnMubGF6eSkge1xuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdjb21wb3NpdGlvbnN0YXJ0Jywgb25Db21wb3NpdGlvblN0YXJ0KTtcbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignY29tcG9zaXRpb25lbmQnLCBvbkNvbXBvc2l0aW9uRW5kKTtcbiAgICAgICAgLy8gU2FmYXJpIDwgMTAuMiAmIFVJV2ViVmlldyBkb2Vzbid0IGZpcmUgY29tcG9zaXRpb25lbmQgd2hlblxuICAgICAgICAvLyBzd2l0Y2hpbmcgZm9jdXMgYmVmb3JlIGNvbmZpcm1pbmcgY29tcG9zaXRpb24gY2hvaWNlXG4gICAgICAgIC8vIHRoaXMgYWxzbyBmaXhlcyB0aGUgaXNzdWUgd2hlcmUgc29tZSBicm93c2VycyBlLmcuIGlPUyBDaHJvbWVcbiAgICAgICAgLy8gZmlyZXMgXCJjaGFuZ2VcIiBpbnN0ZWFkIG9mIFwiaW5wdXRcIiBvbiBhdXRvY29tcGxldGUuXG4gICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIG9uQ29tcG9zaXRpb25FbmQpO1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgaWYgKGlzSUU5KSB7XG4gICAgICAgICAgZWwudm1vZGVsID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICBjb21wb25lbnRVcGRhdGVkOiBmdW5jdGlvbiBjb21wb25lbnRVcGRhdGVkIChlbCwgYmluZGluZywgdm5vZGUpIHtcbiAgICBpZiAodm5vZGUudGFnID09PSAnc2VsZWN0Jykge1xuICAgICAgc2V0U2VsZWN0ZWQoZWwsIGJpbmRpbmcsIHZub2RlLmNvbnRleHQpO1xuICAgICAgLy8gaW4gY2FzZSB0aGUgb3B0aW9ucyByZW5kZXJlZCBieSB2LWZvciBoYXZlIGNoYW5nZWQsXG4gICAgICAvLyBpdCdzIHBvc3NpYmxlIHRoYXQgdGhlIHZhbHVlIGlzIG91dC1vZi1zeW5jIHdpdGggdGhlIHJlbmRlcmVkIG9wdGlvbnMuXG4gICAgICAvLyBkZXRlY3Qgc3VjaCBjYXNlcyBhbmQgZmlsdGVyIG91dCB2YWx1ZXMgdGhhdCBubyBsb25nZXIgaGFzIGEgbWF0Y2hpbmdcbiAgICAgIC8vIG9wdGlvbiBpbiB0aGUgRE9NLlxuICAgICAgdmFyIHByZXZPcHRpb25zID0gZWwuX3ZPcHRpb25zO1xuICAgICAgdmFyIGN1ck9wdGlvbnMgPSBlbC5fdk9wdGlvbnMgPSBbXS5tYXAuY2FsbChlbC5vcHRpb25zLCBnZXRWYWx1ZSk7XG4gICAgICBpZiAoY3VyT3B0aW9ucy5zb21lKGZ1bmN0aW9uIChvLCBpKSB7IHJldHVybiAhbG9vc2VFcXVhbChvLCBwcmV2T3B0aW9uc1tpXSk7IH0pKSB7XG4gICAgICAgIC8vIHRyaWdnZXIgY2hhbmdlIGV2ZW50IGlmXG4gICAgICAgIC8vIG5vIG1hdGNoaW5nIG9wdGlvbiBmb3VuZCBmb3IgYXQgbGVhc3Qgb25lIHZhbHVlXG4gICAgICAgIHZhciBuZWVkUmVzZXQgPSBlbC5tdWx0aXBsZVxuICAgICAgICAgID8gYmluZGluZy52YWx1ZS5zb21lKGZ1bmN0aW9uICh2KSB7IHJldHVybiBoYXNOb01hdGNoaW5nT3B0aW9uKHYsIGN1ck9wdGlvbnMpOyB9KVxuICAgICAgICAgIDogYmluZGluZy52YWx1ZSAhPT0gYmluZGluZy5vbGRWYWx1ZSAmJiBoYXNOb01hdGNoaW5nT3B0aW9uKGJpbmRpbmcudmFsdWUsIGN1ck9wdGlvbnMpO1xuICAgICAgICBpZiAobmVlZFJlc2V0KSB7XG4gICAgICAgICAgdHJpZ2dlcihlbCwgJ2NoYW5nZScpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG5mdW5jdGlvbiBzZXRTZWxlY3RlZCAoZWwsIGJpbmRpbmcsIHZtKSB7XG4gIGFjdHVhbGx5U2V0U2VsZWN0ZWQoZWwsIGJpbmRpbmcsIHZtKTtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChpc0lFIHx8IGlzRWRnZSkge1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgYWN0dWFsbHlTZXRTZWxlY3RlZChlbCwgYmluZGluZywgdm0pO1xuICAgIH0sIDApO1xuICB9XG59XG5cbmZ1bmN0aW9uIGFjdHVhbGx5U2V0U2VsZWN0ZWQgKGVsLCBiaW5kaW5nLCB2bSkge1xuICB2YXIgdmFsdWUgPSBiaW5kaW5nLnZhbHVlO1xuICB2YXIgaXNNdWx0aXBsZSA9IGVsLm11bHRpcGxlO1xuICBpZiAoaXNNdWx0aXBsZSAmJiAhQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICBcIjxzZWxlY3QgbXVsdGlwbGUgdi1tb2RlbD1cXFwiXCIgKyAoYmluZGluZy5leHByZXNzaW9uKSArIFwiXFxcIj4gXCIgK1xuICAgICAgXCJleHBlY3RzIGFuIEFycmF5IHZhbHVlIGZvciBpdHMgYmluZGluZywgYnV0IGdvdCBcIiArIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpLnNsaWNlKDgsIC0xKSksXG4gICAgICB2bVxuICAgICk7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIHNlbGVjdGVkLCBvcHRpb247XG4gIGZvciAodmFyIGkgPSAwLCBsID0gZWwub3B0aW9ucy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBvcHRpb24gPSBlbC5vcHRpb25zW2ldO1xuICAgIGlmIChpc011bHRpcGxlKSB7XG4gICAgICBzZWxlY3RlZCA9IGxvb3NlSW5kZXhPZih2YWx1ZSwgZ2V0VmFsdWUob3B0aW9uKSkgPiAtMTtcbiAgICAgIGlmIChvcHRpb24uc2VsZWN0ZWQgIT09IHNlbGVjdGVkKSB7XG4gICAgICAgIG9wdGlvbi5zZWxlY3RlZCA9IHNlbGVjdGVkO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAobG9vc2VFcXVhbChnZXRWYWx1ZShvcHRpb24pLCB2YWx1ZSkpIHtcbiAgICAgICAgaWYgKGVsLnNlbGVjdGVkSW5kZXggIT09IGkpIHtcbiAgICAgICAgICBlbC5zZWxlY3RlZEluZGV4ID0gaTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKCFpc011bHRpcGxlKSB7XG4gICAgZWwuc2VsZWN0ZWRJbmRleCA9IC0xO1xuICB9XG59XG5cbmZ1bmN0aW9uIGhhc05vTWF0Y2hpbmdPcHRpb24gKHZhbHVlLCBvcHRpb25zKSB7XG4gIHJldHVybiBvcHRpb25zLmV2ZXJ5KGZ1bmN0aW9uIChvKSB7IHJldHVybiAhbG9vc2VFcXVhbChvLCB2YWx1ZSk7IH0pXG59XG5cbmZ1bmN0aW9uIGdldFZhbHVlIChvcHRpb24pIHtcbiAgcmV0dXJuICdfdmFsdWUnIGluIG9wdGlvblxuICAgID8gb3B0aW9uLl92YWx1ZVxuICAgIDogb3B0aW9uLnZhbHVlXG59XG5cbmZ1bmN0aW9uIG9uQ29tcG9zaXRpb25TdGFydCAoZSkge1xuICBlLnRhcmdldC5jb21wb3NpbmcgPSB0cnVlO1xufVxuXG5mdW5jdGlvbiBvbkNvbXBvc2l0aW9uRW5kIChlKSB7XG4gIC8vIHByZXZlbnQgdHJpZ2dlcmluZyBhbiBpbnB1dCBldmVudCBmb3Igbm8gcmVhc29uXG4gIGlmICghZS50YXJnZXQuY29tcG9zaW5nKSB7IHJldHVybiB9XG4gIGUudGFyZ2V0LmNvbXBvc2luZyA9IGZhbHNlO1xuICB0cmlnZ2VyKGUudGFyZ2V0LCAnaW5wdXQnKTtcbn1cblxuZnVuY3Rpb24gdHJpZ2dlciAoZWwsIHR5cGUpIHtcbiAgdmFyIGUgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnSFRNTEV2ZW50cycpO1xuICBlLmluaXRFdmVudCh0eXBlLCB0cnVlLCB0cnVlKTtcbiAgZWwuZGlzcGF0Y2hFdmVudChlKTtcbn1cblxuLyogICovXG5cbi8vIHJlY3Vyc2l2ZWx5IHNlYXJjaCBmb3IgcG9zc2libGUgdHJhbnNpdGlvbiBkZWZpbmVkIGluc2lkZSB0aGUgY29tcG9uZW50IHJvb3RcbmZ1bmN0aW9uIGxvY2F0ZU5vZGUgKHZub2RlKSB7XG4gIHJldHVybiB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSAmJiAoIXZub2RlLmRhdGEgfHwgIXZub2RlLmRhdGEudHJhbnNpdGlvbilcbiAgICA/IGxvY2F0ZU5vZGUodm5vZGUuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlKVxuICAgIDogdm5vZGVcbn1cblxudmFyIHNob3cgPSB7XG4gIGJpbmQ6IGZ1bmN0aW9uIGJpbmQgKGVsLCByZWYsIHZub2RlKSB7XG4gICAgdmFyIHZhbHVlID0gcmVmLnZhbHVlO1xuXG4gICAgdm5vZGUgPSBsb2NhdGVOb2RlKHZub2RlKTtcbiAgICB2YXIgdHJhbnNpdGlvbiQkMSA9IHZub2RlLmRhdGEgJiYgdm5vZGUuZGF0YS50cmFuc2l0aW9uO1xuICAgIHZhciBvcmlnaW5hbERpc3BsYXkgPSBlbC5fX3ZPcmlnaW5hbERpc3BsYXkgPVxuICAgICAgZWwuc3R5bGUuZGlzcGxheSA9PT0gJ25vbmUnID8gJycgOiBlbC5zdHlsZS5kaXNwbGF5O1xuICAgIGlmICh2YWx1ZSAmJiB0cmFuc2l0aW9uJCQxKSB7XG4gICAgICB2bm9kZS5kYXRhLnNob3cgPSB0cnVlO1xuICAgICAgZW50ZXIodm5vZGUsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZWwuc3R5bGUuZGlzcGxheSA9IG9yaWdpbmFsRGlzcGxheTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gdmFsdWUgPyBvcmlnaW5hbERpc3BsYXkgOiAnbm9uZSc7XG4gICAgfVxuICB9LFxuXG4gIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlIChlbCwgcmVmLCB2bm9kZSkge1xuICAgIHZhciB2YWx1ZSA9IHJlZi52YWx1ZTtcbiAgICB2YXIgb2xkVmFsdWUgPSByZWYub2xkVmFsdWU7XG5cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoIXZhbHVlID09PSAhb2xkVmFsdWUpIHsgcmV0dXJuIH1cbiAgICB2bm9kZSA9IGxvY2F0ZU5vZGUodm5vZGUpO1xuICAgIHZhciB0cmFuc2l0aW9uJCQxID0gdm5vZGUuZGF0YSAmJiB2bm9kZS5kYXRhLnRyYW5zaXRpb247XG4gICAgaWYgKHRyYW5zaXRpb24kJDEpIHtcbiAgICAgIHZub2RlLmRhdGEuc2hvdyA9IHRydWU7XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgZW50ZXIodm5vZGUsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gZWwuX192T3JpZ2luYWxEaXNwbGF5O1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxlYXZlKHZub2RlLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZWwuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSB2YWx1ZSA/IGVsLl9fdk9yaWdpbmFsRGlzcGxheSA6ICdub25lJztcbiAgICB9XG4gIH0sXG5cbiAgdW5iaW5kOiBmdW5jdGlvbiB1bmJpbmQgKFxuICAgIGVsLFxuICAgIGJpbmRpbmcsXG4gICAgdm5vZGUsXG4gICAgb2xkVm5vZGUsXG4gICAgaXNEZXN0cm95XG4gICkge1xuICAgIGlmICghaXNEZXN0cm95KSB7XG4gICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gZWwuX192T3JpZ2luYWxEaXNwbGF5O1xuICAgIH1cbiAgfVxufTtcblxudmFyIHBsYXRmb3JtRGlyZWN0aXZlcyA9IHtcbiAgbW9kZWw6IGRpcmVjdGl2ZSxcbiAgc2hvdzogc2hvd1xufTtcblxuLyogICovXG5cbnZhciB0cmFuc2l0aW9uUHJvcHMgPSB7XG4gIG5hbWU6IFN0cmluZyxcbiAgYXBwZWFyOiBCb29sZWFuLFxuICBjc3M6IEJvb2xlYW4sXG4gIG1vZGU6IFN0cmluZyxcbiAgdHlwZTogU3RyaW5nLFxuICBlbnRlckNsYXNzOiBTdHJpbmcsXG4gIGxlYXZlQ2xhc3M6IFN0cmluZyxcbiAgZW50ZXJUb0NsYXNzOiBTdHJpbmcsXG4gIGxlYXZlVG9DbGFzczogU3RyaW5nLFxuICBlbnRlckFjdGl2ZUNsYXNzOiBTdHJpbmcsXG4gIGxlYXZlQWN0aXZlQ2xhc3M6IFN0cmluZyxcbiAgYXBwZWFyQ2xhc3M6IFN0cmluZyxcbiAgYXBwZWFyQWN0aXZlQ2xhc3M6IFN0cmluZyxcbiAgYXBwZWFyVG9DbGFzczogU3RyaW5nLFxuICBkdXJhdGlvbjogW051bWJlciwgU3RyaW5nLCBPYmplY3RdXG59O1xuXG4vLyBpbiBjYXNlIHRoZSBjaGlsZCBpcyBhbHNvIGFuIGFic3RyYWN0IGNvbXBvbmVudCwgZS5nLiA8a2VlcC1hbGl2ZT5cbi8vIHdlIHdhbnQgdG8gcmVjdXJzaXZlbHkgcmV0cmlldmUgdGhlIHJlYWwgY29tcG9uZW50IHRvIGJlIHJlbmRlcmVkXG5mdW5jdGlvbiBnZXRSZWFsQ2hpbGQgKHZub2RlKSB7XG4gIHZhciBjb21wT3B0aW9ucyA9IHZub2RlICYmIHZub2RlLmNvbXBvbmVudE9wdGlvbnM7XG4gIGlmIChjb21wT3B0aW9ucyAmJiBjb21wT3B0aW9ucy5DdG9yLm9wdGlvbnMuYWJzdHJhY3QpIHtcbiAgICByZXR1cm4gZ2V0UmVhbENoaWxkKGdldEZpcnN0Q29tcG9uZW50Q2hpbGQoY29tcE9wdGlvbnMuY2hpbGRyZW4pKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiB2bm9kZVxuICB9XG59XG5cbmZ1bmN0aW9uIGV4dHJhY3RUcmFuc2l0aW9uRGF0YSAoY29tcCkge1xuICB2YXIgZGF0YSA9IHt9O1xuICB2YXIgb3B0aW9ucyA9IGNvbXAuJG9wdGlvbnM7XG4gIC8vIHByb3BzXG4gIGZvciAodmFyIGtleSBpbiBvcHRpb25zLnByb3BzRGF0YSkge1xuICAgIGRhdGFba2V5XSA9IGNvbXBba2V5XTtcbiAgfVxuICAvLyBldmVudHMuXG4gIC8vIGV4dHJhY3QgbGlzdGVuZXJzIGFuZCBwYXNzIHRoZW0gZGlyZWN0bHkgdG8gdGhlIHRyYW5zaXRpb24gbWV0aG9kc1xuICB2YXIgbGlzdGVuZXJzID0gb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzO1xuICBmb3IgKHZhciBrZXkkMSBpbiBsaXN0ZW5lcnMpIHtcbiAgICBkYXRhW2NhbWVsaXplKGtleSQxKV0gPSBsaXN0ZW5lcnNba2V5JDFdO1xuICB9XG4gIHJldHVybiBkYXRhXG59XG5cbmZ1bmN0aW9uIHBsYWNlaG9sZGVyIChoLCByYXdDaGlsZCkge1xuICBpZiAoL1xcZC1rZWVwLWFsaXZlJC8udGVzdChyYXdDaGlsZC50YWcpKSB7XG4gICAgcmV0dXJuIGgoJ2tlZXAtYWxpdmUnLCB7XG4gICAgICBwcm9wczogcmF3Q2hpbGQuY29tcG9uZW50T3B0aW9ucy5wcm9wc0RhdGFcbiAgICB9KVxuICB9XG59XG5cbmZ1bmN0aW9uIGhhc1BhcmVudFRyYW5zaXRpb24gKHZub2RlKSB7XG4gIHdoaWxlICgodm5vZGUgPSB2bm9kZS5wYXJlbnQpKSB7XG4gICAgaWYgKHZub2RlLmRhdGEudHJhbnNpdGlvbikge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNTYW1lQ2hpbGQgKGNoaWxkLCBvbGRDaGlsZCkge1xuICByZXR1cm4gb2xkQ2hpbGQua2V5ID09PSBjaGlsZC5rZXkgJiYgb2xkQ2hpbGQudGFnID09PSBjaGlsZC50YWdcbn1cblxudmFyIGlzTm90VGV4dE5vZGUgPSBmdW5jdGlvbiAoYykgeyByZXR1cm4gYy50YWcgfHwgaXNBc3luY1BsYWNlaG9sZGVyKGMpOyB9O1xuXG52YXIgaXNWU2hvd0RpcmVjdGl2ZSA9IGZ1bmN0aW9uIChkKSB7IHJldHVybiBkLm5hbWUgPT09ICdzaG93JzsgfTtcblxudmFyIFRyYW5zaXRpb24gPSB7XG4gIG5hbWU6ICd0cmFuc2l0aW9uJyxcbiAgcHJvcHM6IHRyYW5zaXRpb25Qcm9wcyxcbiAgYWJzdHJhY3Q6IHRydWUsXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIgKGgpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIHZhciBjaGlsZHJlbiA9IHRoaXMuJHNsb3RzLmRlZmF1bHQ7XG4gICAgaWYgKCFjaGlsZHJlbikge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgLy8gZmlsdGVyIG91dCB0ZXh0IG5vZGVzIChwb3NzaWJsZSB3aGl0ZXNwYWNlcylcbiAgICBjaGlsZHJlbiA9IGNoaWxkcmVuLmZpbHRlcihpc05vdFRleHROb2RlKTtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoIWNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgLy8gd2FybiBtdWx0aXBsZSBlbGVtZW50c1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGNoaWxkcmVuLmxlbmd0aCA+IDEpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICc8dHJhbnNpdGlvbj4gY2FuIG9ubHkgYmUgdXNlZCBvbiBhIHNpbmdsZSBlbGVtZW50LiBVc2UgJyArXG4gICAgICAgICc8dHJhbnNpdGlvbi1ncm91cD4gZm9yIGxpc3RzLicsXG4gICAgICAgIHRoaXMuJHBhcmVudFxuICAgICAgKTtcbiAgICB9XG5cbiAgICB2YXIgbW9kZSA9IHRoaXMubW9kZTtcblxuICAgIC8vIHdhcm4gaW52YWxpZCBtb2RlXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAgIG1vZGUgJiYgbW9kZSAhPT0gJ2luLW91dCcgJiYgbW9kZSAhPT0gJ291dC1pbidcbiAgICApIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICdpbnZhbGlkIDx0cmFuc2l0aW9uPiBtb2RlOiAnICsgbW9kZSxcbiAgICAgICAgdGhpcy4kcGFyZW50XG4gICAgICApO1xuICAgIH1cblxuICAgIHZhciByYXdDaGlsZCA9IGNoaWxkcmVuWzBdO1xuXG4gICAgLy8gaWYgdGhpcyBpcyBhIGNvbXBvbmVudCByb290IG5vZGUgYW5kIHRoZSBjb21wb25lbnQnc1xuICAgIC8vIHBhcmVudCBjb250YWluZXIgbm9kZSBhbHNvIGhhcyB0cmFuc2l0aW9uLCBza2lwLlxuICAgIGlmIChoYXNQYXJlbnRUcmFuc2l0aW9uKHRoaXMuJHZub2RlKSkge1xuICAgICAgcmV0dXJuIHJhd0NoaWxkXG4gICAgfVxuXG4gICAgLy8gYXBwbHkgdHJhbnNpdGlvbiBkYXRhIHRvIGNoaWxkXG4gICAgLy8gdXNlIGdldFJlYWxDaGlsZCgpIHRvIGlnbm9yZSBhYnN0cmFjdCBjb21wb25lbnRzIGUuZy4ga2VlcC1hbGl2ZVxuICAgIHZhciBjaGlsZCA9IGdldFJlYWxDaGlsZChyYXdDaGlsZCk7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKCFjaGlsZCkge1xuICAgICAgcmV0dXJuIHJhd0NoaWxkXG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2xlYXZpbmcpIHtcbiAgICAgIHJldHVybiBwbGFjZWhvbGRlcihoLCByYXdDaGlsZClcbiAgICB9XG5cbiAgICAvLyBlbnN1cmUgYSBrZXkgdGhhdCBpcyB1bmlxdWUgdG8gdGhlIHZub2RlIHR5cGUgYW5kIHRvIHRoaXMgdHJhbnNpdGlvblxuICAgIC8vIGNvbXBvbmVudCBpbnN0YW5jZS4gVGhpcyBrZXkgd2lsbCBiZSB1c2VkIHRvIHJlbW92ZSBwZW5kaW5nIGxlYXZpbmcgbm9kZXNcbiAgICAvLyBkdXJpbmcgZW50ZXJpbmcuXG4gICAgdmFyIGlkID0gXCJfX3RyYW5zaXRpb24tXCIgKyAodGhpcy5fdWlkKSArIFwiLVwiO1xuICAgIGNoaWxkLmtleSA9IGNoaWxkLmtleSA9PSBudWxsXG4gICAgICA/IGNoaWxkLmlzQ29tbWVudFxuICAgICAgICA/IGlkICsgJ2NvbW1lbnQnXG4gICAgICAgIDogaWQgKyBjaGlsZC50YWdcbiAgICAgIDogaXNQcmltaXRpdmUoY2hpbGQua2V5KVxuICAgICAgICA/IChTdHJpbmcoY2hpbGQua2V5KS5pbmRleE9mKGlkKSA9PT0gMCA/IGNoaWxkLmtleSA6IGlkICsgY2hpbGQua2V5KVxuICAgICAgICA6IGNoaWxkLmtleTtcblxuICAgIHZhciBkYXRhID0gKGNoaWxkLmRhdGEgfHwgKGNoaWxkLmRhdGEgPSB7fSkpLnRyYW5zaXRpb24gPSBleHRyYWN0VHJhbnNpdGlvbkRhdGEodGhpcyk7XG4gICAgdmFyIG9sZFJhd0NoaWxkID0gdGhpcy5fdm5vZGU7XG4gICAgdmFyIG9sZENoaWxkID0gZ2V0UmVhbENoaWxkKG9sZFJhd0NoaWxkKTtcblxuICAgIC8vIG1hcmsgdi1zaG93XG4gICAgLy8gc28gdGhhdCB0aGUgdHJhbnNpdGlvbiBtb2R1bGUgY2FuIGhhbmQgb3ZlciB0aGUgY29udHJvbCB0byB0aGUgZGlyZWN0aXZlXG4gICAgaWYgKGNoaWxkLmRhdGEuZGlyZWN0aXZlcyAmJiBjaGlsZC5kYXRhLmRpcmVjdGl2ZXMuc29tZShpc1ZTaG93RGlyZWN0aXZlKSkge1xuICAgICAgY2hpbGQuZGF0YS5zaG93ID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoXG4gICAgICBvbGRDaGlsZCAmJlxuICAgICAgb2xkQ2hpbGQuZGF0YSAmJlxuICAgICAgIWlzU2FtZUNoaWxkKGNoaWxkLCBvbGRDaGlsZCkgJiZcbiAgICAgICFpc0FzeW5jUGxhY2Vob2xkZXIob2xkQ2hpbGQpICYmXG4gICAgICAvLyAjNjY4NyBjb21wb25lbnQgcm9vdCBpcyBhIGNvbW1lbnQgbm9kZVxuICAgICAgIShvbGRDaGlsZC5jb21wb25lbnRJbnN0YW5jZSAmJiBvbGRDaGlsZC5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGUuaXNDb21tZW50KVxuICAgICkge1xuICAgICAgLy8gcmVwbGFjZSBvbGQgY2hpbGQgdHJhbnNpdGlvbiBkYXRhIHdpdGggZnJlc2ggb25lXG4gICAgICAvLyBpbXBvcnRhbnQgZm9yIGR5bmFtaWMgdHJhbnNpdGlvbnMhXG4gICAgICB2YXIgb2xkRGF0YSA9IG9sZENoaWxkLmRhdGEudHJhbnNpdGlvbiA9IGV4dGVuZCh7fSwgZGF0YSk7XG4gICAgICAvLyBoYW5kbGUgdHJhbnNpdGlvbiBtb2RlXG4gICAgICBpZiAobW9kZSA9PT0gJ291dC1pbicpIHtcbiAgICAgICAgLy8gcmV0dXJuIHBsYWNlaG9sZGVyIG5vZGUgYW5kIHF1ZXVlIHVwZGF0ZSB3aGVuIGxlYXZlIGZpbmlzaGVzXG4gICAgICAgIHRoaXMuX2xlYXZpbmcgPSB0cnVlO1xuICAgICAgICBtZXJnZVZOb2RlSG9vayhvbGREYXRhLCAnYWZ0ZXJMZWF2ZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB0aGlzJDEuX2xlYXZpbmcgPSBmYWxzZTtcbiAgICAgICAgICB0aGlzJDEuJGZvcmNlVXBkYXRlKCk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcGxhY2Vob2xkZXIoaCwgcmF3Q2hpbGQpXG4gICAgICB9IGVsc2UgaWYgKG1vZGUgPT09ICdpbi1vdXQnKSB7XG4gICAgICAgIGlmIChpc0FzeW5jUGxhY2Vob2xkZXIoY2hpbGQpKSB7XG4gICAgICAgICAgcmV0dXJuIG9sZFJhd0NoaWxkXG4gICAgICAgIH1cbiAgICAgICAgdmFyIGRlbGF5ZWRMZWF2ZTtcbiAgICAgICAgdmFyIHBlcmZvcm1MZWF2ZSA9IGZ1bmN0aW9uICgpIHsgZGVsYXllZExlYXZlKCk7IH07XG4gICAgICAgIG1lcmdlVk5vZGVIb29rKGRhdGEsICdhZnRlckVudGVyJywgcGVyZm9ybUxlYXZlKTtcbiAgICAgICAgbWVyZ2VWTm9kZUhvb2soZGF0YSwgJ2VudGVyQ2FuY2VsbGVkJywgcGVyZm9ybUxlYXZlKTtcbiAgICAgICAgbWVyZ2VWTm9kZUhvb2sob2xkRGF0YSwgJ2RlbGF5TGVhdmUnLCBmdW5jdGlvbiAobGVhdmUpIHsgZGVsYXllZExlYXZlID0gbGVhdmU7IH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByYXdDaGlsZFxuICB9XG59O1xuXG4vKiAgKi9cblxudmFyIHByb3BzID0gZXh0ZW5kKHtcbiAgdGFnOiBTdHJpbmcsXG4gIG1vdmVDbGFzczogU3RyaW5nXG59LCB0cmFuc2l0aW9uUHJvcHMpO1xuXG5kZWxldGUgcHJvcHMubW9kZTtcblxudmFyIFRyYW5zaXRpb25Hcm91cCA9IHtcbiAgcHJvcHM6IHByb3BzLFxuXG4gIGJlZm9yZU1vdW50OiBmdW5jdGlvbiBiZWZvcmVNb3VudCAoKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICB2YXIgdXBkYXRlID0gdGhpcy5fdXBkYXRlO1xuICAgIHRoaXMuX3VwZGF0ZSA9IGZ1bmN0aW9uICh2bm9kZSwgaHlkcmF0aW5nKSB7XG4gICAgICB2YXIgcmVzdG9yZUFjdGl2ZUluc3RhbmNlID0gc2V0QWN0aXZlSW5zdGFuY2UodGhpcyQxKTtcbiAgICAgIC8vIGZvcmNlIHJlbW92aW5nIHBhc3NcbiAgICAgIHRoaXMkMS5fX3BhdGNoX18oXG4gICAgICAgIHRoaXMkMS5fdm5vZGUsXG4gICAgICAgIHRoaXMkMS5rZXB0LFxuICAgICAgICBmYWxzZSwgLy8gaHlkcmF0aW5nXG4gICAgICAgIHRydWUgLy8gcmVtb3ZlT25seSAoIWltcG9ydGFudCwgYXZvaWRzIHVubmVjZXNzYXJ5IG1vdmVzKVxuICAgICAgKTtcbiAgICAgIHRoaXMkMS5fdm5vZGUgPSB0aGlzJDEua2VwdDtcbiAgICAgIHJlc3RvcmVBY3RpdmVJbnN0YW5jZSgpO1xuICAgICAgdXBkYXRlLmNhbGwodGhpcyQxLCB2bm9kZSwgaHlkcmF0aW5nKTtcbiAgICB9O1xuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyIChoKSB7XG4gICAgdmFyIHRhZyA9IHRoaXMudGFnIHx8IHRoaXMuJHZub2RlLmRhdGEudGFnIHx8ICdzcGFuJztcbiAgICB2YXIgbWFwID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB2YXIgcHJldkNoaWxkcmVuID0gdGhpcy5wcmV2Q2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuO1xuICAgIHZhciByYXdDaGlsZHJlbiA9IHRoaXMuJHNsb3RzLmRlZmF1bHQgfHwgW107XG4gICAgdmFyIGNoaWxkcmVuID0gdGhpcy5jaGlsZHJlbiA9IFtdO1xuICAgIHZhciB0cmFuc2l0aW9uRGF0YSA9IGV4dHJhY3RUcmFuc2l0aW9uRGF0YSh0aGlzKTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmF3Q2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBjID0gcmF3Q2hpbGRyZW5baV07XG4gICAgICBpZiAoYy50YWcpIHtcbiAgICAgICAgaWYgKGMua2V5ICE9IG51bGwgJiYgU3RyaW5nKGMua2V5KS5pbmRleE9mKCdfX3ZsaXN0JykgIT09IDApIHtcbiAgICAgICAgICBjaGlsZHJlbi5wdXNoKGMpO1xuICAgICAgICAgIG1hcFtjLmtleV0gPSBjXG4gICAgICAgICAgOyhjLmRhdGEgfHwgKGMuZGF0YSA9IHt9KSkudHJhbnNpdGlvbiA9IHRyYW5zaXRpb25EYXRhO1xuICAgICAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICB2YXIgb3B0cyA9IGMuY29tcG9uZW50T3B0aW9ucztcbiAgICAgICAgICB2YXIgbmFtZSA9IG9wdHMgPyAob3B0cy5DdG9yLm9wdGlvbnMubmFtZSB8fCBvcHRzLnRhZyB8fCAnJykgOiBjLnRhZztcbiAgICAgICAgICB3YXJuKChcIjx0cmFuc2l0aW9uLWdyb3VwPiBjaGlsZHJlbiBtdXN0IGJlIGtleWVkOiA8XCIgKyBuYW1lICsgXCI+XCIpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChwcmV2Q2hpbGRyZW4pIHtcbiAgICAgIHZhciBrZXB0ID0gW107XG4gICAgICB2YXIgcmVtb3ZlZCA9IFtdO1xuICAgICAgZm9yICh2YXIgaSQxID0gMDsgaSQxIDwgcHJldkNoaWxkcmVuLmxlbmd0aDsgaSQxKyspIHtcbiAgICAgICAgdmFyIGMkMSA9IHByZXZDaGlsZHJlbltpJDFdO1xuICAgICAgICBjJDEuZGF0YS50cmFuc2l0aW9uID0gdHJhbnNpdGlvbkRhdGE7XG4gICAgICAgIGMkMS5kYXRhLnBvcyA9IGMkMS5lbG0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIGlmIChtYXBbYyQxLmtleV0pIHtcbiAgICAgICAgICBrZXB0LnB1c2goYyQxKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZW1vdmVkLnB1c2goYyQxKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy5rZXB0ID0gaCh0YWcsIG51bGwsIGtlcHQpO1xuICAgICAgdGhpcy5yZW1vdmVkID0gcmVtb3ZlZDtcbiAgICB9XG5cbiAgICByZXR1cm4gaCh0YWcsIG51bGwsIGNoaWxkcmVuKVxuICB9LFxuXG4gIHVwZGF0ZWQ6IGZ1bmN0aW9uIHVwZGF0ZWQgKCkge1xuICAgIHZhciBjaGlsZHJlbiA9IHRoaXMucHJldkNoaWxkcmVuO1xuICAgIHZhciBtb3ZlQ2xhc3MgPSB0aGlzLm1vdmVDbGFzcyB8fCAoKHRoaXMubmFtZSB8fCAndicpICsgJy1tb3ZlJyk7XG4gICAgaWYgKCFjaGlsZHJlbi5sZW5ndGggfHwgIXRoaXMuaGFzTW92ZShjaGlsZHJlblswXS5lbG0sIG1vdmVDbGFzcykpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vIHdlIGRpdmlkZSB0aGUgd29yayBpbnRvIHRocmVlIGxvb3BzIHRvIGF2b2lkIG1peGluZyBET00gcmVhZHMgYW5kIHdyaXRlc1xuICAgIC8vIGluIGVhY2ggaXRlcmF0aW9uIC0gd2hpY2ggaGVscHMgcHJldmVudCBsYXlvdXQgdGhyYXNoaW5nLlxuICAgIGNoaWxkcmVuLmZvckVhY2goY2FsbFBlbmRpbmdDYnMpO1xuICAgIGNoaWxkcmVuLmZvckVhY2gocmVjb3JkUG9zaXRpb24pO1xuICAgIGNoaWxkcmVuLmZvckVhY2goYXBwbHlUcmFuc2xhdGlvbik7XG5cbiAgICAvLyBmb3JjZSByZWZsb3cgdG8gcHV0IGV2ZXJ5dGhpbmcgaW4gcG9zaXRpb25cbiAgICAvLyBhc3NpZ24gdG8gdGhpcyB0byBhdm9pZCBiZWluZyByZW1vdmVkIGluIHRyZWUtc2hha2luZ1xuICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgIHRoaXMuX3JlZmxvdyA9IGRvY3VtZW50LmJvZHkub2Zmc2V0SGVpZ2h0O1xuXG4gICAgY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbiAoYykge1xuICAgICAgaWYgKGMuZGF0YS5tb3ZlZCkge1xuICAgICAgICB2YXIgZWwgPSBjLmVsbTtcbiAgICAgICAgdmFyIHMgPSBlbC5zdHlsZTtcbiAgICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBtb3ZlQ2xhc3MpO1xuICAgICAgICBzLnRyYW5zZm9ybSA9IHMuV2Via2l0VHJhbnNmb3JtID0gcy50cmFuc2l0aW9uRHVyYXRpb24gPSAnJztcbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcih0cmFuc2l0aW9uRW5kRXZlbnQsIGVsLl9tb3ZlQ2IgPSBmdW5jdGlvbiBjYiAoZSkge1xuICAgICAgICAgIGlmIChlICYmIGUudGFyZ2V0ICE9PSBlbCkge1xuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghZSB8fCAvdHJhbnNmb3JtJC8udGVzdChlLnByb3BlcnR5TmFtZSkpIHtcbiAgICAgICAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIodHJhbnNpdGlvbkVuZEV2ZW50LCBjYik7XG4gICAgICAgICAgICBlbC5fbW92ZUNiID0gbnVsbDtcbiAgICAgICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbW92ZUNsYXNzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9LFxuXG4gIG1ldGhvZHM6IHtcbiAgICBoYXNNb3ZlOiBmdW5jdGlvbiBoYXNNb3ZlIChlbCwgbW92ZUNsYXNzKSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIGlmICghaGFzVHJhbnNpdGlvbikge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgaWYgKHRoaXMuX2hhc01vdmUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2hhc01vdmVcbiAgICAgIH1cbiAgICAgIC8vIERldGVjdCB3aGV0aGVyIGFuIGVsZW1lbnQgd2l0aCB0aGUgbW92ZSBjbGFzcyBhcHBsaWVkIGhhc1xuICAgICAgLy8gQ1NTIHRyYW5zaXRpb25zLiBTaW5jZSB0aGUgZWxlbWVudCBtYXkgYmUgaW5zaWRlIGFuIGVudGVyaW5nXG4gICAgICAvLyB0cmFuc2l0aW9uIGF0IHRoaXMgdmVyeSBtb21lbnQsIHdlIG1ha2UgYSBjbG9uZSBvZiBpdCBhbmQgcmVtb3ZlXG4gICAgICAvLyBhbGwgb3RoZXIgdHJhbnNpdGlvbiBjbGFzc2VzIGFwcGxpZWQgdG8gZW5zdXJlIG9ubHkgdGhlIG1vdmUgY2xhc3NcbiAgICAgIC8vIGlzIGFwcGxpZWQuXG4gICAgICB2YXIgY2xvbmUgPSBlbC5jbG9uZU5vZGUoKTtcbiAgICAgIGlmIChlbC5fdHJhbnNpdGlvbkNsYXNzZXMpIHtcbiAgICAgICAgZWwuX3RyYW5zaXRpb25DbGFzc2VzLmZvckVhY2goZnVuY3Rpb24gKGNscykgeyByZW1vdmVDbGFzcyhjbG9uZSwgY2xzKTsgfSk7XG4gICAgICB9XG4gICAgICBhZGRDbGFzcyhjbG9uZSwgbW92ZUNsYXNzKTtcbiAgICAgIGNsb25lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICB0aGlzLiRlbC5hcHBlbmRDaGlsZChjbG9uZSk7XG4gICAgICB2YXIgaW5mbyA9IGdldFRyYW5zaXRpb25JbmZvKGNsb25lKTtcbiAgICAgIHRoaXMuJGVsLnJlbW92ZUNoaWxkKGNsb25lKTtcbiAgICAgIHJldHVybiAodGhpcy5faGFzTW92ZSA9IGluZm8uaGFzVHJhbnNmb3JtKVxuICAgIH1cbiAgfVxufTtcblxuZnVuY3Rpb24gY2FsbFBlbmRpbmdDYnMgKGMpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChjLmVsbS5fbW92ZUNiKSB7XG4gICAgYy5lbG0uX21vdmVDYigpO1xuICB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoYy5lbG0uX2VudGVyQ2IpIHtcbiAgICBjLmVsbS5fZW50ZXJDYigpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlY29yZFBvc2l0aW9uIChjKSB7XG4gIGMuZGF0YS5uZXdQb3MgPSBjLmVsbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbn1cblxuZnVuY3Rpb24gYXBwbHlUcmFuc2xhdGlvbiAoYykge1xuICB2YXIgb2xkUG9zID0gYy5kYXRhLnBvcztcbiAgdmFyIG5ld1BvcyA9IGMuZGF0YS5uZXdQb3M7XG4gIHZhciBkeCA9IG9sZFBvcy5sZWZ0IC0gbmV3UG9zLmxlZnQ7XG4gIHZhciBkeSA9IG9sZFBvcy50b3AgLSBuZXdQb3MudG9wO1xuICBpZiAoZHggfHwgZHkpIHtcbiAgICBjLmRhdGEubW92ZWQgPSB0cnVlO1xuICAgIHZhciBzID0gYy5lbG0uc3R5bGU7XG4gICAgcy50cmFuc2Zvcm0gPSBzLldlYmtpdFRyYW5zZm9ybSA9IFwidHJhbnNsYXRlKFwiICsgZHggKyBcInB4LFwiICsgZHkgKyBcInB4KVwiO1xuICAgIHMudHJhbnNpdGlvbkR1cmF0aW9uID0gJzBzJztcbiAgfVxufVxuXG52YXIgcGxhdGZvcm1Db21wb25lbnRzID0ge1xuICBUcmFuc2l0aW9uOiBUcmFuc2l0aW9uLFxuICBUcmFuc2l0aW9uR3JvdXA6IFRyYW5zaXRpb25Hcm91cFxufTtcblxuLyogICovXG5cbi8vIGluc3RhbGwgcGxhdGZvcm0gc3BlY2lmaWMgdXRpbHNcblZ1ZS5jb25maWcubXVzdFVzZVByb3AgPSBtdXN0VXNlUHJvcDtcblZ1ZS5jb25maWcuaXNSZXNlcnZlZFRhZyA9IGlzUmVzZXJ2ZWRUYWc7XG5WdWUuY29uZmlnLmlzUmVzZXJ2ZWRBdHRyID0gaXNSZXNlcnZlZEF0dHI7XG5WdWUuY29uZmlnLmdldFRhZ05hbWVzcGFjZSA9IGdldFRhZ05hbWVzcGFjZTtcblZ1ZS5jb25maWcuaXNVbmtub3duRWxlbWVudCA9IGlzVW5rbm93bkVsZW1lbnQ7XG5cbi8vIGluc3RhbGwgcGxhdGZvcm0gcnVudGltZSBkaXJlY3RpdmVzICYgY29tcG9uZW50c1xuZXh0ZW5kKFZ1ZS5vcHRpb25zLmRpcmVjdGl2ZXMsIHBsYXRmb3JtRGlyZWN0aXZlcyk7XG5leHRlbmQoVnVlLm9wdGlvbnMuY29tcG9uZW50cywgcGxhdGZvcm1Db21wb25lbnRzKTtcblxuLy8gaW5zdGFsbCBwbGF0Zm9ybSBwYXRjaCBmdW5jdGlvblxuVnVlLnByb3RvdHlwZS5fX3BhdGNoX18gPSBpbkJyb3dzZXIgPyBwYXRjaCA6IG5vb3A7XG5cbi8vIHB1YmxpYyBtb3VudCBtZXRob2RcblZ1ZS5wcm90b3R5cGUuJG1vdW50ID0gZnVuY3Rpb24gKFxuICBlbCxcbiAgaHlkcmF0aW5nXG4pIHtcbiAgZWwgPSBlbCAmJiBpbkJyb3dzZXIgPyBxdWVyeShlbCkgOiB1bmRlZmluZWQ7XG4gIHJldHVybiBtb3VudENvbXBvbmVudCh0aGlzLCBlbCwgaHlkcmF0aW5nKVxufTtcblxuLy8gZGV2dG9vbHMgZ2xvYmFsIGhvb2tcbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5pZiAoaW5Ccm93c2VyKSB7XG4gIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgIGlmIChjb25maWcuZGV2dG9vbHMpIHtcbiAgICAgIGlmIChkZXZ0b29scykge1xuICAgICAgICBkZXZ0b29scy5lbWl0KCdpbml0JywgVnVlKTtcbiAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICd0ZXN0J1xuICAgICAgKSB7XG4gICAgICAgIGNvbnNvbGVbY29uc29sZS5pbmZvID8gJ2luZm8nIDogJ2xvZyddKFxuICAgICAgICAgICdEb3dubG9hZCB0aGUgVnVlIERldnRvb2xzIGV4dGVuc2lvbiBmb3IgYSBiZXR0ZXIgZGV2ZWxvcG1lbnQgZXhwZXJpZW5jZTpcXG4nICtcbiAgICAgICAgICAnaHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3Z1ZS1kZXZ0b29scydcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAndGVzdCcgJiZcbiAgICAgIGNvbmZpZy5wcm9kdWN0aW9uVGlwICE9PSBmYWxzZSAmJlxuICAgICAgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnXG4gICAgKSB7XG4gICAgICBjb25zb2xlW2NvbnNvbGUuaW5mbyA/ICdpbmZvJyA6ICdsb2cnXShcbiAgICAgICAgXCJZb3UgYXJlIHJ1bm5pbmcgVnVlIGluIGRldmVsb3BtZW50IG1vZGUuXFxuXCIgK1xuICAgICAgICBcIk1ha2Ugc3VyZSB0byB0dXJuIG9uIHByb2R1Y3Rpb24gbW9kZSB3aGVuIGRlcGxveWluZyBmb3IgcHJvZHVjdGlvbi5cXG5cIiArXG4gICAgICAgIFwiU2VlIG1vcmUgdGlwcyBhdCBodHRwczovL3Z1ZWpzLm9yZy9ndWlkZS9kZXBsb3ltZW50Lmh0bWxcIlxuICAgICAgKTtcbiAgICB9XG4gIH0sIDApO1xufVxuXG4vKiAgKi9cblxuZXhwb3J0IGRlZmF1bHQgVnVlO1xuIiwiZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDb25zdHJ1Y3RvciwgXCJwcm90b3R5cGVcIiwgeyB3cml0YWJsZTogZmFsc2UgfSk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG5pbXBvcnQgeyBsb2cgfSBmcm9tIFwiLi4vdXRpbHMvbG9nLmpzXCI7XG5cbnZhciBXZWJTb2NrZXRDbGllbnQgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IHVybFxuICAgKi9cbiAgZnVuY3Rpb24gV2ViU29ja2V0Q2xpZW50KHVybCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBXZWJTb2NrZXRDbGllbnQpO1xuXG4gICAgdGhpcy5jbGllbnQgPSBuZXcgV2ViU29ja2V0KHVybCk7XG5cbiAgICB0aGlzLmNsaWVudC5vbmVycm9yID0gZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICBsb2cuZXJyb3IoZXJyb3IpO1xuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIEBwYXJhbSB7KC4uLmFyZ3M6IGFueVtdKSA9PiB2b2lkfSBmXG4gICAqL1xuXG5cbiAgX2NyZWF0ZUNsYXNzKFdlYlNvY2tldENsaWVudCwgW3tcbiAgICBrZXk6IFwib25PcGVuXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG9uT3BlbihmKSB7XG4gICAgICB0aGlzLmNsaWVudC5vbm9wZW4gPSBmO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcGFyYW0geyguLi5hcmdzOiBhbnlbXSkgPT4gdm9pZH0gZlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwib25DbG9zZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBvbkNsb3NlKGYpIHtcbiAgICAgIHRoaXMuY2xpZW50Lm9uY2xvc2UgPSBmO1xuICAgIH0gLy8gY2FsbCBmIHdpdGggdGhlIG1lc3NhZ2Ugc3RyaW5nIGFzIHRoZSBmaXJzdCBhcmd1bWVudFxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHsoLi4uYXJnczogYW55W10pID0+IHZvaWR9IGZcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcIm9uTWVzc2FnZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBvbk1lc3NhZ2UoZikge1xuICAgICAgdGhpcy5jbGllbnQub25tZXNzYWdlID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgZihlLmRhdGEpO1xuICAgICAgfTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gV2ViU29ja2V0Q2xpZW50O1xufSgpO1xuXG5leHBvcnQgeyBXZWJTb2NrZXRDbGllbnQgYXMgZGVmYXVsdCB9OyIsIi8qKioqKiovIChmdW5jdGlvbigpIHsgLy8gd2VicGFja0Jvb3RzdHJhcFxuLyoqKioqKi8gXHRcInVzZSBzdHJpY3RcIjtcbi8qKioqKiovIFx0dmFyIF9fd2VicGFja19tb2R1bGVzX18gPSAoe1xuXG4vKioqLyBcIi4vY2xpZW50LXNyYy9tb2R1bGVzL2xvZ2dlci9TeW5jQmFpbEhvb2tGYWtlLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vY2xpZW50LXNyYy9tb2R1bGVzL2xvZ2dlci9TeW5jQmFpbEhvb2tGYWtlLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSkge1xuXG5cbi8qKlxuICogQ2xpZW50IHN0dWIgZm9yIHRhcGFibGUgU3luY0JhaWxIb29rXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjbGllbnRUYXBhYmxlU3luY0JhaWxIb29rKCkge1xuICByZXR1cm4ge1xuICAgIGNhbGw6IGZ1bmN0aW9uIGNhbGwoKSB7fVxuICB9O1xufTtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9ub2RlX21vZHVsZXMvd2VicGFjay9saWIvbG9nZ2luZy9Mb2dnZXIuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9ub2RlX21vZHVsZXMvd2VicGFjay9saWIvbG9nZ2luZy9Mb2dnZXIuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoZnVuY3Rpb24oX191bnVzZWRfd2VicGFja19tb2R1bGUsIGV4cG9ydHMpIHtcblxuLypcblx0TUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcblx0QXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cblxuXG5mdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7XG4gIHJldHVybiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5KGFycikgfHwgX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFycikgfHwgX25vbkl0ZXJhYmxlU3ByZWFkKCk7XG59XG5cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7XG59XG5cbmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHtcbiAgaWYgKCFvKSByZXR1cm47XG4gIGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7XG4gIHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTtcbiAgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTtcbiAgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7XG4gIGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTtcbn1cblxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheShpdGVyKSB7XG4gIGlmICh0eXBlb2YgKHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgPyBTeW1ib2wgOiBmdW5jdGlvbiAoaSkgeyByZXR1cm4gaTsgfSkgIT09IFwidW5kZWZpbmVkXCIgJiYgaXRlclsodHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiA/IFN5bWJvbCA6IGZ1bmN0aW9uIChpKSB7IHJldHVybiBpOyB9KS5pdGVyYXRvcl0gIT0gbnVsbCB8fCBpdGVyW1wiQEBpdGVyYXRvclwiXSAhPSBudWxsKSByZXR1cm4gQXJyYXkuZnJvbShpdGVyKTtcbn1cblxuZnVuY3Rpb24gX2FycmF5V2l0aG91dEhvbGVzKGFycikge1xuICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkoYXJyKTtcbn1cblxuZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHtcbiAgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7XG5cbiAgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSB7XG4gICAgYXJyMltpXSA9IGFycltpXTtcbiAgfVxuXG4gIHJldHVybiBhcnIyO1xufVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gIH1cbn1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29uc3RydWN0b3IsIFwicHJvdG90eXBlXCIsIHtcbiAgICB3cml0YWJsZTogZmFsc2VcbiAgfSk7XG4gIHJldHVybiBDb25zdHJ1Y3Rvcjtcbn1cblxudmFyIExvZ1R5cGUgPSBPYmplY3QuZnJlZXplKHtcbiAgZXJyb3I6XG4gIC8qKiBAdHlwZSB7XCJlcnJvclwifSAqL1xuICBcImVycm9yXCIsXG4gIC8vIG1lc3NhZ2UsIGMgc3R5bGUgYXJndW1lbnRzXG4gIHdhcm46XG4gIC8qKiBAdHlwZSB7XCJ3YXJuXCJ9ICovXG4gIFwid2FyblwiLFxuICAvLyBtZXNzYWdlLCBjIHN0eWxlIGFyZ3VtZW50c1xuICBpbmZvOlxuICAvKiogQHR5cGUge1wiaW5mb1wifSAqL1xuICBcImluZm9cIixcbiAgLy8gbWVzc2FnZSwgYyBzdHlsZSBhcmd1bWVudHNcbiAgbG9nOlxuICAvKiogQHR5cGUge1wibG9nXCJ9ICovXG4gIFwibG9nXCIsXG4gIC8vIG1lc3NhZ2UsIGMgc3R5bGUgYXJndW1lbnRzXG4gIGRlYnVnOlxuICAvKiogQHR5cGUge1wiZGVidWdcIn0gKi9cbiAgXCJkZWJ1Z1wiLFxuICAvLyBtZXNzYWdlLCBjIHN0eWxlIGFyZ3VtZW50c1xuICB0cmFjZTpcbiAgLyoqIEB0eXBlIHtcInRyYWNlXCJ9ICovXG4gIFwidHJhY2VcIixcbiAgLy8gbm8gYXJndW1lbnRzXG4gIGdyb3VwOlxuICAvKiogQHR5cGUge1wiZ3JvdXBcIn0gKi9cbiAgXCJncm91cFwiLFxuICAvLyBbbGFiZWxdXG4gIGdyb3VwQ29sbGFwc2VkOlxuICAvKiogQHR5cGUge1wiZ3JvdXBDb2xsYXBzZWRcIn0gKi9cbiAgXCJncm91cENvbGxhcHNlZFwiLFxuICAvLyBbbGFiZWxdXG4gIGdyb3VwRW5kOlxuICAvKiogQHR5cGUge1wiZ3JvdXBFbmRcIn0gKi9cbiAgXCJncm91cEVuZFwiLFxuICAvLyBbbGFiZWxdXG4gIHByb2ZpbGU6XG4gIC8qKiBAdHlwZSB7XCJwcm9maWxlXCJ9ICovXG4gIFwicHJvZmlsZVwiLFxuICAvLyBbcHJvZmlsZU5hbWVdXG4gIHByb2ZpbGVFbmQ6XG4gIC8qKiBAdHlwZSB7XCJwcm9maWxlRW5kXCJ9ICovXG4gIFwicHJvZmlsZUVuZFwiLFxuICAvLyBbcHJvZmlsZU5hbWVdXG4gIHRpbWU6XG4gIC8qKiBAdHlwZSB7XCJ0aW1lXCJ9ICovXG4gIFwidGltZVwiLFxuICAvLyBuYW1lLCB0aW1lIGFzIFtzZWNvbmRzLCBuYW5vc2Vjb25kc11cbiAgY2xlYXI6XG4gIC8qKiBAdHlwZSB7XCJjbGVhclwifSAqL1xuICBcImNsZWFyXCIsXG4gIC8vIG5vIGFyZ3VtZW50c1xuICBzdGF0dXM6XG4gIC8qKiBAdHlwZSB7XCJzdGF0dXNcIn0gKi9cbiAgXCJzdGF0dXNcIiAvLyBtZXNzYWdlLCBhcmd1bWVudHNcblxufSk7XG5leHBvcnRzLkxvZ1R5cGUgPSBMb2dUeXBlO1xuLyoqIEB0eXBlZGVmIHt0eXBlb2YgTG9nVHlwZVtrZXlvZiB0eXBlb2YgTG9nVHlwZV19IExvZ1R5cGVFbnVtICovXG5cbnZhciBMT0dfU1lNQk9MID0gKHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgPyBTeW1ib2wgOiBmdW5jdGlvbiAoaSkgeyByZXR1cm4gaTsgfSkoXCJ3ZWJwYWNrIGxvZ2dlciByYXcgbG9nIG1ldGhvZFwiKTtcbnZhciBUSU1FUlNfU1lNQk9MID0gKHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgPyBTeW1ib2wgOiBmdW5jdGlvbiAoaSkgeyByZXR1cm4gaTsgfSkoXCJ3ZWJwYWNrIGxvZ2dlciB0aW1lc1wiKTtcbnZhciBUSU1FUlNfQUdHUkVHQVRFU19TWU1CT0wgPSAodHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiA/IFN5bWJvbCA6IGZ1bmN0aW9uIChpKSB7IHJldHVybiBpOyB9KShcIndlYnBhY2sgbG9nZ2VyIGFnZ3JlZ2F0ZWQgdGltZXNcIik7XG5cbnZhciBXZWJwYWNrTG9nZ2VyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb24oTG9nVHlwZUVudW0sIGFueVtdPSk6IHZvaWR9IGxvZyBsb2cgZnVuY3Rpb25cbiAgICogQHBhcmFtIHtmdW5jdGlvbihzdHJpbmcgfCBmdW5jdGlvbigpOiBzdHJpbmcpOiBXZWJwYWNrTG9nZ2VyfSBnZXRDaGlsZExvZ2dlciBmdW5jdGlvbiB0byBjcmVhdGUgY2hpbGQgbG9nZ2VyXG4gICAqL1xuICBmdW5jdGlvbiBXZWJwYWNrTG9nZ2VyKGxvZywgZ2V0Q2hpbGRMb2dnZXIpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgV2VicGFja0xvZ2dlcik7XG5cbiAgICB0aGlzW0xPR19TWU1CT0xdID0gbG9nO1xuICAgIHRoaXMuZ2V0Q2hpbGRMb2dnZXIgPSBnZXRDaGlsZExvZ2dlcjtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhXZWJwYWNrTG9nZ2VyLCBbe1xuICAgIGtleTogXCJlcnJvclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBlcnJvcigpIHtcbiAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgfVxuXG4gICAgICB0aGlzW0xPR19TWU1CT0xdKExvZ1R5cGUuZXJyb3IsIGFyZ3MpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJ3YXJuXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHdhcm4oKSB7XG4gICAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgICAgYXJnc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgICAgfVxuXG4gICAgICB0aGlzW0xPR19TWU1CT0xdKExvZ1R5cGUud2FybiwgYXJncyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImluZm9cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gaW5mbygpIHtcbiAgICAgIGZvciAodmFyIF9sZW4zID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMyksIF9rZXkzID0gMDsgX2tleTMgPCBfbGVuMzsgX2tleTMrKykge1xuICAgICAgICBhcmdzW19rZXkzXSA9IGFyZ3VtZW50c1tfa2V5M107XG4gICAgICB9XG5cbiAgICAgIHRoaXNbTE9HX1NZTUJPTF0oTG9nVHlwZS5pbmZvLCBhcmdzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwibG9nXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGxvZygpIHtcbiAgICAgIGZvciAodmFyIF9sZW40ID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuNCksIF9rZXk0ID0gMDsgX2tleTQgPCBfbGVuNDsgX2tleTQrKykge1xuICAgICAgICBhcmdzW19rZXk0XSA9IGFyZ3VtZW50c1tfa2V5NF07XG4gICAgICB9XG5cbiAgICAgIHRoaXNbTE9HX1NZTUJPTF0oTG9nVHlwZS5sb2csIGFyZ3MpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJkZWJ1Z1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkZWJ1ZygpIHtcbiAgICAgIGZvciAodmFyIF9sZW41ID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuNSksIF9rZXk1ID0gMDsgX2tleTUgPCBfbGVuNTsgX2tleTUrKykge1xuICAgICAgICBhcmdzW19rZXk1XSA9IGFyZ3VtZW50c1tfa2V5NV07XG4gICAgICB9XG5cbiAgICAgIHRoaXNbTE9HX1NZTUJPTF0oTG9nVHlwZS5kZWJ1ZywgYXJncyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImFzc2VydFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhc3NlcnQoYXNzZXJ0aW9uKSB7XG4gICAgICBpZiAoIWFzc2VydGlvbikge1xuICAgICAgICBmb3IgKHZhciBfbGVuNiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjYgPiAxID8gX2xlbjYgLSAxIDogMCksIF9rZXk2ID0gMTsgX2tleTYgPCBfbGVuNjsgX2tleTYrKykge1xuICAgICAgICAgIGFyZ3NbX2tleTYgLSAxXSA9IGFyZ3VtZW50c1tfa2V5Nl07XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzW0xPR19TWU1CT0xdKExvZ1R5cGUuZXJyb3IsIGFyZ3MpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJ0cmFjZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0cmFjZSgpIHtcbiAgICAgIHRoaXNbTE9HX1NZTUJPTF0oTG9nVHlwZS50cmFjZSwgW1wiVHJhY2VcIl0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjbGVhclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICAgIHRoaXNbTE9HX1NZTUJPTF0oTG9nVHlwZS5jbGVhcik7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInN0YXR1c1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzdGF0dXMoKSB7XG4gICAgICBmb3IgKHZhciBfbGVuNyA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjcpLCBfa2V5NyA9IDA7IF9rZXk3IDwgX2xlbjc7IF9rZXk3KyspIHtcbiAgICAgICAgYXJnc1tfa2V5N10gPSBhcmd1bWVudHNbX2tleTddO1xuICAgICAgfVxuXG4gICAgICB0aGlzW0xPR19TWU1CT0xdKExvZ1R5cGUuc3RhdHVzLCBhcmdzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ3JvdXBcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ3JvdXAoKSB7XG4gICAgICBmb3IgKHZhciBfbGVuOCA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjgpLCBfa2V5OCA9IDA7IF9rZXk4IDwgX2xlbjg7IF9rZXk4KyspIHtcbiAgICAgICAgYXJnc1tfa2V5OF0gPSBhcmd1bWVudHNbX2tleThdO1xuICAgICAgfVxuXG4gICAgICB0aGlzW0xPR19TWU1CT0xdKExvZ1R5cGUuZ3JvdXAsIGFyZ3MpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJncm91cENvbGxhcHNlZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBncm91cENvbGxhcHNlZCgpIHtcbiAgICAgIGZvciAodmFyIF9sZW45ID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuOSksIF9rZXk5ID0gMDsgX2tleTkgPCBfbGVuOTsgX2tleTkrKykge1xuICAgICAgICBhcmdzW19rZXk5XSA9IGFyZ3VtZW50c1tfa2V5OV07XG4gICAgICB9XG5cbiAgICAgIHRoaXNbTE9HX1NZTUJPTF0oTG9nVHlwZS5ncm91cENvbGxhcHNlZCwgYXJncyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdyb3VwRW5kXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdyb3VwRW5kKCkge1xuICAgICAgZm9yICh2YXIgX2xlbjEwID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMTApLCBfa2V5MTAgPSAwOyBfa2V5MTAgPCBfbGVuMTA7IF9rZXkxMCsrKSB7XG4gICAgICAgIGFyZ3NbX2tleTEwXSA9IGFyZ3VtZW50c1tfa2V5MTBdO1xuICAgICAgfVxuXG4gICAgICB0aGlzW0xPR19TWU1CT0xdKExvZ1R5cGUuZ3JvdXBFbmQsIGFyZ3MpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJwcm9maWxlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHByb2ZpbGUobGFiZWwpIHtcbiAgICAgIHRoaXNbTE9HX1NZTUJPTF0oTG9nVHlwZS5wcm9maWxlLCBbbGFiZWxdKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicHJvZmlsZUVuZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwcm9maWxlRW5kKGxhYmVsKSB7XG4gICAgICB0aGlzW0xPR19TWU1CT0xdKExvZ1R5cGUucHJvZmlsZUVuZCwgW2xhYmVsXSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInRpbWVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdGltZShsYWJlbCkge1xuICAgICAgdGhpc1tUSU1FUlNfU1lNQk9MXSA9IHRoaXNbVElNRVJTX1NZTUJPTF0gfHwgbmV3IE1hcCgpO1xuICAgICAgdGhpc1tUSU1FUlNfU1lNQk9MXS5zZXQobGFiZWwsIHByb2Nlc3MuaHJ0aW1lKCkpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJ0aW1lTG9nXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRpbWVMb2cobGFiZWwpIHtcbiAgICAgIHZhciBwcmV2ID0gdGhpc1tUSU1FUlNfU1lNQk9MXSAmJiB0aGlzW1RJTUVSU19TWU1CT0xdLmdldChsYWJlbCk7XG5cbiAgICAgIGlmICghcHJldikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJObyBzdWNoIGxhYmVsICdcIi5jb25jYXQobGFiZWwsIFwiJyBmb3IgV2VicGFja0xvZ2dlci50aW1lTG9nKClcIikpO1xuICAgICAgfVxuXG4gICAgICB2YXIgdGltZSA9IHByb2Nlc3MuaHJ0aW1lKHByZXYpO1xuICAgICAgdGhpc1tMT0dfU1lNQk9MXShMb2dUeXBlLnRpbWUsIFtsYWJlbF0uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheSh0aW1lKSkpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJ0aW1lRW5kXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRpbWVFbmQobGFiZWwpIHtcbiAgICAgIHZhciBwcmV2ID0gdGhpc1tUSU1FUlNfU1lNQk9MXSAmJiB0aGlzW1RJTUVSU19TWU1CT0xdLmdldChsYWJlbCk7XG5cbiAgICAgIGlmICghcHJldikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJObyBzdWNoIGxhYmVsICdcIi5jb25jYXQobGFiZWwsIFwiJyBmb3IgV2VicGFja0xvZ2dlci50aW1lRW5kKClcIikpO1xuICAgICAgfVxuXG4gICAgICB2YXIgdGltZSA9IHByb2Nlc3MuaHJ0aW1lKHByZXYpO1xuICAgICAgdGhpc1tUSU1FUlNfU1lNQk9MXS5kZWxldGUobGFiZWwpO1xuICAgICAgdGhpc1tMT0dfU1lNQk9MXShMb2dUeXBlLnRpbWUsIFtsYWJlbF0uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheSh0aW1lKSkpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJ0aW1lQWdncmVnYXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRpbWVBZ2dyZWdhdGUobGFiZWwpIHtcbiAgICAgIHZhciBwcmV2ID0gdGhpc1tUSU1FUlNfU1lNQk9MXSAmJiB0aGlzW1RJTUVSU19TWU1CT0xdLmdldChsYWJlbCk7XG5cbiAgICAgIGlmICghcHJldikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJObyBzdWNoIGxhYmVsICdcIi5jb25jYXQobGFiZWwsIFwiJyBmb3IgV2VicGFja0xvZ2dlci50aW1lQWdncmVnYXRlKClcIikpO1xuICAgICAgfVxuXG4gICAgICB2YXIgdGltZSA9IHByb2Nlc3MuaHJ0aW1lKHByZXYpO1xuICAgICAgdGhpc1tUSU1FUlNfU1lNQk9MXS5kZWxldGUobGFiZWwpO1xuICAgICAgdGhpc1tUSU1FUlNfQUdHUkVHQVRFU19TWU1CT0xdID0gdGhpc1tUSU1FUlNfQUdHUkVHQVRFU19TWU1CT0xdIHx8IG5ldyBNYXAoKTtcbiAgICAgIHZhciBjdXJyZW50ID0gdGhpc1tUSU1FUlNfQUdHUkVHQVRFU19TWU1CT0xdLmdldChsYWJlbCk7XG5cbiAgICAgIGlmIChjdXJyZW50ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKHRpbWVbMV0gKyBjdXJyZW50WzFdID4gMWU5KSB7XG4gICAgICAgICAgdGltZVswXSArPSBjdXJyZW50WzBdICsgMTtcbiAgICAgICAgICB0aW1lWzFdID0gdGltZVsxXSAtIDFlOSArIGN1cnJlbnRbMV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGltZVswXSArPSBjdXJyZW50WzBdO1xuICAgICAgICAgIHRpbWVbMV0gKz0gY3VycmVudFsxXTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzW1RJTUVSU19BR0dSRUdBVEVTX1NZTUJPTF0uc2V0KGxhYmVsLCB0aW1lKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwidGltZUFnZ3JlZ2F0ZUVuZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0aW1lQWdncmVnYXRlRW5kKGxhYmVsKSB7XG4gICAgICBpZiAodGhpc1tUSU1FUlNfQUdHUkVHQVRFU19TWU1CT0xdID09PSB1bmRlZmluZWQpIHJldHVybjtcbiAgICAgIHZhciB0aW1lID0gdGhpc1tUSU1FUlNfQUdHUkVHQVRFU19TWU1CT0xdLmdldChsYWJlbCk7XG4gICAgICBpZiAodGltZSA9PT0gdW5kZWZpbmVkKSByZXR1cm47XG4gICAgICB0aGlzW1RJTUVSU19BR0dSRUdBVEVTX1NZTUJPTF0uZGVsZXRlKGxhYmVsKTtcbiAgICAgIHRoaXNbTE9HX1NZTUJPTF0oTG9nVHlwZS50aW1lLCBbbGFiZWxdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkodGltZSkpKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gV2VicGFja0xvZ2dlcjtcbn0oKTtcblxuZXhwb3J0cy5Mb2dnZXIgPSBXZWJwYWNrTG9nZ2VyO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL25vZGVfbW9kdWxlcy93ZWJwYWNrL2xpYi9sb2dnaW5nL2NyZWF0ZUNvbnNvbGVMb2dnZXIuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vbm9kZV9tb2R1bGVzL3dlYnBhY2svbGliL2xvZ2dpbmcvY3JlYXRlQ29uc29sZUxvZ2dlci5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuLypcblx0TUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcblx0QXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cblxuXG5mdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7XG4gIHJldHVybiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5KGFycikgfHwgX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFycikgfHwgX25vbkl0ZXJhYmxlU3ByZWFkKCk7XG59XG5cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7XG59XG5cbmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHtcbiAgaWYgKCFvKSByZXR1cm47XG4gIGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7XG4gIHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTtcbiAgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTtcbiAgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7XG4gIGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTtcbn1cblxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheShpdGVyKSB7XG4gIGlmICh0eXBlb2YgKHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgPyBTeW1ib2wgOiBmdW5jdGlvbiAoaSkgeyByZXR1cm4gaTsgfSkgIT09IFwidW5kZWZpbmVkXCIgJiYgaXRlclsodHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiA/IFN5bWJvbCA6IGZ1bmN0aW9uIChpKSB7IHJldHVybiBpOyB9KS5pdGVyYXRvcl0gIT0gbnVsbCB8fCBpdGVyW1wiQEBpdGVyYXRvclwiXSAhPSBudWxsKSByZXR1cm4gQXJyYXkuZnJvbShpdGVyKTtcbn1cblxuZnVuY3Rpb24gX2FycmF5V2l0aG91dEhvbGVzKGFycikge1xuICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkoYXJyKTtcbn1cblxuZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHtcbiAgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7XG5cbiAgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSB7XG4gICAgYXJyMltpXSA9IGFycltpXTtcbiAgfVxuXG4gIHJldHVybiBhcnIyO1xufVxuXG52YXIgX3JlcXVpcmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL0xvZ2dlciAqLyBcIi4vbm9kZV9tb2R1bGVzL3dlYnBhY2svbGliL2xvZ2dpbmcvTG9nZ2VyLmpzXCIpLFxuICAgIExvZ1R5cGUgPSBfcmVxdWlyZS5Mb2dUeXBlO1xuLyoqIEB0eXBlZGVmIHtpbXBvcnQoXCIuLi8uLi9kZWNsYXJhdGlvbnMvV2VicGFja09wdGlvbnNcIikuRmlsdGVySXRlbVR5cGVzfSBGaWx0ZXJJdGVtVHlwZXMgKi9cblxuLyoqIEB0eXBlZGVmIHtpbXBvcnQoXCIuLi8uLi9kZWNsYXJhdGlvbnMvV2VicGFja09wdGlvbnNcIikuRmlsdGVyVHlwZXN9IEZpbHRlclR5cGVzICovXG5cbi8qKiBAdHlwZWRlZiB7aW1wb3J0KFwiLi9Mb2dnZXJcIikuTG9nVHlwZUVudW19IExvZ1R5cGVFbnVtICovXG5cbi8qKiBAdHlwZWRlZiB7ZnVuY3Rpb24oc3RyaW5nKTogYm9vbGVhbn0gRmlsdGVyRnVuY3Rpb24gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBMb2dnZXJDb25zb2xlXG4gKiBAcHJvcGVydHkge2Z1bmN0aW9uKCk6IHZvaWR9IGNsZWFyXG4gKiBAcHJvcGVydHkge2Z1bmN0aW9uKCk6IHZvaWR9IHRyYWNlXG4gKiBAcHJvcGVydHkgeyguLi5hcmdzOiBhbnlbXSkgPT4gdm9pZH0gaW5mb1xuICogQHByb3BlcnR5IHsoLi4uYXJnczogYW55W10pID0+IHZvaWR9IGxvZ1xuICogQHByb3BlcnR5IHsoLi4uYXJnczogYW55W10pID0+IHZvaWR9IHdhcm5cbiAqIEBwcm9wZXJ0eSB7KC4uLmFyZ3M6IGFueVtdKSA9PiB2b2lkfSBlcnJvclxuICogQHByb3BlcnR5IHsoLi4uYXJnczogYW55W10pID0+IHZvaWQ9fSBkZWJ1Z1xuICogQHByb3BlcnR5IHsoLi4uYXJnczogYW55W10pID0+IHZvaWQ9fSBncm91cFxuICogQHByb3BlcnR5IHsoLi4uYXJnczogYW55W10pID0+IHZvaWQ9fSBncm91cENvbGxhcHNlZFxuICogQHByb3BlcnR5IHsoLi4uYXJnczogYW55W10pID0+IHZvaWQ9fSBncm91cEVuZFxuICogQHByb3BlcnR5IHsoLi4uYXJnczogYW55W10pID0+IHZvaWQ9fSBzdGF0dXNcbiAqIEBwcm9wZXJ0eSB7KC4uLmFyZ3M6IGFueVtdKSA9PiB2b2lkPX0gcHJvZmlsZVxuICogQHByb3BlcnR5IHsoLi4uYXJnczogYW55W10pID0+IHZvaWQ9fSBwcm9maWxlRW5kXG4gKiBAcHJvcGVydHkgeyguLi5hcmdzOiBhbnlbXSkgPT4gdm9pZD19IGxvZ1RpbWVcbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IExvZ2dlck9wdGlvbnNcbiAqIEBwcm9wZXJ0eSB7ZmFsc2V8dHJ1ZXxcIm5vbmVcInxcImVycm9yXCJ8XCJ3YXJuXCJ8XCJpbmZvXCJ8XCJsb2dcInxcInZlcmJvc2VcIn0gbGV2ZWwgbG9nbGV2ZWxcbiAqIEBwcm9wZXJ0eSB7RmlsdGVyVHlwZXN8Ym9vbGVhbn0gZGVidWcgZmlsdGVyIGZvciBkZWJ1ZyBsb2dnaW5nXG4gKiBAcHJvcGVydHkge0xvZ2dlckNvbnNvbGV9IGNvbnNvbGUgdGhlIGNvbnNvbGUgdG8gbG9nIHRvXG4gKi9cblxuLyoqXG4gKiBAcGFyYW0ge0ZpbHRlckl0ZW1UeXBlc30gaXRlbSBhbiBpbnB1dCBpdGVtXG4gKiBAcmV0dXJucyB7RmlsdGVyRnVuY3Rpb259IGZpbHRlciBmdW5jdGlvblxuICovXG5cblxudmFyIGZpbHRlclRvRnVuY3Rpb24gPSBmdW5jdGlvbiBmaWx0ZXJUb0Z1bmN0aW9uKGl0ZW0pIHtcbiAgaWYgKHR5cGVvZiBpdGVtID09PSBcInN0cmluZ1wiKSB7XG4gICAgdmFyIHJlZ0V4cCA9IG5ldyBSZWdFeHAoXCJbXFxcXFxcXFwvXVwiLmNvbmNhdChpdGVtLnJlcGxhY2UoIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11c2VsZXNzLWVzY2FwZVxuICAgIC9bLVtcXF17fSgpKis/LlxcXFxeJHxdL2csIFwiXFxcXCQmXCIpLCBcIihbXFxcXFxcXFwvXXwkfCF8XFxcXD8pXCIpKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGlkZW50KSB7XG4gICAgICByZXR1cm4gcmVnRXhwLnRlc3QoaWRlbnQpO1xuICAgIH07XG4gIH1cblxuICBpZiAoaXRlbSAmJiB0eXBlb2YgaXRlbSA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgaXRlbS50ZXN0ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGlkZW50KSB7XG4gICAgICByZXR1cm4gaXRlbS50ZXN0KGlkZW50KTtcbiAgICB9O1xuICB9XG5cbiAgaWYgKHR5cGVvZiBpdGVtID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICByZXR1cm4gaXRlbTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgaXRlbSA9PT0gXCJib29sZWFuXCIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGl0ZW07XG4gICAgfTtcbiAgfVxufTtcbi8qKlxuICogQGVudW0ge251bWJlcn1cbiAqL1xuXG5cbnZhciBMb2dMZXZlbCA9IHtcbiAgbm9uZTogNixcbiAgZmFsc2U6IDYsXG4gIGVycm9yOiA1LFxuICB3YXJuOiA0LFxuICBpbmZvOiAzLFxuICBsb2c6IDIsXG4gIHRydWU6IDIsXG4gIHZlcmJvc2U6IDFcbn07XG4vKipcbiAqIEBwYXJhbSB7TG9nZ2VyT3B0aW9uc30gb3B0aW9ucyBvcHRpb25zIG9iamVjdFxuICogQHJldHVybnMge2Z1bmN0aW9uKHN0cmluZywgTG9nVHlwZUVudW0sIGFueVtdKTogdm9pZH0gbG9nZ2luZyBmdW5jdGlvblxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKF9yZWYpIHtcbiAgdmFyIF9yZWYkbGV2ZWwgPSBfcmVmLmxldmVsLFxuICAgICAgbGV2ZWwgPSBfcmVmJGxldmVsID09PSB2b2lkIDAgPyBcImluZm9cIiA6IF9yZWYkbGV2ZWwsXG4gICAgICBfcmVmJGRlYnVnID0gX3JlZi5kZWJ1ZyxcbiAgICAgIGRlYnVnID0gX3JlZiRkZWJ1ZyA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmJGRlYnVnLFxuICAgICAgY29uc29sZSA9IF9yZWYuY29uc29sZTtcbiAgdmFyIGRlYnVnRmlsdGVycyA9IHR5cGVvZiBkZWJ1ZyA9PT0gXCJib29sZWFuXCIgPyBbZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBkZWJ1ZztcbiAgfV0gOlxuICAvKiogQHR5cGUge0ZpbHRlckl0ZW1UeXBlc1tdfSAqL1xuICBbXS5jb25jYXQoZGVidWcpLm1hcChmaWx0ZXJUb0Z1bmN0aW9uKTtcbiAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXG5cbiAgdmFyIGxvZ2xldmVsID0gTG9nTGV2ZWxbXCJcIi5jb25jYXQobGV2ZWwpXSB8fCAwO1xuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgbmFtZSBvZiB0aGUgbG9nZ2VyXG4gICAqIEBwYXJhbSB7TG9nVHlwZUVudW19IHR5cGUgdHlwZSBvZiB0aGUgbG9nIGVudHJ5XG4gICAqIEBwYXJhbSB7YW55W119IGFyZ3MgYXJndW1lbnRzIG9mIHRoZSBsb2cgZW50cnlcbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuXG4gIHZhciBsb2dnZXIgPSBmdW5jdGlvbiBsb2dnZXIobmFtZSwgdHlwZSwgYXJncykge1xuICAgIHZhciBsYWJlbGVkQXJncyA9IGZ1bmN0aW9uIGxhYmVsZWRBcmdzKCkge1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoYXJncykpIHtcbiAgICAgICAgaWYgKGFyZ3MubGVuZ3RoID4gMCAmJiB0eXBlb2YgYXJnc1swXSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgIHJldHVybiBbXCJbXCIuY29uY2F0KG5hbWUsIFwiXSBcIikuY29uY2F0KGFyZ3NbMF0pXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KGFyZ3Muc2xpY2UoMSkpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gW1wiW1wiLmNvbmNhdChuYW1lLCBcIl1cIildLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoYXJncykpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgfTtcblxuICAgIHZhciBkZWJ1ZyA9IGRlYnVnRmlsdGVycy5zb21lKGZ1bmN0aW9uIChmKSB7XG4gICAgICByZXR1cm4gZihuYW1lKTtcbiAgICB9KTtcblxuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgY2FzZSBMb2dUeXBlLmRlYnVnOlxuICAgICAgICBpZiAoIWRlYnVnKSByZXR1cm47IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBub2RlL25vLXVuc3VwcG9ydGVkLWZlYXR1cmVzL25vZGUtYnVpbHRpbnNcblxuICAgICAgICBpZiAodHlwZW9mIGNvbnNvbGUuZGVidWcgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBub2RlL25vLXVuc3VwcG9ydGVkLWZlYXR1cmVzL25vZGUtYnVpbHRpbnNcbiAgICAgICAgICBjb25zb2xlLmRlYnVnLmFwcGx5KGNvbnNvbGUsIF90b0NvbnN1bWFibGVBcnJheShsYWJlbGVkQXJncygpKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc29sZS5sb2cuYXBwbHkoY29uc29sZSwgX3RvQ29uc3VtYWJsZUFycmF5KGxhYmVsZWRBcmdzKCkpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIExvZ1R5cGUubG9nOlxuICAgICAgICBpZiAoIWRlYnVnICYmIGxvZ2xldmVsID4gTG9nTGV2ZWwubG9nKSByZXR1cm47XG4gICAgICAgIGNvbnNvbGUubG9nLmFwcGx5KGNvbnNvbGUsIF90b0NvbnN1bWFibGVBcnJheShsYWJlbGVkQXJncygpKSk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIExvZ1R5cGUuaW5mbzpcbiAgICAgICAgaWYgKCFkZWJ1ZyAmJiBsb2dsZXZlbCA+IExvZ0xldmVsLmluZm8pIHJldHVybjtcbiAgICAgICAgY29uc29sZS5pbmZvLmFwcGx5KGNvbnNvbGUsIF90b0NvbnN1bWFibGVBcnJheShsYWJlbGVkQXJncygpKSk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIExvZ1R5cGUud2FybjpcbiAgICAgICAgaWYgKCFkZWJ1ZyAmJiBsb2dsZXZlbCA+IExvZ0xldmVsLndhcm4pIHJldHVybjtcbiAgICAgICAgY29uc29sZS53YXJuLmFwcGx5KGNvbnNvbGUsIF90b0NvbnN1bWFibGVBcnJheShsYWJlbGVkQXJncygpKSk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIExvZ1R5cGUuZXJyb3I6XG4gICAgICAgIGlmICghZGVidWcgJiYgbG9nbGV2ZWwgPiBMb2dMZXZlbC5lcnJvcikgcmV0dXJuO1xuICAgICAgICBjb25zb2xlLmVycm9yLmFwcGx5KGNvbnNvbGUsIF90b0NvbnN1bWFibGVBcnJheShsYWJlbGVkQXJncygpKSk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIExvZ1R5cGUudHJhY2U6XG4gICAgICAgIGlmICghZGVidWcpIHJldHVybjtcbiAgICAgICAgY29uc29sZS50cmFjZSgpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBMb2dUeXBlLmdyb3VwQ29sbGFwc2VkOlxuICAgICAgICBpZiAoIWRlYnVnICYmIGxvZ2xldmVsID4gTG9nTGV2ZWwubG9nKSByZXR1cm47XG5cbiAgICAgICAgaWYgKCFkZWJ1ZyAmJiBsb2dsZXZlbCA+IExvZ0xldmVsLnZlcmJvc2UpIHtcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm9kZS9uby11bnN1cHBvcnRlZC1mZWF0dXJlcy9ub2RlLWJ1aWx0aW5zXG4gICAgICAgICAgaWYgKHR5cGVvZiBjb25zb2xlLmdyb3VwQ29sbGFwc2VkID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBub2RlL25vLXVuc3VwcG9ydGVkLWZlYXR1cmVzL25vZGUtYnVpbHRpbnNcbiAgICAgICAgICAgIGNvbnNvbGUuZ3JvdXBDb2xsYXBzZWQuYXBwbHkoY29uc29sZSwgX3RvQ29uc3VtYWJsZUFycmF5KGxhYmVsZWRBcmdzKCkpKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS5sb2cuYXBwbHkoY29uc29sZSwgX3RvQ29uc3VtYWJsZUFycmF5KGxhYmVsZWRBcmdzKCkpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAvLyBmYWxscyB0aHJvdWdoXG5cbiAgICAgIGNhc2UgTG9nVHlwZS5ncm91cDpcbiAgICAgICAgaWYgKCFkZWJ1ZyAmJiBsb2dsZXZlbCA+IExvZ0xldmVsLmxvZykgcmV0dXJuOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm9kZS9uby11bnN1cHBvcnRlZC1mZWF0dXJlcy9ub2RlLWJ1aWx0aW5zXG5cbiAgICAgICAgaWYgKHR5cGVvZiBjb25zb2xlLmdyb3VwID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm9kZS9uby11bnN1cHBvcnRlZC1mZWF0dXJlcy9ub2RlLWJ1aWx0aW5zXG4gICAgICAgICAgY29uc29sZS5ncm91cC5hcHBseShjb25zb2xlLCBfdG9Db25zdW1hYmxlQXJyYXkobGFiZWxlZEFyZ3MoKSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnNvbGUubG9nLmFwcGx5KGNvbnNvbGUsIF90b0NvbnN1bWFibGVBcnJheShsYWJlbGVkQXJncygpKSk7XG4gICAgICAgIH1cblxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBMb2dUeXBlLmdyb3VwRW5kOlxuICAgICAgICBpZiAoIWRlYnVnICYmIGxvZ2xldmVsID4gTG9nTGV2ZWwubG9nKSByZXR1cm47IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBub2RlL25vLXVuc3VwcG9ydGVkLWZlYXR1cmVzL25vZGUtYnVpbHRpbnNcblxuICAgICAgICBpZiAodHlwZW9mIGNvbnNvbGUuZ3JvdXBFbmQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBub2RlL25vLXVuc3VwcG9ydGVkLWZlYXR1cmVzL25vZGUtYnVpbHRpbnNcbiAgICAgICAgICBjb25zb2xlLmdyb3VwRW5kKCk7XG4gICAgICAgIH1cblxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBMb2dUeXBlLnRpbWU6XG4gICAgICAgIHtcbiAgICAgICAgICBpZiAoIWRlYnVnICYmIGxvZ2xldmVsID4gTG9nTGV2ZWwubG9nKSByZXR1cm47XG4gICAgICAgICAgdmFyIG1zID0gYXJnc1sxXSAqIDEwMDAgKyBhcmdzWzJdIC8gMTAwMDAwMDtcbiAgICAgICAgICB2YXIgbXNnID0gXCJbXCIuY29uY2F0KG5hbWUsIFwiXSBcIikuY29uY2F0KGFyZ3NbMF0sIFwiOiBcIikuY29uY2F0KG1zLCBcIiBtc1wiKTtcblxuICAgICAgICAgIGlmICh0eXBlb2YgY29uc29sZS5sb2dUaW1lID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nVGltZShtc2cpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhtc2cpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgIGNhc2UgTG9nVHlwZS5wcm9maWxlOlxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm9kZS9uby11bnN1cHBvcnRlZC1mZWF0dXJlcy9ub2RlLWJ1aWx0aW5zXG4gICAgICAgIGlmICh0eXBlb2YgY29uc29sZS5wcm9maWxlID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm9kZS9uby11bnN1cHBvcnRlZC1mZWF0dXJlcy9ub2RlLWJ1aWx0aW5zXG4gICAgICAgICAgY29uc29sZS5wcm9maWxlLmFwcGx5KGNvbnNvbGUsIF90b0NvbnN1bWFibGVBcnJheShsYWJlbGVkQXJncygpKSk7XG4gICAgICAgIH1cblxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBMb2dUeXBlLnByb2ZpbGVFbmQ6XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBub2RlL25vLXVuc3VwcG9ydGVkLWZlYXR1cmVzL25vZGUtYnVpbHRpbnNcbiAgICAgICAgaWYgKHR5cGVvZiBjb25zb2xlLnByb2ZpbGVFbmQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBub2RlL25vLXVuc3VwcG9ydGVkLWZlYXR1cmVzL25vZGUtYnVpbHRpbnNcbiAgICAgICAgICBjb25zb2xlLnByb2ZpbGVFbmQuYXBwbHkoY29uc29sZSwgX3RvQ29uc3VtYWJsZUFycmF5KGxhYmVsZWRBcmdzKCkpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIExvZ1R5cGUuY2xlYXI6XG4gICAgICAgIGlmICghZGVidWcgJiYgbG9nbGV2ZWwgPiBMb2dMZXZlbC5sb2cpIHJldHVybjsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vZGUvbm8tdW5zdXBwb3J0ZWQtZmVhdHVyZXMvbm9kZS1idWlsdGluc1xuXG4gICAgICAgIGlmICh0eXBlb2YgY29uc29sZS5jbGVhciA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vZGUvbm8tdW5zdXBwb3J0ZWQtZmVhdHVyZXMvbm9kZS1idWlsdGluc1xuICAgICAgICAgIGNvbnNvbGUuY2xlYXIoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIExvZ1R5cGUuc3RhdHVzOlxuICAgICAgICBpZiAoIWRlYnVnICYmIGxvZ2xldmVsID4gTG9nTGV2ZWwuaW5mbykgcmV0dXJuO1xuXG4gICAgICAgIGlmICh0eXBlb2YgY29uc29sZS5zdGF0dXMgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgY29uc29sZS5zdGF0dXMoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS5zdGF0dXMuYXBwbHkoY29uc29sZSwgX3RvQ29uc3VtYWJsZUFycmF5KGxhYmVsZWRBcmdzKCkpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKGFyZ3MubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICBjb25zb2xlLmluZm8uYXBwbHkoY29uc29sZSwgX3RvQ29uc3VtYWJsZUFycmF5KGxhYmVsZWRBcmdzKCkpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBicmVhaztcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5leHBlY3RlZCBMb2dUeXBlIFwiLmNvbmNhdCh0eXBlKSk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBsb2dnZXI7XG59O1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL25vZGVfbW9kdWxlcy93ZWJwYWNrL2xpYi9sb2dnaW5nL3J1bnRpbWUuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vbm9kZV9tb2R1bGVzL3dlYnBhY2svbGliL2xvZ2dpbmcvcnVudGltZS5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoZnVuY3Rpb24oX191bnVzZWRfd2VicGFja19tb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuLypcblx0TUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcblx0QXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cblxuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuXG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG52YXIgU3luY0JhaWxIb29rID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgdGFwYWJsZS9saWIvU3luY0JhaWxIb29rICovIFwiLi9jbGllbnQtc3JjL21vZHVsZXMvbG9nZ2VyL1N5bmNCYWlsSG9va0Zha2UuanNcIik7XG5cbnZhciBfcmVxdWlyZSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vTG9nZ2VyICovIFwiLi9ub2RlX21vZHVsZXMvd2VicGFjay9saWIvbG9nZ2luZy9Mb2dnZXIuanNcIiksXG4gICAgTG9nZ2VyID0gX3JlcXVpcmUuTG9nZ2VyO1xuXG52YXIgY3JlYXRlQ29uc29sZUxvZ2dlciA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vY3JlYXRlQ29uc29sZUxvZ2dlciAqLyBcIi4vbm9kZV9tb2R1bGVzL3dlYnBhY2svbGliL2xvZ2dpbmcvY3JlYXRlQ29uc29sZUxvZ2dlci5qc1wiKTtcbi8qKiBAdHlwZSB7Y3JlYXRlQ29uc29sZUxvZ2dlci5Mb2dnZXJPcHRpb25zfSAqL1xuXG5cbnZhciBjdXJyZW50RGVmYXVsdExvZ2dlck9wdGlvbnMgPSB7XG4gIGxldmVsOiBcImluZm9cIixcbiAgZGVidWc6IGZhbHNlLFxuICBjb25zb2xlOiBjb25zb2xlXG59O1xudmFyIGN1cnJlbnREZWZhdWx0TG9nZ2VyID0gY3JlYXRlQ29uc29sZUxvZ2dlcihjdXJyZW50RGVmYXVsdExvZ2dlck9wdGlvbnMpO1xuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBuYW1lIG9mIHRoZSBsb2dnZXJcbiAqIEByZXR1cm5zIHtMb2dnZXJ9IGEgbG9nZ2VyXG4gKi9cblxuZXhwb3J0cy5nZXRMb2dnZXIgPSBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gbmV3IExvZ2dlcihmdW5jdGlvbiAodHlwZSwgYXJncykge1xuICAgIGlmIChleHBvcnRzLmhvb2tzLmxvZy5jYWxsKG5hbWUsIHR5cGUsIGFyZ3MpID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGN1cnJlbnREZWZhdWx0TG9nZ2VyKG5hbWUsIHR5cGUsIGFyZ3MpO1xuICAgIH1cbiAgfSwgZnVuY3Rpb24gKGNoaWxkTmFtZSkge1xuICAgIHJldHVybiBleHBvcnRzLmdldExvZ2dlcihcIlwiLmNvbmNhdChuYW1lLCBcIi9cIikuY29uY2F0KGNoaWxkTmFtZSkpO1xuICB9KTtcbn07XG4vKipcbiAqIEBwYXJhbSB7Y3JlYXRlQ29uc29sZUxvZ2dlci5Mb2dnZXJPcHRpb25zfSBvcHRpb25zIG5ldyBvcHRpb25zLCBtZXJnZSB3aXRoIG9sZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuXG5cbmV4cG9ydHMuY29uZmlndXJlRGVmYXVsdExvZ2dlciA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gIF9leHRlbmRzKGN1cnJlbnREZWZhdWx0TG9nZ2VyT3B0aW9ucywgb3B0aW9ucyk7XG5cbiAgY3VycmVudERlZmF1bHRMb2dnZXIgPSBjcmVhdGVDb25zb2xlTG9nZ2VyKGN1cnJlbnREZWZhdWx0TG9nZ2VyT3B0aW9ucyk7XG59O1xuXG5leHBvcnRzLmhvb2tzID0ge1xuICBsb2c6IG5ldyBTeW5jQmFpbEhvb2soW1wib3JpZ2luXCIsIFwidHlwZVwiLCBcImFyZ3NcIl0pXG59O1xuXG4vKioqLyB9KVxuXG4vKioqKioqLyBcdH0pO1xuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKiovIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHR2YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG4vKioqKioqLyBcdFxuLyoqKioqKi8gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuLyoqKioqKi8gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG4vKioqKioqLyBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4vKioqKioqLyBcdFx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG4vKioqKioqLyBcdFx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG4vKioqKioqLyBcdFx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4vKioqKioqLyBcdFx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG4vKioqKioqLyBcdFx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG4vKioqKioqLyBcdFx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuLyoqKioqKi8gXHRcdFx0ZXhwb3J0czoge31cbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi8gXHRcbi8qKioqKiovIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbi8qKioqKiovIFx0XHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcbi8qKioqKiovIFx0XG4vKioqKioqLyBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbi8qKioqKiovIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4vKioqKioqLyBcdH1cbi8qKioqKiovIFx0XG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKioqKi8gXHQvKiB3ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMgKi9cbi8qKioqKiovIFx0IWZ1bmN0aW9uKCkge1xuLyoqKioqKi8gXHRcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbi8qKioqKiovIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBkZWZpbml0aW9uKSB7XG4vKioqKioqLyBcdFx0XHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG4vKioqKioqLyBcdFx0XHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuLyoqKioqKi8gXHRcdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG4vKioqKioqLyBcdFx0XHRcdH1cbi8qKioqKiovIFx0XHRcdH1cbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi8gXHR9KCk7XG4vKioqKioqLyBcdFxuLyoqKioqKi8gXHQvKiB3ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kICovXG4vKioqKioqLyBcdCFmdW5jdGlvbigpIHtcbi8qKioqKiovIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmosIHByb3ApIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApOyB9XG4vKioqKioqLyBcdH0oKTtcbi8qKioqKiovIFx0XG4vKioqKioqLyBcdC8qIHdlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QgKi9cbi8qKioqKiovIFx0IWZ1bmN0aW9uKCkge1xuLyoqKioqKi8gXHRcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbi8qKioqKiovIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4vKioqKioqLyBcdFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbi8qKioqKiovIFx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4vKioqKioqLyBcdFx0XHR9XG4vKioqKioqLyBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyoqKioqKi8gXHRcdH07XG4vKioqKioqLyBcdH0oKTtcbi8qKioqKiovIFx0XG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xudmFyIF9fd2VicGFja19leHBvcnRzX18gPSB7fTtcbi8vIFRoaXMgZW50cnkgbmVlZCB0byBiZSB3cmFwcGVkIGluIGFuIElJRkUgYmVjYXVzZSBpdCBuZWVkIHRvIGJlIGlzb2xhdGVkIGFnYWluc3Qgb3RoZXIgbW9kdWxlcyBpbiB0aGUgY2h1bmsuXG4hZnVuY3Rpb24oKSB7XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL2NsaWVudC1zcmMvbW9kdWxlcy9sb2dnZXIvaW5kZXguanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xuLyogaGFybW9ueSBleHBvcnQgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIHtcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJkZWZhdWx0XCI6IGZ1bmN0aW9uKCkgeyByZXR1cm4gLyogcmVleHBvcnQgZGVmYXVsdCBleHBvcnQgZnJvbSBuYW1lZCBtb2R1bGUgKi8gd2VicGFja19saWJfbG9nZ2luZ19ydW50aW1lX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX187IH1cbi8qIGhhcm1vbnkgZXhwb3J0ICovIH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIHdlYnBhY2tfbGliX2xvZ2dpbmdfcnVudGltZV9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgd2VicGFjay9saWIvbG9nZ2luZy9ydW50aW1lLmpzICovIFwiLi9ub2RlX21vZHVsZXMvd2VicGFjay9saWIvbG9nZ2luZy9ydW50aW1lLmpzXCIpO1xuXG59KCk7XG52YXIgX193ZWJwYWNrX2V4cG9ydF90YXJnZXRfXyA9IGV4cG9ydHM7XG5mb3IodmFyIGkgaW4gX193ZWJwYWNrX2V4cG9ydHNfXykgX193ZWJwYWNrX2V4cG9ydF90YXJnZXRfX1tpXSA9IF9fd2VicGFja19leHBvcnRzX19baV07XG5pZihfX3dlYnBhY2tfZXhwb3J0c19fLl9fZXNNb2R1bGUpIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShfX3dlYnBhY2tfZXhwb3J0X3RhcmdldF9fLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qKioqKiovIH0pKClcbjsiLCIvKioqKioqLyAoZnVuY3Rpb24oKSB7IC8vIHdlYnBhY2tCb290c3RyYXBcbi8qKioqKiovIFx0XCJ1c2Ugc3RyaWN0XCI7XG4vKioqKioqLyBcdHZhciBfX3dlYnBhY2tfbW9kdWxlc19fID0gKHtcblxuLyoqKi8gXCIuL25vZGVfbW9kdWxlcy9zdHJpcC1hbnNpL2luZGV4LmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9ub2RlX21vZHVsZXMvc3RyaXAtYW5zaS9pbmRleC5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKGZ1bmN0aW9uKF9fdW51c2VkX3dlYnBhY2tfX193ZWJwYWNrX21vZHVsZV9fLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcbi8qIGhhcm1vbnkgZXhwb3J0ICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCB7XG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiZGVmYXVsdFwiOiBmdW5jdGlvbigpIHsgcmV0dXJuIC8qIGJpbmRpbmcgKi8gc3RyaXBBbnNpOyB9XG4vKiBoYXJtb255IGV4cG9ydCAqLyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBhbnNpX3JlZ2V4X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBhbnNpLXJlZ2V4ICovIFwiLi9ub2RlX21vZHVsZXMvc3RyaXAtYW5zaS9ub2RlX21vZHVsZXMvYW5zaS1yZWdleC9pbmRleC5qc1wiKTtcblxuZnVuY3Rpb24gc3RyaXBBbnNpKHN0cmluZykge1xuICBpZiAodHlwZW9mIHN0cmluZyAhPT0gJ3N0cmluZycpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRXhwZWN0ZWQgYSBgc3RyaW5nYCwgZ290IGBcIi5jb25jYXQodHlwZW9mIHN0cmluZywgXCJgXCIpKTtcbiAgfVxuXG4gIHJldHVybiBzdHJpbmcucmVwbGFjZSgoMCxhbnNpX3JlZ2V4X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bXCJkZWZhdWx0XCJdKSgpLCAnJyk7XG59XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vbm9kZV9tb2R1bGVzL3N0cmlwLWFuc2kvbm9kZV9tb2R1bGVzL2Fuc2ktcmVnZXgvaW5kZXguanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL25vZGVfbW9kdWxlcy9zdHJpcC1hbnNpL25vZGVfbW9kdWxlcy9hbnNpLXJlZ2V4L2luZGV4LmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoZnVuY3Rpb24oX191bnVzZWRfd2VicGFja19fX3dlYnBhY2tfbW9kdWxlX18sIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xuLyogaGFybW9ueSBleHBvcnQgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIHtcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJkZWZhdWx0XCI6IGZ1bmN0aW9uKCkgeyByZXR1cm4gLyogYmluZGluZyAqLyBhbnNpUmVnZXg7IH1cbi8qIGhhcm1vbnkgZXhwb3J0ICovIH0pO1xuZnVuY3Rpb24gYW5zaVJlZ2V4KCkge1xuICB2YXIgX3JlZiA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge30sXG4gICAgICBfcmVmJG9ubHlGaXJzdCA9IF9yZWYub25seUZpcnN0LFxuICAgICAgb25seUZpcnN0ID0gX3JlZiRvbmx5Rmlyc3QgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZiRvbmx5Rmlyc3Q7XG5cbiAgdmFyIHBhdHRlcm4gPSBbXCJbXFxcXHUwMDFCXFxcXHUwMDlCXVtbXFxcXF0oKSM7P10qKD86KD86KD86KD86O1stYS16QS1aXFxcXGRcXFxcLyMmLjo9PyVAfl9dKykqfFthLXpBLVpcXFxcZF0rKD86O1stYS16QS1aXFxcXGRcXFxcLyMmLjo9PyVAfl9dKikqKT9cXFxcdTAwMDcpXCIsICcoPzooPzpcXFxcZHsxLDR9KD86O1xcXFxkezAsNH0pKik/W1xcXFxkQS1QUi1UWmNmLW50cXJ5PT48fl0pKSddLmpvaW4oJ3wnKTtcbiAgcmV0dXJuIG5ldyBSZWdFeHAocGF0dGVybiwgb25seUZpcnN0ID8gdW5kZWZpbmVkIDogJ2cnKTtcbn1cblxuLyoqKi8gfSlcblxuLyoqKioqKi8gXHR9KTtcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqKioqLyBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0dmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuLyoqKioqKi8gXHRcbi8qKioqKiovIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbi8qKioqKiovIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuLyoqKioqKi8gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuLyoqKioqKi8gXHRcdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuLyoqKioqKi8gXHRcdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuLyoqKioqKi8gXHRcdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuLyoqKioqKi8gXHRcdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuLyoqKioqKi8gXHRcdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuLyoqKioqKi8gXHRcdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcbi8qKioqKiovIFx0XHRcdGV4cG9ydHM6IHt9XG4vKioqKioqLyBcdFx0fTtcbi8qKioqKiovIFx0XG4vKioqKioqLyBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4vKioqKioqLyBcdFx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG4vKioqKioqLyBcdFxuLyoqKioqKi8gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4vKioqKioqLyBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuLyoqKioqKi8gXHR9XG4vKioqKioqLyBcdFxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKiovIFx0Lyogd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzICovXG4vKioqKioqLyBcdCFmdW5jdGlvbigpIHtcbi8qKioqKiovIFx0XHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG4vKioqKioqLyBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgZGVmaW5pdGlvbikge1xuLyoqKioqKi8gXHRcdFx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuLyoqKioqKi8gXHRcdFx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcbi8qKioqKiovIFx0XHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuLyoqKioqKi8gXHRcdFx0XHR9XG4vKioqKioqLyBcdFx0XHR9XG4vKioqKioqLyBcdFx0fTtcbi8qKioqKiovIFx0fSgpO1xuLyoqKioqKi8gXHRcbi8qKioqKiovIFx0Lyogd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCAqL1xuLyoqKioqKi8gXHQhZnVuY3Rpb24oKSB7XG4vKioqKioqLyBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqLCBwcm9wKSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKTsgfVxuLyoqKioqKi8gXHR9KCk7XG4vKioqKioqLyBcdFxuLyoqKioqKi8gXHQvKiB3ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0ICovXG4vKioqKioqLyBcdCFmdW5jdGlvbigpIHtcbi8qKioqKiovIFx0XHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4vKioqKioqLyBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuLyoqKioqKi8gXHRcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4vKioqKioqLyBcdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuLyoqKioqKi8gXHRcdFx0fVxuLyoqKioqKi8gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi8gXHR9KCk7XG4vKioqKioqLyBcdFxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fID0ge307XG4vLyBUaGlzIGVudHJ5IG5lZWQgdG8gYmUgd3JhcHBlZCBpbiBhbiBJSUZFIGJlY2F1c2UgaXQgbmVlZCB0byBiZSBpc29sYXRlZCBhZ2FpbnN0IG90aGVyIG1vZHVsZXMgaW4gdGhlIGNodW5rLlxuIWZ1bmN0aW9uKCkge1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vY2xpZW50LXNyYy9tb2R1bGVzL3N0cmlwLWFuc2kvaW5kZXguanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBzdHJpcF9hbnNpX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBzdHJpcC1hbnNpICovIFwiLi9ub2RlX21vZHVsZXMvc3RyaXAtYW5zaS9pbmRleC5qc1wiKTtcblxuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyBfX3dlYnBhY2tfZXhwb3J0c19fW1wiZGVmYXVsdFwiXSA9IChzdHJpcF9hbnNpX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bXCJkZWZhdWx0XCJdKTtcbn0oKTtcbnZhciBfX3dlYnBhY2tfZXhwb3J0X3RhcmdldF9fID0gZXhwb3J0cztcbmZvcih2YXIgaSBpbiBfX3dlYnBhY2tfZXhwb3J0c19fKSBfX3dlYnBhY2tfZXhwb3J0X3RhcmdldF9fW2ldID0gX193ZWJwYWNrX2V4cG9ydHNfX1tpXTtcbmlmKF9fd2VicGFja19leHBvcnRzX18uX19lc01vZHVsZSkgT2JqZWN0LmRlZmluZVByb3BlcnR5KF9fd2VicGFja19leHBvcnRfdGFyZ2V0X18sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyoqKioqKi8gfSkoKVxuOyIsIi8vIFRoZSBlcnJvciBvdmVybGF5IGlzIGluc3BpcmVkIChhbmQgbW9zdGx5IGNvcGllZCkgZnJvbSBDcmVhdGUgUmVhY3QgQXBwIChodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2tpbmN1YmF0b3IvY3JlYXRlLXJlYWN0LWFwcClcbi8vIFRoZXksIGluIHR1cm4sIGdvdCBpbnNwaXJlZCBieSB3ZWJwYWNrLWhvdC1taWRkbGV3YXJlIChodHRwczovL2dpdGh1Yi5jb20vZ2xlbmphbWluL3dlYnBhY2staG90LW1pZGRsZXdhcmUpLlxuaW1wb3J0IGFuc2lIVE1MIGZyb20gXCJhbnNpLWh0bWwtY29tbXVuaXR5XCI7XG5pbXBvcnQgeyBlbmNvZGUgfSBmcm9tIFwiaHRtbC1lbnRpdGllc1wiO1xudmFyIGNvbG9ycyA9IHtcbiAgcmVzZXQ6IFtcInRyYW5zcGFyZW50XCIsIFwidHJhbnNwYXJlbnRcIl0sXG4gIGJsYWNrOiBcIjE4MTgxOFwiLFxuICByZWQ6IFwiRTM2MDQ5XCIsXG4gIGdyZWVuOiBcIkIzQ0I3NFwiLFxuICB5ZWxsb3c6IFwiRkZEMDgwXCIsXG4gIGJsdWU6IFwiN0NBRkMyXCIsXG4gIG1hZ2VudGE6IFwiN0ZBQ0NBXCIsXG4gIGN5YW46IFwiQzNDMkVGXCIsXG4gIGxpZ2h0Z3JleTogXCJFQkU3RTNcIixcbiAgZGFya2dyZXk6IFwiNkQ3ODkxXCJcbn07XG4vKiogQHR5cGUge0hUTUxJRnJhbWVFbGVtZW50IHwgbnVsbCB8IHVuZGVmaW5lZH0gKi9cblxudmFyIGlmcmFtZUNvbnRhaW5lckVsZW1lbnQ7XG4vKiogQHR5cGUge0hUTUxEaXZFbGVtZW50IHwgbnVsbCB8IHVuZGVmaW5lZH0gKi9cblxudmFyIGNvbnRhaW5lckVsZW1lbnQ7XG4vKiogQHR5cGUge0FycmF5PChlbGVtZW50OiBIVE1MRGl2RWxlbWVudCkgPT4gdm9pZD59ICovXG5cbnZhciBvbkxvYWRRdWV1ZSA9IFtdO1xuYW5zaUhUTUwuc2V0Q29sb3JzKGNvbG9ycyk7XG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbnRhaW5lcigpIHtcbiAgaWZyYW1lQ29udGFpbmVyRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpZnJhbWVcIik7XG4gIGlmcmFtZUNvbnRhaW5lckVsZW1lbnQuaWQgPSBcIndlYnBhY2stZGV2LXNlcnZlci1jbGllbnQtb3ZlcmxheVwiO1xuICBpZnJhbWVDb250YWluZXJFbGVtZW50LnNyYyA9IFwiYWJvdXQ6YmxhbmtcIjtcbiAgaWZyYW1lQ29udGFpbmVyRWxlbWVudC5zdHlsZS5wb3NpdGlvbiA9IFwiZml4ZWRcIjtcbiAgaWZyYW1lQ29udGFpbmVyRWxlbWVudC5zdHlsZS5sZWZ0ID0gMDtcbiAgaWZyYW1lQ29udGFpbmVyRWxlbWVudC5zdHlsZS50b3AgPSAwO1xuICBpZnJhbWVDb250YWluZXJFbGVtZW50LnN0eWxlLnJpZ2h0ID0gMDtcbiAgaWZyYW1lQ29udGFpbmVyRWxlbWVudC5zdHlsZS5ib3R0b20gPSAwO1xuICBpZnJhbWVDb250YWluZXJFbGVtZW50LnN0eWxlLndpZHRoID0gXCIxMDB2d1wiO1xuICBpZnJhbWVDb250YWluZXJFbGVtZW50LnN0eWxlLmhlaWdodCA9IFwiMTAwdmhcIjtcbiAgaWZyYW1lQ29udGFpbmVyRWxlbWVudC5zdHlsZS5ib3JkZXIgPSBcIm5vbmVcIjtcbiAgaWZyYW1lQ29udGFpbmVyRWxlbWVudC5zdHlsZS56SW5kZXggPSA5OTk5OTk5OTk5O1xuXG4gIGlmcmFtZUNvbnRhaW5lckVsZW1lbnQub25sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgIGNvbnRhaW5lckVsZW1lbnQgPVxuICAgIC8qKiBAdHlwZSB7RG9jdW1lbnR9ICovXG5cbiAgICAvKiogQHR5cGUge0hUTUxJRnJhbWVFbGVtZW50fSAqL1xuICAgIGlmcmFtZUNvbnRhaW5lckVsZW1lbnQuY29udGVudERvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgY29udGFpbmVyRWxlbWVudC5pZCA9IFwid2VicGFjay1kZXYtc2VydmVyLWNsaWVudC1vdmVybGF5LWRpdlwiO1xuICAgIGNvbnRhaW5lckVsZW1lbnQuc3R5bGUucG9zaXRpb24gPSBcImZpeGVkXCI7XG4gICAgY29udGFpbmVyRWxlbWVudC5zdHlsZS5ib3hTaXppbmcgPSBcImJvcmRlci1ib3hcIjtcbiAgICBjb250YWluZXJFbGVtZW50LnN0eWxlLmxlZnQgPSAwO1xuICAgIGNvbnRhaW5lckVsZW1lbnQuc3R5bGUudG9wID0gMDtcbiAgICBjb250YWluZXJFbGVtZW50LnN0eWxlLnJpZ2h0ID0gMDtcbiAgICBjb250YWluZXJFbGVtZW50LnN0eWxlLmJvdHRvbSA9IDA7XG4gICAgY29udGFpbmVyRWxlbWVudC5zdHlsZS53aWR0aCA9IFwiMTAwdndcIjtcbiAgICBjb250YWluZXJFbGVtZW50LnN0eWxlLmhlaWdodCA9IFwiMTAwdmhcIjtcbiAgICBjb250YWluZXJFbGVtZW50LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwicmdiYSgwLCAwLCAwLCAwLjg1KVwiO1xuICAgIGNvbnRhaW5lckVsZW1lbnQuc3R5bGUuY29sb3IgPSBcIiNFOEU4RThcIjtcbiAgICBjb250YWluZXJFbGVtZW50LnN0eWxlLmZvbnRGYW1pbHkgPSBcIk1lbmxvLCBDb25zb2xhcywgbW9ub3NwYWNlXCI7XG4gICAgY29udGFpbmVyRWxlbWVudC5zdHlsZS5mb250U2l6ZSA9IFwibGFyZ2VcIjtcbiAgICBjb250YWluZXJFbGVtZW50LnN0eWxlLnBhZGRpbmcgPSBcIjJyZW1cIjtcbiAgICBjb250YWluZXJFbGVtZW50LnN0eWxlLmxpbmVIZWlnaHQgPSBcIjEuMlwiO1xuICAgIGNvbnRhaW5lckVsZW1lbnQuc3R5bGUud2hpdGVTcGFjZSA9IFwicHJlLXdyYXBcIjtcbiAgICBjb250YWluZXJFbGVtZW50LnN0eWxlLm92ZXJmbG93ID0gXCJhdXRvXCI7XG4gICAgdmFyIGhlYWRlckVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcbiAgICBoZWFkZXJFbGVtZW50LmlubmVyVGV4dCA9IFwiQ29tcGlsZWQgd2l0aCBwcm9ibGVtczpcIjtcbiAgICB2YXIgY2xvc2VCdXR0b25FbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcbiAgICBjbG9zZUJ1dHRvbkVsZW1lbnQuaW5uZXJUZXh0ID0gXCJYXCI7XG4gICAgY2xvc2VCdXR0b25FbGVtZW50LnN0eWxlLmJhY2tncm91bmQgPSBcInRyYW5zcGFyZW50XCI7XG4gICAgY2xvc2VCdXR0b25FbGVtZW50LnN0eWxlLmJvcmRlciA9IFwibm9uZVwiO1xuICAgIGNsb3NlQnV0dG9uRWxlbWVudC5zdHlsZS5mb250U2l6ZSA9IFwiMjBweFwiO1xuICAgIGNsb3NlQnV0dG9uRWxlbWVudC5zdHlsZS5mb250V2VpZ2h0ID0gXCJib2xkXCI7XG4gICAgY2xvc2VCdXR0b25FbGVtZW50LnN0eWxlLmNvbG9yID0gXCJ3aGl0ZVwiO1xuICAgIGNsb3NlQnV0dG9uRWxlbWVudC5zdHlsZS5jdXJzb3IgPSBcInBvaW50ZXJcIjtcbiAgICBjbG9zZUJ1dHRvbkVsZW1lbnQuc3R5bGUuY3NzRmxvYXQgPSBcInJpZ2h0XCI7IC8vIEB0cy1pZ25vcmVcblxuICAgIGNsb3NlQnV0dG9uRWxlbWVudC5zdHlsZS5zdHlsZUZsb2F0ID0gXCJyaWdodFwiO1xuICAgIGNsb3NlQnV0dG9uRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgaGlkZSgpO1xuICAgIH0pO1xuICAgIGNvbnRhaW5lckVsZW1lbnQuYXBwZW5kQ2hpbGQoaGVhZGVyRWxlbWVudCk7XG4gICAgY29udGFpbmVyRWxlbWVudC5hcHBlbmRDaGlsZChjbG9zZUJ1dHRvbkVsZW1lbnQpO1xuICAgIGNvbnRhaW5lckVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJyXCIpKTtcbiAgICBjb250YWluZXJFbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJiclwiKSk7XG4gICAgLyoqIEB0eXBlIHtEb2N1bWVudH0gKi9cblxuICAgIC8qKiBAdHlwZSB7SFRNTElGcmFtZUVsZW1lbnR9ICovXG4gICAgaWZyYW1lQ29udGFpbmVyRWxlbWVudC5jb250ZW50RG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChjb250YWluZXJFbGVtZW50KTtcbiAgICBvbkxvYWRRdWV1ZS5mb3JFYWNoKGZ1bmN0aW9uIChvbkxvYWQpIHtcbiAgICAgIG9uTG9hZChcbiAgICAgIC8qKiBAdHlwZSB7SFRNTERpdkVsZW1lbnR9ICovXG4gICAgICBjb250YWluZXJFbGVtZW50KTtcbiAgICB9KTtcbiAgICBvbkxvYWRRdWV1ZSA9IFtdO1xuICAgIC8qKiBAdHlwZSB7SFRNTElGcmFtZUVsZW1lbnR9ICovXG5cbiAgICBpZnJhbWVDb250YWluZXJFbGVtZW50Lm9ubG9hZCA9IG51bGw7XG4gIH07XG5cbiAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChpZnJhbWVDb250YWluZXJFbGVtZW50KTtcbn1cbi8qKlxuICogQHBhcmFtIHsoZWxlbWVudDogSFRNTERpdkVsZW1lbnQpID0+IHZvaWR9IGNhbGxiYWNrXG4gKi9cblxuXG5mdW5jdGlvbiBlbnN1cmVPdmVybGF5RXhpc3RzKGNhbGxiYWNrKSB7XG4gIGlmIChjb250YWluZXJFbGVtZW50KSB7XG4gICAgLy8gRXZlcnl0aGluZyBpcyByZWFkeSwgY2FsbCB0aGUgY2FsbGJhY2sgcmlnaHQgYXdheS5cbiAgICBjYWxsYmFjayhjb250YWluZXJFbGVtZW50KTtcbiAgICByZXR1cm47XG4gIH1cblxuICBvbkxvYWRRdWV1ZS5wdXNoKGNhbGxiYWNrKTtcblxuICBpZiAoaWZyYW1lQ29udGFpbmVyRWxlbWVudCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNyZWF0ZUNvbnRhaW5lcigpO1xufSAvLyBTdWNjZXNzZnVsIGNvbXBpbGF0aW9uLlxuXG5cbmZ1bmN0aW9uIGhpZGUoKSB7XG4gIGlmICghaWZyYW1lQ29udGFpbmVyRWxlbWVudCkge1xuICAgIHJldHVybjtcbiAgfSAvLyBDbGVhbiB1cCBhbmQgcmVzZXQgaW50ZXJuYWwgc3RhdGUuXG5cblxuICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGlmcmFtZUNvbnRhaW5lckVsZW1lbnQpO1xuICBpZnJhbWVDb250YWluZXJFbGVtZW50ID0gbnVsbDtcbiAgY29udGFpbmVyRWxlbWVudCA9IG51bGw7XG59XG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlXG4gKiBAcGFyYW0ge3N0cmluZyAgfCB7IGZpbGU/OiBzdHJpbmcsIG1vZHVsZU5hbWU/OiBzdHJpbmcsIGxvYz86IHN0cmluZywgbWVzc2FnZT86IHN0cmluZyB9fSBpdGVtXG4gKiBAcmV0dXJucyB7eyBoZWFkZXI6IHN0cmluZywgYm9keTogc3RyaW5nIH19XG4gKi9cblxuXG5mdW5jdGlvbiBmb3JtYXRQcm9ibGVtKHR5cGUsIGl0ZW0pIHtcbiAgdmFyIGhlYWRlciA9IHR5cGUgPT09IFwid2FybmluZ1wiID8gXCJXQVJOSU5HXCIgOiBcIkVSUk9SXCI7XG4gIHZhciBib2R5ID0gXCJcIjtcblxuICBpZiAodHlwZW9mIGl0ZW0gPT09IFwic3RyaW5nXCIpIHtcbiAgICBib2R5ICs9IGl0ZW07XG4gIH0gZWxzZSB7XG4gICAgdmFyIGZpbGUgPSBpdGVtLmZpbGUgfHwgXCJcIjsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5lc3RlZC10ZXJuYXJ5XG5cbiAgICB2YXIgbW9kdWxlTmFtZSA9IGl0ZW0ubW9kdWxlTmFtZSA/IGl0ZW0ubW9kdWxlTmFtZS5pbmRleE9mKFwiIVwiKSAhPT0gLTEgPyBcIlwiLmNvbmNhdChpdGVtLm1vZHVsZU5hbWUucmVwbGFjZSgvXihcXHN8XFxTKSohLywgXCJcIiksIFwiIChcIikuY29uY2F0KGl0ZW0ubW9kdWxlTmFtZSwgXCIpXCIpIDogXCJcIi5jb25jYXQoaXRlbS5tb2R1bGVOYW1lKSA6IFwiXCI7XG4gICAgdmFyIGxvYyA9IGl0ZW0ubG9jO1xuICAgIGhlYWRlciArPSBcIlwiLmNvbmNhdChtb2R1bGVOYW1lIHx8IGZpbGUgPyBcIiBpbiBcIi5jb25jYXQobW9kdWxlTmFtZSA/IFwiXCIuY29uY2F0KG1vZHVsZU5hbWUpLmNvbmNhdChmaWxlID8gXCIgKFwiLmNvbmNhdChmaWxlLCBcIilcIikgOiBcIlwiKSA6IGZpbGUpLmNvbmNhdChsb2MgPyBcIiBcIi5jb25jYXQobG9jKSA6IFwiXCIpIDogXCJcIik7XG4gICAgYm9keSArPSBpdGVtLm1lc3NhZ2UgfHwgXCJcIjtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgaGVhZGVyOiBoZWFkZXIsXG4gICAgYm9keTogYm9keVxuICB9O1xufSAvLyBDb21waWxhdGlvbiB3aXRoIGVycm9ycyAoZS5nLiBzeW50YXggZXJyb3Igb3IgbWlzc2luZyBtb2R1bGVzKS5cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdHlwZVxuICogQHBhcmFtIHtBcnJheTxzdHJpbmcgIHwgeyBmaWxlPzogc3RyaW5nLCBtb2R1bGVOYW1lPzogc3RyaW5nLCBsb2M/OiBzdHJpbmcsIG1lc3NhZ2U/OiBzdHJpbmcgfT59IG1lc3NhZ2VzXG4gKi9cblxuXG5mdW5jdGlvbiBzaG93KHR5cGUsIG1lc3NhZ2VzKSB7XG4gIGVuc3VyZU92ZXJsYXlFeGlzdHMoZnVuY3Rpb24gKCkge1xuICAgIG1lc3NhZ2VzLmZvckVhY2goZnVuY3Rpb24gKG1lc3NhZ2UpIHtcbiAgICAgIHZhciBlbnRyeUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgdmFyIHR5cGVFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG5cbiAgICAgIHZhciBfZm9ybWF0UHJvYmxlbSA9IGZvcm1hdFByb2JsZW0odHlwZSwgbWVzc2FnZSksXG4gICAgICAgICAgaGVhZGVyID0gX2Zvcm1hdFByb2JsZW0uaGVhZGVyLFxuICAgICAgICAgIGJvZHkgPSBfZm9ybWF0UHJvYmxlbS5ib2R5O1xuXG4gICAgICB0eXBlRWxlbWVudC5pbm5lclRleHQgPSBoZWFkZXI7XG4gICAgICB0eXBlRWxlbWVudC5zdHlsZS5jb2xvciA9IFwiI1wiLmNvbmNhdChjb2xvcnMucmVkKTsgLy8gTWFrZSBpdCBsb29rIHNpbWlsYXIgdG8gb3VyIHRlcm1pbmFsLlxuXG4gICAgICB2YXIgdGV4dCA9IGFuc2lIVE1MKGVuY29kZShib2R5KSk7XG4gICAgICB2YXIgbWVzc2FnZVRleHROb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgIG1lc3NhZ2VUZXh0Tm9kZS5pbm5lckhUTUwgPSB0ZXh0O1xuICAgICAgZW50cnlFbGVtZW50LmFwcGVuZENoaWxkKHR5cGVFbGVtZW50KTtcbiAgICAgIGVudHJ5RWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnJcIikpO1xuICAgICAgZW50cnlFbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJiclwiKSk7XG4gICAgICBlbnRyeUVsZW1lbnQuYXBwZW5kQ2hpbGQobWVzc2FnZVRleHROb2RlKTtcbiAgICAgIGVudHJ5RWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnJcIikpO1xuICAgICAgZW50cnlFbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJiclwiKSk7XG4gICAgICAvKiogQHR5cGUge0hUTUxEaXZFbGVtZW50fSAqL1xuXG4gICAgICBjb250YWluZXJFbGVtZW50LmFwcGVuZENoaWxkKGVudHJ5RWxlbWVudCk7XG4gICAgfSk7XG4gIH0pO1xufVxuXG5leHBvcnQgeyBmb3JtYXRQcm9ibGVtLCBzaG93LCBoaWRlIH07IiwiLyogZ2xvYmFsIF9fd2VicGFja19kZXZfc2VydmVyX2NsaWVudF9fICovXG5pbXBvcnQgV2ViU29ja2V0Q2xpZW50IGZyb20gXCIuL2NsaWVudHMvV2ViU29ja2V0Q2xpZW50LmpzXCI7XG5pbXBvcnQgeyBsb2cgfSBmcm9tIFwiLi91dGlscy9sb2cuanNcIjsgLy8gdGhpcyBXZWJzb2NrZXRDbGllbnQgaXMgaGVyZSBhcyBhIGRlZmF1bHQgZmFsbGJhY2ssIGluIGNhc2UgdGhlIGNsaWVudCBpcyBub3QgaW5qZWN0ZWRcblxuLyogZXNsaW50LWRpc2FibGUgY2FtZWxjYXNlICovXG5cbnZhciBDbGllbnQgPSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmVzdGVkLXRlcm5hcnlcbnR5cGVvZiBfX3dlYnBhY2tfZGV2X3NlcnZlcl9jbGllbnRfXyAhPT0gXCJ1bmRlZmluZWRcIiA/IHR5cGVvZiBfX3dlYnBhY2tfZGV2X3NlcnZlcl9jbGllbnRfXy5kZWZhdWx0ICE9PSBcInVuZGVmaW5lZFwiID8gX193ZWJwYWNrX2Rldl9zZXJ2ZXJfY2xpZW50X18uZGVmYXVsdCA6IF9fd2VicGFja19kZXZfc2VydmVyX2NsaWVudF9fIDogV2ViU29ja2V0Q2xpZW50O1xuLyogZXNsaW50LWVuYWJsZSBjYW1lbGNhc2UgKi9cblxudmFyIHJldHJpZXMgPSAwO1xudmFyIG1heFJldHJpZXMgPSAxMDtcbnZhciBjbGllbnQgPSBudWxsO1xuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsXG4gKiBAcGFyYW0ge3sgW2hhbmRsZXI6IHN0cmluZ106IChkYXRhPzogYW55LCBwYXJhbXM/OiBhbnkpID0+IGFueSB9fSBoYW5kbGVyc1xuICogQHBhcmFtIHtudW1iZXJ9IFtyZWNvbm5lY3RdXG4gKi9cblxudmFyIHNvY2tldCA9IGZ1bmN0aW9uIGluaXRTb2NrZXQodXJsLCBoYW5kbGVycywgcmVjb25uZWN0KSB7XG4gIGNsaWVudCA9IG5ldyBDbGllbnQodXJsKTtcbiAgY2xpZW50Lm9uT3BlbihmdW5jdGlvbiAoKSB7XG4gICAgcmV0cmllcyA9IDA7XG5cbiAgICBpZiAodHlwZW9mIHJlY29ubmVjdCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgbWF4UmV0cmllcyA9IHJlY29ubmVjdDtcbiAgICB9XG4gIH0pO1xuICBjbGllbnQub25DbG9zZShmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHJldHJpZXMgPT09IDApIHtcbiAgICAgIGhhbmRsZXJzLmNsb3NlKCk7XG4gICAgfSAvLyBUcnkgdG8gcmVjb25uZWN0LlxuXG5cbiAgICBjbGllbnQgPSBudWxsOyAvLyBBZnRlciAxMCByZXRyaWVzIHN0b3AgdHJ5aW5nLCB0byBwcmV2ZW50IGxvZ3NwYW0uXG5cbiAgICBpZiAocmV0cmllcyA8IG1heFJldHJpZXMpIHtcbiAgICAgIC8vIEV4cG9uZW50aWFsbHkgaW5jcmVhc2UgdGltZW91dCB0byByZWNvbm5lY3QuXG4gICAgICAvLyBSZXNwZWN0ZnVsbHkgY29waWVkIGZyb20gdGhlIHBhY2thZ2UgYGdvdGAuXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1wcm9wZXJ0aWVzXG4gICAgICB2YXIgcmV0cnlJbk1zID0gMTAwMCAqIE1hdGgucG93KDIsIHJldHJpZXMpICsgTWF0aC5yYW5kb20oKSAqIDEwMDtcbiAgICAgIHJldHJpZXMgKz0gMTtcbiAgICAgIGxvZy5pbmZvKFwiVHJ5aW5nIHRvIHJlY29ubmVjdC4uLlwiKTtcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBzb2NrZXQodXJsLCBoYW5kbGVycywgcmVjb25uZWN0KTtcbiAgICAgIH0sIHJldHJ5SW5Ncyk7XG4gICAgfVxuICB9KTtcbiAgY2xpZW50Lm9uTWVzc2FnZShcbiAgLyoqXG4gICAqIEBwYXJhbSB7YW55fSBkYXRhXG4gICAqL1xuICBmdW5jdGlvbiAoZGF0YSkge1xuICAgIHZhciBtZXNzYWdlID0gSlNPTi5wYXJzZShkYXRhKTtcblxuICAgIGlmIChoYW5kbGVyc1ttZXNzYWdlLnR5cGVdKSB7XG4gICAgICBoYW5kbGVyc1ttZXNzYWdlLnR5cGVdKG1lc3NhZ2UuZGF0YSwgbWVzc2FnZS5wYXJhbXMpO1xuICAgIH1cbiAgfSk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBzb2NrZXQ7IiwiLyoqXG4gKiBAcGFyYW0ge3sgcHJvdG9jb2w/OiBzdHJpbmcsIGF1dGg/OiBzdHJpbmcsIGhvc3RuYW1lPzogc3RyaW5nLCBwb3J0Pzogc3RyaW5nLCBwYXRobmFtZT86IHN0cmluZywgc2VhcmNoPzogc3RyaW5nLCBoYXNoPzogc3RyaW5nLCBzbGFzaGVzPzogYm9vbGVhbiB9fSBvYmpVUkxcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGZvcm1hdChvYmpVUkwpIHtcbiAgdmFyIHByb3RvY29sID0gb2JqVVJMLnByb3RvY29sIHx8IFwiXCI7XG5cbiAgaWYgKHByb3RvY29sICYmIHByb3RvY29sLnN1YnN0cigtMSkgIT09IFwiOlwiKSB7XG4gICAgcHJvdG9jb2wgKz0gXCI6XCI7XG4gIH1cblxuICB2YXIgYXV0aCA9IG9ialVSTC5hdXRoIHx8IFwiXCI7XG5cbiAgaWYgKGF1dGgpIHtcbiAgICBhdXRoID0gZW5jb2RlVVJJQ29tcG9uZW50KGF1dGgpO1xuICAgIGF1dGggPSBhdXRoLnJlcGxhY2UoLyUzQS9pLCBcIjpcIik7XG4gICAgYXV0aCArPSBcIkBcIjtcbiAgfVxuXG4gIHZhciBob3N0ID0gXCJcIjtcblxuICBpZiAob2JqVVJMLmhvc3RuYW1lKSB7XG4gICAgaG9zdCA9IGF1dGggKyAob2JqVVJMLmhvc3RuYW1lLmluZGV4T2YoXCI6XCIpID09PSAtMSA/IG9ialVSTC5ob3N0bmFtZSA6IFwiW1wiLmNvbmNhdChvYmpVUkwuaG9zdG5hbWUsIFwiXVwiKSk7XG5cbiAgICBpZiAob2JqVVJMLnBvcnQpIHtcbiAgICAgIGhvc3QgKz0gXCI6XCIuY29uY2F0KG9ialVSTC5wb3J0KTtcbiAgICB9XG4gIH1cblxuICB2YXIgcGF0aG5hbWUgPSBvYmpVUkwucGF0aG5hbWUgfHwgXCJcIjtcblxuICBpZiAob2JqVVJMLnNsYXNoZXMpIHtcbiAgICBob3N0ID0gXCIvL1wiLmNvbmNhdChob3N0IHx8IFwiXCIpO1xuXG4gICAgaWYgKHBhdGhuYW1lICYmIHBhdGhuYW1lLmNoYXJBdCgwKSAhPT0gXCIvXCIpIHtcbiAgICAgIHBhdGhuYW1lID0gXCIvXCIuY29uY2F0KHBhdGhuYW1lKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoIWhvc3QpIHtcbiAgICBob3N0ID0gXCJcIjtcbiAgfVxuXG4gIHZhciBzZWFyY2ggPSBvYmpVUkwuc2VhcmNoIHx8IFwiXCI7XG5cbiAgaWYgKHNlYXJjaCAmJiBzZWFyY2guY2hhckF0KDApICE9PSBcIj9cIikge1xuICAgIHNlYXJjaCA9IFwiP1wiLmNvbmNhdChzZWFyY2gpO1xuICB9XG5cbiAgdmFyIGhhc2ggPSBvYmpVUkwuaGFzaCB8fCBcIlwiO1xuXG4gIGlmIChoYXNoICYmIGhhc2guY2hhckF0KDApICE9PSBcIiNcIikge1xuICAgIGhhc2ggPSBcIiNcIi5jb25jYXQoaGFzaCk7XG4gIH1cblxuICBwYXRobmFtZSA9IHBhdGhuYW1lLnJlcGxhY2UoL1s/I10vZyxcbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBtYXRjaFxuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKi9cbiAgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChtYXRjaCk7XG4gIH0pO1xuICBzZWFyY2ggPSBzZWFyY2gucmVwbGFjZShcIiNcIiwgXCIlMjNcIik7XG4gIHJldHVybiBcIlwiLmNvbmNhdChwcm90b2NvbCkuY29uY2F0KGhvc3QpLmNvbmNhdChwYXRobmFtZSkuY29uY2F0KHNlYXJjaCkuY29uY2F0KGhhc2gpO1xufVxuLyoqXG4gKiBAcGFyYW0ge1VSTCAmIHsgZnJvbUN1cnJlbnRTY3JpcHQ/OiBib29sZWFuIH19IHBhcnNlZFVSTFxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuXG5cbmZ1bmN0aW9uIGNyZWF0ZVNvY2tldFVSTChwYXJzZWRVUkwpIHtcbiAgdmFyIGhvc3RuYW1lID0gcGFyc2VkVVJMLmhvc3RuYW1lOyAvLyBOb2RlLmpzIG1vZHVsZSBwYXJzZXMgaXQgYXMgYDo6YFxuICAvLyBgbmV3IFVSTCh1cmxTdHJpbmcsIFtiYXNlVVJMU3RyaW5nXSlgIHBhcnNlcyBpdCBhcyAnWzo6XSdcblxuICB2YXIgaXNJbkFkZHJBbnkgPSBob3N0bmFtZSA9PT0gXCIwLjAuMC4wXCIgfHwgaG9zdG5hbWUgPT09IFwiOjpcIiB8fCBob3N0bmFtZSA9PT0gXCJbOjpdXCI7IC8vIHdoeSBkbyB3ZSBuZWVkIHRoaXMgY2hlY2s/XG4gIC8vIGhvc3RuYW1lIG4vYSBmb3IgZmlsZSBwcm90b2NvbCAoZXhhbXBsZSwgd2hlbiB1c2luZyBlbGVjdHJvbiwgaW9uaWMpXG4gIC8vIHNlZTogaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2svd2VicGFjay1kZXYtc2VydmVyL3B1bGwvMzg0XG5cbiAgaWYgKGlzSW5BZGRyQW55ICYmIHNlbGYubG9jYXRpb24uaG9zdG5hbWUgJiYgc2VsZi5sb2NhdGlvbi5wcm90b2NvbC5pbmRleE9mKFwiaHR0cFwiKSA9PT0gMCkge1xuICAgIGhvc3RuYW1lID0gc2VsZi5sb2NhdGlvbi5ob3N0bmFtZTtcbiAgfVxuXG4gIHZhciBzb2NrZXRVUkxQcm90b2NvbCA9IHBhcnNlZFVSTC5wcm90b2NvbCB8fCBzZWxmLmxvY2F0aW9uLnByb3RvY29sOyAvLyBXaGVuIGh0dHBzIGlzIHVzZWQgaW4gdGhlIGFwcCwgc2VjdXJlIHdlYiBzb2NrZXRzIGFyZSBhbHdheXMgbmVjZXNzYXJ5IGJlY2F1c2UgdGhlIGJyb3dzZXIgZG9lc24ndCBhY2NlcHQgbm9uLXNlY3VyZSB3ZWIgc29ja2V0cy5cblxuICBpZiAoc29ja2V0VVJMUHJvdG9jb2wgPT09IFwiYXV0bzpcIiB8fCBob3N0bmFtZSAmJiBpc0luQWRkckFueSAmJiBzZWxmLmxvY2F0aW9uLnByb3RvY29sID09PSBcImh0dHBzOlwiKSB7XG4gICAgc29ja2V0VVJMUHJvdG9jb2wgPSBzZWxmLmxvY2F0aW9uLnByb3RvY29sO1xuICB9XG5cbiAgc29ja2V0VVJMUHJvdG9jb2wgPSBzb2NrZXRVUkxQcm90b2NvbC5yZXBsYWNlKC9eKD86aHR0cHwuKy1leHRlbnNpb258ZmlsZSkvaSwgXCJ3c1wiKTtcbiAgdmFyIHNvY2tldFVSTEF1dGggPSBcIlwiOyAvLyBgbmV3IFVSTCh1cmxTdHJpbmcsIFtiYXNlVVJMc3RyaW5nXSlgIGRvZXNuJ3QgaGF2ZSBgYXV0aGAgcHJvcGVydHlcbiAgLy8gUGFyc2UgYXV0aGVudGljYXRpb24gY3JlZGVudGlhbHMgaW4gY2FzZSB3ZSBuZWVkIHRoZW1cblxuICBpZiAocGFyc2VkVVJMLnVzZXJuYW1lKSB7XG4gICAgc29ja2V0VVJMQXV0aCA9IHBhcnNlZFVSTC51c2VybmFtZTsgLy8gU2luY2UgSFRUUCBiYXNpYyBhdXRoZW50aWNhdGlvbiBkb2VzIG5vdCBhbGxvdyBlbXB0eSB1c2VybmFtZSxcbiAgICAvLyB3ZSBvbmx5IGluY2x1ZGUgcGFzc3dvcmQgaWYgdGhlIHVzZXJuYW1lIGlzIG5vdCBlbXB0eS5cblxuICAgIGlmIChwYXJzZWRVUkwucGFzc3dvcmQpIHtcbiAgICAgIC8vIFJlc3VsdDogPHVzZXJuYW1lPjo8cGFzc3dvcmQ+XG4gICAgICBzb2NrZXRVUkxBdXRoID0gc29ja2V0VVJMQXV0aC5jb25jYXQoXCI6XCIsIHBhcnNlZFVSTC5wYXNzd29yZCk7XG4gICAgfVxuICB9IC8vIEluIGNhc2UgdGhlIGhvc3QgaXMgYSByYXcgSVB2NiBhZGRyZXNzLCBpdCBjYW4gYmUgZW5jbG9zZWQgaW5cbiAgLy8gdGhlIGJyYWNrZXRzIGFzIHRoZSBicmFja2V0cyBhcmUgbmVlZGVkIGluIHRoZSBmaW5hbCBVUkwgc3RyaW5nLlxuICAvLyBOZWVkIHRvIHJlbW92ZSB0aG9zZSBhcyB1cmwuZm9ybWF0IGJsaW5kbHkgYWRkcyBpdHMgb3duIHNldCBvZiBicmFja2V0c1xuICAvLyBpZiB0aGUgaG9zdCBzdHJpbmcgY29udGFpbnMgY29sb25zLiBUaGF0IHdvdWxkIGxlYWQgdG8gbm9uLXdvcmtpbmdcbiAgLy8gZG91YmxlIGJyYWNrZXRzIChlLmcuIFtbOjpdXSkgaG9zdFxuICAvL1xuICAvLyBBbGwgb2YgdGhlc2Ugd2ViIHNvY2tldCB1cmwgcGFyYW1zIGFyZSBvcHRpb25hbGx5IHBhc3NlZCBpbiB0aHJvdWdoIHJlc291cmNlUXVlcnksXG4gIC8vIHNvIHdlIG5lZWQgdG8gZmFsbCBiYWNrIHRvIHRoZSBkZWZhdWx0IGlmIHRoZXkgYXJlIG5vdCBwcm92aWRlZFxuXG5cbiAgdmFyIHNvY2tldFVSTEhvc3RuYW1lID0gKGhvc3RuYW1lIHx8IHNlbGYubG9jYXRpb24uaG9zdG5hbWUgfHwgXCJsb2NhbGhvc3RcIikucmVwbGFjZSgvXlxcWyguKilcXF0kLywgXCIkMVwiKTtcbiAgdmFyIHNvY2tldFVSTFBvcnQgPSBwYXJzZWRVUkwucG9ydDtcblxuICBpZiAoIXNvY2tldFVSTFBvcnQgfHwgc29ja2V0VVJMUG9ydCA9PT0gXCIwXCIpIHtcbiAgICBzb2NrZXRVUkxQb3J0ID0gc2VsZi5sb2NhdGlvbi5wb3J0O1xuICB9IC8vIElmIHBhdGggaXMgcHJvdmlkZWQgaXQnbGwgYmUgcGFzc2VkIGluIHZpYSB0aGUgcmVzb3VyY2VRdWVyeSBhcyBhXG4gIC8vIHF1ZXJ5IHBhcmFtIHNvIGl0IGhhcyB0byBiZSBwYXJzZWQgb3V0IG9mIHRoZSBxdWVyeXN0cmluZyBpbiBvcmRlciBmb3IgdGhlXG4gIC8vIGNsaWVudCB0byBvcGVuIHRoZSBzb2NrZXQgdG8gdGhlIGNvcnJlY3QgbG9jYXRpb24uXG5cblxuICB2YXIgc29ja2V0VVJMUGF0aG5hbWUgPSBcIi93c1wiO1xuXG4gIGlmIChwYXJzZWRVUkwucGF0aG5hbWUgJiYgIXBhcnNlZFVSTC5mcm9tQ3VycmVudFNjcmlwdCkge1xuICAgIHNvY2tldFVSTFBhdGhuYW1lID0gcGFyc2VkVVJMLnBhdGhuYW1lO1xuICB9XG5cbiAgcmV0dXJuIGZvcm1hdCh7XG4gICAgcHJvdG9jb2w6IHNvY2tldFVSTFByb3RvY29sLFxuICAgIGF1dGg6IHNvY2tldFVSTEF1dGgsXG4gICAgaG9zdG5hbWU6IHNvY2tldFVSTEhvc3RuYW1lLFxuICAgIHBvcnQ6IHNvY2tldFVSTFBvcnQsXG4gICAgcGF0aG5hbWU6IHNvY2tldFVSTFBhdGhuYW1lLFxuICAgIHNsYXNoZXM6IHRydWVcbiAgfSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVNvY2tldFVSTDsiLCIvKipcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGdldEN1cnJlbnRTY3JpcHRTb3VyY2UoKSB7XG4gIC8vIGBkb2N1bWVudC5jdXJyZW50U2NyaXB0YCBpcyB0aGUgbW9zdCBhY2N1cmF0ZSB3YXkgdG8gZmluZCB0aGUgY3VycmVudCBzY3JpcHQsXG4gIC8vIGJ1dCBpcyBub3Qgc3VwcG9ydGVkIGluIGFsbCBicm93c2Vycy5cbiAgaWYgKGRvY3VtZW50LmN1cnJlbnRTY3JpcHQpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuY3VycmVudFNjcmlwdC5nZXRBdHRyaWJ1dGUoXCJzcmNcIik7XG4gIH0gLy8gRmFsbGJhY2sgdG8gZ2V0dGluZyBhbGwgc2NyaXB0cyBydW5uaW5nIGluIHRoZSBkb2N1bWVudC5cblxuXG4gIHZhciBzY3JpcHRFbGVtZW50cyA9IGRvY3VtZW50LnNjcmlwdHMgfHwgW107XG4gIHZhciBzY3JpcHRFbGVtZW50c1dpdGhTcmMgPSBBcnJheS5wcm90b3R5cGUuZmlsdGVyLmNhbGwoc2NyaXB0RWxlbWVudHMsIGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgcmV0dXJuIGVsZW1lbnQuZ2V0QXR0cmlidXRlKFwic3JjXCIpO1xuICB9KTtcblxuICBpZiAoc2NyaXB0RWxlbWVudHNXaXRoU3JjLmxlbmd0aCA+IDApIHtcbiAgICB2YXIgY3VycmVudFNjcmlwdCA9IHNjcmlwdEVsZW1lbnRzV2l0aFNyY1tzY3JpcHRFbGVtZW50c1dpdGhTcmMubGVuZ3RoIC0gMV07XG4gICAgcmV0dXJuIGN1cnJlbnRTY3JpcHQuZ2V0QXR0cmlidXRlKFwic3JjXCIpO1xuICB9IC8vIEZhaWwgYXMgdGhlcmUgd2FzIG5vIHNjcmlwdCB0byB1c2UuXG5cblxuICB0aHJvdyBuZXcgRXJyb3IoXCJbd2VicGFjay1kZXYtc2VydmVyXSBGYWlsZWQgdG8gZ2V0IGN1cnJlbnQgc2NyaXB0IHNvdXJjZS5cIik7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGdldEN1cnJlbnRTY3JpcHRTb3VyY2U7IiwiaW1wb3J0IGxvZ2dlciBmcm9tIFwiLi4vbW9kdWxlcy9sb2dnZXIvaW5kZXguanNcIjtcbnZhciBuYW1lID0gXCJ3ZWJwYWNrLWRldi1zZXJ2ZXJcIjsgLy8gZGVmYXVsdCBsZXZlbCBpcyBzZXQgb24gdGhlIGNsaWVudCBzaWRlLCBzbyBpdCBkb2VzIG5vdCBuZWVkXG4vLyB0byBiZSBzZXQgYnkgdGhlIENMSSBvciBBUElcblxudmFyIGRlZmF1bHRMZXZlbCA9IFwiaW5mb1wiOyAvLyBvcHRpb25zIG5ldyBvcHRpb25zLCBtZXJnZSB3aXRoIG9sZCBvcHRpb25zXG5cbi8qKlxuICogQHBhcmFtIHtmYWxzZSB8IHRydWUgfCBcIm5vbmVcIiB8IFwiZXJyb3JcIiB8IFwid2FyblwiIHwgXCJpbmZvXCIgfCBcImxvZ1wiIHwgXCJ2ZXJib3NlXCJ9IGxldmVsXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuXG5mdW5jdGlvbiBzZXRMb2dMZXZlbChsZXZlbCkge1xuICBsb2dnZXIuY29uZmlndXJlRGVmYXVsdExvZ2dlcih7XG4gICAgbGV2ZWw6IGxldmVsXG4gIH0pO1xufVxuXG5zZXRMb2dMZXZlbChkZWZhdWx0TGV2ZWwpO1xudmFyIGxvZyA9IGxvZ2dlci5nZXRMb2dnZXIobmFtZSk7XG5leHBvcnQgeyBsb2csIHNldExvZ0xldmVsIH07IiwiaW1wb3J0IGdldEN1cnJlbnRTY3JpcHRTb3VyY2UgZnJvbSBcIi4vZ2V0Q3VycmVudFNjcmlwdFNvdXJjZS5qc1wiO1xuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVzb3VyY2VRdWVyeVxuICogQHJldHVybnMge3sgW2tleTogc3RyaW5nXTogc3RyaW5nIHwgYm9vbGVhbiB9fVxuICovXG5cbmZ1bmN0aW9uIHBhcnNlVVJMKHJlc291cmNlUXVlcnkpIHtcbiAgLyoqIEB0eXBlIHt7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9fSAqL1xuICB2YXIgb3B0aW9ucyA9IHt9O1xuXG4gIGlmICh0eXBlb2YgcmVzb3VyY2VRdWVyeSA9PT0gXCJzdHJpbmdcIiAmJiByZXNvdXJjZVF1ZXJ5ICE9PSBcIlwiKSB7XG4gICAgdmFyIHNlYXJjaFBhcmFtcyA9IHJlc291cmNlUXVlcnkuc3Vic3RyKDEpLnNwbGl0KFwiJlwiKTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VhcmNoUGFyYW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgcGFpciA9IHNlYXJjaFBhcmFtc1tpXS5zcGxpdChcIj1cIik7XG4gICAgICBvcHRpb25zW3BhaXJbMF1dID0gZGVjb2RlVVJJQ29tcG9uZW50KHBhaXJbMV0pO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBFbHNlLCBnZXQgdGhlIHVybCBmcm9tIHRoZSA8c2NyaXB0PiB0aGlzIGZpbGUgd2FzIGNhbGxlZCB3aXRoLlxuICAgIHZhciBzY3JpcHRTb3VyY2UgPSBnZXRDdXJyZW50U2NyaXB0U291cmNlKCk7XG4gICAgdmFyIHNjcmlwdFNvdXJjZVVSTDtcblxuICAgIHRyeSB7XG4gICAgICAvLyBUaGUgcGxhY2Vob2xkZXIgYGJhc2VVUkxgIHdpdGggYHdpbmRvdy5sb2NhdGlvbi5ocmVmYCxcbiAgICAgIC8vIGlzIHRvIGFsbG93IHBhcnNpbmcgb2YgcGF0aC1yZWxhdGl2ZSBvciBwcm90b2NvbC1yZWxhdGl2ZSBVUkxzLFxuICAgICAgLy8gYW5kIHdpbGwgaGF2ZSBubyBlZmZlY3QgaWYgYHNjcmlwdFNvdXJjZWAgaXMgYSBmdWxseSB2YWxpZCBVUkwuXG4gICAgICBzY3JpcHRTb3VyY2VVUkwgPSBuZXcgVVJMKHNjcmlwdFNvdXJjZSwgc2VsZi5sb2NhdGlvbi5ocmVmKTtcbiAgICB9IGNhdGNoIChlcnJvcikgey8vIFVSTCBwYXJzaW5nIGZhaWxlZCwgZG8gbm90aGluZy5cbiAgICAgIC8vIFdlIHdpbGwgc3RpbGwgcHJvY2VlZCB0byBzZWUgaWYgd2UgY2FuIHJlY292ZXIgdXNpbmcgYHJlc291cmNlUXVlcnlgXG4gICAgfVxuXG4gICAgaWYgKHNjcmlwdFNvdXJjZVVSTCkge1xuICAgICAgb3B0aW9ucyA9IHNjcmlwdFNvdXJjZVVSTDtcbiAgICAgIG9wdGlvbnMuZnJvbUN1cnJlbnRTY3JpcHQgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBvcHRpb25zO1xufVxuXG5leHBvcnQgZGVmYXVsdCBwYXJzZVVSTDsiLCJpbXBvcnQgaG90RW1pdHRlciBmcm9tIFwid2VicGFjay9ob3QvZW1pdHRlci5qc1wiO1xuaW1wb3J0IHsgbG9nIH0gZnJvbSBcIi4vbG9nLmpzXCI7XG4vKiogQHR5cGVkZWYge2ltcG9ydChcIi4uL2luZGV4XCIpLk9wdGlvbnN9IE9wdGlvbnNcbi8qKiBAdHlwZWRlZiB7aW1wb3J0KFwiLi4vaW5kZXhcIikuU3RhdHVzfSBTdGF0dXNcblxuLyoqXG4gKiBAcGFyYW0ge09wdGlvbnN9IG9wdGlvbnNcbiAqIEBwYXJhbSB7U3RhdHVzfSBzdGF0dXNcbiAqL1xuXG5mdW5jdGlvbiByZWxvYWRBcHAoX3JlZiwgc3RhdHVzKSB7XG4gIHZhciBob3QgPSBfcmVmLmhvdCxcbiAgICAgIGxpdmVSZWxvYWQgPSBfcmVmLmxpdmVSZWxvYWQ7XG5cbiAgaWYgKHN0YXR1cy5pc1VubG9hZGluZykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBjdXJyZW50SGFzaCA9IHN0YXR1cy5jdXJyZW50SGFzaCxcbiAgICAgIHByZXZpb3VzSGFzaCA9IHN0YXR1cy5wcmV2aW91c0hhc2g7XG4gIHZhciBpc0luaXRpYWwgPSBjdXJyZW50SGFzaC5pbmRleE9mKFxuICAvKiogQHR5cGUge3N0cmluZ30gKi9cbiAgcHJldmlvdXNIYXNoKSA+PSAwO1xuXG4gIGlmIChpc0luaXRpYWwpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgLyoqXG4gICAqIEBwYXJhbSB7V2luZG93fSByb290V2luZG93XG4gICAqIEBwYXJhbSB7bnVtYmVyfSBpbnRlcnZhbElkXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gYXBwbHlSZWxvYWQocm9vdFdpbmRvdywgaW50ZXJ2YWxJZCkge1xuICAgIGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWxJZCk7XG4gICAgbG9nLmluZm8oXCJBcHAgdXBkYXRlZC4gUmVsb2FkaW5nLi4uXCIpO1xuICAgIHJvb3RXaW5kb3cubG9jYXRpb24ucmVsb2FkKCk7XG4gIH1cblxuICB2YXIgc2VhcmNoID0gc2VsZi5sb2NhdGlvbi5zZWFyY2gudG9Mb3dlckNhc2UoKTtcbiAgdmFyIGFsbG93VG9Ib3QgPSBzZWFyY2guaW5kZXhPZihcIndlYnBhY2stZGV2LXNlcnZlci1ob3Q9ZmFsc2VcIikgPT09IC0xO1xuICB2YXIgYWxsb3dUb0xpdmVSZWxvYWQgPSBzZWFyY2guaW5kZXhPZihcIndlYnBhY2stZGV2LXNlcnZlci1saXZlLXJlbG9hZD1mYWxzZVwiKSA9PT0gLTE7XG5cbiAgaWYgKGhvdCAmJiBhbGxvd1RvSG90KSB7XG4gICAgbG9nLmluZm8oXCJBcHAgaG90IHVwZGF0ZS4uLlwiKTtcbiAgICBob3RFbWl0dGVyLmVtaXQoXCJ3ZWJwYWNrSG90VXBkYXRlXCIsIHN0YXR1cy5jdXJyZW50SGFzaCk7XG5cbiAgICBpZiAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgJiYgc2VsZi53aW5kb3cpIHtcbiAgICAgIC8vIGJyb2FkY2FzdCB1cGRhdGUgdG8gd2luZG93XG4gICAgICBzZWxmLnBvc3RNZXNzYWdlKFwid2VicGFja0hvdFVwZGF0ZVwiLmNvbmNhdChzdGF0dXMuY3VycmVudEhhc2gpLCBcIipcIik7XG4gICAgfVxuICB9IC8vIGFsbG93IHJlZnJlc2hpbmcgdGhlIHBhZ2Ugb25seSBpZiBsaXZlUmVsb2FkIGlzbid0IGRpc2FibGVkXG4gIGVsc2UgaWYgKGxpdmVSZWxvYWQgJiYgYWxsb3dUb0xpdmVSZWxvYWQpIHtcbiAgICB2YXIgcm9vdFdpbmRvdyA9IHNlbGY7IC8vIHVzZSBwYXJlbnQgd2luZG93IGZvciByZWxvYWQgKGluIGNhc2Ugd2UncmUgaW4gYW4gaWZyYW1lIHdpdGggbm8gdmFsaWQgc3JjKVxuXG4gICAgdmFyIGludGVydmFsSWQgPSBzZWxmLnNldEludGVydmFsKGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChyb290V2luZG93LmxvY2F0aW9uLnByb3RvY29sICE9PSBcImFib3V0OlwiKSB7XG4gICAgICAgIC8vIHJlbG9hZCBpbW1lZGlhdGVseSBpZiBwcm90b2NvbCBpcyB2YWxpZFxuICAgICAgICBhcHBseVJlbG9hZChyb290V2luZG93LCBpbnRlcnZhbElkKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJvb3RXaW5kb3cgPSByb290V2luZG93LnBhcmVudDtcblxuICAgICAgICBpZiAocm9vdFdpbmRvdy5wYXJlbnQgPT09IHJvb3RXaW5kb3cpIHtcbiAgICAgICAgICAvLyBpZiBwYXJlbnQgZXF1YWxzIGN1cnJlbnQgd2luZG93IHdlJ3ZlIHJlYWNoZWQgdGhlIHJvb3Qgd2hpY2ggd291bGQgY29udGludWUgZm9yZXZlciwgc28gdHJpZ2dlciBhIHJlbG9hZCBhbnl3YXlzXG4gICAgICAgICAgYXBwbHlSZWxvYWQocm9vdFdpbmRvdywgaW50ZXJ2YWxJZCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCByZWxvYWRBcHA7IiwiLyogZ2xvYmFsIF9fcmVzb3VyY2VRdWVyeSBXb3JrZXJHbG9iYWxTY29wZSAqL1xuLy8gU2VuZCBtZXNzYWdlcyB0byB0aGUgb3V0c2lkZSwgc28gcGx1Z2lucyBjYW4gY29uc3VtZSBpdC5cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdHlwZVxuICogQHBhcmFtIHthbnl9IFtkYXRhXVxuICovXG5mdW5jdGlvbiBzZW5kTXNnKHR5cGUsIGRhdGEpIHtcbiAgaWYgKHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiICYmICh0eXBlb2YgV29ya2VyR2xvYmFsU2NvcGUgPT09IFwidW5kZWZpbmVkXCIgfHwgIShzZWxmIGluc3RhbmNlb2YgV29ya2VyR2xvYmFsU2NvcGUpKSkge1xuICAgIHNlbGYucG9zdE1lc3NhZ2Uoe1xuICAgICAgdHlwZTogXCJ3ZWJwYWNrXCIuY29uY2F0KHR5cGUpLFxuICAgICAgZGF0YTogZGF0YVxuICAgIH0sIFwiKlwiKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBzZW5kTXNnOyIsInZhciBFdmVudEVtaXR0ZXIgPSByZXF1aXJlKFwiZXZlbnRzXCIpO1xubW9kdWxlLmV4cG9ydHMgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4iLCJ2YXIgbG9nTGV2ZWwgPSBcImluZm9cIjtcblxuZnVuY3Rpb24gZHVtbXkoKSB7fVxuXG5mdW5jdGlvbiBzaG91bGRMb2cobGV2ZWwpIHtcblx0dmFyIHNob3VsZExvZyA9XG5cdFx0KGxvZ0xldmVsID09PSBcImluZm9cIiAmJiBsZXZlbCA9PT0gXCJpbmZvXCIpIHx8XG5cdFx0KFtcImluZm9cIiwgXCJ3YXJuaW5nXCJdLmluZGV4T2YobG9nTGV2ZWwpID49IDAgJiYgbGV2ZWwgPT09IFwid2FybmluZ1wiKSB8fFxuXHRcdChbXCJpbmZvXCIsIFwid2FybmluZ1wiLCBcImVycm9yXCJdLmluZGV4T2YobG9nTGV2ZWwpID49IDAgJiYgbGV2ZWwgPT09IFwiZXJyb3JcIik7XG5cdHJldHVybiBzaG91bGRMb2c7XG59XG5cbmZ1bmN0aW9uIGxvZ0dyb3VwKGxvZ0ZuKSB7XG5cdHJldHVybiBmdW5jdGlvbiAobGV2ZWwsIG1zZykge1xuXHRcdGlmIChzaG91bGRMb2cobGV2ZWwpKSB7XG5cdFx0XHRsb2dGbihtc2cpO1xuXHRcdH1cblx0fTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGV2ZWwsIG1zZykge1xuXHRpZiAoc2hvdWxkTG9nKGxldmVsKSkge1xuXHRcdGlmIChsZXZlbCA9PT0gXCJpbmZvXCIpIHtcblx0XHRcdGNvbnNvbGUubG9nKG1zZyk7XG5cdFx0fSBlbHNlIGlmIChsZXZlbCA9PT0gXCJ3YXJuaW5nXCIpIHtcblx0XHRcdGNvbnNvbGUud2Fybihtc2cpO1xuXHRcdH0gZWxzZSBpZiAobGV2ZWwgPT09IFwiZXJyb3JcIikge1xuXHRcdFx0Y29uc29sZS5lcnJvcihtc2cpO1xuXHRcdH1cblx0fVxufTtcblxuLyogZXNsaW50LWRpc2FibGUgbm9kZS9uby11bnN1cHBvcnRlZC1mZWF0dXJlcy9ub2RlLWJ1aWx0aW5zICovXG52YXIgZ3JvdXAgPSBjb25zb2xlLmdyb3VwIHx8IGR1bW15O1xudmFyIGdyb3VwQ29sbGFwc2VkID0gY29uc29sZS5ncm91cENvbGxhcHNlZCB8fCBkdW1teTtcbnZhciBncm91cEVuZCA9IGNvbnNvbGUuZ3JvdXBFbmQgfHwgZHVtbXk7XG4vKiBlc2xpbnQtZW5hYmxlIG5vZGUvbm8tdW5zdXBwb3J0ZWQtZmVhdHVyZXMvbm9kZS1idWlsdGlucyAqL1xuXG5tb2R1bGUuZXhwb3J0cy5ncm91cCA9IGxvZ0dyb3VwKGdyb3VwKTtcblxubW9kdWxlLmV4cG9ydHMuZ3JvdXBDb2xsYXBzZWQgPSBsb2dHcm91cChncm91cENvbGxhcHNlZCk7XG5cbm1vZHVsZS5leHBvcnRzLmdyb3VwRW5kID0gbG9nR3JvdXAoZ3JvdXBFbmQpO1xuXG5tb2R1bGUuZXhwb3J0cy5zZXRMb2dMZXZlbCA9IGZ1bmN0aW9uIChsZXZlbCkge1xuXHRsb2dMZXZlbCA9IGxldmVsO1xufTtcblxubW9kdWxlLmV4cG9ydHMuZm9ybWF0RXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG5cdHZhciBtZXNzYWdlID0gZXJyLm1lc3NhZ2U7XG5cdHZhciBzdGFjayA9IGVyci5zdGFjaztcblx0aWYgKCFzdGFjaykge1xuXHRcdHJldHVybiBtZXNzYWdlO1xuXHR9IGVsc2UgaWYgKHN0YWNrLmluZGV4T2YobWVzc2FnZSkgPCAwKSB7XG5cdFx0cmV0dXJuIG1lc3NhZ2UgKyBcIlxcblwiICsgc3RhY2s7XG5cdH0gZWxzZSB7XG5cdFx0cmV0dXJuIHN0YWNrO1xuXHR9XG59O1xuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0bG9hZGVkOiBmYWxzZSxcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG5cdG1vZHVsZS5sb2FkZWQgPSB0cnVlO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuLy8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbl9fd2VicGFja19yZXF1aXJlX18ubSA9IF9fd2VicGFja19tb2R1bGVzX187XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0ZnVuY3Rpb24oKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG5cdFx0ZnVuY3Rpb24oKSB7IHJldHVybiBtb2R1bGU7IH07XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBkZWZpbml0aW9uKSB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18uaCA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gXCJkODUzMzJhNTNlMmFjNjkzNzI3MlwiOyB9IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5nID0gKGZ1bmN0aW9uKCkge1xuXHRpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnKSByZXR1cm4gZ2xvYmFsVGhpcztcblx0dHJ5IHtcblx0XHRyZXR1cm4gdGhpcyB8fCBuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdztcblx0fVxufSkoKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmhtZCA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuXHRtb2R1bGUgPSBPYmplY3QuY3JlYXRlKG1vZHVsZSk7XG5cdGlmICghbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgJ2V4cG9ydHMnLCB7XG5cdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRzZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdFUyBNb2R1bGVzIG1heSBub3QgYXNzaWduIG1vZHVsZS5leHBvcnRzIG9yIGV4cG9ydHMuKiwgVXNlIEVTTSBleHBvcnQgc3ludGF4LCBpbnN0ZWFkOiAnICsgbW9kdWxlLmlkKTtcblx0XHR9XG5cdH0pO1xuXHRyZXR1cm4gbW9kdWxlO1xufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmosIHByb3ApIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApOyB9IiwiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmIgPSBkb2N1bWVudC5iYXNlVVJJIHx8IHNlbGYubG9jYXRpb24uaHJlZjtcblxuLy8gb2JqZWN0IHRvIHN0b3JlIGxvYWRlZCBhbmQgbG9hZGluZyBjaHVua3Ncbi8vIHVuZGVmaW5lZCA9IGNodW5rIG5vdCBsb2FkZWQsIG51bGwgPSBjaHVuayBwcmVsb2FkZWQvcHJlZmV0Y2hlZFxuLy8gW3Jlc29sdmUsIHJlamVjdCwgUHJvbWlzZV0gPSBjaHVuayBsb2FkaW5nLCAwID0gY2h1bmsgbG9hZGVkXG52YXIgaW5zdGFsbGVkQ2h1bmtzID0ge1xuXHRcIm1haW5cIjogMFxufTtcblxuLy8gbm8gY2h1bmsgb24gZGVtYW5kIGxvYWRpbmdcblxuLy8gbm8gcHJlZmV0Y2hpbmdcblxuLy8gbm8gcHJlbG9hZGVkXG5cbi8vIG5vIEhNUlxuXG4vLyBubyBITVIgbWFuaWZlc3RcblxuLy8gbm8gb24gY2h1bmtzIGxvYWRlZFxuXG4vLyBubyBqc29ucCBmdW5jdGlvbiIsIi8qIGdsb2JhbCBfX3Jlc291cmNlUXVlcnksIF9fd2VicGFja19oYXNoX18gKi9cbi8vLyA8cmVmZXJlbmNlIHR5cGVzPVwid2VicGFjay9tb2R1bGVcIiAvPlxuaW1wb3J0IHdlYnBhY2tIb3RMb2cgZnJvbSBcIndlYnBhY2svaG90L2xvZy5qc1wiO1xuaW1wb3J0IHN0cmlwQW5zaSBmcm9tIFwiLi9tb2R1bGVzL3N0cmlwLWFuc2kvaW5kZXguanNcIjtcbmltcG9ydCBwYXJzZVVSTCBmcm9tIFwiLi91dGlscy9wYXJzZVVSTC5qc1wiO1xuaW1wb3J0IHNvY2tldCBmcm9tIFwiLi9zb2NrZXQuanNcIjtcbmltcG9ydCB7IGZvcm1hdFByb2JsZW0sIHNob3csIGhpZGUgfSBmcm9tIFwiLi9vdmVybGF5LmpzXCI7XG5pbXBvcnQgeyBsb2csIHNldExvZ0xldmVsIH0gZnJvbSBcIi4vdXRpbHMvbG9nLmpzXCI7XG5pbXBvcnQgc2VuZE1lc3NhZ2UgZnJvbSBcIi4vdXRpbHMvc2VuZE1lc3NhZ2UuanNcIjtcbmltcG9ydCByZWxvYWRBcHAgZnJvbSBcIi4vdXRpbHMvcmVsb2FkQXBwLmpzXCI7XG5pbXBvcnQgY3JlYXRlU29ja2V0VVJMIGZyb20gXCIuL3V0aWxzL2NyZWF0ZVNvY2tldFVSTC5qc1wiO1xuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBPcHRpb25zXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IGhvdFxuICogQHByb3BlcnR5IHtib29sZWFufSBsaXZlUmVsb2FkXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IHByb2dyZXNzXG4gKiBAcHJvcGVydHkge2Jvb2xlYW4gfCB7IHdhcm5pbmdzPzogYm9vbGVhbiwgZXJyb3JzPzogYm9vbGVhbiB9fSBvdmVybGF5XG4gKiBAcHJvcGVydHkge3N0cmluZ30gW2xvZ2dpbmddXG4gKiBAcHJvcGVydHkge251bWJlcn0gW3JlY29ubmVjdF1cbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IFN0YXR1c1xuICogQHByb3BlcnR5IHtib29sZWFufSBpc1VubG9hZGluZ1xuICogQHByb3BlcnR5IHtzdHJpbmd9IGN1cnJlbnRIYXNoXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW3ByZXZpb3VzSGFzaF1cbiAqL1xuXG4vKipcbiAqIEB0eXBlIHtTdGF0dXN9XG4gKi9cblxudmFyIHN0YXR1cyA9IHtcbiAgaXNVbmxvYWRpbmc6IGZhbHNlLFxuICAvLyBUT0RPIFdvcmthcm91bmQgZm9yIHdlYnBhY2sgdjQsIGBfX3dlYnBhY2tfaGFzaF9fYCBpcyBub3QgcmVwbGFjZWQgd2l0aG91dCBIb3RNb2R1bGVSZXBsYWNlbWVudFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2FtZWxjYXNlXG4gIGN1cnJlbnRIYXNoOiB0eXBlb2YgX193ZWJwYWNrX2hhc2hfXyAhPT0gXCJ1bmRlZmluZWRcIiA/IF9fd2VicGFja19oYXNoX18gOiBcIlwiXG59O1xuLyoqIEB0eXBlIHtPcHRpb25zfSAqL1xuXG52YXIgb3B0aW9ucyA9IHtcbiAgaG90OiBmYWxzZSxcbiAgbGl2ZVJlbG9hZDogZmFsc2UsXG4gIHByb2dyZXNzOiBmYWxzZSxcbiAgb3ZlcmxheTogZmFsc2Vcbn07XG52YXIgcGFyc2VkUmVzb3VyY2VRdWVyeSA9IHBhcnNlVVJMKF9fcmVzb3VyY2VRdWVyeSk7XG5cbmlmIChwYXJzZWRSZXNvdXJjZVF1ZXJ5LmhvdCA9PT0gXCJ0cnVlXCIpIHtcbiAgb3B0aW9ucy5ob3QgPSB0cnVlO1xuICBsb2cuaW5mbyhcIkhvdCBNb2R1bGUgUmVwbGFjZW1lbnQgZW5hYmxlZC5cIik7XG59XG5cbmlmIChwYXJzZWRSZXNvdXJjZVF1ZXJ5W1wibGl2ZS1yZWxvYWRcIl0gPT09IFwidHJ1ZVwiKSB7XG4gIG9wdGlvbnMubGl2ZVJlbG9hZCA9IHRydWU7XG4gIGxvZy5pbmZvKFwiTGl2ZSBSZWxvYWRpbmcgZW5hYmxlZC5cIik7XG59XG5cbmlmIChwYXJzZWRSZXNvdXJjZVF1ZXJ5LmxvZ2dpbmcpIHtcbiAgb3B0aW9ucy5sb2dnaW5nID0gcGFyc2VkUmVzb3VyY2VRdWVyeS5sb2dnaW5nO1xufVxuXG5pZiAodHlwZW9mIHBhcnNlZFJlc291cmNlUXVlcnkucmVjb25uZWN0ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gIG9wdGlvbnMucmVjb25uZWN0ID0gTnVtYmVyKHBhcnNlZFJlc291cmNlUXVlcnkucmVjb25uZWN0KTtcbn1cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IGxldmVsXG4gKi9cblxuXG5mdW5jdGlvbiBzZXRBbGxMb2dMZXZlbChsZXZlbCkge1xuICAvLyBUaGlzIGlzIG5lZWRlZCBiZWNhdXNlIHRoZSBITVIgbG9nZ2VyIG9wZXJhdGUgc2VwYXJhdGVseSBmcm9tIGRldiBzZXJ2ZXIgbG9nZ2VyXG4gIHdlYnBhY2tIb3RMb2cuc2V0TG9nTGV2ZWwobGV2ZWwgPT09IFwidmVyYm9zZVwiIHx8IGxldmVsID09PSBcImxvZ1wiID8gXCJpbmZvXCIgOiBsZXZlbCk7XG4gIHNldExvZ0xldmVsKGxldmVsKTtcbn1cblxuaWYgKG9wdGlvbnMubG9nZ2luZykge1xuICBzZXRBbGxMb2dMZXZlbChvcHRpb25zLmxvZ2dpbmcpO1xufVxuXG5zZWxmLmFkZEV2ZW50TGlzdGVuZXIoXCJiZWZvcmV1bmxvYWRcIiwgZnVuY3Rpb24gKCkge1xuICBzdGF0dXMuaXNVbmxvYWRpbmcgPSB0cnVlO1xufSk7XG52YXIgb25Tb2NrZXRNZXNzYWdlID0ge1xuICBob3Q6IGZ1bmN0aW9uIGhvdCgpIHtcbiAgICBpZiAocGFyc2VkUmVzb3VyY2VRdWVyeS5ob3QgPT09IFwiZmFsc2VcIikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIG9wdGlvbnMuaG90ID0gdHJ1ZTtcbiAgICBsb2cuaW5mbyhcIkhvdCBNb2R1bGUgUmVwbGFjZW1lbnQgZW5hYmxlZC5cIik7XG4gIH0sXG4gIGxpdmVSZWxvYWQ6IGZ1bmN0aW9uIGxpdmVSZWxvYWQoKSB7XG4gICAgaWYgKHBhcnNlZFJlc291cmNlUXVlcnlbXCJsaXZlLXJlbG9hZFwiXSA9PT0gXCJmYWxzZVwiKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgb3B0aW9ucy5saXZlUmVsb2FkID0gdHJ1ZTtcbiAgICBsb2cuaW5mbyhcIkxpdmUgUmVsb2FkaW5nIGVuYWJsZWQuXCIpO1xuICB9LFxuICBpbnZhbGlkOiBmdW5jdGlvbiBpbnZhbGlkKCkge1xuICAgIGxvZy5pbmZvKFwiQXBwIHVwZGF0ZWQuIFJlY29tcGlsaW5nLi4uXCIpOyAvLyBGaXhlcyAjMTA0Mi4gb3ZlcmxheSBkb2Vzbid0IGNsZWFyIGlmIGVycm9ycyBhcmUgZml4ZWQgYnV0IHdhcm5pbmdzIHJlbWFpbi5cblxuICAgIGlmIChvcHRpb25zLm92ZXJsYXkpIHtcbiAgICAgIGhpZGUoKTtcbiAgICB9XG5cbiAgICBzZW5kTWVzc2FnZShcIkludmFsaWRcIik7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBoYXNoXG4gICAqL1xuICBoYXNoOiBmdW5jdGlvbiBoYXNoKF9oYXNoKSB7XG4gICAgc3RhdHVzLnByZXZpb3VzSGFzaCA9IHN0YXR1cy5jdXJyZW50SGFzaDtcbiAgICBzdGF0dXMuY3VycmVudEhhc2ggPSBfaGFzaDtcbiAgfSxcbiAgbG9nZ2luZzogc2V0QWxsTG9nTGV2ZWwsXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gdmFsdWVcbiAgICovXG4gIG92ZXJsYXk6IGZ1bmN0aW9uIG92ZXJsYXkodmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIGRvY3VtZW50ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgb3B0aW9ucy5vdmVybGF5ID0gdmFsdWU7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZVxuICAgKi9cbiAgcmVjb25uZWN0OiBmdW5jdGlvbiByZWNvbm5lY3QodmFsdWUpIHtcbiAgICBpZiAocGFyc2VkUmVzb3VyY2VRdWVyeS5yZWNvbm5lY3QgPT09IFwiZmFsc2VcIikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIG9wdGlvbnMucmVjb25uZWN0ID0gdmFsdWU7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gdmFsdWVcbiAgICovXG4gIHByb2dyZXNzOiBmdW5jdGlvbiBwcm9ncmVzcyh2YWx1ZSkge1xuICAgIG9wdGlvbnMucHJvZ3Jlc3MgPSB2YWx1ZTtcbiAgfSxcblxuICAvKipcbiAgICogQHBhcmFtIHt7IHBsdWdpbk5hbWU/OiBzdHJpbmcsIHBlcmNlbnQ6IG51bWJlciwgbXNnOiBzdHJpbmcgfX0gZGF0YVxuICAgKi9cbiAgXCJwcm9ncmVzcy11cGRhdGVcIjogZnVuY3Rpb24gcHJvZ3Jlc3NVcGRhdGUoZGF0YSkge1xuICAgIGlmIChvcHRpb25zLnByb2dyZXNzKSB7XG4gICAgICBsb2cuaW5mbyhcIlwiLmNvbmNhdChkYXRhLnBsdWdpbk5hbWUgPyBcIltcIi5jb25jYXQoZGF0YS5wbHVnaW5OYW1lLCBcIl0gXCIpIDogXCJcIikuY29uY2F0KGRhdGEucGVyY2VudCwgXCIlIC0gXCIpLmNvbmNhdChkYXRhLm1zZywgXCIuXCIpKTtcbiAgICB9XG5cbiAgICBzZW5kTWVzc2FnZShcIlByb2dyZXNzXCIsIGRhdGEpO1xuICB9LFxuICBcInN0aWxsLW9rXCI6IGZ1bmN0aW9uIHN0aWxsT2soKSB7XG4gICAgbG9nLmluZm8oXCJOb3RoaW5nIGNoYW5nZWQuXCIpO1xuXG4gICAgaWYgKG9wdGlvbnMub3ZlcmxheSkge1xuICAgICAgaGlkZSgpO1xuICAgIH1cblxuICAgIHNlbmRNZXNzYWdlKFwiU3RpbGxPa1wiKTtcbiAgfSxcbiAgb2s6IGZ1bmN0aW9uIG9rKCkge1xuICAgIHNlbmRNZXNzYWdlKFwiT2tcIik7XG5cbiAgICBpZiAob3B0aW9ucy5vdmVybGF5KSB7XG4gICAgICBoaWRlKCk7XG4gICAgfVxuXG4gICAgcmVsb2FkQXBwKG9wdGlvbnMsIHN0YXR1cyk7XG4gIH0sXG4gIC8vIFRPRE86IHJlbW92ZSBpbiB2NSBpbiBmYXZvciBvZiAnc3RhdGljLWNoYW5nZWQnXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBmaWxlXG4gICAqL1xuICBcImNvbnRlbnQtY2hhbmdlZFwiOiBmdW5jdGlvbiBjb250ZW50Q2hhbmdlZChmaWxlKSB7XG4gICAgbG9nLmluZm8oXCJcIi5jb25jYXQoZmlsZSA/IFwiXFxcIlwiLmNvbmNhdChmaWxlLCBcIlxcXCJcIikgOiBcIkNvbnRlbnRcIiwgXCIgZnJvbSBzdGF0aWMgZGlyZWN0b3J5IHdhcyBjaGFuZ2VkLiBSZWxvYWRpbmcuLi5cIikpO1xuICAgIHNlbGYubG9jYXRpb24ucmVsb2FkKCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBmaWxlXG4gICAqL1xuICBcInN0YXRpYy1jaGFuZ2VkXCI6IGZ1bmN0aW9uIHN0YXRpY0NoYW5nZWQoZmlsZSkge1xuICAgIGxvZy5pbmZvKFwiXCIuY29uY2F0KGZpbGUgPyBcIlxcXCJcIi5jb25jYXQoZmlsZSwgXCJcXFwiXCIpIDogXCJDb250ZW50XCIsIFwiIGZyb20gc3RhdGljIGRpcmVjdG9yeSB3YXMgY2hhbmdlZC4gUmVsb2FkaW5nLi4uXCIpKTtcbiAgICBzZWxmLmxvY2F0aW9uLnJlbG9hZCgpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0Vycm9yW119IHdhcm5pbmdzXG4gICAqIEBwYXJhbSB7YW55fSBwYXJhbXNcbiAgICovXG4gIHdhcm5pbmdzOiBmdW5jdGlvbiB3YXJuaW5ncyhfd2FybmluZ3MsIHBhcmFtcykge1xuICAgIGxvZy53YXJuKFwiV2FybmluZ3Mgd2hpbGUgY29tcGlsaW5nLlwiKTtcblxuICAgIHZhciBwcmludGFibGVXYXJuaW5ncyA9IF93YXJuaW5ncy5tYXAoZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICB2YXIgX2Zvcm1hdFByb2JsZW0gPSBmb3JtYXRQcm9ibGVtKFwid2FybmluZ1wiLCBlcnJvciksXG4gICAgICAgICAgaGVhZGVyID0gX2Zvcm1hdFByb2JsZW0uaGVhZGVyLFxuICAgICAgICAgIGJvZHkgPSBfZm9ybWF0UHJvYmxlbS5ib2R5O1xuXG4gICAgICByZXR1cm4gXCJcIi5jb25jYXQoaGVhZGVyLCBcIlxcblwiKS5jb25jYXQoc3RyaXBBbnNpKGJvZHkpKTtcbiAgICB9KTtcblxuICAgIHNlbmRNZXNzYWdlKFwiV2FybmluZ3NcIiwgcHJpbnRhYmxlV2FybmluZ3MpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcmludGFibGVXYXJuaW5ncy5sZW5ndGg7IGkrKykge1xuICAgICAgbG9nLndhcm4ocHJpbnRhYmxlV2FybmluZ3NbaV0pO1xuICAgIH1cblxuICAgIHZhciBuZWVkU2hvd092ZXJsYXlGb3JXYXJuaW5ncyA9IHR5cGVvZiBvcHRpb25zLm92ZXJsYXkgPT09IFwiYm9vbGVhblwiID8gb3B0aW9ucy5vdmVybGF5IDogb3B0aW9ucy5vdmVybGF5ICYmIG9wdGlvbnMub3ZlcmxheS53YXJuaW5ncztcblxuICAgIGlmIChuZWVkU2hvd092ZXJsYXlGb3JXYXJuaW5ncykge1xuICAgICAgc2hvdyhcIndhcm5pbmdcIiwgX3dhcm5pbmdzKTtcbiAgICB9XG5cbiAgICBpZiAocGFyYW1zICYmIHBhcmFtcy5wcmV2ZW50UmVsb2FkaW5nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcmVsb2FkQXBwKG9wdGlvbnMsIHN0YXR1cyk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7RXJyb3JbXX0gZXJyb3JzXG4gICAqL1xuICBlcnJvcnM6IGZ1bmN0aW9uIGVycm9ycyhfZXJyb3JzKSB7XG4gICAgbG9nLmVycm9yKFwiRXJyb3JzIHdoaWxlIGNvbXBpbGluZy4gUmVsb2FkIHByZXZlbnRlZC5cIik7XG5cbiAgICB2YXIgcHJpbnRhYmxlRXJyb3JzID0gX2Vycm9ycy5tYXAoZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICB2YXIgX2Zvcm1hdFByb2JsZW0yID0gZm9ybWF0UHJvYmxlbShcImVycm9yXCIsIGVycm9yKSxcbiAgICAgICAgICBoZWFkZXIgPSBfZm9ybWF0UHJvYmxlbTIuaGVhZGVyLFxuICAgICAgICAgIGJvZHkgPSBfZm9ybWF0UHJvYmxlbTIuYm9keTtcblxuICAgICAgcmV0dXJuIFwiXCIuY29uY2F0KGhlYWRlciwgXCJcXG5cIikuY29uY2F0KHN0cmlwQW5zaShib2R5KSk7XG4gICAgfSk7XG5cbiAgICBzZW5kTWVzc2FnZShcIkVycm9yc1wiLCBwcmludGFibGVFcnJvcnMpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcmludGFibGVFcnJvcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxvZy5lcnJvcihwcmludGFibGVFcnJvcnNbaV0pO1xuICAgIH1cblxuICAgIHZhciBuZWVkU2hvd092ZXJsYXlGb3JFcnJvcnMgPSB0eXBlb2Ygb3B0aW9ucy5vdmVybGF5ID09PSBcImJvb2xlYW5cIiA/IG9wdGlvbnMub3ZlcmxheSA6IG9wdGlvbnMub3ZlcmxheSAmJiBvcHRpb25zLm92ZXJsYXkuZXJyb3JzO1xuXG4gICAgaWYgKG5lZWRTaG93T3ZlcmxheUZvckVycm9ycykge1xuICAgICAgc2hvdyhcImVycm9yXCIsIF9lcnJvcnMpO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogQHBhcmFtIHtFcnJvcn0gZXJyb3JcbiAgICovXG4gIGVycm9yOiBmdW5jdGlvbiBlcnJvcihfZXJyb3IpIHtcbiAgICBsb2cuZXJyb3IoX2Vycm9yKTtcbiAgfSxcbiAgY2xvc2U6IGZ1bmN0aW9uIGNsb3NlKCkge1xuICAgIGxvZy5pbmZvKFwiRGlzY29ubmVjdGVkIVwiKTtcblxuICAgIGlmIChvcHRpb25zLm92ZXJsYXkpIHtcbiAgICAgIGhpZGUoKTtcbiAgICB9XG5cbiAgICBzZW5kTWVzc2FnZShcIkNsb3NlXCIpO1xuICB9XG59O1xudmFyIHNvY2tldFVSTCA9IGNyZWF0ZVNvY2tldFVSTChwYXJzZWRSZXNvdXJjZVF1ZXJ5KTtcbnNvY2tldChzb2NrZXRVUkwsIG9uU29ja2V0TWVzc2FnZSwgb3B0aW9ucy5yZWNvbm5lY3QpOyIsImltcG9ydCBWdWUgZnJvbSAndnVlJztcbmltcG9ydCBBcHAgZnJvbSAnLi9BcHAudnVlJztcblxuVnVlLmNvbmZpZy5wcm9kdWN0aW9uVGlwID0gZmFsc2U7XG5cbm5ldyBWdWUoe1xuXHRyZW5kZXI6IChoKSA9PiBoKEFwcCksXG59KS4kbW91bnQoJyNhcHAnKTtcbiJdLCJuYW1lcyI6WyJyb290IiwiZmFjdG9yeSIsImV4cG9ydHMiLCJtb2R1bGUiLCJkZWZpbmUiLCJhbWQiLCJzZWxmIiwiYW5zaUhUTUwiLCJfcmVnQU5TSSIsIl9kZWZDb2xvcnMiLCJyZXNldCIsImJsYWNrIiwicmVkIiwiZ3JlZW4iLCJ5ZWxsb3ciLCJibHVlIiwibWFnZW50YSIsImN5YW4iLCJsaWdodGdyZXkiLCJkYXJrZ3JleSIsIl9zdHlsZXMiLCJfb3BlblRhZ3MiLCJfY2xvc2VUYWdzIiwidGV4dCIsInRlc3QiLCJhbnNpQ29kZXMiLCJyZXQiLCJyZXBsYWNlIiwibWF0Y2giLCJzZXEiLCJvdCIsImluZGV4T2YiLCJwb3AiLCJwdXNoIiwiY3QiLCJsIiwibGVuZ3RoIiwiQXJyYXkiLCJqb2luIiwiX3NldFRhZ3MiLCJjb2xvcnMiLCJjb2RlIiwib3JpQ29sb3IiLCJwYXJzZUludCIsInRvU3RyaW5nIiwiZm9yRWFjaCIsIm4iLCJzZXRDb2xvcnMiLCJFcnJvciIsIl9maW5hbENvbG9ycyIsImtleSIsImhleCIsImhhc093blByb3BlcnR5IiwiaXNBcnJheSIsInNvbWUiLCJoIiwiZGVmSGV4Q29sb3IiLCJzbGljZSIsInRhZ3MiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldCIsIm9wZW4iLCJjbG9zZSIsImRlZmluZVByb3BlcnRpZXMiLCIkYnVzIiwibmFtZSIsImNvbXBvbmVudHMiLCJVbmljb3JuTG9nIiwiZGF0YSIsImxpbmtzIiwiZ2l0aHViIiwibnBtIiwiVnVlIiwiVnVlQ29kZUhpZ2hsaWdodCIsIm1ldGhvZHMiLCJzaW1wbGVFeGFtcGxlIiwiYXJyYXkiLCJvYmplY3RBcnJheSIsImZvbyIsImJhciIsImFycmF5U3ByZWFkT3BlcmF0b3IiLCJpc0Rpc2FibGVkIiwiZGlzYWJsZWQiLCJwcm9wcyIsImlzTmFtZU9wdGlvbiIsInR5cGUiLCJkZWZhdWx0IiwibG9nUHJlZml4Iiwid2l0aE5hbWUiLCJleGFtcGxlTmFtZSIsImV4YW1wbGVOYW1lRGVmYXVsdCIsIm1hZ2ljYWwiLCJvYmplY3RzIiwibXVsdGlwbGVPYmplY3RzIiwib2JqZWN0U3ByZWFkT3BlcmF0b3IiLCJkZWZhdWx0U3R5bGVzIiwibWFnaWNhbFdvcmQiLCJtYWdpY2FsV29yZHMiLCJhcnJheUV4YW1wbGUiLCJzdHlsZXMiLCJ3b3JkRXhhbXBsZSIsImxvZ05vdGUiLCJsb2dUeXBlIiwidHlwZXMiLCJjaGVja1R5cGUiLCJBcnJheXNFeGFtcGxlIiwiRGlzYWJsZWRFeGFtcGxlIiwiTG9nUHJlZml4RXhhbXBsZSIsIk1hZ2ljYWxFeGFtcGxlIiwiTmF2IiwiT2JqZWN0c0V4YW1wbGVzIiwiU2ltcGxlRXhhbXBsZSIsIlN0eWxlc0V4YW1wbGUiLCJUZXh0RXhhbXBsZSIsIlR5cGVFeGFtcGxlIiwiY29weSIsIm9iamVjdCIsIm9wdGlvbnMiLCJib29sZWFuIiwicmFpbmJvd0xpbmVhckdyYWRpZW50IiwidGVzdEFycmF5cyIsInRlc3RPYmplY3RzIiwiZm9vVHdvIiwiYmFyVHdvIiwibW91bnRlZCIsInRlc3RpbmdMb2dzIiwidGVzdE9iajEiLCJ0ZXN0T2JqMiIsInRlc3RPYmozIiwiYmFyVGhyZWUiLCJmb29UaHJlZSIsIndlbGNvbWVMb2ciLCJpbnN0YWxsIiwiTWFnaWNhbCIsInByb3RvdHlwZSIsIiR1bmljb3JuTG9nIiwiJHVuaUxvZyIsInRoaXMiLCJsb2dPcHRpb25zIiwiVW5pY29ybkxvZ0NvcmUiLCJlcnJvcnMiLCJvdXRwdXQiLCJwbHVnaW5PcHRpb25zIiwibG9nIiwiaW5mbyIsImdvTnV0cyIsIm1hZ2ljYWxTdHlsZU5hbWVzIiwiZGVmYXVsdE9wdGlvbnMiLCJpbml0IiwidmFsdWVzIiwidmFsaWRhdGVPcHRpb25zIiwibWFwIiwidmFsdWUiLCJjYWxsIiwiYnVpbGQiLCJjb25zb2xlT3V0cHV0IiwiaW5jbHVkZXMiLCJsb2dnZXIiLCJOdW1iZXIiLCJpc0ludGVnZXIiLCJCb29sZWFuIiwicHJlZml4IiwicmVzdWx0cyIsImtleXMiLCJjb25zb2xlRGlyIiwiYXNzaWduIiwiY29uc29sZVRhYmxlIiwiY29uc29sZU1ldGhvZE5vdFN1cHBvcnRlZCIsImNvbnNvbGUiLCJtc2ciLCJsYWJlbCIsImNoYXJBdCIsInRvVXBwZXJDYXNlIiwic3R5bGUiLCJfX19DU1NfTE9BREVSX0VYUE9SVF9fXyIsImlkIiwiX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzBfX18iLCJVUkwiLCJfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8wX19fIiwiaSIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJsaXN0IiwiaXRlbSIsImNvbnRlbnQiLCJuZWVkTGF5ZXIiLCJjb25jYXQiLCJtb2R1bGVzIiwibWVkaWEiLCJkZWR1cGUiLCJzdXBwb3J0cyIsImxheWVyIiwidW5kZWZpbmVkIiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsImsiLCJfayIsInVybCIsIlN0cmluZyIsIl9fZXNNb2R1bGUiLCJoYXNoIiwibmVlZFF1b3RlcyIsImNzc01hcHBpbmciLCJidG9hIiwiYmFzZTY0IiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIiwic3RyaW5naWZ5Iiwic291cmNlTWFwcGluZyIsInNvdXJjZVVSTHMiLCJzb3VyY2VzIiwic291cmNlIiwic291cmNlUm9vdCIsIlJlZmxlY3RPd25LZXlzIiwiUiIsIlJlZmxlY3QiLCJSZWZsZWN0QXBwbHkiLCJhcHBseSIsInRhcmdldCIsInJlY2VpdmVyIiwiYXJncyIsIkZ1bmN0aW9uIiwib3duS2V5cyIsImdldE93blByb3BlcnR5U3ltYm9scyIsImdldE93blByb3BlcnR5TmFtZXMiLCJOdW1iZXJJc05hTiIsImlzTmFOIiwiRXZlbnRFbWl0dGVyIiwib25jZSIsImVtaXR0ZXIiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImVycm9yTGlzdGVuZXIiLCJlcnIiLCJyZW1vdmVMaXN0ZW5lciIsInJlc29sdmVyIiwiYXJndW1lbnRzIiwiZXZlbnRUYXJnZXRBZ25vc3RpY0FkZExpc3RlbmVyIiwiaGFuZGxlciIsImZsYWdzIiwib24iLCJhZGRFcnJvckhhbmRsZXJJZkV2ZW50RW1pdHRlciIsIl9ldmVudHMiLCJfZXZlbnRzQ291bnQiLCJfbWF4TGlzdGVuZXJzIiwiZGVmYXVsdE1heExpc3RlbmVycyIsImNoZWNrTGlzdGVuZXIiLCJsaXN0ZW5lciIsIlR5cGVFcnJvciIsIl9nZXRNYXhMaXN0ZW5lcnMiLCJ0aGF0IiwiX2FkZExpc3RlbmVyIiwicHJlcGVuZCIsIm0iLCJldmVudHMiLCJleGlzdGluZyIsIndhcm5pbmciLCJjcmVhdGUiLCJuZXdMaXN0ZW5lciIsImVtaXQiLCJ1bnNoaWZ0Iiwid2FybmVkIiwidyIsImNvdW50Iiwid2FybiIsIm9uY2VXcmFwcGVyIiwiZmlyZWQiLCJ3cmFwRm4iLCJfb25jZVdyYXAiLCJzdGF0ZSIsIndyYXBwZWQiLCJiaW5kIiwiX2xpc3RlbmVycyIsInVud3JhcCIsImV2bGlzdGVuZXIiLCJhcnIiLCJ1bndyYXBMaXN0ZW5lcnMiLCJhcnJheUNsb25lIiwibGlzdGVuZXJDb3VudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJ3cmFwTGlzdGVuZXIiLCJhcmciLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZW51bWVyYWJsZSIsInNldCIsIlJhbmdlRXJyb3IiLCJnZXRQcm90b3R5cGVPZiIsInNldE1heExpc3RlbmVycyIsImdldE1heExpc3RlbmVycyIsImRvRXJyb3IiLCJlcnJvciIsImVyIiwibWVzc2FnZSIsImNvbnRleHQiLCJsZW4iLCJsaXN0ZW5lcnMiLCJhZGRMaXN0ZW5lciIsInByZXBlbmRMaXN0ZW5lciIsInByZXBlbmRPbmNlTGlzdGVuZXIiLCJwb3NpdGlvbiIsIm9yaWdpbmFsTGlzdGVuZXIiLCJzaGlmdCIsImluZGV4Iiwic3BsaWNlT25lIiwib2ZmIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwicmF3TGlzdGVuZXJzIiwiZXZlbnROYW1lcyIsIl9fYXNzaWduIiwidCIsInMiLCJwIiwibmFtZWRfcmVmZXJlbmNlc18xIiwibnVtZXJpY191bmljb2RlX21hcF8xIiwic3Vycm9nYXRlX3BhaXJzXzEiLCJhbGxOYW1lZFJlZmVyZW5jZXMiLCJuYW1lZFJlZmVyZW5jZXMiLCJhbGwiLCJodG1sNSIsImVuY29kZVJlZ0V4cHMiLCJzcGVjaWFsQ2hhcnMiLCJub25Bc2NpaSIsIm5vbkFzY2lpUHJpbnRhYmxlIiwiZXh0ZW5zaXZlIiwiZGVmYXVsdEVuY29kZU9wdGlvbnMiLCJtb2RlIiwibGV2ZWwiLCJudW1lcmljIiwiZW5jb2RlIiwiX2EiLCJfYyIsIl9iIiwiX2QiLCJfZSIsImVuY29kZVJlZ0V4cCIsInJlZmVyZW5jZXMiLCJjaGFyYWN0ZXJzIiwiaXNIZXgiLCJsYXN0SW5kZXgiLCJleGVjIiwic3Vic3RyaW5nIiwicmVzdWx0XzEiLCJjb2RlXzEiLCJnZXRDb2RlUG9pbnQiLCJjaGFyQ29kZUF0IiwiZGVmYXVsdERlY29kZU9wdGlvbnMiLCJzY29wZSIsInN0cmljdCIsImF0dHJpYnV0ZSIsImJhc2VEZWNvZGVSZWdFeHBzIiwieG1sIiwiYm9keSIsImJvZHlSZWdFeHBzIiwiaHRtbDQiLCJkZWNvZGVSZWdFeHBzIiwiZnJvbUNoYXJDb2RlIiwib3V0T2ZCb3VuZHNDaGFyIiwiZGVmYXVsdERlY29kZUVudGl0eU9wdGlvbnMiLCJkZWNvZGVFbnRpdHkiLCJlbnRpdHkiLCJkZWNvZGVSZXN1bHRCeVJlZmVyZW5jZV8xIiwiZW50aXRpZXMiLCJkZWNvZGVTZWNvbmRDaGFyXzEiLCJkZWNvZGVDb2RlXzEiLCJzdWJzdHIiLCJmcm9tQ29kZVBvaW50IiwibnVtZXJpY1VuaWNvZGVNYXAiLCJkZWNvZGUiLCJkZWNvZGVSZWdFeHAiLCJpc0F0dHJpYnV0ZSIsImlzU3RyaWN0IiwicmVwbGFjZVJlc3VsdF8xIiwicmVwbGFjZU1hdGNoXzEiLCJyZXBsYWNlTGFzdEluZGV4XzEiLCJyZXBsYWNlSW5wdXRfMSIsImRlY29kZVJlc3VsdF8xIiwiZGVjb2RlRW50aXR5TGFzdENoYXJfMiIsImRlY29kZVJlc3VsdEJ5UmVmZXJlbmNlXzIiLCJkZWNvZGVTZWNvbmRDaGFyXzIiLCJkZWNvZGVDb2RlXzIiLCJfIiwiJCIsImZqIiwiYXN0cmFsQ29kZVBvaW50IiwiTWF0aCIsImZsb29yIiwiY29kZVBvaW50QXQiLCJpbnB1dCIsImhpZ2hTdXJyb2dhdGVGcm9tIiwiaGlnaFN1cnJvZ2F0ZVRvIiwibGFuZyIsInVuaXF1ZUlkIiwiVG9rZW4iLCJfc2VsZiIsIlByaXNtIiwibWFudWFsIiwiZGlzYWJsZVdvcmtlck1lc3NhZ2VIYW5kbGVyIiwidXRpbCIsInRva2VucyIsImFsaWFzIiwibyIsIm9iaklkIiwib2JqIiwiY2xvbmUiLCJ2aXNpdGVkIiwidiIsImxhbmd1YWdlcyIsImV4dGVuZCIsInJlZGVmIiwiaW5zZXJ0QmVmb3JlIiwiaW5zaWRlIiwiYmVmb3JlIiwiaW5zZXJ0IiwiZ3JhbW1hciIsIm5ld1Rva2VuIiwidG9rZW4iLCJERlMiLCJjYWxsYmFjayIsInBsdWdpbnMiLCJoaWdobGlnaHRBbGwiLCJhc3luYyIsImhpZ2hsaWdodEFsbFVuZGVyIiwiZG9jdW1lbnQiLCJjb250YWluZXIiLCJlbnYiLCJzZWxlY3RvciIsImhvb2tzIiwicnVuIiwiZWxlbWVudCIsImVsZW1lbnRzIiwicXVlcnlTZWxlY3RvckFsbCIsImhpZ2hsaWdodEVsZW1lbnQiLCJsYW5ndWFnZSIsInBhcmVudCIsImNsYXNzTmFtZSIsInBhcmVudE5vZGUiLCJ0b0xvd2VyQ2FzZSIsIm5vZGVOYW1lIiwidGV4dENvbnRlbnQiLCJXb3JrZXIiLCJ3b3JrZXIiLCJmaWxlbmFtZSIsIm9ubWVzc2FnZSIsImV2dCIsImhpZ2hsaWdodGVkQ29kZSIsImlubmVySFRNTCIsInBvc3RNZXNzYWdlIiwiaW1tZWRpYXRlQ2xvc2UiLCJoaWdobGlnaHQiLCJ0b2tlbml6ZSIsIm1hdGNoR3JhbW1hciIsInN0cmFyciIsInN0YXJ0UG9zIiwib25lc2hvdCIsInBhdHRlcm5zIiwiaiIsInBhdHRlcm4iLCJsb29rYmVoaW5kIiwiZ3JlZWR5IiwibG9va2JlaGluZExlbmd0aCIsImdsb2JhbCIsIlJlZ0V4cCIsInBvcyIsInN0ciIsImZyb20iLCJ0byIsImRlbE51bSIsImFmdGVyIiwic3BsaWNlIiwicmVzdCIsImFkZCIsImNhbGxiYWNrcyIsIm1hdGNoZWRTdHIiLCJ0YWciLCJjbGFzc2VzIiwiYXR0cmlidXRlcyIsImFsaWFzZXMiLCJwYXJzZSIsImciLCJtYXJrdXAiLCJjb21tZW50IiwicHJvbG9nIiwiZG9jdHlwZSIsImNkYXRhIiwicHVuY3R1YXRpb24iLCJuYW1lc3BhY2UiLCJodG1sIiwibWF0aG1sIiwic3ZnIiwiY3NzIiwiYXRydWxlIiwicnVsZSIsInN0cmluZyIsInByb3BlcnR5IiwiaW1wb3J0YW50IiwiZnVuY3Rpb24iLCJjbGlrZSIsImtleXdvcmQiLCJudW1iZXIiLCJvcGVyYXRvciIsImphdmFzY3JpcHQiLCJyZWdleCIsImNvbnN0YW50IiwiaW50ZXJwb2xhdGlvbiIsInNjcmlwdCIsImpzIiwiaGVhZCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiY3JlYXRlRWxlbWVudCIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiYXBwZW5kQ2hpbGQiLCJjcmVhdGVUZXh0Tm9kZSIsIkNvZGVIaWdobGlnaHQiLCJyZW5kZXIiLCJfdm0iLCJfaCIsIiRjcmVhdGVFbGVtZW50IiwicmVmIiwiY2xhc3MiLCJsYW5ndWFnZUNsYXNzIiwiX3QiLCJzdGF0aWNSZW5kZXJGbnMiLCJjb21wdXRlZCIsIiRyZWZzIiwiY29kZUJsb2NrIiwiYmVmb3JlVXBkYXRlIiwiJHNsb3RzIiwibmV3VGV4dCIsIiRlbCIsInF1ZXJ5U2VsZWN0b3IiLCJyZWdpc3RlckRpcmVjdGl2ZSIsImVsIiwiaW5zdGFsbGVkIiwiZGlyZWN0aXZlIiwicGx1Z2luIiwiR2xvYmFsVnVlIiwid2luZG93IiwidXNlIiwiY29tcG9uZW50IiwiX19maWxlIiwiX3dpdGhTdHJpcHBlZCIsInN0YXRpY0NsYXNzIiwiYXR0cnMiLCJocmVmIiwiX3YiLCJfbSIsInJvbGUiLCJjbGljayIsImRpcmVjdGl2ZXMiLCJyYXdOYW1lIiwiZXhwcmVzc2lvbiIsImNoZWNrZWQiLCJkb21Qcm9wcyIsIl9pIiwiY2hhbmdlIiwiJGV2ZW50IiwiJCRhIiwiJCRlbCIsIiQkYyIsIiQkaSIsIl9zIiwicGxhY2Vob2xkZXIiLCJjb21wb3NpbmciLCIkJHNlbGVjdGVkVmFsIiwiZmlsdGVyIiwic2VsZWN0ZWQiLCJfdmFsdWUiLCJtdWx0aXBsZSIsIl9sIiwid29yZCIsInZhbGlnbiIsInN0YXRpY1N0eWxlIiwiZGlzcGxheSIsInhtbG5zIiwiZmlsbCIsInZpZXdCb3giLCJkIiwid2lkdGgiLCJoZWlnaHQiLCJzcmMiLCJhbHQiLCJub3JtYWxpemVDb21wb25lbnQiLCJzY3JpcHRFeHBvcnRzIiwiZnVuY3Rpb25hbFRlbXBsYXRlIiwiaW5qZWN0U3R5bGVzIiwic2NvcGVJZCIsIm1vZHVsZUlkZW50aWZpZXIiLCJzaGFkb3dNb2RlIiwiaG9vayIsIl9jb21waWxlZCIsImZ1bmN0aW9uYWwiLCJfc2NvcGVJZCIsIiR2bm9kZSIsInNzckNvbnRleHQiLCJfX1ZVRV9TU1JfQ09OVEVYVF9fIiwiX3JlZ2lzdGVyZWRDb21wb25lbnRzIiwiX3NzclJlZ2lzdGVyIiwiJHJvb3QiLCIkb3B0aW9ucyIsInNoYWRvd1Jvb3QiLCJfaW5qZWN0U3R5bGVzIiwib3JpZ2luYWxSZW5kZXIiLCJiZWZvcmVDcmVhdGUiLCJsb2NhbHMiLCJoYXNEb2N1bWVudCIsIkRFQlVHIiwic3R5bGVzSW5Eb20iLCJzaW5nbGV0b25FbGVtZW50Iiwic2luZ2xldG9uQ291bnRlciIsImlzUHJvZHVjdGlvbiIsIm5vb3AiLCJzc3JJZEtleSIsImlzT2xkSUUiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJhZGRTdHlsZXNDbGllbnQiLCJwYXJlbnRJZCIsIl9pc1Byb2R1Y3Rpb24iLCJfb3B0aW9ucyIsImFkZFN0eWxlc1RvRG9tIiwibmV3TGlzdCIsIm1heVJlbW92ZSIsImRvbVN0eWxlIiwicmVmcyIsInBhcnRzIiwiYWRkU3R5bGUiLCJjcmVhdGVTdHlsZUVsZW1lbnQiLCJzdHlsZUVsZW1lbnQiLCJ1cGRhdGUiLCJyZW1vdmUiLCJyZW1vdmVDaGlsZCIsInN0eWxlSW5kZXgiLCJhcHBseVRvU2luZ2xldG9uVGFnIiwiYXBwbHlUb1RhZyIsIm5ld09iaiIsInNvdXJjZU1hcCIsInRleHRTdG9yZSIsInJlcGxhY2VUZXh0IiwicmVwbGFjZW1lbnQiLCJjc3NOb2RlIiwiY2hpbGROb2RlcyIsInNldEF0dHJpYnV0ZSIsInNzcklkIiwiZmlyc3RDaGlsZCIsImxpc3RUb1N0eWxlcyIsIm5ld1N0eWxlcyIsInBhcnQiLCJlbXB0eU9iamVjdCIsImZyZWV6ZSIsImlzVW5kZWYiLCJpc0RlZiIsImlzVHJ1ZSIsImlzUHJpbWl0aXZlIiwiaXNPYmplY3QiLCJfdG9TdHJpbmciLCJ0b1Jhd1R5cGUiLCJpc1BsYWluT2JqZWN0IiwiaXNSZWdFeHAiLCJpc1ZhbGlkQXJyYXlJbmRleCIsInZhbCIsInBhcnNlRmxvYXQiLCJpc0Zpbml0ZSIsImlzUHJvbWlzZSIsInRoZW4iLCJjYXRjaCIsInRvTnVtYmVyIiwibWFrZU1hcCIsImV4cGVjdHNMb3dlckNhc2UiLCJzcGxpdCIsImlzQnVpbHRJblRhZyIsImlzUmVzZXJ2ZWRBdHRyaWJ1dGUiLCJoYXNPd24iLCJjYWNoZWQiLCJmbiIsImNhY2hlIiwiY2FtZWxpemVSRSIsImNhbWVsaXplIiwiYyIsImNhcGl0YWxpemUiLCJoeXBoZW5hdGVSRSIsImh5cGhlbmF0ZSIsImN0eCIsImJvdW5kRm4iLCJhIiwiX2xlbmd0aCIsInRvQXJyYXkiLCJzdGFydCIsIl9mcm9tIiwidG9PYmplY3QiLCJyZXMiLCJiIiwibm8iLCJpZGVudGl0eSIsImxvb3NlRXF1YWwiLCJpc09iamVjdEEiLCJpc09iamVjdEIiLCJpc0FycmF5QSIsImlzQXJyYXlCIiwiZXZlcnkiLCJlIiwiRGF0ZSIsImdldFRpbWUiLCJrZXlzQSIsImtleXNCIiwibG9vc2VJbmRleE9mIiwiY2FsbGVkIiwiU1NSX0FUVFIiLCJBU1NFVF9UWVBFUyIsIkxJRkVDWUNMRV9IT09LUyIsImNvbmZpZyIsIm9wdGlvbk1lcmdlU3RyYXRlZ2llcyIsInNpbGVudCIsInByb2R1Y3Rpb25UaXAiLCJkZXZ0b29scyIsInBlcmZvcm1hbmNlIiwiZXJyb3JIYW5kbGVyIiwid2FybkhhbmRsZXIiLCJpZ25vcmVkRWxlbWVudHMiLCJrZXlDb2RlcyIsImlzUmVzZXJ2ZWRUYWciLCJpc1Jlc2VydmVkQXR0ciIsImlzVW5rbm93bkVsZW1lbnQiLCJnZXRUYWdOYW1lc3BhY2UiLCJwYXJzZVBsYXRmb3JtVGFnTmFtZSIsIm11c3RVc2VQcm9wIiwiX2xpZmVjeWNsZUhvb2tzIiwidW5pY29kZVJlZ0V4cCIsImlzUmVzZXJ2ZWQiLCJkZWYiLCJ3cml0YWJsZSIsImNvbmZpZ3VyYWJsZSIsImJhaWxSRSIsIl9pc1NlcnZlciIsImhhc1Byb3RvIiwiaW5Ccm93c2VyIiwiaW5XZWV4IiwiV1hFbnZpcm9ubWVudCIsInBsYXRmb3JtIiwid2VleFBsYXRmb3JtIiwiVUEiLCJpc0lFIiwiaXNJRTkiLCJpc0VkZ2UiLCJpc0lPUyIsImlzRkYiLCJuYXRpdmVXYXRjaCIsIndhdGNoIiwic3VwcG9ydHNQYXNzaXZlIiwib3B0cyIsImlzU2VydmVyUmVuZGVyaW5nIiwiVlVFX0VOViIsIl9fVlVFX0RFVlRPT0xTX0dMT0JBTF9IT09LX18iLCJpc05hdGl2ZSIsIkN0b3IiLCJfU2V0IiwiaGFzU3ltYm9sIiwiU3ltYm9sIiwiU2V0IiwiaGFzIiwiY2xlYXIiLCJ0aXAiLCJnZW5lcmF0ZUNvbXBvbmVudFRyYWNlIiwiZm9ybWF0Q29tcG9uZW50TmFtZSIsImhhc0NvbnNvbGUiLCJjbGFzc2lmeVJFIiwidm0iLCJ0cmFjZSIsImluY2x1ZGVGaWxlIiwiY2lkIiwiX2lzVnVlIiwiY29uc3RydWN0b3IiLCJfY29tcG9uZW50VGFnIiwiZmlsZSIsIiRwYXJlbnQiLCJ0cmVlIiwiY3VycmVudFJlY3Vyc2l2ZVNlcXVlbmNlIiwibGFzdCIsInJlcGVhdCIsInVpZCIsIkRlcCIsInN1YnMiLCJhZGRTdWIiLCJzdWIiLCJyZW1vdmVTdWIiLCJkZXBlbmQiLCJhZGREZXAiLCJub3RpZnkiLCJzb3J0IiwidGFyZ2V0U3RhY2siLCJwdXNoVGFyZ2V0IiwicG9wVGFyZ2V0IiwiVk5vZGUiLCJjaGlsZHJlbiIsImVsbSIsImNvbXBvbmVudE9wdGlvbnMiLCJhc3luY0ZhY3RvcnkiLCJucyIsImZuQ29udGV4dCIsImZuT3B0aW9ucyIsImZuU2NvcGVJZCIsImNvbXBvbmVudEluc3RhbmNlIiwicmF3IiwiaXNTdGF0aWMiLCJpc1Jvb3RJbnNlcnQiLCJpc0NvbW1lbnQiLCJpc0Nsb25lZCIsImlzT25jZSIsImFzeW5jTWV0YSIsImlzQXN5bmNQbGFjZWhvbGRlciIsInByb3RvdHlwZUFjY2Vzc29ycyIsImNoaWxkIiwiY3JlYXRlRW1wdHlWTm9kZSIsIm5vZGUiLCJjcmVhdGVUZXh0Vk5vZGUiLCJjbG9uZVZOb2RlIiwidm5vZGUiLCJjbG9uZWQiLCJhcnJheVByb3RvIiwiYXJyYXlNZXRob2RzIiwibWV0aG9kIiwib3JpZ2luYWwiLCJpbnNlcnRlZCIsInJlc3VsdCIsIm9iIiwiX19vYl9fIiwib2JzZXJ2ZUFycmF5IiwiZGVwIiwiYXJyYXlLZXlzIiwic2hvdWxkT2JzZXJ2ZSIsInRvZ2dsZU9ic2VydmluZyIsIk9ic2VydmVyIiwidm1Db3VudCIsIl9fcHJvdG9fXyIsInByb3RvQXVnbWVudCIsImNvcHlBdWdtZW50Iiwid2FsayIsIm9ic2VydmUiLCJhc1Jvb3REYXRhIiwiaXNFeHRlbnNpYmxlIiwiZGVmaW5lUmVhY3RpdmUkJDEiLCJjdXN0b21TZXR0ZXIiLCJzaGFsbG93IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZ2V0dGVyIiwic2V0dGVyIiwiY2hpbGRPYiIsImRlcGVuZEFycmF5IiwibmV3VmFsIiwibWF4IiwiZGVsIiwiaXRlbXMiLCJzdHJhdHMiLCJtZXJnZURhdGEiLCJ0b1ZhbCIsImZyb21WYWwiLCJtZXJnZURhdGFPckZuIiwicGFyZW50VmFsIiwiY2hpbGRWYWwiLCJpbnN0YW5jZURhdGEiLCJkZWZhdWx0RGF0YSIsIm1lcmdlSG9vayIsImRlZHVwZUhvb2tzIiwibWVyZ2VBc3NldHMiLCJhc3NlcnRPYmplY3RUeXBlIiwicHJvcHNEYXRhIiwiZGVmYXVsdFN0cmF0Iiwia2V5JDEiLCJpbmplY3QiLCJwcm92aWRlIiwidmFsaWRhdGVDb21wb25lbnROYW1lIiwibWVyZ2VPcHRpb25zIiwiY2hlY2tDb21wb25lbnRzIiwibm9ybWFsaXplUHJvcHMiLCJub3JtYWxpemVkIiwibm9ybWFsaXplSW5qZWN0IiwiZGlycyIsImRlZiQkMSIsIm5vcm1hbGl6ZURpcmVjdGl2ZXMiLCJfYmFzZSIsImV4dGVuZHMiLCJtaXhpbnMiLCJtZXJnZUZpZWxkIiwic3RyYXQiLCJyZXNvbHZlQXNzZXQiLCJ3YXJuTWlzc2luZyIsImFzc2V0cyIsImNhbWVsaXplZElkIiwiUGFzY2FsQ2FzZUlkIiwidmFsaWRhdGVQcm9wIiwicHJvcE9wdGlvbnMiLCJwcm9wIiwiYWJzZW50IiwiYm9vbGVhbkluZGV4IiwiZ2V0VHlwZUluZGV4Iiwic3RyaW5nSW5kZXgiLCJfcHJvcHMiLCJnZXRUeXBlIiwiZ2V0UHJvcERlZmF1bHRWYWx1ZSIsInByZXZTaG91bGRPYnNlcnZlIiwicmVxdWlyZWQiLCJ2YWxpZCIsImV4cGVjdGVkVHlwZXMiLCJhc3NlcnRlZFR5cGUiLCJhc3NlcnRUeXBlIiwiZXhwZWN0ZWRUeXBlIiwiaGF2ZUV4cGVjdGVkVHlwZXMiLCJyZWNlaXZlZFR5cGUiLCJpc0V4cGxpY2FibGUiLCJlbGVtIiwiaXNCb29sZWFuIiwic3R5bGVWYWx1ZSIsImdldEludmFsaWRUeXBlTWVzc2FnZSIsInZhbGlkYXRvciIsImFzc2VydFByb3AiLCJzaW1wbGVDaGVja1JFIiwiZnVuY3Rpb25UeXBlQ2hlY2tSRSIsImlzU2FtZVR5cGUiLCJFWFBMSUNBQkxFX1RZUEVTIiwiaGFuZGxlRXJyb3IiLCJjdXIiLCJlcnJvckNhcHR1cmVkIiwiZ2xvYmFsSGFuZGxlRXJyb3IiLCJpbnZva2VXaXRoRXJyb3JIYW5kbGluZyIsIl9oYW5kbGVkIiwibG9nRXJyb3IiLCJ0aW1lckZ1bmMiLCJpbml0UHJveHkiLCJpc1VzaW5nTWljcm9UYXNrIiwicGVuZGluZyIsImZsdXNoQ2FsbGJhY2tzIiwiY29waWVzIiwic2V0VGltZW91dCIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJzZXRJbW1lZGlhdGUiLCJjb3VudGVyIiwib2JzZXJ2ZXIiLCJ0ZXh0Tm9kZSIsImNoYXJhY3RlckRhdGEiLCJuZXh0VGljayIsImNiIiwiX3Jlc29sdmUiLCJhbGxvd2VkR2xvYmFscyIsIndhcm5Ob25QcmVzZW50Iiwid2FyblJlc2VydmVkUHJlZml4IiwiaGFzUHJveHkiLCJQcm94eSIsImlzQnVpbHRJbk1vZGlmaWVyIiwiaGFzSGFuZGxlciIsImlzQWxsb3dlZCIsIiRkYXRhIiwiZ2V0SGFuZGxlciIsImhhbmRsZXJzIiwiX3JlbmRlclByb3h5IiwibWFyayIsIm1lYXN1cmUiLCJzZWVuT2JqZWN0cyIsInRyYXZlcnNlIiwiX3RyYXZlcnNlIiwic2VlbiIsImlzQSIsImlzRnJvemVuIiwiZGVwSWQiLCJwZXJmIiwiY2xlYXJNYXJrcyIsImNsZWFyTWVhc3VyZXMiLCJzdGFydFRhZyIsImVuZFRhZyIsIm5vcm1hbGl6ZUV2ZW50IiwicGFzc2l2ZSIsIm9uY2UkJDEiLCJjYXB0dXJlIiwiY3JlYXRlRm5JbnZva2VyIiwiZm5zIiwiaW52b2tlciIsImFyZ3VtZW50cyQxIiwidXBkYXRlTGlzdGVuZXJzIiwib2xkT24iLCJyZW1vdmUkJDEiLCJjcmVhdGVPbmNlSGFuZGxlciIsIm9sZCIsImV2ZW50IiwicGFyYW1zIiwibWVyZ2VWTm9kZUhvb2siLCJob29rS2V5Iiwib2xkSG9vayIsIndyYXBwZWRIb29rIiwibWVyZ2VkIiwiY2hlY2tQcm9wIiwiYWx0S2V5IiwicHJlc2VydmUiLCJub3JtYWxpemVDaGlsZHJlbiIsIm5vcm1hbGl6ZUFycmF5Q2hpbGRyZW4iLCJpc1RleHROb2RlIiwibmVzdGVkSW5kZXgiLCJfaXNWTGlzdCIsInJlc29sdmVJbmplY3QiLCJwcm92aWRlS2V5IiwiX3Byb3ZpZGVkIiwicHJvdmlkZURlZmF1bHQiLCJyZXNvbHZlU2xvdHMiLCJzbG90cyIsInNsb3QiLCJuYW1lJDEiLCJpc1doaXRlc3BhY2UiLCJub3JtYWxpemVTY29wZWRTbG90cyIsIm5vcm1hbFNsb3RzIiwicHJldlNsb3RzIiwiaGFzTm9ybWFsU2xvdHMiLCJpc1N0YWJsZSIsIiRzdGFibGUiLCIka2V5IiwiX25vcm1hbGl6ZWQiLCIkaGFzTm9ybWFsIiwibm9ybWFsaXplU2NvcGVkU2xvdCIsImtleSQyIiwicHJveHlOb3JtYWxTbG90IiwicHJveHkiLCJyZW5kZXJMaXN0IiwiaXRlcmF0b3IiLCJuZXh0IiwiZG9uZSIsInJlbmRlclNsb3QiLCJmYWxsYmFja1JlbmRlciIsImJpbmRPYmplY3QiLCJub2RlcyIsInNjb3BlZFNsb3RGbiIsIiRzY29wZWRTbG90cyIsInJlc29sdmVGaWx0ZXIiLCJpc0tleU5vdE1hdGNoIiwiZXhwZWN0IiwiYWN0dWFsIiwiY2hlY2tLZXlDb2RlcyIsImV2ZW50S2V5Q29kZSIsImJ1aWx0SW5LZXlDb2RlIiwiZXZlbnRLZXlOYW1lIiwiYnVpbHRJbktleU5hbWUiLCJtYXBwZWRLZXlDb2RlIiwiYmluZE9iamVjdFByb3BzIiwiYXNQcm9wIiwiaXNTeW5jIiwibG9vcCIsImNhbWVsaXplZEtleSIsImh5cGhlbmF0ZWRLZXkiLCJyZW5kZXJTdGF0aWMiLCJpc0luRm9yIiwiX3N0YXRpY1RyZWVzIiwibWFya1N0YXRpYyIsIm1hcmtPbmNlIiwibWFya1N0YXRpY05vZGUiLCJiaW5kT2JqZWN0TGlzdGVuZXJzIiwib3VycyIsInJlc29sdmVTY29wZWRTbG90cyIsImhhc0R5bmFtaWNLZXlzIiwiY29udGVudEhhc2hLZXkiLCJiaW5kRHluYW1pY0tleXMiLCJiYXNlT2JqIiwicHJlcGVuZE1vZGlmaWVyIiwic3ltYm9sIiwiaW5zdGFsbFJlbmRlckhlbHBlcnMiLCJfbyIsIl9uIiwiX3EiLCJfZiIsIl91IiwiX2ciLCJfcCIsIkZ1bmN0aW9uYWxSZW5kZXJDb250ZXh0IiwiY29udGV4dFZtIiwidGhpcyQxIiwiX29yaWdpbmFsIiwiaXNDb21waWxlZCIsIm5lZWROb3JtYWxpemF0aW9uIiwiaW5qZWN0aW9ucyIsInNjb3BlZFNsb3RzIiwiY2xvbmVBbmRNYXJrRnVuY3Rpb25hbFJlc3VsdCIsInJlbmRlckNvbnRleHQiLCJkZXZ0b29sc01ldGEiLCJtZXJnZVByb3BzIiwiY29tcG9uZW50Vk5vZGVIb29rcyIsImh5ZHJhdGluZyIsIl9pc0Rlc3Ryb3llZCIsImtlZXBBbGl2ZSIsIm1vdW50ZWROb2RlIiwicHJlcGF0Y2giLCJfaXNDb21wb25lbnQiLCJfcGFyZW50Vm5vZGUiLCJpbmxpbmVUZW1wbGF0ZSIsImNyZWF0ZUNvbXBvbmVudEluc3RhbmNlRm9yVm5vZGUiLCJhY3RpdmVJbnN0YW5jZSIsIiRtb3VudCIsIm9sZFZub2RlIiwicGFyZW50Vm5vZGUiLCJyZW5kZXJDaGlsZHJlbiIsImlzVXBkYXRpbmdDaGlsZENvbXBvbmVudCIsIm5ld1Njb3BlZFNsb3RzIiwib2xkU2NvcGVkU2xvdHMiLCJoYXNEeW5hbWljU2NvcGVkU2xvdCIsIm5lZWRzRm9yY2VVcGRhdGUiLCJfcmVuZGVyQ2hpbGRyZW4iLCJfdm5vZGUiLCIkYXR0cnMiLCIkbGlzdGVuZXJzIiwicHJvcEtleXMiLCJfcHJvcEtleXMiLCJvbGRMaXN0ZW5lcnMiLCJfcGFyZW50TGlzdGVuZXJzIiwidXBkYXRlQ29tcG9uZW50TGlzdGVuZXJzIiwiJGZvcmNlVXBkYXRlIiwidXBkYXRlQ2hpbGRDb21wb25lbnQiLCJfaXNNb3VudGVkIiwiY2FsbEhvb2siLCJfaW5hY3RpdmUiLCJhY3RpdmF0ZWRDaGlsZHJlbiIsImFjdGl2YXRlQ2hpbGRDb21wb25lbnQiLCJkZXN0cm95IiwiZGVhY3RpdmF0ZUNoaWxkQ29tcG9uZW50IiwiJGRlc3Ryb3kiLCJob29rc1RvTWVyZ2UiLCJjcmVhdGVDb21wb25lbnQiLCJiYXNlQ3RvciIsImVycm9yQ29tcCIsInJlc29sdmVkIiwib3duZXIiLCJjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UiLCJvd25lcnMiLCJsb2FkaW5nIiwibG9hZGluZ0NvbXAiLCJzeW5jIiwidGltZXJMb2FkaW5nIiwidGltZXJUaW1lb3V0IiwiJG9uIiwiZm9yY2VSZW5kZXIiLCJyZW5kZXJDb21wbGV0ZWQiLCJjbGVhclRpbWVvdXQiLCJlbnN1cmVDdG9yIiwicmVhc29uIiwiZGVsYXkiLCJ0aW1lb3V0IiwicmVzb2x2ZUFzeW5jQ29tcG9uZW50IiwiY3JlYXRlQXN5bmNQbGFjZWhvbGRlciIsInJlc29sdmVDb25zdHJ1Y3Rvck9wdGlvbnMiLCJtb2RlbCIsInRyYW5zZm9ybU1vZGVsIiwia2V5SW5Mb3dlckNhc2UiLCJleHRyYWN0UHJvcHNGcm9tVk5vZGVEYXRhIiwidm5vZGVzIiwiY3JlYXRlRnVuY3Rpb25hbENvbXBvbmVudCIsIm5hdGl2ZU9uIiwiYWJzdHJhY3QiLCJ0b01lcmdlIiwiX21lcmdlZCIsIm1lcmdlSG9vayQxIiwiaW5zdGFsbENvbXBvbmVudEhvb2tzIiwiZjEiLCJmMiIsIm5vcm1hbGl6YXRpb25UeXBlIiwiYWx3YXlzTm9ybWFsaXplIiwiaXMiLCJzaW1wbGVOb3JtYWxpemVDaGlsZHJlbiIsInByZSIsImFwcGx5TlMiLCJyZWdpc3RlckRlZXBCaW5kaW5ncyIsIl9jcmVhdGVFbGVtZW50IiwiZm9yY2UiLCJjb21wIiwiYmFzZSIsInRvU3RyaW5nVGFnIiwiZ2V0Rmlyc3RDb21wb25lbnRDaGlsZCIsInJlbW92ZSQxIiwiJG9mZiIsIl90YXJnZXQiLCJvbmNlSGFuZGxlciIsInNldEFjdGl2ZUluc3RhbmNlIiwicHJldkFjdGl2ZUluc3RhbmNlIiwiaXNJbkluYWN0aXZlVHJlZSIsImRpcmVjdCIsIl9kaXJlY3RJbmFjdGl2ZSIsIiRjaGlsZHJlbiIsIl9oYXNIb29rRXZlbnQiLCIkZW1pdCIsInF1ZXVlIiwiY2lyY3VsYXIiLCJ3YWl0aW5nIiwiZmx1c2hpbmciLCJjdXJyZW50Rmx1c2hUaW1lc3RhbXAiLCJnZXROb3ciLCJub3ciLCJjcmVhdGVFdmVudCIsInRpbWVTdGFtcCIsImZsdXNoU2NoZWR1bGVyUXVldWUiLCJ3YXRjaGVyIiwidXNlciIsImFjdGl2YXRlZFF1ZXVlIiwidXBkYXRlZFF1ZXVlIiwiY2FsbEFjdGl2YXRlZEhvb2tzIiwiX3dhdGNoZXIiLCJjYWxsVXBkYXRlZEhvb2tzIiwidWlkJDIiLCJXYXRjaGVyIiwiZXhwT3JGbiIsImlzUmVuZGVyV2F0Y2hlciIsIl93YXRjaGVycyIsImRlZXAiLCJsYXp5IiwiYWN0aXZlIiwiZGlydHkiLCJkZXBzIiwibmV3RGVwcyIsImRlcElkcyIsIm5ld0RlcElkcyIsInBhdGgiLCJzZWdtZW50cyIsInBhcnNlUGF0aCIsImNsZWFudXBEZXBzIiwidG1wIiwicXVldWVXYXRjaGVyIiwib2xkVmFsdWUiLCJldmFsdWF0ZSIsInRlYXJkb3duIiwiX2lzQmVpbmdEZXN0cm95ZWQiLCJzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24iLCJzb3VyY2VLZXkiLCJpbml0U3RhdGUiLCJwcm9wc09wdGlvbnMiLCJpc1Jvb3QiLCJpbml0UHJvcHMiLCJpbml0TWV0aG9kcyIsIl9kYXRhIiwiZ2V0RGF0YSIsImluaXREYXRhIiwid2F0Y2hlcnMiLCJfY29tcHV0ZWRXYXRjaGVycyIsImlzU1NSIiwidXNlckRlZiIsImNvbXB1dGVkV2F0Y2hlck9wdGlvbnMiLCJkZWZpbmVDb21wdXRlZCIsImluaXRDb21wdXRlZCIsImNyZWF0ZVdhdGNoZXIiLCJpbml0V2F0Y2giLCJzaG91bGRDYWNoZSIsImNyZWF0ZUNvbXB1dGVkR2V0dGVyIiwiY3JlYXRlR2V0dGVySW52b2tlciIsIiR3YXRjaCIsInVpZCQzIiwic3VwZXIiLCJzdXBlck9wdGlvbnMiLCJtb2RpZmllZE9wdGlvbnMiLCJtb2RpZmllZCIsImxhdGVzdCIsInNlYWxlZCIsInNlYWxlZE9wdGlvbnMiLCJyZXNvbHZlTW9kaWZpZWRPcHRpb25zIiwiZXh0ZW5kT3B0aW9ucyIsIl9pbml0IiwiaW5pdEV4dGVuZCIsIlN1cGVyIiwiU3VwZXJJZCIsImNhY2hlZEN0b3JzIiwiX0N0b3IiLCJTdWIiLCJDb21wIiwiaW5pdFByb3BzJDEiLCJpbml0Q29tcHV0ZWQkMSIsIm1peGluIiwiZ2V0Q29tcG9uZW50TmFtZSIsIm1hdGNoZXMiLCJwcnVuZUNhY2hlIiwia2VlcEFsaXZlSW5zdGFuY2UiLCJlbnRyeSIsInBydW5lQ2FjaGVFbnRyeSIsImN1cnJlbnQiLCJfdWlkIiwidm5vZGVDb21wb25lbnRPcHRpb25zIiwiaW5pdEludGVybmFsQ29tcG9uZW50IiwiaW5pdExpZmVjeWNsZSIsImluaXRFdmVudHMiLCJwYXJlbnREYXRhIiwiaW5pdFJlbmRlciIsImluaXRJbmplY3Rpb25zIiwiaW5pdFByb3ZpZGUiLCJfbmFtZSIsImluaXRNaXhpbiIsImRhdGFEZWYiLCJwcm9wc0RlZiIsIiRzZXQiLCIkZGVsZXRlIiwiaW1tZWRpYXRlIiwic3RhdGVNaXhpbiIsImhvb2tSRSIsIiRvbmNlIiwiaSQxIiwiY2JzIiwibG93ZXJDYXNlRXZlbnQiLCJldmVudHNNaXhpbiIsIl91cGRhdGUiLCJwcmV2RWwiLCJwcmV2Vm5vZGUiLCJyZXN0b3JlQWN0aXZlSW5zdGFuY2UiLCJfX3BhdGNoX18iLCJfX3Z1ZV9fIiwibGlmZWN5Y2xlTWl4aW4iLCIkbmV4dFRpY2siLCJfcmVuZGVyIiwicmVuZGVyRXJyb3IiLCJyZW5kZXJNaXhpbiIsInBhdHRlcm5UeXBlcyIsIktlZXBBbGl2ZSIsImluY2x1ZGUiLCJleGNsdWRlIiwiY2FjaGVWTm9kZSIsInZub2RlVG9DYWNoZSIsImtleVRvQ2FjaGUiLCJjcmVhdGVkIiwiZGVzdHJveWVkIiwidXBkYXRlZCIsImJ1aWx0SW5Db21wb25lbnRzIiwiY29uZmlnRGVmIiwiZGVmaW5lUmVhY3RpdmUiLCJkZWxldGUiLCJvYnNlcnZhYmxlIiwiaW5zdGFsbGVkUGx1Z2lucyIsIl9pbnN0YWxsZWRQbHVnaW5zIiwiaW5pdFVzZSIsImluaXRNaXhpbiQxIiwiZGVmaW5pdGlvbiIsImluaXRBc3NldFJlZ2lzdGVycyIsImluaXRHbG9iYWxBUEkiLCJ2ZXJzaW9uIiwiYWNjZXB0VmFsdWUiLCJpc0VudW1lcmF0ZWRBdHRyIiwiaXNWYWxpZENvbnRlbnRFZGl0YWJsZVZhbHVlIiwiaXNCb29sZWFuQXR0ciIsInhsaW5rTlMiLCJpc1hsaW5rIiwiZ2V0WGxpbmtQcm9wIiwiaXNGYWxzeUF0dHJWYWx1ZSIsImdlbkNsYXNzRm9yVm5vZGUiLCJjaGlsZE5vZGUiLCJtZXJnZUNsYXNzRGF0YSIsImR5bmFtaWNDbGFzcyIsInN0cmluZ2lmeUNsYXNzIiwicmVuZGVyQ2xhc3MiLCJzdHJpbmdpZmllZCIsInN0cmluZ2lmeUFycmF5Iiwic3RyaW5naWZ5T2JqZWN0IiwibmFtZXNwYWNlTWFwIiwibWF0aCIsImlzSFRNTFRhZyIsImlzU1ZHIiwidW5rbm93bkVsZW1lbnRDYWNoZSIsImlzVGV4dElucHV0VHlwZSIsIm5vZGVPcHMiLCJ0YWdOYW1lIiwiY3JlYXRlRWxlbWVudE5TIiwiY3JlYXRlQ29tbWVudCIsIm5ld05vZGUiLCJyZWZlcmVuY2VOb2RlIiwibmV4dFNpYmxpbmciLCJzZXRUZXh0Q29udGVudCIsInNldFN0eWxlU2NvcGUiLCJyZWdpc3RlclJlZiIsImlzUmVtb3ZhbCIsInJlZkluRm9yIiwiZW1wdHlOb2RlIiwic2FtZVZub2RlIiwidHlwZUEiLCJ0eXBlQiIsInNhbWVJbnB1dFR5cGUiLCJjcmVhdGVLZXlUb09sZElkeCIsImJlZ2luSWR4IiwiZW5kSWR4IiwidXBkYXRlRGlyZWN0aXZlcyIsIm9sZERpciIsImRpciIsImlzQ3JlYXRlIiwiaXNEZXN0cm95Iiwib2xkRGlycyIsIm5vcm1hbGl6ZURpcmVjdGl2ZXMkMSIsIm5ld0RpcnMiLCJkaXJzV2l0aEluc2VydCIsImRpcnNXaXRoUG9zdHBhdGNoIiwib2xkQXJnIiwiY2FsbEhvb2skMSIsImNvbXBvbmVudFVwZGF0ZWQiLCJjYWxsSW5zZXJ0IiwiZW1wdHlNb2RpZmllcnMiLCJtb2RpZmllcnMiLCJnZXRSYXdEaXJOYW1lIiwiYmFzZU1vZHVsZXMiLCJ1cGRhdGVBdHRycyIsImluaGVyaXRBdHRycyIsIm9sZEF0dHJzIiwic2V0QXR0ciIsInJlbW92ZUF0dHJpYnV0ZU5TIiwicmVtb3ZlQXR0cmlidXRlIiwiaXNJblByZSIsImJhc2VTZXRBdHRyIiwiY29udmVydEVudW1lcmF0ZWRWYWx1ZSIsInNldEF0dHJpYnV0ZU5TIiwiX19pZXBoIiwiYmxvY2tlciIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsInVwZGF0ZUNsYXNzIiwib2xkRGF0YSIsImNscyIsInRyYW5zaXRpb25DbGFzcyIsIl90cmFuc2l0aW9uQ2xhc3NlcyIsIl9wcmV2Q2xhc3MiLCJ0YXJnZXQkMSIsImtsYXNzIiwiY3JlYXRlT25jZUhhbmRsZXIkMSIsInJlbW92ZSQyIiwidXNlTWljcm90YXNrRml4IiwiYWRkJDEiLCJhdHRhY2hlZFRpbWVzdGFtcCIsIl93cmFwcGVyIiwiY3VycmVudFRhcmdldCIsIm93bmVyRG9jdW1lbnQiLCJ1cGRhdGVET01MaXN0ZW5lcnMiLCJub3JtYWxpemVFdmVudHMiLCJzdmdDb250YWluZXIiLCJ1cGRhdGVET01Qcm9wcyIsIm9sZFByb3BzIiwic3RyQ3VyIiwic2hvdWxkVXBkYXRlVmFsdWUiLCJjaGVja1ZhbCIsIm5vdEluRm9jdXMiLCJhY3RpdmVFbGVtZW50IiwiaXNOb3RJbkZvY3VzQW5kRGlydHkiLCJfdk1vZGlmaWVycyIsInRyaW0iLCJpc0RpcnR5V2l0aE1vZGlmaWVycyIsInBhcnNlU3R5bGVUZXh0IiwicHJvcGVydHlEZWxpbWl0ZXIiLCJub3JtYWxpemVTdHlsZURhdGEiLCJub3JtYWxpemVTdHlsZUJpbmRpbmciLCJiaW5kaW5nU3R5bGUiLCJlbXB0eVN0eWxlIiwiY3NzVmFyUkUiLCJpbXBvcnRhbnRSRSIsInNldFByb3AiLCJzZXRQcm9wZXJ0eSIsIm5vcm1hbGl6ZWROYW1lIiwibm9ybWFsaXplIiwidmVuZG9yTmFtZXMiLCJjYXBOYW1lIiwidXBkYXRlU3R5bGUiLCJvbGRTdGF0aWNTdHlsZSIsIm9sZFN0eWxlQmluZGluZyIsIm5vcm1hbGl6ZWRTdHlsZSIsIm9sZFN0eWxlIiwibmV3U3R5bGUiLCJjaGVja0NoaWxkIiwic3R5bGVEYXRhIiwiZ2V0U3R5bGUiLCJ3aGl0ZXNwYWNlUkUiLCJhZGRDbGFzcyIsImNsYXNzTGlzdCIsImdldEF0dHJpYnV0ZSIsInJlbW92ZUNsYXNzIiwidGFyIiwicmVzb2x2ZVRyYW5zaXRpb24iLCJhdXRvQ3NzVHJhbnNpdGlvbiIsImVudGVyQ2xhc3MiLCJlbnRlclRvQ2xhc3MiLCJlbnRlckFjdGl2ZUNsYXNzIiwibGVhdmVDbGFzcyIsImxlYXZlVG9DbGFzcyIsImxlYXZlQWN0aXZlQ2xhc3MiLCJoYXNUcmFuc2l0aW9uIiwiVFJBTlNJVElPTiIsIkFOSU1BVElPTiIsInRyYW5zaXRpb25Qcm9wIiwidHJhbnNpdGlvbkVuZEV2ZW50IiwiYW5pbWF0aW9uUHJvcCIsImFuaW1hdGlvbkVuZEV2ZW50Iiwib250cmFuc2l0aW9uZW5kIiwib253ZWJraXR0cmFuc2l0aW9uZW5kIiwib25hbmltYXRpb25lbmQiLCJvbndlYmtpdGFuaW1hdGlvbmVuZCIsInJhZiIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsIm5leHRGcmFtZSIsImFkZFRyYW5zaXRpb25DbGFzcyIsInRyYW5zaXRpb25DbGFzc2VzIiwicmVtb3ZlVHJhbnNpdGlvbkNsYXNzIiwid2hlblRyYW5zaXRpb25FbmRzIiwiZ2V0VHJhbnNpdGlvbkluZm8iLCJwcm9wQ291bnQiLCJlbmRlZCIsImVuZCIsIm9uRW5kIiwidHJhbnNmb3JtUkUiLCJnZXRDb21wdXRlZFN0eWxlIiwidHJhbnNpdGlvbkRlbGF5cyIsInRyYW5zaXRpb25EdXJhdGlvbnMiLCJ0cmFuc2l0aW9uVGltZW91dCIsImdldFRpbWVvdXQiLCJhbmltYXRpb25EZWxheXMiLCJhbmltYXRpb25EdXJhdGlvbnMiLCJhbmltYXRpb25UaW1lb3V0IiwiaGFzVHJhbnNmb3JtIiwiZGVsYXlzIiwiZHVyYXRpb25zIiwidG9NcyIsImVudGVyIiwidG9nZ2xlRGlzcGxheSIsIl9sZWF2ZUNiIiwiY2FuY2VsbGVkIiwidHJhbnNpdGlvbiIsIl9lbnRlckNiIiwibm9kZVR5cGUiLCJhcHBlYXJDbGFzcyIsImFwcGVhclRvQ2xhc3MiLCJhcHBlYXJBY3RpdmVDbGFzcyIsImJlZm9yZUVudGVyIiwiYWZ0ZXJFbnRlciIsImVudGVyQ2FuY2VsbGVkIiwiYmVmb3JlQXBwZWFyIiwiYXBwZWFyIiwiYWZ0ZXJBcHBlYXIiLCJhcHBlYXJDYW5jZWxsZWQiLCJkdXJhdGlvbiIsInRyYW5zaXRpb25Ob2RlIiwiaXNBcHBlYXIiLCJzdGFydENsYXNzIiwiYWN0aXZlQ2xhc3MiLCJ0b0NsYXNzIiwiYmVmb3JlRW50ZXJIb29rIiwiZW50ZXJIb29rIiwiYWZ0ZXJFbnRlckhvb2siLCJlbnRlckNhbmNlbGxlZEhvb2siLCJleHBsaWNpdEVudGVyRHVyYXRpb24iLCJjaGVja0R1cmF0aW9uIiwiZXhwZWN0c0NTUyIsInVzZXJXYW50c0NvbnRyb2wiLCJnZXRIb29rQXJndW1lbnRzTGVuZ3RoIiwic2hvdyIsInBlbmRpbmdOb2RlIiwiX3BlbmRpbmciLCJpc1ZhbGlkRHVyYXRpb24iLCJsZWF2ZSIsInJtIiwiYmVmb3JlTGVhdmUiLCJhZnRlckxlYXZlIiwibGVhdmVDYW5jZWxsZWQiLCJkZWxheUxlYXZlIiwiZXhwbGljaXRMZWF2ZUR1cmF0aW9uIiwicGVyZm9ybUxlYXZlIiwiaW52b2tlckZucyIsIl9lbnRlciIsInBhdGNoIiwiYmFja2VuZCIsInJlbW92ZU5vZGUiLCJpc1Vua25vd25FbGVtZW50JCQxIiwiaW5WUHJlIiwiaWdub3JlIiwiY3JlYXRpbmdFbG1JblZQcmUiLCJjcmVhdGVFbG0iLCJpbnNlcnRlZFZub2RlUXVldWUiLCJwYXJlbnRFbG0iLCJyZWZFbG0iLCJuZXN0ZWQiLCJvd25lckFycmF5IiwiaXNSZWFjdGl2YXRlZCIsImluaXRDb21wb25lbnQiLCJpbm5lck5vZGUiLCJhY3RpdmF0ZSIsInJlYWN0aXZhdGVDb21wb25lbnQiLCJzZXRTY29wZSIsImNyZWF0ZUNoaWxkcmVuIiwiaW52b2tlQ3JlYXRlSG9va3MiLCJwZW5kaW5nSW5zZXJ0IiwiaXNQYXRjaGFibGUiLCJyZWYkJDEiLCJjaGVja0R1cGxpY2F0ZUtleXMiLCJhbmNlc3RvciIsImFkZFZub2RlcyIsInN0YXJ0SWR4IiwiaW52b2tlRGVzdHJveUhvb2siLCJyZW1vdmVWbm9kZXMiLCJjaCIsInJlbW92ZUFuZEludm9rZVJlbW92ZUhvb2siLCJjaGlsZEVsbSIsImNyZWF0ZVJtQ2IiLCJzZWVuS2V5cyIsImZpbmRJZHhJbk9sZCIsIm9sZENoIiwicGF0Y2hWbm9kZSIsInJlbW92ZU9ubHkiLCJoeWRyYXRlIiwibmV3Q2giLCJvbGRLZXlUb0lkeCIsImlkeEluT2xkIiwidm5vZGVUb01vdmUiLCJvbGRTdGFydElkeCIsIm5ld1N0YXJ0SWR4Iiwib2xkRW5kSWR4Iiwib2xkU3RhcnRWbm9kZSIsIm9sZEVuZFZub2RlIiwibmV3RW5kSWR4IiwibmV3U3RhcnRWbm9kZSIsIm5ld0VuZFZub2RlIiwiY2FuTW92ZSIsInVwZGF0ZUNoaWxkcmVuIiwicG9zdHBhdGNoIiwiaW52b2tlSW5zZXJ0SG9vayIsImluaXRpYWwiLCJoeWRyYXRpb25CYWlsZWQiLCJpc1JlbmRlcmVkTW9kdWxlIiwiYXNzZXJ0Tm9kZU1hdGNoIiwiaGFzQ2hpbGROb2RlcyIsImNoaWxkcmVuTWF0Y2giLCJmdWxsSW52b2tlIiwiaXNJbml0aWFsUGF0Y2giLCJpc1JlYWxFbGVtZW50IiwiaGFzQXR0cmlidXRlIiwib2xkRWxtIiwicGF0Y2hhYmxlIiwiaSQyIiwiY3JlYXRlUGF0Y2hGdW5jdGlvbiIsInZtb2RlbCIsInRyaWdnZXIiLCJiaW5kaW5nIiwiX3ZPcHRpb25zIiwic2V0U2VsZWN0ZWQiLCJnZXRWYWx1ZSIsIm9uQ29tcG9zaXRpb25TdGFydCIsIm9uQ29tcG9zaXRpb25FbmQiLCJwcmV2T3B0aW9ucyIsImN1ck9wdGlvbnMiLCJoYXNOb01hdGNoaW5nT3B0aW9uIiwiYWN0dWFsbHlTZXRTZWxlY3RlZCIsImlzTXVsdGlwbGUiLCJvcHRpb24iLCJzZWxlY3RlZEluZGV4IiwiaW5pdEV2ZW50IiwiZGlzcGF0Y2hFdmVudCIsImxvY2F0ZU5vZGUiLCJ0cmFuc2l0aW9uJCQxIiwib3JpZ2luYWxEaXNwbGF5IiwiX192T3JpZ2luYWxEaXNwbGF5IiwidW5iaW5kIiwicGxhdGZvcm1EaXJlY3RpdmVzIiwidHJhbnNpdGlvblByb3BzIiwiZ2V0UmVhbENoaWxkIiwiY29tcE9wdGlvbnMiLCJleHRyYWN0VHJhbnNpdGlvbkRhdGEiLCJyYXdDaGlsZCIsImlzTm90VGV4dE5vZGUiLCJpc1ZTaG93RGlyZWN0aXZlIiwiVHJhbnNpdGlvbiIsImhhc1BhcmVudFRyYW5zaXRpb24iLCJfbGVhdmluZyIsIm9sZFJhd0NoaWxkIiwib2xkQ2hpbGQiLCJpc1NhbWVDaGlsZCIsImRlbGF5ZWRMZWF2ZSIsIm1vdmVDbGFzcyIsIlRyYW5zaXRpb25Hcm91cCIsImJlZm9yZU1vdW50Iiwia2VwdCIsInByZXZDaGlsZHJlbiIsInJhd0NoaWxkcmVuIiwidHJhbnNpdGlvbkRhdGEiLCJyZW1vdmVkIiwiYyQxIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiaGFzTW92ZSIsImNhbGxQZW5kaW5nQ2JzIiwicmVjb3JkUG9zaXRpb24iLCJhcHBseVRyYW5zbGF0aW9uIiwiX3JlZmxvdyIsIm9mZnNldEhlaWdodCIsIm1vdmVkIiwidHJhbnNmb3JtIiwiV2Via2l0VHJhbnNmb3JtIiwidHJhbnNpdGlvbkR1cmF0aW9uIiwiX21vdmVDYiIsInByb3BlcnR5TmFtZSIsIl9oYXNNb3ZlIiwiY2xvbmVOb2RlIiwibmV3UG9zIiwib2xkUG9zIiwiZHgiLCJsZWZ0IiwiZHkiLCJ0b3AiLCJwbGF0Zm9ybUNvbXBvbmVudHMiLCJhdHRyIiwiSFRNTFVua25vd25FbGVtZW50IiwiSFRNTEVsZW1lbnQiLCJ1cGRhdGVDb21wb25lbnQiLCJ0ZW1wbGF0ZSIsIm1vdW50Q29tcG9uZW50IiwicXVlcnkiLCJfZGVmaW5lUHJvcGVydGllcyIsImRlc2NyaXB0b3IiLCJXZWJTb2NrZXRDbGllbnQiLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiX2NsYXNzQ2FsbENoZWNrIiwiY2xpZW50IiwiV2ViU29ja2V0Iiwib25lcnJvciIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsImYiLCJvbm9wZW4iLCJvbmNsb3NlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsIl9fdW51c2VkX3dlYnBhY2tfbW9kdWxlIiwiX3RvQ29uc3VtYWJsZUFycmF5IiwiX2FycmF5TGlrZVRvQXJyYXkiLCJfYXJyYXlXaXRob3V0SG9sZXMiLCJpdGVyIiwiX2l0ZXJhYmxlVG9BcnJheSIsIm1pbkxlbiIsIl91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSIsIl9ub25JdGVyYWJsZVNwcmVhZCIsImFycjIiLCJMb2dUeXBlIiwiZGVidWciLCJncm91cCIsImdyb3VwQ29sbGFwc2VkIiwiZ3JvdXBFbmQiLCJwcm9maWxlIiwicHJvZmlsZUVuZCIsInRpbWUiLCJzdGF0dXMiLCJMT0dfU1lNQk9MIiwiVElNRVJTX1NZTUJPTCIsIlRJTUVSU19BR0dSRUdBVEVTX1NZTUJPTCIsIldlYnBhY2tMb2dnZXIiLCJnZXRDaGlsZExvZ2dlciIsIl9sZW4iLCJfa2V5IiwiX2xlbjIiLCJfa2V5MiIsIl9sZW4zIiwiX2tleTMiLCJfbGVuNCIsIl9rZXk0IiwiX2xlbjUiLCJfa2V5NSIsImFzc2VydGlvbiIsIl9sZW42IiwiX2tleTYiLCJfbGVuNyIsIl9rZXk3IiwiX2xlbjgiLCJfa2V5OCIsIl9sZW45IiwiX2tleTkiLCJfbGVuMTAiLCJfa2V5MTAiLCJNYXAiLCJwcm9jZXNzIiwiaHJ0aW1lIiwicHJldiIsIkxvZ2dlciIsIl9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cyIsImZpbHRlclRvRnVuY3Rpb24iLCJyZWdFeHAiLCJpZGVudCIsIkxvZ0xldmVsIiwibm9uZSIsImZhbHNlIiwidHJ1ZSIsInZlcmJvc2UiLCJfcmVmIiwiX3JlZiRsZXZlbCIsIl9yZWYkZGVidWciLCJkZWJ1Z0ZpbHRlcnMiLCJsb2dsZXZlbCIsImxhYmVsZWRBcmdzIiwibXMiLCJsb2dUaW1lIiwiX2V4dGVuZHMiLCJTeW5jQmFpbEhvb2siLCJjcmVhdGVDb25zb2xlTG9nZ2VyIiwiY3VycmVudERlZmF1bHRMb2dnZXJPcHRpb25zIiwiY3VycmVudERlZmF1bHRMb2dnZXIiLCJnZXRMb2dnZXIiLCJjaGlsZE5hbWUiLCJjb25maWd1cmVEZWZhdWx0TG9nZ2VyIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJyIiwiX193ZWJwYWNrX2V4cG9ydHNfXyIsIndlYnBhY2tfbGliX2xvZ2dpbmdfcnVudGltZV9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwiX193ZWJwYWNrX2V4cG9ydF90YXJnZXRfXyIsIl9fdW51c2VkX3dlYnBhY2tfX193ZWJwYWNrX21vZHVsZV9fIiwic3RyaXBBbnNpIiwiYW5zaV9yZWdleF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwiYW5zaVJlZ2V4IiwiX3JlZiRvbmx5Rmlyc3QiLCJvbmx5Rmlyc3QiLCJzdHJpcF9hbnNpX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJpZnJhbWVDb250YWluZXJFbGVtZW50IiwiY29udGFpbmVyRWxlbWVudCIsIm9uTG9hZFF1ZXVlIiwiZW5zdXJlT3ZlcmxheUV4aXN0cyIsInJpZ2h0IiwiYm90dG9tIiwiYm9yZGVyIiwiekluZGV4Iiwib25sb2FkIiwiY29udGVudERvY3VtZW50IiwiYm94U2l6aW5nIiwiYmFja2dyb3VuZENvbG9yIiwiY29sb3IiLCJmb250RmFtaWx5IiwiZm9udFNpemUiLCJwYWRkaW5nIiwibGluZUhlaWdodCIsIndoaXRlU3BhY2UiLCJvdmVyZmxvdyIsImhlYWRlckVsZW1lbnQiLCJpbm5lclRleHQiLCJjbG9zZUJ1dHRvbkVsZW1lbnQiLCJiYWNrZ3JvdW5kIiwiZm9udFdlaWdodCIsImN1cnNvciIsImNzc0Zsb2F0Iiwic3R5bGVGbG9hdCIsImhpZGUiLCJvbkxvYWQiLCJmb3JtYXRQcm9ibGVtIiwiaGVhZGVyIiwibW9kdWxlTmFtZSIsImxvYyIsIm1lc3NhZ2VzIiwiZW50cnlFbGVtZW50IiwidHlwZUVsZW1lbnQiLCJfZm9ybWF0UHJvYmxlbSIsIm1lc3NhZ2VUZXh0Tm9kZSIsIkNsaWVudCIsIl9fd2VicGFja19kZXZfc2VydmVyX2NsaWVudF9fIiwicmV0cmllcyIsIm1heFJldHJpZXMiLCJzb2NrZXQiLCJyZWNvbm5lY3QiLCJvbk9wZW4iLCJvbkNsb3NlIiwicmV0cnlJbk1zIiwicG93IiwicmFuZG9tIiwib25NZXNzYWdlIiwicGFyc2VkVVJMIiwiaG9zdG5hbWUiLCJpc0luQWRkckFueSIsImxvY2F0aW9uIiwicHJvdG9jb2wiLCJzb2NrZXRVUkxQcm90b2NvbCIsInNvY2tldFVSTEF1dGgiLCJ1c2VybmFtZSIsInBhc3N3b3JkIiwic29ja2V0VVJMSG9zdG5hbWUiLCJzb2NrZXRVUkxQb3J0IiwicG9ydCIsInNvY2tldFVSTFBhdGhuYW1lIiwicGF0aG5hbWUiLCJmcm9tQ3VycmVudFNjcmlwdCIsIm9ialVSTCIsImF1dGgiLCJob3N0Iiwic2xhc2hlcyIsInNlYXJjaCIsImZvcm1hdCIsImN1cnJlbnRTY3JpcHQiLCJzY3JpcHRFbGVtZW50cyIsInNjcmlwdHMiLCJzY3JpcHRFbGVtZW50c1dpdGhTcmMiLCJzZXRMb2dMZXZlbCIsInJlc291cmNlUXVlcnkiLCJzZWFyY2hQYXJhbXMiLCJwYWlyIiwiZGVjb2RlVVJJQ29tcG9uZW50Iiwic2NyaXB0U291cmNlVVJMIiwic2NyaXB0U291cmNlIiwiaG90IiwibGl2ZVJlbG9hZCIsImlzVW5sb2FkaW5nIiwiY3VycmVudEhhc2giLCJwcmV2aW91c0hhc2giLCJhbGxvd1RvSG90IiwiYWxsb3dUb0xpdmVSZWxvYWQiLCJyb290V2luZG93IiwiaW50ZXJ2YWxJZCIsInNldEludGVydmFsIiwiYXBwbHlSZWxvYWQiLCJjbGVhckludGVydmFsIiwicmVsb2FkIiwiV29ya2VyR2xvYmFsU2NvcGUiLCJsb2dMZXZlbCIsImR1bW15Iiwic2hvdWxkTG9nIiwibG9nR3JvdXAiLCJsb2dGbiIsImZvcm1hdEVycm9yIiwic3RhY2siLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibG9hZGVkIiwiZ2xvYmFsVGhpcyIsImhtZCIsImJhc2VVUkkiLCJwcm9ncmVzcyIsIm92ZXJsYXkiLCJwYXJzZWRSZXNvdXJjZVF1ZXJ5Iiwic2V0QWxsTG9nTGV2ZWwiLCJsb2dnaW5nIiwib25Tb2NrZXRNZXNzYWdlIiwiaW52YWxpZCIsIl9oYXNoIiwicGx1Z2luTmFtZSIsInBlcmNlbnQiLCJvayIsIndhcm5pbmdzIiwiX3dhcm5pbmdzIiwicHJpbnRhYmxlV2FybmluZ3MiLCJwcmV2ZW50UmVsb2FkaW5nIiwiX2Vycm9ycyIsInByaW50YWJsZUVycm9ycyIsIl9mb3JtYXRQcm9ibGVtMiIsIl9lcnJvciIsInNvY2tldFVSTCIsIkFwcCJdLCJzb3VyY2VSb290IjoiIn0=
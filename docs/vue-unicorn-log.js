!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports["vue-unicorn-log"]=t():e["vue-unicorn-log"]=t()}(self,(function(){return function(){var e={"../node_modules/ansi-html-community/index.js":function(e){"use strict";e.exports=i;var t=/(?:(?:\u001b\[)|\u009b)(?:(?:[0-9]{1,3})?(?:(?:;[0-9]{0,3})*)?[A-M|f-m])|\u001b[A-M]/,n={reset:["fff","000"],black:"000",red:"ff0000",green:"209805",yellow:"e8bf03",blue:"0000ff",magenta:"ff00ff",cyan:"00ffee",lightgrey:"f0f0f0",darkgrey:"888"},r={30:"black",31:"red",32:"green",33:"yellow",34:"blue",35:"magenta",36:"cyan",37:"lightgrey"},o={1:"font-weight:bold",2:"opacity:0.5",3:"<i>",4:"<u>",8:"display:none",9:"<del>"},a={23:"</i>",24:"</u>",29:"</del>"};function i(e){if(!t.test(e))return e;var n=[],r=e.replace(/\033\[(\d+)m/g,(function(e,t){var r=o[t];if(r)return~n.indexOf(t)?(n.pop(),"</span>"):(n.push(t),"<"===r[0]?r:'<span style="'+r+';">');var i=a[t];return i?(n.pop(),i):""})),i=n.length;return i>0&&(r+=Array(i+1).join("</span>")),r}function s(e){for(var t in o[0]="font-weight:normal;opacity:1;color:#"+e.reset[0]+";background:#"+e.reset[1],o[7]="color:#"+e.reset[1]+";background:#"+e.reset[0],o[90]="color:#"+e.darkgrey,r){var n=e[r[t]]||"000";o[t]="color:#"+n,t=parseInt(t),o[(t+10).toString()]="background:#"+n}}[0,21,22,27,28,39,49].forEach((function(e){a[e]="</span>"})),i.setColors=function(e){if("object"!=typeof e)throw new Error("`colors` parameter must be an Object.");var t={};for(var r in n){var o=e.hasOwnProperty(r)?e[r]:null;if(o){if("reset"===r){if("string"==typeof o&&(o=[o]),!Array.isArray(o)||0===o.length||o.some((function(e){return"string"!=typeof e})))throw new Error("The value of `"+r+"` property must be an Array and each item could only be a hex string, e.g.: FF0000");var a=n[r];o[0]||(o[0]=a[0]),1!==o.length&&o[1]||(o=[o[0]]).push(a[1]),o=o.slice(0,2)}else if("string"!=typeof o)throw new Error("The value of `"+r+"` property must be a hex string, e.g.: FF0000");t[r]=o}else t[r]=n[r]}s(t)},i.reset=function(){s(n)},i.tags={},Object.defineProperty?(Object.defineProperty(i.tags,"open",{get:function(){return o}}),Object.defineProperty(i.tags,"close",{get:function(){return a}})):(i.tags.open=o,i.tags.close=a),i.reset()},"../node_modules/babel-loader/lib/index.js??clonedRuleSet-1[0].rules[0].use!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=script&lang=js&":function(e,t,n){"use strict";n.r(t);var r=n("../node_modules/vue/dist/vue.runtime.esm.js"),o=n("./docs/UnicornLog.vue"),a=new r.default;Object.defineProperties(r.default.prototype,{$bus:{get:function(){return a}}}),t.default={name:"App",components:{UnicornLog:o.default}}},"../node_modules/babel-loader/lib/index.js??clonedRuleSet-1[0].rules[0].use!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/Nav.vue?vue&type=script&lang=js&":function(e,t,n){"use strict";n.r(t),t.default={name:"Nav",data:function(){return{links:{github:"https://github.com/webdevnerdstuff/vue-unicorn-log",npm:"https://github.com/webdevnerdstuff/vue-unicorn-log"}}}}},"../node_modules/babel-loader/lib/index.js??clonedRuleSet-1[0].rules[0].use!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/Arrays.vue?vue&type=script&lang=js&":function(e,t,n){"use strict";n.r(t);var r=n("../node_modules/vue/dist/vue.runtime.esm.js"),o=n("./plugins/UnicornLog.js"),a=n("../node_modules/vue-code-highlight/dist/vue-code-highlight.esm.js");r.default.use(o.default),t.default={name:"ArraysExample",components:{VueCodeHighlight:a.component},data:function(){return{}},methods:{simpleExample:function(){this.$unicornLog({text:"Hello World",array:["foo","bar"]})},objectArray:function(){this.$unicornLog({text:"Hello World",array:[{foo:"foo "},{bar:"bar "}]})},arraySpreadOperator:function(){this.$unicornLog({text:"Hello World",array:[].concat(["foo"],["bar"])})}}}},"../node_modules/babel-loader/lib/index.js??clonedRuleSet-1[0].rules[0].use!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/Disabled.vue?vue&type=script&lang=js&":function(e,t,n){"use strict";n.r(t);var r=n("../node_modules/vue/dist/vue.runtime.esm.js"),o=n("./plugins/UnicornLog.js"),a=n("../node_modules/vue-code-highlight/dist/vue-code-highlight.esm.js");r.default.use(o.default),t.default={name:"DisabledExample",components:{VueCodeHighlight:a.component},data:function(){return{isDisabled:!0}},methods:{simpleExample:function(){this.$unicornLog({text:"Hello World",disabled:this.isDisabled})}}}},"../node_modules/babel-loader/lib/index.js??clonedRuleSet-1[0].rules[0].use!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/LogPrefix.vue?vue&type=script&lang=js&":function(e,t,n){"use strict";n.r(t);var r=n("../node_modules/vue/dist/vue.runtime.esm.js"),o=n("./plugins/UnicornLog.js"),a=n("../node_modules/vue-code-highlight/dist/vue-code-highlight.esm.js");r.default.use(o.default),t.default={name:"LogPrefixExample",props:{isNameOption:{type:Boolean,default:!1}},components:{VueCodeHighlight:a.component},data:function(){return{logPrefix:"[Bunnies]:",withName:!0}},methods:{exampleName:function(){this.$unicornLog({text:"Hello World",logPrefix:this.withName,name:this.isNameOption?"Susan":"Bob"})},exampleNameDefault:function(){this.$unicornLog({text:"Hello World",logPrefix:this.withName})},simpleExample:function(){this.$unicornLog({text:"Hello World",logPrefix:this.logPrefix})}}}},"../node_modules/babel-loader/lib/index.js??clonedRuleSet-1[0].rules[0].use!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/Magical.vue?vue&type=script&lang=js&":function(e,t,n){"use strict";n.r(t);var r=n("../node_modules/vue/dist/vue.runtime.esm.js"),o=n("./plugins/UnicornLog.js"),a=n("../node_modules/vue-code-highlight/dist/vue-code-highlight.esm.js");r.default.use(o.default),t.default={name:"MagicalExample",components:{VueCodeHighlight:a.component},data:function(){return{magical:!0}},methods:{simpleExample:function(){this.$unicornLog({text:"Hello World",magical:this.magical})}}}},"../node_modules/babel-loader/lib/index.js??clonedRuleSet-1[0].rules[0].use!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/Objects.vue?vue&type=script&lang=js&":function(e,t,n){"use strict";n.r(t);var r=n("../node_modules/vue/dist/vue.runtime.esm.js"),o=n("./plugins/UnicornLog.js"),a=n("../node_modules/vue-code-highlight/dist/vue-code-highlight.esm.js");function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}r.default.use(o.default),t.default={name:"ObjectsExample",components:{VueCodeHighlight:a.component},data:function(){return{}},methods:{simpleExample:function(){this.$unicornLog({text:"Hello World",objects:{foo:"bar"}})},multipleObjects:function(){this.$unicornLog({text:"Hello World",objects:{foo:{foo:"foo "},bar:{bar:"bar "}}})},objectSpreadOperator:function(){this.$unicornLog({text:"Hello World",objects:s(s({},{foo:"foo"}),{bar:"bar"})})}}}},"../node_modules/babel-loader/lib/index.js??clonedRuleSet-1[0].rules[0].use!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/Simple.vue?vue&type=script&lang=js&":function(e,t,n){"use strict";n.r(t);var r=n("../node_modules/vue/dist/vue.runtime.esm.js"),o=n("./plugins/UnicornLog.js"),a=n("../node_modules/vue-code-highlight/dist/vue-code-highlight.esm.js");r.default.use(o.default),t.default={name:"SimpleExample",components:{VueCodeHighlight:a.component},data:function(){return{}},methods:{simpleExample:function(){this.$unicornLog()}}}},"../node_modules/babel-loader/lib/index.js??clonedRuleSet-1[0].rules[0].use!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/Styles.vue?vue&type=script&lang=js&":function(e,t,n){"use strict";n.r(t);var r=n("../node_modules/vue/dist/vue.runtime.esm.js"),o=n("./plugins/UnicornLog.js"),a=n("../node_modules/vue-code-highlight/dist/vue-code-highlight.esm.js");r.default.use(o.default),t.default={name:"StylesExample",components:{VueCodeHighlight:a.component},data:function(){return{defaultStyles:"color: DeepPink; font-size: 2rem;",magicalWord:"unicorn",magicalWords:["magic","magical","prism","psychedelic","rainbow","trippy","unicorn"]}},methods:{arrayExample:function(){this.$unicornLog({text:"Hello World",styles:["background: black","border: 1px dashed magenta","color: magenta","font-family: monospace","font-size: 2em","padding: 10px"]})},simpleExample:function(){this.$unicornLog({text:"Hello World",styles:this.defaultStyles})},wordExample:function(){this.$unicornLog({text:"Using the word ".concat(this.magicalWord),styles:this.magicalWord})}}}},"../node_modules/babel-loader/lib/index.js??clonedRuleSet-1[0].rules[0].use!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/Text.vue?vue&type=script&lang=js&":function(e,t,n){"use strict";n.r(t);var r=n("../node_modules/vue/dist/vue.runtime.esm.js"),o=n("./plugins/UnicornLog.js"),a=n("../node_modules/vue-code-highlight/dist/vue-code-highlight.esm.js");r.default.use(o.default),t.default={name:"TextExample",components:{VueCodeHighlight:a.component},data:function(){return{text:"Hello World"}},methods:{simpleExample:function(){return""!==this.text?(this.$unicornLog({text:this.text}),!1):(this.$unicornLog(),!1)}}}},"../node_modules/babel-loader/lib/index.js??clonedRuleSet-1[0].rules[0].use!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/Type.vue?vue&type=script&lang=js&":function(e,t,n){"use strict";n.r(t);var r=n("../node_modules/vue/dist/vue.runtime.esm.js"),o=n("./plugins/UnicornLog.js"),a=n("../node_modules/vue-code-highlight/dist/vue-code-highlight.esm.js");r.default.use(o.default),t.default={name:"TypeExample",components:{VueCodeHighlight:a.component},data:function(){return{logNote:"",logType:"log",types:["clear","debug","dir","error","group","groupCollapsed","groupEnd","info","log","table","trace","warn"]}},methods:{checkType:function(){this.logNote="";var e="\n\t\t\t".concat('\n\t\t\t\t<svg xmlns="http://www.w3.org/2000/svg" style="display: none;">\n\t\t\t\t\t<symbol id="info-fill" fill="currentColor" viewBox="0 0 16 16">\n\t\t\t\t\t\t<path d="M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16zm.93-9.412-1 4.705c-.07.34.029.533.304.533.194 0 .487-.07.686-.246l-.088.416c-.287.346-.92.598-1.465.598-.703 0-1.002-.422-.808-1.319l.738-3.468c.064-.293.006-.399-.287-.47l-.451-.081.082-.381 2.29-.287zM8 5.5a1 1 0 1 1 0-2 1 1 0 0 1 0 2z"/>\n\t\t\t\t\t</symbol>\n\t\t\t\t</svg>\n\t\t\t','\n\t\t\t <svg class="bi flex-shrink-0 me-2" width="24" height="24" role="img" aria-label="Info:"><use xlink:href="#info-fill"></use></svg>\n\t\t\t');return"dir"===this.logType||"table"===this.logType?(this.logNote="".concat(e,"<div>Console method <code>").concat(this.logType,"</code> will work, but does not support colors.</div>"),!1):"groupEnd"===this.logType&&(this.logNote="".concat(e,"<div><code>groupEnd</code> only works when used with <code>group</code> or <code>groupCollapsed</code><div>"),!1)},simpleExample:function(){return"dir"===this.logType?(this.$unicornLog({text:"Hello World",type:"dir",objects:{foo:"bar"}}),!1):"table"===this.logType||"debug"===this.logType?(this.$unicornLog({text:"Hello World",type:this.logType,array:[{foo:"foo"},{foo:"bar"}]}),!1):"group"===this.logType||"groupCollapsed"===this.logType?(this.$unicornLog({text:"".concat(this.logType),type:this.logType}),this.$unicornLog({text:"Foo",type:"log"}),this.$unicornLog({text:"Bar",type:"log"}),this.$unicornLog({type:"groupEnd",array:[{foo:"foo"},{foo:"bar"}]}),!1):(this.$unicornLog({text:"Hello World",type:this.logType}),!1)}}}},"../node_modules/babel-loader/lib/index.js??clonedRuleSet-1[0].rules[0].use!../node_modules/vue-loader/lib/index.js??vue-loader-options!./docs/UnicornLog.vue?vue&type=script&lang=js&":function(e,t,n){"use strict";n.r(t);var r=n("../node_modules/vue/dist/vue.runtime.esm.js"),o=n("./components/Nav.vue"),a=n("./components/examples/Arrays.vue"),i=n("./components/examples/Disabled.vue"),s=n("./components/examples/LogPrefix.vue"),l=n("./components/examples/Magical.vue"),c=n("./components/examples/Objects.vue"),u=n("./components/examples/Simple.vue"),d=n("./components/examples/Styles.vue"),p=n("./components/examples/Text.vue"),f=n("./components/examples/Type.vue"),v=n("./plugins/UnicornLog.js"),m=n("../node_modules/vue-code-highlight/dist/vue-code-highlight.esm.js");function g(e){return function(e){if(Array.isArray(e))return h(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return h(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return h(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function h(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}r.default.use(v.default),t.default={name:"UnicornLog",props:{},components:{ArraysExample:a.default,DisabledExample:i.default,LogPrefixExample:s.default,MagicalExample:l.default,Nav:o.default,ObjectsExamples:c.default,SimpleExample:u.default,StylesExample:d.default,TextExample:p.default,TypeExample:f.default,VueCodeHighlight:m.component},data:function(){return{copy:{array:"Used to include an array in the log.",defaultStyles:"Used to adjust the default styles.",disabled:"Disables the output of the log in the console. This works best when using an environment to conditionally set so it \t\t\t\t\t\t\t\t\t\twill log in development, but not on the production site.",logPrefix:"Prepends a string to to the output.",magical:"Adds a magical style to the output.",object:"Used to include objects in the log.",styles:"Sets the styles for the log.",text:"Used to include a string in the log.",type:"Specifies which console method should be used."},options:{boolean:'<span class="boolean-style">true<br />false</span>',styles:'<a href="https://developer.mozilla.org/en-US/docs/Web/API/console#styling_console_output" target="_blank"\t\t\t\t\t\t\t\t\t\t\t>Styling Console Output</a>',type:"\n\t\t\t\tclear\n\t\t\t\t<br />\n\t\t\t\tdebug\n\t\t\t\t<br />\n\t\t\t\tdir\n\t\t\t\t<br />\n\t\t\t\terror\n\t\t\t\t<br />\n\t\t\t\tgroup\n\t\t\t\t<br />\n\t\t\t\tgroupCollapsed\n\t\t\t\t<br />\n\t\t\t\tgroupEnd\n\t\t\t\t<br />\n\t\t\t\tinfo\n\t\t\t\t<br />\n\t\t\t\tlog\n\t\t\t\t<br />\n\t\t\t\ttable\n\t\t\t\t<br />\n\t\t\t\ttrace\n\t\t\t\t<br />\n\t\t\t\twarn\n\t\t\t"},rainbowLinearGradient:"linear-gradient(to right,\n\t\t\thsl(0, 100%, 50%),\n\t\t\thsl(39, 100%, 50%),\n\t\t\thsl(60, 100%, 50%),\n\t\t\thsl(120, 100%, 50%),\n\t\t\thsl(180, 100%, 50%),\n\t\t\thsl(240, 100%, 50%),\n\t\t\thsl(300, 100%, 50%),\n\t\t\thsl(360, 100%, 50%)\n\t\t)",testArrays:[["foo","bar"],["bar","foo"]],testObjects:[{foo:"foo",bar:"bar"},{fooTwo:"fooTwo",barTwo:"barTwo"}]}},mounted:function(){this.welcomeLog()},methods:{testingLogs:function(){var e=this.testArrays[0],t=this.testArrays[1],n=this.testObjects[0],r=this.testObjects[1];this.$unicornLog({array:[].concat(g(e),g(t),[["foobar"]]),logPrefix:!0,objects:{testObj1:n,testObj2:r,testObj3:{barThree:"barThree",fooThree:"fooThree"}},text:"Testing Log",type:"log"})},welcomeLog:function(){this.$unicornLog({text:"Vue Unicorn Log... It's magical!",styles:["background: ".concat(this.rainbowLinearGradient),"color: #f7f7f7","display: block",'font-family: "Helvetica", "Arial"',"font-size: 25px","font-weight: bold","margin: 5px 0","padding: 15px","text-align: center","text-shadow: 1px 1px 2px #000"],type:"log"})}}}},"./plugins/UnicornLog.js":function(e,t,n){"use strict";n.r(t);var r=n("./plugins/UnicornLogCore.js");function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var s={install:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e;e.prototype.$unicornLog||e.prototype.$uniLog||(this.options=a(a({},this.options),t),n.prototype.$unicornLog=function(t){return r.default.init(e,s.options,t),!1},n.prototype.$uniLog=function(t){return r.default.init(e,s.options,t),!1})},options:{defaultStyles:{},disabled:!1,logPrefix:!1,styles:"",type:"log"}};t.default=s},"./plugins/UnicornLogCore.js":function(e,t,n){"use strict";function r(e){return function(e){if(Array.isArray(e))return o(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return o(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return o(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function o(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function a(e){return a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a(e)}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}n.r(t);var c="linear-gradient(to right,\n\thsl(0, 100%, 50%),\n\thsl(39, 100%, 50%),\n\thsl(60, 100%, 50%),\n\thsl(120, 100%, 50%),\n\thsl(180, 100%, 50%),\n\thsl(240, 100%, 50%),\n\thsl(300, 100%, 50%),\n\thsl(360, 100%, 50%)\n)",u={errors:0,logOptions:{},name:"UnicornLog",output:null,pluginOptions:{},types:["clear","count","countReset","debug","dir","error","group","groupCollapsed","groupEnd","info","log","table","time","timeEnd","timeLog","trace","warn"],defaultStyles:{log:["background-color: black","border-image: ".concat(c," 1"),"border-style: solid","border-width: 4px","color: #fff","font-weight: normal","padding: 8px"],info:["background-color: hsla(225, 100%, 8%, 1)","box-shadow: 999px 0 0 hsla(225, 100%, 8%, 1)","color: hsla(225, 100%, 85%, 1)","display: block","padding: 2px"],goNuts:["background: ".concat(c),"color: #f7f7f7","display: block",'font-family: "Helvetica", "Arial"',"font-size: 15px","font-weight: bold","margin: 5px 0","padding: 10px","text-shadow: 1px 1px 2px #000"]},magicalStyleNames:["magic","magical","prism","psychedelic","rainbow","trippy","unicorn"],defaultOptions:{array:[],defaultStyles:{},disabled:!0,logPrefix:!1,magical:!1,name:"[UnicornLog]:",objects:{},styles:"",text:"🦄",type:"log"},init:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return!t.disabled&&!n.disabled&&(this.pluginOptions=t,this.logOptions=s(s(s({},this.defaultOptions),this.pluginOptions),n),this.defaultStyles=s(s(s({},this.defaultStyles),this.pluginOptions.defaultStyles),n.defaultStyles),Object.values(this.validateOptions).map((function(e){return"function"==typeof e&&e.call()})),Object.values(this.build).map((function(e){return"function"==typeof e&&e.call()})),this.errors||this.consoleOutput(this.logOptions.type),!1)},validateOptions:{type:function(){var e=u.logOptions.type;return!u.types.includes(e)&&(u.errors+=1,"dirXml"===e?(u.logger("console.dir() is not supported console method.","warn"),!1):(u.logger("console.".concat(e,"() is not supported at this time or is not a valid console method."),"warn"),!1))},styles:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:u.logOptions.styles;e instanceof Array||"object"!==a(e)&&!Number.isInteger(e)||u.logger('The "styles" option is not a String or an Array.',"error")},logPrefix:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:u.logOptions.logPrefix;("object"===a(e)||e instanceof Boolean)&&u.logger('The "logPrefix" option is not a string or boolean.',"error")},text:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:u.logOptions.text;"string"!=typeof e&&u.logger('The "text" option is not a string.',"error")},objects:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:u.logOptions.objects;(e instanceof Array||"string"==typeof e||Number.isInteger(e))&&u.logger('The "objects" option is not an object.',"error")},array:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:u.logOptions.array;e instanceof Array&&"string"!=typeof e&&!Number.isInteger(e)||u.logger('The "array" option is not an array.',"error")}},build:{prefix:function(){var e=u.logOptions;e.logPrefix&&("string"==typeof e.logPrefix?e.text="".concat(e.logPrefix," ").concat(e.text):e.text="".concat(e.name," ").concat(e.text))},styles:function(){var e=u.logOptions,t=e.styles;t=!1===t?"":"log"!==e.type&&"info"!==e.type||!u.magicalStyleNames.includes(e.styles)&&!e.magical?""!==t&&!0!==t||"info"!==e.type?t||u.defaultStyles.log.join(";"):u.defaultStyles.info.join(";"):u.defaultStyles.goNuts.join(";"),Array.isArray(t)&&(t=t.join(";")),e.styles=t},output:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:u.logOptions,t=["%c%s",e.styles];e.text&&t.push(e.text),e.array.length&&t.push(e.array),Object.keys(e.objects).length&&t.push(e.objects),u.output=t}},consoleDir:function(){var e={};return Object.keys(this.logOptions.objects).length&&(Object.keys(this.logOptions.array).length?e.objects=this.logOptions.objects:Object.assign(e,this.logOptions.objects)),Object.keys(this.logOptions.array).length&&(Object.keys(this.logOptions.objects).length?e.array=this.logOptions.array:Object.assign(e,this.logOptions.array)),Object.keys(e).length?(u.logger("console.dir() does not support colors.","info"),e):u.logger('console.dir() expects the "objects" and/or array option value to be set.',"error")},consoleTable:function(){return u.logger("console.table() does not support colors.","info"),this.logOptions.array},consoleMethodNotSupported:function(e){this.errors+=1,u.logger("console.".concat(e,"() does not support colors."),"info")},consoleOutput:function(e){var t;("dir"===e&&(this.output=[this.consoleDir()]),"table"===e&&(this.output=[this.consoleTable()]),"count"!==e&&"countReset"!==e&&"time"!==e&&"timeEnd"!==e&&"timeLog"!==e||(this.output=[this.consoleMethodNotSupported(e)]),this.errors)||(t=console)[e].apply(t,r(this.output))},logger:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"An error has occurred.",t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"log",n=t.charAt(0).toUpperCase()+t.slice(1),r="";return"error"===t&&(this.errors+=1),"info"===t&&(r=this.defaultStyles.info.join(";")),console[t]("%c%s",r,"[".concat(u.name," ").concat(n,"]: ").concat(e)),!1}};t.default=u},"../node_modules/css-loader/dist/cjs.js!../node_modules/vue-code-highlight/themes/prism-tomorrow.css":function(e,t,n){"use strict";n.r(t);var r=n("../node_modules/css-loader/dist/runtime/sourceMaps.js"),o=n.n(r),a=n("../node_modules/css-loader/dist/runtime/api.js"),i=n.n(a)()(o());i.push([e.id,'/**\n * prism.js tomorrow night eighties for JavaScript, CoffeeScript, CSS and HTML\n * Based on https://github.com/chriskempson/tomorrow-theme\n * @author Rose Pritchard\n */\n\ncode[class*="language-"],\npre[class*="language-"] {\n\tcolor: #ccc;\n\tbackground: none;\n\tfont-family: Consolas, Monaco, \'Andale Mono\', \'Ubuntu Mono\', monospace;\n\ttext-align: left;\n\twhite-space: pre;\n\tword-spacing: normal;\n\tword-break: normal;\n\tword-wrap: normal;\n\tline-height: 1.5;\n\n\t-moz-tab-size: 4;\n\t-o-tab-size: 4;\n\ttab-size: 4;\n\n\t-webkit-hyphens: none;\n\t-moz-hyphens: none;\n\t-ms-hyphens: none;\n\thyphens: none;\n\n}\n\n/* Code blocks */\npre[class*="language-"] {\n\tpadding: 1em;\n\tmargin: .5em 0;\n\toverflow: auto;\n}\n\n:not(pre) > code[class*="language-"],\npre[class*="language-"] {\n\tbackground: #2d2d2d;\n}\n\n/* Inline code */\n:not(pre) > code[class*="language-"] {\n\tpadding: .1em;\n\tborder-radius: .3em;\n\twhite-space: normal;\n}\n\n.token.comment,\n.token.block-comment,\n.token.prolog,\n.token.doctype,\n.token.cdata {\n\tcolor: #999;\n}\n\n.token.punctuation {\n\tcolor: #ccc;\n}\n\n.token.tag,\n.token.attr-name,\n.token.namespace,\n.token.deleted {\n\tcolor: #e2777a;\n}\n\n.token.function-name {\n\tcolor: #6196cc;\n}\n\n.token.boolean,\n.token.number,\n.token.function {\n\tcolor: #f08d49;\n}\n\n.token.property,\n.token.class-name,\n.token.constant,\n.token.symbol {\n\tcolor: #f8c555;\n}\n\n.token.selector,\n.token.important,\n.token.atrule,\n.token.keyword,\n.token.builtin {\n\tcolor: #cc99cd;\n}\n\n.token.string,\n.token.char,\n.token.attr-value,\n.token.regex,\n.token.variable {\n\tcolor: #7ec699;\n}\n\n.token.operator,\n.token.entity,\n.token.url {\n\tcolor: #67cdcc;\n}\n\n.token.important,\n.token.bold {\n\tfont-weight: bold;\n}\n.token.italic {\n\tfont-style: italic;\n}\n\n.token.entity {\n\tcursor: help;\n}\n\n.token.inserted {\n\tcolor: green;\n}\n',"",{version:3,sources:["webpack://./../node_modules/vue-code-highlight/themes/prism-tomorrow.css"],names:[],mappings:"AAAA;;;;EAIE;;AAEF;;CAEC,WAAW;CACX,gBAAgB;CAChB,sEAAsE;CACtE,gBAAgB;CAChB,gBAAgB;CAChB,oBAAoB;CACpB,kBAAkB;CAClB,iBAAiB;CACjB,gBAAgB;;CAEhB,gBAAgB;CAChB,cAAc;CACd,WAAW;;CAEX,qBAAqB;CACrB,kBAAkB;CAClB,iBAAiB;CACjB,aAAa;;AAEd;;AAEA,gBAAgB;AAChB;CACC,YAAY;CACZ,cAAc;CACd,cAAc;AACf;;AAEA;;CAEC,mBAAmB;AACpB;;AAEA,gBAAgB;AAChB;CACC,aAAa;CACb,mBAAmB;CACnB,mBAAmB;AACpB;;AAEA;;;;;CAKC,WAAW;AACZ;;AAEA;CACC,WAAW;AACZ;;AAEA;;;;CAIC,cAAc;AACf;;AAEA;CACC,cAAc;AACf;;AAEA;;;CAGC,cAAc;AACf;;AAEA;;;;CAIC,cAAc;AACf;;AAEA;;;;;CAKC,cAAc;AACf;;AAEA;;;;;CAKC,cAAc;AACf;;AAEA;;;CAGC,cAAc;AACf;;AAEA;;CAEC,iBAAiB;AAClB;AACA;CACC,kBAAkB;AACnB;;AAEA;CACC,YAAY;AACb;;AAEA;CACC,YAAY;AACb",sourcesContent:['/**\n * prism.js tomorrow night eighties for JavaScript, CoffeeScript, CSS and HTML\n * Based on https://github.com/chriskempson/tomorrow-theme\n * @author Rose Pritchard\n */\n\ncode[class*="language-"],\npre[class*="language-"] {\n\tcolor: #ccc;\n\tbackground: none;\n\tfont-family: Consolas, Monaco, \'Andale Mono\', \'Ubuntu Mono\', monospace;\n\ttext-align: left;\n\twhite-space: pre;\n\tword-spacing: normal;\n\tword-break: normal;\n\tword-wrap: normal;\n\tline-height: 1.5;\n\n\t-moz-tab-size: 4;\n\t-o-tab-size: 4;\n\ttab-size: 4;\n\n\t-webkit-hyphens: none;\n\t-moz-hyphens: none;\n\t-ms-hyphens: none;\n\thyphens: none;\n\n}\n\n/* Code blocks */\npre[class*="language-"] {\n\tpadding: 1em;\n\tmargin: .5em 0;\n\toverflow: auto;\n}\n\n:not(pre) > code[class*="language-"],\npre[class*="language-"] {\n\tbackground: #2d2d2d;\n}\n\n/* Inline code */\n:not(pre) > code[class*="language-"] {\n\tpadding: .1em;\n\tborder-radius: .3em;\n\twhite-space: normal;\n}\n\n.token.comment,\n.token.block-comment,\n.token.prolog,\n.token.doctype,\n.token.cdata {\n\tcolor: #999;\n}\n\n.token.punctuation {\n\tcolor: #ccc;\n}\n\n.token.tag,\n.token.attr-name,\n.token.namespace,\n.token.deleted {\n\tcolor: #e2777a;\n}\n\n.token.function-name {\n\tcolor: #6196cc;\n}\n\n.token.boolean,\n.token.number,\n.token.function {\n\tcolor: #f08d49;\n}\n\n.token.property,\n.token.class-name,\n.token.constant,\n.token.symbol {\n\tcolor: #f8c555;\n}\n\n.token.selector,\n.token.important,\n.token.atrule,\n.token.keyword,\n.token.builtin {\n\tcolor: #cc99cd;\n}\n\n.token.string,\n.token.char,\n.token.attr-value,\n.token.regex,\n.token.variable {\n\tcolor: #7ec699;\n}\n\n.token.operator,\n.token.entity,\n.token.url {\n\tcolor: #67cdcc;\n}\n\n.token.important,\n.token.bold {\n\tfont-weight: bold;\n}\n.token.italic {\n\tfont-style: italic;\n}\n\n.token.entity {\n\tcursor: help;\n}\n\n.token.inserted {\n\tcolor: green;\n}\n'],sourceRoot:""}]),t.default=i},"../node_modules/css-loader/dist/cjs.js!../node_modules/vue-code-highlight/themes/window.css":function(e,t,n){"use strict";n.r(t);var r=n("../node_modules/css-loader/dist/runtime/sourceMaps.js"),o=n.n(r),a=n("../node_modules/css-loader/dist/runtime/api.js"),i=n.n(a),s=n("../node_modules/css-loader/dist/runtime/getUrl.js"),l=n.n(s),c=new URL(n('data:image/svg+xml;utf8, <svg xmlns="http://www.w3.org/2000/svg" width="54" height="14" viewBox="0 0 54 14"><g fill="none" fillRule="evenodd" transform="translate%281 1%29"><circle cx="6" cy="6" r="6" fill="%23FF5F56" stroke="%23E0443E" strokeWidth=".5" /><circle cx="26" cy="6" r="6" fill="%23FFBD2E" stroke="%23DEA123" strokeWidth=".5" /><circle cx="46" cy="6" r="6" fill="%2327C93F" stroke="%231AAB29" strokeWidth=".5" /></g></svg>'),n.b),u=i()(o()),d=l()(c);u.push([e.id,'div pre[class*="language-"] {\n  display: inline-block;\n  width: 100%;\n  padding-right: 10em;\n  padding-top: 3rem;\n  border-radius: 6px;\n  background-image: url('+d+");\n  background-repeat: no-repeat;\n  background-position: 16px 16px;\n  box-shadow: 5px 5px 15px 0px rgba(50, 50, 50, 0.75);\n}\n","",{version:3,sources:["webpack://./../node_modules/vue-code-highlight/themes/window.css"],names:[],mappings:"AAAA;EACE,qBAAqB;EACrB,WAAW;EACX,mBAAmB;EACnB,iBAAiB;EACjB,kBAAkB;EAClB,yDAAuc;EACvc,4BAA4B;EAC5B,8BAA8B;EAC9B,mDAAmD;AACrD",sourcesContent:['div pre[class*="language-"] {\n  display: inline-block;\n  width: 100%;\n  padding-right: 10em;\n  padding-top: 3rem;\n  border-radius: 6px;\n  background-image: url(\'data:image/svg+xml;utf8, <svg xmlns="http://www.w3.org/2000/svg" width="54" height="14" viewBox="0 0 54 14"><g fill="none" fillRule="evenodd" transform="translate(1 1)"><circle cx="6" cy="6" r="6" fill="%23FF5F56" stroke="%23E0443E" strokeWidth=".5" /><circle cx="26" cy="6" r="6" fill="%23FFBD2E" stroke="%23DEA123" strokeWidth=".5" /><circle cx="46" cy="6" r="6" fill="%2327C93F" stroke="%231AAB29" strokeWidth=".5" /></g></svg>\');\n  background-repeat: no-repeat;\n  background-position: 16px 16px;\n  box-shadow: 5px 5px 15px 0px rgba(50, 50, 50, 0.75);\n}\n'],sourceRoot:""}]),t.default=u},"../node_modules/css-loader/dist/cjs.js!../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../node_modules/sass-loader/dist/cjs.js??clonedRuleSet-3[0].rules[0].use[2]!../node_modules/vue-loader/lib/index.js??vue-loader-options!./docs/UnicornLog.vue?vue&type=style&index=0&lang=scss&":function(e,t,n){"use strict";n.r(t);var r=n("../node_modules/css-loader/dist/runtime/sourceMaps.js"),o=n.n(r),a=n("../node_modules/css-loader/dist/runtime/api.js"),i=n.n(a),s=n("../node_modules/css-loader/dist/cjs.js!../node_modules/vue-code-highlight/themes/prism-tomorrow.css"),l=n("../node_modules/css-loader/dist/cjs.js!../node_modules/vue-code-highlight/themes/window.css"),c=i()(o());c.i(s.default),c.i(l.default),c.push([e.id,'html {\n  scroll-padding-top: 70px;\n}\nh1 {\n  font-family: "Henny Penny", cursive;\n  font-weight: bold;\n  font-size: 3em;\n}\nh2 {\n  font-family: "Indie Flower", cursive;\n}\nh2::after {\n  content: " ";\n  background-image: linear-gradient(to right, red, #ffa600, yellow, lime, aqua, blue, fuchsia, red);\n  border-radius: 5px;\n  display: block;\n  height: 2px;\n}\n.table tbody td pre {\n  background-color: #fafafa !important;\n  border-radius: 5px;\n  padding: 1rem;\n  tab-size: 2;\n}\n.option-type {\n  color: #7b1fa3 !important;\n  font-weight: 500;\n}\n.boolean-style {\n  color: blue !important;\n  font-weight: 500;\n}\n.rainbow-text {\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n  background-clip: text;\n  background-image: linear-gradient(to right, red, #ffa600, yellow, lime, aqua, blue, fuchsia, red);\n  border-radius: 5px;\n  color: transparent;\n  display: inline-block;\n  font-weight: bold;\n  height: 100%;\n  text-shadow: 0 2px 3px rgba(255, 255, 255, 0.3), 0 -1px 2px rgba(0, 0, 0, 0.2);\n}\n.rainbow-border {\n  background-color: #000;\n  border-image: linear-gradient(to right, red, #ffa600, yellow, lime, aqua, blue, fuchsia, red) 1;\n  border-style: solid;\n  border-width: 4px;\n  padding: 2rem;\n}',"",{version:3,sources:["webpack://./docs/UnicornLog.vue","webpack://./../UnicornLog.vue"],names:[],mappings:"AAmnBA;EACC,wBAAA;AChnBD;ADmnBA;EACC,mCAAA;EACA,iBAAA;EACA,cAAA;AChnBD;ADmnBA;EACC,oCAAA;AChnBD;ADknBC;EACC,YAAA;EACA,iGA3BiB;EA4BjB,kBAAA;EACA,cAAA;EACA,WAAA;AChnBF;ADunBG;EACC,oCAAA;EACA,kBAAA;EACA,aAAA;EACA,WAAA;ACpnBJ;AD0nBA;EACC,yBAAA;EACA,gBAAA;ACvnBD;AD0nBA;EACC,sBAAA;EACA,gBAAA;ACvnBD;AD0nBA;EACC,6BAAA;EACA,oCAAA;EACA,qBAAA;EACA,iGA7DkB;EA8DlB,kBAAA;EACA,kBAAA;EACA,qBAAA;EACA,iBAAA;EACA,YAAA;EACA,8EAAA;ACvnBD;AD0nBA;EACC,sBAAA;EACA,+FAAA;EACA,mBAAA;EACA,iBAAA;EACA,aAAA;ACvnBD",sourcesContent:["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n@import 'vue-code-highlight/themes/prism-tomorrow.css';\n@import 'vue-code-highlight/themes/window.css';\n\n$rainbow-gradient: linear-gradient(\n\tto right,\n\thsl(0, 100%, 50%),\n\thsl(39, 100%, 50%),\n\thsl(60, 100%, 50%),\n\thsl(120, 100%, 50%),\n\thsl(180, 100%, 50%),\n\thsl(240, 100%, 50%),\n\thsl(300, 100%, 50%),\n\thsl(0, 100%, 50%)\n);\n\nhtml {\n\tscroll-padding-top: 70px;\n}\n\nh1 {\n\tfont-family: 'Henny Penny', cursive;\n\tfont-weight: bold;\n\tfont-size: 3em;\n}\n\nh2 {\n\tfont-family: 'Indie Flower', cursive;\n\n\t&::after {\n\t\tcontent: ' ';\n\t\tbackground-image: $rainbow-gradient;\n\t\tborder-radius: 5px;\n\t\tdisplay: block;\n\t\theight: 2px;\n\t}\n}\n\n.table {\n\ttbody {\n\t\ttd {\n\t\t\tpre {\n\t\t\t\tbackground-color: #fafafa !important;\n\t\t\t\tborder-radius: 5px;\n\t\t\t\tpadding: 1rem;\n\t\t\t\ttab-size: 2;\n\t\t\t}\n\t\t}\n\t}\n}\n\n.option-type {\n\tcolor: hsl(282, 68%, 38%) !important;\n\tfont-weight: 500;\n}\n\n.boolean-style {\n\tcolor: hsl(240, 100%, 50%) !important;\n\tfont-weight: 500;\n}\n\n.rainbow-text {\n\t-webkit-background-clip: text;\n\t-webkit-text-fill-color: transparent;\n\tbackground-clip: text;\n\tbackground-image: $rainbow-gradient;\n\tborder-radius: 5px;\n\tcolor: transparent;\n\tdisplay: inline-block;\n\tfont-weight: bold;\n\theight: 100%;\n\ttext-shadow: 0 2px 3px rgba(255, 255, 255, 0.3), 0 -1px 2px rgba(0, 0, 0, 0.2);\n}\n\n.rainbow-border {\n\tbackground-color: #000;\n\tborder-image: $rainbow-gradient 1;\n\tborder-style: solid;\n\tborder-width: 4px;\n\tpadding: 2rem;\n}\n",'@import \'vue-code-highlight/themes/prism-tomorrow.css\';\n@import \'vue-code-highlight/themes/window.css\';\nhtml {\n  scroll-padding-top: 70px;\n}\n\nh1 {\n  font-family: "Henny Penny", cursive;\n  font-weight: bold;\n  font-size: 3em;\n}\n\nh2 {\n  font-family: "Indie Flower", cursive;\n}\nh2::after {\n  content: " ";\n  background-image: linear-gradient(to right, red, #ffa600, yellow, lime, aqua, blue, fuchsia, red);\n  border-radius: 5px;\n  display: block;\n  height: 2px;\n}\n\n.table tbody td pre {\n  background-color: #fafafa !important;\n  border-radius: 5px;\n  padding: 1rem;\n  tab-size: 2;\n}\n\n.option-type {\n  color: #7b1fa3 !important;\n  font-weight: 500;\n}\n\n.boolean-style {\n  color: blue !important;\n  font-weight: 500;\n}\n\n.rainbow-text {\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n  background-clip: text;\n  background-image: linear-gradient(to right, red, #ffa600, yellow, lime, aqua, blue, fuchsia, red);\n  border-radius: 5px;\n  color: transparent;\n  display: inline-block;\n  font-weight: bold;\n  height: 100%;\n  text-shadow: 0 2px 3px rgba(255, 255, 255, 0.3), 0 -1px 2px rgba(0, 0, 0, 0.2);\n}\n\n.rainbow-border {\n  background-color: #000;\n  border-image: linear-gradient(to right, red, #ffa600, yellow, lime, aqua, blue, fuchsia, red) 1;\n  border-style: solid;\n  border-width: 4px;\n  padding: 2rem;\n}'],sourceRoot:""}]),t.default=c},"../node_modules/css-loader/dist/runtime/api.js":function(e){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(i[l]=!0)}for(var c=0;c<e.length;c++){var u=[].concat(e[c]);r&&i[u[0]]||(void 0!==a&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=a),n&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=n):u[2]=n),o&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=o):u[4]="".concat(o)),t.push(u))}},t}},"../node_modules/css-loader/dist/runtime/getUrl.js":function(e){"use strict";e.exports=function(e,t){return t||(t={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),t.hash&&(e+=t.hash),/["'() \t\n]|(%20)/.test(e)||t.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},"../node_modules/css-loader/dist/runtime/sourceMaps.js":function(e){"use strict";e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */"),i=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[t].concat(i).concat([a]).join("\n")}return[t].join("\n")}},"../node_modules/events/events.js":function(e){"use strict";var t,n="object"==typeof Reflect?Reflect:null,r=n&&"function"==typeof n.apply?n.apply:function(e,t,n){return Function.prototype.apply.call(e,t,n)};t=n&&"function"==typeof n.ownKeys?n.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var o=Number.isNaN||function(e){return e!=e};function a(){a.init.call(this)}e.exports=a,e.exports.once=function(e,t){return new Promise((function(n,r){function o(n){e.removeListener(t,a),r(n)}function a(){"function"==typeof e.removeListener&&e.removeListener("error",o),n([].slice.call(arguments))}m(e,t,a,{once:!0}),"error"!==t&&function(e,t,n){"function"==typeof e.on&&m(e,"error",t,n)}(e,o,{once:!0})}))},a.EventEmitter=a,a.prototype._events=void 0,a.prototype._eventsCount=0,a.prototype._maxListeners=void 0;var i=10;function s(e){if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e)}function l(e){return void 0===e._maxListeners?a.defaultMaxListeners:e._maxListeners}function c(e,t,n,r){var o,a,i,c;if(s(n),void 0===(a=e._events)?(a=e._events=Object.create(null),e._eventsCount=0):(void 0!==a.newListener&&(e.emit("newListener",t,n.listener?n.listener:n),a=e._events),i=a[t]),void 0===i)i=a[t]=n,++e._eventsCount;else if("function"==typeof i?i=a[t]=r?[n,i]:[i,n]:r?i.unshift(n):i.push(n),(o=l(e))>0&&i.length>o&&!i.warned){i.warned=!0;var u=new Error("Possible EventEmitter memory leak detected. "+i.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");u.name="MaxListenersExceededWarning",u.emitter=e,u.type=t,u.count=i.length,c=u,console&&console.warn&&console.warn(c)}return e}function u(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function d(e,t,n){var r={fired:!1,wrapFn:void 0,target:e,type:t,listener:n},o=u.bind(r);return o.listener=n,r.wrapFn=o,o}function p(e,t,n){var r=e._events;if(void 0===r)return[];var o=r[t];return void 0===o?[]:"function"==typeof o?n?[o.listener||o]:[o]:n?function(e){for(var t=new Array(e.length),n=0;n<t.length;++n)t[n]=e[n].listener||e[n];return t}(o):v(o,o.length)}function f(e){var t=this._events;if(void 0!==t){var n=t[e];if("function"==typeof n)return 1;if(void 0!==n)return n.length}return 0}function v(e,t){for(var n=new Array(t),r=0;r<t;++r)n[r]=e[r];return n}function m(e,t,n,r){if("function"==typeof e.on)r.once?e.once(t,n):e.on(t,n);else{if("function"!=typeof e.addEventListener)throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof e);e.addEventListener(t,(function o(a){r.once&&e.removeEventListener(t,o),n(a)}))}}Object.defineProperty(a,"defaultMaxListeners",{enumerable:!0,get:function(){return i},set:function(e){if("number"!=typeof e||e<0||o(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");i=e}}),a.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},a.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||o(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},a.prototype.getMaxListeners=function(){return l(this)},a.prototype.emit=function(e){for(var t=[],n=1;n<arguments.length;n++)t.push(arguments[n]);var o="error"===e,a=this._events;if(void 0!==a)o=o&&void 0===a.error;else if(!o)return!1;if(o){var i;if(t.length>0&&(i=t[0]),i instanceof Error)throw i;var s=new Error("Unhandled error."+(i?" ("+i.message+")":""));throw s.context=i,s}var l=a[e];if(void 0===l)return!1;if("function"==typeof l)r(l,this,t);else{var c=l.length,u=v(l,c);for(n=0;n<c;++n)r(u[n],this,t)}return!0},a.prototype.addListener=function(e,t){return c(this,e,t,!1)},a.prototype.on=a.prototype.addListener,a.prototype.prependListener=function(e,t){return c(this,e,t,!0)},a.prototype.once=function(e,t){return s(t),this.on(e,d(this,e,t)),this},a.prototype.prependOnceListener=function(e,t){return s(t),this.prependListener(e,d(this,e,t)),this},a.prototype.removeListener=function(e,t){var n,r,o,a,i;if(s(t),void 0===(r=this._events))return this;if(void 0===(n=r[e]))return this;if(n===t||n.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete r[e],r.removeListener&&this.emit("removeListener",e,n.listener||t));else if("function"!=typeof n){for(o=-1,a=n.length-1;a>=0;a--)if(n[a]===t||n[a].listener===t){i=n[a].listener,o=a;break}if(o<0)return this;0===o?n.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(n,o),1===n.length&&(r[e]=n[0]),void 0!==r.removeListener&&this.emit("removeListener",e,i||t)}return this},a.prototype.off=a.prototype.removeListener,a.prototype.removeAllListeners=function(e){var t,n,r;if(void 0===(n=this._events))return this;if(void 0===n.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==n[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete n[e]),this;if(0===arguments.length){var o,a=Object.keys(n);for(r=0;r<a.length;++r)"removeListener"!==(o=a[r])&&this.removeAllListeners(o);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=n[e]))this.removeListener(e,t);else if(void 0!==t)for(r=t.length-1;r>=0;r--)this.removeListener(e,t[r]);return this},a.prototype.listeners=function(e){return p(this,e,!0)},a.prototype.rawListeners=function(e){return p(this,e,!1)},a.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):f.call(e,t)},a.prototype.listenerCount=f,a.prototype.eventNames=function(){return this._eventsCount>0?t(this._events):[]}},"../node_modules/html-entities/lib/index.js":function(e,t,n){"use strict";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},r.apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0});var o=n("../node_modules/html-entities/lib/named-references.js"),a=n("../node_modules/html-entities/lib/numeric-unicode-map.js"),i=n("../node_modules/html-entities/lib/surrogate-pairs.js"),s=r(r({},o.namedReferences),{all:o.namedReferences.html5}),l={specialChars:/[<>'"&]/g,nonAscii:/(?:[<>'"&\u0080-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/g,nonAsciiPrintable:/(?:[<>'"&\x01-\x08\x11-\x15\x17-\x1F\x7f-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/g,extensive:/(?:[\x01-\x0c\x0e-\x1f\x21-\x2c\x2e-\x2f\x3a-\x40\x5b-\x60\x7b-\x7d\x7f-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/g},c={mode:"specialChars",level:"all",numeric:"decimal"};t.encode=function(e,t){var n=void 0===(u=(a=void 0===t?c:t).mode)?"specialChars":u,r=void 0===(v=a.numeric)?"decimal":v,o=a.level;if(!e)return"";var a,u,d=l[n],p=s[void 0===o?"all":o].characters,f="hexadecimal"===r;if(d.lastIndex=0,a=d.exec(e)){u="";var v=0;do{v!==a.index&&(u+=e.substring(v,a.index));var m=p[o=a[0]];if(!m){var g=o.length>1?i.getCodePoint(o,0):o.charCodeAt(0);m=(f?"&#x"+g.toString(16):"&#"+g)+";"}u+=m,v=a.index+o.length}while(a=d.exec(e));v!==e.length&&(u+=e.substring(v))}else u=e;return u};var u={scope:"body",level:"all"},d=/&(?:#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+);/g,p=/&(?:#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+)[;=]?/g,f={xml:{strict:d,attribute:p,body:o.bodyRegExps.xml},html4:{strict:d,attribute:p,body:o.bodyRegExps.html4},html5:{strict:d,attribute:p,body:o.bodyRegExps.html5}},v=r(r({},f),{all:f.html5}),m=String.fromCharCode,g=m(65533),h={level:"all"};t.decodeEntity=function(e,t){var n=void 0===(r=(void 0===t?h:t).level)?"all":r;if(!e)return"";var r=e,o=(e[e.length-1],s[n].entities[e]);if(o)r=o;else if("&"===e[0]&&"#"===e[1]){var l=e[2],c="x"==l||"X"==l?parseInt(e.substr(3),16):parseInt(e.substr(2));r=c>=1114111?g:c>65535?i.fromCodePoint(c):m(a.numericUnicodeMap[c]||c)}return r},t.decode=function(e,t){var n=void 0===t?u:t,r=n.level,o=void 0===r?"all":r,l=n.scope,c=void 0===l?"xml"===o?"strict":"body":l;if(!e)return"";var d=v[o][c],p=s[o].entities,f="attribute"===c,h="strict"===c;d.lastIndex=0;var b,y=d.exec(e);if(y){b="";var _=0;do{_!==y.index&&(b+=e.substring(_,y.index));var x=y[0],w=x,A=x[x.length-1];if(f&&"="===A)w=x;else if(h&&";"!==A)w=x;else{var C=p[x];if(C)w=C;else if("&"===x[0]&&"#"===x[1]){var k=x[2],j="x"==k||"X"==k?parseInt(x.substr(3),16):parseInt(x.substr(2));w=j>=1114111?g:j>65535?i.fromCodePoint(j):m(a.numericUnicodeMap[j]||j)}}b+=w,_=y.index+x.length}while(y=d.exec(e));_!==e.length&&(b+=e.substring(_))}else b=e;return b}},"../node_modules/html-entities/lib/named-references.js":function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.bodyRegExps={xml:/&(?:#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+);?/g,html4:/&(?:nbsp|iexcl|cent|pound|curren|yen|brvbar|sect|uml|copy|ordf|laquo|not|shy|reg|macr|deg|plusmn|sup2|sup3|acute|micro|para|middot|cedil|sup1|ordm|raquo|frac14|frac12|frac34|iquest|Agrave|Aacute|Acirc|Atilde|Auml|Aring|AElig|Ccedil|Egrave|Eacute|Ecirc|Euml|Igrave|Iacute|Icirc|Iuml|ETH|Ntilde|Ograve|Oacute|Ocirc|Otilde|Ouml|times|Oslash|Ugrave|Uacute|Ucirc|Uuml|Yacute|THORN|szlig|agrave|aacute|acirc|atilde|auml|aring|aelig|ccedil|egrave|eacute|ecirc|euml|igrave|iacute|icirc|iuml|eth|ntilde|ograve|oacute|ocirc|otilde|ouml|divide|oslash|ugrave|uacute|ucirc|uuml|yacute|thorn|yuml|quot|amp|lt|gt|#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+);?/g,html5:/&(?:AElig|AMP|Aacute|Acirc|Agrave|Aring|Atilde|Auml|COPY|Ccedil|ETH|Eacute|Ecirc|Egrave|Euml|GT|Iacute|Icirc|Igrave|Iuml|LT|Ntilde|Oacute|Ocirc|Ograve|Oslash|Otilde|Ouml|QUOT|REG|THORN|Uacute|Ucirc|Ugrave|Uuml|Yacute|aacute|acirc|acute|aelig|agrave|amp|aring|atilde|auml|brvbar|ccedil|cedil|cent|copy|curren|deg|divide|eacute|ecirc|egrave|eth|euml|frac12|frac14|frac34|gt|iacute|icirc|iexcl|igrave|iquest|iuml|laquo|lt|macr|micro|middot|nbsp|not|ntilde|oacute|ocirc|ograve|ordf|ordm|oslash|otilde|ouml|para|plusmn|pound|quot|raquo|reg|sect|shy|sup1|sup2|sup3|szlig|thorn|times|uacute|ucirc|ugrave|uml|uuml|yacute|yen|yuml|#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+);?/g},t.namedReferences={xml:{entities:{"&lt;":"<","&gt;":">","&quot;":'"',"&apos;":"'","&amp;":"&"},characters:{"<":"&lt;",">":"&gt;",'"':"&quot;","'":"&apos;","&":"&amp;"}},html4:{entities:{"&apos;":"'","&nbsp":" ","&nbsp;":" ","&iexcl":"¡","&iexcl;":"¡","&cent":"¢","&cent;":"¢","&pound":"£","&pound;":"£","&curren":"¤","&curren;":"¤","&yen":"¥","&yen;":"¥","&brvbar":"¦","&brvbar;":"¦","&sect":"§","&sect;":"§","&uml":"¨","&uml;":"¨","&copy":"©","&copy;":"©","&ordf":"ª","&ordf;":"ª","&laquo":"«","&laquo;":"«","&not":"¬","&not;":"¬","&shy":"­","&shy;":"­","&reg":"®","&reg;":"®","&macr":"¯","&macr;":"¯","&deg":"°","&deg;":"°","&plusmn":"±","&plusmn;":"±","&sup2":"²","&sup2;":"²","&sup3":"³","&sup3;":"³","&acute":"´","&acute;":"´","&micro":"µ","&micro;":"µ","&para":"¶","&para;":"¶","&middot":"·","&middot;":"·","&cedil":"¸","&cedil;":"¸","&sup1":"¹","&sup1;":"¹","&ordm":"º","&ordm;":"º","&raquo":"»","&raquo;":"»","&frac14":"¼","&frac14;":"¼","&frac12":"½","&frac12;":"½","&frac34":"¾","&frac34;":"¾","&iquest":"¿","&iquest;":"¿","&Agrave":"À","&Agrave;":"À","&Aacute":"Á","&Aacute;":"Á","&Acirc":"Â","&Acirc;":"Â","&Atilde":"Ã","&Atilde;":"Ã","&Auml":"Ä","&Auml;":"Ä","&Aring":"Å","&Aring;":"Å","&AElig":"Æ","&AElig;":"Æ","&Ccedil":"Ç","&Ccedil;":"Ç","&Egrave":"È","&Egrave;":"È","&Eacute":"É","&Eacute;":"É","&Ecirc":"Ê","&Ecirc;":"Ê","&Euml":"Ë","&Euml;":"Ë","&Igrave":"Ì","&Igrave;":"Ì","&Iacute":"Í","&Iacute;":"Í","&Icirc":"Î","&Icirc;":"Î","&Iuml":"Ï","&Iuml;":"Ï","&ETH":"Ð","&ETH;":"Ð","&Ntilde":"Ñ","&Ntilde;":"Ñ","&Ograve":"Ò","&Ograve;":"Ò","&Oacute":"Ó","&Oacute;":"Ó","&Ocirc":"Ô","&Ocirc;":"Ô","&Otilde":"Õ","&Otilde;":"Õ","&Ouml":"Ö","&Ouml;":"Ö","&times":"×","&times;":"×","&Oslash":"Ø","&Oslash;":"Ø","&Ugrave":"Ù","&Ugrave;":"Ù","&Uacute":"Ú","&Uacute;":"Ú","&Ucirc":"Û","&Ucirc;":"Û","&Uuml":"Ü","&Uuml;":"Ü","&Yacute":"Ý","&Yacute;":"Ý","&THORN":"Þ","&THORN;":"Þ","&szlig":"ß","&szlig;":"ß","&agrave":"à","&agrave;":"à","&aacute":"á","&aacute;":"á","&acirc":"â","&acirc;":"â","&atilde":"ã","&atilde;":"ã","&auml":"ä","&auml;":"ä","&aring":"å","&aring;":"å","&aelig":"æ","&aelig;":"æ","&ccedil":"ç","&ccedil;":"ç","&egrave":"è","&egrave;":"è","&eacute":"é","&eacute;":"é","&ecirc":"ê","&ecirc;":"ê","&euml":"ë","&euml;":"ë","&igrave":"ì","&igrave;":"ì","&iacute":"í","&iacute;":"í","&icirc":"î","&icirc;":"î","&iuml":"ï","&iuml;":"ï","&eth":"ð","&eth;":"ð","&ntilde":"ñ","&ntilde;":"ñ","&ograve":"ò","&ograve;":"ò","&oacute":"ó","&oacute;":"ó","&ocirc":"ô","&ocirc;":"ô","&otilde":"õ","&otilde;":"õ","&ouml":"ö","&ouml;":"ö","&divide":"÷","&divide;":"÷","&oslash":"ø","&oslash;":"ø","&ugrave":"ù","&ugrave;":"ù","&uacute":"ú","&uacute;":"ú","&ucirc":"û","&ucirc;":"û","&uuml":"ü","&uuml;":"ü","&yacute":"ý","&yacute;":"ý","&thorn":"þ","&thorn;":"þ","&yuml":"ÿ","&yuml;":"ÿ","&quot":'"',"&quot;":'"',"&amp":"&","&amp;":"&","&lt":"<","&lt;":"<","&gt":">","&gt;":">","&OElig;":"Œ","&oelig;":"œ","&Scaron;":"Š","&scaron;":"š","&Yuml;":"Ÿ","&circ;":"ˆ","&tilde;":"˜","&ensp;":" ","&emsp;":" ","&thinsp;":" ","&zwnj;":"‌","&zwj;":"‍","&lrm;":"‎","&rlm;":"‏","&ndash;":"–","&mdash;":"—","&lsquo;":"‘","&rsquo;":"’","&sbquo;":"‚","&ldquo;":"“","&rdquo;":"”","&bdquo;":"„","&dagger;":"†","&Dagger;":"‡","&permil;":"‰","&lsaquo;":"‹","&rsaquo;":"›","&euro;":"€","&fnof;":"ƒ","&Alpha;":"Α","&Beta;":"Β","&Gamma;":"Γ","&Delta;":"Δ","&Epsilon;":"Ε","&Zeta;":"Ζ","&Eta;":"Η","&Theta;":"Θ","&Iota;":"Ι","&Kappa;":"Κ","&Lambda;":"Λ","&Mu;":"Μ","&Nu;":"Ν","&Xi;":"Ξ","&Omicron;":"Ο","&Pi;":"Π","&Rho;":"Ρ","&Sigma;":"Σ","&Tau;":"Τ","&Upsilon;":"Υ","&Phi;":"Φ","&Chi;":"Χ","&Psi;":"Ψ","&Omega;":"Ω","&alpha;":"α","&beta;":"β","&gamma;":"γ","&delta;":"δ","&epsilon;":"ε","&zeta;":"ζ","&eta;":"η","&theta;":"θ","&iota;":"ι","&kappa;":"κ","&lambda;":"λ","&mu;":"μ","&nu;":"ν","&xi;":"ξ","&omicron;":"ο","&pi;":"π","&rho;":"ρ","&sigmaf;":"ς","&sigma;":"σ","&tau;":"τ","&upsilon;":"υ","&phi;":"φ","&chi;":"χ","&psi;":"ψ","&omega;":"ω","&thetasym;":"ϑ","&upsih;":"ϒ","&piv;":"ϖ","&bull;":"•","&hellip;":"…","&prime;":"′","&Prime;":"″","&oline;":"‾","&frasl;":"⁄","&weierp;":"℘","&image;":"ℑ","&real;":"ℜ","&trade;":"™","&alefsym;":"ℵ","&larr;":"←","&uarr;":"↑","&rarr;":"→","&darr;":"↓","&harr;":"↔","&crarr;":"↵","&lArr;":"⇐","&uArr;":"⇑","&rArr;":"⇒","&dArr;":"⇓","&hArr;":"⇔","&forall;":"∀","&part;":"∂","&exist;":"∃","&empty;":"∅","&nabla;":"∇","&isin;":"∈","&notin;":"∉","&ni;":"∋","&prod;":"∏","&sum;":"∑","&minus;":"−","&lowast;":"∗","&radic;":"√","&prop;":"∝","&infin;":"∞","&ang;":"∠","&and;":"∧","&or;":"∨","&cap;":"∩","&cup;":"∪","&int;":"∫","&there4;":"∴","&sim;":"∼","&cong;":"≅","&asymp;":"≈","&ne;":"≠","&equiv;":"≡","&le;":"≤","&ge;":"≥","&sub;":"⊂","&sup;":"⊃","&nsub;":"⊄","&sube;":"⊆","&supe;":"⊇","&oplus;":"⊕","&otimes;":"⊗","&perp;":"⊥","&sdot;":"⋅","&lceil;":"⌈","&rceil;":"⌉","&lfloor;":"⌊","&rfloor;":"⌋","&lang;":"〈","&rang;":"〉","&loz;":"◊","&spades;":"♠","&clubs;":"♣","&hearts;":"♥","&diams;":"♦"},characters:{"'":"&apos;"," ":"&nbsp;","¡":"&iexcl;","¢":"&cent;","£":"&pound;","¤":"&curren;","¥":"&yen;","¦":"&brvbar;","§":"&sect;","¨":"&uml;","©":"&copy;","ª":"&ordf;","«":"&laquo;","¬":"&not;","­":"&shy;","®":"&reg;","¯":"&macr;","°":"&deg;","±":"&plusmn;","²":"&sup2;","³":"&sup3;","´":"&acute;","µ":"&micro;","¶":"&para;","·":"&middot;","¸":"&cedil;","¹":"&sup1;","º":"&ordm;","»":"&raquo;","¼":"&frac14;","½":"&frac12;","¾":"&frac34;","¿":"&iquest;","À":"&Agrave;","Á":"&Aacute;","Â":"&Acirc;","Ã":"&Atilde;","Ä":"&Auml;","Å":"&Aring;","Æ":"&AElig;","Ç":"&Ccedil;","È":"&Egrave;","É":"&Eacute;","Ê":"&Ecirc;","Ë":"&Euml;","Ì":"&Igrave;","Í":"&Iacute;","Î":"&Icirc;","Ï":"&Iuml;","Ð":"&ETH;","Ñ":"&Ntilde;","Ò":"&Ograve;","Ó":"&Oacute;","Ô":"&Ocirc;","Õ":"&Otilde;","Ö":"&Ouml;","×":"&times;","Ø":"&Oslash;","Ù":"&Ugrave;","Ú":"&Uacute;","Û":"&Ucirc;","Ü":"&Uuml;","Ý":"&Yacute;","Þ":"&THORN;","ß":"&szlig;","à":"&agrave;","á":"&aacute;","â":"&acirc;","ã":"&atilde;","ä":"&auml;","å":"&aring;","æ":"&aelig;","ç":"&ccedil;","è":"&egrave;","é":"&eacute;","ê":"&ecirc;","ë":"&euml;","ì":"&igrave;","í":"&iacute;","î":"&icirc;","ï":"&iuml;","ð":"&eth;","ñ":"&ntilde;","ò":"&ograve;","ó":"&oacute;","ô":"&ocirc;","õ":"&otilde;","ö":"&ouml;","÷":"&divide;","ø":"&oslash;","ù":"&ugrave;","ú":"&uacute;","û":"&ucirc;","ü":"&uuml;","ý":"&yacute;","þ":"&thorn;","ÿ":"&yuml;",'"':"&quot;","&":"&amp;","<":"&lt;",">":"&gt;","Œ":"&OElig;","œ":"&oelig;","Š":"&Scaron;","š":"&scaron;","Ÿ":"&Yuml;","ˆ":"&circ;","˜":"&tilde;"," ":"&ensp;"," ":"&emsp;"," ":"&thinsp;","‌":"&zwnj;","‍":"&zwj;","‎":"&lrm;","‏":"&rlm;","–":"&ndash;","—":"&mdash;","‘":"&lsquo;","’":"&rsquo;","‚":"&sbquo;","“":"&ldquo;","”":"&rdquo;","„":"&bdquo;","†":"&dagger;","‡":"&Dagger;","‰":"&permil;","‹":"&lsaquo;","›":"&rsaquo;","€":"&euro;","ƒ":"&fnof;","Α":"&Alpha;","Β":"&Beta;","Γ":"&Gamma;","Δ":"&Delta;","Ε":"&Epsilon;","Ζ":"&Zeta;","Η":"&Eta;","Θ":"&Theta;","Ι":"&Iota;","Κ":"&Kappa;","Λ":"&Lambda;","Μ":"&Mu;","Ν":"&Nu;","Ξ":"&Xi;","Ο":"&Omicron;","Π":"&Pi;","Ρ":"&Rho;","Σ":"&Sigma;","Τ":"&Tau;","Υ":"&Upsilon;","Φ":"&Phi;","Χ":"&Chi;","Ψ":"&Psi;","Ω":"&Omega;","α":"&alpha;","β":"&beta;","γ":"&gamma;","δ":"&delta;","ε":"&epsilon;","ζ":"&zeta;","η":"&eta;","θ":"&theta;","ι":"&iota;","κ":"&kappa;","λ":"&lambda;","μ":"&mu;","ν":"&nu;","ξ":"&xi;","ο":"&omicron;","π":"&pi;","ρ":"&rho;","ς":"&sigmaf;","σ":"&sigma;","τ":"&tau;","υ":"&upsilon;","φ":"&phi;","χ":"&chi;","ψ":"&psi;","ω":"&omega;","ϑ":"&thetasym;","ϒ":"&upsih;","ϖ":"&piv;","•":"&bull;","…":"&hellip;","′":"&prime;","″":"&Prime;","‾":"&oline;","⁄":"&frasl;","℘":"&weierp;","ℑ":"&image;","ℜ":"&real;","™":"&trade;","ℵ":"&alefsym;","←":"&larr;","↑":"&uarr;","→":"&rarr;","↓":"&darr;","↔":"&harr;","↵":"&crarr;","⇐":"&lArr;","⇑":"&uArr;","⇒":"&rArr;","⇓":"&dArr;","⇔":"&hArr;","∀":"&forall;","∂":"&part;","∃":"&exist;","∅":"&empty;","∇":"&nabla;","∈":"&isin;","∉":"&notin;","∋":"&ni;","∏":"&prod;","∑":"&sum;","−":"&minus;","∗":"&lowast;","√":"&radic;","∝":"&prop;","∞":"&infin;","∠":"&ang;","∧":"&and;","∨":"&or;","∩":"&cap;","∪":"&cup;","∫":"&int;","∴":"&there4;","∼":"&sim;","≅":"&cong;","≈":"&asymp;","≠":"&ne;","≡":"&equiv;","≤":"&le;","≥":"&ge;","⊂":"&sub;","⊃":"&sup;","⊄":"&nsub;","⊆":"&sube;","⊇":"&supe;","⊕":"&oplus;","⊗":"&otimes;","⊥":"&perp;","⋅":"&sdot;","⌈":"&lceil;","⌉":"&rceil;","⌊":"&lfloor;","⌋":"&rfloor;","〈":"&lang;","〉":"&rang;","◊":"&loz;","♠":"&spades;","♣":"&clubs;","♥":"&hearts;","♦":"&diams;"}},html5:{entities:{"&AElig":"Æ","&AElig;":"Æ","&AMP":"&","&AMP;":"&","&Aacute":"Á","&Aacute;":"Á","&Abreve;":"Ă","&Acirc":"Â","&Acirc;":"Â","&Acy;":"А","&Afr;":"𝔄","&Agrave":"À","&Agrave;":"À","&Alpha;":"Α","&Amacr;":"Ā","&And;":"⩓","&Aogon;":"Ą","&Aopf;":"𝔸","&ApplyFunction;":"⁡","&Aring":"Å","&Aring;":"Å","&Ascr;":"𝒜","&Assign;":"≔","&Atilde":"Ã","&Atilde;":"Ã","&Auml":"Ä","&Auml;":"Ä","&Backslash;":"∖","&Barv;":"⫧","&Barwed;":"⌆","&Bcy;":"Б","&Because;":"∵","&Bernoullis;":"ℬ","&Beta;":"Β","&Bfr;":"𝔅","&Bopf;":"𝔹","&Breve;":"˘","&Bscr;":"ℬ","&Bumpeq;":"≎","&CHcy;":"Ч","&COPY":"©","&COPY;":"©","&Cacute;":"Ć","&Cap;":"⋒","&CapitalDifferentialD;":"ⅅ","&Cayleys;":"ℭ","&Ccaron;":"Č","&Ccedil":"Ç","&Ccedil;":"Ç","&Ccirc;":"Ĉ","&Cconint;":"∰","&Cdot;":"Ċ","&Cedilla;":"¸","&CenterDot;":"·","&Cfr;":"ℭ","&Chi;":"Χ","&CircleDot;":"⊙","&CircleMinus;":"⊖","&CirclePlus;":"⊕","&CircleTimes;":"⊗","&ClockwiseContourIntegral;":"∲","&CloseCurlyDoubleQuote;":"”","&CloseCurlyQuote;":"’","&Colon;":"∷","&Colone;":"⩴","&Congruent;":"≡","&Conint;":"∯","&ContourIntegral;":"∮","&Copf;":"ℂ","&Coproduct;":"∐","&CounterClockwiseContourIntegral;":"∳","&Cross;":"⨯","&Cscr;":"𝒞","&Cup;":"⋓","&CupCap;":"≍","&DD;":"ⅅ","&DDotrahd;":"⤑","&DJcy;":"Ђ","&DScy;":"Ѕ","&DZcy;":"Џ","&Dagger;":"‡","&Darr;":"↡","&Dashv;":"⫤","&Dcaron;":"Ď","&Dcy;":"Д","&Del;":"∇","&Delta;":"Δ","&Dfr;":"𝔇","&DiacriticalAcute;":"´","&DiacriticalDot;":"˙","&DiacriticalDoubleAcute;":"˝","&DiacriticalGrave;":"`","&DiacriticalTilde;":"˜","&Diamond;":"⋄","&DifferentialD;":"ⅆ","&Dopf;":"𝔻","&Dot;":"¨","&DotDot;":"⃜","&DotEqual;":"≐","&DoubleContourIntegral;":"∯","&DoubleDot;":"¨","&DoubleDownArrow;":"⇓","&DoubleLeftArrow;":"⇐","&DoubleLeftRightArrow;":"⇔","&DoubleLeftTee;":"⫤","&DoubleLongLeftArrow;":"⟸","&DoubleLongLeftRightArrow;":"⟺","&DoubleLongRightArrow;":"⟹","&DoubleRightArrow;":"⇒","&DoubleRightTee;":"⊨","&DoubleUpArrow;":"⇑","&DoubleUpDownArrow;":"⇕","&DoubleVerticalBar;":"∥","&DownArrow;":"↓","&DownArrowBar;":"⤓","&DownArrowUpArrow;":"⇵","&DownBreve;":"̑","&DownLeftRightVector;":"⥐","&DownLeftTeeVector;":"⥞","&DownLeftVector;":"↽","&DownLeftVectorBar;":"⥖","&DownRightTeeVector;":"⥟","&DownRightVector;":"⇁","&DownRightVectorBar;":"⥗","&DownTee;":"⊤","&DownTeeArrow;":"↧","&Downarrow;":"⇓","&Dscr;":"𝒟","&Dstrok;":"Đ","&ENG;":"Ŋ","&ETH":"Ð","&ETH;":"Ð","&Eacute":"É","&Eacute;":"É","&Ecaron;":"Ě","&Ecirc":"Ê","&Ecirc;":"Ê","&Ecy;":"Э","&Edot;":"Ė","&Efr;":"𝔈","&Egrave":"È","&Egrave;":"È","&Element;":"∈","&Emacr;":"Ē","&EmptySmallSquare;":"◻","&EmptyVerySmallSquare;":"▫","&Eogon;":"Ę","&Eopf;":"𝔼","&Epsilon;":"Ε","&Equal;":"⩵","&EqualTilde;":"≂","&Equilibrium;":"⇌","&Escr;":"ℰ","&Esim;":"⩳","&Eta;":"Η","&Euml":"Ë","&Euml;":"Ë","&Exists;":"∃","&ExponentialE;":"ⅇ","&Fcy;":"Ф","&Ffr;":"𝔉","&FilledSmallSquare;":"◼","&FilledVerySmallSquare;":"▪","&Fopf;":"𝔽","&ForAll;":"∀","&Fouriertrf;":"ℱ","&Fscr;":"ℱ","&GJcy;":"Ѓ","&GT":">","&GT;":">","&Gamma;":"Γ","&Gammad;":"Ϝ","&Gbreve;":"Ğ","&Gcedil;":"Ģ","&Gcirc;":"Ĝ","&Gcy;":"Г","&Gdot;":"Ġ","&Gfr;":"𝔊","&Gg;":"⋙","&Gopf;":"𝔾","&GreaterEqual;":"≥","&GreaterEqualLess;":"⋛","&GreaterFullEqual;":"≧","&GreaterGreater;":"⪢","&GreaterLess;":"≷","&GreaterSlantEqual;":"⩾","&GreaterTilde;":"≳","&Gscr;":"𝒢","&Gt;":"≫","&HARDcy;":"Ъ","&Hacek;":"ˇ","&Hat;":"^","&Hcirc;":"Ĥ","&Hfr;":"ℌ","&HilbertSpace;":"ℋ","&Hopf;":"ℍ","&HorizontalLine;":"─","&Hscr;":"ℋ","&Hstrok;":"Ħ","&HumpDownHump;":"≎","&HumpEqual;":"≏","&IEcy;":"Е","&IJlig;":"Ĳ","&IOcy;":"Ё","&Iacute":"Í","&Iacute;":"Í","&Icirc":"Î","&Icirc;":"Î","&Icy;":"И","&Idot;":"İ","&Ifr;":"ℑ","&Igrave":"Ì","&Igrave;":"Ì","&Im;":"ℑ","&Imacr;":"Ī","&ImaginaryI;":"ⅈ","&Implies;":"⇒","&Int;":"∬","&Integral;":"∫","&Intersection;":"⋂","&InvisibleComma;":"⁣","&InvisibleTimes;":"⁢","&Iogon;":"Į","&Iopf;":"𝕀","&Iota;":"Ι","&Iscr;":"ℐ","&Itilde;":"Ĩ","&Iukcy;":"І","&Iuml":"Ï","&Iuml;":"Ï","&Jcirc;":"Ĵ","&Jcy;":"Й","&Jfr;":"𝔍","&Jopf;":"𝕁","&Jscr;":"𝒥","&Jsercy;":"Ј","&Jukcy;":"Є","&KHcy;":"Х","&KJcy;":"Ќ","&Kappa;":"Κ","&Kcedil;":"Ķ","&Kcy;":"К","&Kfr;":"𝔎","&Kopf;":"𝕂","&Kscr;":"𝒦","&LJcy;":"Љ","&LT":"<","&LT;":"<","&Lacute;":"Ĺ","&Lambda;":"Λ","&Lang;":"⟪","&Laplacetrf;":"ℒ","&Larr;":"↞","&Lcaron;":"Ľ","&Lcedil;":"Ļ","&Lcy;":"Л","&LeftAngleBracket;":"⟨","&LeftArrow;":"←","&LeftArrowBar;":"⇤","&LeftArrowRightArrow;":"⇆","&LeftCeiling;":"⌈","&LeftDoubleBracket;":"⟦","&LeftDownTeeVector;":"⥡","&LeftDownVector;":"⇃","&LeftDownVectorBar;":"⥙","&LeftFloor;":"⌊","&LeftRightArrow;":"↔","&LeftRightVector;":"⥎","&LeftTee;":"⊣","&LeftTeeArrow;":"↤","&LeftTeeVector;":"⥚","&LeftTriangle;":"⊲","&LeftTriangleBar;":"⧏","&LeftTriangleEqual;":"⊴","&LeftUpDownVector;":"⥑","&LeftUpTeeVector;":"⥠","&LeftUpVector;":"↿","&LeftUpVectorBar;":"⥘","&LeftVector;":"↼","&LeftVectorBar;":"⥒","&Leftarrow;":"⇐","&Leftrightarrow;":"⇔","&LessEqualGreater;":"⋚","&LessFullEqual;":"≦","&LessGreater;":"≶","&LessLess;":"⪡","&LessSlantEqual;":"⩽","&LessTilde;":"≲","&Lfr;":"𝔏","&Ll;":"⋘","&Lleftarrow;":"⇚","&Lmidot;":"Ŀ","&LongLeftArrow;":"⟵","&LongLeftRightArrow;":"⟷","&LongRightArrow;":"⟶","&Longleftarrow;":"⟸","&Longleftrightarrow;":"⟺","&Longrightarrow;":"⟹","&Lopf;":"𝕃","&LowerLeftArrow;":"↙","&LowerRightArrow;":"↘","&Lscr;":"ℒ","&Lsh;":"↰","&Lstrok;":"Ł","&Lt;":"≪","&Map;":"⤅","&Mcy;":"М","&MediumSpace;":" ","&Mellintrf;":"ℳ","&Mfr;":"𝔐","&MinusPlus;":"∓","&Mopf;":"𝕄","&Mscr;":"ℳ","&Mu;":"Μ","&NJcy;":"Њ","&Nacute;":"Ń","&Ncaron;":"Ň","&Ncedil;":"Ņ","&Ncy;":"Н","&NegativeMediumSpace;":"​","&NegativeThickSpace;":"​","&NegativeThinSpace;":"​","&NegativeVeryThinSpace;":"​","&NestedGreaterGreater;":"≫","&NestedLessLess;":"≪","&NewLine;":"\n","&Nfr;":"𝔑","&NoBreak;":"⁠","&NonBreakingSpace;":" ","&Nopf;":"ℕ","&Not;":"⫬","&NotCongruent;":"≢","&NotCupCap;":"≭","&NotDoubleVerticalBar;":"∦","&NotElement;":"∉","&NotEqual;":"≠","&NotEqualTilde;":"≂̸","&NotExists;":"∄","&NotGreater;":"≯","&NotGreaterEqual;":"≱","&NotGreaterFullEqual;":"≧̸","&NotGreaterGreater;":"≫̸","&NotGreaterLess;":"≹","&NotGreaterSlantEqual;":"⩾̸","&NotGreaterTilde;":"≵","&NotHumpDownHump;":"≎̸","&NotHumpEqual;":"≏̸","&NotLeftTriangle;":"⋪","&NotLeftTriangleBar;":"⧏̸","&NotLeftTriangleEqual;":"⋬","&NotLess;":"≮","&NotLessEqual;":"≰","&NotLessGreater;":"≸","&NotLessLess;":"≪̸","&NotLessSlantEqual;":"⩽̸","&NotLessTilde;":"≴","&NotNestedGreaterGreater;":"⪢̸","&NotNestedLessLess;":"⪡̸","&NotPrecedes;":"⊀","&NotPrecedesEqual;":"⪯̸","&NotPrecedesSlantEqual;":"⋠","&NotReverseElement;":"∌","&NotRightTriangle;":"⋫","&NotRightTriangleBar;":"⧐̸","&NotRightTriangleEqual;":"⋭","&NotSquareSubset;":"⊏̸","&NotSquareSubsetEqual;":"⋢","&NotSquareSuperset;":"⊐̸","&NotSquareSupersetEqual;":"⋣","&NotSubset;":"⊂⃒","&NotSubsetEqual;":"⊈","&NotSucceeds;":"⊁","&NotSucceedsEqual;":"⪰̸","&NotSucceedsSlantEqual;":"⋡","&NotSucceedsTilde;":"≿̸","&NotSuperset;":"⊃⃒","&NotSupersetEqual;":"⊉","&NotTilde;":"≁","&NotTildeEqual;":"≄","&NotTildeFullEqual;":"≇","&NotTildeTilde;":"≉","&NotVerticalBar;":"∤","&Nscr;":"𝒩","&Ntilde":"Ñ","&Ntilde;":"Ñ","&Nu;":"Ν","&OElig;":"Œ","&Oacute":"Ó","&Oacute;":"Ó","&Ocirc":"Ô","&Ocirc;":"Ô","&Ocy;":"О","&Odblac;":"Ő","&Ofr;":"𝔒","&Ograve":"Ò","&Ograve;":"Ò","&Omacr;":"Ō","&Omega;":"Ω","&Omicron;":"Ο","&Oopf;":"𝕆","&OpenCurlyDoubleQuote;":"“","&OpenCurlyQuote;":"‘","&Or;":"⩔","&Oscr;":"𝒪","&Oslash":"Ø","&Oslash;":"Ø","&Otilde":"Õ","&Otilde;":"Õ","&Otimes;":"⨷","&Ouml":"Ö","&Ouml;":"Ö","&OverBar;":"‾","&OverBrace;":"⏞","&OverBracket;":"⎴","&OverParenthesis;":"⏜","&PartialD;":"∂","&Pcy;":"П","&Pfr;":"𝔓","&Phi;":"Φ","&Pi;":"Π","&PlusMinus;":"±","&Poincareplane;":"ℌ","&Popf;":"ℙ","&Pr;":"⪻","&Precedes;":"≺","&PrecedesEqual;":"⪯","&PrecedesSlantEqual;":"≼","&PrecedesTilde;":"≾","&Prime;":"″","&Product;":"∏","&Proportion;":"∷","&Proportional;":"∝","&Pscr;":"𝒫","&Psi;":"Ψ","&QUOT":'"',"&QUOT;":'"',"&Qfr;":"𝔔","&Qopf;":"ℚ","&Qscr;":"𝒬","&RBarr;":"⤐","&REG":"®","&REG;":"®","&Racute;":"Ŕ","&Rang;":"⟫","&Rarr;":"↠","&Rarrtl;":"⤖","&Rcaron;":"Ř","&Rcedil;":"Ŗ","&Rcy;":"Р","&Re;":"ℜ","&ReverseElement;":"∋","&ReverseEquilibrium;":"⇋","&ReverseUpEquilibrium;":"⥯","&Rfr;":"ℜ","&Rho;":"Ρ","&RightAngleBracket;":"⟩","&RightArrow;":"→","&RightArrowBar;":"⇥","&RightArrowLeftArrow;":"⇄","&RightCeiling;":"⌉","&RightDoubleBracket;":"⟧","&RightDownTeeVector;":"⥝","&RightDownVector;":"⇂","&RightDownVectorBar;":"⥕","&RightFloor;":"⌋","&RightTee;":"⊢","&RightTeeArrow;":"↦","&RightTeeVector;":"⥛","&RightTriangle;":"⊳","&RightTriangleBar;":"⧐","&RightTriangleEqual;":"⊵","&RightUpDownVector;":"⥏","&RightUpTeeVector;":"⥜","&RightUpVector;":"↾","&RightUpVectorBar;":"⥔","&RightVector;":"⇀","&RightVectorBar;":"⥓","&Rightarrow;":"⇒","&Ropf;":"ℝ","&RoundImplies;":"⥰","&Rrightarrow;":"⇛","&Rscr;":"ℛ","&Rsh;":"↱","&RuleDelayed;":"⧴","&SHCHcy;":"Щ","&SHcy;":"Ш","&SOFTcy;":"Ь","&Sacute;":"Ś","&Sc;":"⪼","&Scaron;":"Š","&Scedil;":"Ş","&Scirc;":"Ŝ","&Scy;":"С","&Sfr;":"𝔖","&ShortDownArrow;":"↓","&ShortLeftArrow;":"←","&ShortRightArrow;":"→","&ShortUpArrow;":"↑","&Sigma;":"Σ","&SmallCircle;":"∘","&Sopf;":"𝕊","&Sqrt;":"√","&Square;":"□","&SquareIntersection;":"⊓","&SquareSubset;":"⊏","&SquareSubsetEqual;":"⊑","&SquareSuperset;":"⊐","&SquareSupersetEqual;":"⊒","&SquareUnion;":"⊔","&Sscr;":"𝒮","&Star;":"⋆","&Sub;":"⋐","&Subset;":"⋐","&SubsetEqual;":"⊆","&Succeeds;":"≻","&SucceedsEqual;":"⪰","&SucceedsSlantEqual;":"≽","&SucceedsTilde;":"≿","&SuchThat;":"∋","&Sum;":"∑","&Sup;":"⋑","&Superset;":"⊃","&SupersetEqual;":"⊇","&Supset;":"⋑","&THORN":"Þ","&THORN;":"Þ","&TRADE;":"™","&TSHcy;":"Ћ","&TScy;":"Ц","&Tab;":"\t","&Tau;":"Τ","&Tcaron;":"Ť","&Tcedil;":"Ţ","&Tcy;":"Т","&Tfr;":"𝔗","&Therefore;":"∴","&Theta;":"Θ","&ThickSpace;":"  ","&ThinSpace;":" ","&Tilde;":"∼","&TildeEqual;":"≃","&TildeFullEqual;":"≅","&TildeTilde;":"≈","&Topf;":"𝕋","&TripleDot;":"⃛","&Tscr;":"𝒯","&Tstrok;":"Ŧ","&Uacute":"Ú","&Uacute;":"Ú","&Uarr;":"↟","&Uarrocir;":"⥉","&Ubrcy;":"Ў","&Ubreve;":"Ŭ","&Ucirc":"Û","&Ucirc;":"Û","&Ucy;":"У","&Udblac;":"Ű","&Ufr;":"𝔘","&Ugrave":"Ù","&Ugrave;":"Ù","&Umacr;":"Ū","&UnderBar;":"_","&UnderBrace;":"⏟","&UnderBracket;":"⎵","&UnderParenthesis;":"⏝","&Union;":"⋃","&UnionPlus;":"⊎","&Uogon;":"Ų","&Uopf;":"𝕌","&UpArrow;":"↑","&UpArrowBar;":"⤒","&UpArrowDownArrow;":"⇅","&UpDownArrow;":"↕","&UpEquilibrium;":"⥮","&UpTee;":"⊥","&UpTeeArrow;":"↥","&Uparrow;":"⇑","&Updownarrow;":"⇕","&UpperLeftArrow;":"↖","&UpperRightArrow;":"↗","&Upsi;":"ϒ","&Upsilon;":"Υ","&Uring;":"Ů","&Uscr;":"𝒰","&Utilde;":"Ũ","&Uuml":"Ü","&Uuml;":"Ü","&VDash;":"⊫","&Vbar;":"⫫","&Vcy;":"В","&Vdash;":"⊩","&Vdashl;":"⫦","&Vee;":"⋁","&Verbar;":"‖","&Vert;":"‖","&VerticalBar;":"∣","&VerticalLine;":"|","&VerticalSeparator;":"❘","&VerticalTilde;":"≀","&VeryThinSpace;":" ","&Vfr;":"𝔙","&Vopf;":"𝕍","&Vscr;":"𝒱","&Vvdash;":"⊪","&Wcirc;":"Ŵ","&Wedge;":"⋀","&Wfr;":"𝔚","&Wopf;":"𝕎","&Wscr;":"𝒲","&Xfr;":"𝔛","&Xi;":"Ξ","&Xopf;":"𝕏","&Xscr;":"𝒳","&YAcy;":"Я","&YIcy;":"Ї","&YUcy;":"Ю","&Yacute":"Ý","&Yacute;":"Ý","&Ycirc;":"Ŷ","&Ycy;":"Ы","&Yfr;":"𝔜","&Yopf;":"𝕐","&Yscr;":"𝒴","&Yuml;":"Ÿ","&ZHcy;":"Ж","&Zacute;":"Ź","&Zcaron;":"Ž","&Zcy;":"З","&Zdot;":"Ż","&ZeroWidthSpace;":"​","&Zeta;":"Ζ","&Zfr;":"ℨ","&Zopf;":"ℤ","&Zscr;":"𝒵","&aacute":"á","&aacute;":"á","&abreve;":"ă","&ac;":"∾","&acE;":"∾̳","&acd;":"∿","&acirc":"â","&acirc;":"â","&acute":"´","&acute;":"´","&acy;":"а","&aelig":"æ","&aelig;":"æ","&af;":"⁡","&afr;":"𝔞","&agrave":"à","&agrave;":"à","&alefsym;":"ℵ","&aleph;":"ℵ","&alpha;":"α","&amacr;":"ā","&amalg;":"⨿","&amp":"&","&amp;":"&","&and;":"∧","&andand;":"⩕","&andd;":"⩜","&andslope;":"⩘","&andv;":"⩚","&ang;":"∠","&ange;":"⦤","&angle;":"∠","&angmsd;":"∡","&angmsdaa;":"⦨","&angmsdab;":"⦩","&angmsdac;":"⦪","&angmsdad;":"⦫","&angmsdae;":"⦬","&angmsdaf;":"⦭","&angmsdag;":"⦮","&angmsdah;":"⦯","&angrt;":"∟","&angrtvb;":"⊾","&angrtvbd;":"⦝","&angsph;":"∢","&angst;":"Å","&angzarr;":"⍼","&aogon;":"ą","&aopf;":"𝕒","&ap;":"≈","&apE;":"⩰","&apacir;":"⩯","&ape;":"≊","&apid;":"≋","&apos;":"'","&approx;":"≈","&approxeq;":"≊","&aring":"å","&aring;":"å","&ascr;":"𝒶","&ast;":"*","&asymp;":"≈","&asympeq;":"≍","&atilde":"ã","&atilde;":"ã","&auml":"ä","&auml;":"ä","&awconint;":"∳","&awint;":"⨑","&bNot;":"⫭","&backcong;":"≌","&backepsilon;":"϶","&backprime;":"‵","&backsim;":"∽","&backsimeq;":"⋍","&barvee;":"⊽","&barwed;":"⌅","&barwedge;":"⌅","&bbrk;":"⎵","&bbrktbrk;":"⎶","&bcong;":"≌","&bcy;":"б","&bdquo;":"„","&becaus;":"∵","&because;":"∵","&bemptyv;":"⦰","&bepsi;":"϶","&bernou;":"ℬ","&beta;":"β","&beth;":"ℶ","&between;":"≬","&bfr;":"𝔟","&bigcap;":"⋂","&bigcirc;":"◯","&bigcup;":"⋃","&bigodot;":"⨀","&bigoplus;":"⨁","&bigotimes;":"⨂","&bigsqcup;":"⨆","&bigstar;":"★","&bigtriangledown;":"▽","&bigtriangleup;":"△","&biguplus;":"⨄","&bigvee;":"⋁","&bigwedge;":"⋀","&bkarow;":"⤍","&blacklozenge;":"⧫","&blacksquare;":"▪","&blacktriangle;":"▴","&blacktriangledown;":"▾","&blacktriangleleft;":"◂","&blacktriangleright;":"▸","&blank;":"␣","&blk12;":"▒","&blk14;":"░","&blk34;":"▓","&block;":"█","&bne;":"=⃥","&bnequiv;":"≡⃥","&bnot;":"⌐","&bopf;":"𝕓","&bot;":"⊥","&bottom;":"⊥","&bowtie;":"⋈","&boxDL;":"╗","&boxDR;":"╔","&boxDl;":"╖","&boxDr;":"╓","&boxH;":"═","&boxHD;":"╦","&boxHU;":"╩","&boxHd;":"╤","&boxHu;":"╧","&boxUL;":"╝","&boxUR;":"╚","&boxUl;":"╜","&boxUr;":"╙","&boxV;":"║","&boxVH;":"╬","&boxVL;":"╣","&boxVR;":"╠","&boxVh;":"╫","&boxVl;":"╢","&boxVr;":"╟","&boxbox;":"⧉","&boxdL;":"╕","&boxdR;":"╒","&boxdl;":"┐","&boxdr;":"┌","&boxh;":"─","&boxhD;":"╥","&boxhU;":"╨","&boxhd;":"┬","&boxhu;":"┴","&boxminus;":"⊟","&boxplus;":"⊞","&boxtimes;":"⊠","&boxuL;":"╛","&boxuR;":"╘","&boxul;":"┘","&boxur;":"└","&boxv;":"│","&boxvH;":"╪","&boxvL;":"╡","&boxvR;":"╞","&boxvh;":"┼","&boxvl;":"┤","&boxvr;":"├","&bprime;":"‵","&breve;":"˘","&brvbar":"¦","&brvbar;":"¦","&bscr;":"𝒷","&bsemi;":"⁏","&bsim;":"∽","&bsime;":"⋍","&bsol;":"\\","&bsolb;":"⧅","&bsolhsub;":"⟈","&bull;":"•","&bullet;":"•","&bump;":"≎","&bumpE;":"⪮","&bumpe;":"≏","&bumpeq;":"≏","&cacute;":"ć","&cap;":"∩","&capand;":"⩄","&capbrcup;":"⩉","&capcap;":"⩋","&capcup;":"⩇","&capdot;":"⩀","&caps;":"∩︀","&caret;":"⁁","&caron;":"ˇ","&ccaps;":"⩍","&ccaron;":"č","&ccedil":"ç","&ccedil;":"ç","&ccirc;":"ĉ","&ccups;":"⩌","&ccupssm;":"⩐","&cdot;":"ċ","&cedil":"¸","&cedil;":"¸","&cemptyv;":"⦲","&cent":"¢","&cent;":"¢","&centerdot;":"·","&cfr;":"𝔠","&chcy;":"ч","&check;":"✓","&checkmark;":"✓","&chi;":"χ","&cir;":"○","&cirE;":"⧃","&circ;":"ˆ","&circeq;":"≗","&circlearrowleft;":"↺","&circlearrowright;":"↻","&circledR;":"®","&circledS;":"Ⓢ","&circledast;":"⊛","&circledcirc;":"⊚","&circleddash;":"⊝","&cire;":"≗","&cirfnint;":"⨐","&cirmid;":"⫯","&cirscir;":"⧂","&clubs;":"♣","&clubsuit;":"♣","&colon;":":","&colone;":"≔","&coloneq;":"≔","&comma;":",","&commat;":"@","&comp;":"∁","&compfn;":"∘","&complement;":"∁","&complexes;":"ℂ","&cong;":"≅","&congdot;":"⩭","&conint;":"∮","&copf;":"𝕔","&coprod;":"∐","&copy":"©","&copy;":"©","&copysr;":"℗","&crarr;":"↵","&cross;":"✗","&cscr;":"𝒸","&csub;":"⫏","&csube;":"⫑","&csup;":"⫐","&csupe;":"⫒","&ctdot;":"⋯","&cudarrl;":"⤸","&cudarrr;":"⤵","&cuepr;":"⋞","&cuesc;":"⋟","&cularr;":"↶","&cularrp;":"⤽","&cup;":"∪","&cupbrcap;":"⩈","&cupcap;":"⩆","&cupcup;":"⩊","&cupdot;":"⊍","&cupor;":"⩅","&cups;":"∪︀","&curarr;":"↷","&curarrm;":"⤼","&curlyeqprec;":"⋞","&curlyeqsucc;":"⋟","&curlyvee;":"⋎","&curlywedge;":"⋏","&curren":"¤","&curren;":"¤","&curvearrowleft;":"↶","&curvearrowright;":"↷","&cuvee;":"⋎","&cuwed;":"⋏","&cwconint;":"∲","&cwint;":"∱","&cylcty;":"⌭","&dArr;":"⇓","&dHar;":"⥥","&dagger;":"†","&daleth;":"ℸ","&darr;":"↓","&dash;":"‐","&dashv;":"⊣","&dbkarow;":"⤏","&dblac;":"˝","&dcaron;":"ď","&dcy;":"д","&dd;":"ⅆ","&ddagger;":"‡","&ddarr;":"⇊","&ddotseq;":"⩷","&deg":"°","&deg;":"°","&delta;":"δ","&demptyv;":"⦱","&dfisht;":"⥿","&dfr;":"𝔡","&dharl;":"⇃","&dharr;":"⇂","&diam;":"⋄","&diamond;":"⋄","&diamondsuit;":"♦","&diams;":"♦","&die;":"¨","&digamma;":"ϝ","&disin;":"⋲","&div;":"÷","&divide":"÷","&divide;":"÷","&divideontimes;":"⋇","&divonx;":"⋇","&djcy;":"ђ","&dlcorn;":"⌞","&dlcrop;":"⌍","&dollar;":"$","&dopf;":"𝕕","&dot;":"˙","&doteq;":"≐","&doteqdot;":"≑","&dotminus;":"∸","&dotplus;":"∔","&dotsquare;":"⊡","&doublebarwedge;":"⌆","&downarrow;":"↓","&downdownarrows;":"⇊","&downharpoonleft;":"⇃","&downharpoonright;":"⇂","&drbkarow;":"⤐","&drcorn;":"⌟","&drcrop;":"⌌","&dscr;":"𝒹","&dscy;":"ѕ","&dsol;":"⧶","&dstrok;":"đ","&dtdot;":"⋱","&dtri;":"▿","&dtrif;":"▾","&duarr;":"⇵","&duhar;":"⥯","&dwangle;":"⦦","&dzcy;":"џ","&dzigrarr;":"⟿","&eDDot;":"⩷","&eDot;":"≑","&eacute":"é","&eacute;":"é","&easter;":"⩮","&ecaron;":"ě","&ecir;":"≖","&ecirc":"ê","&ecirc;":"ê","&ecolon;":"≕","&ecy;":"э","&edot;":"ė","&ee;":"ⅇ","&efDot;":"≒","&efr;":"𝔢","&eg;":"⪚","&egrave":"è","&egrave;":"è","&egs;":"⪖","&egsdot;":"⪘","&el;":"⪙","&elinters;":"⏧","&ell;":"ℓ","&els;":"⪕","&elsdot;":"⪗","&emacr;":"ē","&empty;":"∅","&emptyset;":"∅","&emptyv;":"∅","&emsp13;":" ","&emsp14;":" ","&emsp;":" ","&eng;":"ŋ","&ensp;":" ","&eogon;":"ę","&eopf;":"𝕖","&epar;":"⋕","&eparsl;":"⧣","&eplus;":"⩱","&epsi;":"ε","&epsilon;":"ε","&epsiv;":"ϵ","&eqcirc;":"≖","&eqcolon;":"≕","&eqsim;":"≂","&eqslantgtr;":"⪖","&eqslantless;":"⪕","&equals;":"=","&equest;":"≟","&equiv;":"≡","&equivDD;":"⩸","&eqvparsl;":"⧥","&erDot;":"≓","&erarr;":"⥱","&escr;":"ℯ","&esdot;":"≐","&esim;":"≂","&eta;":"η","&eth":"ð","&eth;":"ð","&euml":"ë","&euml;":"ë","&euro;":"€","&excl;":"!","&exist;":"∃","&expectation;":"ℰ","&exponentiale;":"ⅇ","&fallingdotseq;":"≒","&fcy;":"ф","&female;":"♀","&ffilig;":"ﬃ","&fflig;":"ﬀ","&ffllig;":"ﬄ","&ffr;":"𝔣","&filig;":"ﬁ","&fjlig;":"fj","&flat;":"♭","&fllig;":"ﬂ","&fltns;":"▱","&fnof;":"ƒ","&fopf;":"𝕗","&forall;":"∀","&fork;":"⋔","&forkv;":"⫙","&fpartint;":"⨍","&frac12":"½","&frac12;":"½","&frac13;":"⅓","&frac14":"¼","&frac14;":"¼","&frac15;":"⅕","&frac16;":"⅙","&frac18;":"⅛","&frac23;":"⅔","&frac25;":"⅖","&frac34":"¾","&frac34;":"¾","&frac35;":"⅗","&frac38;":"⅜","&frac45;":"⅘","&frac56;":"⅚","&frac58;":"⅝","&frac78;":"⅞","&frasl;":"⁄","&frown;":"⌢","&fscr;":"𝒻","&gE;":"≧","&gEl;":"⪌","&gacute;":"ǵ","&gamma;":"γ","&gammad;":"ϝ","&gap;":"⪆","&gbreve;":"ğ","&gcirc;":"ĝ","&gcy;":"г","&gdot;":"ġ","&ge;":"≥","&gel;":"⋛","&geq;":"≥","&geqq;":"≧","&geqslant;":"⩾","&ges;":"⩾","&gescc;":"⪩","&gesdot;":"⪀","&gesdoto;":"⪂","&gesdotol;":"⪄","&gesl;":"⋛︀","&gesles;":"⪔","&gfr;":"𝔤","&gg;":"≫","&ggg;":"⋙","&gimel;":"ℷ","&gjcy;":"ѓ","&gl;":"≷","&glE;":"⪒","&gla;":"⪥","&glj;":"⪤","&gnE;":"≩","&gnap;":"⪊","&gnapprox;":"⪊","&gne;":"⪈","&gneq;":"⪈","&gneqq;":"≩","&gnsim;":"⋧","&gopf;":"𝕘","&grave;":"`","&gscr;":"ℊ","&gsim;":"≳","&gsime;":"⪎","&gsiml;":"⪐","&gt":">","&gt;":">","&gtcc;":"⪧","&gtcir;":"⩺","&gtdot;":"⋗","&gtlPar;":"⦕","&gtquest;":"⩼","&gtrapprox;":"⪆","&gtrarr;":"⥸","&gtrdot;":"⋗","&gtreqless;":"⋛","&gtreqqless;":"⪌","&gtrless;":"≷","&gtrsim;":"≳","&gvertneqq;":"≩︀","&gvnE;":"≩︀","&hArr;":"⇔","&hairsp;":" ","&half;":"½","&hamilt;":"ℋ","&hardcy;":"ъ","&harr;":"↔","&harrcir;":"⥈","&harrw;":"↭","&hbar;":"ℏ","&hcirc;":"ĥ","&hearts;":"♥","&heartsuit;":"♥","&hellip;":"…","&hercon;":"⊹","&hfr;":"𝔥","&hksearow;":"⤥","&hkswarow;":"⤦","&hoarr;":"⇿","&homtht;":"∻","&hookleftarrow;":"↩","&hookrightarrow;":"↪","&hopf;":"𝕙","&horbar;":"―","&hscr;":"𝒽","&hslash;":"ℏ","&hstrok;":"ħ","&hybull;":"⁃","&hyphen;":"‐","&iacute":"í","&iacute;":"í","&ic;":"⁣","&icirc":"î","&icirc;":"î","&icy;":"и","&iecy;":"е","&iexcl":"¡","&iexcl;":"¡","&iff;":"⇔","&ifr;":"𝔦","&igrave":"ì","&igrave;":"ì","&ii;":"ⅈ","&iiiint;":"⨌","&iiint;":"∭","&iinfin;":"⧜","&iiota;":"℩","&ijlig;":"ĳ","&imacr;":"ī","&image;":"ℑ","&imagline;":"ℐ","&imagpart;":"ℑ","&imath;":"ı","&imof;":"⊷","&imped;":"Ƶ","&in;":"∈","&incare;":"℅","&infin;":"∞","&infintie;":"⧝","&inodot;":"ı","&int;":"∫","&intcal;":"⊺","&integers;":"ℤ","&intercal;":"⊺","&intlarhk;":"⨗","&intprod;":"⨼","&iocy;":"ё","&iogon;":"į","&iopf;":"𝕚","&iota;":"ι","&iprod;":"⨼","&iquest":"¿","&iquest;":"¿","&iscr;":"𝒾","&isin;":"∈","&isinE;":"⋹","&isindot;":"⋵","&isins;":"⋴","&isinsv;":"⋳","&isinv;":"∈","&it;":"⁢","&itilde;":"ĩ","&iukcy;":"і","&iuml":"ï","&iuml;":"ï","&jcirc;":"ĵ","&jcy;":"й","&jfr;":"𝔧","&jmath;":"ȷ","&jopf;":"𝕛","&jscr;":"𝒿","&jsercy;":"ј","&jukcy;":"є","&kappa;":"κ","&kappav;":"ϰ","&kcedil;":"ķ","&kcy;":"к","&kfr;":"𝔨","&kgreen;":"ĸ","&khcy;":"х","&kjcy;":"ќ","&kopf;":"𝕜","&kscr;":"𝓀","&lAarr;":"⇚","&lArr;":"⇐","&lAtail;":"⤛","&lBarr;":"⤎","&lE;":"≦","&lEg;":"⪋","&lHar;":"⥢","&lacute;":"ĺ","&laemptyv;":"⦴","&lagran;":"ℒ","&lambda;":"λ","&lang;":"⟨","&langd;":"⦑","&langle;":"⟨","&lap;":"⪅","&laquo":"«","&laquo;":"«","&larr;":"←","&larrb;":"⇤","&larrbfs;":"⤟","&larrfs;":"⤝","&larrhk;":"↩","&larrlp;":"↫","&larrpl;":"⤹","&larrsim;":"⥳","&larrtl;":"↢","&lat;":"⪫","&latail;":"⤙","&late;":"⪭","&lates;":"⪭︀","&lbarr;":"⤌","&lbbrk;":"❲","&lbrace;":"{","&lbrack;":"[","&lbrke;":"⦋","&lbrksld;":"⦏","&lbrkslu;":"⦍","&lcaron;":"ľ","&lcedil;":"ļ","&lceil;":"⌈","&lcub;":"{","&lcy;":"л","&ldca;":"⤶","&ldquo;":"“","&ldquor;":"„","&ldrdhar;":"⥧","&ldrushar;":"⥋","&ldsh;":"↲","&le;":"≤","&leftarrow;":"←","&leftarrowtail;":"↢","&leftharpoondown;":"↽","&leftharpoonup;":"↼","&leftleftarrows;":"⇇","&leftrightarrow;":"↔","&leftrightarrows;":"⇆","&leftrightharpoons;":"⇋","&leftrightsquigarrow;":"↭","&leftthreetimes;":"⋋","&leg;":"⋚","&leq;":"≤","&leqq;":"≦","&leqslant;":"⩽","&les;":"⩽","&lescc;":"⪨","&lesdot;":"⩿","&lesdoto;":"⪁","&lesdotor;":"⪃","&lesg;":"⋚︀","&lesges;":"⪓","&lessapprox;":"⪅","&lessdot;":"⋖","&lesseqgtr;":"⋚","&lesseqqgtr;":"⪋","&lessgtr;":"≶","&lesssim;":"≲","&lfisht;":"⥼","&lfloor;":"⌊","&lfr;":"𝔩","&lg;":"≶","&lgE;":"⪑","&lhard;":"↽","&lharu;":"↼","&lharul;":"⥪","&lhblk;":"▄","&ljcy;":"љ","&ll;":"≪","&llarr;":"⇇","&llcorner;":"⌞","&llhard;":"⥫","&lltri;":"◺","&lmidot;":"ŀ","&lmoust;":"⎰","&lmoustache;":"⎰","&lnE;":"≨","&lnap;":"⪉","&lnapprox;":"⪉","&lne;":"⪇","&lneq;":"⪇","&lneqq;":"≨","&lnsim;":"⋦","&loang;":"⟬","&loarr;":"⇽","&lobrk;":"⟦","&longleftarrow;":"⟵","&longleftrightarrow;":"⟷","&longmapsto;":"⟼","&longrightarrow;":"⟶","&looparrowleft;":"↫","&looparrowright;":"↬","&lopar;":"⦅","&lopf;":"𝕝","&loplus;":"⨭","&lotimes;":"⨴","&lowast;":"∗","&lowbar;":"_","&loz;":"◊","&lozenge;":"◊","&lozf;":"⧫","&lpar;":"(","&lparlt;":"⦓","&lrarr;":"⇆","&lrcorner;":"⌟","&lrhar;":"⇋","&lrhard;":"⥭","&lrm;":"‎","&lrtri;":"⊿","&lsaquo;":"‹","&lscr;":"𝓁","&lsh;":"↰","&lsim;":"≲","&lsime;":"⪍","&lsimg;":"⪏","&lsqb;":"[","&lsquo;":"‘","&lsquor;":"‚","&lstrok;":"ł","&lt":"<","&lt;":"<","&ltcc;":"⪦","&ltcir;":"⩹","&ltdot;":"⋖","&lthree;":"⋋","&ltimes;":"⋉","&ltlarr;":"⥶","&ltquest;":"⩻","&ltrPar;":"⦖","&ltri;":"◃","&ltrie;":"⊴","&ltrif;":"◂","&lurdshar;":"⥊","&luruhar;":"⥦","&lvertneqq;":"≨︀","&lvnE;":"≨︀","&mDDot;":"∺","&macr":"¯","&macr;":"¯","&male;":"♂","&malt;":"✠","&maltese;":"✠","&map;":"↦","&mapsto;":"↦","&mapstodown;":"↧","&mapstoleft;":"↤","&mapstoup;":"↥","&marker;":"▮","&mcomma;":"⨩","&mcy;":"м","&mdash;":"—","&measuredangle;":"∡","&mfr;":"𝔪","&mho;":"℧","&micro":"µ","&micro;":"µ","&mid;":"∣","&midast;":"*","&midcir;":"⫰","&middot":"·","&middot;":"·","&minus;":"−","&minusb;":"⊟","&minusd;":"∸","&minusdu;":"⨪","&mlcp;":"⫛","&mldr;":"…","&mnplus;":"∓","&models;":"⊧","&mopf;":"𝕞","&mp;":"∓","&mscr;":"𝓂","&mstpos;":"∾","&mu;":"μ","&multimap;":"⊸","&mumap;":"⊸","&nGg;":"⋙̸","&nGt;":"≫⃒","&nGtv;":"≫̸","&nLeftarrow;":"⇍","&nLeftrightarrow;":"⇎","&nLl;":"⋘̸","&nLt;":"≪⃒","&nLtv;":"≪̸","&nRightarrow;":"⇏","&nVDash;":"⊯","&nVdash;":"⊮","&nabla;":"∇","&nacute;":"ń","&nang;":"∠⃒","&nap;":"≉","&napE;":"⩰̸","&napid;":"≋̸","&napos;":"ŉ","&napprox;":"≉","&natur;":"♮","&natural;":"♮","&naturals;":"ℕ","&nbsp":" ","&nbsp;":" ","&nbump;":"≎̸","&nbumpe;":"≏̸","&ncap;":"⩃","&ncaron;":"ň","&ncedil;":"ņ","&ncong;":"≇","&ncongdot;":"⩭̸","&ncup;":"⩂","&ncy;":"н","&ndash;":"–","&ne;":"≠","&neArr;":"⇗","&nearhk;":"⤤","&nearr;":"↗","&nearrow;":"↗","&nedot;":"≐̸","&nequiv;":"≢","&nesear;":"⤨","&nesim;":"≂̸","&nexist;":"∄","&nexists;":"∄","&nfr;":"𝔫","&ngE;":"≧̸","&nge;":"≱","&ngeq;":"≱","&ngeqq;":"≧̸","&ngeqslant;":"⩾̸","&nges;":"⩾̸","&ngsim;":"≵","&ngt;":"≯","&ngtr;":"≯","&nhArr;":"⇎","&nharr;":"↮","&nhpar;":"⫲","&ni;":"∋","&nis;":"⋼","&nisd;":"⋺","&niv;":"∋","&njcy;":"њ","&nlArr;":"⇍","&nlE;":"≦̸","&nlarr;":"↚","&nldr;":"‥","&nle;":"≰","&nleftarrow;":"↚","&nleftrightarrow;":"↮","&nleq;":"≰","&nleqq;":"≦̸","&nleqslant;":"⩽̸","&nles;":"⩽̸","&nless;":"≮","&nlsim;":"≴","&nlt;":"≮","&nltri;":"⋪","&nltrie;":"⋬","&nmid;":"∤","&nopf;":"𝕟","&not":"¬","&not;":"¬","&notin;":"∉","&notinE;":"⋹̸","&notindot;":"⋵̸","&notinva;":"∉","&notinvb;":"⋷","&notinvc;":"⋶","&notni;":"∌","&notniva;":"∌","&notnivb;":"⋾","&notnivc;":"⋽","&npar;":"∦","&nparallel;":"∦","&nparsl;":"⫽⃥","&npart;":"∂̸","&npolint;":"⨔","&npr;":"⊀","&nprcue;":"⋠","&npre;":"⪯̸","&nprec;":"⊀","&npreceq;":"⪯̸","&nrArr;":"⇏","&nrarr;":"↛","&nrarrc;":"⤳̸","&nrarrw;":"↝̸","&nrightarrow;":"↛","&nrtri;":"⋫","&nrtrie;":"⋭","&nsc;":"⊁","&nsccue;":"⋡","&nsce;":"⪰̸","&nscr;":"𝓃","&nshortmid;":"∤","&nshortparallel;":"∦","&nsim;":"≁","&nsime;":"≄","&nsimeq;":"≄","&nsmid;":"∤","&nspar;":"∦","&nsqsube;":"⋢","&nsqsupe;":"⋣","&nsub;":"⊄","&nsubE;":"⫅̸","&nsube;":"⊈","&nsubset;":"⊂⃒","&nsubseteq;":"⊈","&nsubseteqq;":"⫅̸","&nsucc;":"⊁","&nsucceq;":"⪰̸","&nsup;":"⊅","&nsupE;":"⫆̸","&nsupe;":"⊉","&nsupset;":"⊃⃒","&nsupseteq;":"⊉","&nsupseteqq;":"⫆̸","&ntgl;":"≹","&ntilde":"ñ","&ntilde;":"ñ","&ntlg;":"≸","&ntriangleleft;":"⋪","&ntrianglelefteq;":"⋬","&ntriangleright;":"⋫","&ntrianglerighteq;":"⋭","&nu;":"ν","&num;":"#","&numero;":"№","&numsp;":" ","&nvDash;":"⊭","&nvHarr;":"⤄","&nvap;":"≍⃒","&nvdash;":"⊬","&nvge;":"≥⃒","&nvgt;":">⃒","&nvinfin;":"⧞","&nvlArr;":"⤂","&nvle;":"≤⃒","&nvlt;":"<⃒","&nvltrie;":"⊴⃒","&nvrArr;":"⤃","&nvrtrie;":"⊵⃒","&nvsim;":"∼⃒","&nwArr;":"⇖","&nwarhk;":"⤣","&nwarr;":"↖","&nwarrow;":"↖","&nwnear;":"⤧","&oS;":"Ⓢ","&oacute":"ó","&oacute;":"ó","&oast;":"⊛","&ocir;":"⊚","&ocirc":"ô","&ocirc;":"ô","&ocy;":"о","&odash;":"⊝","&odblac;":"ő","&odiv;":"⨸","&odot;":"⊙","&odsold;":"⦼","&oelig;":"œ","&ofcir;":"⦿","&ofr;":"𝔬","&ogon;":"˛","&ograve":"ò","&ograve;":"ò","&ogt;":"⧁","&ohbar;":"⦵","&ohm;":"Ω","&oint;":"∮","&olarr;":"↺","&olcir;":"⦾","&olcross;":"⦻","&oline;":"‾","&olt;":"⧀","&omacr;":"ō","&omega;":"ω","&omicron;":"ο","&omid;":"⦶","&ominus;":"⊖","&oopf;":"𝕠","&opar;":"⦷","&operp;":"⦹","&oplus;":"⊕","&or;":"∨","&orarr;":"↻","&ord;":"⩝","&order;":"ℴ","&orderof;":"ℴ","&ordf":"ª","&ordf;":"ª","&ordm":"º","&ordm;":"º","&origof;":"⊶","&oror;":"⩖","&orslope;":"⩗","&orv;":"⩛","&oscr;":"ℴ","&oslash":"ø","&oslash;":"ø","&osol;":"⊘","&otilde":"õ","&otilde;":"õ","&otimes;":"⊗","&otimesas;":"⨶","&ouml":"ö","&ouml;":"ö","&ovbar;":"⌽","&par;":"∥","&para":"¶","&para;":"¶","&parallel;":"∥","&parsim;":"⫳","&parsl;":"⫽","&part;":"∂","&pcy;":"п","&percnt;":"%","&period;":".","&permil;":"‰","&perp;":"⊥","&pertenk;":"‱","&pfr;":"𝔭","&phi;":"φ","&phiv;":"ϕ","&phmmat;":"ℳ","&phone;":"☎","&pi;":"π","&pitchfork;":"⋔","&piv;":"ϖ","&planck;":"ℏ","&planckh;":"ℎ","&plankv;":"ℏ","&plus;":"+","&plusacir;":"⨣","&plusb;":"⊞","&pluscir;":"⨢","&plusdo;":"∔","&plusdu;":"⨥","&pluse;":"⩲","&plusmn":"±","&plusmn;":"±","&plussim;":"⨦","&plustwo;":"⨧","&pm;":"±","&pointint;":"⨕","&popf;":"𝕡","&pound":"£","&pound;":"£","&pr;":"≺","&prE;":"⪳","&prap;":"⪷","&prcue;":"≼","&pre;":"⪯","&prec;":"≺","&precapprox;":"⪷","&preccurlyeq;":"≼","&preceq;":"⪯","&precnapprox;":"⪹","&precneqq;":"⪵","&precnsim;":"⋨","&precsim;":"≾","&prime;":"′","&primes;":"ℙ","&prnE;":"⪵","&prnap;":"⪹","&prnsim;":"⋨","&prod;":"∏","&profalar;":"⌮","&profline;":"⌒","&profsurf;":"⌓","&prop;":"∝","&propto;":"∝","&prsim;":"≾","&prurel;":"⊰","&pscr;":"𝓅","&psi;":"ψ","&puncsp;":" ","&qfr;":"𝔮","&qint;":"⨌","&qopf;":"𝕢","&qprime;":"⁗","&qscr;":"𝓆","&quaternions;":"ℍ","&quatint;":"⨖","&quest;":"?","&questeq;":"≟","&quot":'"',"&quot;":'"',"&rAarr;":"⇛","&rArr;":"⇒","&rAtail;":"⤜","&rBarr;":"⤏","&rHar;":"⥤","&race;":"∽̱","&racute;":"ŕ","&radic;":"√","&raemptyv;":"⦳","&rang;":"⟩","&rangd;":"⦒","&range;":"⦥","&rangle;":"⟩","&raquo":"»","&raquo;":"»","&rarr;":"→","&rarrap;":"⥵","&rarrb;":"⇥","&rarrbfs;":"⤠","&rarrc;":"⤳","&rarrfs;":"⤞","&rarrhk;":"↪","&rarrlp;":"↬","&rarrpl;":"⥅","&rarrsim;":"⥴","&rarrtl;":"↣","&rarrw;":"↝","&ratail;":"⤚","&ratio;":"∶","&rationals;":"ℚ","&rbarr;":"⤍","&rbbrk;":"❳","&rbrace;":"}","&rbrack;":"]","&rbrke;":"⦌","&rbrksld;":"⦎","&rbrkslu;":"⦐","&rcaron;":"ř","&rcedil;":"ŗ","&rceil;":"⌉","&rcub;":"}","&rcy;":"р","&rdca;":"⤷","&rdldhar;":"⥩","&rdquo;":"”","&rdquor;":"”","&rdsh;":"↳","&real;":"ℜ","&realine;":"ℛ","&realpart;":"ℜ","&reals;":"ℝ","&rect;":"▭","&reg":"®","&reg;":"®","&rfisht;":"⥽","&rfloor;":"⌋","&rfr;":"𝔯","&rhard;":"⇁","&rharu;":"⇀","&rharul;":"⥬","&rho;":"ρ","&rhov;":"ϱ","&rightarrow;":"→","&rightarrowtail;":"↣","&rightharpoondown;":"⇁","&rightharpoonup;":"⇀","&rightleftarrows;":"⇄","&rightleftharpoons;":"⇌","&rightrightarrows;":"⇉","&rightsquigarrow;":"↝","&rightthreetimes;":"⋌","&ring;":"˚","&risingdotseq;":"≓","&rlarr;":"⇄","&rlhar;":"⇌","&rlm;":"‏","&rmoust;":"⎱","&rmoustache;":"⎱","&rnmid;":"⫮","&roang;":"⟭","&roarr;":"⇾","&robrk;":"⟧","&ropar;":"⦆","&ropf;":"𝕣","&roplus;":"⨮","&rotimes;":"⨵","&rpar;":")","&rpargt;":"⦔","&rppolint;":"⨒","&rrarr;":"⇉","&rsaquo;":"›","&rscr;":"𝓇","&rsh;":"↱","&rsqb;":"]","&rsquo;":"’","&rsquor;":"’","&rthree;":"⋌","&rtimes;":"⋊","&rtri;":"▹","&rtrie;":"⊵","&rtrif;":"▸","&rtriltri;":"⧎","&ruluhar;":"⥨","&rx;":"℞","&sacute;":"ś","&sbquo;":"‚","&sc;":"≻","&scE;":"⪴","&scap;":"⪸","&scaron;":"š","&sccue;":"≽","&sce;":"⪰","&scedil;":"ş","&scirc;":"ŝ","&scnE;":"⪶","&scnap;":"⪺","&scnsim;":"⋩","&scpolint;":"⨓","&scsim;":"≿","&scy;":"с","&sdot;":"⋅","&sdotb;":"⊡","&sdote;":"⩦","&seArr;":"⇘","&searhk;":"⤥","&searr;":"↘","&searrow;":"↘","&sect":"§","&sect;":"§","&semi;":";","&seswar;":"⤩","&setminus;":"∖","&setmn;":"∖","&sext;":"✶","&sfr;":"𝔰","&sfrown;":"⌢","&sharp;":"♯","&shchcy;":"щ","&shcy;":"ш","&shortmid;":"∣","&shortparallel;":"∥","&shy":"­","&shy;":"­","&sigma;":"σ","&sigmaf;":"ς","&sigmav;":"ς","&sim;":"∼","&simdot;":"⩪","&sime;":"≃","&simeq;":"≃","&simg;":"⪞","&simgE;":"⪠","&siml;":"⪝","&simlE;":"⪟","&simne;":"≆","&simplus;":"⨤","&simrarr;":"⥲","&slarr;":"←","&smallsetminus;":"∖","&smashp;":"⨳","&smeparsl;":"⧤","&smid;":"∣","&smile;":"⌣","&smt;":"⪪","&smte;":"⪬","&smtes;":"⪬︀","&softcy;":"ь","&sol;":"/","&solb;":"⧄","&solbar;":"⌿","&sopf;":"𝕤","&spades;":"♠","&spadesuit;":"♠","&spar;":"∥","&sqcap;":"⊓","&sqcaps;":"⊓︀","&sqcup;":"⊔","&sqcups;":"⊔︀","&sqsub;":"⊏","&sqsube;":"⊑","&sqsubset;":"⊏","&sqsubseteq;":"⊑","&sqsup;":"⊐","&sqsupe;":"⊒","&sqsupset;":"⊐","&sqsupseteq;":"⊒","&squ;":"□","&square;":"□","&squarf;":"▪","&squf;":"▪","&srarr;":"→","&sscr;":"𝓈","&ssetmn;":"∖","&ssmile;":"⌣","&sstarf;":"⋆","&star;":"☆","&starf;":"★","&straightepsilon;":"ϵ","&straightphi;":"ϕ","&strns;":"¯","&sub;":"⊂","&subE;":"⫅","&subdot;":"⪽","&sube;":"⊆","&subedot;":"⫃","&submult;":"⫁","&subnE;":"⫋","&subne;":"⊊","&subplus;":"⪿","&subrarr;":"⥹","&subset;":"⊂","&subseteq;":"⊆","&subseteqq;":"⫅","&subsetneq;":"⊊","&subsetneqq;":"⫋","&subsim;":"⫇","&subsub;":"⫕","&subsup;":"⫓","&succ;":"≻","&succapprox;":"⪸","&succcurlyeq;":"≽","&succeq;":"⪰","&succnapprox;":"⪺","&succneqq;":"⪶","&succnsim;":"⋩","&succsim;":"≿","&sum;":"∑","&sung;":"♪","&sup1":"¹","&sup1;":"¹","&sup2":"²","&sup2;":"²","&sup3":"³","&sup3;":"³","&sup;":"⊃","&supE;":"⫆","&supdot;":"⪾","&supdsub;":"⫘","&supe;":"⊇","&supedot;":"⫄","&suphsol;":"⟉","&suphsub;":"⫗","&suplarr;":"⥻","&supmult;":"⫂","&supnE;":"⫌","&supne;":"⊋","&supplus;":"⫀","&supset;":"⊃","&supseteq;":"⊇","&supseteqq;":"⫆","&supsetneq;":"⊋","&supsetneqq;":"⫌","&supsim;":"⫈","&supsub;":"⫔","&supsup;":"⫖","&swArr;":"⇙","&swarhk;":"⤦","&swarr;":"↙","&swarrow;":"↙","&swnwar;":"⤪","&szlig":"ß","&szlig;":"ß","&target;":"⌖","&tau;":"τ","&tbrk;":"⎴","&tcaron;":"ť","&tcedil;":"ţ","&tcy;":"т","&tdot;":"⃛","&telrec;":"⌕","&tfr;":"𝔱","&there4;":"∴","&therefore;":"∴","&theta;":"θ","&thetasym;":"ϑ","&thetav;":"ϑ","&thickapprox;":"≈","&thicksim;":"∼","&thinsp;":" ","&thkap;":"≈","&thksim;":"∼","&thorn":"þ","&thorn;":"þ","&tilde;":"˜","&times":"×","&times;":"×","&timesb;":"⊠","&timesbar;":"⨱","&timesd;":"⨰","&tint;":"∭","&toea;":"⤨","&top;":"⊤","&topbot;":"⌶","&topcir;":"⫱","&topf;":"𝕥","&topfork;":"⫚","&tosa;":"⤩","&tprime;":"‴","&trade;":"™","&triangle;":"▵","&triangledown;":"▿","&triangleleft;":"◃","&trianglelefteq;":"⊴","&triangleq;":"≜","&triangleright;":"▹","&trianglerighteq;":"⊵","&tridot;":"◬","&trie;":"≜","&triminus;":"⨺","&triplus;":"⨹","&trisb;":"⧍","&tritime;":"⨻","&trpezium;":"⏢","&tscr;":"𝓉","&tscy;":"ц","&tshcy;":"ћ","&tstrok;":"ŧ","&twixt;":"≬","&twoheadleftarrow;":"↞","&twoheadrightarrow;":"↠","&uArr;":"⇑","&uHar;":"⥣","&uacute":"ú","&uacute;":"ú","&uarr;":"↑","&ubrcy;":"ў","&ubreve;":"ŭ","&ucirc":"û","&ucirc;":"û","&ucy;":"у","&udarr;":"⇅","&udblac;":"ű","&udhar;":"⥮","&ufisht;":"⥾","&ufr;":"𝔲","&ugrave":"ù","&ugrave;":"ù","&uharl;":"↿","&uharr;":"↾","&uhblk;":"▀","&ulcorn;":"⌜","&ulcorner;":"⌜","&ulcrop;":"⌏","&ultri;":"◸","&umacr;":"ū","&uml":"¨","&uml;":"¨","&uogon;":"ų","&uopf;":"𝕦","&uparrow;":"↑","&updownarrow;":"↕","&upharpoonleft;":"↿","&upharpoonright;":"↾","&uplus;":"⊎","&upsi;":"υ","&upsih;":"ϒ","&upsilon;":"υ","&upuparrows;":"⇈","&urcorn;":"⌝","&urcorner;":"⌝","&urcrop;":"⌎","&uring;":"ů","&urtri;":"◹","&uscr;":"𝓊","&utdot;":"⋰","&utilde;":"ũ","&utri;":"▵","&utrif;":"▴","&uuarr;":"⇈","&uuml":"ü","&uuml;":"ü","&uwangle;":"⦧","&vArr;":"⇕","&vBar;":"⫨","&vBarv;":"⫩","&vDash;":"⊨","&vangrt;":"⦜","&varepsilon;":"ϵ","&varkappa;":"ϰ","&varnothing;":"∅","&varphi;":"ϕ","&varpi;":"ϖ","&varpropto;":"∝","&varr;":"↕","&varrho;":"ϱ","&varsigma;":"ς","&varsubsetneq;":"⊊︀","&varsubsetneqq;":"⫋︀","&varsupsetneq;":"⊋︀","&varsupsetneqq;":"⫌︀","&vartheta;":"ϑ","&vartriangleleft;":"⊲","&vartriangleright;":"⊳","&vcy;":"в","&vdash;":"⊢","&vee;":"∨","&veebar;":"⊻","&veeeq;":"≚","&vellip;":"⋮","&verbar;":"|","&vert;":"|","&vfr;":"𝔳","&vltri;":"⊲","&vnsub;":"⊂⃒","&vnsup;":"⊃⃒","&vopf;":"𝕧","&vprop;":"∝","&vrtri;":"⊳","&vscr;":"𝓋","&vsubnE;":"⫋︀","&vsubne;":"⊊︀","&vsupnE;":"⫌︀","&vsupne;":"⊋︀","&vzigzag;":"⦚","&wcirc;":"ŵ","&wedbar;":"⩟","&wedge;":"∧","&wedgeq;":"≙","&weierp;":"℘","&wfr;":"𝔴","&wopf;":"𝕨","&wp;":"℘","&wr;":"≀","&wreath;":"≀","&wscr;":"𝓌","&xcap;":"⋂","&xcirc;":"◯","&xcup;":"⋃","&xdtri;":"▽","&xfr;":"𝔵","&xhArr;":"⟺","&xharr;":"⟷","&xi;":"ξ","&xlArr;":"⟸","&xlarr;":"⟵","&xmap;":"⟼","&xnis;":"⋻","&xodot;":"⨀","&xopf;":"𝕩","&xoplus;":"⨁","&xotime;":"⨂","&xrArr;":"⟹","&xrarr;":"⟶","&xscr;":"𝓍","&xsqcup;":"⨆","&xuplus;":"⨄","&xutri;":"△","&xvee;":"⋁","&xwedge;":"⋀","&yacute":"ý","&yacute;":"ý","&yacy;":"я","&ycirc;":"ŷ","&ycy;":"ы","&yen":"¥","&yen;":"¥","&yfr;":"𝔶","&yicy;":"ї","&yopf;":"𝕪","&yscr;":"𝓎","&yucy;":"ю","&yuml":"ÿ","&yuml;":"ÿ","&zacute;":"ź","&zcaron;":"ž","&zcy;":"з","&zdot;":"ż","&zeetrf;":"ℨ","&zeta;":"ζ","&zfr;":"𝔷","&zhcy;":"ж","&zigrarr;":"⇝","&zopf;":"𝕫","&zscr;":"𝓏","&zwj;":"‍","&zwnj;":"‌"},characters:{"Æ":"&AElig;","&":"&amp;","Á":"&Aacute;","Ă":"&Abreve;","Â":"&Acirc;","А":"&Acy;","𝔄":"&Afr;","À":"&Agrave;","Α":"&Alpha;","Ā":"&Amacr;","⩓":"&And;","Ą":"&Aogon;","𝔸":"&Aopf;","⁡":"&af;","Å":"&angst;","𝒜":"&Ascr;","≔":"&coloneq;","Ã":"&Atilde;","Ä":"&Auml;","∖":"&ssetmn;","⫧":"&Barv;","⌆":"&doublebarwedge;","Б":"&Bcy;","∵":"&because;","ℬ":"&bernou;","Β":"&Beta;","𝔅":"&Bfr;","𝔹":"&Bopf;","˘":"&breve;","≎":"&bump;","Ч":"&CHcy;","©":"&copy;","Ć":"&Cacute;","⋒":"&Cap;","ⅅ":"&DD;","ℭ":"&Cfr;","Č":"&Ccaron;","Ç":"&Ccedil;","Ĉ":"&Ccirc;","∰":"&Cconint;","Ċ":"&Cdot;","¸":"&cedil;","·":"&middot;","Χ":"&Chi;","⊙":"&odot;","⊖":"&ominus;","⊕":"&oplus;","⊗":"&otimes;","∲":"&cwconint;","”":"&rdquor;","’":"&rsquor;","∷":"&Proportion;","⩴":"&Colone;","≡":"&equiv;","∯":"&DoubleContourIntegral;","∮":"&oint;","ℂ":"&complexes;","∐":"&coprod;","∳":"&awconint;","⨯":"&Cross;","𝒞":"&Cscr;","⋓":"&Cup;","≍":"&asympeq;","⤑":"&DDotrahd;","Ђ":"&DJcy;","Ѕ":"&DScy;","Џ":"&DZcy;","‡":"&ddagger;","↡":"&Darr;","⫤":"&DoubleLeftTee;","Ď":"&Dcaron;","Д":"&Dcy;","∇":"&nabla;","Δ":"&Delta;","𝔇":"&Dfr;","´":"&acute;","˙":"&dot;","˝":"&dblac;","`":"&grave;","˜":"&tilde;","⋄":"&diamond;","ⅆ":"&dd;","𝔻":"&Dopf;","¨":"&uml;","⃜":"&DotDot;","≐":"&esdot;","⇓":"&dArr;","⇐":"&lArr;","⇔":"&iff;","⟸":"&xlArr;","⟺":"&xhArr;","⟹":"&xrArr;","⇒":"&rArr;","⊨":"&vDash;","⇑":"&uArr;","⇕":"&vArr;","∥":"&spar;","↓":"&downarrow;","⤓":"&DownArrowBar;","⇵":"&duarr;","̑":"&DownBreve;","⥐":"&DownLeftRightVector;","⥞":"&DownLeftTeeVector;","↽":"&lhard;","⥖":"&DownLeftVectorBar;","⥟":"&DownRightTeeVector;","⇁":"&rightharpoondown;","⥗":"&DownRightVectorBar;","⊤":"&top;","↧":"&mapstodown;","𝒟":"&Dscr;","Đ":"&Dstrok;","Ŋ":"&ENG;","Ð":"&ETH;","É":"&Eacute;","Ě":"&Ecaron;","Ê":"&Ecirc;","Э":"&Ecy;","Ė":"&Edot;","𝔈":"&Efr;","È":"&Egrave;","∈":"&isinv;","Ē":"&Emacr;","◻":"&EmptySmallSquare;","▫":"&EmptyVerySmallSquare;","Ę":"&Eogon;","𝔼":"&Eopf;","Ε":"&Epsilon;","⩵":"&Equal;","≂":"&esim;","⇌":"&rlhar;","ℰ":"&expectation;","⩳":"&Esim;","Η":"&Eta;","Ë":"&Euml;","∃":"&exist;","ⅇ":"&exponentiale;","Ф":"&Fcy;","𝔉":"&Ffr;","◼":"&FilledSmallSquare;","▪":"&squf;","𝔽":"&Fopf;","∀":"&forall;","ℱ":"&Fscr;","Ѓ":"&GJcy;",">":"&gt;","Γ":"&Gamma;","Ϝ":"&Gammad;","Ğ":"&Gbreve;","Ģ":"&Gcedil;","Ĝ":"&Gcirc;","Г":"&Gcy;","Ġ":"&Gdot;","𝔊":"&Gfr;","⋙":"&ggg;","𝔾":"&Gopf;","≥":"&geq;","⋛":"&gtreqless;","≧":"&geqq;","⪢":"&GreaterGreater;","≷":"&gtrless;","⩾":"&ges;","≳":"&gtrsim;","𝒢":"&Gscr;","≫":"&gg;","Ъ":"&HARDcy;","ˇ":"&caron;","^":"&Hat;","Ĥ":"&Hcirc;","ℌ":"&Poincareplane;","ℋ":"&hamilt;","ℍ":"&quaternions;","─":"&boxh;","Ħ":"&Hstrok;","≏":"&bumpeq;","Е":"&IEcy;","Ĳ":"&IJlig;","Ё":"&IOcy;","Í":"&Iacute;","Î":"&Icirc;","И":"&Icy;","İ":"&Idot;","ℑ":"&imagpart;","Ì":"&Igrave;","Ī":"&Imacr;","ⅈ":"&ii;","∬":"&Int;","∫":"&int;","⋂":"&xcap;","⁣":"&ic;","⁢":"&it;","Į":"&Iogon;","𝕀":"&Iopf;","Ι":"&Iota;","ℐ":"&imagline;","Ĩ":"&Itilde;","І":"&Iukcy;","Ï":"&Iuml;","Ĵ":"&Jcirc;","Й":"&Jcy;","𝔍":"&Jfr;","𝕁":"&Jopf;","𝒥":"&Jscr;","Ј":"&Jsercy;","Є":"&Jukcy;","Х":"&KHcy;","Ќ":"&KJcy;","Κ":"&Kappa;","Ķ":"&Kcedil;","К":"&Kcy;","𝔎":"&Kfr;","𝕂":"&Kopf;","𝒦":"&Kscr;","Љ":"&LJcy;","<":"&lt;","Ĺ":"&Lacute;","Λ":"&Lambda;","⟪":"&Lang;","ℒ":"&lagran;","↞":"&twoheadleftarrow;","Ľ":"&Lcaron;","Ļ":"&Lcedil;","Л":"&Lcy;","⟨":"&langle;","←":"&slarr;","⇤":"&larrb;","⇆":"&lrarr;","⌈":"&lceil;","⟦":"&lobrk;","⥡":"&LeftDownTeeVector;","⇃":"&downharpoonleft;","⥙":"&LeftDownVectorBar;","⌊":"&lfloor;","↔":"&leftrightarrow;","⥎":"&LeftRightVector;","⊣":"&dashv;","↤":"&mapstoleft;","⥚":"&LeftTeeVector;","⊲":"&vltri;","⧏":"&LeftTriangleBar;","⊴":"&trianglelefteq;","⥑":"&LeftUpDownVector;","⥠":"&LeftUpTeeVector;","↿":"&upharpoonleft;","⥘":"&LeftUpVectorBar;","↼":"&lharu;","⥒":"&LeftVectorBar;","⋚":"&lesseqgtr;","≦":"&leqq;","≶":"&lg;","⪡":"&LessLess;","⩽":"&les;","≲":"&lsim;","𝔏":"&Lfr;","⋘":"&Ll;","⇚":"&lAarr;","Ŀ":"&Lmidot;","⟵":"&xlarr;","⟷":"&xharr;","⟶":"&xrarr;","𝕃":"&Lopf;","↙":"&swarrow;","↘":"&searrow;","↰":"&lsh;","Ł":"&Lstrok;","≪":"&ll;","⤅":"&Map;","М":"&Mcy;"," ":"&MediumSpace;","ℳ":"&phmmat;","𝔐":"&Mfr;","∓":"&mp;","𝕄":"&Mopf;","Μ":"&Mu;","Њ":"&NJcy;","Ń":"&Nacute;","Ň":"&Ncaron;","Ņ":"&Ncedil;","Н":"&Ncy;","​":"&ZeroWidthSpace;","\n":"&NewLine;","𝔑":"&Nfr;","⁠":"&NoBreak;"," ":"&nbsp;","ℕ":"&naturals;","⫬":"&Not;","≢":"&nequiv;","≭":"&NotCupCap;","∦":"&nspar;","∉":"&notinva;","≠":"&ne;","≂̸":"&nesim;","∄":"&nexists;","≯":"&ngtr;","≱":"&ngeq;","≧̸":"&ngeqq;","≫̸":"&nGtv;","≹":"&ntgl;","⩾̸":"&nges;","≵":"&ngsim;","≎̸":"&nbump;","≏̸":"&nbumpe;","⋪":"&ntriangleleft;","⧏̸":"&NotLeftTriangleBar;","⋬":"&ntrianglelefteq;","≮":"&nlt;","≰":"&nleq;","≸":"&ntlg;","≪̸":"&nLtv;","⩽̸":"&nles;","≴":"&nlsim;","⪢̸":"&NotNestedGreaterGreater;","⪡̸":"&NotNestedLessLess;","⊀":"&nprec;","⪯̸":"&npreceq;","⋠":"&nprcue;","∌":"&notniva;","⋫":"&ntriangleright;","⧐̸":"&NotRightTriangleBar;","⋭":"&ntrianglerighteq;","⊏̸":"&NotSquareSubset;","⋢":"&nsqsube;","⊐̸":"&NotSquareSuperset;","⋣":"&nsqsupe;","⊂⃒":"&vnsub;","⊈":"&nsubseteq;","⊁":"&nsucc;","⪰̸":"&nsucceq;","⋡":"&nsccue;","≿̸":"&NotSucceedsTilde;","⊃⃒":"&vnsup;","⊉":"&nsupseteq;","≁":"&nsim;","≄":"&nsimeq;","≇":"&ncong;","≉":"&napprox;","∤":"&nsmid;","𝒩":"&Nscr;","Ñ":"&Ntilde;","Ν":"&Nu;","Œ":"&OElig;","Ó":"&Oacute;","Ô":"&Ocirc;","О":"&Ocy;","Ő":"&Odblac;","𝔒":"&Ofr;","Ò":"&Ograve;","Ō":"&Omacr;","Ω":"&ohm;","Ο":"&Omicron;","𝕆":"&Oopf;","“":"&ldquo;","‘":"&lsquo;","⩔":"&Or;","𝒪":"&Oscr;","Ø":"&Oslash;","Õ":"&Otilde;","⨷":"&Otimes;","Ö":"&Ouml;","‾":"&oline;","⏞":"&OverBrace;","⎴":"&tbrk;","⏜":"&OverParenthesis;","∂":"&part;","П":"&Pcy;","𝔓":"&Pfr;","Φ":"&Phi;","Π":"&Pi;","±":"&pm;","ℙ":"&primes;","⪻":"&Pr;","≺":"&prec;","⪯":"&preceq;","≼":"&preccurlyeq;","≾":"&prsim;","″":"&Prime;","∏":"&prod;","∝":"&vprop;","𝒫":"&Pscr;","Ψ":"&Psi;",'"':"&quot;","𝔔":"&Qfr;","ℚ":"&rationals;","𝒬":"&Qscr;","⤐":"&drbkarow;","®":"&reg;","Ŕ":"&Racute;","⟫":"&Rang;","↠":"&twoheadrightarrow;","⤖":"&Rarrtl;","Ř":"&Rcaron;","Ŗ":"&Rcedil;","Р":"&Rcy;","ℜ":"&realpart;","∋":"&niv;","⇋":"&lrhar;","⥯":"&duhar;","Ρ":"&Rho;","⟩":"&rangle;","→":"&srarr;","⇥":"&rarrb;","⇄":"&rlarr;","⌉":"&rceil;","⟧":"&robrk;","⥝":"&RightDownTeeVector;","⇂":"&downharpoonright;","⥕":"&RightDownVectorBar;","⌋":"&rfloor;","⊢":"&vdash;","↦":"&mapsto;","⥛":"&RightTeeVector;","⊳":"&vrtri;","⧐":"&RightTriangleBar;","⊵":"&trianglerighteq;","⥏":"&RightUpDownVector;","⥜":"&RightUpTeeVector;","↾":"&upharpoonright;","⥔":"&RightUpVectorBar;","⇀":"&rightharpoonup;","⥓":"&RightVectorBar;","ℝ":"&reals;","⥰":"&RoundImplies;","⇛":"&rAarr;","ℛ":"&realine;","↱":"&rsh;","⧴":"&RuleDelayed;","Щ":"&SHCHcy;","Ш":"&SHcy;","Ь":"&SOFTcy;","Ś":"&Sacute;","⪼":"&Sc;","Š":"&Scaron;","Ş":"&Scedil;","Ŝ":"&Scirc;","С":"&Scy;","𝔖":"&Sfr;","↑":"&uparrow;","Σ":"&Sigma;","∘":"&compfn;","𝕊":"&Sopf;","√":"&radic;","□":"&square;","⊓":"&sqcap;","⊏":"&sqsubset;","⊑":"&sqsubseteq;","⊐":"&sqsupset;","⊒":"&sqsupseteq;","⊔":"&sqcup;","𝒮":"&Sscr;","⋆":"&sstarf;","⋐":"&Subset;","⊆":"&subseteq;","≻":"&succ;","⪰":"&succeq;","≽":"&succcurlyeq;","≿":"&succsim;","∑":"&sum;","⋑":"&Supset;","⊃":"&supset;","⊇":"&supseteq;","Þ":"&THORN;","™":"&trade;","Ћ":"&TSHcy;","Ц":"&TScy;","\t":"&Tab;","Τ":"&Tau;","Ť":"&Tcaron;","Ţ":"&Tcedil;","Т":"&Tcy;","𝔗":"&Tfr;","∴":"&therefore;","Θ":"&Theta;","  ":"&ThickSpace;"," ":"&thinsp;","∼":"&thksim;","≃":"&simeq;","≅":"&cong;","≈":"&thkap;","𝕋":"&Topf;","⃛":"&tdot;","𝒯":"&Tscr;","Ŧ":"&Tstrok;","Ú":"&Uacute;","↟":"&Uarr;","⥉":"&Uarrocir;","Ў":"&Ubrcy;","Ŭ":"&Ubreve;","Û":"&Ucirc;","У":"&Ucy;","Ű":"&Udblac;","𝔘":"&Ufr;","Ù":"&Ugrave;","Ū":"&Umacr;",_:"&lowbar;","⏟":"&UnderBrace;","⎵":"&bbrk;","⏝":"&UnderParenthesis;","⋃":"&xcup;","⊎":"&uplus;","Ų":"&Uogon;","𝕌":"&Uopf;","⤒":"&UpArrowBar;","⇅":"&udarr;","↕":"&varr;","⥮":"&udhar;","⊥":"&perp;","↥":"&mapstoup;","↖":"&nwarrow;","↗":"&nearrow;","ϒ":"&upsih;","Υ":"&Upsilon;","Ů":"&Uring;","𝒰":"&Uscr;","Ũ":"&Utilde;","Ü":"&Uuml;","⊫":"&VDash;","⫫":"&Vbar;","В":"&Vcy;","⊩":"&Vdash;","⫦":"&Vdashl;","⋁":"&xvee;","‖":"&Vert;","∣":"&smid;","|":"&vert;","❘":"&VerticalSeparator;","≀":"&wreath;"," ":"&hairsp;","𝔙":"&Vfr;","𝕍":"&Vopf;","𝒱":"&Vscr;","⊪":"&Vvdash;","Ŵ":"&Wcirc;","⋀":"&xwedge;","𝔚":"&Wfr;","𝕎":"&Wopf;","𝒲":"&Wscr;","𝔛":"&Xfr;","Ξ":"&Xi;","𝕏":"&Xopf;","𝒳":"&Xscr;","Я":"&YAcy;","Ї":"&YIcy;","Ю":"&YUcy;","Ý":"&Yacute;","Ŷ":"&Ycirc;","Ы":"&Ycy;","𝔜":"&Yfr;","𝕐":"&Yopf;","𝒴":"&Yscr;","Ÿ":"&Yuml;","Ж":"&ZHcy;","Ź":"&Zacute;","Ž":"&Zcaron;","З":"&Zcy;","Ż":"&Zdot;","Ζ":"&Zeta;","ℨ":"&zeetrf;","ℤ":"&integers;","𝒵":"&Zscr;","á":"&aacute;","ă":"&abreve;","∾":"&mstpos;","∾̳":"&acE;","∿":"&acd;","â":"&acirc;","а":"&acy;","æ":"&aelig;","𝔞":"&afr;","à":"&agrave;","ℵ":"&aleph;","α":"&alpha;","ā":"&amacr;","⨿":"&amalg;","∧":"&wedge;","⩕":"&andand;","⩜":"&andd;","⩘":"&andslope;","⩚":"&andv;","∠":"&angle;","⦤":"&ange;","∡":"&measuredangle;","⦨":"&angmsdaa;","⦩":"&angmsdab;","⦪":"&angmsdac;","⦫":"&angmsdad;","⦬":"&angmsdae;","⦭":"&angmsdaf;","⦮":"&angmsdag;","⦯":"&angmsdah;","∟":"&angrt;","⊾":"&angrtvb;","⦝":"&angrtvbd;","∢":"&angsph;","⍼":"&angzarr;","ą":"&aogon;","𝕒":"&aopf;","⩰":"&apE;","⩯":"&apacir;","≊":"&approxeq;","≋":"&apid;","'":"&apos;","å":"&aring;","𝒶":"&ascr;","*":"&midast;","ã":"&atilde;","ä":"&auml;","⨑":"&awint;","⫭":"&bNot;","≌":"&bcong;","϶":"&bepsi;","‵":"&bprime;","∽":"&bsim;","⋍":"&bsime;","⊽":"&barvee;","⌅":"&barwedge;","⎶":"&bbrktbrk;","б":"&bcy;","„":"&ldquor;","⦰":"&bemptyv;","β":"&beta;","ℶ":"&beth;","≬":"&twixt;","𝔟":"&bfr;","◯":"&xcirc;","⨀":"&xodot;","⨁":"&xoplus;","⨂":"&xotime;","⨆":"&xsqcup;","★":"&starf;","▽":"&xdtri;","△":"&xutri;","⨄":"&xuplus;","⤍":"&rbarr;","⧫":"&lozf;","▴":"&utrif;","▾":"&dtrif;","◂":"&ltrif;","▸":"&rtrif;","␣":"&blank;","▒":"&blk12;","░":"&blk14;","▓":"&blk34;","█":"&block;","=⃥":"&bne;","≡⃥":"&bnequiv;","⌐":"&bnot;","𝕓":"&bopf;","⋈":"&bowtie;","╗":"&boxDL;","╔":"&boxDR;","╖":"&boxDl;","╓":"&boxDr;","═":"&boxH;","╦":"&boxHD;","╩":"&boxHU;","╤":"&boxHd;","╧":"&boxHu;","╝":"&boxUL;","╚":"&boxUR;","╜":"&boxUl;","╙":"&boxUr;","║":"&boxV;","╬":"&boxVH;","╣":"&boxVL;","╠":"&boxVR;","╫":"&boxVh;","╢":"&boxVl;","╟":"&boxVr;","⧉":"&boxbox;","╕":"&boxdL;","╒":"&boxdR;","┐":"&boxdl;","┌":"&boxdr;","╥":"&boxhD;","╨":"&boxhU;","┬":"&boxhd;","┴":"&boxhu;","⊟":"&minusb;","⊞":"&plusb;","⊠":"&timesb;","╛":"&boxuL;","╘":"&boxuR;","┘":"&boxul;","└":"&boxur;","│":"&boxv;","╪":"&boxvH;","╡":"&boxvL;","╞":"&boxvR;","┼":"&boxvh;","┤":"&boxvl;","├":"&boxvr;","¦":"&brvbar;","𝒷":"&bscr;","⁏":"&bsemi;","\\":"&bsol;","⧅":"&bsolb;","⟈":"&bsolhsub;","•":"&bullet;","⪮":"&bumpE;","ć":"&cacute;","∩":"&cap;","⩄":"&capand;","⩉":"&capbrcup;","⩋":"&capcap;","⩇":"&capcup;","⩀":"&capdot;","∩︀":"&caps;","⁁":"&caret;","⩍":"&ccaps;","č":"&ccaron;","ç":"&ccedil;","ĉ":"&ccirc;","⩌":"&ccups;","⩐":"&ccupssm;","ċ":"&cdot;","⦲":"&cemptyv;","¢":"&cent;","𝔠":"&cfr;","ч":"&chcy;","✓":"&checkmark;","χ":"&chi;","○":"&cir;","⧃":"&cirE;","ˆ":"&circ;","≗":"&cire;","↺":"&olarr;","↻":"&orarr;","Ⓢ":"&oS;","⊛":"&oast;","⊚":"&ocir;","⊝":"&odash;","⨐":"&cirfnint;","⫯":"&cirmid;","⧂":"&cirscir;","♣":"&clubsuit;",":":"&colon;",",":"&comma;","@":"&commat;","∁":"&complement;","⩭":"&congdot;","𝕔":"&copf;","℗":"&copysr;","↵":"&crarr;","✗":"&cross;","𝒸":"&cscr;","⫏":"&csub;","⫑":"&csube;","⫐":"&csup;","⫒":"&csupe;","⋯":"&ctdot;","⤸":"&cudarrl;","⤵":"&cudarrr;","⋞":"&curlyeqprec;","⋟":"&curlyeqsucc;","↶":"&curvearrowleft;","⤽":"&cularrp;","∪":"&cup;","⩈":"&cupbrcap;","⩆":"&cupcap;","⩊":"&cupcup;","⊍":"&cupdot;","⩅":"&cupor;","∪︀":"&cups;","↷":"&curvearrowright;","⤼":"&curarrm;","⋎":"&cuvee;","⋏":"&cuwed;","¤":"&curren;","∱":"&cwint;","⌭":"&cylcty;","⥥":"&dHar;","†":"&dagger;","ℸ":"&daleth;","‐":"&hyphen;","⤏":"&rBarr;","ď":"&dcaron;","д":"&dcy;","⇊":"&downdownarrows;","⩷":"&eDDot;","°":"&deg;","δ":"&delta;","⦱":"&demptyv;","⥿":"&dfisht;","𝔡":"&dfr;","♦":"&diams;","ϝ":"&gammad;","⋲":"&disin;","÷":"&divide;","⋇":"&divonx;","ђ":"&djcy;","⌞":"&llcorner;","⌍":"&dlcrop;",$:"&dollar;","𝕕":"&dopf;","≑":"&eDot;","∸":"&minusd;","∔":"&plusdo;","⊡":"&sdotb;","⌟":"&lrcorner;","⌌":"&drcrop;","𝒹":"&dscr;","ѕ":"&dscy;","⧶":"&dsol;","đ":"&dstrok;","⋱":"&dtdot;","▿":"&triangledown;","⦦":"&dwangle;","џ":"&dzcy;","⟿":"&dzigrarr;","é":"&eacute;","⩮":"&easter;","ě":"&ecaron;","≖":"&eqcirc;","ê":"&ecirc;","≕":"&eqcolon;","э":"&ecy;","ė":"&edot;","≒":"&fallingdotseq;","𝔢":"&efr;","⪚":"&eg;","è":"&egrave;","⪖":"&eqslantgtr;","⪘":"&egsdot;","⪙":"&el;","⏧":"&elinters;","ℓ":"&ell;","⪕":"&eqslantless;","⪗":"&elsdot;","ē":"&emacr;","∅":"&varnothing;"," ":"&emsp13;"," ":"&emsp14;"," ":"&emsp;","ŋ":"&eng;"," ":"&ensp;","ę":"&eogon;","𝕖":"&eopf;","⋕":"&epar;","⧣":"&eparsl;","⩱":"&eplus;","ε":"&epsilon;","ϵ":"&varepsilon;","=":"&equals;","≟":"&questeq;","⩸":"&equivDD;","⧥":"&eqvparsl;","≓":"&risingdotseq;","⥱":"&erarr;","ℯ":"&escr;","η":"&eta;","ð":"&eth;","ë":"&euml;","€":"&euro;","!":"&excl;","ф":"&fcy;","♀":"&female;","ﬃ":"&ffilig;","ﬀ":"&fflig;","ﬄ":"&ffllig;","𝔣":"&ffr;","ﬁ":"&filig;",fj:"&fjlig;","♭":"&flat;","ﬂ":"&fllig;","▱":"&fltns;","ƒ":"&fnof;","𝕗":"&fopf;","⋔":"&pitchfork;","⫙":"&forkv;","⨍":"&fpartint;","½":"&half;","⅓":"&frac13;","¼":"&frac14;","⅕":"&frac15;","⅙":"&frac16;","⅛":"&frac18;","⅔":"&frac23;","⅖":"&frac25;","¾":"&frac34;","⅗":"&frac35;","⅜":"&frac38;","⅘":"&frac45;","⅚":"&frac56;","⅝":"&frac58;","⅞":"&frac78;","⁄":"&frasl;","⌢":"&sfrown;","𝒻":"&fscr;","⪌":"&gtreqqless;","ǵ":"&gacute;","γ":"&gamma;","⪆":"&gtrapprox;","ğ":"&gbreve;","ĝ":"&gcirc;","г":"&gcy;","ġ":"&gdot;","⪩":"&gescc;","⪀":"&gesdot;","⪂":"&gesdoto;","⪄":"&gesdotol;","⋛︀":"&gesl;","⪔":"&gesles;","𝔤":"&gfr;","ℷ":"&gimel;","ѓ":"&gjcy;","⪒":"&glE;","⪥":"&gla;","⪤":"&glj;","≩":"&gneqq;","⪊":"&gnapprox;","⪈":"&gneq;","⋧":"&gnsim;","𝕘":"&gopf;","ℊ":"&gscr;","⪎":"&gsime;","⪐":"&gsiml;","⪧":"&gtcc;","⩺":"&gtcir;","⋗":"&gtrdot;","⦕":"&gtlPar;","⩼":"&gtquest;","⥸":"&gtrarr;","≩︀":"&gvnE;","ъ":"&hardcy;","⥈":"&harrcir;","↭":"&leftrightsquigarrow;","ℏ":"&plankv;","ĥ":"&hcirc;","♥":"&heartsuit;","…":"&mldr;","⊹":"&hercon;","𝔥":"&hfr;","⤥":"&searhk;","⤦":"&swarhk;","⇿":"&hoarr;","∻":"&homtht;","↩":"&larrhk;","↪":"&rarrhk;","𝕙":"&hopf;","―":"&horbar;","𝒽":"&hscr;","ħ":"&hstrok;","⁃":"&hybull;","í":"&iacute;","î":"&icirc;","и":"&icy;","е":"&iecy;","¡":"&iexcl;","𝔦":"&ifr;","ì":"&igrave;","⨌":"&qint;","∭":"&tint;","⧜":"&iinfin;","℩":"&iiota;","ĳ":"&ijlig;","ī":"&imacr;","ı":"&inodot;","⊷":"&imof;","Ƶ":"&imped;","℅":"&incare;","∞":"&infin;","⧝":"&infintie;","⊺":"&intercal;","⨗":"&intlarhk;","⨼":"&iprod;","ё":"&iocy;","į":"&iogon;","𝕚":"&iopf;","ι":"&iota;","¿":"&iquest;","𝒾":"&iscr;","⋹":"&isinE;","⋵":"&isindot;","⋴":"&isins;","⋳":"&isinsv;","ĩ":"&itilde;","і":"&iukcy;","ï":"&iuml;","ĵ":"&jcirc;","й":"&jcy;","𝔧":"&jfr;","ȷ":"&jmath;","𝕛":"&jopf;","𝒿":"&jscr;","ј":"&jsercy;","є":"&jukcy;","κ":"&kappa;","ϰ":"&varkappa;","ķ":"&kcedil;","к":"&kcy;","𝔨":"&kfr;","ĸ":"&kgreen;","х":"&khcy;","ќ":"&kjcy;","𝕜":"&kopf;","𝓀":"&kscr;","⤛":"&lAtail;","⤎":"&lBarr;","⪋":"&lesseqqgtr;","⥢":"&lHar;","ĺ":"&lacute;","⦴":"&laemptyv;","λ":"&lambda;","⦑":"&langd;","⪅":"&lessapprox;","«":"&laquo;","⤟":"&larrbfs;","⤝":"&larrfs;","↫":"&looparrowleft;","⤹":"&larrpl;","⥳":"&larrsim;","↢":"&leftarrowtail;","⪫":"&lat;","⤙":"&latail;","⪭":"&late;","⪭︀":"&lates;","⤌":"&lbarr;","❲":"&lbbrk;","{":"&lcub;","[":"&lsqb;","⦋":"&lbrke;","⦏":"&lbrksld;","⦍":"&lbrkslu;","ľ":"&lcaron;","ļ":"&lcedil;","л":"&lcy;","⤶":"&ldca;","⥧":"&ldrdhar;","⥋":"&ldrushar;","↲":"&ldsh;","≤":"&leq;","⇇":"&llarr;","⋋":"&lthree;","⪨":"&lescc;","⩿":"&lesdot;","⪁":"&lesdoto;","⪃":"&lesdotor;","⋚︀":"&lesg;","⪓":"&lesges;","⋖":"&ltdot;","⥼":"&lfisht;","𝔩":"&lfr;","⪑":"&lgE;","⥪":"&lharul;","▄":"&lhblk;","љ":"&ljcy;","⥫":"&llhard;","◺":"&lltri;","ŀ":"&lmidot;","⎰":"&lmoustache;","≨":"&lneqq;","⪉":"&lnapprox;","⪇":"&lneq;","⋦":"&lnsim;","⟬":"&loang;","⇽":"&loarr;","⟼":"&xmap;","↬":"&rarrlp;","⦅":"&lopar;","𝕝":"&lopf;","⨭":"&loplus;","⨴":"&lotimes;","∗":"&lowast;","◊":"&lozenge;","(":"&lpar;","⦓":"&lparlt;","⥭":"&lrhard;","‎":"&lrm;","⊿":"&lrtri;","‹":"&lsaquo;","𝓁":"&lscr;","⪍":"&lsime;","⪏":"&lsimg;","‚":"&sbquo;","ł":"&lstrok;","⪦":"&ltcc;","⩹":"&ltcir;","⋉":"&ltimes;","⥶":"&ltlarr;","⩻":"&ltquest;","⦖":"&ltrPar;","◃":"&triangleleft;","⥊":"&lurdshar;","⥦":"&luruhar;","≨︀":"&lvnE;","∺":"&mDDot;","¯":"&strns;","♂":"&male;","✠":"&maltese;","▮":"&marker;","⨩":"&mcomma;","м":"&mcy;","—":"&mdash;","𝔪":"&mfr;","℧":"&mho;","µ":"&micro;","⫰":"&midcir;","−":"&minus;","⨪":"&minusdu;","⫛":"&mlcp;","⊧":"&models;","𝕞":"&mopf;","𝓂":"&mscr;","μ":"&mu;","⊸":"&mumap;","⋙̸":"&nGg;","≫⃒":"&nGt;","⇍":"&nlArr;","⇎":"&nhArr;","⋘̸":"&nLl;","≪⃒":"&nLt;","⇏":"&nrArr;","⊯":"&nVDash;","⊮":"&nVdash;","ń":"&nacute;","∠⃒":"&nang;","⩰̸":"&napE;","≋̸":"&napid;","ŉ":"&napos;","♮":"&natural;","⩃":"&ncap;","ň":"&ncaron;","ņ":"&ncedil;","⩭̸":"&ncongdot;","⩂":"&ncup;","н":"&ncy;","–":"&ndash;","⇗":"&neArr;","⤤":"&nearhk;","≐̸":"&nedot;","⤨":"&toea;","𝔫":"&nfr;","↮":"&nleftrightarrow;","⫲":"&nhpar;","⋼":"&nis;","⋺":"&nisd;","њ":"&njcy;","≦̸":"&nleqq;","↚":"&nleftarrow;","‥":"&nldr;","𝕟":"&nopf;","¬":"&not;","⋹̸":"&notinE;","⋵̸":"&notindot;","⋷":"&notinvb;","⋶":"&notinvc;","⋾":"&notnivb;","⋽":"&notnivc;","⫽⃥":"&nparsl;","∂̸":"&npart;","⨔":"&npolint;","↛":"&nrightarrow;","⤳̸":"&nrarrc;","↝̸":"&nrarrw;","𝓃":"&nscr;","⊄":"&nsub;","⫅̸":"&nsubseteqq;","⊅":"&nsup;","⫆̸":"&nsupseteqq;","ñ":"&ntilde;","ν":"&nu;","#":"&num;","№":"&numero;"," ":"&numsp;","⊭":"&nvDash;","⤄":"&nvHarr;","≍⃒":"&nvap;","⊬":"&nvdash;","≥⃒":"&nvge;",">⃒":"&nvgt;","⧞":"&nvinfin;","⤂":"&nvlArr;","≤⃒":"&nvle;","<⃒":"&nvlt;","⊴⃒":"&nvltrie;","⤃":"&nvrArr;","⊵⃒":"&nvrtrie;","∼⃒":"&nvsim;","⇖":"&nwArr;","⤣":"&nwarhk;","⤧":"&nwnear;","ó":"&oacute;","ô":"&ocirc;","о":"&ocy;","ő":"&odblac;","⨸":"&odiv;","⦼":"&odsold;","œ":"&oelig;","⦿":"&ofcir;","𝔬":"&ofr;","˛":"&ogon;","ò":"&ograve;","⧁":"&ogt;","⦵":"&ohbar;","⦾":"&olcir;","⦻":"&olcross;","⧀":"&olt;","ō":"&omacr;","ω":"&omega;","ο":"&omicron;","⦶":"&omid;","𝕠":"&oopf;","⦷":"&opar;","⦹":"&operp;","∨":"&vee;","⩝":"&ord;","ℴ":"&oscr;","ª":"&ordf;","º":"&ordm;","⊶":"&origof;","⩖":"&oror;","⩗":"&orslope;","⩛":"&orv;","ø":"&oslash;","⊘":"&osol;","õ":"&otilde;","⨶":"&otimesas;","ö":"&ouml;","⌽":"&ovbar;","¶":"&para;","⫳":"&parsim;","⫽":"&parsl;","п":"&pcy;","%":"&percnt;",".":"&period;","‰":"&permil;","‱":"&pertenk;","𝔭":"&pfr;","φ":"&phi;","ϕ":"&varphi;","☎":"&phone;","π":"&pi;","ϖ":"&varpi;","ℎ":"&planckh;","+":"&plus;","⨣":"&plusacir;","⨢":"&pluscir;","⨥":"&plusdu;","⩲":"&pluse;","⨦":"&plussim;","⨧":"&plustwo;","⨕":"&pointint;","𝕡":"&popf;","£":"&pound;","⪳":"&prE;","⪷":"&precapprox;","⪹":"&prnap;","⪵":"&prnE;","⋨":"&prnsim;","′":"&prime;","⌮":"&profalar;","⌒":"&profline;","⌓":"&profsurf;","⊰":"&prurel;","𝓅":"&pscr;","ψ":"&psi;"," ":"&puncsp;","𝔮":"&qfr;","𝕢":"&qopf;","⁗":"&qprime;","𝓆":"&qscr;","⨖":"&quatint;","?":"&quest;","⤜":"&rAtail;","⥤":"&rHar;","∽̱":"&race;","ŕ":"&racute;","⦳":"&raemptyv;","⦒":"&rangd;","⦥":"&range;","»":"&raquo;","⥵":"&rarrap;","⤠":"&rarrbfs;","⤳":"&rarrc;","⤞":"&rarrfs;","⥅":"&rarrpl;","⥴":"&rarrsim;","↣":"&rightarrowtail;","↝":"&rightsquigarrow;","⤚":"&ratail;","∶":"&ratio;","❳":"&rbbrk;","}":"&rcub;","]":"&rsqb;","⦌":"&rbrke;","⦎":"&rbrksld;","⦐":"&rbrkslu;","ř":"&rcaron;","ŗ":"&rcedil;","р":"&rcy;","⤷":"&rdca;","⥩":"&rdldhar;","↳":"&rdsh;","▭":"&rect;","⥽":"&rfisht;","𝔯":"&rfr;","⥬":"&rharul;","ρ":"&rho;","ϱ":"&varrho;","⇉":"&rrarr;","⋌":"&rthree;","˚":"&ring;","‏":"&rlm;","⎱":"&rmoustache;","⫮":"&rnmid;","⟭":"&roang;","⇾":"&roarr;","⦆":"&ropar;","𝕣":"&ropf;","⨮":"&roplus;","⨵":"&rotimes;",")":"&rpar;","⦔":"&rpargt;","⨒":"&rppolint;","›":"&rsaquo;","𝓇":"&rscr;","⋊":"&rtimes;","▹":"&triangleright;","⧎":"&rtriltri;","⥨":"&ruluhar;","℞":"&rx;","ś":"&sacute;","⪴":"&scE;","⪸":"&succapprox;","š":"&scaron;","ş":"&scedil;","ŝ":"&scirc;","⪶":"&succneqq;","⪺":"&succnapprox;","⋩":"&succnsim;","⨓":"&scpolint;","с":"&scy;","⋅":"&sdot;","⩦":"&sdote;","⇘":"&seArr;","§":"&sect;",";":"&semi;","⤩":"&tosa;","✶":"&sext;","𝔰":"&sfr;","♯":"&sharp;","щ":"&shchcy;","ш":"&shcy;","­":"&shy;","σ":"&sigma;","ς":"&varsigma;","⩪":"&simdot;","⪞":"&simg;","⪠":"&simgE;","⪝":"&siml;","⪟":"&simlE;","≆":"&simne;","⨤":"&simplus;","⥲":"&simrarr;","⨳":"&smashp;","⧤":"&smeparsl;","⌣":"&ssmile;","⪪":"&smt;","⪬":"&smte;","⪬︀":"&smtes;","ь":"&softcy;","/":"&sol;","⧄":"&solb;","⌿":"&solbar;","𝕤":"&sopf;","♠":"&spadesuit;","⊓︀":"&sqcaps;","⊔︀":"&sqcups;","𝓈":"&sscr;","☆":"&star;","⊂":"&subset;","⫅":"&subseteqq;","⪽":"&subdot;","⫃":"&subedot;","⫁":"&submult;","⫋":"&subsetneqq;","⊊":"&subsetneq;","⪿":"&subplus;","⥹":"&subrarr;","⫇":"&subsim;","⫕":"&subsub;","⫓":"&subsup;","♪":"&sung;","¹":"&sup1;","²":"&sup2;","³":"&sup3;","⫆":"&supseteqq;","⪾":"&supdot;","⫘":"&supdsub;","⫄":"&supedot;","⟉":"&suphsol;","⫗":"&suphsub;","⥻":"&suplarr;","⫂":"&supmult;","⫌":"&supsetneqq;","⊋":"&supsetneq;","⫀":"&supplus;","⫈":"&supsim;","⫔":"&supsub;","⫖":"&supsup;","⇙":"&swArr;","⤪":"&swnwar;","ß":"&szlig;","⌖":"&target;","τ":"&tau;","ť":"&tcaron;","ţ":"&tcedil;","т":"&tcy;","⌕":"&telrec;","𝔱":"&tfr;","θ":"&theta;","ϑ":"&vartheta;","þ":"&thorn;","×":"&times;","⨱":"&timesbar;","⨰":"&timesd;","⌶":"&topbot;","⫱":"&topcir;","𝕥":"&topf;","⫚":"&topfork;","‴":"&tprime;","▵":"&utri;","≜":"&trie;","◬":"&tridot;","⨺":"&triminus;","⨹":"&triplus;","⧍":"&trisb;","⨻":"&tritime;","⏢":"&trpezium;","𝓉":"&tscr;","ц":"&tscy;","ћ":"&tshcy;","ŧ":"&tstrok;","⥣":"&uHar;","ú":"&uacute;","ў":"&ubrcy;","ŭ":"&ubreve;","û":"&ucirc;","у":"&ucy;","ű":"&udblac;","⥾":"&ufisht;","𝔲":"&ufr;","ù":"&ugrave;","▀":"&uhblk;","⌜":"&ulcorner;","⌏":"&ulcrop;","◸":"&ultri;","ū":"&umacr;","ų":"&uogon;","𝕦":"&uopf;","υ":"&upsilon;","⇈":"&uuarr;","⌝":"&urcorner;","⌎":"&urcrop;","ů":"&uring;","◹":"&urtri;","𝓊":"&uscr;","⋰":"&utdot;","ũ":"&utilde;","ü":"&uuml;","⦧":"&uwangle;","⫨":"&vBar;","⫩":"&vBarv;","⦜":"&vangrt;","⊊︀":"&vsubne;","⫋︀":"&vsubnE;","⊋︀":"&vsupne;","⫌︀":"&vsupnE;","в":"&vcy;","⊻":"&veebar;","≚":"&veeeq;","⋮":"&vellip;","𝔳":"&vfr;","𝕧":"&vopf;","𝓋":"&vscr;","⦚":"&vzigzag;","ŵ":"&wcirc;","⩟":"&wedbar;","≙":"&wedgeq;","℘":"&wp;","𝔴":"&wfr;","𝕨":"&wopf;","𝓌":"&wscr;","𝔵":"&xfr;","ξ":"&xi;","⋻":"&xnis;","𝕩":"&xopf;","𝓍":"&xscr;","ý":"&yacute;","я":"&yacy;","ŷ":"&ycirc;","ы":"&ycy;","¥":"&yen;","𝔶":"&yfr;","ї":"&yicy;","𝕪":"&yopf;","𝓎":"&yscr;","ю":"&yucy;","ÿ":"&yuml;","ź":"&zacute;","ž":"&zcaron;","з":"&zcy;","ż":"&zdot;","ζ":"&zeta;","𝔷":"&zfr;","ж":"&zhcy;","⇝":"&zigrarr;","𝕫":"&zopf;","𝓏":"&zscr;","‍":"&zwj;","‌":"&zwnj;"}}}},"../node_modules/html-entities/lib/numeric-unicode-map.js":function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.numericUnicodeMap={0:65533,128:8364,130:8218,131:402,132:8222,133:8230,134:8224,135:8225,136:710,137:8240,138:352,139:8249,140:338,142:381,145:8216,146:8217,147:8220,148:8221,149:8226,150:8211,151:8212,152:732,153:8482,154:353,155:8250,156:339,158:382,159:376}},"../node_modules/html-entities/lib/surrogate-pairs.js":function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.fromCodePoint=String.fromCodePoint||function(e){return String.fromCharCode(Math.floor((e-65536)/1024)+55296,(e-65536)%1024+56320)},t.getCodePoint=String.prototype.codePointAt?function(e,t){return e.codePointAt(t)}:function(e,t){return 1024*(e.charCodeAt(t)-55296)+e.charCodeAt(t+1)-56320+65536},t.highSurrogateFrom=55296,t.highSurrogateTo=56319},"../node_modules/vue-code-highlight/dist/vue-code-highlight.esm.js":function(e,t,n){"use strict";n.r(t),n.d(t,{component:function(){return c}}),e=n.hmd(e);var r,o,a,i,s={},l=(r=/\blang(?:uage)?-([\w-]+)\b/i,o=0,a=s.Prism={manual:s.Prism&&s.Prism.manual,disableWorkerMessageHandler:s.Prism&&s.Prism.disableWorkerMessageHandler,util:{encode:function(e){return e instanceof i?new i(e.type,a.util.encode(e.content),e.alias):"Array"===a.util.type(e)?e.map(a.util.encode):e.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/\u00a0/g," ")},type:function(e){return Object.prototype.toString.call(e).match(/\[object (\w+)\]/)[1]},objId:function(e){return e.__id||Object.defineProperty(e,"__id",{value:++o}),e.__id},clone:function(e,t){var n=a.util.type(e);switch(t=t||{},n){case"Object":if(t[a.util.objId(e)])return t[a.util.objId(e)];for(var r in o={},t[a.util.objId(e)]=o,e)e.hasOwnProperty(r)&&(o[r]=a.util.clone(e[r],t));return o;case"Array":if(t[a.util.objId(e)])return t[a.util.objId(e)];var o=[];return t[a.util.objId(e)]=o,e.forEach((function(e,n){o[n]=a.util.clone(e,t)})),o}return e}},languages:{extend:function(e,t){var n=a.util.clone(a.languages[e]);for(var r in t)n[r]=t[r];return n},insertBefore:function(e,t,n,r){var o=(r=r||a.languages)[e];if(2==arguments.length){for(var i in n=arguments[1])n.hasOwnProperty(i)&&(o[i]=n[i]);return o}var s={};for(var l in o)if(o.hasOwnProperty(l)){if(l==t)for(var i in n)n.hasOwnProperty(i)&&(s[i]=n[i]);s[l]=o[l]}return a.languages.DFS(a.languages,(function(t,n){n===r[e]&&t!=e&&(this[t]=s)})),r[e]=s},DFS:function(e,t,n,r){for(var o in r=r||{},e)e.hasOwnProperty(o)&&(t.call(e,o,e[o],n||o),"Object"!==a.util.type(e[o])||r[a.util.objId(e[o])]?"Array"!==a.util.type(e[o])||r[a.util.objId(e[o])]||(r[a.util.objId(e[o])]=!0,a.languages.DFS(e[o],t,o,r)):(r[a.util.objId(e[o])]=!0,a.languages.DFS(e[o],t,null,r)))}},plugins:{},highlightAll:function(e,t){a.highlightAllUnder(document,e,t)},highlightAllUnder:function(e,t,n){var r={callback:n,selector:'code[class*="language-"], [class*="language-"] code, code[class*="lang-"], [class*="lang-"] code'};a.hooks.run("before-highlightall",r);for(var o,i=r.elements||e.querySelectorAll(r.selector),s=0;o=i[s++];)a.highlightElement(o,!0===t,r.callback)},highlightElement:function(e,t,n){for(var o,i,l=e;l&&!r.test(l.className);)l=l.parentNode;l&&(o=(l.className.match(r)||[,""])[1].toLowerCase(),i=a.languages[o]),e.className=e.className.replace(r,"").replace(/\s+/g," ")+" language-"+o,e.parentNode&&(l=e.parentNode,/pre/i.test(l.nodeName)&&(l.className=l.className.replace(r,"").replace(/\s+/g," ")+" language-"+o));var c={element:e,language:o,grammar:i,code:e.textContent};if(a.hooks.run("before-sanity-check",c),!c.code||!c.grammar)return c.code&&(a.hooks.run("before-highlight",c),c.element.textContent=c.code,a.hooks.run("after-highlight",c)),void a.hooks.run("complete",c);if(a.hooks.run("before-highlight",c),t&&s.Worker){var u=new Worker(a.filename);u.onmessage=function(e){c.highlightedCode=e.data,a.hooks.run("before-insert",c),c.element.innerHTML=c.highlightedCode,n&&n.call(c.element),a.hooks.run("after-highlight",c),a.hooks.run("complete",c)},u.postMessage(JSON.stringify({language:c.language,code:c.code,immediateClose:!0}))}else c.highlightedCode=a.highlight(c.code,c.grammar,c.language),a.hooks.run("before-insert",c),c.element.innerHTML=c.highlightedCode,n&&n.call(e),a.hooks.run("after-highlight",c),a.hooks.run("complete",c)},highlight:function(e,t,n){var r={code:e,grammar:t,language:n};return a.hooks.run("before-tokenize",r),r.tokens=a.tokenize(r.code,r.grammar),a.hooks.run("after-tokenize",r),i.stringify(a.util.encode(r.tokens),r.language)},matchGrammar:function(e,t,n,r,o,i,s){var l=a.Token;for(var c in n)if(n.hasOwnProperty(c)&&n[c]){if(c==s)return;var u=n[c];u="Array"===a.util.type(u)?u:[u];for(var d=0;d<u.length;++d){var p=u[d],f=p.inside,v=!!p.lookbehind,m=!!p.greedy,g=0,h=p.alias;if(m&&!p.pattern.global){var b=p.pattern.toString().match(/[imuy]*$/)[0];p.pattern=RegExp(p.pattern.source,b+"g")}p=p.pattern||p;for(var y=r,_=o;y<t.length;_+=t[y].length,++y){var x=t[y];if(t.length>e.length)return;if(!(x instanceof l)){if(m&&y!=t.length-1){if(p.lastIndex=_,!(E=p.exec(e)))break;for(var w=E.index+(v?E[1].length:0),A=E.index+E[0].length,C=y,k=_,j=t.length;C<j&&(k<A||!t[C].type&&!t[C-1].greedy);++C)w>=(k+=t[C].length)&&(++y,_=k);if(t[y]instanceof l)continue;S=C-y,x=e.slice(_,k),E.index-=_}else{p.lastIndex=0;var E=p.exec(x),S=1}if(E){v&&(g=E[1]?E[1].length:0),A=(w=E.index+g)+(E=E[0].slice(g)).length;var O=x.slice(0,w),L=x.slice(A),q=[y,S];O&&(++y,_+=O.length,q.push(O));var D=new l(c,f?a.tokenize(E,f):E,h,E,m);if(q.push(D),L&&q.push(L),Array.prototype.splice.apply(t,q),1!=S&&a.matchGrammar(e,t,n,y,_,!0,c),i)break}else if(i)break}}}}},tokenize:function(e,t,n){var r=[e],o=t.rest;if(o){for(var i in o)t[i]=o[i];delete t.rest}return a.matchGrammar(e,r,t,0,0,!1),r},hooks:{all:{},add:function(e,t){var n=a.hooks.all;n[e]=n[e]||[],n[e].push(t)},run:function(e,t){var n=a.hooks.all[e];if(n&&n.length)for(var r,o=0;r=n[o++];)r(t)}}},(i=a.Token=function(e,t,n,r,o){this.type=e,this.content=t,this.alias=n,this.length=0|(r||"").length,this.greedy=!!o}).stringify=function(e,t,n){if("string"==typeof e)return e;if("Array"===a.util.type(e))return e.map((function(n){return i.stringify(n,t,e)})).join("");var r={type:e.type,content:i.stringify(e.content,t,n),tag:"span",classes:["token",e.type],attributes:{},language:t,parent:n};if(e.alias){var o="Array"===a.util.type(e.alias)?e.alias:[e.alias];Array.prototype.push.apply(r.classes,o)}a.hooks.run("wrap",r);var s=Object.keys(r.attributes).map((function(e){return e+'="'+(r.attributes[e]||"").replace(/"/g,"&quot;")+'"'})).join(" ");return"<"+r.tag+' class="'+r.classes.join(" ")+'"'+(s?" "+s:"")+">"+r.content+"</"+r.tag+">"},s.document?s.Prism:s.addEventListener?(a.disableWorkerMessageHandler||s.addEventListener("message",(function(e){var t=JSON.parse(e.data),n=t.language,r=t.code,o=t.immediateClose;s.postMessage(a.highlight(r,a.languages[n],n)),o&&s.close()}),!1),s.Prism):s.Prism);e.exports&&(e.exports=l),void 0!==n.g&&(n.g.Prism=l),l.languages.markup={comment:/<!--[\s\S]*?-->/,prolog:/<\?[\s\S]+?\?>/,doctype:/<!DOCTYPE[\s\S]+?>/i,cdata:/<!\[CDATA\[[\s\S]*?]]>/i,tag:{pattern:/<\/?(?!\d)[^\s>\/=$<%]+(?:\s+[^\s>\/=]+(?:=(?:("|')(?:\\[\s\S]|(?!\1)[^\\])*\1|[^\s'">=]+))?)*\s*\/?>/i,greedy:!0,inside:{tag:{pattern:/^<\/?[^\s>\/]+/i,inside:{punctuation:/^<\/?/,namespace:/^[^\s>\/:]+:/}},"attr-value":{pattern:/=(?:("|')(?:\\[\s\S]|(?!\1)[^\\])*\1|[^\s'">=]+)/i,inside:{punctuation:[/^=/,{pattern:/(^|[^\\])["']/,lookbehind:!0}]}},punctuation:/\/?>/,"attr-name":{pattern:/[^\s>\/]+/,inside:{namespace:/^[^\s>\/:]+:/}}}},entity:/&#?[\da-z]{1,8};/i},l.languages.markup.tag.inside["attr-value"].inside.entity=l.languages.markup.entity,l.hooks.add("wrap",(function(e){"entity"===e.type&&(e.attributes.title=e.content.replace(/&amp;/,"&"))})),l.languages.xml=l.languages.markup,l.languages.html=l.languages.markup,l.languages.mathml=l.languages.markup,l.languages.svg=l.languages.markup,l.languages.css={comment:/\/\*[\s\S]*?\*\//,atrule:{pattern:/@[\w-]+?.*?(?:;|(?=\s*\{))/i,inside:{rule:/@[\w-]+/}},url:/url\((?:(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1|.*?)\)/i,selector:/[^{}\s][^{};]*?(?=\s*\{)/,string:{pattern:/("|')(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,greedy:!0},property:/[-_a-z\xA0-\uFFFF][-\w\xA0-\uFFFF]*(?=\s*:)/i,important:/\B!important\b/i,function:/[-a-z0-9]+(?=\()/i,punctuation:/[(){};:]/},l.languages.css.atrule.inside.rest=l.languages.css,l.languages.markup&&(l.languages.insertBefore("markup","tag",{style:{pattern:/(<style[\s\S]*?>)[\s\S]*?(?=<\/style>)/i,lookbehind:!0,inside:l.languages.css,alias:"language-css",greedy:!0}}),l.languages.insertBefore("inside","attr-value",{"style-attr":{pattern:/\s*style=("|')(?:\\[\s\S]|(?!\1)[^\\])*\1/i,inside:{"attr-name":{pattern:/^\s*style/i,inside:l.languages.markup.tag.inside},punctuation:/^\s*=\s*['"]|['"]\s*$/,"attr-value":{pattern:/.+/i,inside:l.languages.css}},alias:"language-css"}},l.languages.markup.tag)),l.languages.clike={comment:[{pattern:/(^|[^\\])\/\*[\s\S]*?(?:\*\/|$)/,lookbehind:!0},{pattern:/(^|[^\\:])\/\/.*/,lookbehind:!0,greedy:!0}],string:{pattern:/(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,greedy:!0},"class-name":{pattern:/((?:\b(?:class|interface|extends|implements|trait|instanceof|new)\s+)|(?:catch\s+\())[\w.\\]+/i,lookbehind:!0,inside:{punctuation:/[.\\]/}},keyword:/\b(?:if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\b/,boolean:/\b(?:true|false)\b/,function:/[a-z0-9_]+(?=\()/i,number:/\b0x[\da-f]+\b|(?:\b\d+\.?\d*|\B\.\d+)(?:e[+-]?\d+)?/i,operator:/--?|\+\+?|!=?=?|<=?|>=?|==?=?|&&?|\|\|?|\?|\*|\/|~|\^|%/,punctuation:/[{}[\];(),.:]/},l.languages.javascript=l.languages.extend("clike",{keyword:/\b(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|var|void|while|with|yield)\b/,number:/\b(?:0[xX][\dA-Fa-f]+|0[bB][01]+|0[oO][0-7]+|NaN|Infinity)\b|(?:\b\d+\.?\d*|\B\.\d+)(?:[Ee][+-]?\d+)?/,function:/[_$a-z\xA0-\uFFFF][$\w\xA0-\uFFFF]*(?=\s*\()/i,operator:/-[-=]?|\+[+=]?|!=?=?|<<?=?|>>?>?=?|=(?:==?|>)?|&[&=]?|\|[|=]?|\*\*?=?|\/=?|~|\^=?|%=?|\?|\.{3}/}),l.languages.insertBefore("javascript","keyword",{regex:{pattern:/((?:^|[^$\w\xA0-\uFFFF."'\])\s])\s*)\/(\[[^\]\r\n]+]|\\.|[^/\\\[\r\n])+\/[gimyu]{0,5}(?=\s*($|[\r\n,.;})\]]))/,lookbehind:!0,greedy:!0},"function-variable":{pattern:/[_$a-z\xA0-\uFFFF][$\w\xA0-\uFFFF]*(?=\s*=\s*(?:function\b|(?:\([^()]*\)|[_$a-z\xA0-\uFFFF][$\w\xA0-\uFFFF]*)\s*=>))/i,alias:"function"},constant:/\b[A-Z][A-Z\d_]*\b/}),l.languages.insertBefore("javascript","string",{"template-string":{pattern:/`(?:\\[\s\S]|\${[^}]+}|[^\\`])*`/,greedy:!0,inside:{interpolation:{pattern:/\${[^}]+}/,inside:{"interpolation-punctuation":{pattern:/^\${|}$/,alias:"punctuation"},rest:null}},string:/[\s\S]+/}}}),l.languages.javascript["template-string"].inside.interpolation.inside.rest=l.languages.javascript,l.languages.markup&&l.languages.insertBefore("markup","tag",{script:{pattern:/(<script[\s\S]*?>)[\s\S]*?(?=<\/script>)/i,lookbehind:!0,inside:l.languages.javascript,alias:"language-javascript",greedy:!0}}),l.languages.js=l.languages.javascript,function(){if("undefined"!=typeof document){var e=document.head||document.getElementsByTagName("head")[0],t=document.createElement("style");t.type="text/css",t.styleSheet?t.styleSheet.cssText="":t.appendChild(document.createTextNode("")),e.appendChild(t)}}();var c={render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{ref:"codeBlock"},[n("pre",{class:e.languageClass},[n("code",[e._t("default")],2)])])},staticRenderFns:[],name:"code-highlight",props:{language:{type:String,default:"javascript"}},computed:{languageClass:function(){return"language-"+this.language}},mounted:function(){l.highlightAllUnder(this.$refs.codeBlock)},beforeUpdate:function(){if(this.$slots.default[0].text){var e=this.$slots.default[0].text.replace(/^[\r\n\s]*|[\r\n\s]*$/g,"");this.$el.querySelector("code").textContent=e,l.highlightAllUnder(this.$refs.codeBlock)}}};function u(e){l.highlightAllUnder(e)}function d(e){d.installed||(d.installed=!0,e.directive("highlight",u))}var p={install:d},f=null;"undefined"!=typeof window?f=window.Vue:void 0!==n.g&&(f=n.g.Vue),f&&f.use(p),t.default=d},"./App.vue":function(e,t,n){"use strict";n.r(t);var r=n("./App.vue?vue&type=template&id=472cff63&"),o=n("./App.vue?vue&type=script&lang=js&"),a=(0,n("../node_modules/vue-loader/lib/runtime/componentNormalizer.js").default)(o.default,r.render,r.staticRenderFns,!1,null,null,null);a.options.__file="App.vue",t.default=a.exports},"./components/Nav.vue":function(e,t,n){"use strict";n.r(t);var r=n("./components/Nav.vue?vue&type=template&id=738fae98&"),o=n("./components/Nav.vue?vue&type=script&lang=js&"),a=(0,n("../node_modules/vue-loader/lib/runtime/componentNormalizer.js").default)(o.default,r.render,r.staticRenderFns,!1,null,null,null);a.options.__file="components/Nav.vue",t.default=a.exports},"./components/examples/Arrays.vue":function(e,t,n){"use strict";n.r(t);var r=n("./components/examples/Arrays.vue?vue&type=template&id=3807c975&"),o=n("./components/examples/Arrays.vue?vue&type=script&lang=js&"),a=(0,n("../node_modules/vue-loader/lib/runtime/componentNormalizer.js").default)(o.default,r.render,r.staticRenderFns,!1,null,null,null);a.options.__file="components/examples/Arrays.vue",t.default=a.exports},"./components/examples/Disabled.vue":function(e,t,n){"use strict";n.r(t);var r=n("./components/examples/Disabled.vue?vue&type=template&id=8c74c612&"),o=n("./components/examples/Disabled.vue?vue&type=script&lang=js&"),a=(0,n("../node_modules/vue-loader/lib/runtime/componentNormalizer.js").default)(o.default,r.render,r.staticRenderFns,!1,null,null,null);a.options.__file="components/examples/Disabled.vue",t.default=a.exports},"./components/examples/LogPrefix.vue":function(e,t,n){"use strict";n.r(t);var r=n("./components/examples/LogPrefix.vue?vue&type=template&id=c7d315ea&"),o=n("./components/examples/LogPrefix.vue?vue&type=script&lang=js&"),a=(0,n("../node_modules/vue-loader/lib/runtime/componentNormalizer.js").default)(o.default,r.render,r.staticRenderFns,!1,null,null,null);a.options.__file="components/examples/LogPrefix.vue",t.default=a.exports},"./components/examples/Magical.vue":function(e,t,n){"use strict";n.r(t);var r=n("./components/examples/Magical.vue?vue&type=template&id=78aae226&"),o=n("./components/examples/Magical.vue?vue&type=script&lang=js&"),a=(0,n("../node_modules/vue-loader/lib/runtime/componentNormalizer.js").default)(o.default,r.render,r.staticRenderFns,!1,null,null,null);a.options.__file="components/examples/Magical.vue",t.default=a.exports},"./components/examples/Objects.vue":function(e,t,n){"use strict";n.r(t);var r=n("./components/examples/Objects.vue?vue&type=template&id=1fd4b769&"),o=n("./components/examples/Objects.vue?vue&type=script&lang=js&"),a=(0,n("../node_modules/vue-loader/lib/runtime/componentNormalizer.js").default)(o.default,r.render,r.staticRenderFns,!1,null,null,null);a.options.__file="components/examples/Objects.vue",t.default=a.exports},"./components/examples/Simple.vue":function(e,t,n){"use strict";n.r(t);var r=n("./components/examples/Simple.vue?vue&type=template&id=29ed25ed&"),o=n("./components/examples/Simple.vue?vue&type=script&lang=js&"),a=(0,n("../node_modules/vue-loader/lib/runtime/componentNormalizer.js").default)(o.default,r.render,r.staticRenderFns,!1,null,null,null);a.options.__file="components/examples/Simple.vue",t.default=a.exports},"./components/examples/Styles.vue":function(e,t,n){"use strict";n.r(t);var r=n("./components/examples/Styles.vue?vue&type=template&id=eeb315c6&"),o=n("./components/examples/Styles.vue?vue&type=script&lang=js&"),a=(0,n("../node_modules/vue-loader/lib/runtime/componentNormalizer.js").default)(o.default,r.render,r.staticRenderFns,!1,null,null,null);a.options.__file="components/examples/Styles.vue",t.default=a.exports},"./components/examples/Text.vue":function(e,t,n){"use strict";n.r(t);var r=n("./components/examples/Text.vue?vue&type=template&id=013f50a8&"),o=n("./components/examples/Text.vue?vue&type=script&lang=js&"),a=(0,n("../node_modules/vue-loader/lib/runtime/componentNormalizer.js").default)(o.default,r.render,r.staticRenderFns,!1,null,null,null);a.options.__file="components/examples/Text.vue",t.default=a.exports},"./components/examples/Type.vue":function(e,t,n){"use strict";n.r(t);var r=n("./components/examples/Type.vue?vue&type=template&id=14c1cc35&"),o=n("./components/examples/Type.vue?vue&type=script&lang=js&"),a=(0,n("../node_modules/vue-loader/lib/runtime/componentNormalizer.js").default)(o.default,r.render,r.staticRenderFns,!1,null,null,null);a.options.__file="components/examples/Type.vue",t.default=a.exports},"./docs/UnicornLog.vue":function(e,t,n){"use strict";n.r(t);var r=n("./docs/UnicornLog.vue?vue&type=template&id=92ac123c&"),o=n("./docs/UnicornLog.vue?vue&type=script&lang=js&"),a=(n("./docs/UnicornLog.vue?vue&type=style&index=0&lang=scss&"),(0,n("../node_modules/vue-loader/lib/runtime/componentNormalizer.js").default)(o.default,r.render,r.staticRenderFns,!1,null,null,null));a.options.__file="docs/UnicornLog.vue",t.default=a.exports},"./App.vue?vue&type=script&lang=js&":function(e,t,n){"use strict";n.r(t);var r=n("../node_modules/babel-loader/lib/index.js??clonedRuleSet-1[0].rules[0].use!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=script&lang=js&");t.default=r.default},"./components/Nav.vue?vue&type=script&lang=js&":function(e,t,n){"use strict";n.r(t);var r=n("../node_modules/babel-loader/lib/index.js??clonedRuleSet-1[0].rules[0].use!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/Nav.vue?vue&type=script&lang=js&");t.default=r.default},"./components/examples/Arrays.vue?vue&type=script&lang=js&":function(e,t,n){"use strict";n.r(t);var r=n("../node_modules/babel-loader/lib/index.js??clonedRuleSet-1[0].rules[0].use!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/Arrays.vue?vue&type=script&lang=js&");t.default=r.default},"./components/examples/Disabled.vue?vue&type=script&lang=js&":function(e,t,n){"use strict";n.r(t);var r=n("../node_modules/babel-loader/lib/index.js??clonedRuleSet-1[0].rules[0].use!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/Disabled.vue?vue&type=script&lang=js&");t.default=r.default},"./components/examples/LogPrefix.vue?vue&type=script&lang=js&":function(e,t,n){"use strict";n.r(t);var r=n("../node_modules/babel-loader/lib/index.js??clonedRuleSet-1[0].rules[0].use!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/LogPrefix.vue?vue&type=script&lang=js&");t.default=r.default},"./components/examples/Magical.vue?vue&type=script&lang=js&":function(e,t,n){"use strict";n.r(t);var r=n("../node_modules/babel-loader/lib/index.js??clonedRuleSet-1[0].rules[0].use!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/Magical.vue?vue&type=script&lang=js&");t.default=r.default},"./components/examples/Objects.vue?vue&type=script&lang=js&":function(e,t,n){"use strict";n.r(t);var r=n("../node_modules/babel-loader/lib/index.js??clonedRuleSet-1[0].rules[0].use!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/Objects.vue?vue&type=script&lang=js&");t.default=r.default},"./components/examples/Simple.vue?vue&type=script&lang=js&":function(e,t,n){"use strict";n.r(t);var r=n("../node_modules/babel-loader/lib/index.js??clonedRuleSet-1[0].rules[0].use!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/Simple.vue?vue&type=script&lang=js&");t.default=r.default},"./components/examples/Styles.vue?vue&type=script&lang=js&":function(e,t,n){"use strict";n.r(t);var r=n("../node_modules/babel-loader/lib/index.js??clonedRuleSet-1[0].rules[0].use!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/Styles.vue?vue&type=script&lang=js&");t.default=r.default},"./components/examples/Text.vue?vue&type=script&lang=js&":function(e,t,n){"use strict";n.r(t);var r=n("../node_modules/babel-loader/lib/index.js??clonedRuleSet-1[0].rules[0].use!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/Text.vue?vue&type=script&lang=js&");t.default=r.default},"./components/examples/Type.vue?vue&type=script&lang=js&":function(e,t,n){"use strict";n.r(t);var r=n("../node_modules/babel-loader/lib/index.js??clonedRuleSet-1[0].rules[0].use!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/Type.vue?vue&type=script&lang=js&");t.default=r.default},"./docs/UnicornLog.vue?vue&type=script&lang=js&":function(e,t,n){"use strict";n.r(t);var r=n("../node_modules/babel-loader/lib/index.js??clonedRuleSet-1[0].rules[0].use!../node_modules/vue-loader/lib/index.js??vue-loader-options!./docs/UnicornLog.vue?vue&type=script&lang=js&");t.default=r.default},"./App.vue?vue&type=template&id=472cff63&":function(e,t,n){"use strict";n.r(t),n.d(t,{render:function(){return r.render},staticRenderFns:function(){return r.staticRenderFns}});var r=n("../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=template&id=472cff63&")},"./components/Nav.vue?vue&type=template&id=738fae98&":function(e,t,n){"use strict";n.r(t),n.d(t,{render:function(){return r.render},staticRenderFns:function(){return r.staticRenderFns}});var r=n("../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/Nav.vue?vue&type=template&id=738fae98&")},"./components/examples/Arrays.vue?vue&type=template&id=3807c975&":function(e,t,n){"use strict";n.r(t),n.d(t,{render:function(){return r.render},staticRenderFns:function(){return r.staticRenderFns}});var r=n("../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/Arrays.vue?vue&type=template&id=3807c975&")},"./components/examples/Disabled.vue?vue&type=template&id=8c74c612&":function(e,t,n){"use strict";n.r(t),n.d(t,{render:function(){return r.render},staticRenderFns:function(){return r.staticRenderFns}});var r=n("../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/Disabled.vue?vue&type=template&id=8c74c612&")},"./components/examples/LogPrefix.vue?vue&type=template&id=c7d315ea&":function(e,t,n){"use strict";n.r(t),n.d(t,{render:function(){return r.render},staticRenderFns:function(){return r.staticRenderFns}});var r=n("../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/LogPrefix.vue?vue&type=template&id=c7d315ea&")},"./components/examples/Magical.vue?vue&type=template&id=78aae226&":function(e,t,n){"use strict";n.r(t),n.d(t,{render:function(){return r.render},staticRenderFns:function(){return r.staticRenderFns}});var r=n("../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/Magical.vue?vue&type=template&id=78aae226&")},"./components/examples/Objects.vue?vue&type=template&id=1fd4b769&":function(e,t,n){"use strict";n.r(t),n.d(t,{render:function(){return r.render},staticRenderFns:function(){return r.staticRenderFns}});var r=n("../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/Objects.vue?vue&type=template&id=1fd4b769&")},"./components/examples/Simple.vue?vue&type=template&id=29ed25ed&":function(e,t,n){"use strict";n.r(t),n.d(t,{render:function(){return r.render},staticRenderFns:function(){return r.staticRenderFns}});var r=n("../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/Simple.vue?vue&type=template&id=29ed25ed&")},"./components/examples/Styles.vue?vue&type=template&id=eeb315c6&":function(e,t,n){"use strict";n.r(t),n.d(t,{render:function(){return r.render},staticRenderFns:function(){return r.staticRenderFns}});var r=n("../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/Styles.vue?vue&type=template&id=eeb315c6&")},"./components/examples/Text.vue?vue&type=template&id=013f50a8&":function(e,t,n){"use strict";n.r(t),n.d(t,{render:function(){return r.render},staticRenderFns:function(){return r.staticRenderFns}});var r=n("../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/Text.vue?vue&type=template&id=013f50a8&")},"./components/examples/Type.vue?vue&type=template&id=14c1cc35&":function(e,t,n){"use strict";n.r(t),n.d(t,{render:function(){return r.render},staticRenderFns:function(){return r.staticRenderFns}});var r=n("../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/Type.vue?vue&type=template&id=14c1cc35&")},"./docs/UnicornLog.vue?vue&type=template&id=92ac123c&":function(e,t,n){"use strict";n.r(t),n.d(t,{render:function(){return r.render},staticRenderFns:function(){return r.staticRenderFns}});var r=n("../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../node_modules/vue-loader/lib/index.js??vue-loader-options!./docs/UnicornLog.vue?vue&type=template&id=92ac123c&")},"./docs/UnicornLog.vue?vue&type=style&index=0&lang=scss&":function(e,t,n){"use strict";n.r(t);var r=n("../node_modules/vue-style-loader/index.js!../node_modules/css-loader/dist/cjs.js!../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../node_modules/sass-loader/dist/cjs.js??clonedRuleSet-3[0].rules[0].use[2]!../node_modules/vue-loader/lib/index.js??vue-loader-options!./docs/UnicornLog.vue?vue&type=style&index=0&lang=scss&"),o={};for(var a in r)"default"!==a&&(o[a]=function(e){return r[e]}.bind(0,a));n.d(t,o)},"../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=template&id=472cff63&":function(e,t,n){"use strict";n.r(t),n.d(t,{render:function(){return r},staticRenderFns:function(){return o}});var r=function(){var e=this.$createElement,t=this._self._c||e;return t("div",[t("UnicornLog")],1)},o=[];r._withStripped=!0},"../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/Nav.vue?vue&type=template&id=738fae98&":function(e,t,n){"use strict";n.r(t),n.d(t,{render:function(){return r},staticRenderFns:function(){return o}});var r=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("nav",{staticClass:"navbar sticky-top navbar-expand-lg navbar-dark bg-dark mb-5"},[n("div",{staticClass:"container"},[n("a",{staticClass:"navbar-brand",attrs:{href:"/"}},[e._v("🦄 Vue UnicornLog")]),e._v(" "),e._m(0),e._v(" "),n("div",{staticClass:"collapse navbar-collapse",attrs:{id:"navbarSupportedContent"}},[e._m(1),e._v(" "),n("div",{staticClass:"d-flex"},[n("ul",{staticClass:"navbar-nav me-auto mb-2 mb-lg-0"},[n("li",{staticClass:"nav-item"},[n("a",{staticClass:"nav-link",attrs:{href:e.links.github}},[e._v("GitHub")])]),e._v(" "),n("li",{staticClass:"nav-item"},[n("a",{staticClass:"nav-link",attrs:{href:e.links.npm}},[e._v("NPM Package")])])])])])])])},o=[function(){var e=this.$createElement,t=this._self._c||e;return t("button",{staticClass:"navbar-toggler",attrs:{type:"button","data-bs-toggle":"collapse","data-bs-target":"#navbarSupportedContent","aria-controls":"navbarSupportedContent","aria-expanded":"false","aria-label":"Toggle navigation"}},[t("span",{staticClass:"navbar-toggler-icon"})])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ul",{staticClass:"navbar-nav me-auto mb-2 mb-lg-0"},[n("li",{staticClass:"nav-item"},[n("a",{staticClass:"nav-link active",attrs:{"aria-current":"page",href:"/"}},[e._v("Home")])]),e._v(" "),n("li",{staticClass:"nav-item dropdown"},[n("a",{staticClass:"nav-link dropdown-toggle",attrs:{href:"#",id:"docs-dropdown",role:"button","data-bs-toggle":"dropdown","aria-expanded":"false"}},[e._v("\n\t\t\t\t\t\tDocs\n\t\t\t\t\t")]),e._v(" "),n("ul",{staticClass:"dropdown-menu dropdown-menu-dark",attrs:{"aria-labelledby":"docs-dropdown"}},[n("li",[n("a",{staticClass:"dropdown-item",attrs:{href:"#ul-installation"}},[e._v("\n\t\t\t\t\t\t\t\tInstallation\n\t\t\t\t\t\t\t")])]),e._v(" "),n("li",[n("a",{staticClass:"dropdown-item",attrs:{href:"#ul-usage"}},[e._v("Usage")])]),e._v(" "),n("li",[n("hr",{staticClass:"dropdown-divider"})]),e._v(" "),n("li",[n("h6",{staticClass:"dropdown-header"},[e._v("Options")])]),e._v(" "),n("li",[n("a",{staticClass:"dropdown-item",attrs:{href:"#ul-plugin-options"}},[e._v("\n\t\t\t\t\t\t\t\tPlugin Options\n\t\t\t\t\t\t\t")])]),e._v(" "),n("li",[n("a",{staticClass:"dropdown-item",attrs:{href:"#ul-log-options"}},[e._v("Log Options")])]),e._v(" "),n("li",[n("hr",{staticClass:"dropdown-divider"})]),e._v(" "),n("li",[n("h6",{staticClass:"dropdown-header"},[e._v("Methods")])]),e._v(" "),n("li",[n("a",{staticClass:"dropdown-item",attrs:{href:"#ul-instance-methods"}},[e._v("\n\t\t\t\t\t\t\t\tInstance Methods\n\t\t\t\t\t\t\t")])]),e._v(" "),n("li",[n("a",{staticClass:"dropdown-item",attrs:{href:"#ul-console-methods"}},[e._v("\n\t\t\t\t\t\t\t\tConsole Methods\n\t\t\t\t\t\t\t")])]),e._v(" "),n("li",[n("hr",{staticClass:"dropdown-divider"})]),e._v(" "),n("li",[n("a",{staticClass:"dropdown-item",attrs:{href:"#ul-examples"}},[e._v("Examples")])])])]),e._v(" "),n("li",{staticClass:"nav-item dropdown"},[n("a",{staticClass:"nav-link dropdown-toggle",attrs:{href:"#",id:"examples-dropdown",role:"button","data-bs-toggle":"dropdown","aria-expanded":"false"}},[e._v("\n\t\t\t\t\t\tExamples\n\t\t\t\t\t")]),e._v(" "),n("ul",{staticClass:"dropdown-menu dropdown-menu-dark",attrs:{"aria-labelledby":"examples-dropdown"}},[n("li",[n("a",{staticClass:"dropdown-item",attrs:{href:"#simple-examples"}},[e._v("Simple")])]),e._v(" "),n("li",[n("h6",{staticClass:"dropdown-header"},[e._v("Options")])]),e._v(" "),n("li",[n("a",{staticClass:"dropdown-item",attrs:{href:"#text-examples"}},[e._v("text")])]),e._v(" "),n("li",[n("a",{staticClass:"dropdown-item",attrs:{href:"#type-examples"}},[e._v("type")])]),e._v(" "),n("li",[n("a",{staticClass:"dropdown-item",attrs:{href:"#styles-examples"}},[e._v("styles")])]),e._v(" "),n("li",[n("a",{staticClass:"dropdown-item",attrs:{href:"#disabled-examples"}},[e._v("disabled")])]),e._v(" "),n("li",[n("a",{staticClass:"dropdown-item",attrs:{href:"#logPrefix-examples"}},[e._v("\n\t\t\t\t\t\t\t\tlogPrefix\n\t\t\t\t\t\t\t")])]),e._v(" "),n("li",[n("a",{staticClass:"dropdown-item",attrs:{href:"#magical-examples"}},[e._v("magical")])]),e._v(" "),n("li",[n("a",{staticClass:"dropdown-item",attrs:{href:"#name-examples"}},[e._v("name")])]),e._v(" "),n("li",[n("a",{staticClass:"dropdown-item",attrs:{href:"#objects-examples"}},[e._v("objects")])]),e._v(" "),n("li",[n("a",{staticClass:"dropdown-item",attrs:{href:"#array-examples"}},[e._v("array")])])])])])}];r._withStripped=!0},"../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/Arrays.vue?vue&type=template&id=3807c975&":function(e,t,n){"use strict";n.r(t),n.d(t,{render:function(){return r},staticRenderFns:function(){return o}});var r=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",[e._m(0),e._v(" "),n("div",{staticClass:"row mb-4",attrs:{id:"array-simple-example"}},[e._m(1),e._v(" "),n("div",{staticClass:"col-xl-4 col-6 d-flex align-items-center justify-content-end"},[n("button",{staticClass:"btn btn-outline-primary btn-sm",attrs:{type:"button"},on:{click:e.simpleExample}},[e._v("\n\t\t\t\t\tRun\n\t\t\t\t")])]),e._v(" "),n("div",{staticClass:"col-xl-8 col-lg-12"},[n("vue-code-highlight",{attrs:{language:"js"}},[n("pre",[e._v("this.$unicornLog({\n\ttext: 'Hello World',\n\tarray: ['foo', 'bar'],\n});\n\t\t\t\t\t\t")])])],1)]),e._v(" "),n("div",{staticClass:"row mb-4",attrs:{id:"array-objects-example"}},[e._m(2),e._v(" "),n("div",{staticClass:"col-xl-4 col-6 d-flex align-items-center justify-content-end"},[n("button",{staticClass:"btn btn-outline-primary btn-sm",attrs:{type:"button"},on:{click:e.objectArray}},[e._v("\n\t\t\t\t\tRun\n\t\t\t\t")])]),e._v(" "),n("div",{staticClass:"col-xl-8 col-lg-12"},[n("vue-code-highlight",{attrs:{language:"js"}},[n("pre",[e._v("const foo = { foo: 'foo ' };\nconst bar = { bar: 'bar ' };\n\nthis.$unicornLog({\n\ttext: 'Hello World',\n\tarray: [foo, bar],\n});\n\t\t\t\t\t\t")])])],1)]),e._v(" "),n("div",{staticClass:"row mb-4",attrs:{id:"array-spread-example"}},[e._m(3),e._v(" "),n("div",{staticClass:"col-xl-4 col-6 d-flex align-items-center justify-content-end"},[n("button",{staticClass:"btn btn-outline-primary btn-sm",attrs:{type:"button"},on:{click:e.arraySpreadOperator}},[e._v("\n\t\t\t\t\tRun\n\t\t\t\t")])]),e._v(" "),n("div",{staticClass:"col-xl-8 col-lg-12"},[n("vue-code-highlight",{attrs:{language:"js"}},[n("pre",[e._v("const foo = ['foo'];\nconst bar = ['bar'];\n\nthis.$unicornLog({\n\ttext: 'Hello World',\n\tarray: [...foo, ...bar],\n});\n\t\t\t\t\t\t")])])],1)])])},o=[function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"row mb-2"},[n("div",{staticClass:"col-12"},[n("h5",{staticClass:"my-0"},[n("code",[e._v("array")])])])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"col-xl-4 col-6 d-flex align-items-center"},[n("h6",{staticClass:"my-0"},[e._v("Single array")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"col-xl-4 col-6 d-flex align-items-center"},[n("h6",{staticClass:"my-0"},[e._v("Using an array of objects")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"col-xl-4 col-6 d-flex align-items-center"},[n("h6",{staticClass:"my-0"},[e._v("Using array spread Operator")])])}];r._withStripped=!0},"../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/Disabled.vue?vue&type=template&id=8c74c612&":function(e,t,n){"use strict";n.r(t),n.d(t,{render:function(){return r},staticRenderFns:function(){return o}});var r=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",[e._m(0),e._v(" "),n("div",{staticClass:"row mb-4",attrs:{id:"disabled-simple-example"}},[n("div",{staticClass:"col-xl-4 col-6 d-flex align-items-center"},[n("div",{staticClass:"form-check form-switch"},[n("input",{directives:[{name:"model",rawName:"v-model",value:e.isDisabled,expression:"isDisabled"}],staticClass:"form-check-input",attrs:{type:"checkbox",role:"switch",checked:""},domProps:{checked:Array.isArray(e.isDisabled)?e._i(e.isDisabled,null)>-1:e.isDisabled},on:{change:function(t){var n=e.isDisabled,r=t.target,o=!!r.checked;if(Array.isArray(n)){var a=e._i(n,null);r.checked?a<0&&(e.isDisabled=n.concat([null])):a>-1&&(e.isDisabled=n.slice(0,a).concat(n.slice(a+1)))}else e.isDisabled=o}}}),e._v(" "),n("label",{staticClass:"form-check-label"},[e._v("disabled =\n\t\t\t\t\t\t"),n("span",{staticClass:"boolean-style"},[e._v(e._s(e.isDisabled))])])])]),e._v(" "),n("div",{staticClass:"col-xl-4 col-6 d-flex align-items-center justify-content-end"},[n("button",{staticClass:"btn btn-outline-primary btn-sm",attrs:{type:"button"},on:{click:e.simpleExample}},[e._v("\n\t\t\t\t\tRun\n\t\t\t\t")])]),e._v(" "),n("div",{staticClass:"col-xl-8 col-lg-12"},[n("vue-code-highlight",{attrs:{language:"js"}},[n("pre",[e._v("this.$unicornLog({\n\ttext: 'Hello World',\n\tdisabled: true,\n});\n\t\t\t\t\t\t")])])],1)]),e._v(" "),n("div",{staticClass:"row mb-4",attrs:{id:"disabled-conditional-example"}},[e._m(1),e._v(" "),n("div",{staticClass:"col-xl-8 col-lg-12"},[n("vue-code-highlight",{attrs:{language:"js"}},[n("pre",[e._v("this.$unicornLog({\n\ttext: 'Hello World',\n\tdisabled: process.env.UNICORN_LOG !== 'true',\n});\n\t\t\t\t\t\t")])])],1)])])},o=[function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"row mb-2"},[n("div",{staticClass:"col-12"},[n("h5",{staticClass:"my-0"},[n("code",[e._v("disabled")])])])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"col-12"},[n("h6",{staticClass:"my-0"},[e._v("Using an .env variable")]),e._v(" "),n("div",{staticClass:"fst-italic"},[e._v("\n\t\t\t\t\tConditionally set so it will log in development, but not on the\n\t\t\t\t\tproduction site.\n\t\t\t\t")])])}];r._withStripped=!0},"../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/LogPrefix.vue?vue&type=template&id=c7d315ea&":function(e,t,n){"use strict";n.r(t),n.d(t,{render:function(){return r},staticRenderFns:function(){return o}});var r=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",[n("div",{staticClass:"row mb-2"},[n("div",{staticClass:"col-12"},[n("h5",{staticClass:"my-0"},[n("code",[e._v(e._s(e.isNameOption?"name":"logPrefix"))])])])]),e._v(" "),e.isNameOption?e._e():n("div",{staticClass:"row mb-4",attrs:{id:"logPrefix-simple-example"}},[n("div",{staticClass:"col-xl-4 col-6 d-flex align-items-center"},[n("input",{directives:[{name:"model",rawName:"v-model",value:e.logPrefix,expression:"logPrefix"}],staticClass:"form-control",attrs:{type:"text",value:"[Bunnies]:",placeholder:"[Bunnies]:"},domProps:{value:e.logPrefix},on:{input:function(t){t.target.composing||(e.logPrefix=t.target.value)}}})]),e._v(" "),n("div",{staticClass:"col-xl-4 col-6 d-flex align-items-center justify-content-end"},[n("button",{staticClass:"btn btn-outline-primary btn-sm",attrs:{type:"button"},on:{click:e.simpleExample}},[e._v("\n\t\t\t\t\tRun\n\t\t\t\t")])]),e._v(" "),n("div",{staticClass:"col-xl-8 col-lg-12"},[n("vue-code-highlight",{attrs:{language:"js"}},[n("pre",[e._v("this.$unicornLog({\n\ttext: 'Hello World',\n\tlogPrefix: '[Bunnies]:',\n});\n\t\t\t\t\t\t")])])],1)]),e._v(" "),e.isNameOption?e._e():n("div",{staticClass:"row mb-4",attrs:{id:"name-default-example"}},[e._m(0),e._v(" "),n("div",{staticClass:"col-xl-4 col-6 d-flex align-items-center"},[n("div",{staticClass:"form-check form-switch"},[n("input",{directives:[{name:"model",rawName:"v-model",value:e.withName,expression:"withName"}],staticClass:"form-check-input",attrs:{type:"checkbox",role:"switch",checked:""},domProps:{checked:Array.isArray(e.withName)?e._i(e.withName,null)>-1:e.withName},on:{change:function(t){var n=e.withName,r=t.target,o=!!r.checked;if(Array.isArray(n)){var a=e._i(n,null);r.checked?a<0&&(e.withName=n.concat([null])):a>-1&&(e.withName=n.slice(0,a).concat(n.slice(a+1)))}else e.withName=o}}}),e._v(" "),n("label",{staticClass:"form-check-label"},[e._v("logPrefix option =\n\t\t\t\t\t\t"),n("span",{staticClass:"boolean-style"},[e._v(e._s(e.withName))]),e._v(" with default\n\t\t\t\t\t\t"),n("code",[e._v("name")]),e._v(" option\n\t\t\t\t\t")])])]),e._v(" "),n("div",{staticClass:"col-xl-4 col-6 d-flex align-items-center justify-content-end"},[n("button",{staticClass:"btn btn-outline-primary btn-sm",attrs:{type:"button"},on:{click:e.exampleNameDefault}},[e._v("\n\t\t\t\t\tRun\n\t\t\t\t")])]),e._v(" "),n("div",{staticClass:"col-xl-8 col-lg-12"},[n("vue-code-highlight",{attrs:{language:"js"}},[n("pre",[e._v("this.$unicornLog({\n\ttext: 'Hello World',\n\tlogPrefix: true,\n});\n\t\t\t\t\t\t")])])],1)]),e._v(" "),n("div",{staticClass:"row mb-4",attrs:{id:"name-example"}},[n("div",{staticClass:"col-xl-4 col-6 d-flex align-items-center"},[n("div",{staticClass:"form-check form-switch"},[n("input",{directives:[{name:"model",rawName:"v-model",value:e.withName,expression:"withName"}],staticClass:"form-check-input",attrs:{type:"checkbox",role:"switch",checked:""},domProps:{checked:Array.isArray(e.withName)?e._i(e.withName,null)>-1:e.withName},on:{change:function(t){var n=e.withName,r=t.target,o=!!r.checked;if(Array.isArray(n)){var a=e._i(n,null);r.checked?a<0&&(e.withName=n.concat([null])):a>-1&&(e.withName=n.slice(0,a).concat(n.slice(a+1)))}else e.withName=o}}}),e._v(" "),n("label",{staticClass:"form-check-label"},[e._v("logPrefix = "),n("span",{staticClass:"boolean-style"},[e._v(e._s(e.withName))]),e._v(" with\n\t\t\t\t\t\t"),n("code",[e._v("name")]),e._v(" option set\n\t\t\t\t\t")])])]),e._v(" "),n("div",{staticClass:"col-xl-4 col-6 d-flex align-items-center justify-content-end"},[n("button",{staticClass:"btn btn-outline-primary btn-sm",attrs:{type:"button"},on:{click:e.exampleName}},[e._v("\n\t\t\t\t\tRun\n\t\t\t\t")])]),e._v(" "),n("div",{staticClass:"col-xl-8 col-lg-12"},[n("vue-code-highlight",{attrs:{language:"js"}},[n("pre",[e._v("this.$unicornLog({\n\ttext: 'Hello World',\n\tlogPrefix: true,\n\tname: '"+e._s(e.isNameOption?"Susan":"Bob")+"',\n});\n\t\t\t\t\t\t")])])],1)])])},o=[function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"col-12 mb-2"},[e._v("\n\t\t\t\tIf "),n("code",[e._v("logPrefix")]),e._v(" option is set as a\n\t\t\t\t"),n("span",{staticClass:"option-type"},[e._v("Boolean")]),e._v(" of\n\t\t\t\t"),n("span",{staticClass:"boolean-style"},[e._v("true")]),e._v(", it will use the\n\t\t\t\t"),n("code",[e._v("name")]),e._v(" option for the prefix.\n\t\t\t")])}];r._withStripped=!0},"../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/Magical.vue?vue&type=template&id=78aae226&":function(e,t,n){"use strict";n.r(t),n.d(t,{render:function(){return r},staticRenderFns:function(){return o}});var r=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",[e._m(0),e._v(" "),n("div",{staticClass:"row mb-4",attrs:{id:"magical-simple-example"}},[n("div",{staticClass:"col-xl-4 col-6 d-flex align-items-center"},[n("div",{staticClass:"form-check form-switch"},[n("input",{directives:[{name:"model",rawName:"v-model",value:e.magical,expression:"magical"}],staticClass:"form-check-input",attrs:{type:"checkbox",role:"switch",checked:""},domProps:{checked:Array.isArray(e.magical)?e._i(e.magical,null)>-1:e.magical},on:{change:function(t){var n=e.magical,r=t.target,o=!!r.checked;if(Array.isArray(n)){var a=e._i(n,null);r.checked?a<0&&(e.magical=n.concat([null])):a>-1&&(e.magical=n.slice(0,a).concat(n.slice(a+1)))}else e.magical=o}}}),e._v(" "),n("label",{staticClass:"form-check-label"},[e._v("magical =\n\t\t\t\t\t\t"),n("span",{staticClass:"boolean-style"},[e._v(e._s(e.magical))])])])]),e._v(" "),n("div",{staticClass:"col-xl-4 col-6 d-flex align-items-center justify-content-end"},[n("button",{staticClass:"btn btn-outline-primary btn-sm",attrs:{type:"button"},on:{click:e.simpleExample}},[e._v("\n\t\t\t\t\tRun\n\t\t\t\t")])]),e._v(" "),n("div",{staticClass:"col-xl-8 col-lg-12"},[n("vue-code-highlight",{attrs:{language:"js"}},[n("pre",[e._v("this.$unicornLog({\n\ttext: 'Hello World',\n\tmagical: true,\n});\n\t\t\t\t\t\t")])])],1)])])},o=[function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"row mb-2"},[n("div",{staticClass:"col-12"},[n("h5",{staticClass:"my-0"},[n("code",[e._v("magical")])])])])}];r._withStripped=!0},"../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/Objects.vue?vue&type=template&id=1fd4b769&":function(e,t,n){"use strict";n.r(t),n.d(t,{render:function(){return r},staticRenderFns:function(){return o}});var r=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",[e._m(0),e._v(" "),n("div",{staticClass:"row mb-4",attrs:{id:"objects-simple-example"}},[e._m(1),e._v(" "),n("div",{staticClass:"col-xl-4 col-6 d-flex align-items-center justify-content-end"},[n("button",{staticClass:"btn btn-outline-primary btn-sm",attrs:{type:"button"},on:{click:e.simpleExample}},[e._v("\n\t\t\t\t\tRun\n\t\t\t\t")])]),e._v(" "),n("div",{staticClass:"col-xl-8 col-lg-12"},[n("vue-code-highlight",{attrs:{language:"js"}},[n("pre",[e._v("this.$unicornLog({\n\ttext: 'Hello World',\n\tobjects: { foo: 'bar' },\n});\n\t\t\t\t\t\t")])])],1)]),e._v(" "),n("div",{staticClass:"row mb-4",attrs:{id:"objects-multiple-example"}},[e._m(2),e._v(" "),n("div",{staticClass:"col-xl-4 col-6 d-flex align-items-center justify-content-end"},[n("button",{staticClass:"btn btn-outline-primary btn-sm",attrs:{type:"button"},on:{click:e.multipleObjects}},[e._v("\n\t\t\t\t\tRun\n\t\t\t\t")])]),e._v(" "),n("div",{staticClass:"col-xl-8 col-lg-12"},[n("vue-code-highlight",{attrs:{language:"js"}},[n("pre",[e._v("const foo = { foo: 'foo ' };\nconst bar = { bar: 'bar ' };\n\nthis.$unicornLog({\n\ttext: 'Hello World',\n\tobjects: { foo, bar },\n});\n\t\t\t\t\t\t")])])],1)]),e._v(" "),n("div",{staticClass:"row mb-4",attrs:{id:"objects-spread-example"}},[e._m(3),e._v(" "),n("div",{staticClass:"col-xl-4 col-6 d-flex align-items-center justify-content-end"},[n("button",{staticClass:"btn btn-outline-primary btn-sm",attrs:{type:"button"},on:{click:e.objectSpreadOperator}},[e._v("\n\t\t\t\t\tRun\n\t\t\t\t")])]),e._v(" "),n("div",{staticClass:"col-xl-8 col-lg-12"},[n("vue-code-highlight",{attrs:{language:"js"}},[n("pre",[e._v("const foo = { foo: 'foo ' };\nconst bar = { bar: 'bar ' };\n\nthis.$unicornLog({\n\ttext: 'Hello World',\n\tobjects: { ...foo, ...bar },\n});\n\t\t\t\t\t\t")])])],1)])])},o=[function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"row mb-2"},[n("div",{staticClass:"col-12"},[n("h5",{staticClass:"my-0"},[n("code",[e._v("objects")])])])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"col-xl-4 col-6 d-flex align-items-center"},[n("h6",{staticClass:"my-0"},[e._v("Single object")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"col-xl-4 col-6 d-flex align-items-center"},[n("h6",{staticClass:"my-0"},[e._v("Multiple objects")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"col-xl-4 col-6 d-flex align-items-center"},[n("h6",{staticClass:"my-0"},[e._v("Using object spread Operator")])])}];r._withStripped=!0},"../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/Simple.vue?vue&type=template&id=29ed25ed&":function(e,t,n){"use strict";n.r(t),n.d(t,{render:function(){return r},staticRenderFns:function(){return o}});var r=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",[n("div",{staticClass:"row mb-4"},[e._m(0),e._v(" "),n("div",{staticClass:"col-xl-4 col-6 d-flex justify-content-end"},[n("button",{staticClass:"btn btn-outline-primary btn-sm",attrs:{type:"button"},on:{click:e.simpleExample}},[e._v("\n\t\t\t\t\tRun\n\t\t\t\t")])]),e._v(" "),n("div",{staticClass:"col-xl-8 col-lg-12"},[n("vue-code-highlight",{attrs:{language:"js"}},[n("pre",[e._v("this.$unicornLog();\n\t\t\t\t\t\t")])])],1)])])},o=[function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"col-xl-4 col-6 d-flex align-items-center"},[n("h5",{staticClass:"my-0"},[e._v("Simple Example")])])}];r._withStripped=!0},"../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/Styles.vue?vue&type=template&id=eeb315c6&":function(e,t,n){"use strict";n.r(t),n.d(t,{render:function(){return r},staticRenderFns:function(){return o}});var r=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",[e._m(0),e._v(" "),n("div",{staticClass:"row mb-4",attrs:{id:"defaultStyles-simple-example"}},[n("div",{staticClass:"col-xl-4 col-6 d-flex align-items-center"},[n("div",{staticClass:"col-xl-8 col-lg-12 mt-2"},[n("input",{directives:[{name:"model",rawName:"v-model",value:e.defaultStyles,expression:"defaultStyles"}],staticClass:"form-control",attrs:{type:"text",value:"[Bunnies]:",placeholder:"[Bunnies]:"},domProps:{value:e.defaultStyles},on:{input:function(t){t.target.composing||(e.defaultStyles=t.target.value)}}})])]),e._v(" "),n("div",{staticClass:"col-xl-4 col-6 d-flex align-items-center justify-content-end"},[n("button",{staticClass:"btn btn-outline-primary btn-sm",attrs:{type:"button"},on:{click:e.simpleExample}},[e._v("\n\t\t\t\t\tRun\n\t\t\t\t")])]),e._v(" "),n("div",{staticClass:"col-xl-8 col-lg-12"},[n("vue-code-highlight",{attrs:{language:"js"}},[n("pre",[e._v("this.$unicornLog({\n\ttext: 'Hello World',\n\tstyles: '"+e._s(this.defaultStyles)+"',\n});\n\t\t\t\t\t\t")])])],1)]),e._v(" "),n("div",{staticClass:"row mb-4",attrs:{id:"defaultStyles-simple-example"}},[e._m(1),e._v(" "),n("div",{staticClass:"col-xl-4 col-6 d-flex align-items-center justify-content-end"},[n("button",{staticClass:"btn btn-outline-primary btn-sm",attrs:{type:"button"},on:{click:e.arrayExample}},[e._v("\n\t\t\t\t\tRun\n\t\t\t\t")])]),e._v(" "),n("div",{staticClass:"col-xl-8 col-lg-12"},[n("vue-code-highlight",{attrs:{language:"js"}},[n("pre",[e._v("this.$unicornLog({\n\ttext: 'Hello World',\n\tstyles: [\n\t\t'background: black',\n\t\t'border: 1px dashed magenta',\n\t\t'color: magenta',\n\t\t'font-family: monospace',\n\t\t'font-size: 2em',\n\t\t'padding: 10px',\n\t],\n});\n\t\t\t\t\t\t")])])],1)]),e._v(" "),e._m(2),e._v(" "),n("div",{staticClass:"row mb-4",attrs:{id:"defaultStyles-word-example"}},[n("div",{staticClass:"col-xl-4 col-6 d-flex align-items-center"},[n("div",{staticClass:"col-xl-8 col-lg-12 mt-2"},[n("select",{directives:[{name:"model",rawName:"v-model",value:e.magicalWord,expression:"magicalWord"}],staticClass:"form-select",on:{change:function(t){var n=Array.prototype.filter.call(t.target.options,(function(e){return e.selected})).map((function(e){return"_value"in e?e._value:e.value}));e.magicalWord=t.target.multiple?n:n[0]}}},e._l(e.magicalWords,(function(t){return n("option",{key:t},[e._v(e._s(t))])})),0)])]),e._v(" "),n("div",{staticClass:"col-xl-4 col-6 d-flex align-items-center justify-content-end"},[n("button",{staticClass:"btn btn-outline-primary btn-sm",attrs:{type:"button"},on:{click:e.wordExample}},[e._v("\n\t\t\t\t\tRun\n\t\t\t\t")])]),e._v(" "),n("div",{staticClass:"col-xl-8 col-lg-12"},[n("vue-code-highlight",{attrs:{language:"js"}},[n("pre",[e._v("this.$unicornLog({\n\ttext: 'Hello World',\n\tstyles: '"+e._s(this.magicalWord)+"',\n});\n\t\t\t\t\t\t")])])],1)])])},o=[function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"row mb-2"},[n("div",{staticClass:"col-12"},[n("h5",{staticClass:"my-0"},[n("code",[e._v("styles")])])]),e._v(" "),n("div",{staticClass:"col-xl-8 col-lg-12"},[e._v("\n\t\t\t\tFor a list of the different available styles, refer to the\n\t\t\t\t"),n("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/API/console#styling_console_output",target:"_blank"}},[e._v("Web APIs MDN Styling Console Output\n\t\t\t\t")]),e._v("\n\t\t\t\tdeveloper documentation. Depending on the browser, some styles may not\n\t\t\t\twork.\n\t\t\t")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"col-xl-4 col-6 d-flex align-items-center"},[n("div",{staticClass:"col-xl-8 col-lg-12"},[n("h6",{staticClass:"my-0"},[e._v("Using an Array.")])])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"row mb-2",attrs:{id:"defaultStyles-word-example"}},[n("div",{staticClass:"col-xl-8 col-lg-12"},[e._v("\n\t\t\t\tYou can also set the "),n("code",[e._v("style")]),e._v(" option to a magical word to make\n\t\t\t\tthe magic happen. This can also be set with the\n\t\t\t\t"),n("code",[e._v("magical")]),e._v(" option to "),n("span",{staticClass:"boolean-style"},[e._v("true")]),e._v(".\n\t\t\t")])])}];r._withStripped=!0},"../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/Text.vue?vue&type=template&id=013f50a8&":function(e,t,n){"use strict";n.r(t),n.d(t,{render:function(){return r},staticRenderFns:function(){return o}});var r=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",[e._m(0),e._v(" "),n("div",{staticClass:"row mb-4",attrs:{id:"text-simple-example"}},[n("div",{staticClass:"col-xl-4 col-6 d-flex align-items-center"},[n("div",{staticClass:"col-xl-8 col-lg-12 mt-2"},[n("input",{directives:[{name:"model",rawName:"v-model",value:e.text,expression:"text"}],staticClass:"form-control",attrs:{type:"text",value:"[Bunnies]:",placeholder:"[Bunnies]:"},domProps:{value:e.text},on:{input:function(t){t.target.composing||(e.text=t.target.value)}}})])]),e._v(" "),n("div",{staticClass:"col-xl-4 col-6 d-flex align-items-center justify-content-end"},[n("button",{staticClass:"btn btn-outline-primary btn-sm",attrs:{type:"button"},on:{click:e.simpleExample}},[e._v("\n\t\t\t\t\tRun\n\t\t\t\t")])]),e._v(" "),n("div",{staticClass:"col-xl-8 col-lg-12"},[n("vue-code-highlight",{attrs:{language:"js"}},[n("pre",[e._v("this.$unicornLog({\n\ttext: 'Hello World',\n});\n\t\t\t\t\t\t")])])],1)])])},o=[function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"row mb-2"},[n("div",{staticClass:"col-12"},[n("h5",{staticClass:"my-0"},[n("code",[e._v("text")])])])])}];r._withStripped=!0},"../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/Type.vue?vue&type=template&id=14c1cc35&":function(e,t,n){"use strict";n.r(t),n.d(t,{render:function(){return r},staticRenderFns:function(){return o}});var r=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",[e._m(0),e._v(" "),n("div",{staticClass:"row mb-4",attrs:{id:"defaultStyles-simple-example"}},[n("div",{staticClass:"col-xl-4 col-6 d-flex align-items-center"},[n("div",{staticClass:"col-xl-8 col-lg-12 mt-2"},[n("select",{directives:[{name:"model",rawName:"v-model",value:e.logType,expression:"logType"}],staticClass:"form-select",on:{change:[function(t){var n=Array.prototype.filter.call(t.target.options,(function(e){return e.selected})).map((function(e){return"_value"in e?e._value:e.value}));e.logType=t.target.multiple?n:n[0]},e.checkType]}},e._l(e.types,(function(t){return n("option",{key:t},[e._v(e._s(t))])})),0)])]),e._v(" "),n("div",{staticClass:"col-xl-4 col-6 d-flex align-items-center justify-content-end"},[n("button",{staticClass:"btn btn-outline-primary btn-sm",attrs:{type:"button",disabled:"groupEnd"===this.logType},on:{click:e.simpleExample}},[e._v("\n\t\t\t\t\tRun\n\t\t\t\t")])]),e._v(" "),e.logNote?n("div",{staticClass:"col-xl-8 col-lg-12 my-2"},[n("div",{staticClass:"alert alert-primary d-flex align-items-center mb-0",attrs:{role:"alert"},domProps:{innerHTML:e._s(e.logNote)}})]):e._e(),e._v(" "),n("div",{staticClass:"col-xl-8 col-lg-12"},[n("vue-code-highlight",{attrs:{language:"js"}},[n("pre",[e._v("this.$unicornLog({\n\ttext: 'Hello World',\n\ttype: 'log',\n});\n\t\t\t\t\t\t")])])],1)])])},o=[function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"row mb-2"},[n("div",{staticClass:"col-12"},[n("h5",{staticClass:"my-0"},[n("code",[e._v("type")])])])])}];r._withStripped=!0},"../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../node_modules/vue-loader/lib/index.js??vue-loader-options!./docs/UnicornLog.vue?vue&type=template&id=92ac123c&":function(e,t,n){"use strict";n.r(t),n.d(t,{render:function(){return r},staticRenderFns:function(){return o}});var r=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",[n("Nav"),e._v(" "),e._m(0),e._v(" "),n("div",{staticClass:"container"},[n("div",{staticClass:"row mb-5",attrs:{id:"ul-installation"}},[e._m(1),e._v(" "),n("div",{staticClass:"col-xl-8 col-lg-12"},[n("vue-code-highlight",{attrs:{language:"shell"}},[n("pre",[e._v("npm i -D vue-unicorn-log\n\t\t\t\t\t\t")])])],1)]),e._v(" "),n("div",{staticClass:"row mb-5",attrs:{id:"ul-usage"}},[e._m(2),e._v(" "),n("div",{staticClass:"col-xl-8 col-lg-12"},[n("vue-code-highlight",{attrs:{language:"js"}},[n("pre",[e._v("import Vue from 'vue';\nimport UnicornLog from 'vue-unicorn-log';\n\nVue.use(UnicornLog);\n\t\t\t\t\t\t\t\t")])])],1)]),e._v(" "),n("div",{staticClass:"row mb-5",attrs:{id:"ul-plugin-options"}},[e._m(3),e._v(" "),n("div",{staticClass:"col-12 mb-3"},[n("div",{staticClass:"table-responsive"},[n("table",{staticClass:"table table-striped table-bordered"},[e._m(4),e._v(" "),n("tbody",[n("tr",[n("td",{attrs:{valign:"top"}},[e._v("defaultStyles")]),e._v(" "),n("td",{staticClass:"option-type",attrs:{valign:"top"}},[e._v("Object")]),e._v(" "),e._m(5),e._v(" "),e._m(6),e._v(" "),n("td",{attrs:{valign:"top"}},[e._v(e._s(e.copy.defaultStyles))])]),e._v(" "),n("tr",[n("td",{attrs:{valign:"top"}},[e._v("disabled")]),e._v(" "),n("td",{staticClass:"option-type",attrs:{valign:"top"}},[e._v("Boolean")]),e._v(" "),n("td",{staticClass:"boolean-style",attrs:{valign:"top"}},[e._v("false")]),e._v(" "),n("td",{attrs:{valign:"top"},domProps:{innerHTML:e._s(e.options.boolean)}}),e._v(" "),n("td",{attrs:{valign:"top"}},[e._v(e._s(e.copy.disabled))])]),e._v(" "),n("tr",[n("td",{attrs:{valign:"top"}},[e._v("logPrefix")]),e._v(" "),n("td",{staticClass:"option-type",attrs:{valign:"top"}},[e._v("Boolean | String")]),e._v(" "),n("td",{staticClass:"boolean-style",attrs:{valign:"top"}},[e._v("false")]),e._v(" "),n("td",{attrs:{valign:"top"}},[e._v("-")]),e._v(" "),n("td",{attrs:{valign:"top"}},[e._v(e._s(e.copy.logPrefix))])]),e._v(" "),n("tr",[n("td",{attrs:{valign:"top"}},[e._v("styles")]),e._v(" "),n("td",{staticClass:"option-type",attrs:{valign:"top"}},[e._v("String | Array")]),e._v(" "),n("td",{attrs:{valign:"top"}},[e._v("-")]),e._v(" "),n("td",{attrs:{valign:"top"},domProps:{innerHTML:e._s(e.options.styles)}}),e._v(" "),n("td",{attrs:{valign:"top"}},[e._v(e._s(e.copy.styles))])]),e._v(" "),n("tr",[n("td",{attrs:{valign:"top"}},[e._v("type")]),e._v(" "),n("td",{staticClass:"option-type",attrs:{valign:"top"}},[e._v("String")]),e._v(" "),n("td",{attrs:{valign:"top"}},[e._v("log")]),e._v(" "),n("td",{attrs:{valign:"top"},domProps:{innerHTML:e._s(e.options.type)}}),e._v(" "),n("td",{attrs:{valign:"top"}},[e._v(e._s(e.copy.type))])])])])])]),e._v(" "),e._m(7),e._v(" "),n("div",{staticClass:"col-xl-8 col-lg-12"},[n("vue-code-highlight",{attrs:{language:"js"}},[n("pre",[e._v("import Vue from 'vue';\nimport UnicornLog from 'vue-unicorn-log';\n\nVue.use(UnicornLog, {\n  defaultStyles: {},\n  disabled: process.env.UNICORN_LOG !== 'true',\n  logPrefix: '[OMG LOOK HERE!]',\n  styles: 'font-weight: bold;',\n  type: 'info'\n});\n\t\t\t\t\t\t\t\t")])])],1),e._v(" "),n("div",{staticClass:"col-12"},[n("svg",{staticStyle:{display:"none"},attrs:{xmlns:"http://www.w3.org/2000/svg"}},[n("symbol",{attrs:{id:"exclamation-triangle-fill",fill:"currentColor",viewBox:"0 0 16 16"}},[n("path",{attrs:{d:"M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"}})])]),e._v(" "),n("div",{staticClass:"alert alert-primary d-flex align-items-center my-2",attrs:{role:"alert"}},[n("svg",{staticClass:"bi flex-shrink-0 me-2",attrs:{width:"24",height:"24",role:"img","aria-label":"Info:"}},[n("use",{attrs:{"xlink:href":"#exclamation-triangle-fill"}})]),e._v(" "),e._m(8)])])]),e._v(" "),n("div",{staticClass:"row mb-5",attrs:{id:"ul-log-options"}},[e._m(9),e._v(" "),n("div",{staticClass:"col-lg-12"},[n("div",{staticClass:"table-responsive"},[n("table",{staticClass:"table table-striped table-bordered"},[e._m(10),e._v(" "),n("tbody",[n("tr",[n("td",{attrs:{valign:"top"}},[e._v("array")]),e._v(" "),n("td",{staticClass:"option-type",attrs:{valign:"top"}},[e._v("Array")]),e._v(" "),e._m(11),e._v(" "),n("td",{attrs:{valign:"top"}},[e._v("-")]),e._v(" "),n("td",{attrs:{valign:"top"}},[e._v(e._s(e.copy.array))])]),e._v(" "),n("tr",[n("td",{attrs:{valign:"top"}},[e._v("disabled")]),e._v(" "),n("td",{staticClass:"option-type",attrs:{valign:"top"}},[e._v("Boolean")]),e._v(" "),n("td",{staticClass:"boolean-style",attrs:{valign:"top"}},[e._v("false")]),e._v(" "),n("td",{attrs:{valign:"top"},domProps:{innerHTML:e._s(e.options.boolean)}}),e._v(" "),n("td",{attrs:{valign:"top"}},[e._v(e._s(e.copy.disabled))])]),e._v(" "),n("tr",[n("td",{attrs:{valign:"top"}},[e._v("logPrefix")]),e._v(" "),n("td",{staticClass:"option-type",attrs:{valign:"top"}},[e._v("Boolean | String")]),e._v(" "),n("td",{staticClass:"boolean-style",attrs:{valign:"top"}},[e._v("false")]),e._v(" "),n("td",{attrs:{valign:"top"}},[e._v("-")]),e._v(" "),n("td",{attrs:{valign:"top"}},[e._v(e._s(e.copy.logPrefix))])]),e._v(" "),n("tr",[n("td",{attrs:{valign:"top"}},[e._v("magical")]),e._v(" "),n("td",{staticClass:"option-type",attrs:{valign:"top"}},[e._v("Boolean")]),e._v(" "),n("td",{staticClass:"boolean-style",attrs:{valign:"top"}},[e._v("false")]),e._v(" "),n("td",{attrs:{valign:"top"},domProps:{innerHTML:e._s(e.options.boolean)}}),e._v(" "),n("td",{attrs:{valign:"top"}},[e._v(e._s(e.copy.magical))])]),e._v(" "),e._m(12),e._v(" "),n("tr",[n("td",{attrs:{valign:"top"}},[e._v("objects")]),e._v(" "),n("td",{staticClass:"option-type",attrs:{valign:"top"}},[e._v("Object")]),e._v(" "),e._m(13),e._v(" "),n("td",{attrs:{valign:"top"}},[e._v("-")]),e._v(" "),n("td",{attrs:{valign:"top"}},[e._v(e._s(e.copy.object))])]),e._v(" "),n("tr",[n("td",{attrs:{valign:"top"}},[e._v("styles")]),e._v(" "),n("td",{staticClass:"option-type",attrs:{valign:"top"}},[e._v("String | Array")]),e._v(" "),n("td",{attrs:{valign:"top"}},[e._v("-")]),e._v(" "),n("td",{attrs:{valign:"top"},domProps:{innerHTML:e._s(e.options.styles)}}),e._v(" "),n("td",{attrs:{valign:"top"}},[e._v(e._s(e.copy.styles))])]),e._v(" "),n("tr",[n("td",{attrs:{valign:"top"}},[e._v("text")]),e._v(" "),n("td",{staticClass:"option-type",attrs:{valign:"top"}},[e._v("String")]),e._v(" "),n("td",{attrs:{valign:"top"}},[e._v("🦄")]),e._v(" "),n("td",{attrs:{valign:"top"}},[e._v("-")]),e._v(" "),n("td",{attrs:{valign:"top"}},[e._v(e._s(e.copy.text))])]),e._v(" "),n("tr",[n("td",{attrs:{valign:"top"}},[e._v("type")]),e._v(" "),n("td",{staticClass:"option-type",attrs:{valign:"top"}},[e._v("String")]),e._v(" "),n("td",{attrs:{valign:"top"}},[e._v("log")]),e._v(" "),n("td",{attrs:{valign:"top"},domProps:{innerHTML:e._s(e.options.type)}}),e._v(" "),n("td",{attrs:{valign:"top"}},[e._v(e._s(e.copy.type))])])])])])])]),e._v(" "),e._m(14),e._v(" "),e._m(15),e._v(" "),n("div",{staticClass:"mb-5",attrs:{id:"ul-examples"}},[e._m(16),e._v(" "),n("SimpleExample",{attrs:{id:"simple-examples"}}),e._v(" "),n("TextExample",{attrs:{id:"text-examples"}}),e._v(" "),n("TypeExample",{attrs:{id:"type-examples"}}),e._v(" "),n("StylesExample",{attrs:{id:"styles-examples"}}),e._v(" "),n("DisabledExample",{attrs:{id:"disabled-examples"}}),e._v(" "),n("LogPrefixExample",{attrs:{id:"logPrefix-examples"}}),e._v(" "),n("MagicalExample",{attrs:{id:"magical-examples"}}),e._v(" "),n("LogPrefixExample",{attrs:{id:"name-examples",isNameOption:!0}}),e._v(" "),n("ObjectsExamples",{attrs:{id:"objects-examples"}}),e._v(" "),n("ArraysExample",{attrs:{id:"array-examples"}})],1),e._v(" "),e._m(17),e._v(" "),e._m(18),e._v(" "),e._m(19),e._v(" "),e._m(20)])],1)},o=[function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"container mb-5"},[n("div",{staticClass:"row mb-3"},[n("div",{staticClass:"col-12 text-center"},[n("h1",{staticClass:"rainbow-text"},[e._v("Vue Unicorn Log")])])]),e._v(" "),n("div",{staticClass:"row"},[n("div",{staticClass:"col-12 mb-4"},[n("h3",{staticClass:"text-center mb-4"},[e._v("\n\t\t\t\t\t\tA "),n("span",{staticClass:"rainbow-text"},[e._v("magical")]),e._v(" 🦄 plugin to make\n\t\t\t\t\t\tcoloring the console output easier and more flexible.\n\t\t\t\t\t")]),e._v(" "),n("p",[e._v("\n\t\t\t\t\t\tSometimes when building your application/site you don't want to see\n\t\t\t\t\t\tyour linter complaining about using console functions. This helps to\n\t\t\t\t\t\tkeep your linter happy so you can concentrate on writing bug free\n\t\t\t\t\t\tmagical code.\n\t\t\t\t\t")]),e._v(" "),n("p",[e._v("\n\t\t\t\t\t\tIt also has the ability to run the console functions depending on\n\t\t\t\t\t\tenvironment variables so you can keep your production site's console\n\t\t\t\t\t\tquiet.\n\t\t\t\t\t")])]),e._v(" "),n("div",{staticClass:"col-12"},[n("h5",[e._v("Demo")])]),e._v(" "),n("div",{staticClass:"col-12"},[e._v('\n\t\t\t\t\tOpen DevTools and click on the "Console" tab and try out some\n\t\t\t\t\t'),n("a",{attrs:{href:"#ul-examples"}},[e._v("Examples")]),e._v(".\n\t\t\t\t")])])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"col-12"},[n("h2",[e._v("Installation")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"col-12"},[n("h2",[e._v("Usage")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"col-12 mb-3"},[n("h2",[e._v("Plugin Options")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("thead",[n("tr",[n("th",[e._v("Name")]),e._v(" "),n("th",[e._v("Type")]),e._v(" "),n("th",[e._v("Default")]),e._v(" "),n("th",[e._v("Options")]),e._v(" "),n("th",[e._v("Description")])])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("td",{attrs:{valign:"top"}},[n("code",[n("pre",[e._v("const rainbowLinearGradient = `linear-gradient(to right,\n\thsl(0, 100%, 50%),\n\thsl(60, 100%, 50%),\n\thsl(120, 100%, 50%),\n\thsl(180, 100%, 50%),\n\thsl(240, 100%, 50%),\n\thsl(300, 100%, 50%),\n\thsl(360, 100%, 50%)\n)`;\n\ndefaultStyles: {\n\tlog: [\n\t\t'background-color: black',\n\t\t`border-image: ${rainbowLinearGradient} 1`,\n\t\t'border-style: solid',\n\t\t'border-width: 4px',\n\t\t'color: #fff',\n\t\t'font-weight: normal',\n\t\t'padding: 8px',\n\t],\n\tinfo: [\n\t\t'background-color: hsla(225, 100%, 8%, 1)',\n\t\t'box-shadow: 999px 0 0 hsla(225, 100%, 8%, 1)',\n\t\t'color: hsla(225, 100%, 85%, 1)',\n\t\t'display: block',\n\t\t'padding: 2px',\n\t],\n}")])])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("td",{attrs:{valign:"top"}},[n("code",[n("pre",[e._v("{\n\tlog: [],\n\tinfo: [],\n}")])])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"col-12"},[n("h5",[e._v("Overriding the plugin default options")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",[e._v("\n\t\t\t\t\t\t\tIt is recommended to set the "),n("code",[e._v("disabled")]),e._v(" option to use a\n\t\t\t\t\t\t\t"),n("span",{staticClass:"fst-italic"},[e._v(".env")]),e._v(" variable when possible. This\n\t\t\t\t\t\t\tway you will not have your logs exposed to the public when on a\n\t\t\t\t\t\t\tproduction site.\n\t\t\t\t\t\t")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"col-12 mb-3"},[n("h2",[e._v("Log Options")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("thead",[n("tr",[n("th",[e._v("Name")]),e._v(" "),n("th",[e._v("Type")]),e._v(" "),n("th",[e._v("Default")]),e._v(" "),n("th",[e._v("Options")]),e._v(" "),n("th",[e._v("Description")])])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("td",{attrs:{valign:"top"}},[n("code",[e._v("[]")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("tr",[n("td",{attrs:{valign:"top"}},[e._v("name")]),e._v(" "),n("td",{staticClass:"option-type",attrs:{valign:"top"}},[e._v("String")]),e._v(" "),n("td",{attrs:{valign:"top"}},[e._v("[UnicornLog]:")]),e._v(" "),n("td",{attrs:{valign:"top"}},[e._v("-")]),e._v(" "),n("td",{attrs:{valign:"top"}},[e._v("\n\t\t\t\t\t\t\t\t\t\tIf "),n("code",[e._v("logPrefix")]),e._v(" option is set as a\n\t\t\t\t\t\t\t\t\t\t"),n("span",{staticClass:"option-type"},[e._v("Boolean")]),e._v(" of\n\t\t\t\t\t\t\t\t\t\t"),n("span",{staticClass:"boolean-style"},[e._v("true")]),e._v(", it will use the\n\t\t\t\t\t\t\t\t\t\t"),n("code",[e._v("name")]),e._v(" option for the prefix.\n\t\t\t\t\t\t\t\t\t")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("td",{attrs:{valign:"top"}},[n("code",[e._v("{}")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"row mb-5",attrs:{id:"ul-instance-methods"}},[n("div",{staticClass:"col-12"},[n("h2",[e._v("Instance Methods")])]),e._v(" "),n("div",{staticClass:"col-12"},[e._v("\n\t\t\t\t\tThere are two instance methods available to use:\n\t\t\t\t\t"),n("br"),e._v(" "),n("code",[e._v("$unicornLog")]),e._v(" "),n("br"),e._v(" "),n("code",[e._v("$uniLog")])])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"row mb-5",attrs:{id:"ul-console-methods"}},[n("div",{staticClass:"col-12"},[n("h2",[e._v("Console Methods")])]),e._v(" "),n("div",{staticClass:"col-12"},[e._v("\n\t\t\t\t\tFor a description of the different log methods, refer to the\n\t\t\t\t\t"),n("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/API/console",target:"_blank"}},[e._v("Web APIs MDN")]),e._v("\n\t\t\t\t\tdeveloper documentation for console.\n\t\t\t\t")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"row"},[n("div",{staticClass:"col-12 mb-3"},[n("h2",[e._v("Examples")]),e._v(" "),n("p",{staticClass:"fst-italic"},[e._v('\n\t\t\t\t\t\t\tOpen DevTools and click on the "Console" tab to view example\n\t\t\t\t\t\t\tresults.\n\t\t\t\t\t\t')])])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"row mb-5",attrs:{id:"ul-dependencies"}},[n("div",{staticClass:"col-12"},[n("h2",[e._v("Dependencies")])]),e._v(" "),n("div",{staticClass:"col-xl-8 col-lg-12"},[n("a",{attrs:{href:"https://v2.vuejs.org/",target:"_blank"}},[e._v("Vue 2")])])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"row mb-5",attrs:{id:"ul-change-log"}},[n("div",{staticClass:"col-12"},[n("h2",[e._v("Change Log")])]),e._v(" "),n("div",{staticClass:"col-12"},[n("a",{attrs:{href:"https://github.com/webdevnerdstuff/vue-unicorn-log/blob/master/CHANGELOG.md",target:"_blank"}},[e._v("CHANGELOG.md")])])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"row mb-5",attrs:{id:"ul-license"}},[n("div",{staticClass:"col-12"},[n("h2",[e._v("License")])]),e._v(" "),n("div",{staticClass:"col-12"},[n("p",[e._v("\n\t\t\t\t\t\tCopyright © 2022 WebDevNerdStuff\n\t\t\t\t\t\t"),n("br"),e._v("\n\t\t\t\t\t\tLicensed under the MIT license.\n\t\t\t\t\t")]),e._v(" "),n("p",[n("a",{attrs:{href:"https://github.com/webdevnerdstuff/vue-unicorn-log/blob/master/LICENSE.md",target:"_blank"}},[e._v("\n\t\t\t\t\t\t\tLICENSE.md\n\t\t\t\t\t\t")])])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"row mb-5"},[t("div",{staticClass:"col-12 text-center"},[t("img",{attrs:{src:"images/vue-unicorn-log-social.jpg",alt:"Vue Unicorn Log by @WebDevNerdStuff"}})])])}];r._withStripped=!0},"../node_modules/vue-loader/lib/runtime/componentNormalizer.js":function(e,t,n){"use strict";function r(e,t,n,r,o,a,i,s){var l,c="function"==typeof e?e.options:e;if(t&&(c.render=t,c.staticRenderFns=n,c._compiled=!0),r&&(c.functional=!0),a&&(c._scopeId="data-v-"+a),i?(l=function(e){(e=e||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(e=__VUE_SSR_CONTEXT__),o&&o.call(this,e),e&&e._registeredComponents&&e._registeredComponents.add(i)},c._ssrRegister=l):o&&(l=s?function(){o.call(this,(c.functional?this.parent:this).$root.$options.shadowRoot)}:o),l)if(c.functional){c._injectStyles=l;var u=c.render;c.render=function(e,t){return l.call(t),u(e,t)}}else{var d=c.beforeCreate;c.beforeCreate=d?[].concat(d,l):[l]}return{exports:e,options:c}}n.r(t),n.d(t,{default:function(){return r}})},"../node_modules/vue-style-loader/index.js!../node_modules/css-loader/dist/cjs.js!../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../node_modules/sass-loader/dist/cjs.js??clonedRuleSet-3[0].rules[0].use[2]!../node_modules/vue-loader/lib/index.js??vue-loader-options!./docs/UnicornLog.vue?vue&type=style&index=0&lang=scss&":function(e,t,n){var r=n("../node_modules/css-loader/dist/cjs.js!../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../node_modules/sass-loader/dist/cjs.js??clonedRuleSet-3[0].rules[0].use[2]!../node_modules/vue-loader/lib/index.js??vue-loader-options!./docs/UnicornLog.vue?vue&type=style&index=0&lang=scss&");r.__esModule&&(r=r.default),"string"==typeof r&&(r=[[e.id,r,""]]),r.locals&&(e.exports=r.locals);(0,n("../node_modules/vue-style-loader/lib/addStylesClient.js").default)("1ef731c9",r,!1,{})},"../node_modules/vue-style-loader/lib/addStylesClient.js":function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return v}});var r=n("../node_modules/vue-style-loader/lib/listToStyles.js"),o="undefined"!=typeof document;if("undefined"!=typeof DEBUG&&DEBUG&&!o)throw new Error("vue-style-loader cannot be used in a non-browser environment. Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.");var a={},i=o&&(document.head||document.getElementsByTagName("head")[0]),s=null,l=0,c=!1,u=function(){},d=null,p="data-vue-ssr-id",f="undefined"!=typeof navigator&&/msie [6-9]\b/.test(navigator.userAgent.toLowerCase());function v(e,t,n,o){c=n,d=o||{};var i=(0,r.default)(e,t);return m(i),function(t){for(var n=[],o=0;o<i.length;o++){var s=i[o];(l=a[s.id]).refs--,n.push(l)}t?m(i=(0,r.default)(e,t)):i=[];for(o=0;o<n.length;o++){var l;if(0===(l=n[o]).refs){for(var c=0;c<l.parts.length;c++)l.parts[c]();delete a[l.id]}}}}function m(e){for(var t=0;t<e.length;t++){var n=e[t],r=a[n.id];if(r){r.refs++;for(var o=0;o<r.parts.length;o++)r.parts[o](n.parts[o]);for(;o<n.parts.length;o++)r.parts.push(h(n.parts[o]));r.parts.length>n.parts.length&&(r.parts.length=n.parts.length)}else{var i=[];for(o=0;o<n.parts.length;o++)i.push(h(n.parts[o]));a[n.id]={id:n.id,refs:1,parts:i}}}}function g(){var e=document.createElement("style");return e.type="text/css",i.appendChild(e),e}function h(e){var t,n,r=document.querySelector("style["+p+'~="'+e.id+'"]');if(r){if(c)return u;r.parentNode.removeChild(r)}if(f){var o=l++;r=s||(s=g()),t=_.bind(null,r,o,!1),n=_.bind(null,r,o,!0)}else r=g(),t=x.bind(null,r),n=function(){r.parentNode.removeChild(r)};return t(e),function(r){if(r){if(r.css===e.css&&r.media===e.media&&r.sourceMap===e.sourceMap)return;t(e=r)}else n()}}var b,y=(b=[],function(e,t){return b[e]=t,b.filter(Boolean).join("\n")});function _(e,t,n,r){var o=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=y(t,o);else{var a=document.createTextNode(o),i=e.childNodes;i[t]&&e.removeChild(i[t]),i.length?e.insertBefore(a,i[t]):e.appendChild(a)}}function x(e,t){var n=t.css,r=t.media,o=t.sourceMap;if(r&&e.setAttribute("media",r),d.ssrId&&e.setAttribute(p,t.id),o&&(n+="\n/*# sourceURL="+o.sources[0]+" */",n+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */"),e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}},"../node_modules/vue-style-loader/lib/listToStyles.js":function(e,t,n){"use strict";function r(e,t){for(var n=[],r={},o=0;o<t.length;o++){var a=t[o],i=a[0],s={id:e+":"+o,css:a[1],media:a[2],sourceMap:a[3]};r[i]?r[i].parts.push(s):n.push(r[i]={id:i,parts:[s]})}return n}n.r(t),n.d(t,{default:function(){return r}})},"../node_modules/vue/dist/vue.runtime.esm.js":function(e,t,n){"use strict";n.r(t);var r=Object.freeze({});function o(e){return null==e}function a(e){return null!=e}function i(e){return!0===e}function s(e){return"string"==typeof e||"number"==typeof e||"symbol"==typeof e||"boolean"==typeof e}function l(e){return null!==e&&"object"==typeof e}var c=Object.prototype.toString;function u(e){return c.call(e).slice(8,-1)}function d(e){return"[object Object]"===c.call(e)}function p(e){return"[object RegExp]"===c.call(e)}function f(e){var t=parseFloat(String(e));return t>=0&&Math.floor(t)===t&&isFinite(e)}function v(e){return a(e)&&"function"==typeof e.then&&"function"==typeof e.catch}function m(e){return null==e?"":Array.isArray(e)||d(e)&&e.toString===c?JSON.stringify(e,null,2):String(e)}function g(e){var t=parseFloat(e);return isNaN(t)?e:t}function h(e,t){for(var n=Object.create(null),r=e.split(","),o=0;o<r.length;o++)n[r[o]]=!0;return t?function(e){return n[e.toLowerCase()]}:function(e){return n[e]}}var b=h("slot,component",!0),y=h("key,ref,slot,slot-scope,is");function _(e,t){if(e.length){var n=e.indexOf(t);if(n>-1)return e.splice(n,1)}}var x=Object.prototype.hasOwnProperty;function w(e,t){return x.call(e,t)}function A(e){var t=Object.create(null);return function(n){return t[n]||(t[n]=e(n))}}var C=/-(\w)/g,k=A((function(e){return e.replace(C,(function(e,t){return t?t.toUpperCase():""}))})),j=A((function(e){return e.charAt(0).toUpperCase()+e.slice(1)})),E=/\B([A-Z])/g,S=A((function(e){return e.replace(E,"-$1").toLowerCase()}));var O=Function.prototype.bind?function(e,t){return e.bind(t)}:function(e,t){function n(n){var r=arguments.length;return r?r>1?e.apply(t,arguments):e.call(t,n):e.call(t)}return n._length=e.length,n};function L(e,t){t=t||0;for(var n=e.length-t,r=new Array(n);n--;)r[n]=e[n+t];return r}function q(e,t){for(var n in t)e[n]=t[n];return e}function D(e){for(var t={},n=0;n<e.length;n++)e[n]&&q(t,e[n]);return t}function T(e,t,n){}var $=function(e,t,n){return!1},N=function(e){return e};function R(e,t){if(e===t)return!0;var n=l(e),r=l(t);if(!n||!r)return!n&&!r&&String(e)===String(t);try{var o=Array.isArray(e),a=Array.isArray(t);if(o&&a)return e.length===t.length&&e.every((function(e,n){return R(e,t[n])}));if(e instanceof Date&&t instanceof Date)return e.getTime()===t.getTime();if(o||a)return!1;var i=Object.keys(e),s=Object.keys(t);return i.length===s.length&&i.every((function(n){return R(e[n],t[n])}))}catch(e){return!1}}function P(e,t){for(var n=0;n<e.length;n++)if(R(e[n],t))return n;return-1}function F(e){var t=!1;return function(){t||(t=!0,e.apply(this,arguments))}}var B="data-server-rendered",U=["component","directive","filter"],I=["beforeCreate","created","beforeMount","mounted","beforeUpdate","updated","beforeDestroy","destroyed","activated","deactivated","errorCaptured","serverPrefetch"],M={optionMergeStrategies:Object.create(null),silent:!1,productionTip:!0,devtools:!0,performance:!1,errorHandler:null,warnHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:$,isReservedAttr:$,isUnknownElement:$,getTagNamespace:T,parsePlatformTagName:N,mustUseProp:$,async:!0,_lifecycleHooks:I},H=/a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;function V(e){var t=(e+"").charCodeAt(0);return 36===t||95===t}function z(e,t,n,r){Object.defineProperty(e,t,{value:n,enumerable:!!r,writable:!0,configurable:!0})}var W=new RegExp("[^"+H.source+".$_\\d]");var G,Y="__proto__"in{},Z="undefined"!=typeof window,J="undefined"!=typeof WXEnvironment&&!!WXEnvironment.platform,K=J&&WXEnvironment.platform.toLowerCase(),X=Z&&window.navigator.userAgent.toLowerCase(),Q=X&&/msie|trident/.test(X),ee=X&&X.indexOf("msie 9.0")>0,te=X&&X.indexOf("edge/")>0,ne=(X&&X.indexOf("android"),X&&/iphone|ipad|ipod|ios/.test(X)||"ios"===K),re=(X&&/chrome\/\d+/.test(X),X&&/phantomjs/.test(X),X&&X.match(/firefox\/(\d+)/)),oe={}.watch,ae=!1;if(Z)try{var ie={};Object.defineProperty(ie,"passive",{get:function(){ae=!0}}),window.addEventListener("test-passive",null,ie)}catch(e){}var se=function(){return void 0===G&&(G=!Z&&!J&&void 0!==n.g&&(n.g.process&&"server"===n.g.process.env.VUE_ENV)),G},le=Z&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__;function ce(e){return"function"==typeof e&&/native code/.test(e.toString())}var ue,de="undefined"!=typeof Symbol&&ce(Symbol)&&"undefined"!=typeof Reflect&&ce(Reflect.ownKeys);ue="undefined"!=typeof Set&&ce(Set)?Set:function(){function e(){this.set=Object.create(null)}return e.prototype.has=function(e){return!0===this.set[e]},e.prototype.add=function(e){this.set[e]=!0},e.prototype.clear=function(){this.set=Object.create(null)},e}();var pe=T,fe=T,ve=T,me=T,ge="undefined"!=typeof console,he=/(?:^|[-_])(\w)/g;pe=function(e,t){var n=t?ve(t):"";M.warnHandler?M.warnHandler.call(null,e,t,n):ge&&!M.silent&&console.error("[Vue warn]: "+e+n)},fe=function(e,t){ge&&!M.silent&&console.warn("[Vue tip]: "+e+(t?ve(t):""))},me=function(e,t){if(e.$root===e)return"<Root>";var n="function"==typeof e&&null!=e.cid?e.options:e._isVue?e.$options||e.constructor.options:e,r=n.name||n._componentTag,o=n.__file;if(!r&&o){var a=o.match(/([^/\\]+)\.vue$/);r=a&&a[1]}return(r?"<"+(r.replace(he,(function(e){return e.toUpperCase()})).replace(/[-_]/g,"")+">"):"<Anonymous>")+(o&&!1!==t?" at "+o:"")};ve=function(e){if(e._isVue&&e.$parent){for(var t=[],n=0;e;){if(t.length>0){var r=t[t.length-1];if(r.constructor===e.constructor){n++,e=e.$parent;continue}n>0&&(t[t.length-1]=[r,n],n=0)}t.push(e),e=e.$parent}return"\n\nfound in\n\n"+t.map((function(e,t){return""+(0===t?"---\x3e ":function(e,t){for(var n="";t;)t%2==1&&(n+=e),t>1&&(e+=e),t>>=1;return n}(" ",5+2*t))+(Array.isArray(e)?me(e[0])+"... ("+e[1]+" recursive calls)":me(e))})).join("\n")}return"\n\n(found in "+me(e)+")"};var be=0,ye=function(){this.id=be++,this.subs=[]};ye.prototype.addSub=function(e){this.subs.push(e)},ye.prototype.removeSub=function(e){_(this.subs,e)},ye.prototype.depend=function(){ye.target&&ye.target.addDep(this)},ye.prototype.notify=function(){var e=this.subs.slice();M.async||e.sort((function(e,t){return e.id-t.id}));for(var t=0,n=e.length;t<n;t++)e[t].update()},ye.target=null;var _e=[];function xe(e){_e.push(e),ye.target=e}function we(){_e.pop(),ye.target=_e[_e.length-1]}var Ae=function(e,t,n,r,o,a,i,s){this.tag=e,this.data=t,this.children=n,this.text=r,this.elm=o,this.ns=void 0,this.context=a,this.fnContext=void 0,this.fnOptions=void 0,this.fnScopeId=void 0,this.key=t&&t.key,this.componentOptions=i,this.componentInstance=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1,this.asyncFactory=s,this.asyncMeta=void 0,this.isAsyncPlaceholder=!1},Ce={child:{configurable:!0}};Ce.child.get=function(){return this.componentInstance},Object.defineProperties(Ae.prototype,Ce);var ke=function(e){void 0===e&&(e="");var t=new Ae;return t.text=e,t.isComment=!0,t};function je(e){return new Ae(void 0,void 0,void 0,String(e))}function Ee(e){var t=new Ae(e.tag,e.data,e.children&&e.children.slice(),e.text,e.elm,e.context,e.componentOptions,e.asyncFactory);return t.ns=e.ns,t.isStatic=e.isStatic,t.key=e.key,t.isComment=e.isComment,t.fnContext=e.fnContext,t.fnOptions=e.fnOptions,t.fnScopeId=e.fnScopeId,t.asyncMeta=e.asyncMeta,t.isCloned=!0,t}var Se=Array.prototype,Oe=Object.create(Se);["push","pop","shift","unshift","splice","sort","reverse"].forEach((function(e){var t=Se[e];z(Oe,e,(function(){for(var n=[],r=arguments.length;r--;)n[r]=arguments[r];var o,a=t.apply(this,n),i=this.__ob__;switch(e){case"push":case"unshift":o=n;break;case"splice":o=n.slice(2)}return o&&i.observeArray(o),i.dep.notify(),a}))}));var Le=Object.getOwnPropertyNames(Oe),qe=!0;function De(e){qe=e}var Te=function(e){this.value=e,this.dep=new ye,this.vmCount=0,z(e,"__ob__",this),Array.isArray(e)?(Y?function(e,t){e.__proto__=t}(e,Oe):function(e,t,n){for(var r=0,o=n.length;r<o;r++){var a=n[r];z(e,a,t[a])}}(e,Oe,Le),this.observeArray(e)):this.walk(e)};function $e(e,t){var n;if(l(e)&&!(e instanceof Ae))return w(e,"__ob__")&&e.__ob__ instanceof Te?n=e.__ob__:qe&&!se()&&(Array.isArray(e)||d(e))&&Object.isExtensible(e)&&!e._isVue&&(n=new Te(e)),t&&n&&n.vmCount++,n}function Ne(e,t,n,r,o){var a=new ye,i=Object.getOwnPropertyDescriptor(e,t);if(!i||!1!==i.configurable){var s=i&&i.get,l=i&&i.set;s&&!l||2!==arguments.length||(n=e[t]);var c=!o&&$e(n);Object.defineProperty(e,t,{enumerable:!0,configurable:!0,get:function(){var t=s?s.call(e):n;return ye.target&&(a.depend(),c&&(c.dep.depend(),Array.isArray(t)&&Fe(t))),t},set:function(t){var i=s?s.call(e):n;t===i||t!=t&&i!=i||(r&&r(),s&&!l||(l?l.call(e,t):n=t,c=!o&&$e(t),a.notify()))}})}}function Re(e,t,n){if((o(e)||s(e))&&pe("Cannot set reactive property on undefined, null, or primitive value: "+e),Array.isArray(e)&&f(t))return e.length=Math.max(e.length,t),e.splice(t,1,n),n;if(t in e&&!(t in Object.prototype))return e[t]=n,n;var r=e.__ob__;return e._isVue||r&&r.vmCount?(pe("Avoid adding reactive properties to a Vue instance or its root $data at runtime - declare it upfront in the data option."),n):r?(Ne(r.value,t,n),r.dep.notify(),n):(e[t]=n,n)}function Pe(e,t){if((o(e)||s(e))&&pe("Cannot delete reactive property on undefined, null, or primitive value: "+e),Array.isArray(e)&&f(t))e.splice(t,1);else{var n=e.__ob__;e._isVue||n&&n.vmCount?pe("Avoid deleting properties on a Vue instance or its root $data - just set it to null."):w(e,t)&&(delete e[t],n&&n.dep.notify())}}function Fe(e){for(var t=void 0,n=0,r=e.length;n<r;n++)(t=e[n])&&t.__ob__&&t.__ob__.dep.depend(),Array.isArray(t)&&Fe(t)}Te.prototype.walk=function(e){for(var t=Object.keys(e),n=0;n<t.length;n++)Ne(e,t[n])},Te.prototype.observeArray=function(e){for(var t=0,n=e.length;t<n;t++)$e(e[t])};var Be=M.optionMergeStrategies;function Ue(e,t){if(!t)return e;for(var n,r,o,a=de?Reflect.ownKeys(t):Object.keys(t),i=0;i<a.length;i++)"__ob__"!==(n=a[i])&&(r=e[n],o=t[n],w(e,n)?r!==o&&d(r)&&d(o)&&Ue(r,o):Re(e,n,o));return e}function Ie(e,t,n){return n?function(){var r="function"==typeof t?t.call(n,n):t,o="function"==typeof e?e.call(n,n):e;return r?Ue(r,o):o}:t?e?function(){return Ue("function"==typeof t?t.call(this,this):t,"function"==typeof e?e.call(this,this):e)}:t:e}function Me(e,t){var n=t?e?e.concat(t):Array.isArray(t)?t:[t]:e;return n?function(e){for(var t=[],n=0;n<e.length;n++)-1===t.indexOf(e[n])&&t.push(e[n]);return t}(n):n}function He(e,t,n,r){var o=Object.create(e||null);return t?(We(r,t,n),q(o,t)):o}Be.el=Be.propsData=function(e,t,n,r){return n||pe('option "'+r+'" can only be used during instance creation with the `new` keyword.'),Ve(e,t)},Be.data=function(e,t,n){return n?Ie(e,t,n):t&&"function"!=typeof t?(pe('The "data" option should be a function that returns a per-instance value in component definitions.',n),e):Ie(e,t)},I.forEach((function(e){Be[e]=Me})),U.forEach((function(e){Be[e+"s"]=He})),Be.watch=function(e,t,n,r){if(e===oe&&(e=void 0),t===oe&&(t=void 0),!t)return Object.create(e||null);if(We(r,t,n),!e)return t;var o={};for(var a in q(o,e),t){var i=o[a],s=t[a];i&&!Array.isArray(i)&&(i=[i]),o[a]=i?i.concat(s):Array.isArray(s)?s:[s]}return o},Be.props=Be.methods=Be.inject=Be.computed=function(e,t,n,r){if(t&&We(r,t,n),!e)return t;var o=Object.create(null);return q(o,e),t&&q(o,t),o},Be.provide=Ie;var Ve=function(e,t){return void 0===t?e:t};function ze(e){new RegExp("^[a-zA-Z][\\-\\.0-9_"+H.source+"]*$").test(e)||pe('Invalid component name: "'+e+'". Component names should conform to valid custom element name in html5 specification.'),(b(e)||M.isReservedTag(e))&&pe("Do not use built-in or reserved HTML elements as component id: "+e)}function We(e,t,n){d(t)||pe('Invalid value for option "'+e+'": expected an Object, but got '+u(t)+".",n)}function Ge(e,t,n){if(function(e){for(var t in e.components)ze(t)}(t),"function"==typeof t&&(t=t.options),function(e,t){var n=e.props;if(n){var r,o,a={};if(Array.isArray(n))for(r=n.length;r--;)"string"==typeof(o=n[r])?a[k(o)]={type:null}:pe("props must be strings when using array syntax.");else if(d(n))for(var i in n)o=n[i],a[k(i)]=d(o)?o:{type:o};else pe('Invalid value for option "props": expected an Array or an Object, but got '+u(n)+".",t);e.props=a}}(t,n),function(e,t){var n=e.inject;if(n){var r=e.inject={};if(Array.isArray(n))for(var o=0;o<n.length;o++)r[n[o]]={from:n[o]};else if(d(n))for(var a in n){var i=n[a];r[a]=d(i)?q({from:a},i):{from:i}}else pe('Invalid value for option "inject": expected an Array or an Object, but got '+u(n)+".",t)}}(t,n),function(e){var t=e.directives;if(t)for(var n in t){var r=t[n];"function"==typeof r&&(t[n]={bind:r,update:r})}}(t),!t._base&&(t.extends&&(e=Ge(e,t.extends,n)),t.mixins))for(var r=0,o=t.mixins.length;r<o;r++)e=Ge(e,t.mixins[r],n);var a,i={};for(a in e)s(a);for(a in t)w(e,a)||s(a);function s(r){var o=Be[r]||Ve;i[r]=o(e[r],t[r],n,r)}return i}function Ye(e,t,n,r){if("string"==typeof n){var o=e[t];if(w(o,n))return o[n];var a=k(n);if(w(o,a))return o[a];var i=j(a);if(w(o,i))return o[i];var s=o[n]||o[a]||o[i];return r&&!s&&pe("Failed to resolve "+t.slice(0,-1)+": "+n,e),s}}function Ze(e,t,n,r){var o=t[e],a=!w(n,e),i=n[e],s=tt(Boolean,o.type);if(s>-1)if(a&&!w(o,"default"))i=!1;else if(""===i||i===S(e)){var c=tt(String,o.type);(c<0||s<c)&&(i=!0)}if(void 0===i){i=function(e,t,n){if(!w(t,"default"))return;var r=t.default;l(r)&&pe('Invalid default value for prop "'+n+'": Props with type Object/Array must use a factory function to return the default value.',e);if(e&&e.$options.propsData&&void 0===e.$options.propsData[n]&&void 0!==e._props[n])return e._props[n];return"function"==typeof r&&"Function"!==Qe(t.type)?r.call(e):r}(r,o,e);var d=qe;De(!0),$e(i),De(d)}return function(e,t,n,r,o){if(e.required&&o)return void pe('Missing required prop: "'+t+'"',r);if(null==n&&!e.required)return;var a=e.type,i=!a||!0===a,s=[];if(a){Array.isArray(a)||(a=[a]);for(var l=0;l<a.length&&!i;l++){var c=Ke(n,a[l],r);s.push(c.expectedType||""),i=c.valid}}var d=s.some((function(e){return e}));if(!i&&d)return void pe(function(e,t,n){var r='Invalid prop: type check failed for prop "'+e+'". Expected '+n.map(j).join(", "),o=n[0],a=u(t);1===n.length&&ot(o)&&ot(typeof t)&&!function(){var e=[],t=arguments.length;for(;t--;)e[t]=arguments[t];return e.some((function(e){return"boolean"===e.toLowerCase()}))}(o,a)&&(r+=" with value "+nt(t,o));r+=", got "+a+" ",ot(a)&&(r+="with value "+nt(t,a)+".");return r}(t,n,s),r);var p=e.validator;p&&(p(n)||pe('Invalid prop: custom validator check failed for prop "'+t+'".',r))}(o,e,i,r,a),i}var Je=/^(String|Number|Boolean|Function|Symbol|BigInt)$/;function Ke(e,t,n){var r,o=Qe(t);if(Je.test(o)){var a=typeof e;(r=a===o.toLowerCase())||"object"!==a||(r=e instanceof t)}else if("Object"===o)r=d(e);else if("Array"===o)r=Array.isArray(e);else try{r=e instanceof t}catch(e){pe('Invalid prop type: "'+String(t)+'" is not a constructor',n),r=!1}return{valid:r,expectedType:o}}var Xe=/^\s*function (\w+)/;function Qe(e){var t=e&&e.toString().match(Xe);return t?t[1]:""}function et(e,t){return Qe(e)===Qe(t)}function tt(e,t){if(!Array.isArray(t))return et(t,e)?0:-1;for(var n=0,r=t.length;n<r;n++)if(et(t[n],e))return n;return-1}function nt(e,t){return"String"===t?'"'+e+'"':"Number"===t?""+Number(e):""+e}var rt=["string","number","boolean"];function ot(e){return rt.some((function(t){return e.toLowerCase()===t}))}function at(e,t,n){xe();try{if(t)for(var r=t;r=r.$parent;){var o=r.$options.errorCaptured;if(o)for(var a=0;a<o.length;a++)try{if(!1===o[a].call(r,e,t,n))return}catch(e){st(e,r,"errorCaptured hook")}}st(e,t,n)}finally{we()}}function it(e,t,n,r,o){var a;try{(a=n?e.apply(t,n):e.call(t))&&!a._isVue&&v(a)&&!a._handled&&(a.catch((function(e){return at(e,r,o+" (Promise/async)")})),a._handled=!0)}catch(e){at(e,r,o)}return a}function st(e,t,n){if(M.errorHandler)try{return M.errorHandler.call(null,e,t,n)}catch(t){t!==e&&lt(t,null,"config.errorHandler")}lt(e,t,n)}function lt(e,t,n){if(pe("Error in "+n+': "'+e.toString()+'"',t),!Z&&!J||"undefined"==typeof console)throw e;console.error(e)}var ct,ut,dt=!1,pt=[],ft=!1;function vt(){ft=!1;var e=pt.slice(0);pt.length=0;for(var t=0;t<e.length;t++)e[t]()}if("undefined"!=typeof Promise&&ce(Promise)){var mt=Promise.resolve();ct=function(){mt.then(vt),ne&&setTimeout(T)},dt=!0}else if(Q||"undefined"==typeof MutationObserver||!ce(MutationObserver)&&"[object MutationObserverConstructor]"!==MutationObserver.toString())ct="undefined"!=typeof setImmediate&&ce(setImmediate)?function(){setImmediate(vt)}:function(){setTimeout(vt,0)};else{var gt=1,ht=new MutationObserver(vt),bt=document.createTextNode(String(gt));ht.observe(bt,{characterData:!0}),ct=function(){gt=(gt+1)%2,bt.data=String(gt)},dt=!0}function yt(e,t){var n;if(pt.push((function(){if(e)try{e.call(t)}catch(e){at(e,t,"nextTick")}else n&&n(t)})),ft||(ft=!0,ct()),!e&&"undefined"!=typeof Promise)return new Promise((function(e){n=e}))}var _t=h("Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,BigInt,require"),xt=function(e,t){pe('Property or method "'+t+'" is not defined on the instance but referenced during render. Make sure that this property is reactive, either in the data option, or for class-based components, by initializing the property. See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.',e)},wt=function(e,t){pe('Property "'+t+'" must be accessed with "$data.'+t+'" because properties starting with "$" or "_" are not proxied in the Vue instance to prevent conflicts with Vue internals. See: https://vuejs.org/v2/api/#data',e)},At="undefined"!=typeof Proxy&&ce(Proxy);if(At){var Ct=h("stop,prevent,self,ctrl,shift,alt,meta,exact");M.keyCodes=new Proxy(M.keyCodes,{set:function(e,t,n){return Ct(t)?(pe("Avoid overwriting built-in modifier in config.keyCodes: ."+t),!1):(e[t]=n,!0)}})}var kt={has:function(e,t){var n=t in e,r=_t(t)||"string"==typeof t&&"_"===t.charAt(0)&&!(t in e.$data);return n||r||(t in e.$data?wt(e,t):xt(e,t)),n||!r}},jt={get:function(e,t){return"string"!=typeof t||t in e||(t in e.$data?wt(e,t):xt(e,t)),e[t]}};ut=function(e){if(At){var t=e.$options,n=t.render&&t.render._withStripped?jt:kt;e._renderProxy=new Proxy(e,n)}else e._renderProxy=e};var Et,St,Ot=new ue;function Lt(e){qt(e,Ot),Ot.clear()}function qt(e,t){var n,r,o=Array.isArray(e);if(!(!o&&!l(e)||Object.isFrozen(e)||e instanceof Ae)){if(e.__ob__){var a=e.__ob__.dep.id;if(t.has(a))return;t.add(a)}if(o)for(n=e.length;n--;)qt(e[n],t);else for(n=(r=Object.keys(e)).length;n--;)qt(e[r[n]],t)}}var Dt=Z&&window.performance;Dt&&Dt.mark&&Dt.measure&&Dt.clearMarks&&Dt.clearMeasures&&(Et=function(e){return Dt.mark(e)},St=function(e,t,n){Dt.measure(e,t,n),Dt.clearMarks(t),Dt.clearMarks(n)});var Tt=A((function(e){var t="&"===e.charAt(0),n="~"===(e=t?e.slice(1):e).charAt(0),r="!"===(e=n?e.slice(1):e).charAt(0);return{name:e=r?e.slice(1):e,once:n,capture:r,passive:t}}));function $t(e,t){function n(){var e=arguments,r=n.fns;if(!Array.isArray(r))return it(r,null,arguments,t,"v-on handler");for(var o=r.slice(),a=0;a<o.length;a++)it(o[a],null,e,t,"v-on handler")}return n.fns=e,n}function Nt(e,t,n,r,a,s){var l,c,u,d;for(l in e)c=e[l],u=t[l],d=Tt(l),o(c)?pe('Invalid handler for event "'+d.name+'": got '+String(c),s):o(u)?(o(c.fns)&&(c=e[l]=$t(c,s)),i(d.once)&&(c=e[l]=a(d.name,c,d.capture)),n(d.name,c,d.capture,d.passive,d.params)):c!==u&&(u.fns=c,e[l]=u);for(l in t)o(e[l])&&r((d=Tt(l)).name,t[l],d.capture)}function Rt(e,t,n){var r;e instanceof Ae&&(e=e.data.hook||(e.data.hook={}));var s=e[t];function l(){n.apply(this,arguments),_(r.fns,l)}o(s)?r=$t([l]):a(s.fns)&&i(s.merged)?(r=s).fns.push(l):r=$t([s,l]),r.merged=!0,e[t]=r}function Pt(e,t,n,r,o){if(a(t)){if(w(t,n))return e[n]=t[n],o||delete t[n],!0;if(w(t,r))return e[n]=t[r],o||delete t[r],!0}return!1}function Ft(e){return s(e)?[je(e)]:Array.isArray(e)?Ut(e):void 0}function Bt(e){return a(e)&&a(e.text)&&!1===e.isComment}function Ut(e,t){var n,r,l,c,u=[];for(n=0;n<e.length;n++)o(r=e[n])||"boolean"==typeof r||(c=u[l=u.length-1],Array.isArray(r)?r.length>0&&(Bt((r=Ut(r,(t||"")+"_"+n))[0])&&Bt(c)&&(u[l]=je(c.text+r[0].text),r.shift()),u.push.apply(u,r)):s(r)?Bt(c)?u[l]=je(c.text+r):""!==r&&u.push(je(r)):Bt(r)&&Bt(c)?u[l]=je(c.text+r.text):(i(e._isVList)&&a(r.tag)&&o(r.key)&&a(t)&&(r.key="__vlist"+t+"_"+n+"__"),u.push(r)));return u}function It(e,t){if(e){for(var n=Object.create(null),r=de?Reflect.ownKeys(e):Object.keys(e),o=0;o<r.length;o++){var a=r[o];if("__ob__"!==a){for(var i=e[a].from,s=t;s;){if(s._provided&&w(s._provided,i)){n[a]=s._provided[i];break}s=s.$parent}if(!s)if("default"in e[a]){var l=e[a].default;n[a]="function"==typeof l?l.call(t):l}else pe('Injection "'+a+'" not found',t)}}return n}}function Mt(e,t){if(!e||!e.length)return{};for(var n={},r=0,o=e.length;r<o;r++){var a=e[r],i=a.data;if(i&&i.attrs&&i.attrs.slot&&delete i.attrs.slot,a.context!==t&&a.fnContext!==t||!i||null==i.slot)(n.default||(n.default=[])).push(a);else{var s=i.slot,l=n[s]||(n[s]=[]);"template"===a.tag?l.push.apply(l,a.children||[]):l.push(a)}}for(var c in n)n[c].every(Ht)&&delete n[c];return n}function Ht(e){return e.isComment&&!e.asyncFactory||" "===e.text}function Vt(e){return e.isComment&&e.asyncFactory}function zt(e,t,n){var o,a=Object.keys(t).length>0,i=e?!!e.$stable:!a,s=e&&e.$key;if(e){if(e._normalized)return e._normalized;if(i&&n&&n!==r&&s===n.$key&&!a&&!n.$hasNormal)return n;for(var l in o={},e)e[l]&&"$"!==l[0]&&(o[l]=Wt(t,l,e[l]))}else o={};for(var c in t)c in o||(o[c]=Gt(t,c));return e&&Object.isExtensible(e)&&(e._normalized=o),z(o,"$stable",i),z(o,"$key",s),z(o,"$hasNormal",a),o}function Wt(e,t,n){var r=function(){var e=arguments.length?n.apply(null,arguments):n({}),t=(e=e&&"object"==typeof e&&!Array.isArray(e)?[e]:Ft(e))&&e[0];return e&&(!t||1===e.length&&t.isComment&&!Vt(t))?void 0:e};return n.proxy&&Object.defineProperty(e,t,{get:r,enumerable:!0,configurable:!0}),r}function Gt(e,t){return function(){return e[t]}}function Yt(e,t){var n,r,o,i,s;if(Array.isArray(e)||"string"==typeof e)for(n=new Array(e.length),r=0,o=e.length;r<o;r++)n[r]=t(e[r],r);else if("number"==typeof e)for(n=new Array(e),r=0;r<e;r++)n[r]=t(r+1,r);else if(l(e))if(de&&e[Symbol.iterator]){n=[];for(var c=e[Symbol.iterator](),u=c.next();!u.done;)n.push(t(u.value,n.length)),u=c.next()}else for(i=Object.keys(e),n=new Array(i.length),r=0,o=i.length;r<o;r++)s=i[r],n[r]=t(e[s],s,r);return a(n)||(n=[]),n._isVList=!0,n}function Zt(e,t,n,r){var o,a=this.$scopedSlots[e];a?(n=n||{},r&&(l(r)||pe("slot v-bind without argument expects an Object",this),n=q(q({},r),n)),o=a(n)||("function"==typeof t?t():t)):o=this.$slots[e]||("function"==typeof t?t():t);var i=n&&n.slot;return i?this.$createElement("template",{slot:i},o):o}function Jt(e){return Ye(this.$options,"filters",e,!0)||N}function Kt(e,t){return Array.isArray(e)?-1===e.indexOf(t):e!==t}function Xt(e,t,n,r,o){var a=M.keyCodes[t]||n;return o&&r&&!M.keyCodes[t]?Kt(o,r):a?Kt(a,e):r?S(r)!==t:void 0===e}function Qt(e,t,n,r,o){if(n)if(l(n)){var a;Array.isArray(n)&&(n=D(n));var i=function(i){if("class"===i||"style"===i||y(i))a=e;else{var s=e.attrs&&e.attrs.type;a=r||M.mustUseProp(t,s,i)?e.domProps||(e.domProps={}):e.attrs||(e.attrs={})}var l=k(i),c=S(i);l in a||c in a||(a[i]=n[i],o&&((e.on||(e.on={}))["update:"+i]=function(e){n[i]=e}))};for(var s in n)i(s)}else pe("v-bind without argument expects an Object or Array value",this);return e}function en(e,t){var n=this._staticTrees||(this._staticTrees=[]),r=n[e];return r&&!t||nn(r=n[e]=this.$options.staticRenderFns[e].call(this._renderProxy,null,this),"__static__"+e,!1),r}function tn(e,t,n){return nn(e,"__once__"+t+(n?"_"+n:""),!0),e}function nn(e,t,n){if(Array.isArray(e))for(var r=0;r<e.length;r++)e[r]&&"string"!=typeof e[r]&&rn(e[r],t+"_"+r,n);else rn(e,t,n)}function rn(e,t,n){e.isStatic=!0,e.key=t,e.isOnce=n}function on(e,t){if(t)if(d(t)){var n=e.on=e.on?q({},e.on):{};for(var r in t){var o=n[r],a=t[r];n[r]=o?[].concat(o,a):a}}else pe("v-on without argument expects an Object value",this);return e}function an(e,t,n,r){t=t||{$stable:!n};for(var o=0;o<e.length;o++){var a=e[o];Array.isArray(a)?an(a,t,n):a&&(a.proxy&&(a.fn.proxy=!0),t[a.key]=a.fn)}return r&&(t.$key=r),t}function sn(e,t){for(var n=0;n<t.length;n+=2){var r=t[n];"string"==typeof r&&r?e[t[n]]=t[n+1]:""!==r&&null!==r&&pe("Invalid value for dynamic directive argument (expected string or null): "+r,this)}return e}function ln(e,t){return"string"==typeof e?t+e:e}function cn(e){e._o=tn,e._n=g,e._s=m,e._l=Yt,e._t=Zt,e._q=R,e._i=P,e._m=en,e._f=Jt,e._k=Xt,e._b=Qt,e._v=je,e._e=ke,e._u=an,e._g=on,e._d=sn,e._p=ln}function un(e,t,n,o,a){var s,l=this,c=a.options;w(o,"_uid")?(s=Object.create(o))._original=o:(s=o,o=o._original);var u=i(c._compiled),d=!u;this.data=e,this.props=t,this.children=n,this.parent=o,this.listeners=e.on||r,this.injections=It(c.inject,o),this.slots=function(){return l.$slots||zt(e.scopedSlots,l.$slots=Mt(n,o)),l.$slots},Object.defineProperty(this,"scopedSlots",{enumerable:!0,get:function(){return zt(e.scopedSlots,this.slots())}}),u&&(this.$options=c,this.$slots=this.slots(),this.$scopedSlots=zt(e.scopedSlots,this.$slots)),c._scopeId?this._c=function(e,t,n,r){var a=hn(s,e,t,n,r,d);return a&&!Array.isArray(a)&&(a.fnScopeId=c._scopeId,a.fnContext=o),a}:this._c=function(e,t,n,r){return hn(s,e,t,n,r,d)}}function dn(e,t,n,r,o){var a=Ee(e);return a.fnContext=n,a.fnOptions=r,(a.devtoolsMeta=a.devtoolsMeta||{}).renderContext=o,t.slot&&((a.data||(a.data={})).slot=t.slot),a}function pn(e,t){for(var n in t)e[k(n)]=t[n]}cn(un.prototype);var fn={init:function(e,t){if(e.componentInstance&&!e.componentInstance._isDestroyed&&e.data.keepAlive){var n=e;fn.prepatch(n,n)}else{(e.componentInstance=function(e,t){var n={_isComponent:!0,_parentVnode:e,parent:t},r=e.data.inlineTemplate;a(r)&&(n.render=r.render,n.staticRenderFns=r.staticRenderFns);return new e.componentOptions.Ctor(n)}(e,En)).$mount(t?e.elm:void 0,t)}},prepatch:function(e,t){var n=t.componentOptions;!function(e,t,n,o,a){Sn=!0;var i=o.data.scopedSlots,s=e.$scopedSlots,l=!!(i&&!i.$stable||s!==r&&!s.$stable||i&&e.$scopedSlots.$key!==i.$key||!i&&e.$scopedSlots.$key),c=!!(a||e.$options._renderChildren||l);e.$options._parentVnode=o,e.$vnode=o,e._vnode&&(e._vnode.parent=o);if(e.$options._renderChildren=a,e.$attrs=o.data.attrs||r,e.$listeners=n||r,t&&e.$options.props){De(!1);for(var u=e._props,d=e.$options._propKeys||[],p=0;p<d.length;p++){var f=d[p],v=e.$options.props;u[f]=Ze(f,v,t,e)}De(!0),e.$options.propsData=t}n=n||r;var m=e.$options._parentListeners;e.$options._parentListeners=n,jn(e,n,m),c&&(e.$slots=Mt(a,o.context),e.$forceUpdate());Sn=!1}(t.componentInstance=e.componentInstance,n.propsData,n.listeners,t,n.children)},insert:function(e){var t,n=e.context,r=e.componentInstance;r._isMounted||(r._isMounted=!0,Tn(r,"mounted")),e.data.keepAlive&&(n._isMounted?((t=r)._inactive=!1,Nn.push(t)):qn(r,!0))},destroy:function(e){var t=e.componentInstance;t._isDestroyed||(e.data.keepAlive?Dn(t,!0):t.$destroy())}},vn=Object.keys(fn);function mn(e,t,n,s,c){if(!o(e)){var u=n.$options._base;if(l(e)&&(e=u.extend(e)),"function"==typeof e){var d;if(o(e.cid)&&(e=function(e,t){if(i(e.error)&&a(e.errorComp))return e.errorComp;if(a(e.resolved))return e.resolved;var n=_n;n&&a(e.owners)&&-1===e.owners.indexOf(n)&&e.owners.push(n);if(i(e.loading)&&a(e.loadingComp))return e.loadingComp;if(n&&!a(e.owners)){var r=e.owners=[n],s=!0,c=null,u=null;n.$on("hook:destroyed",(function(){return _(r,n)}));var d=function(e){for(var t=0,n=r.length;t<n;t++)r[t].$forceUpdate();e&&(r.length=0,null!==c&&(clearTimeout(c),c=null),null!==u&&(clearTimeout(u),u=null))},p=F((function(n){e.resolved=xn(n,t),s?r.length=0:d(!0)})),f=F((function(t){pe("Failed to resolve async component: "+String(e)+(t?"\nReason: "+t:"")),a(e.errorComp)&&(e.error=!0,d(!0))})),m=e(p,f);return l(m)&&(v(m)?o(e.resolved)&&m.then(p,f):v(m.component)&&(m.component.then(p,f),a(m.error)&&(e.errorComp=xn(m.error,t)),a(m.loading)&&(e.loadingComp=xn(m.loading,t),0===m.delay?e.loading=!0:c=setTimeout((function(){c=null,o(e.resolved)&&o(e.error)&&(e.loading=!0,d(!1))}),m.delay||200)),a(m.timeout)&&(u=setTimeout((function(){u=null,o(e.resolved)&&f("timeout ("+m.timeout+"ms)")}),m.timeout)))),s=!1,e.loading?e.loadingComp:e.resolved}}(d=e,u),void 0===e))return function(e,t,n,r,o){var a=ke();return a.asyncFactory=e,a.asyncMeta={data:t,context:n,children:r,tag:o},a}(d,t,n,s,c);t=t||{},nr(e),a(t.model)&&function(e,t){var n=e.model&&e.model.prop||"value",r=e.model&&e.model.event||"input";(t.attrs||(t.attrs={}))[n]=t.model.value;var o=t.on||(t.on={}),i=o[r],s=t.model.callback;a(i)?(Array.isArray(i)?-1===i.indexOf(s):i!==s)&&(o[r]=[s].concat(i)):o[r]=s}(e.options,t);var p=function(e,t,n){var r=t.options.props;if(!o(r)){var i={},s=e.attrs,l=e.props;if(a(s)||a(l))for(var c in r){var u=S(c),d=c.toLowerCase();c!==d&&s&&w(s,d)&&fe('Prop "'+d+'" is passed to component '+me(n||t)+', but the declared prop name is "'+c+'". Note that HTML attributes are case-insensitive and camelCased props need to use their kebab-case equivalents when using in-DOM templates. You should probably use "'+u+'" instead of "'+c+'".'),Pt(i,l,c,u,!0)||Pt(i,s,c,u,!1)}return i}}(t,e,c);if(i(e.options.functional))return function(e,t,n,o,i){var s=e.options,l={},c=s.props;if(a(c))for(var u in c)l[u]=Ze(u,c,t||r);else a(n.attrs)&&pn(l,n.attrs),a(n.props)&&pn(l,n.props);var d=new un(n,l,i,o,e),p=s.render.call(null,d._c,d);if(p instanceof Ae)return dn(p,n,d.parent,s,d);if(Array.isArray(p)){for(var f=Ft(p)||[],v=new Array(f.length),m=0;m<f.length;m++)v[m]=dn(f[m],n,d.parent,s,d);return v}}(e,p,t,n,s);var f=t.on;if(t.on=t.nativeOn,i(e.options.abstract)){var m=t.slot;t={},m&&(t.slot=m)}!function(e){for(var t=e.hook||(e.hook={}),n=0;n<vn.length;n++){var r=vn[n],o=t[r],a=fn[r];o===a||o&&o._merged||(t[r]=o?gn(a,o):a)}}(t);var g=e.options.name||c;return new Ae("vue-component-"+e.cid+(g?"-"+g:""),t,void 0,void 0,void 0,n,{Ctor:e,propsData:p,listeners:f,tag:c,children:s},d)}pe("Invalid Component definition: "+String(e),n)}}function gn(e,t){var n=function(n,r){e(n,r),t(n,r)};return n._merged=!0,n}function hn(e,t,n,r,o,c){return(Array.isArray(n)||s(n))&&(o=r,r=n,n=void 0),i(c)&&(o=2),function(e,t,n,r,o){if(a(n)&&a(n.__ob__))return pe("Avoid using observed data object as vnode data: "+JSON.stringify(n)+"\nAlways create fresh vnode data objects in each render!",e),ke();a(n)&&a(n.is)&&(t=n.is);if(!t)return ke();a(n)&&a(n.key)&&!s(n.key)&&pe("Avoid using non-primitive value as key, use string/number value instead.",e);Array.isArray(r)&&"function"==typeof r[0]&&((n=n||{}).scopedSlots={default:r[0]},r.length=0);2===o?r=Ft(r):1===o&&(r=function(e){for(var t=0;t<e.length;t++)if(Array.isArray(e[t]))return Array.prototype.concat.apply([],e);return e}(r));var i,c;if("string"==typeof t){var u;c=e.$vnode&&e.$vnode.ns||M.getTagNamespace(t),M.isReservedTag(t)?(a(n)&&a(n.nativeOn)&&"component"!==n.tag&&pe("The .native modifier for v-on is only valid on components but it was used on <"+t+">.",e),i=new Ae(M.parsePlatformTagName(t),n,r,void 0,void 0,e)):i=n&&n.pre||!a(u=Ye(e.$options,"components",t))?new Ae(t,n,r,void 0,void 0,e):mn(u,n,e,r,t)}else i=mn(t,n,e,r);return Array.isArray(i)?i:a(i)?(a(c)&&bn(i,c),a(n)&&function(e){l(e.style)&&Lt(e.style);l(e.class)&&Lt(e.class)}(n),i):ke()}(e,t,n,r,o)}function bn(e,t,n){if(e.ns=t,"foreignObject"===e.tag&&(t=void 0,n=!0),a(e.children))for(var r=0,s=e.children.length;r<s;r++){var l=e.children[r];a(l.tag)&&(o(l.ns)||i(n)&&"svg"!==l.tag)&&bn(l,t,n)}}var yn,_n=null;function xn(e,t){return(e.__esModule||de&&"Module"===e[Symbol.toStringTag])&&(e=e.default),l(e)?t.extend(e):e}function wn(e){if(Array.isArray(e))for(var t=0;t<e.length;t++){var n=e[t];if(a(n)&&(a(n.componentOptions)||Vt(n)))return n}}function An(e,t){yn.$on(e,t)}function Cn(e,t){yn.$off(e,t)}function kn(e,t){var n=yn;return function r(){var o=t.apply(null,arguments);null!==o&&n.$off(e,r)}}function jn(e,t,n){yn=e,Nt(t,n||{},An,Cn,kn,e),yn=void 0}var En=null,Sn=!1;function On(e){var t=En;return En=e,function(){En=t}}function Ln(e){for(;e&&(e=e.$parent);)if(e._inactive)return!0;return!1}function qn(e,t){if(t){if(e._directInactive=!1,Ln(e))return}else if(e._directInactive)return;if(e._inactive||null===e._inactive){e._inactive=!1;for(var n=0;n<e.$children.length;n++)qn(e.$children[n]);Tn(e,"activated")}}function Dn(e,t){if(!(t&&(e._directInactive=!0,Ln(e))||e._inactive)){e._inactive=!0;for(var n=0;n<e.$children.length;n++)Dn(e.$children[n]);Tn(e,"deactivated")}}function Tn(e,t){xe();var n=e.$options[t],r=t+" hook";if(n)for(var o=0,a=n.length;o<a;o++)it(n[o],e,null,e,r);e._hasHookEvent&&e.$emit("hook:"+t),we()}var $n=[],Nn=[],Rn={},Pn={},Fn=!1,Bn=!1,Un=0;var In=0,Mn=Date.now;if(Z&&!Q){var Hn=window.performance;Hn&&"function"==typeof Hn.now&&Mn()>document.createEvent("Event").timeStamp&&(Mn=function(){return Hn.now()})}function Vn(){var e,t;for(In=Mn(),Bn=!0,$n.sort((function(e,t){return e.id-t.id})),Un=0;Un<$n.length;Un++)if((e=$n[Un]).before&&e.before(),t=e.id,Rn[t]=null,e.run(),null!=Rn[t]&&(Pn[t]=(Pn[t]||0)+1,Pn[t]>100)){pe("You may have an infinite update loop "+(e.user?'in watcher with expression "'+e.expression+'"':"in a component render function."),e.vm);break}var n=Nn.slice(),r=$n.slice();Un=$n.length=Nn.length=0,Rn={},Pn={},Fn=Bn=!1,function(e){for(var t=0;t<e.length;t++)e[t]._inactive=!0,qn(e[t],!0)}(n),function(e){var t=e.length;for(;t--;){var n=e[t],r=n.vm;r._watcher===n&&r._isMounted&&!r._isDestroyed&&Tn(r,"updated")}}(r),le&&M.devtools&&le.emit("flush")}var zn=0,Wn=function(e,t,n,r,o){this.vm=e,o&&(e._watcher=this),e._watchers.push(this),r?(this.deep=!!r.deep,this.user=!!r.user,this.lazy=!!r.lazy,this.sync=!!r.sync,this.before=r.before):this.deep=this.user=this.lazy=this.sync=!1,this.cb=n,this.id=++zn,this.active=!0,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new ue,this.newDepIds=new ue,this.expression=t.toString(),"function"==typeof t?this.getter=t:(this.getter=function(e){if(!W.test(e)){var t=e.split(".");return function(e){for(var n=0;n<t.length;n++){if(!e)return;e=e[t[n]]}return e}}}(t),this.getter||(this.getter=T,pe('Failed watching path: "'+t+'" Watcher only accepts simple dot-delimited paths. For full control, use a function instead.',e))),this.value=this.lazy?void 0:this.get()};Wn.prototype.get=function(){var e;xe(this);var t=this.vm;try{e=this.getter.call(t,t)}catch(e){if(!this.user)throw e;at(e,t,'getter for watcher "'+this.expression+'"')}finally{this.deep&&Lt(e),we(),this.cleanupDeps()}return e},Wn.prototype.addDep=function(e){var t=e.id;this.newDepIds.has(t)||(this.newDepIds.add(t),this.newDeps.push(e),this.depIds.has(t)||e.addSub(this))},Wn.prototype.cleanupDeps=function(){for(var e=this.deps.length;e--;){var t=this.deps[e];this.newDepIds.has(t.id)||t.removeSub(this)}var n=this.depIds;this.depIds=this.newDepIds,this.newDepIds=n,this.newDepIds.clear(),n=this.deps,this.deps=this.newDeps,this.newDeps=n,this.newDeps.length=0},Wn.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():function(e){var t=e.id;if(null==Rn[t]){if(Rn[t]=!0,Bn){for(var n=$n.length-1;n>Un&&$n[n].id>e.id;)n--;$n.splice(n+1,0,e)}else $n.push(e);if(!Fn){if(Fn=!0,!M.async)return void Vn();yt(Vn)}}}(this)},Wn.prototype.run=function(){if(this.active){var e=this.get();if(e!==this.value||l(e)||this.deep){var t=this.value;if(this.value=e,this.user){var n='callback for watcher "'+this.expression+'"';it(this.cb,this.vm,[e,t],this.vm,n)}else this.cb.call(this.vm,e,t)}}},Wn.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},Wn.prototype.depend=function(){for(var e=this.deps.length;e--;)this.deps[e].depend()},Wn.prototype.teardown=function(){if(this.active){this.vm._isBeingDestroyed||_(this.vm._watchers,this);for(var e=this.deps.length;e--;)this.deps[e].removeSub(this);this.active=!1}};var Gn={enumerable:!0,configurable:!0,get:T,set:T};function Yn(e,t,n){Gn.get=function(){return this[t][n]},Gn.set=function(e){this[t][n]=e},Object.defineProperty(e,n,Gn)}function Zn(e){e._watchers=[];var t=e.$options;t.props&&function(e,t){var n=e.$options.propsData||{},r=e._props={},o=e.$options._propKeys=[],a=!e.$parent;a||De(!1);var i=function(i){o.push(i);var s=Ze(i,t,n,e),l=S(i);(y(l)||M.isReservedAttr(l))&&pe('"'+l+'" is a reserved attribute and cannot be used as component prop.',e),Ne(r,i,s,(function(){a||Sn||pe("Avoid mutating a prop directly since the value will be overwritten whenever the parent component re-renders. Instead, use a data or computed property based on the prop's value. Prop being mutated: \""+i+'"',e)})),i in e||Yn(e,"_props",i)};for(var s in t)i(s);De(!0)}(e,t.props),t.methods&&function(e,t){var n=e.$options.props;for(var r in t)"function"!=typeof t[r]&&pe('Method "'+r+'" has type "'+typeof t[r]+'" in the component definition. Did you reference the function correctly?',e),n&&w(n,r)&&pe('Method "'+r+'" has already been defined as a prop.',e),r in e&&V(r)&&pe('Method "'+r+'" conflicts with an existing Vue instance method. Avoid defining component methods that start with _ or $.'),e[r]="function"!=typeof t[r]?T:O(t[r],e)}(e,t.methods),t.data?function(e){var t=e.$options.data;d(t=e._data="function"==typeof t?function(e,t){xe();try{return e.call(t,t)}catch(e){return at(e,t,"data()"),{}}finally{we()}}(t,e):t||{})||(t={},pe("data functions should return an object:\nhttps://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function",e));var n=Object.keys(t),r=e.$options.props,o=e.$options.methods,a=n.length;for(;a--;){var i=n[a];o&&w(o,i)&&pe('Method "'+i+'" has already been defined as a data property.',e),r&&w(r,i)?pe('The data property "'+i+'" is already declared as a prop. Use prop default value instead.',e):V(i)||Yn(e,"_data",i)}$e(t,!0)}(e):$e(e._data={},!0),t.computed&&function(e,t){var n=e._computedWatchers=Object.create(null),r=se();for(var o in t){var a=t[o],i="function"==typeof a?a:a.get;null==i&&pe('Getter is missing for computed property "'+o+'".',e),r||(n[o]=new Wn(e,i||T,T,Jn)),o in e?o in e.$data?pe('The computed property "'+o+'" is already defined in data.',e):e.$options.props&&o in e.$options.props?pe('The computed property "'+o+'" is already defined as a prop.',e):e.$options.methods&&o in e.$options.methods&&pe('The computed property "'+o+'" is already defined as a method.',e):Kn(e,o,a)}}(e,t.computed),t.watch&&t.watch!==oe&&function(e,t){for(var n in t){var r=t[n];if(Array.isArray(r))for(var o=0;o<r.length;o++)er(e,n,r[o]);else er(e,n,r)}}(e,t.watch)}var Jn={lazy:!0};function Kn(e,t,n){var r=!se();"function"==typeof n?(Gn.get=r?Xn(t):Qn(n),Gn.set=T):(Gn.get=n.get?r&&!1!==n.cache?Xn(t):Qn(n.get):T,Gn.set=n.set||T),Gn.set===T&&(Gn.set=function(){pe('Computed property "'+t+'" was assigned to but it has no setter.',this)}),Object.defineProperty(e,t,Gn)}function Xn(e){return function(){var t=this._computedWatchers&&this._computedWatchers[e];if(t)return t.dirty&&t.evaluate(),ye.target&&t.depend(),t.value}}function Qn(e){return function(){return e.call(this,this)}}function er(e,t,n,r){return d(n)&&(r=n,n=n.handler),"string"==typeof n&&(n=e[n]),e.$watch(t,n,r)}var tr=0;function nr(e){var t=e.options;if(e.super){var n=nr(e.super);if(n!==e.superOptions){e.superOptions=n;var r=function(e){var t,n=e.options,r=e.sealedOptions;for(var o in n)n[o]!==r[o]&&(t||(t={}),t[o]=n[o]);return t}(e);r&&q(e.extendOptions,r),(t=e.options=Ge(n,e.extendOptions)).name&&(t.components[t.name]=e)}}return t}function rr(e){this instanceof rr||pe("Vue is a constructor and should be called with the `new` keyword"),this._init(e)}function or(e){e.cid=0;var t=1;e.extend=function(e){e=e||{};var n=this,r=n.cid,o=e._Ctor||(e._Ctor={});if(o[r])return o[r];var a=e.name||n.options.name;a&&ze(a);var i=function(e){this._init(e)};return(i.prototype=Object.create(n.prototype)).constructor=i,i.cid=t++,i.options=Ge(n.options,e),i.super=n,i.options.props&&function(e){var t=e.options.props;for(var n in t)Yn(e.prototype,"_props",n)}(i),i.options.computed&&function(e){var t=e.options.computed;for(var n in t)Kn(e.prototype,n,t[n])}(i),i.extend=n.extend,i.mixin=n.mixin,i.use=n.use,U.forEach((function(e){i[e]=n[e]})),a&&(i.options.components[a]=i),i.superOptions=n.options,i.extendOptions=e,i.sealedOptions=q({},i.options),o[r]=i,i}}function ar(e){return e&&(e.Ctor.options.name||e.tag)}function ir(e,t){return Array.isArray(e)?e.indexOf(t)>-1:"string"==typeof e?e.split(",").indexOf(t)>-1:!!p(e)&&e.test(t)}function sr(e,t){var n=e.cache,r=e.keys,o=e._vnode;for(var a in n){var i=n[a];if(i){var s=i.name;s&&!t(s)&&lr(n,a,r,o)}}}function lr(e,t,n,r){var o=e[t];!o||r&&o.tag===r.tag||o.componentInstance.$destroy(),e[t]=null,_(n,t)}!function(e){e.prototype._init=function(e){var t,n,o=this;o._uid=tr++,M.performance&&Et&&(t="vue-perf-start:"+o._uid,n="vue-perf-end:"+o._uid,Et(t)),o._isVue=!0,e&&e._isComponent?function(e,t){var n=e.$options=Object.create(e.constructor.options),r=t._parentVnode;n.parent=t.parent,n._parentVnode=r;var o=r.componentOptions;n.propsData=o.propsData,n._parentListeners=o.listeners,n._renderChildren=o.children,n._componentTag=o.tag,t.render&&(n.render=t.render,n.staticRenderFns=t.staticRenderFns)}(o,e):o.$options=Ge(nr(o.constructor),e||{},o),ut(o),o._self=o,function(e){var t=e.$options,n=t.parent;if(n&&!t.abstract){for(;n.$options.abstract&&n.$parent;)n=n.$parent;n.$children.push(e)}e.$parent=n,e.$root=n?n.$root:e,e.$children=[],e.$refs={},e._watcher=null,e._inactive=null,e._directInactive=!1,e._isMounted=!1,e._isDestroyed=!1,e._isBeingDestroyed=!1}(o),function(e){e._events=Object.create(null),e._hasHookEvent=!1;var t=e.$options._parentListeners;t&&jn(e,t)}(o),function(e){e._vnode=null,e._staticTrees=null;var t=e.$options,n=e.$vnode=t._parentVnode,o=n&&n.context;e.$slots=Mt(t._renderChildren,o),e.$scopedSlots=r,e._c=function(t,n,r,o){return hn(e,t,n,r,o,!1)},e.$createElement=function(t,n,r,o){return hn(e,t,n,r,o,!0)};var a=n&&n.data;Ne(e,"$attrs",a&&a.attrs||r,(function(){!Sn&&pe("$attrs is readonly.",e)}),!0),Ne(e,"$listeners",t._parentListeners||r,(function(){!Sn&&pe("$listeners is readonly.",e)}),!0)}(o),Tn(o,"beforeCreate"),function(e){var t=It(e.$options.inject,e);t&&(De(!1),Object.keys(t).forEach((function(n){Ne(e,n,t[n],(function(){pe('Avoid mutating an injected value directly since the changes will be overwritten whenever the provided component re-renders. injection being mutated: "'+n+'"',e)}))})),De(!0))}(o),Zn(o),function(e){var t=e.$options.provide;t&&(e._provided="function"==typeof t?t.call(e):t)}(o),Tn(o,"created"),M.performance&&Et&&(o._name=me(o,!1),Et(n),St("vue "+o._name+" init",t,n)),o.$options.el&&o.$mount(o.$options.el)}}(rr),function(e){var t={get:function(){return this._data}},n={get:function(){return this._props}};t.set=function(){pe("Avoid replacing instance root $data. Use nested data properties instead.",this)},n.set=function(){pe("$props is readonly.",this)},Object.defineProperty(e.prototype,"$data",t),Object.defineProperty(e.prototype,"$props",n),e.prototype.$set=Re,e.prototype.$delete=Pe,e.prototype.$watch=function(e,t,n){var r=this;if(d(t))return er(r,e,t,n);(n=n||{}).user=!0;var o=new Wn(r,e,t,n);if(n.immediate){var a='callback for immediate watcher "'+o.expression+'"';xe(),it(t,r,[o.value],r,a),we()}return function(){o.teardown()}}}(rr),function(e){var t=/^hook:/;e.prototype.$on=function(e,n){var r=this;if(Array.isArray(e))for(var o=0,a=e.length;o<a;o++)r.$on(e[o],n);else(r._events[e]||(r._events[e]=[])).push(n),t.test(e)&&(r._hasHookEvent=!0);return r},e.prototype.$once=function(e,t){var n=this;function r(){n.$off(e,r),t.apply(n,arguments)}return r.fn=t,n.$on(e,r),n},e.prototype.$off=function(e,t){var n=this;if(!arguments.length)return n._events=Object.create(null),n;if(Array.isArray(e)){for(var r=0,o=e.length;r<o;r++)n.$off(e[r],t);return n}var a,i=n._events[e];if(!i)return n;if(!t)return n._events[e]=null,n;for(var s=i.length;s--;)if((a=i[s])===t||a.fn===t){i.splice(s,1);break}return n},e.prototype.$emit=function(e){var t=this,n=e.toLowerCase();n!==e&&t._events[n]&&fe('Event "'+n+'" is emitted in component '+me(t)+' but the handler is registered for "'+e+'". Note that HTML attributes are case-insensitive and you cannot use v-on to listen to camelCase events when using in-DOM templates. You should probably use "'+S(e)+'" instead of "'+e+'".');var r=t._events[e];if(r){r=r.length>1?L(r):r;for(var o=L(arguments,1),a='event handler for "'+e+'"',i=0,s=r.length;i<s;i++)it(r[i],t,o,t,a)}return t}}(rr),function(e){e.prototype._update=function(e,t){var n=this,r=n.$el,o=n._vnode,a=On(n);n._vnode=e,n.$el=o?n.__patch__(o,e):n.__patch__(n.$el,e,t,!1),a(),r&&(r.__vue__=null),n.$el&&(n.$el.__vue__=n),n.$vnode&&n.$parent&&n.$vnode===n.$parent._vnode&&(n.$parent.$el=n.$el)},e.prototype.$forceUpdate=function(){this._watcher&&this._watcher.update()},e.prototype.$destroy=function(){var e=this;if(!e._isBeingDestroyed){Tn(e,"beforeDestroy"),e._isBeingDestroyed=!0;var t=e.$parent;!t||t._isBeingDestroyed||e.$options.abstract||_(t.$children,e),e._watcher&&e._watcher.teardown();for(var n=e._watchers.length;n--;)e._watchers[n].teardown();e._data.__ob__&&e._data.__ob__.vmCount--,e._isDestroyed=!0,e.__patch__(e._vnode,null),Tn(e,"destroyed"),e.$off(),e.$el&&(e.$el.__vue__=null),e.$vnode&&(e.$vnode.parent=null)}}}(rr),function(e){cn(e.prototype),e.prototype.$nextTick=function(e){return yt(e,this)},e.prototype._render=function(){var e,t=this,n=t.$options,r=n.render,o=n._parentVnode;o&&(t.$scopedSlots=zt(o.data.scopedSlots,t.$slots,t.$scopedSlots)),t.$vnode=o;try{_n=t,e=r.call(t._renderProxy,t.$createElement)}catch(n){if(at(n,t,"render"),t.$options.renderError)try{e=t.$options.renderError.call(t._renderProxy,t.$createElement,n)}catch(n){at(n,t,"renderError"),e=t._vnode}else e=t._vnode}finally{_n=null}return Array.isArray(e)&&1===e.length&&(e=e[0]),e instanceof Ae||(Array.isArray(e)&&pe("Multiple root nodes returned from render function. Render function should return a single root node.",t),e=ke()),e.parent=o,e}}(rr);var cr=[String,RegExp,Array],ur={name:"keep-alive",abstract:!0,props:{include:cr,exclude:cr,max:[String,Number]},methods:{cacheVNode:function(){var e=this,t=e.cache,n=e.keys,r=e.vnodeToCache,o=e.keyToCache;if(r){var a=r.tag,i=r.componentInstance,s=r.componentOptions;t[o]={name:ar(s),tag:a,componentInstance:i},n.push(o),this.max&&n.length>parseInt(this.max)&&lr(t,n[0],n,this._vnode),this.vnodeToCache=null}}},created:function(){this.cache=Object.create(null),this.keys=[]},destroyed:function(){for(var e in this.cache)lr(this.cache,e,this.keys)},mounted:function(){var e=this;this.cacheVNode(),this.$watch("include",(function(t){sr(e,(function(e){return ir(t,e)}))})),this.$watch("exclude",(function(t){sr(e,(function(e){return!ir(t,e)}))}))},updated:function(){this.cacheVNode()},render:function(){var e=this.$slots.default,t=wn(e),n=t&&t.componentOptions;if(n){var r=ar(n),o=this.include,a=this.exclude;if(o&&(!r||!ir(o,r))||a&&r&&ir(a,r))return t;var i=this.cache,s=this.keys,l=null==t.key?n.Ctor.cid+(n.tag?"::"+n.tag:""):t.key;i[l]?(t.componentInstance=i[l].componentInstance,_(s,l),s.push(l)):(this.vnodeToCache=t,this.keyToCache=l),t.data.keepAlive=!0}return t||e&&e[0]}},dr={KeepAlive:ur};!function(e){var t={get:function(){return M},set:function(){pe("Do not replace the Vue.config object, set individual fields instead.")}};Object.defineProperty(e,"config",t),e.util={warn:pe,extend:q,mergeOptions:Ge,defineReactive:Ne},e.set=Re,e.delete=Pe,e.nextTick=yt,e.observable=function(e){return $e(e),e},e.options=Object.create(null),U.forEach((function(t){e.options[t+"s"]=Object.create(null)})),e.options._base=e,q(e.options.components,dr),function(e){e.use=function(e){var t=this._installedPlugins||(this._installedPlugins=[]);if(t.indexOf(e)>-1)return this;var n=L(arguments,1);return n.unshift(this),"function"==typeof e.install?e.install.apply(e,n):"function"==typeof e&&e.apply(null,n),t.push(e),this}}(e),function(e){e.mixin=function(e){return this.options=Ge(this.options,e),this}}(e),or(e),function(e){U.forEach((function(t){e[t]=function(e,n){return n?("component"===t&&ze(e),"component"===t&&d(n)&&(n.name=n.name||e,n=this.options._base.extend(n)),"directive"===t&&"function"==typeof n&&(n={bind:n,update:n}),this.options[t+"s"][e]=n,n):this.options[t+"s"][e]}}))}(e)}(rr),Object.defineProperty(rr.prototype,"$isServer",{get:se}),Object.defineProperty(rr.prototype,"$ssrContext",{get:function(){return this.$vnode&&this.$vnode.ssrContext}}),Object.defineProperty(rr,"FunctionalRenderContext",{value:un}),rr.version="2.6.14";var pr=h("style,class"),fr=h("input,textarea,option,select,progress"),vr=h("contenteditable,draggable,spellcheck"),mr=h("events,caret,typing,plaintext-only"),gr=h("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,truespeed,typemustmatch,visible"),hr="http://www.w3.org/1999/xlink",br=function(e){return":"===e.charAt(5)&&"xlink"===e.slice(0,5)},yr=function(e){return br(e)?e.slice(6,e.length):""},_r=function(e){return null==e||!1===e};function xr(e){for(var t=e.data,n=e,r=e;a(r.componentInstance);)(r=r.componentInstance._vnode)&&r.data&&(t=wr(r.data,t));for(;a(n=n.parent);)n&&n.data&&(t=wr(t,n.data));return function(e,t){if(a(e)||a(t))return Ar(e,Cr(t));return""}(t.staticClass,t.class)}function wr(e,t){return{staticClass:Ar(e.staticClass,t.staticClass),class:a(e.class)?[e.class,t.class]:t.class}}function Ar(e,t){return e?t?e+" "+t:e:t||""}function Cr(e){return Array.isArray(e)?function(e){for(var t,n="",r=0,o=e.length;r<o;r++)a(t=Cr(e[r]))&&""!==t&&(n&&(n+=" "),n+=t);return n}(e):l(e)?function(e){var t="";for(var n in e)e[n]&&(t&&(t+=" "),t+=n);return t}(e):"string"==typeof e?e:""}var kr={svg:"http://www.w3.org/2000/svg",math:"http://www.w3.org/1998/Math/MathML"},jr=h("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot"),Er=h("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignobject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view",!0),Sr=function(e){return jr(e)||Er(e)};var Or=Object.create(null);var Lr=h("text,number,password,search,email,tel,url");var qr=Object.freeze({createElement:function(e,t){var n=document.createElement(e);return"select"!==e||t.data&&t.data.attrs&&void 0!==t.data.attrs.multiple&&n.setAttribute("multiple","multiple"),n},createElementNS:function(e,t){return document.createElementNS(kr[e],t)},createTextNode:function(e){return document.createTextNode(e)},createComment:function(e){return document.createComment(e)},insertBefore:function(e,t,n){e.insertBefore(t,n)},removeChild:function(e,t){e.removeChild(t)},appendChild:function(e,t){e.appendChild(t)},parentNode:function(e){return e.parentNode},nextSibling:function(e){return e.nextSibling},tagName:function(e){return e.tagName},setTextContent:function(e,t){e.textContent=t},setStyleScope:function(e,t){e.setAttribute(t,"")}}),Dr={create:function(e,t){Tr(t)},update:function(e,t){e.data.ref!==t.data.ref&&(Tr(e,!0),Tr(t))},destroy:function(e){Tr(e,!0)}};function Tr(e,t){var n=e.data.ref;if(a(n)){var r=e.context,o=e.componentInstance||e.elm,i=r.$refs;t?Array.isArray(i[n])?_(i[n],o):i[n]===o&&(i[n]=void 0):e.data.refInFor?Array.isArray(i[n])?i[n].indexOf(o)<0&&i[n].push(o):i[n]=[o]:i[n]=o}}var $r=new Ae("",{},[]),Nr=["create","activate","update","remove","destroy"];function Rr(e,t){return e.key===t.key&&e.asyncFactory===t.asyncFactory&&(e.tag===t.tag&&e.isComment===t.isComment&&a(e.data)===a(t.data)&&function(e,t){if("input"!==e.tag)return!0;var n,r=a(n=e.data)&&a(n=n.attrs)&&n.type,o=a(n=t.data)&&a(n=n.attrs)&&n.type;return r===o||Lr(r)&&Lr(o)}(e,t)||i(e.isAsyncPlaceholder)&&o(t.asyncFactory.error))}function Pr(e,t,n){var r,o,i={};for(r=t;r<=n;++r)a(o=e[r].key)&&(i[o]=r);return i}var Fr={create:Br,update:Br,destroy:function(e){Br(e,$r)}};function Br(e,t){(e.data.directives||t.data.directives)&&function(e,t){var n,r,o,a=e===$r,i=t===$r,s=Ir(e.data.directives,e.context),l=Ir(t.data.directives,t.context),c=[],u=[];for(n in l)r=s[n],o=l[n],r?(o.oldValue=r.value,o.oldArg=r.arg,Hr(o,"update",t,e),o.def&&o.def.componentUpdated&&u.push(o)):(Hr(o,"bind",t,e),o.def&&o.def.inserted&&c.push(o));if(c.length){var d=function(){for(var n=0;n<c.length;n++)Hr(c[n],"inserted",t,e)};a?Rt(t,"insert",d):d()}u.length&&Rt(t,"postpatch",(function(){for(var n=0;n<u.length;n++)Hr(u[n],"componentUpdated",t,e)}));if(!a)for(n in s)l[n]||Hr(s[n],"unbind",e,e,i)}(e,t)}var Ur=Object.create(null);function Ir(e,t){var n,r,o=Object.create(null);if(!e)return o;for(n=0;n<e.length;n++)(r=e[n]).modifiers||(r.modifiers=Ur),o[Mr(r)]=r,r.def=Ye(t.$options,"directives",r.name,!0);return o}function Mr(e){return e.rawName||e.name+"."+Object.keys(e.modifiers||{}).join(".")}function Hr(e,t,n,r,o){var a=e.def&&e.def[t];if(a)try{a(n.elm,e,n,r,o)}catch(r){at(r,n.context,"directive "+e.name+" "+t+" hook")}}var Vr=[Dr,Fr];function zr(e,t){var n=t.componentOptions;if(!(a(n)&&!1===n.Ctor.options.inheritAttrs||o(e.data.attrs)&&o(t.data.attrs))){var r,i,s=t.elm,l=e.data.attrs||{},c=t.data.attrs||{};for(r in a(c.__ob__)&&(c=t.data.attrs=q({},c)),c)i=c[r],l[r]!==i&&Wr(s,r,i,t.data.pre);for(r in(Q||te)&&c.value!==l.value&&Wr(s,"value",c.value),l)o(c[r])&&(br(r)?s.removeAttributeNS(hr,yr(r)):vr(r)||s.removeAttribute(r))}}function Wr(e,t,n,r){r||e.tagName.indexOf("-")>-1?Gr(e,t,n):gr(t)?_r(n)?e.removeAttribute(t):(n="allowfullscreen"===t&&"EMBED"===e.tagName?"true":t,e.setAttribute(t,n)):vr(t)?e.setAttribute(t,function(e,t){return _r(t)||"false"===t?"false":"contenteditable"===e&&mr(t)?t:"true"}(t,n)):br(t)?_r(n)?e.removeAttributeNS(hr,yr(t)):e.setAttributeNS(hr,t,n):Gr(e,t,n)}function Gr(e,t,n){if(_r(n))e.removeAttribute(t);else{if(Q&&!ee&&"TEXTAREA"===e.tagName&&"placeholder"===t&&""!==n&&!e.__ieph){var r=function(t){t.stopImmediatePropagation(),e.removeEventListener("input",r)};e.addEventListener("input",r),e.__ieph=!0}e.setAttribute(t,n)}}var Yr={create:zr,update:zr};function Zr(e,t){var n=t.elm,r=t.data,i=e.data;if(!(o(r.staticClass)&&o(r.class)&&(o(i)||o(i.staticClass)&&o(i.class)))){var s=xr(t),l=n._transitionClasses;a(l)&&(s=Ar(s,Cr(l))),s!==n._prevClass&&(n.setAttribute("class",s),n._prevClass=s)}}var Jr,Kr={create:Zr,update:Zr};function Xr(e,t,n){var r=Jr;return function o(){var a=t.apply(null,arguments);null!==a&&to(e,o,n,r)}}var Qr=dt&&!(re&&Number(re[1])<=53);function eo(e,t,n,r){if(Qr){var o=In,a=t;t=a._wrapper=function(e){if(e.target===e.currentTarget||e.timeStamp>=o||e.timeStamp<=0||e.target.ownerDocument!==document)return a.apply(this,arguments)}}Jr.addEventListener(e,t,ae?{capture:n,passive:r}:n)}function to(e,t,n,r){(r||Jr).removeEventListener(e,t._wrapper||t,n)}function no(e,t){if(!o(e.data.on)||!o(t.data.on)){var n=t.data.on||{},r=e.data.on||{};Jr=t.elm,function(e){if(a(e.__r)){var t=Q?"change":"input";e[t]=[].concat(e.__r,e[t]||[]),delete e.__r}a(e.__c)&&(e.change=[].concat(e.__c,e.change||[]),delete e.__c)}(n),Nt(n,r,eo,to,Xr,t.context),Jr=void 0}}var ro,oo={create:no,update:no};function ao(e,t){if(!o(e.data.domProps)||!o(t.data.domProps)){var n,r,i=t.elm,s=e.data.domProps||{},l=t.data.domProps||{};for(n in a(l.__ob__)&&(l=t.data.domProps=q({},l)),s)n in l||(i[n]="");for(n in l){if(r=l[n],"textContent"===n||"innerHTML"===n){if(t.children&&(t.children.length=0),r===s[n])continue;1===i.childNodes.length&&i.removeChild(i.childNodes[0])}if("value"===n&&"PROGRESS"!==i.tagName){i._value=r;var c=o(r)?"":String(r);io(i,c)&&(i.value=c)}else if("innerHTML"===n&&Er(i.tagName)&&o(i.innerHTML)){(ro=ro||document.createElement("div")).innerHTML="<svg>"+r+"</svg>";for(var u=ro.firstChild;i.firstChild;)i.removeChild(i.firstChild);for(;u.firstChild;)i.appendChild(u.firstChild)}else if(r!==s[n])try{i[n]=r}catch(e){}}}}function io(e,t){return!e.composing&&("OPTION"===e.tagName||function(e,t){var n=!0;try{n=document.activeElement!==e}catch(e){}return n&&e.value!==t}(e,t)||function(e,t){var n=e.value,r=e._vModifiers;if(a(r)){if(r.number)return g(n)!==g(t);if(r.trim)return n.trim()!==t.trim()}return n!==t}(e,t))}var so={create:ao,update:ao},lo=A((function(e){var t={},n=/:(.+)/;return e.split(/;(?![^(]*\))/g).forEach((function(e){if(e){var r=e.split(n);r.length>1&&(t[r[0].trim()]=r[1].trim())}})),t}));function co(e){var t=uo(e.style);return e.staticStyle?q(e.staticStyle,t):t}function uo(e){return Array.isArray(e)?D(e):"string"==typeof e?lo(e):e}var po,fo=/^--/,vo=/\s*!important$/,mo=function(e,t,n){if(fo.test(t))e.style.setProperty(t,n);else if(vo.test(n))e.style.setProperty(S(t),n.replace(vo,""),"important");else{var r=ho(t);if(Array.isArray(n))for(var o=0,a=n.length;o<a;o++)e.style[r]=n[o];else e.style[r]=n}},go=["Webkit","Moz","ms"],ho=A((function(e){if(po=po||document.createElement("div").style,"filter"!==(e=k(e))&&e in po)return e;for(var t=e.charAt(0).toUpperCase()+e.slice(1),n=0;n<go.length;n++){var r=go[n]+t;if(r in po)return r}}));function bo(e,t){var n=t.data,r=e.data;if(!(o(n.staticStyle)&&o(n.style)&&o(r.staticStyle)&&o(r.style))){var i,s,l=t.elm,c=r.staticStyle,u=r.normalizedStyle||r.style||{},d=c||u,p=uo(t.data.style)||{};t.data.normalizedStyle=a(p.__ob__)?q({},p):p;var f=function(e,t){var n,r={};if(t)for(var o=e;o.componentInstance;)(o=o.componentInstance._vnode)&&o.data&&(n=co(o.data))&&q(r,n);(n=co(e.data))&&q(r,n);for(var a=e;a=a.parent;)a.data&&(n=co(a.data))&&q(r,n);return r}(t,!0);for(s in d)o(f[s])&&mo(l,s,"");for(s in f)(i=f[s])!==d[s]&&mo(l,s,null==i?"":i)}}var yo={create:bo,update:bo},_o=/\s+/;function xo(e,t){if(t&&(t=t.trim()))if(e.classList)t.indexOf(" ")>-1?t.split(_o).forEach((function(t){return e.classList.add(t)})):e.classList.add(t);else{var n=" "+(e.getAttribute("class")||"")+" ";n.indexOf(" "+t+" ")<0&&e.setAttribute("class",(n+t).trim())}}function wo(e,t){if(t&&(t=t.trim()))if(e.classList)t.indexOf(" ")>-1?t.split(_o).forEach((function(t){return e.classList.remove(t)})):e.classList.remove(t),e.classList.length||e.removeAttribute("class");else{for(var n=" "+(e.getAttribute("class")||"")+" ",r=" "+t+" ";n.indexOf(r)>=0;)n=n.replace(r," ");(n=n.trim())?e.setAttribute("class",n):e.removeAttribute("class")}}function Ao(e){if(e){if("object"==typeof e){var t={};return!1!==e.css&&q(t,Co(e.name||"v")),q(t,e),t}return"string"==typeof e?Co(e):void 0}}var Co=A((function(e){return{enterClass:e+"-enter",enterToClass:e+"-enter-to",enterActiveClass:e+"-enter-active",leaveClass:e+"-leave",leaveToClass:e+"-leave-to",leaveActiveClass:e+"-leave-active"}})),ko=Z&&!ee,jo="transition",Eo="animation",So="transition",Oo="transitionend",Lo="animation",qo="animationend";ko&&(void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend&&(So="WebkitTransition",Oo="webkitTransitionEnd"),void 0===window.onanimationend&&void 0!==window.onwebkitanimationend&&(Lo="WebkitAnimation",qo="webkitAnimationEnd"));var Do=Z?window.requestAnimationFrame?window.requestAnimationFrame.bind(window):setTimeout:function(e){return e()};function To(e){Do((function(){Do(e)}))}function $o(e,t){var n=e._transitionClasses||(e._transitionClasses=[]);n.indexOf(t)<0&&(n.push(t),xo(e,t))}function No(e,t){e._transitionClasses&&_(e._transitionClasses,t),wo(e,t)}function Ro(e,t,n){var r=Fo(e,t),o=r.type,a=r.timeout,i=r.propCount;if(!o)return n();var s=o===jo?Oo:qo,l=0,c=function(){e.removeEventListener(s,u),n()},u=function(t){t.target===e&&++l>=i&&c()};setTimeout((function(){l<i&&c()}),a+1),e.addEventListener(s,u)}var Po=/\b(transform|all)(,|$)/;function Fo(e,t){var n,r=window.getComputedStyle(e),o=(r[So+"Delay"]||"").split(", "),a=(r[So+"Duration"]||"").split(", "),i=Bo(o,a),s=(r[Lo+"Delay"]||"").split(", "),l=(r[Lo+"Duration"]||"").split(", "),c=Bo(s,l),u=0,d=0;return t===jo?i>0&&(n=jo,u=i,d=a.length):t===Eo?c>0&&(n=Eo,u=c,d=l.length):d=(n=(u=Math.max(i,c))>0?i>c?jo:Eo:null)?n===jo?a.length:l.length:0,{type:n,timeout:u,propCount:d,hasTransform:n===jo&&Po.test(r[So+"Property"])}}function Bo(e,t){for(;e.length<t.length;)e=e.concat(e);return Math.max.apply(null,t.map((function(t,n){return Uo(t)+Uo(e[n])})))}function Uo(e){return 1e3*Number(e.slice(0,-1).replace(",","."))}function Io(e,t){var n=e.elm;a(n._leaveCb)&&(n._leaveCb.cancelled=!0,n._leaveCb());var r=Ao(e.data.transition);if(!o(r)&&!a(n._enterCb)&&1===n.nodeType){for(var i=r.css,s=r.type,c=r.enterClass,u=r.enterToClass,d=r.enterActiveClass,p=r.appearClass,f=r.appearToClass,v=r.appearActiveClass,m=r.beforeEnter,h=r.enter,b=r.afterEnter,y=r.enterCancelled,_=r.beforeAppear,x=r.appear,w=r.afterAppear,A=r.appearCancelled,C=r.duration,k=En,j=En.$vnode;j&&j.parent;)k=j.context,j=j.parent;var E=!k._isMounted||!e.isRootInsert;if(!E||x||""===x){var S=E&&p?p:c,O=E&&v?v:d,L=E&&f?f:u,q=E&&_||m,D=E&&"function"==typeof x?x:h,T=E&&w||b,$=E&&A||y,N=g(l(C)?C.enter:C);null!=N&&Ho(N,"enter",e);var R=!1!==i&&!ee,P=zo(D),B=n._enterCb=F((function(){R&&(No(n,L),No(n,O)),B.cancelled?(R&&No(n,S),$&&$(n)):T&&T(n),n._enterCb=null}));e.data.show||Rt(e,"insert",(function(){var t=n.parentNode,r=t&&t._pending&&t._pending[e.key];r&&r.tag===e.tag&&r.elm._leaveCb&&r.elm._leaveCb(),D&&D(n,B)})),q&&q(n),R&&($o(n,S),$o(n,O),To((function(){No(n,S),B.cancelled||($o(n,L),P||(Vo(N)?setTimeout(B,N):Ro(n,s,B)))}))),e.data.show&&(t&&t(),D&&D(n,B)),R||P||B()}}}function Mo(e,t){var n=e.elm;a(n._enterCb)&&(n._enterCb.cancelled=!0,n._enterCb());var r=Ao(e.data.transition);if(o(r)||1!==n.nodeType)return t();if(!a(n._leaveCb)){var i=r.css,s=r.type,c=r.leaveClass,u=r.leaveToClass,d=r.leaveActiveClass,p=r.beforeLeave,f=r.leave,v=r.afterLeave,m=r.leaveCancelled,h=r.delayLeave,b=r.duration,y=!1!==i&&!ee,_=zo(f),x=g(l(b)?b.leave:b);a(x)&&Ho(x,"leave",e);var w=n._leaveCb=F((function(){n.parentNode&&n.parentNode._pending&&(n.parentNode._pending[e.key]=null),y&&(No(n,u),No(n,d)),w.cancelled?(y&&No(n,c),m&&m(n)):(t(),v&&v(n)),n._leaveCb=null}));h?h(A):A()}function A(){w.cancelled||(!e.data.show&&n.parentNode&&((n.parentNode._pending||(n.parentNode._pending={}))[e.key]=e),p&&p(n),y&&($o(n,c),$o(n,d),To((function(){No(n,c),w.cancelled||($o(n,u),_||(Vo(x)?setTimeout(w,x):Ro(n,s,w)))}))),f&&f(n,w),y||_||w())}}function Ho(e,t,n){"number"!=typeof e?pe("<transition> explicit "+t+" duration is not a valid number - got "+JSON.stringify(e)+".",n.context):isNaN(e)&&pe("<transition> explicit "+t+" duration is NaN - the duration expression might be incorrect.",n.context)}function Vo(e){return"number"==typeof e&&!isNaN(e)}function zo(e){if(o(e))return!1;var t=e.fns;return a(t)?zo(Array.isArray(t)?t[0]:t):(e._length||e.length)>1}function Wo(e,t){!0!==t.data.show&&Io(t)}var Go=function(e){var t,n,r={},l=e.modules,c=e.nodeOps;for(t=0;t<Nr.length;++t)for(r[Nr[t]]=[],n=0;n<l.length;++n)a(l[n][Nr[t]])&&r[Nr[t]].push(l[n][Nr[t]]);function u(e){var t=c.parentNode(e);a(t)&&c.removeChild(t,e)}function d(e,t){return!t&&!e.ns&&!(M.ignoredElements.length&&M.ignoredElements.some((function(t){return p(t)?t.test(e.tag):t===e.tag})))&&M.isUnknownElement(e.tag)}var f=0;function v(e,t,n,o,s,l,u){if(a(e.elm)&&a(l)&&(e=l[u]=Ee(e)),e.isRootInsert=!s,!function(e,t,n,o){var s=e.data;if(a(s)){var l=a(e.componentInstance)&&s.keepAlive;if(a(s=s.hook)&&a(s=s.init)&&s(e,!1),a(e.componentInstance))return m(e,t),g(n,e.elm,o),i(l)&&function(e,t,n,o){var i,s=e;for(;s.componentInstance;)if(a(i=(s=s.componentInstance._vnode).data)&&a(i=i.transition)){for(i=0;i<r.activate.length;++i)r.activate[i]($r,s);t.push(s);break}g(n,e.elm,o)}(e,t,n,o),!0}}(e,t,n,o)){var p=e.data,v=e.children,h=e.tag;a(h)?(p&&p.pre&&f++,d(e,f)&&pe("Unknown custom element: <"+h+'> - did you register the component correctly? For recursive components, make sure to provide the "name" option.',e.context),e.elm=e.ns?c.createElementNS(e.ns,h):c.createElement(h,e),x(e),b(e,v,t),a(p)&&_(e,t),g(n,e.elm,o),p&&p.pre&&f--):i(e.isComment)?(e.elm=c.createComment(e.text),g(n,e.elm,o)):(e.elm=c.createTextNode(e.text),g(n,e.elm,o))}}function m(e,t){a(e.data.pendingInsert)&&(t.push.apply(t,e.data.pendingInsert),e.data.pendingInsert=null),e.elm=e.componentInstance.$el,y(e)?(_(e,t),x(e)):(Tr(e),t.push(e))}function g(e,t,n){a(e)&&(a(n)?c.parentNode(n)===e&&c.insertBefore(e,t,n):c.appendChild(e,t))}function b(e,t,n){if(Array.isArray(t)){j(t);for(var r=0;r<t.length;++r)v(t[r],n,e.elm,null,!0,t,r)}else s(e.text)&&c.appendChild(e.elm,c.createTextNode(String(e.text)))}function y(e){for(;e.componentInstance;)e=e.componentInstance._vnode;return a(e.tag)}function _(e,n){for(var o=0;o<r.create.length;++o)r.create[o]($r,e);a(t=e.data.hook)&&(a(t.create)&&t.create($r,e),a(t.insert)&&n.push(e))}function x(e){var t;if(a(t=e.fnScopeId))c.setStyleScope(e.elm,t);else for(var n=e;n;)a(t=n.context)&&a(t=t.$options._scopeId)&&c.setStyleScope(e.elm,t),n=n.parent;a(t=En)&&t!==e.context&&t!==e.fnContext&&a(t=t.$options._scopeId)&&c.setStyleScope(e.elm,t)}function w(e,t,n,r,o,a){for(;r<=o;++r)v(n[r],a,e,t,!1,n,r)}function A(e){var t,n,o=e.data;if(a(o))for(a(t=o.hook)&&a(t=t.destroy)&&t(e),t=0;t<r.destroy.length;++t)r.destroy[t](e);if(a(t=e.children))for(n=0;n<e.children.length;++n)A(e.children[n])}function C(e,t,n){for(;t<=n;++t){var r=e[t];a(r)&&(a(r.tag)?(k(r),A(r)):u(r.elm))}}function k(e,t){if(a(t)||a(e.data)){var n,o=r.remove.length+1;for(a(t)?t.listeners+=o:t=function(e,t){function n(){0==--n.listeners&&u(e)}return n.listeners=t,n}(e.elm,o),a(n=e.componentInstance)&&a(n=n._vnode)&&a(n.data)&&k(n,t),n=0;n<r.remove.length;++n)r.remove[n](e,t);a(n=e.data.hook)&&a(n=n.remove)?n(e,t):t()}else u(e.elm)}function j(e){for(var t={},n=0;n<e.length;n++){var r=e[n],o=r.key;a(o)&&(t[o]?pe("Duplicate keys detected: '"+o+"'. This may cause an update error.",r.context):t[o]=!0)}}function E(e,t,n,r){for(var o=n;o<r;o++){var i=t[o];if(a(i)&&Rr(e,i))return o}}function S(e,t,n,s,l,u){if(e!==t){a(t.elm)&&a(s)&&(t=s[l]=Ee(t));var d=t.elm=e.elm;if(i(e.isAsyncPlaceholder))a(t.asyncFactory.resolved)?D(e.elm,t,n):t.isAsyncPlaceholder=!0;else if(i(t.isStatic)&&i(e.isStatic)&&t.key===e.key&&(i(t.isCloned)||i(t.isOnce)))t.componentInstance=e.componentInstance;else{var p,f=t.data;a(f)&&a(p=f.hook)&&a(p=p.prepatch)&&p(e,t);var m=e.children,g=t.children;if(a(f)&&y(t)){for(p=0;p<r.update.length;++p)r.update[p](e,t);a(p=f.hook)&&a(p=p.update)&&p(e,t)}o(t.text)?a(m)&&a(g)?m!==g&&function(e,t,n,r,i){var s,l,u,d=0,p=0,f=t.length-1,m=t[0],g=t[f],h=n.length-1,b=n[0],y=n[h],_=!i;for(j(n);d<=f&&p<=h;)o(m)?m=t[++d]:o(g)?g=t[--f]:Rr(m,b)?(S(m,b,r,n,p),m=t[++d],b=n[++p]):Rr(g,y)?(S(g,y,r,n,h),g=t[--f],y=n[--h]):Rr(m,y)?(S(m,y,r,n,h),_&&c.insertBefore(e,m.elm,c.nextSibling(g.elm)),m=t[++d],y=n[--h]):Rr(g,b)?(S(g,b,r,n,p),_&&c.insertBefore(e,g.elm,m.elm),g=t[--f],b=n[++p]):(o(s)&&(s=Pr(t,d,f)),o(l=a(b.key)?s[b.key]:E(b,t,d,f))?v(b,r,e,m.elm,!1,n,p):Rr(u=t[l],b)?(S(u,b,r,n,p),t[l]=void 0,_&&c.insertBefore(e,u.elm,m.elm)):v(b,r,e,m.elm,!1,n,p),b=n[++p]);d>f?w(e,o(n[h+1])?null:n[h+1].elm,n,p,h,r):p>h&&C(t,d,f)}(d,m,g,n,u):a(g)?(j(g),a(e.text)&&c.setTextContent(d,""),w(d,null,g,0,g.length-1,n)):a(m)?C(m,0,m.length-1):a(e.text)&&c.setTextContent(d,""):e.text!==t.text&&c.setTextContent(d,t.text),a(f)&&a(p=f.hook)&&a(p=p.postpatch)&&p(e,t)}}}function O(e,t,n){if(i(n)&&a(e.parent))e.parent.data.pendingInsert=t;else for(var r=0;r<t.length;++r)t[r].data.hook.insert(t[r])}var L=!1,q=h("attrs,class,staticClass,staticStyle,key");function D(e,t,n,r){var o,s=t.tag,l=t.data,c=t.children;if(r=r||l&&l.pre,t.elm=e,i(t.isComment)&&a(t.asyncFactory))return t.isAsyncPlaceholder=!0,!0;if(!function(e,t,n){return a(t.tag)?0===t.tag.indexOf("vue-component")||!d(t,n)&&t.tag.toLowerCase()===(e.tagName&&e.tagName.toLowerCase()):e.nodeType===(t.isComment?8:3)}(e,t,r))return!1;if(a(l)&&(a(o=l.hook)&&a(o=o.init)&&o(t,!0),a(o=t.componentInstance)))return m(t,n),!0;if(a(s)){if(a(c))if(e.hasChildNodes())if(a(o=l)&&a(o=o.domProps)&&a(o=o.innerHTML)){if(o!==e.innerHTML)return"undefined"==typeof console||L||(L=!0,console.warn("Parent: ",e),console.warn("server innerHTML: ",o),console.warn("client innerHTML: ",e.innerHTML)),!1}else{for(var u=!0,p=e.firstChild,f=0;f<c.length;f++){if(!p||!D(p,c[f],n,r)){u=!1;break}p=p.nextSibling}if(!u||p)return"undefined"==typeof console||L||(L=!0,console.warn("Parent: ",e),console.warn("Mismatching childNodes vs. VNodes: ",e.childNodes,c)),!1}else b(t,c,n);if(a(l)){var v=!1;for(var g in l)if(!q(g)){v=!0,_(t,n);break}!v&&l.class&&Lt(l.class)}}else e.data!==t.text&&(e.data=t.text);return!0}return function(e,t,n,s){if(!o(t)){var l,u=!1,d=[];if(o(e))u=!0,v(t,d);else{var p=a(e.nodeType);if(!p&&Rr(e,t))S(e,t,d,null,null,s);else{if(p){if(1===e.nodeType&&e.hasAttribute(B)&&(e.removeAttribute(B),n=!0),i(n)){if(D(e,t,d))return O(t,d,!0),e;pe("The client-side rendered virtual DOM tree is not matching server-rendered content. This is likely caused by incorrect HTML markup, for example nesting block-level elements inside <p>, or missing <tbody>. Bailing hydration and performing full client-side render.")}l=e,e=new Ae(c.tagName(l).toLowerCase(),{},[],void 0,l)}var f=e.elm,m=c.parentNode(f);if(v(t,d,f._leaveCb?null:m,c.nextSibling(f)),a(t.parent))for(var g=t.parent,h=y(t);g;){for(var b=0;b<r.destroy.length;++b)r.destroy[b](g);if(g.elm=t.elm,h){for(var _=0;_<r.create.length;++_)r.create[_]($r,g);var x=g.data.hook.insert;if(x.merged)for(var w=1;w<x.fns.length;w++)x.fns[w]()}else Tr(g);g=g.parent}a(m)?C([e],0,0):a(e.tag)&&A(e)}}return O(t,d,u),t.elm}a(e)&&A(e)}}({nodeOps:qr,modules:[Yr,Kr,oo,so,yo,Z?{create:Wo,activate:Wo,remove:function(e,t){!0!==e.data.show?Mo(e,t):t()}}:{}].concat(Vr)});ee&&document.addEventListener("selectionchange",(function(){var e=document.activeElement;e&&e.vmodel&&ta(e,"input")}));var Yo={inserted:function(e,t,n,r){"select"===n.tag?(r.elm&&!r.elm._vOptions?Rt(n,"postpatch",(function(){Yo.componentUpdated(e,t,n)})):Zo(e,t,n.context),e._vOptions=[].map.call(e.options,Xo)):("textarea"===n.tag||Lr(e.type))&&(e._vModifiers=t.modifiers,t.modifiers.lazy||(e.addEventListener("compositionstart",Qo),e.addEventListener("compositionend",ea),e.addEventListener("change",ea),ee&&(e.vmodel=!0)))},componentUpdated:function(e,t,n){if("select"===n.tag){Zo(e,t,n.context);var r=e._vOptions,o=e._vOptions=[].map.call(e.options,Xo);if(o.some((function(e,t){return!R(e,r[t])})))(e.multiple?t.value.some((function(e){return Ko(e,o)})):t.value!==t.oldValue&&Ko(t.value,o))&&ta(e,"change")}}};function Zo(e,t,n){Jo(e,t,n),(Q||te)&&setTimeout((function(){Jo(e,t,n)}),0)}function Jo(e,t,n){var r=t.value,o=e.multiple;if(!o||Array.isArray(r)){for(var a,i,s=0,l=e.options.length;s<l;s++)if(i=e.options[s],o)a=P(r,Xo(i))>-1,i.selected!==a&&(i.selected=a);else if(R(Xo(i),r))return void(e.selectedIndex!==s&&(e.selectedIndex=s));o||(e.selectedIndex=-1)}else pe('<select multiple v-model="'+t.expression+'"> expects an Array value for its binding, but got '+Object.prototype.toString.call(r).slice(8,-1),n)}function Ko(e,t){return t.every((function(t){return!R(t,e)}))}function Xo(e){return"_value"in e?e._value:e.value}function Qo(e){e.target.composing=!0}function ea(e){e.target.composing&&(e.target.composing=!1,ta(e.target,"input"))}function ta(e,t){var n=document.createEvent("HTMLEvents");n.initEvent(t,!0,!0),e.dispatchEvent(n)}function na(e){return!e.componentInstance||e.data&&e.data.transition?e:na(e.componentInstance._vnode)}var ra={bind:function(e,t,n){var r=t.value,o=(n=na(n)).data&&n.data.transition,a=e.__vOriginalDisplay="none"===e.style.display?"":e.style.display;r&&o?(n.data.show=!0,Io(n,(function(){e.style.display=a}))):e.style.display=r?a:"none"},update:function(e,t,n){var r=t.value;!r!=!t.oldValue&&((n=na(n)).data&&n.data.transition?(n.data.show=!0,r?Io(n,(function(){e.style.display=e.__vOriginalDisplay})):Mo(n,(function(){e.style.display="none"}))):e.style.display=r?e.__vOriginalDisplay:"none")},unbind:function(e,t,n,r,o){o||(e.style.display=e.__vOriginalDisplay)}},oa={model:Yo,show:ra},aa={name:String,appear:Boolean,css:Boolean,mode:String,type:String,enterClass:String,leaveClass:String,enterToClass:String,leaveToClass:String,enterActiveClass:String,leaveActiveClass:String,appearClass:String,appearActiveClass:String,appearToClass:String,duration:[Number,String,Object]};function ia(e){var t=e&&e.componentOptions;return t&&t.Ctor.options.abstract?ia(wn(t.children)):e}function sa(e){var t={},n=e.$options;for(var r in n.propsData)t[r]=e[r];var o=n._parentListeners;for(var a in o)t[k(a)]=o[a];return t}function la(e,t){if(/\d-keep-alive$/.test(t.tag))return e("keep-alive",{props:t.componentOptions.propsData})}var ca=function(e){return e.tag||Vt(e)},ua=function(e){return"show"===e.name},da={name:"transition",props:aa,abstract:!0,render:function(e){var t=this,n=this.$slots.default;if(n&&(n=n.filter(ca)).length){n.length>1&&pe("<transition> can only be used on a single element. Use <transition-group> for lists.",this.$parent);var r=this.mode;r&&"in-out"!==r&&"out-in"!==r&&pe("invalid <transition> mode: "+r,this.$parent);var o=n[0];if(function(e){for(;e=e.parent;)if(e.data.transition)return!0}(this.$vnode))return o;var a=ia(o);if(!a)return o;if(this._leaving)return la(e,o);var i="__transition-"+this._uid+"-";a.key=null==a.key?a.isComment?i+"comment":i+a.tag:s(a.key)?0===String(a.key).indexOf(i)?a.key:i+a.key:a.key;var l=(a.data||(a.data={})).transition=sa(this),c=this._vnode,u=ia(c);if(a.data.directives&&a.data.directives.some(ua)&&(a.data.show=!0),u&&u.data&&!function(e,t){return t.key===e.key&&t.tag===e.tag}(a,u)&&!Vt(u)&&(!u.componentInstance||!u.componentInstance._vnode.isComment)){var d=u.data.transition=q({},l);if("out-in"===r)return this._leaving=!0,Rt(d,"afterLeave",(function(){t._leaving=!1,t.$forceUpdate()})),la(e,o);if("in-out"===r){if(Vt(a))return c;var p,f=function(){p()};Rt(l,"afterEnter",f),Rt(l,"enterCancelled",f),Rt(d,"delayLeave",(function(e){p=e}))}}return o}}},pa=q({tag:String,moveClass:String},aa);delete pa.mode;var fa={props:pa,beforeMount:function(){var e=this,t=this._update;this._update=function(n,r){var o=On(e);e.__patch__(e._vnode,e.kept,!1,!0),e._vnode=e.kept,o(),t.call(e,n,r)}},render:function(e){for(var t=this.tag||this.$vnode.data.tag||"span",n=Object.create(null),r=this.prevChildren=this.children,o=this.$slots.default||[],a=this.children=[],i=sa(this),s=0;s<o.length;s++){var l=o[s];if(l.tag)if(null!=l.key&&0!==String(l.key).indexOf("__vlist"))a.push(l),n[l.key]=l,(l.data||(l.data={})).transition=i;else{var c=l.componentOptions,u=c?c.Ctor.options.name||c.tag||"":l.tag;pe("<transition-group> children must be keyed: <"+u+">")}}if(r){for(var d=[],p=[],f=0;f<r.length;f++){var v=r[f];v.data.transition=i,v.data.pos=v.elm.getBoundingClientRect(),n[v.key]?d.push(v):p.push(v)}this.kept=e(t,null,d),this.removed=p}return e(t,null,a)},updated:function(){var e=this.prevChildren,t=this.moveClass||(this.name||"v")+"-move";e.length&&this.hasMove(e[0].elm,t)&&(e.forEach(va),e.forEach(ma),e.forEach(ga),this._reflow=document.body.offsetHeight,e.forEach((function(e){if(e.data.moved){var n=e.elm,r=n.style;$o(n,t),r.transform=r.WebkitTransform=r.transitionDuration="",n.addEventListener(Oo,n._moveCb=function e(r){r&&r.target!==n||r&&!/transform$/.test(r.propertyName)||(n.removeEventListener(Oo,e),n._moveCb=null,No(n,t))})}})))},methods:{hasMove:function(e,t){if(!ko)return!1;if(this._hasMove)return this._hasMove;var n=e.cloneNode();e._transitionClasses&&e._transitionClasses.forEach((function(e){wo(n,e)})),xo(n,t),n.style.display="none",this.$el.appendChild(n);var r=Fo(n);return this.$el.removeChild(n),this._hasMove=r.hasTransform}}};function va(e){e.elm._moveCb&&e.elm._moveCb(),e.elm._enterCb&&e.elm._enterCb()}function ma(e){e.data.newPos=e.elm.getBoundingClientRect()}function ga(e){var t=e.data.pos,n=e.data.newPos,r=t.left-n.left,o=t.top-n.top;if(r||o){e.data.moved=!0;var a=e.elm.style;a.transform=a.WebkitTransform="translate("+r+"px,"+o+"px)",a.transitionDuration="0s"}}var ha={Transition:da,TransitionGroup:fa};rr.config.mustUseProp=function(e,t,n){return"value"===n&&fr(e)&&"button"!==t||"selected"===n&&"option"===e||"checked"===n&&"input"===e||"muted"===n&&"video"===e},rr.config.isReservedTag=Sr,rr.config.isReservedAttr=pr,rr.config.getTagNamespace=function(e){return Er(e)?"svg":"math"===e?"math":void 0},rr.config.isUnknownElement=function(e){if(!Z)return!0;if(Sr(e))return!1;if(e=e.toLowerCase(),null!=Or[e])return Or[e];var t=document.createElement(e);return e.indexOf("-")>-1?Or[e]=t.constructor===window.HTMLUnknownElement||t.constructor===window.HTMLElement:Or[e]=/HTMLUnknownElement/.test(t.toString())},q(rr.options.directives,oa),q(rr.options.components,ha),rr.prototype.__patch__=Z?Go:T,rr.prototype.$mount=function(e,t){return function(e,t,n){var r;return e.$el=t,e.$options.render||(e.$options.render=ke,e.$options.template&&"#"!==e.$options.template.charAt(0)||e.$options.el||t?pe("You are using the runtime-only build of Vue where the template compiler is not available. Either pre-compile the templates into render functions, or use the compiler-included build.",e):pe("Failed to mount component: template or render function not defined.",e)),Tn(e,"beforeMount"),r=M.performance&&Et?function(){var t=e._name,r=e._uid,o="vue-perf-start:"+r,a="vue-perf-end:"+r;Et(o);var i=e._render();Et(a),St("vue "+t+" render",o,a),Et(o),e._update(i,n),Et(a),St("vue "+t+" patch",o,a)}:function(){e._update(e._render(),n)},new Wn(e,r,T,{before:function(){e._isMounted&&!e._isDestroyed&&Tn(e,"beforeUpdate")}},!0),n=!1,null==e.$vnode&&(e._isMounted=!0,Tn(e,"mounted")),e}(this,e=e&&Z?function(e){if("string"==typeof e){return document.querySelector(e)||(pe("Cannot find element: "+e),document.createElement("div"))}return e}(e):void 0,t)},Z&&setTimeout((function(){M.devtools&&(le?le.emit("init",rr):console[console.info?"info":"log"]("Download the Vue Devtools extension for a better development experience:\nhttps://github.com/vuejs/vue-devtools")),!1!==M.productionTip&&"undefined"!=typeof console&&console[console.info?"info":"log"]("You are running Vue in development mode.\nMake sure to turn on production mode when deploying for production.\nSee more tips at https://vuejs.org/guide/deployment.html")}),0),t.default=rr},"../node_modules/webpack-dev-server/client/clients/WebSocketClient.js":function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return a}});var r=n("../node_modules/webpack-dev-server/client/utils/log.js");function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var a=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.client=new WebSocket(t),this.client.onerror=function(e){r.log.error(e)}}var t,n,a;return t=e,(n=[{key:"onOpen",value:function(e){this.client.onopen=e}},{key:"onClose",value:function(e){this.client.onclose=e}},{key:"onMessage",value:function(e){this.client.onmessage=function(t){e(t.data)}}}])&&o(t.prototype,n),a&&o(t,a),Object.defineProperty(t,"prototype",{writable:!1}),e}()},"../node_modules/webpack-dev-server/client/modules/logger/index.js":function(e,t){!function(){"use strict";var e={"./client-src/modules/logger/SyncBailHookFake.js":function(e){e.exports=function(){return{call:function(){}}}},"./node_modules/webpack/lib/logging/Logger.js":function(e,t){function n(e){return function(e){if(Array.isArray(e))return r(e)}(e)||function(e){if(void 0!==("undefined"!=typeof Symbol?Symbol:function(e){return e})&&null!=e[("undefined"!=typeof Symbol?Symbol:function(e){return e}).iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return r(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return r(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function r(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var a=Object.freeze({error:"error",warn:"warn",info:"info",log:"log",debug:"debug",trace:"trace",group:"group",groupCollapsed:"groupCollapsed",groupEnd:"groupEnd",profile:"profile",profileEnd:"profileEnd",time:"time",clear:"clear",status:"status"});t.LogType=a;var i=("undefined"!=typeof Symbol?Symbol:function(e){return e})("webpack logger raw log method"),s=("undefined"!=typeof Symbol?Symbol:function(e){return e})("webpack logger times"),l=("undefined"!=typeof Symbol?Symbol:function(e){return e})("webpack logger aggregated times"),c=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this[i]=t,this.getChildLogger=n}var t,r,c;return t=e,r=[{key:"error",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];this[i](a.error,t)}},{key:"warn",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];this[i](a.warn,t)}},{key:"info",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];this[i](a.info,t)}},{key:"log",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];this[i](a.log,t)}},{key:"debug",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];this[i](a.debug,t)}},{key:"assert",value:function(e){if(!e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];this[i](a.error,n)}}},{key:"trace",value:function(){this[i](a.trace,["Trace"])}},{key:"clear",value:function(){this[i](a.clear)}},{key:"status",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];this[i](a.status,t)}},{key:"group",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];this[i](a.group,t)}},{key:"groupCollapsed",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];this[i](a.groupCollapsed,t)}},{key:"groupEnd",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];this[i](a.groupEnd,t)}},{key:"profile",value:function(e){this[i](a.profile,[e])}},{key:"profileEnd",value:function(e){this[i](a.profileEnd,[e])}},{key:"time",value:function(e){this[s]=this[s]||new Map,this[s].set(e,process.hrtime())}},{key:"timeLog",value:function(e){var t=this[s]&&this[s].get(e);if(!t)throw new Error("No such label '".concat(e,"' for WebpackLogger.timeLog()"));var r=process.hrtime(t);this[i](a.time,[e].concat(n(r)))}},{key:"timeEnd",value:function(e){var t=this[s]&&this[s].get(e);if(!t)throw new Error("No such label '".concat(e,"' for WebpackLogger.timeEnd()"));var r=process.hrtime(t);this[s].delete(e),this[i](a.time,[e].concat(n(r)))}},{key:"timeAggregate",value:function(e){var t=this[s]&&this[s].get(e);if(!t)throw new Error("No such label '".concat(e,"' for WebpackLogger.timeAggregate()"));var n=process.hrtime(t);this[s].delete(e),this[l]=this[l]||new Map;var r=this[l].get(e);void 0!==r&&(n[1]+r[1]>1e9?(n[0]+=r[0]+1,n[1]=n[1]-1e9+r[1]):(n[0]+=r[0],n[1]+=r[1])),this[l].set(e,n)}},{key:"timeAggregateEnd",value:function(e){if(void 0!==this[l]){var t=this[l].get(e);void 0!==t&&(this[l].delete(e),this[i](a.time,[e].concat(n(t))))}}}],r&&o(t.prototype,r),c&&o(t,c),Object.defineProperty(t,"prototype",{writable:!1}),e}();t.Logger=c},"./node_modules/webpack/lib/logging/createConsoleLogger.js":function(e,t,n){function r(e){return function(e){if(Array.isArray(e))return o(e)}(e)||function(e){if(void 0!==("undefined"!=typeof Symbol?Symbol:function(e){return e})&&null!=e[("undefined"!=typeof Symbol?Symbol:function(e){return e}).iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return o(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return o(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function o(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var a=n("./node_modules/webpack/lib/logging/Logger.js").LogType,i=function(e){if("string"==typeof e){var t=new RegExp("[\\\\/]".concat(e.replace(/[-[\]{}()*+?.\\^$|]/g,"\\$&"),"([\\\\/]|$|!|\\?)"));return function(e){return t.test(e)}}return e&&"object"==typeof e&&"function"==typeof e.test?function(t){return e.test(t)}:"function"==typeof e?e:"boolean"==typeof e?function(){return e}:void 0},s={none:6,false:6,error:5,warn:4,info:3,log:2,true:2,verbose:1};e.exports=function(e){var t=e.level,n=void 0===t?"info":t,o=e.debug,l=void 0!==o&&o,c=e.console,u="boolean"==typeof l?[function(){return l}]:[].concat(l).map(i),d=s["".concat(n)]||0;return function(e,t,n){var o=function(){return Array.isArray(n)?n.length>0&&"string"==typeof n[0]?["[".concat(e,"] ").concat(n[0])].concat(r(n.slice(1))):["[".concat(e,"]")].concat(r(n)):[]},i=u.some((function(t){return t(e)}));switch(t){case a.debug:if(!i)return;"function"==typeof c.debug?c.debug.apply(c,r(o())):c.log.apply(c,r(o()));break;case a.log:if(!i&&d>s.log)return;c.log.apply(c,r(o()));break;case a.info:if(!i&&d>s.info)return;c.info.apply(c,r(o()));break;case a.warn:if(!i&&d>s.warn)return;c.warn.apply(c,r(o()));break;case a.error:if(!i&&d>s.error)return;c.error.apply(c,r(o()));break;case a.trace:if(!i)return;c.trace();break;case a.groupCollapsed:if(!i&&d>s.log)return;if(!i&&d>s.verbose){"function"==typeof c.groupCollapsed?c.groupCollapsed.apply(c,r(o())):c.log.apply(c,r(o()));break}case a.group:if(!i&&d>s.log)return;"function"==typeof c.group?c.group.apply(c,r(o())):c.log.apply(c,r(o()));break;case a.groupEnd:if(!i&&d>s.log)return;"function"==typeof c.groupEnd&&c.groupEnd();break;case a.time:if(!i&&d>s.log)return;var l=1e3*n[1]+n[2]/1e6,p="[".concat(e,"] ").concat(n[0],": ").concat(l," ms");"function"==typeof c.logTime?c.logTime(p):c.log(p);break;case a.profile:"function"==typeof c.profile&&c.profile.apply(c,r(o()));break;case a.profileEnd:"function"==typeof c.profileEnd&&c.profileEnd.apply(c,r(o()));break;case a.clear:if(!i&&d>s.log)return;"function"==typeof c.clear&&c.clear();break;case a.status:if(!i&&d>s.info)return;"function"==typeof c.status?0===n.length?c.status():c.status.apply(c,r(o())):0!==n.length&&c.info.apply(c,r(o()));break;default:throw new Error("Unexpected LogType ".concat(t))}}}},"./node_modules/webpack/lib/logging/runtime.js":function(e,t,n){function r(){return r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},r.apply(this,arguments)}var o=n("./client-src/modules/logger/SyncBailHookFake.js"),a=n("./node_modules/webpack/lib/logging/Logger.js").Logger,i=n("./node_modules/webpack/lib/logging/createConsoleLogger.js"),s={level:"info",debug:!1,console:console},l=i(s);t.getLogger=function(e){return new a((function(n,r){void 0===t.hooks.log.call(e,n,r)&&l(e,n,r)}),(function(n){return t.getLogger("".concat(e,"/").concat(n))}))},t.configureDefaultLogger=function(e){r(s,e),l=i(s)},t.hooks={log:new o(["origin","type","args"])}}},n={};function r(t){var o=n[t];if(void 0!==o)return o.exports;var a=n[t]={exports:{}};return e[t](a,a.exports,r),a.exports}r.d=function(e,t){for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var o={};!function(){r.r(o),r.d(o,{default:function(){return e}});var e=r("./node_modules/webpack/lib/logging/runtime.js")}();var a=t;for(var i in o)a[i]=o[i];o.__esModule&&Object.defineProperty(a,"__esModule",{value:!0})}()},"../node_modules/webpack-dev-server/client/modules/strip-ansi/index.js":function(e,t){!function(){"use strict";var e={"./node_modules/strip-ansi/index.js":function(e,t,n){n.r(t),n.d(t,{default:function(){return o}});var r=n("./node_modules/strip-ansi/node_modules/ansi-regex/index.js");function o(e){if("string"!=typeof e)throw new TypeError("Expected a `string`, got `".concat(typeof e,"`"));return e.replace((0,r.default)(),"")}},"./node_modules/strip-ansi/node_modules/ansi-regex/index.js":function(e,t,n){function r(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.onlyFirst,n=void 0!==t&&t,r=["[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)","(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-ntqry=><~]))"].join("|");return new RegExp(r,n?void 0:"g")}n.r(t),n.d(t,{default:function(){return r}})}},n={};function r(t){var o=n[t];if(void 0!==o)return o.exports;var a=n[t]={exports:{}};return e[t](a,a.exports,r),a.exports}r.d=function(e,t){for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var o={};!function(){r.r(o);var e=r("./node_modules/strip-ansi/index.js");o.default=e.default}();var a=t;for(var i in o)a[i]=o[i];o.__esModule&&Object.defineProperty(a,"__esModule",{value:!0})}()},"../node_modules/webpack-dev-server/client/overlay.js":function(e,t,n){"use strict";n.r(t),n.d(t,{formatProblem:function(){return p},hide:function(){return d},show:function(){return f}});var r,o,a=n("../node_modules/ansi-html-community/index.js"),i=n.n(a),s=n("../node_modules/html-entities/lib/index.js"),l={reset:["transparent","transparent"],black:"181818",red:"E36049",green:"B3CB74",yellow:"FFD080",blue:"7CAFC2",magenta:"7FACCA",cyan:"C3C2EF",lightgrey:"EBE7E3",darkgrey:"6D7891"},c=[];function u(e){o?e(o):(c.push(e),r||((r=document.createElement("iframe")).id="webpack-dev-server-client-overlay",r.src="about:blank",r.style.position="fixed",r.style.left=0,r.style.top=0,r.style.right=0,r.style.bottom=0,r.style.width="100vw",r.style.height="100vh",r.style.border="none",r.style.zIndex=9999999999,r.onload=function(){(o=r.contentDocument.createElement("div")).id="webpack-dev-server-client-overlay-div",o.style.position="fixed",o.style.boxSizing="border-box",o.style.left=0,o.style.top=0,o.style.right=0,o.style.bottom=0,o.style.width="100vw",o.style.height="100vh",o.style.backgroundColor="rgba(0, 0, 0, 0.85)",o.style.color="#E8E8E8",o.style.fontFamily="Menlo, Consolas, monospace",o.style.fontSize="large",o.style.padding="2rem",o.style.lineHeight="1.2",o.style.whiteSpace="pre-wrap",o.style.overflow="auto";var e=document.createElement("span");e.innerText="Compiled with problems:";var t=document.createElement("button");t.innerText="X",t.style.background="transparent",t.style.border="none",t.style.fontSize="20px",t.style.fontWeight="bold",t.style.color="white",t.style.cursor="pointer",t.style.cssFloat="right",t.style.styleFloat="right",t.addEventListener("click",(function(){d()})),o.appendChild(e),o.appendChild(t),o.appendChild(document.createElement("br")),o.appendChild(document.createElement("br")),r.contentDocument.body.appendChild(o),c.forEach((function(e){e(o)})),c=[],r.onload=null},document.body.appendChild(r)))}function d(){r&&(document.body.removeChild(r),r=null,o=null)}function p(e,t){var n="warning"===e?"WARNING":"ERROR",r="";if("string"==typeof t)r+=t;else{var o=t.file||"",a=t.moduleName?-1!==t.moduleName.indexOf("!")?"".concat(t.moduleName.replace(/^(\s|\S)*!/,"")," (").concat(t.moduleName,")"):"".concat(t.moduleName):"",i=t.loc;n+="".concat(a||o?" in ".concat(a?"".concat(a).concat(o?" (".concat(o,")"):""):o).concat(i?" ".concat(i):""):""),r+=t.message||""}return{header:n,body:r}}function f(e,t){u((function(){t.forEach((function(t){var n=document.createElement("div"),r=document.createElement("span"),a=p(e,t),c=a.header,u=a.body;r.innerText=c,r.style.color="#".concat(l.red);var d=i()((0,s.encode)(u)),f=document.createElement("div");f.innerHTML=d,n.appendChild(r),n.appendChild(document.createElement("br")),n.appendChild(document.createElement("br")),n.appendChild(f),n.appendChild(document.createElement("br")),n.appendChild(document.createElement("br")),o.appendChild(n)}))}))}i().setColors(l)},"../node_modules/webpack-dev-server/client/socket.js":function(e,t,n){"use strict";n.r(t);var r=n("../node_modules/webpack-dev-server/client/clients/WebSocketClient.js"),o=n("../node_modules/webpack-dev-server/client/utils/log.js"),a=n("../node_modules/webpack-dev-server/client/clients/WebSocketClient.js"),i=void 0!==a?void 0!==a.default?a.default:a:r.default,s=0,l=10,c=null,u=function(e,t,n){(c=new i(e)).onOpen((function(){s=0,void 0!==n&&(l=n)})),c.onClose((function(){if(0===s&&t.close(),c=null,s<l){var r=1e3*Math.pow(2,s)+100*Math.random();s+=1,o.log.info("Trying to reconnect..."),setTimeout((function(){u(e,t,n)}),r)}})),c.onMessage((function(e){var n=JSON.parse(e);t[n.type]&&t[n.type](n.data,n.params)}))};t.default=u},"../node_modules/webpack-dev-server/client/utils/createSocketURL.js":function(e,t,n){"use strict";n.r(t),t.default=function(e){var t=e.hostname,n="0.0.0.0"===t||"::"===t||"[::]"===t;n&&self.location.hostname&&0===self.location.protocol.indexOf("http")&&(t=self.location.hostname);var r=e.protocol||self.location.protocol;("auto:"===r||t&&n&&"https:"===self.location.protocol)&&(r=self.location.protocol),r=r.replace(/^(?:http|.+-extension|file)/i,"ws");var o="";e.username&&(o=e.username,e.password&&(o=o.concat(":",e.password)));var a=(t||self.location.hostname||"localhost").replace(/^\[(.*)\]$/,"$1"),i=e.port;i&&"0"!==i||(i=self.location.port);var s="/ws";return e.pathname&&!e.fromCurrentScript&&(s=e.pathname),function(e){var t=e.protocol||"";t&&":"!==t.substr(-1)&&(t+=":");var n=e.auth||"";n&&(n=(n=encodeURIComponent(n)).replace(/%3A/i,":"),n+="@");var r="";e.hostname&&(r=n+(-1===e.hostname.indexOf(":")?e.hostname:"[".concat(e.hostname,"]")),e.port&&(r+=":".concat(e.port)));var o=e.pathname||"";e.slashes?(r="//".concat(r||""),o&&"/"!==o.charAt(0)&&(o="/".concat(o))):r||(r="");var a=e.search||"";a&&"?"!==a.charAt(0)&&(a="?".concat(a));var i=e.hash||"";return i&&"#"!==i.charAt(0)&&(i="#".concat(i)),o=o.replace(/[?#]/g,(function(e){return encodeURIComponent(e)})),a=a.replace("#","%23"),"".concat(t).concat(r).concat(o).concat(a).concat(i)}({protocol:r,auth:o,hostname:a,port:i,pathname:s,slashes:!0})}},"../node_modules/webpack-dev-server/client/utils/getCurrentScriptSource.js":function(e,t,n){"use strict";n.r(t),t.default=function(){if(document.currentScript)return document.currentScript.getAttribute("src");var e=document.scripts||[],t=Array.prototype.filter.call(e,(function(e){return e.getAttribute("src")}));if(t.length>0)return t[t.length-1].getAttribute("src");throw new Error("[webpack-dev-server] Failed to get current script source.")}},"../node_modules/webpack-dev-server/client/utils/log.js":function(e,t,n){"use strict";n.r(t),n.d(t,{log:function(){return i},setLogLevel:function(){return a}});var r=n("../node_modules/webpack-dev-server/client/modules/logger/index.js"),o=n.n(r);function a(e){o().configureDefaultLogger({level:e})}a("info");var i=o().getLogger("webpack-dev-server")},"../node_modules/webpack-dev-server/client/utils/parseURL.js":function(e,t,n){"use strict";n.r(t);var r=n("../node_modules/webpack-dev-server/client/utils/getCurrentScriptSource.js");t.default=function(e){var t={};if("string"==typeof e&&""!==e)for(var n=e.substr(1).split("&"),o=0;o<n.length;o++){var a=n[o].split("=");t[a[0]]=decodeURIComponent(a[1])}else{var i,s=(0,r.default)();try{i=new URL(s,self.location.href)}catch(e){}i&&((t=i).fromCurrentScript=!0)}return t}},"../node_modules/webpack-dev-server/client/utils/reloadApp.js":function(e,t,n){"use strict";n.r(t);var r=n("../node_modules/webpack/hot/emitter.js"),o=n.n(r),a=n("../node_modules/webpack-dev-server/client/utils/log.js");t.default=function(e,t){var n=e.hot,r=e.liveReload;if(!t.isUnloading){var i=t.currentHash,s=t.previousHash;if(!(i.indexOf(s)>=0)){var l=self.location.search.toLowerCase(),c=-1===l.indexOf("webpack-dev-server-hot=false"),u=-1===l.indexOf("webpack-dev-server-live-reload=false");if(n&&c)a.log.info("App hot update..."),o().emit("webpackHotUpdate",t.currentHash),"undefined"!=typeof self&&self.window&&self.postMessage("webpackHotUpdate".concat(t.currentHash),"*");else if(r&&u)var d=self,p=self.setInterval((function(){("about:"!==d.location.protocol||(d=d.parent).parent===d)&&f(d,p)}))}}function f(e,t){clearInterval(t),a.log.info("App updated. Reloading..."),e.location.reload()}}},"../node_modules/webpack-dev-server/client/utils/sendMessage.js":function(e,t,n){"use strict";n.r(t),t.default=function(e,t){"undefined"==typeof self||"undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope||self.postMessage({type:"webpack".concat(e),data:t},"*")}},"../node_modules/webpack/hot/emitter.js":function(e,t,n){var r=n("../node_modules/events/events.js");e.exports=new r},"../node_modules/webpack/hot/log.js":function(e){var t="info";function n(){}function r(e){return"info"===t&&"info"===e||["info","warning"].indexOf(t)>=0&&"warning"===e||["info","warning","error"].indexOf(t)>=0&&"error"===e}function o(e){return function(t,n){r(t)&&e(n)}}e.exports=function(e,t){r(e)&&("info"===e?console.log(t):"warning"===e?console.warn(t):"error"===e&&console.error(t))};var a=console.group||n,i=console.groupCollapsed||n,s=console.groupEnd||n;e.exports.group=o(a),e.exports.groupCollapsed=o(i),e.exports.groupEnd=o(s),e.exports.setLogLevel=function(e){t=e},e.exports.formatError=function(e){var t=e.message,n=e.stack;return n?n.indexOf(t)<0?t+"\n"+n:n:t}},'data:image/svg+xml;utf8, <svg xmlns="http://www.w3.org/2000/svg" width="54" height="14" viewBox="0 0 54 14"><g fill="none" fillRule="evenodd" transform="translate%281 1%29"><circle cx="6" cy="6" r="6" fill="%23FF5F56" stroke="%23E0443E" strokeWidth=".5" /><circle cx="26" cy="6" r="6" fill="%23FFBD2E" stroke="%23DEA123" strokeWidth=".5" /><circle cx="46" cy="6" r="6" fill="%2327C93F" stroke="%231AAB29" strokeWidth=".5" /></g></svg>':function(e){"use strict";e.exports='data:image/svg+xml;utf8, <svg xmlns="http://www.w3.org/2000/svg" width="54" height="14" viewBox="0 0 54 14"><g fill="none" fillRule="evenodd" transform="translate%281 1%29"><circle cx="6" cy="6" r="6" fill="%23FF5F56" stroke="%23E0443E" strokeWidth=".5" /><circle cx="26" cy="6" r="6" fill="%23FFBD2E" stroke="%23DEA123" strokeWidth=".5" /><circle cx="46" cy="6" r="6" fill="%2327C93F" stroke="%231AAB29" strokeWidth=".5" /></g></svg>'}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var a=t[r]={id:r,loaded:!1,exports:{}};return e[r].call(a.exports,a,a.exports,n),a.loaded=!0,a.exports}n.m=e,n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,{a:t}),t},n.d=function(e,t){for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.h=function(){return"4fa838528fc867e4adc5"},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.hmd=function(e){return(e=Object.create(e)).children||(e.children=[]),Object.defineProperty(e,"exports",{enumerable:!0,set:function(){throw new Error("ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: "+e.id)}}),e},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.b=document.baseURI||self.location.href;var r={};return function(){"use strict";n.r({});var e=n("../node_modules/webpack/hot/log.js"),t=n.n(e),r=n("../node_modules/webpack-dev-server/client/modules/strip-ansi/index.js"),o=n.n(r),a=n("../node_modules/webpack-dev-server/client/utils/parseURL.js"),i=n("../node_modules/webpack-dev-server/client/socket.js"),s=n("../node_modules/webpack-dev-server/client/overlay.js"),l=n("../node_modules/webpack-dev-server/client/utils/log.js"),c=n("../node_modules/webpack-dev-server/client/utils/sendMessage.js"),u=n("../node_modules/webpack-dev-server/client/utils/reloadApp.js"),d=n("../node_modules/webpack-dev-server/client/utils/createSocketURL.js"),p={isUnloading:!1,currentHash:n.h()},f={hot:!1,liveReload:!1,progress:!1,overlay:!1},v=(0,a.default)("?protocol=ws%3A&hostname=0.0.0.0&port=8080&pathname=%2Fws&logging=none&reconnect=10");function m(e){t().setLogLevel("verbose"===e||"log"===e?"info":e),(0,l.setLogLevel)(e)}"true"===v.hot&&(f.hot=!0,l.log.info("Hot Module Replacement enabled.")),"true"===v["live-reload"]&&(f.liveReload=!0,l.log.info("Live Reloading enabled.")),v.logging&&(f.logging=v.logging),void 0!==v.reconnect&&(f.reconnect=Number(v.reconnect)),f.logging&&m(f.logging),self.addEventListener("beforeunload",(function(){p.isUnloading=!0}));var g={hot:function(){"false"!==v.hot&&(f.hot=!0,l.log.info("Hot Module Replacement enabled."))},liveReload:function(){"false"!==v["live-reload"]&&(f.liveReload=!0,l.log.info("Live Reloading enabled."))},invalid:function(){l.log.info("App updated. Recompiling..."),f.overlay&&(0,s.hide)(),(0,c.default)("Invalid")},hash:function(e){p.previousHash=p.currentHash,p.currentHash=e},logging:m,overlay:function(e){"undefined"!=typeof document&&(f.overlay=e)},reconnect:function(e){"false"!==v.reconnect&&(f.reconnect=e)},progress:function(e){f.progress=e},"progress-update":function(e){f.progress&&l.log.info("".concat(e.pluginName?"[".concat(e.pluginName,"] "):"").concat(e.percent,"% - ").concat(e.msg,".")),(0,c.default)("Progress",e)},"still-ok":function(){l.log.info("Nothing changed."),f.overlay&&(0,s.hide)(),(0,c.default)("StillOk")},ok:function(){(0,c.default)("Ok"),f.overlay&&(0,s.hide)(),(0,u.default)(f,p)},"content-changed":function(e){l.log.info("".concat(e?'"'.concat(e,'"'):"Content"," from static directory was changed. Reloading...")),self.location.reload()},"static-changed":function(e){l.log.info("".concat(e?'"'.concat(e,'"'):"Content"," from static directory was changed. Reloading...")),self.location.reload()},warnings:function(e,t){l.log.warn("Warnings while compiling.");var n=e.map((function(e){var t=(0,s.formatProblem)("warning",e),n=t.header,r=t.body;return"".concat(n,"\n").concat(o()(r))}));(0,c.default)("Warnings",n);for(var r=0;r<n.length;r++)l.log.warn(n[r]);("boolean"==typeof f.overlay?f.overlay:f.overlay&&f.overlay.warnings)&&(0,s.show)("warning",e),t&&t.preventReloading||(0,u.default)(f,p)},errors:function(e){l.log.error("Errors while compiling. Reload prevented.");var t=e.map((function(e){var t=(0,s.formatProblem)("error",e),n=t.header,r=t.body;return"".concat(n,"\n").concat(o()(r))}));(0,c.default)("Errors",t);for(var n=0;n<t.length;n++)l.log.error(t[n]);("boolean"==typeof f.overlay?f.overlay:f.overlay&&f.overlay.errors)&&(0,s.show)("error",e)},error:function(e){l.log.error(e)},close:function(){l.log.info("Disconnected!"),f.overlay&&(0,s.hide)(),(0,c.default)("Close")}},h=(0,d.default)(v);(0,i.default)(h,g,f.reconnect)}(),function(){"use strict";n.r(r);var e=n("../node_modules/vue/dist/vue.runtime.esm.js"),t=n("./App.vue");e.default.config.productionTip=!1,new e.default({render:function(e){return e(t.default)}}).$mount("#app")}(),r}()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxPQUFPLElBQUksUUFBUSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksT0FBTyxJQUFJLFFBQVEsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLE9BQU8sSUFBSSxRQUFRLElBQUksTUFBTSxJQUFJLE9BQU8sSUFBSSxNQUFNLElBQUksT0FBTyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksUUFBUSxJQUFJLFFBQVEsSUFBSSxRQUFRLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFlBQVksSUFBSSxTQUFTLElBQUksUUFBUSxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxPQUFPLElBQUksT0FBTyxJQUFJLE9BQU8sSUFBSSxZQUFZLElBQUksT0FBTyxJQUFJLFFBQVEsSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLFlBQVksSUFBSSxRQUFRLElBQUksUUFBUSxJQUFJLFFBQVEsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFlBQVksSUFBSSxTQUFTLElBQUksUUFBUSxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxPQUFPLElBQUksT0FBTyxJQUFJLE9BQU8sSUFBSSxZQUFZLElBQUksT0FBTyxJQUFJLFFBQVEsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFFBQVEsSUFBSSxZQUFZLElBQUksUUFBUSxJQUFJLFFBQVEsSUFBSSxRQUFRLElBQUksVUFBVSxJQUFJLGFBQWEsSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxZQUFZLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksT0FBTyxJQUFJLFNBQVMsSUFBSSxRQUFRLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxRQUFRLElBQUksUUFBUSxJQUFJLE9BQU8sSUFBSSxRQUFRLElBQUksUUFBUSxJQUFJLFFBQVEsSUFBSSxXQUFXLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksT0FBTyxJQUFJLFVBQVUsSUFBSSxPQUFPLElBQUksT0FBTyxJQUFJLFFBQVEsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFFBQVEsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxVQUFVLEtBQUt6QixXQUFXLENBQUMsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxRQUFRLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLFFBQVEsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFFBQVEsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksUUFBUSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxRQUFRLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFFBQVEsSUFBSSxPQUFPLElBQUksT0FBTyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksUUFBUSxJQUFJLFFBQVEsSUFBSSxRQUFRLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFlBQVksSUFBSSxTQUFTLElBQUksUUFBUSxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxPQUFPLElBQUksT0FBTyxJQUFJLE9BQU8sSUFBSSxZQUFZLElBQUksT0FBTyxJQUFJLFFBQVEsSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLFlBQVksSUFBSSxRQUFRLElBQUksUUFBUSxJQUFJLFFBQVEsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFlBQVksSUFBSSxTQUFTLElBQUksUUFBUSxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxPQUFPLElBQUksT0FBTyxJQUFJLE9BQU8sSUFBSSxZQUFZLElBQUksT0FBTyxJQUFJLFFBQVEsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFFBQVEsSUFBSSxZQUFZLElBQUksUUFBUSxJQUFJLFFBQVEsSUFBSSxRQUFRLElBQUksVUFBVSxJQUFJLGFBQWEsSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxZQUFZLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksT0FBTyxJQUFJLFNBQVMsSUFBSSxRQUFRLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxRQUFRLElBQUksUUFBUSxJQUFJLE9BQU8sSUFBSSxRQUFRLElBQUksUUFBUSxJQUFJLFFBQVEsSUFBSSxXQUFXLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksT0FBTyxJQUFJLFVBQVUsSUFBSSxPQUFPLElBQUksT0FBTyxJQUFJLFFBQVEsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFFBQVEsSUFBSSxXQUFX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QUksU0FBUyxJQUFJLFNBQVMsSUFBSSxNQUFNLElBQUksT0FBTyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxRQUFRLEtBQUssT0FBTyxJQUFJLFNBQVMsS0FBSyxpQkFBaUIsSUFBSSxxQkFBcUIsSUFBSSxxQkFBcUIsSUFBSSxtQkFBbUIsSUFBSSxnQkFBZ0IsSUFBSSxzQkFBc0IsSUFBSSxpQkFBaUIsSUFBSSxTQUFTLEtBQUssT0FBTyxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLFVBQVUsSUFBSSxRQUFRLElBQUksaUJBQWlCLElBQUksU0FBUyxJQUFJLG1CQUFtQixJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksaUJBQWlCLElBQUksY0FBYyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFFBQVEsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLE9BQU8sSUFBSSxVQUFVLElBQUksZUFBZSxJQUFJLFlBQVksSUFBSSxRQUFRLElBQUksYUFBYSxJQUFJLGlCQUFpQixJQUFJLG1CQUFtQixJQUFJLG1CQUFtQixJQUFJLFVBQVUsSUFBSSxTQUFTLEtBQUssU0FBUyxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFFBQVEsSUFBSSxRQUFRLEtBQUssU0FBUyxLQUFLLFNBQVMsS0FBSyxXQUFXLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxRQUFRLElBQUksUUFBUSxLQUFLLFNBQVMsS0FBSyxTQUFTLEtBQUssU0FBUyxJQUFJLE1BQU0sSUFBSSxPQUFPLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksZUFBZSxJQUFJLFNBQVMsSUFBSSxX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QUksZ0JBQWdCLElBQUksU0FBUyxLQUFLLFNBQVMsSUFBSSxXQUFXLElBQUksdUJBQXVCLElBQUksaUJBQWlCLElBQUksc0JBQXNCLElBQUksbUJBQW1CLElBQUksd0JBQXdCLElBQUksZ0JBQWdCLElBQUksU0FBUyxLQUFLLFNBQVMsSUFBSSxRQUFRLElBQUksV0FBVyxJQUFJLGdCQUFnQixJQUFJLGFBQWEsSUFBSSxrQkFBa0IsSUFBSSx1QkFBdUIsSUFBSSxrQkFBa0IsSUFBSSxhQUFhLElBQUksUUFBUSxJQUFJLFFBQVEsSUFBSSxhQUFhLElBQUksa0JBQWtCLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksUUFBUSxLQUFLLFFBQVEsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFFBQVEsSUFBSSxRQUFRLEtBQUssY0FBYyxJQUFJLFVBQVUsSUFBSSxlQUFlLEtBQUssY0FBYyxJQUFJLFVBQVUsSUFBSSxlQUFlLElBQUksbUJBQW1CLElBQUksZUFBZSxJQUFJLFNBQVMsS0FBSyxjQUFjLElBQUksU0FBUyxLQUFLLFdBQVcsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxhQUFhLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFFBQVEsSUFBSSxXQUFXLElBQUksUUFBUSxLQUFLLFVBQVUsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLGFBQWEsSUFBSSxlQUFlLElBQUksaUJBQWlCLElBQUkscUJBQXFCLElBQUksVUFBVSxJQUFJLGNBQWMsSUFBSSxVQUFVLElBQUksU0FBUyxLQUFLLFlBQVksSUFBSSxlQUFlLElBQUkscUJBQXFCLElBQUksZ0JBQWdCLElBQUksa0JBQWtCLElBQUksVUFBVSxJQUFJLGVBQWUsSUFBSSxZQUFZLElBQUksZ0JBQWdCLElBQUksbUJBQW1CLElBQUksb0JBQW9CLElBQUksU0FBUyxJQUFJLFlBQVksSUFBSSxVQUFVLElBQUksU0FBUyxLQUFLLFdBQVcsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksUUFBUSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksUUFBUSxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksZ0JBQWdCLElBQUksaUJBQWlCLElBQUksc0JBQXNCLElBQUksa0JBQWtCLElBQUksa0JBQWtCLElBQUksUUFBUSxLQUFLLFNBQVMsS0FBSyxTQUFTLEtBQUssV0FBVyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksUUFBUSxLQUFLLFNBQVMsS0FBSyxTQUFTLEtBQUssUUFBUSxLQUFLLE9BQU8sSUFBSSxTQUFTLEtBQUssU0FBUyxLQUFLLFNBQVMsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFFBQVEsSUFBSSxRQUFRLEtBQUssU0FBUyxLQUFLLFNBQVMsS0FBSyxTQUFTLElBQUksU0FBUyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxtQkFBbUIsSUFBSSxTQUFTLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxTQUFTLEtBQUssVUFBVSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksT0FBTyxJQUFJLFFBQVEsS0FBSyxRQUFRLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLE9BQU8sSUFBSSxRQUFRLEtBQUssVUFBVSxJQUFJLFdBQVcsSUFBSSxZQUFZLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLE9BQU8sSUFBSSxRQUFRLElBQUksUUFBUSxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksYUFBYSxJQUFJLFNBQVMsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksYUFBYSxJQUFJLGFBQWEsSUFBSSxhQUFhLElBQUksYUFBYSxJQUFJLGFBQWEsSUFBSSxhQUFhLElBQUksYUFBYSxJQUFJLGFBQWEsSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLGFBQWEsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFlBQVksSUFBSSxVQUFVLElBQUksU0FBUyxLQUFLLE9BQU8sSUFBSSxRQUFRLElBQUksV0FBVyxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFdBQVcsSUFBSSxhQUFhLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxTQUFTLEtBQUssUUFBUSxJQUFJLFVBQVUsSUFBSSxZQUFZLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLGFBQWEsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLGFBQWEsSUFBSSxnQkFBZ0IsSUFBSSxjQUFjLElBQUksWUFBWSxJQUFJLGNBQWMsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLGFBQWEsSUFBSSxTQUFTLElBQUksYUFBYSxJQUFJLFVBQVUsSUFBSSxRQUFRLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxZQUFZLElBQUksWUFBWSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxZQUFZLElBQUksUUFBUSxLQUFLLFdBQVcsSUFBSSxZQUFZLElBQUksV0FBVyxJQUFJLFlBQVksSUFBSSxhQUFhLElBQUksY0FBYyxJQUFJLGFBQWEsSUFBSSxZQUFZLElBQUksb0JBQW9CLElBQUksa0JBQWtCLElBQUksYUFBYSxJQUFJLFdBQVcsSUFBSSxhQUFhLElBQUksV0FBVyxJQUFJLGlCQUFpQixJQUFJLGdCQUFnQixJQUFJLGtCQUFrQixJQUFJLHNCQUFzQixJQUFJLHNCQUFzQixJQUFJLHVCQUF1QixJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksUUFBUSxLQUFLLFlBQVksS0FBSyxTQUFTLElBQUksU0FBUyxLQUFLLFFBQVEsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLGFBQWEsSUFBSSxZQUFZLElBQUksYUFBYSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFNBQVMsS0FBSyxVQUFVLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxTQUFTLEtBQUssVUFBVSxJQUFJLGFBQWEsSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksUUFBUSxJQUFJLFdBQVcsSUFBSSxhQUFhLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksU0FBUyxLQUFLLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFlBQVksSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLGNBQWMsSUFBSSxRQUFRLEtBQUssU0FBUyxJQUFJLFVBQVUsSUFBSSxjQUFjLElBQUksUUFBUSxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFdBQVcsSUFBSSxvQkFBb0IsSUFBSSxxQkFBcUIsSUFBSSxhQUFhLElBQUksYUFBYSxJQUFJLGVBQWUsSUFBSSxnQkFBZ0IsSUFBSSxnQkFBZ0IsSUFBSSxTQUFTLElBQUksYUFBYSxJQUFJLFdBQVcsSUFBSSxZQUFZLElBQUksVUFBVSxJQUFJLGFBQWEsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFlBQVksSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksZUFBZSxJQUFJLGNBQWMsSUFBSSxTQUFTLElBQUksWUFBWSxJQUFJLFdBQVcsSUFBSSxTQUFTLEtBQUssV0FBVyxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksU0FBUyxLQUFLLFNBQVMsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLFlBQVksSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxZQUFZLElBQUksUUFBUSxJQUFJLGFBQWEsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksU0FBUyxLQUFLLFdBQVcsSUFBSSxZQUFZLElBQUksZ0JBQWdCLElBQUksZ0JBQWdCLElBQUksYUFBYSxJQUFJLGVBQWUsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLG1CQUFtQixJQUFJLG9CQUFvQixJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksYUFBYSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFlBQVksSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFFBQVEsSUFBSSxPQUFPLElBQUksWUFBWSxJQUFJLFVBQVUsSUFBSSxZQUFZLElBQUksT0FBTyxJQUFJLFFBQVEsSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLFdBQVcsSUFBSSxRQUFRLEtBQUssVUFBVSxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksWUFBWSxJQUFJLGdCQUFnQixJQUFJLFVBQVUsSUFBSSxRQUFRLElBQUksWUFBWSxJQUFJLFVBQVUsSUFBSSxRQUFRLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxrQkFBa0IsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFNBQVMsS0FBSyxRQUFRLElBQUksVUFBVSxJQUFJLGFBQWEsSUFBSSxhQUFhLElBQUksWUFBWSxJQUFJLGNBQWMsSUFBSSxtQkFBbUIsSUFBSSxjQUFjLElBQUksbUJBQW1CLElBQUksb0JBQW9CLElBQUkscUJBQXFCLElBQUksYUFBYSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksU0FBUyxLQUFLLFNBQVMsSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLFNBQVMsSUFBSSxhQUFhLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksT0FBTyxJQUFJLFVBQVUsSUFBSSxRQUFRLEtBQUssT0FBTyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksUUFBUSxJQUFJLFdBQVcsSUFBSSxPQUFPLElBQUksYUFBYSxJQUFJLFFBQVEsSUFBSSxRQUFRLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksYUFBYSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxTQUFTLEtBQUssU0FBUyxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFlBQVksSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFlBQVksSUFBSSxVQUFVLElBQUksZUFBZSxJQUFJLGdCQUFnQixJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFlBQVksSUFBSSxhQUFhLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxRQUFRLElBQUksT0FBTyxJQUFJLFFBQVEsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLGdCQUFnQixJQUFJLGlCQUFpQixJQUFJLGtCQUFrQixJQUFJLFFBQVEsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksUUFBUSxLQUFLLFVBQVUsSUFBSSxVQUFVLEtBQUssU0FBUyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFNBQVMsS0FBSyxXQUFXLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxhQUFhLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxTQUFTLEtBQUssT0FBTyxJQUFJLFFBQVEsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxRQUFRLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLE9BQU8sSUFBSSxRQUFRLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxhQUFhLElBQUksUUFBUSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksWUFBWSxJQUFJLGFBQWEsSUFBSSxTQUFTLEtBQUssV0FBVyxJQUFJLFFBQVEsS0FBSyxPQUFPLElBQUksUUFBUSxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksT0FBTyxJQUFJLFFBQVEsSUFBSSxRQUFRLElBQUksUUFBUSxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksYUFBYSxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxTQUFTLEtBQUssVUFBVSxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxNQUFNLElBQUksT0FBTyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxZQUFZLElBQUksY0FBYyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksY0FBYyxJQUFJLGVBQWUsSUFBSSxZQUFZLElBQUksV0FBVyxJQUFJLGNBQWMsS0FBSyxTQUFTLEtBQUssU0FBUyxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksWUFBWSxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxjQUFjLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxRQUFRLEtBQUssYUFBYSxJQUFJLGFBQWEsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLGtCQUFrQixJQUFJLG1CQUFtQixJQUFJLFNBQVMsS0FBSyxXQUFXLElBQUksU0FBUyxLQUFLLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLE9BQU8sSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxRQUFRLElBQUksUUFBUSxLQUFLLFVBQVUsSUFBSSxXQUFXLElBQUksT0FBTyxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxhQUFhLElBQUksYUFBYSxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLE9BQU8sSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLGFBQWEsSUFBSSxXQUFXLElBQUksUUFBUSxJQUFJLFdBQVcsSUFBSSxhQUFhLElBQUksYUFBYSxJQUFJLGFBQWEsSUFBSSxZQUFZLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxTQUFTLEtBQUssU0FBUyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFNBQVMsS0FBSyxTQUFTLElBQUksVUFBVSxJQUFJLFlBQVksSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxPQUFPLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxRQUFRLElBQUksUUFBUSxLQUFLLFVBQVUsSUFBSSxTQUFTLEtBQUssU0FBUyxLQUFLLFdBQVcsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksUUFBUSxJQUFJLFFBQVEsS0FBSyxXQUFXLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxTQUFTLEtBQUssU0FBUyxLQUFLLFVBQVUsSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxPQUFPLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksYUFBYSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxZQUFZLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFlBQVksSUFBSSxXQUFXLElBQUksUUFBUSxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksVUFBVSxLQUFLLFVBQVUsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLFlBQVksSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFlBQVksSUFBSSxhQUFhLElBQUksU0FBUyxJQUFJLE9BQU8sSUFBSSxjQUFjLElBQUksa0JBQWtCLElBQUksb0JBQW9CLElBQUksa0JBQWtCLElBQUksbUJBQW1CLElBQUksbUJBQW1CLElBQUksb0JBQW9CLElBQUksc0JBQXNCLElBQUksd0JBQXdCLElBQUksbUJBQW1CLElBQUksUUFBUSxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksYUFBYSxJQUFJLFFBQVEsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFlBQVksSUFBSSxhQUFhLElBQUksU0FBUyxLQUFLLFdBQVcsSUFBSSxlQUFlLElBQUksWUFBWSxJQUFJLGNBQWMsSUFBSSxlQUFlLElBQUksWUFBWSxJQUFJLFlBQVksSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFFBQVEsS0FBSyxPQUFPLElBQUksUUFBUSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksT0FBTyxJQUFJLFVBQVUsSUFBSSxhQUFhLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLGVBQWUsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLGFBQWEsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksa0JBQWtCLElBQUksdUJBQXVCLElBQUksZUFBZSxJQUFJLG1CQUFtQixJQUFJLGtCQUFrQixJQUFJLG1CQUFtQixJQUFJLFVBQVUsSUFBSSxTQUFTLEtBQUssV0FBVyxJQUFJLFlBQVksSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFFBQVEsSUFBSSxZQUFZLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLGFBQWEsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFFBQVEsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFNBQVMsS0FBSyxRQUFRLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLE1BQU0sSUFBSSxPQUFPLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksWUFBWSxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxhQUFhLElBQUksWUFBWSxJQUFJLGNBQWMsS0FBSyxTQUFTLEtBQUssVUFBVSxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxZQUFZLElBQUksUUFBUSxJQUFJLFdBQVcsSUFBSSxlQUFlLElBQUksZUFBZSxJQUFJLGFBQWEsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFFBQVEsSUFBSSxVQUFVLElBQUksa0JBQWtCLElBQUksUUFBUSxLQUFLLFFBQVEsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFFBQVEsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksWUFBWSxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxTQUFTLEtBQUssT0FBTyxJQUFJLFNBQVMsS0FBSyxXQUFXLElBQUksT0FBTyxJQUFJLGFBQWEsSUFBSSxVQUFVLElBQUksUUFBUSxLQUFLLFFBQVEsS0FBSyxTQUFTLEtBQUssZUFBZSxJQUFJLG9CQUFvQixJQUFJLFFBQVEsS0FBSyxRQUFRLEtBQUssU0FBUyxLQUFLLGdCQUFnQixJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxTQUFTLEtBQUssUUFBUSxJQUFJLFNBQVMsS0FBSyxVQUFVLEtBQUssVUFBVSxJQUFJLFlBQVksSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLGFBQWEsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFVBQVUsS0FBSyxXQUFXLEtBQUssU0FBUyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLGFBQWEsS0FBSyxTQUFTLElBQUksUUFBUSxJQUFJLFVBQVUsSUFBSSxPQUFPLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLFVBQVUsS0FBSyxXQUFXLElBQUksV0FBVyxJQUFJLFVBQVUsS0FBSyxXQUFXLElBQUksWUFBWSxJQUFJLFFBQVEsS0FBSyxRQUFRLEtBQUssUUFBUSxJQUFJLFNBQVMsSUFBSSxVQUFVLEtBQUssY0FBYyxLQUFLLFNBQVMsS0FBSyxVQUFVLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxPQUFPLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxRQUFRLEtBQUssVUFBVSxJQUFJLFNBQVMsSUFBSSxRQUFRLElBQUksZUFBZSxJQUFJLG9CQUFvQixJQUFJLFNBQVMsSUFBSSxVQUFVLEtBQUssY0FBYyxLQUFLLFNBQVMsS0FBSyxVQUFVLElBQUksVUFBVSxJQUFJLFFBQVEsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxTQUFTLEtBQUssT0FBTyxJQUFJLFFBQVEsSUFBSSxVQUFVLElBQUksV0FBVyxLQUFLLGFBQWEsS0FBSyxZQUFZLElBQUksWUFBWSxJQUFJLFlBQVksSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLFlBQVksSUFBSSxZQUFZLElBQUksU0FBUyxJQUFJLGNBQWMsSUFBSSxXQUFXLEtBQUssVUFBVSxLQUFLLFlBQVksSUFBSSxRQUFRLElBQUksV0FBVyxJQUFJLFNBQVMsS0FBSyxVQUFVLElBQUksWUFBWSxLQUFLLFVBQVUsSUFBSSxVQUFVLElBQUksV0FBVyxLQUFLLFdBQVcsS0FBSyxnQkFBZ0IsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFFBQVEsSUFBSSxXQUFXLElBQUksU0FBUyxLQUFLLFNBQVMsS0FBSyxjQUFjLElBQUksbUJBQW1CLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxZQUFZLElBQUksWUFBWSxJQUFJLFNBQVMsSUFBSSxVQUFVLEtBQUssVUFBVSxJQUFJLFlBQVksS0FBSyxjQUFjLElBQUksZUFBZSxLQUFLLFVBQVUsSUFBSSxZQUFZLEtBQUssU0FBUyxJQUFJLFVBQVUsS0FBSyxVQUFVLElBQUksWUFBWSxLQUFLLGNBQWMsSUFBSSxlQUFlLEtBQUssU0FBUyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLGtCQUFrQixJQUFJLG9CQUFvQixJQUFJLG1CQUFtQixJQUFJLHFCQUFxQixJQUFJLE9BQU8sSUFBSSxRQUFRLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFNBQVMsS0FBSyxXQUFXLElBQUksU0FBUyxLQUFLLFNBQVMsS0FBSyxZQUFZLElBQUksV0FBVyxJQUFJLFNBQVMsS0FBSyxTQUFTLEtBQUssWUFBWSxLQUFLLFdBQVcsSUFBSSxZQUFZLEtBQUssVUFBVSxLQUFLLFVBQVUsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFlBQVksSUFBSSxXQUFXLElBQUksT0FBTyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFFBQVEsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksUUFBUSxLQUFLLFNBQVMsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFFBQVEsSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFlBQVksSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksU0FBUyxLQUFLLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLE9BQU8sSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLFVBQVUsSUFBSSxZQUFZLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksWUFBWSxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksYUFBYSxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFFBQVEsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLGFBQWEsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxRQUFRLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFlBQVksSUFBSSxRQUFRLEtBQUssUUFBUSxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLE9BQU8sSUFBSSxjQUFjLElBQUksUUFBUSxJQUFJLFdBQVcsSUFBSSxZQUFZLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxhQUFhLElBQUksVUFBVSxJQUFJLFlBQVksSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFlBQVksSUFBSSxZQUFZLElBQUksT0FBTyxJQUFJLGFBQWEsSUFBSSxTQUFTLEtBQUssU0FBUyxJQUFJLFVBQVUsSUFBSSxPQUFPLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxlQUFlLElBQUksZ0JBQWdCLElBQUksV0FBVyxJQUFJLGdCQUFnQixJQUFJLGFBQWEsSUFBSSxhQUFhLElBQUksWUFBWSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLGFBQWEsSUFBSSxhQUFhLElBQUksYUFBYSxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxTQUFTLEtBQUssUUFBUSxJQUFJLFdBQVcsSUFBSSxRQUFRLEtBQUssU0FBUyxJQUFJLFNBQVMsS0FBSyxXQUFXLElBQUksU0FBUyxLQUFLLGdCQUFnQixJQUFJLFlBQVksSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxTQUFTLEtBQUssV0FBVyxJQUFJLFVBQVUsSUFBSSxhQUFhLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksWUFBWSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxjQUFjLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxZQUFZLElBQUksWUFBWSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFlBQVksSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksWUFBWSxJQUFJLGFBQWEsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLE9BQU8sSUFBSSxRQUFRLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxRQUFRLEtBQUssVUFBVSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxlQUFlLElBQUksbUJBQW1CLElBQUkscUJBQXFCLElBQUksbUJBQW1CLElBQUksb0JBQW9CLElBQUksc0JBQXNCLElBQUkscUJBQXFCLElBQUksb0JBQW9CLElBQUksb0JBQW9CLElBQUksU0FBUyxJQUFJLGlCQUFpQixJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLFdBQVcsSUFBSSxlQUFlLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxTQUFTLEtBQUssV0FBVyxJQUFJLFlBQVksSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLGFBQWEsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFNBQVMsS0FBSyxRQUFRLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxhQUFhLElBQUksWUFBWSxJQUFJLE9BQU8sSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLE9BQU8sSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksYUFBYSxJQUFJLFVBQVUsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFdBQVcsSUFBSSxhQUFhLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxRQUFRLEtBQUssV0FBVyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLGFBQWEsSUFBSSxrQkFBa0IsSUFBSSxPQUFPLElBQUksUUFBUSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFFBQVEsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFlBQVksSUFBSSxZQUFZLElBQUksVUFBVSxJQUFJLGtCQUFrQixJQUFJLFdBQVcsSUFBSSxhQUFhLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFVBQVUsS0FBSyxXQUFXLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksU0FBUyxLQUFLLFdBQVcsSUFBSSxjQUFjLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxXQUFXLEtBQUssVUFBVSxJQUFJLFdBQVcsS0FBSyxVQUFVLElBQUksV0FBVyxJQUFJLGFBQWEsSUFBSSxlQUFlLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxhQUFhLElBQUksZUFBZSxJQUFJLFFBQVEsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksU0FBUyxLQUFLLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksb0JBQW9CLElBQUksZ0JBQWdCLElBQUksVUFBVSxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxZQUFZLElBQUksWUFBWSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLFlBQVksSUFBSSxXQUFXLElBQUksYUFBYSxJQUFJLGNBQWMsSUFBSSxjQUFjLElBQUksZUFBZSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxlQUFlLElBQUksZ0JBQWdCLElBQUksV0FBVyxJQUFJLGdCQUFnQixJQUFJLGFBQWEsSUFBSSxhQUFhLElBQUksWUFBWSxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksWUFBWSxJQUFJLFNBQVMsSUFBSSxZQUFZLElBQUksWUFBWSxJQUFJLFlBQVksSUFBSSxZQUFZLElBQUksWUFBWSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLFdBQVcsSUFBSSxhQUFhLElBQUksY0FBYyxJQUFJLGNBQWMsSUFBSSxlQUFlLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksUUFBUSxLQUFLLFdBQVcsSUFBSSxjQUFjLElBQUksVUFBVSxJQUFJLGFBQWEsSUFBSSxXQUFXLElBQUksZ0JBQWdCLElBQUksYUFBYSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLGFBQWEsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxRQUFRLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxTQUFTLEtBQUssWUFBWSxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLGFBQWEsSUFBSSxpQkFBaUIsSUFBSSxpQkFBaUIsSUFBSSxtQkFBbUIsSUFBSSxjQUFjLElBQUksa0JBQWtCLElBQUksb0JBQW9CLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxhQUFhLElBQUksWUFBWSxJQUFJLFVBQVUsSUFBSSxZQUFZLElBQUksYUFBYSxJQUFJLFNBQVMsS0FBSyxTQUFTLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUkscUJBQXFCLElBQUksc0JBQXNCLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxRQUFRLEtBQUssVUFBVSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksYUFBYSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLE9BQU8sSUFBSSxRQUFRLElBQUksVUFBVSxJQUFJLFNBQVMsS0FBSyxZQUFZLElBQUksZ0JBQWdCLElBQUksa0JBQWtCLElBQUksbUJBQW1CLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLGVBQWUsSUFBSSxXQUFXLElBQUksYUFBYSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFNBQVMsS0FBSyxVQUFVLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksWUFBWSxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksZUFBZSxJQUFJLGFBQWEsSUFBSSxlQUFlLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxjQUFjLElBQUksU0FBUyxJQUFJLFdBQVcsSUFBSSxhQUFhLElBQUksaUJBQWlCLEtBQUssa0JBQWtCLEtBQUssaUJBQWlCLEtBQUssa0JBQWtCLEtBQUssYUFBYSxJQUFJLG9CQUFvQixJQUFJLHFCQUFxQixJQUFJLFFBQVEsSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksUUFBUSxLQUFLLFVBQVUsSUFBSSxVQUFVLEtBQUssVUFBVSxLQUFLLFNBQVMsS0FBSyxVQUFVLElBQUksVUFBVSxJQUFJLFNBQVMsS0FBSyxXQUFXLEtBQUssV0FBVyxLQUFLLFdBQVcsS0FBSyxXQUFXLEtBQUssWUFBWSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksUUFBUSxLQUFLLFNBQVMsS0FBSyxPQUFPLElBQUksT0FBTyxJQUFJLFdBQVcsSUFBSSxTQUFTLEtBQUssU0FBUyxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFFBQVEsS0FBSyxVQUFVLElBQUksVUFBVSxJQUFJLE9BQU8sSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFNBQVMsS0FBSyxXQUFXLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksU0FBUyxLQUFLLFdBQVcsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFFBQVEsSUFBSSxPQUFPLElBQUksUUFBUSxJQUFJLFFBQVEsS0FBSyxTQUFTLElBQUksU0FBUyxLQUFLLFNBQVMsS0FBSyxTQUFTLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxRQUFRLEtBQUssU0FBUyxJQUFJLFlBQVksSUFBSSxTQUFTLEtBQUssU0FBUyxLQUFLLFFBQVEsSUFBSSxTQUFTLEtBQUt6QixXQUFXLENBQUMsSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFFBQVEsS0FBSyxRQUFRLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLFVBQVUsS0FBSyxTQUFTLElBQUksT0FBTyxJQUFJLFVBQVUsS0FBSyxTQUFTLElBQUksWUFBWSxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxtQkFBbUIsSUFBSSxRQUFRLElBQUksWUFBWSxJQUFJLFdBQVcsSUFBSSxTQUFTLEtBQUssUUFBUSxLQUFLLFNBQVMsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLFFBQVEsSUFBSSxPQUFPLElBQUksUUFBUSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFlBQVksSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLGFBQWEsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLGVBQWUsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLDBCQUEwQixJQUFJLFNBQVMsSUFBSSxjQUFjLElBQUksV0FBVyxJQUFJLGFBQWEsSUFBSSxVQUFVLEtBQUssU0FBUyxJQUFJLFFBQVEsSUFBSSxZQUFZLElBQUksYUFBYSxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFlBQVksSUFBSSxTQUFTLElBQUksa0JBQWtCLElBQUksV0FBVyxJQUFJLFFBQVEsSUFBSSxVQUFVLElBQUksVUFBVSxLQUFLLFFBQVEsSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFlBQVksSUFBSSxPQUFPLEtBQUssU0FBUyxJQUFJLFFBQVEsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksUUFBUSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksY0FBYyxJQUFJLGlCQUFpQixJQUFJLFVBQVUsSUFBSSxjQUFjLElBQUksd0JBQXdCLElBQUksc0JBQXNCLElBQUksVUFBVSxJQUFJLHNCQUFzQixJQUFJLHVCQUF1QixJQUFJLHFCQUFxQixJQUFJLHVCQUF1QixJQUFJLFFBQVEsSUFBSSxlQUFlLEtBQUssU0FBUyxJQUFJLFdBQVcsSUFBSSxRQUFRLElBQUksUUFBUSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFFBQVEsSUFBSSxTQUFTLEtBQUssUUFBUSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLHFCQUFxQixJQUFJLHlCQUF5QixJQUFJLFVBQVUsS0FBSyxTQUFTLElBQUksWUFBWSxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLGdCQUFnQixJQUFJLFNBQVMsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxpQkFBaUIsSUFBSSxRQUFRLEtBQUssUUFBUSxJQUFJLHNCQUFzQixJQUFJLFNBQVMsS0FBSyxTQUFTLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksT0FBTyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLFNBQVMsS0FBSyxRQUFRLElBQUksUUFBUSxLQUFLLFNBQVMsSUFBSSxRQUFRLElBQUksY0FBYyxJQUFJLFNBQVMsSUFBSSxtQkFBbUIsSUFBSSxZQUFZLElBQUksUUFBUSxJQUFJLFdBQVcsS0FBSyxTQUFTLElBQUksT0FBTyxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLFVBQVUsSUFBSSxrQkFBa0IsSUFBSSxXQUFXLElBQUksZ0JBQWdCLElBQUksU0FBUyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLGFBQWEsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLE9BQU8sSUFBSSxRQUFRLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxPQUFPLElBQUksT0FBTyxJQUFJLFVBQVUsS0FBSyxTQUFTLElBQUksU0FBUyxJQUFJLGFBQWEsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksUUFBUSxLQUFLLFFBQVEsS0FBSyxTQUFTLEtBQUssU0FBUyxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFFBQVEsS0FBSyxRQUFRLEtBQUssU0FBUyxLQUFLLFNBQVMsSUFBSSxTQUFTLElBQUksT0FBTyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFdBQVcsSUFBSSxxQkFBcUIsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFFBQVEsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxzQkFBc0IsSUFBSSxvQkFBb0IsSUFBSSxzQkFBc0IsSUFBSSxXQUFXLElBQUksbUJBQW1CLElBQUksb0JBQW9CLElBQUksVUFBVSxJQUFJLGVBQWUsSUFBSSxrQkFBa0IsSUFBSSxVQUFVLElBQUksb0JBQW9CLElBQUksbUJBQW1CLElBQUkscUJBQXFCLElBQUksb0JBQW9CLElBQUksa0JBQWtCLElBQUksb0JBQW9CLElBQUksVUFBVSxJQUFJLGtCQUFrQixJQUFJLGNBQWMsSUFBSSxTQUFTLElBQUksT0FBTyxJQUFJLGFBQWEsSUFBSSxRQUFRLElBQUksU0FBUyxLQUFLLFFBQVEsSUFBSSxPQUFPLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsS0FBSyxTQUFTLElBQUksWUFBWSxJQUFJLFlBQVksSUFBSSxRQUFRLElBQUksV0FBVyxJQUFJLE9BQU8sSUFBSSxRQUFRLElBQUksUUFBUSxJQUFJLGdCQUFnQixJQUFJLFdBQVcsS0FBSyxRQUFRLElBQUksT0FBTyxLQUFLLFNBQVMsSUFBSSxPQUFPLElBQUksU0FBUyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFFBQVEsSUFBSSxtQkFBbUIsS0FBSyxZQUFZLEtBQUssUUFBUSxJQUFJLFlBQVksSUFBSSxTQUFTLElBQUksYUFBYSxJQUFJLFFBQVEsSUFBSSxXQUFXLElBQUksY0FBYyxJQUFJLFVBQVUsSUFBSSxZQUFZLElBQUksT0FBTyxLQUFLLFVBQVUsSUFBSSxZQUFZLElBQUksU0FBUyxJQUFJLFNBQVMsS0FBSyxVQUFVLEtBQUssU0FBUyxJQUFJLFNBQVMsS0FBSyxTQUFTLElBQUksVUFBVSxLQUFLLFVBQVUsS0FBSyxXQUFXLElBQUksa0JBQWtCLEtBQUssdUJBQXVCLElBQUksb0JBQW9CLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxTQUFTLEtBQUssU0FBUyxLQUFLLFNBQVMsSUFBSSxVQUFVLEtBQUssNEJBQTRCLEtBQUssc0JBQXNCLElBQUksVUFBVSxLQUFLLFlBQVksSUFBSSxXQUFXLElBQUksWUFBWSxJQUFJLG1CQUFtQixLQUFLLHdCQUF3QixJQUFJLHFCQUFxQixLQUFLLG9CQUFvQixJQUFJLFlBQVksS0FBSyxzQkFBc0IsSUFBSSxZQUFZLEtBQUssVUFBVSxJQUFJLGNBQWMsSUFBSSxVQUFVLEtBQUssWUFBWSxJQUFJLFdBQVcsS0FBSyxxQkFBcUIsS0FBSyxVQUFVLElBQUksY0FBYyxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFlBQVksSUFBSSxVQUFVLEtBQUssU0FBUyxJQUFJLFdBQVcsSUFBSSxPQUFPLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLFdBQVcsS0FBSyxRQUFRLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxRQUFRLElBQUksWUFBWSxLQUFLLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLE9BQU8sS0FBSyxTQUFTLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxjQUFjLElBQUksU0FBUyxJQUFJLG9CQUFvQixJQUFJLFNBQVMsSUFBSSxRQUFRLEtBQUssUUFBUSxJQUFJLFFBQVEsSUFBSSxPQUFPLElBQUksT0FBTyxJQUFJLFdBQVcsSUFBSSxPQUFPLElBQUksU0FBUyxJQUFJLFdBQVcsSUFBSSxnQkFBZ0IsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxVQUFVLEtBQUssU0FBUyxJQUFJLFFBQVEsSUFBSSxTQUFTLEtBQUssUUFBUSxJQUFJLGNBQWMsS0FBSyxTQUFTLElBQUksYUFBYSxJQUFJLFFBQVEsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLHNCQUFzQixJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFFBQVEsSUFBSSxhQUFhLElBQUksUUFBUSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLHVCQUF1QixJQUFJLHFCQUFxQixJQUFJLHVCQUF1QixJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLG1CQUFtQixJQUFJLFVBQVUsSUFBSSxxQkFBcUIsSUFBSSxvQkFBb0IsSUFBSSxzQkFBc0IsSUFBSSxxQkFBcUIsSUFBSSxtQkFBbUIsSUFBSSxxQkFBcUIsSUFBSSxtQkFBbUIsSUFBSSxtQkFBbUIsSUFBSSxVQUFVLElBQUksaUJBQWlCLElBQUksVUFBVSxJQUFJLFlBQVksSUFBSSxRQUFRLElBQUksZ0JBQWdCLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLE9BQU8sSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxRQUFRLEtBQUssUUFBUSxJQUFJLFlBQVksSUFBSSxVQUFVLElBQUksV0FBVyxLQUFLLFNBQVMsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxhQUFhLElBQUksZUFBZSxJQUFJLGFBQWEsSUFBSSxlQUFlLElBQUksVUFBVSxLQUFLLFNBQVMsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLGFBQWEsSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLGdCQUFnQixJQUFJLFlBQVksSUFBSSxRQUFRLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxhQUFhLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksU0FBUyxLQUFLLFFBQVEsSUFBSSxRQUFRLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxRQUFRLEtBQUssUUFBUSxJQUFJLGNBQWMsSUFBSSxVQUFVLEtBQUssZUFBZSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxVQUFVLEtBQUssU0FBUyxJQUFJLFNBQVMsS0FBSyxTQUFTLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksYUFBYSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFFBQVEsSUFBSSxXQUFXLEtBQUssUUFBUSxJQUFJLFdBQVcsSUFBSSxVQUFVNEMsRUFBRSxXQUFXLElBQUksZUFBZSxJQUFJLFNBQVMsSUFBSSxxQkFBcUIsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsS0FBSyxTQUFTLElBQUksZUFBZSxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxhQUFhLElBQUksWUFBWSxJQUFJLFlBQVksSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLFVBQVUsS0FBSyxTQUFTLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFFBQVEsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxzQkFBc0IsSUFBSSxXQUFXLElBQUksV0FBVyxLQUFLLFFBQVEsS0FBSyxTQUFTLEtBQUssU0FBUyxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksV0FBVyxLQUFLLFFBQVEsS0FBSyxTQUFTLEtBQUssU0FBUyxLQUFLLFFBQVEsSUFBSSxPQUFPLEtBQUssU0FBUyxLQUFLLFNBQVMsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFFBQVEsS0FBSyxRQUFRLEtBQUssU0FBUyxLQUFLLFNBQVMsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLGFBQWEsS0FBSyxTQUFTLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxXQUFXLEtBQUssUUFBUSxJQUFJLFFBQVEsSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLFVBQVUsS0FBSyxRQUFRLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxhQUFhLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksa0JBQWtCLElBQUksYUFBYSxJQUFJLGFBQWEsSUFBSSxhQUFhLElBQUksYUFBYSxJQUFJLGFBQWEsSUFBSSxhQUFhLElBQUksYUFBYSxJQUFJLGFBQWEsSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLGFBQWEsSUFBSSxXQUFXLElBQUksWUFBWSxJQUFJLFVBQVUsS0FBSyxTQUFTLElBQUksUUFBUSxJQUFJLFdBQVcsSUFBSSxhQUFhLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxVQUFVLEtBQUssU0FBUyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksYUFBYSxJQUFJLGFBQWEsSUFBSSxRQUFRLElBQUksV0FBVyxJQUFJLFlBQVksSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFVBQVUsS0FBSyxRQUFRLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsS0FBSyxRQUFRLEtBQUssWUFBWSxJQUFJLFNBQVMsS0FBSyxTQUFTLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxXQUFXLEtBQUssU0FBUyxJQUFJLFVBQVUsS0FBSyxTQUFTLElBQUksVUFBVSxJQUFJLGFBQWEsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxRQUFRLElBQUksV0FBVyxJQUFJLGFBQWEsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFdBQVcsS0FBSyxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLFNBQVMsSUFBSSxZQUFZLElBQUksU0FBUyxLQUFLLFFBQVEsSUFBSSxTQUFTLElBQUksY0FBYyxJQUFJLFFBQVEsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxPQUFPLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksYUFBYSxJQUFJLFdBQVcsSUFBSSxZQUFZLElBQUksYUFBYSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLGVBQWUsSUFBSSxZQUFZLEtBQUssU0FBUyxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksVUFBVSxLQUFLLFNBQVMsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFlBQVksSUFBSSxZQUFZLElBQUksZ0JBQWdCLElBQUksZ0JBQWdCLElBQUksbUJBQW1CLElBQUksWUFBWSxJQUFJLFFBQVEsSUFBSSxhQUFhLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksVUFBVSxLQUFLLFNBQVMsSUFBSSxvQkFBb0IsSUFBSSxZQUFZLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxRQUFRLElBQUksbUJBQW1CLElBQUksVUFBVSxJQUFJLFFBQVEsSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLFdBQVcsS0FBSyxRQUFRLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksYUFBYSxJQUFJLFdBQVdDLEVBQUUsV0FBVyxLQUFLLFNBQVMsSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksYUFBYSxJQUFJLFdBQVcsS0FBSyxTQUFTLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLGlCQUFpQixJQUFJLFlBQVksSUFBSSxTQUFTLElBQUksYUFBYSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksa0JBQWtCLEtBQUssUUFBUSxJQUFJLE9BQU8sSUFBSSxXQUFXLElBQUksZUFBZSxJQUFJLFdBQVcsSUFBSSxPQUFPLElBQUksYUFBYSxJQUFJLFFBQVEsSUFBSSxnQkFBZ0IsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLGVBQWUsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFVBQVUsS0FBSyxTQUFTLElBQUksU0FBUyxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLGVBQWUsSUFBSSxXQUFXLElBQUksWUFBWSxJQUFJLFlBQVksSUFBSSxhQUFhLElBQUksaUJBQWlCLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxRQUFRLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFFBQVEsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxXQUFXLEtBQUssUUFBUSxJQUFJLFVBQVVDLEdBQUcsVUFBVSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFNBQVMsS0FBSyxTQUFTLElBQUksY0FBYyxJQUFJLFVBQVUsSUFBSSxhQUFhLElBQUksU0FBUyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsS0FBSyxTQUFTLElBQUksZUFBZSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksY0FBYyxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFlBQVksSUFBSSxhQUFhLEtBQUssU0FBUyxJQUFJLFdBQVcsS0FBSyxRQUFRLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxRQUFRLElBQUksUUFBUSxJQUFJLFFBQVEsSUFBSSxVQUFVLElBQUksYUFBYSxJQUFJLFNBQVMsSUFBSSxVQUFVLEtBQUssU0FBUyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxZQUFZLElBQUksV0FBVyxLQUFLLFNBQVMsSUFBSSxXQUFXLElBQUksWUFBWSxJQUFJLHdCQUF3QixJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksY0FBYyxJQUFJLFNBQVMsSUFBSSxXQUFXLEtBQUssUUFBUSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxLQUFLLFNBQVMsSUFBSSxXQUFXLEtBQUssU0FBUyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFVBQVUsS0FBSyxRQUFRLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksYUFBYSxJQUFJLGFBQWEsSUFBSSxhQUFhLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxVQUFVLEtBQUssU0FBUyxJQUFJLFNBQVMsSUFBSSxXQUFXLEtBQUssU0FBUyxJQUFJLFVBQVUsSUFBSSxZQUFZLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksUUFBUSxLQUFLLFFBQVEsSUFBSSxVQUFVLEtBQUssU0FBUyxLQUFLLFNBQVMsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxhQUFhLElBQUksV0FBVyxJQUFJLFFBQVEsS0FBSyxRQUFRLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxTQUFTLEtBQUssU0FBUyxLQUFLLFNBQVMsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLGVBQWUsSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLGFBQWEsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLGVBQWUsSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLFdBQVcsSUFBSSxrQkFBa0IsSUFBSSxXQUFXLElBQUksWUFBWSxJQUFJLGtCQUFrQixJQUFJLFFBQVEsSUFBSSxXQUFXLElBQUksU0FBUyxLQUFLLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFlBQVksSUFBSSxZQUFZLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFlBQVksSUFBSSxhQUFhLElBQUksU0FBUyxJQUFJLFFBQVEsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksWUFBWSxJQUFJLGFBQWEsS0FBSyxTQUFTLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxXQUFXLEtBQUssUUFBUSxJQUFJLFFBQVEsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxlQUFlLElBQUksVUFBVSxJQUFJLGFBQWEsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFdBQVcsSUFBSSxVQUFVLEtBQUssU0FBUyxJQUFJLFdBQVcsSUFBSSxZQUFZLElBQUksV0FBVyxJQUFJLFlBQVksSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxRQUFRLElBQUksVUFBVSxJQUFJLFdBQVcsS0FBSyxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxZQUFZLElBQUksV0FBVyxJQUFJLGlCQUFpQixJQUFJLGFBQWEsSUFBSSxZQUFZLEtBQUssU0FBUyxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFlBQVksSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFFBQVEsSUFBSSxVQUFVLEtBQUssUUFBUSxJQUFJLFFBQVEsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxZQUFZLElBQUksU0FBUyxJQUFJLFdBQVcsS0FBSyxTQUFTLEtBQUssU0FBUyxJQUFJLE9BQU8sSUFBSSxVQUFVLEtBQUssUUFBUSxLQUFLLFFBQVEsSUFBSSxVQUFVLElBQUksVUFBVSxLQUFLLFFBQVEsS0FBSyxRQUFRLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxLQUFLLFNBQVMsS0FBSyxTQUFTLEtBQUssVUFBVSxJQUFJLFVBQVUsSUFBSSxZQUFZLElBQUksU0FBUyxJQUFJLFdBQVcsSUFBSSxXQUFXLEtBQUssYUFBYSxJQUFJLFNBQVMsSUFBSSxRQUFRLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxXQUFXLEtBQUssVUFBVSxJQUFJLFNBQVMsS0FBSyxRQUFRLElBQUksb0JBQW9CLElBQUksVUFBVSxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksU0FBUyxLQUFLLFVBQVUsSUFBSSxlQUFlLElBQUksU0FBUyxLQUFLLFNBQVMsSUFBSSxRQUFRLEtBQUssV0FBVyxLQUFLLGFBQWEsSUFBSSxZQUFZLElBQUksWUFBWSxJQUFJLFlBQVksSUFBSSxZQUFZLEtBQUssV0FBVyxLQUFLLFVBQVUsSUFBSSxZQUFZLElBQUksZ0JBQWdCLEtBQUssV0FBVyxLQUFLLFdBQVcsS0FBSyxTQUFTLElBQUksU0FBUyxLQUFLLGVBQWUsSUFBSSxTQUFTLEtBQUssZUFBZSxJQUFJLFdBQVcsSUFBSSxPQUFPLElBQUksUUFBUSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFdBQVcsS0FBSyxTQUFTLElBQUksV0FBVyxLQUFLLFNBQVMsS0FBSyxTQUFTLElBQUksWUFBWSxJQUFJLFdBQVcsS0FBSyxTQUFTLEtBQUssU0FBUyxLQUFLLFlBQVksSUFBSSxXQUFXLEtBQUssWUFBWSxLQUFLLFVBQVUsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFFBQVEsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksVUFBVSxLQUFLLFFBQVEsSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLFFBQVEsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFlBQVksSUFBSSxRQUFRLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxZQUFZLElBQUksU0FBUyxLQUFLLFNBQVMsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFFBQVEsSUFBSSxRQUFRLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxZQUFZLElBQUksUUFBUSxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLGFBQWEsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFFBQVEsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxZQUFZLEtBQUssUUFBUSxJQUFJLFFBQVEsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLE9BQU8sSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLFNBQVMsSUFBSSxhQUFhLElBQUksWUFBWSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksWUFBWSxJQUFJLFlBQVksSUFBSSxhQUFhLEtBQUssU0FBUyxJQUFJLFVBQVUsSUFBSSxRQUFRLElBQUksZUFBZSxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxhQUFhLElBQUksYUFBYSxJQUFJLGFBQWEsSUFBSSxXQUFXLEtBQUssU0FBUyxJQUFJLFFBQVEsSUFBSSxXQUFXLEtBQUssUUFBUSxLQUFLLFNBQVMsSUFBSSxXQUFXLEtBQUssU0FBUyxJQUFJLFlBQVksSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFNBQVMsS0FBSyxTQUFTLElBQUksV0FBVyxJQUFJLGFBQWEsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksWUFBWSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFlBQVksSUFBSSxtQkFBbUIsSUFBSSxvQkFBb0IsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFVBQVUsSUFBSSxZQUFZLElBQUksWUFBWSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksUUFBUSxJQUFJLFNBQVMsSUFBSSxZQUFZLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxXQUFXLEtBQUssUUFBUSxJQUFJLFdBQVcsSUFBSSxRQUFRLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFFBQVEsSUFBSSxlQUFlLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksVUFBVSxLQUFLLFNBQVMsSUFBSSxXQUFXLElBQUksWUFBWSxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksYUFBYSxJQUFJLFdBQVcsS0FBSyxTQUFTLElBQUksV0FBVyxJQUFJLGtCQUFrQixJQUFJLGFBQWEsSUFBSSxZQUFZLElBQUksT0FBTyxJQUFJLFdBQVcsSUFBSSxRQUFRLElBQUksZUFBZSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLGFBQWEsSUFBSSxnQkFBZ0IsSUFBSSxhQUFhLElBQUksYUFBYSxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxTQUFTLEtBQUssUUFBUSxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFFBQVEsSUFBSSxVQUFVLElBQUksYUFBYSxJQUFJLFdBQVcsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFlBQVksSUFBSSxZQUFZLElBQUksV0FBVyxJQUFJLGFBQWEsSUFBSSxXQUFXLElBQUksUUFBUSxJQUFJLFNBQVMsS0FBSyxVQUFVLElBQUksV0FBVyxJQUFJLFFBQVEsSUFBSSxTQUFTLElBQUksV0FBVyxLQUFLLFNBQVMsSUFBSSxjQUFjLEtBQUssV0FBVyxLQUFLLFdBQVcsS0FBSyxTQUFTLElBQUksU0FBUyxJQUFJLFdBQVcsSUFBSSxjQUFjLElBQUksV0FBVyxJQUFJLFlBQVksSUFBSSxZQUFZLElBQUksZUFBZSxJQUFJLGNBQWMsSUFBSSxZQUFZLElBQUksWUFBWSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxjQUFjLElBQUksV0FBVyxJQUFJLFlBQVksSUFBSSxZQUFZLElBQUksWUFBWSxJQUFJLFlBQVksSUFBSSxZQUFZLElBQUksWUFBWSxJQUFJLGVBQWUsSUFBSSxjQUFjLElBQUksWUFBWSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxRQUFRLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxRQUFRLElBQUksV0FBVyxLQUFLLFFBQVEsSUFBSSxVQUFVLElBQUksYUFBYSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksYUFBYSxJQUFJLFdBQVcsSUFBSSxXQUFXLElBQUksV0FBVyxLQUFLLFNBQVMsSUFBSSxZQUFZLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLGFBQWEsSUFBSSxZQUFZLElBQUksVUFBVSxJQUFJLFlBQVksSUFBSSxhQUFhLEtBQUssU0FBUyxJQUFJLFNBQVMsSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLFNBQVMsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLFdBQVcsSUFBSSxXQUFXLEtBQUssUUFBUSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksYUFBYSxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksVUFBVSxJQUFJLFVBQVUsS0FBSyxTQUFTLElBQUksWUFBWSxJQUFJLFVBQVUsSUFBSSxhQUFhLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxVQUFVLEtBQUssU0FBUyxJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksU0FBUyxJQUFJLFlBQVksSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLFdBQVcsS0FBSyxXQUFXLEtBQUssV0FBVyxL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WSxXQUdab0csR0FBWSxhQUFnQmpCLElBQ2hDLGFBQU9pQixFQUFXZCxFQUFpQnJ3RCxFQUFRK3JELFcsMEdDN1EzQzV1RCxFQUFBQSxRQUFBQSxPQUFBQSxlQUEyQixFQUUzQixJQUFJQSxFQUFBQSxRQUFJLENBQ1AwYixPQUFRLFNBQUM1YyxHQUFELE9BQU9BLEVBQUVtMUQsRUFBQUEsWUFDZnYwQixPQUFPLFEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92dWUtdW5pY29ybi1sb2cvd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovL3Z1ZS11bmljb3JuLWxvZy8uLi9ub2RlX21vZHVsZXMvYW5zaS1odG1sLWNvbW11bml0eS9pbmRleC5qcyIsIndlYnBhY2s6Ly92dWUtdW5pY29ybi1sb2cvLi9BcHAudnVlIiwid2VicGFjazovL3Z1ZS11bmljb3JuLWxvZy9jb21wb25lbnRzL05hdi52dWUiLCJ3ZWJwYWNrOi8vdnVlLXVuaWNvcm4tbG9nL2NvbXBvbmVudHMvZXhhbXBsZXMvQXJyYXlzLnZ1ZSIsIndlYnBhY2s6Ly92dWUtdW5pY29ybi1sb2cvY29tcG9uZW50cy9leGFtcGxlcy9EaXNhYmxlZC52dWUiLCJ3ZWJwYWNrOi8vdnVlLXVuaWNvcm4tbG9nL2NvbXBvbmVudHMvZXhhbXBsZXMvTG9nUHJlZml4LnZ1ZSIsIndlYnBhY2s6Ly92dWUtdW5pY29ybi1sb2cvY29tcG9uZW50cy9leGFtcGxlcy9NYWdpY2FsLnZ1ZSIsIndlYnBhY2s6Ly92dWUtdW5pY29ybi1sb2cvY29tcG9uZW50cy9leGFtcGxlcy9PYmplY3RzLnZ1ZSIsIndlYnBhY2s6Ly92dWUtdW5pY29ybi1sb2cvY29tcG9uZW50cy9leGFtcGxlcy9TaW1wbGUudnVlIiwid2VicGFjazovL3Z1ZS11bmljb3JuLWxvZy9jb21wb25lbnRzL2V4YW1wbGVzL1N0eWxlcy52dWUiLCJ3ZWJwYWNrOi8vdnVlLXVuaWNvcm4tbG9nL2NvbXBvbmVudHMvZXhhbXBsZXMvVGV4dC52dWUiLCJ3ZWJwYWNrOi8vdnVlLXVuaWNvcm4tbG9nL2NvbXBvbmVudHMvZXhhbXBsZXMvVHlwZS52dWUiLCJ3ZWJwYWNrOi8vdnVlLXVuaWNvcm4tbG9nL2RvY3MvVW5pY29ybkxvZy52dWUiLCJ3ZWJwYWNrOi8vdnVlLXVuaWNvcm4tbG9nLy4vcGx1Z2lucy9Vbmljb3JuTG9nLmpzIiwid2VicGFjazovL3Z1ZS11bmljb3JuLWxvZy8uL3BsdWdpbnMvVW5pY29ybkxvZ0NvcmUuanMiLCJ3ZWJwYWNrOi8vdnVlLXVuaWNvcm4tbG9nLy4uL25vZGVfbW9kdWxlcy92dWUtY29kZS1oaWdobGlnaHQvdGhlbWVzL3ByaXNtLXRvbW9ycm93LmNzcyIsIndlYnBhY2s6Ly92dWUtdW5pY29ybi1sb2cvLi4vbm9kZV9tb2R1bGVzL3Z1ZS1jb2RlLWhpZ2hsaWdodC90aGVtZXMvd2luZG93LmNzcyIsIndlYnBhY2s6Ly92dWUtdW5pY29ybi1sb2cvLi9kb2NzL1VuaWNvcm5Mb2cudnVlP2E2Y2UiLCJ3ZWJwYWNrOi8vdnVlLXVuaWNvcm4tbG9nLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vdnVlLXVuaWNvcm4tbG9nLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9nZXRVcmwuanMiLCJ3ZWJwYWNrOi8vdnVlLXVuaWNvcm4tbG9nLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzIiwid2VicGFjazovL3Z1ZS11bmljb3JuLWxvZy8uLi9ub2RlX21vZHVsZXMvZXZlbnRzL2V2ZW50cy5qcyIsIndlYnBhY2s6Ly92dWUtdW5pY29ybi1sb2cvLi4vbm9kZV9tb2R1bGVzL2h0bWwtZW50aXRpZXMvbGliL2luZGV4LmpzIiwid2VicGFjazovL3Z1ZS11bmljb3JuLWxvZy8uLi9ub2RlX21vZHVsZXMvaHRtbC1lbnRpdGllcy9saWIvbmFtZWQtcmVmZXJlbmNlcy5qcyIsIndlYnBhY2s6Ly92dWUtdW5pY29ybi1sb2cvLi4vbm9kZV9tb2R1bGVzL2h0bWwtZW50aXRpZXMvbGliL251bWVyaWMtdW5pY29kZS1tYXAuanMiLCJ3ZWJwYWNrOi8vdnVlLXVuaWNvcm4tbG9nLy4uL25vZGVfbW9kdWxlcy9odG1sLWVudGl0aWVzL2xpYi9zdXJyb2dhdGUtcGFpcnMuanMiLCJ3ZWJwYWNrOi8vdnVlLXVuaWNvcm4tbG9nLy4uL25vZGVfbW9kdWxlcy92dWUtY29kZS1oaWdobGlnaHQvZGlzdC92dWUtY29kZS1oaWdobGlnaHQuZXNtLmpzIiwid2VicGFjazovL3Z1ZS11bmljb3JuLWxvZy8uL0FwcC52dWU/OTAwOSIsIndlYnBhY2s6Ly92dWUtdW5pY29ybi1sb2cvLi9jb21wb25lbnRzL05hdi52dWUiLCJ3ZWJwYWNrOi8vdnVlLXVuaWNvcm4tbG9nLy4vY29tcG9uZW50cy9leGFtcGxlcy9BcnJheXMudnVlIiwid2VicGFjazovL3Z1ZS11bmljb3JuLWxvZy8uL2NvbXBvbmVudHMvZXhhbXBsZXMvRGlzYWJsZWQudnVlIiwid2VicGFjazovL3Z1ZS11bmljb3JuLWxvZy8uL2NvbXBvbmVudHMvZXhhbXBsZXMvTG9nUHJlZml4LnZ1ZSIsIndlYnBhY2s6Ly92dWUtdW5pY29ybi1sb2cvLi9jb21wb25lbnRzL2V4YW1wbGVzL01hZ2ljYWwudnVlIiwid2VicGFjazovL3Z1ZS11bmljb3JuLWxvZy8uL2NvbXBvbmVudHMvZXhhbXBsZXMvT2JqZWN0cy52dWUiLCJ3ZWJwYWNrOi8vdnVlLXVuaWNvcm4tbG9nLy4vY29tcG9uZW50cy9leGFtcGxlcy9TaW1wbGUudnVlIiwid2VicGFjazovL3Z1ZS11bmljb3JuLWxvZy8uL2NvbXBvbmVudHMvZXhhbXBsZXMvU3R5bGVzLnZ1ZSIsIndlYnBhY2s6Ly92dWUtdW5pY29ybi1sb2cvLi9jb21wb25lbnRzL2V4YW1wbGVzL1RleHQudnVlIiwid2VicGFjazovL3Z1ZS11bmljb3JuLWxvZy8uL2NvbXBvbmVudHMvZXhhbXBsZXMvVHlwZS52dWUiLCJ3ZWJwYWNrOi8vdnVlLXVuaWNvcm4tbG9nLy4vZG9jcy9Vbmljb3JuTG9nLnZ1ZSIsIndlYnBhY2s6Ly92dWUtdW5pY29ybi1sb2cvLi9BcHAudnVlPzE2ZDkiLCJ3ZWJwYWNrOi8vdnVlLXVuaWNvcm4tbG9nLy4vY29tcG9uZW50cy9OYXYudnVlP2VhYjIiLCJ3ZWJwYWNrOi8vdnVlLXVuaWNvcm4tbG9nLy4vY29tcG9uZW50cy9leGFtcGxlcy9BcnJheXMudnVlPzgxMmYiLCJ3ZWJwYWNrOi8vdnVlLXVuaWNvcm4tbG9nLy4vY29tcG9uZW50cy9leGFtcGxlcy9EaXNhYmxlZC52dWU/NTJhZCIsIndlYnBhY2s6Ly92dWUtdW5pY29ybi1sb2cvLi9jb21wb25lbnRzL2V4YW1wbGVzL0xvZ1ByZWZpeC52dWU/ZGNiNiIsIndlYnBhY2s6Ly92dWUtdW5pY29ybi1sb2cvLi9jb21wb25lbnRzL2V4YW1wbGVzL01hZ2ljYWwudnVlP2QxOTMiLCJ3ZWJwYWNrOi8vdnVlLXVuaWNvcm4tbG9nLy4vY29tcG9uZW50cy9leGFtcGxlcy9PYmplY3RzLnZ1ZT85Zjc3Iiwid2VicGFjazovL3Z1ZS11bmljb3JuLWxvZy8uL2NvbXBvbmVudHMvZXhhbXBsZXMvU2ltcGxlLnZ1ZT8wYjc2Iiwid2VicGFjazovL3Z1ZS11bmljb3JuLWxvZy8uL2NvbXBvbmVudHMvZXhhbXBsZXMvU3R5bGVzLnZ1ZT9iOTI3Iiwid2VicGFjazovL3Z1ZS11bmljb3JuLWxvZy8uL2NvbXBvbmVudHMvZXhhbXBsZXMvVGV4dC52dWU/MTQ3NCIsIndlYnBhY2s6Ly92dWUtdW5pY29ybi1sb2cvLi9jb21wb25lbnRzL2V4YW1wbGVzL1R5cGUudnVlPzJlYjAiLCJ3ZWJwYWNrOi8vdnVlLXVuaWNvcm4tbG9nLy4vZG9jcy9Vbmljb3JuTG9nLnZ1ZT85ZWM2Iiwid2VicGFjazovL3Z1ZS11bmljb3JuLWxvZy8uL0FwcC52dWU/OTFiYyIsIndlYnBhY2s6Ly92dWUtdW5pY29ybi1sb2cvLi9jb21wb25lbnRzL05hdi52dWU/OGY1ZSIsIndlYnBhY2s6Ly92dWUtdW5pY29ybi1sb2cvLi9jb21wb25lbnRzL2V4YW1wbGVzL0FycmF5cy52dWU/NWQ5YSIsIndlYnBhY2s6Ly92dWUtdW5pY29ybi1sb2cvLi9jb21wb25lbnRzL2V4YW1wbGVzL0Rpc2FibGVkLnZ1ZT9jOTkxIiwid2VicGFjazovL3Z1ZS11bmljb3JuLWxvZy8uL2NvbXBvbmVudHMvZXhhbXBsZXMvTG9nUHJlZml4LnZ1ZT8xNGRjIiwid2VicGFjazovL3Z1ZS11bmljb3JuLWxvZy8uL2NvbXBvbmVudHMvZXhhbXBsZXMvTWFnaWNhbC52dWU/ZjEyOCIsIndlYnBhY2s6Ly92dWUtdW5pY29ybi1sb2cvLi9jb21wb25lbnRzL2V4YW1wbGVzL09iamVjdHMudnVlPzMxMTMiLCJ3ZWJwYWNrOi8vdnVlLXVuaWNvcm4tbG9nLy4vY29tcG9uZW50cy9leGFtcGxlcy9TaW1wbGUudnVlPzgzMmEiLCJ3ZWJwYWNrOi8vdnVlLXVuaWNvcm4tbG9nLy4vY29tcG9uZW50cy9leGFtcGxlcy9TdHlsZXMudnVlPzc3M2MiLCJ3ZWJwYWNrOi8vdnVlLXVuaWNvcm4tbG9nLy4vY29tcG9uZW50cy9leGFtcGxlcy9UZXh0LnZ1ZT9lYWRiIiwid2VicGFjazovL3Z1ZS11bmljb3JuLWxvZy8uL2NvbXBvbmVudHMvZXhhbXBsZXMvVHlwZS52dWU/YTdiZiIsIndlYnBhY2s6Ly92dWUtdW5pY29ybi1sb2cvLi9kb2NzL1VuaWNvcm5Mb2cudnVlP2U5OWIiLCJ3ZWJwYWNrOi8vdnVlLXVuaWNvcm4tbG9nLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9ydW50aW1lL2NvbXBvbmVudE5vcm1hbGl6ZXIuanMiLCJ3ZWJwYWNrOi8vdnVlLXVuaWNvcm4tbG9nLy4vZG9jcy9Vbmljb3JuTG9nLnZ1ZT8zMmYzIiwid2VicGFjazovL3Z1ZS11bmljb3JuLWxvZy8uLi9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzQ2xpZW50LmpzIiwid2VicGFjazovL3Z1ZS11bmljb3JuLWxvZy8uLi9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlci9saWIvbGlzdFRvU3R5bGVzLmpzIiwid2VicGFjazovL3Z1ZS11bmljb3JuLWxvZy8uLi9ub2RlX21vZHVsZXMvdnVlL2Rpc3QvdnVlLnJ1bnRpbWUuZXNtLmpzIiwid2VicGFjazovL3Z1ZS11bmljb3JuLWxvZy8uLi9ub2RlX21vZHVsZXMvd2VicGFjay1kZXYtc2VydmVyL2NsaWVudC9jbGllbnRzL1dlYlNvY2tldENsaWVudC5qcyIsIndlYnBhY2s6Ly92dWUtdW5pY29ybi1sb2cvLi4vbm9kZV9tb2R1bGVzL3dlYnBhY2stZGV2LXNlcnZlci9jbGllbnQvbW9kdWxlcy9sb2dnZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdnVlLXVuaWNvcm4tbG9nLy4uL25vZGVfbW9kdWxlcy93ZWJwYWNrLWRldi1zZXJ2ZXIvY2xpZW50L21vZHVsZXMvc3RyaXAtYW5zaS9pbmRleC5qcyIsIndlYnBhY2s6Ly92dWUtdW5pY29ybi1sb2cvLi4vbm9kZV9tb2R1bGVzL3dlYnBhY2stZGV2LXNlcnZlci9jbGllbnQvb3ZlcmxheS5qcyIsIndlYnBhY2s6Ly92dWUtdW5pY29ybi1sb2cvLi4vbm9kZV9tb2R1bGVzL3dlYnBhY2stZGV2LXNlcnZlci9jbGllbnQvc29ja2V0LmpzIiwid2VicGFjazovL3Z1ZS11bmljb3JuLWxvZy8uLi9ub2RlX21vZHVsZXMvd2VicGFjay1kZXYtc2VydmVyL2NsaWVudC91dGlscy9jcmVhdGVTb2NrZXRVUkwuanMiLCJ3ZWJwYWNrOi8vdnVlLXVuaWNvcm4tbG9nLy4uL25vZGVfbW9kdWxlcy93ZWJwYWNrLWRldi1zZXJ2ZXIvY2xpZW50L3V0aWxzL2dldEN1cnJlbnRTY3JpcHRTb3VyY2UuanMiLCJ3ZWJwYWNrOi8vdnVlLXVuaWNvcm4tbG9nLy4uL25vZGVfbW9kdWxlcy93ZWJwYWNrLWRldi1zZXJ2ZXIvY2xpZW50L3V0aWxzL2xvZy5qcyIsIndlYnBhY2s6Ly92dWUtdW5pY29ybi1sb2cvLi4vbm9kZV9tb2R1bGVzL3dlYnBhY2stZGV2LXNlcnZlci9jbGllbnQvdXRpbHMvcGFyc2VVUkwuanMiLCJ3ZWJwYWNrOi8vdnVlLXVuaWNvcm4tbG9nLy4uL25vZGVfbW9kdWxlcy93ZWJwYWNrLWRldi1zZXJ2ZXIvY2xpZW50L3V0aWxzL3JlbG9hZEFwcC5qcyIsIndlYnBhY2s6Ly92dWUtdW5pY29ybi1sb2cvLi4vbm9kZV9tb2R1bGVzL3dlYnBhY2stZGV2LXNlcnZlci9jbGllbnQvdXRpbHMvc2VuZE1lc3NhZ2UuanMiLCJ3ZWJwYWNrOi8vdnVlLXVuaWNvcm4tbG9nLy4uL25vZGVfbW9kdWxlcy93ZWJwYWNrL2hvdC9lbWl0dGVyLmpzIiwid2VicGFjazovL3Z1ZS11bmljb3JuLWxvZy8uLi9ub2RlX21vZHVsZXMvd2VicGFjay9ob3QvbG9nLmpzIiwid2VicGFjazovL3Z1ZS11bmljb3JuLWxvZy93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly92dWUtdW5pY29ybi1sb2cvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vdnVlLXVuaWNvcm4tbG9nL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly92dWUtdW5pY29ybi1sb2cvd2VicGFjay9ydW50aW1lL2dldEZ1bGxIYXNoIiwid2VicGFjazovL3Z1ZS11bmljb3JuLWxvZy93ZWJwYWNrL3J1bnRpbWUvZ2xvYmFsIiwid2VicGFjazovL3Z1ZS11bmljb3JuLWxvZy93ZWJwYWNrL3J1bnRpbWUvaGFybW9ueSBtb2R1bGUgZGVjb3JhdG9yIiwid2VicGFjazovL3Z1ZS11bmljb3JuLWxvZy93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL3Z1ZS11bmljb3JuLWxvZy93ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovL3Z1ZS11bmljb3JuLWxvZy93ZWJwYWNrL3J1bnRpbWUvanNvbnAgY2h1bmsgbG9hZGluZyIsIndlYnBhY2s6Ly92dWUtdW5pY29ybi1sb2cvLi4vbm9kZV9tb2R1bGVzL3dlYnBhY2stZGV2LXNlcnZlci9jbGllbnQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdnVlLXVuaWNvcm4tbG9nLy4vbWFpbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gd2VicGFja1VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24ocm9vdCwgZmFjdG9yeSkge1xuXHRpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG5cdGVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKVxuXHRcdGRlZmluZShbXSwgZmFjdG9yeSk7XG5cdGVsc2UgaWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKVxuXHRcdGV4cG9ydHNbXCJ2dWUtdW5pY29ybi1sb2dcIl0gPSBmYWN0b3J5KCk7XG5cdGVsc2Vcblx0XHRyb290W1widnVlLXVuaWNvcm4tbG9nXCJdID0gZmFjdG9yeSgpO1xufSkoc2VsZiwgZnVuY3Rpb24oKSB7XG5yZXR1cm4gIiwiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gYW5zaUhUTUxcblxuLy8gUmVmZXJlbmNlIHRvIGh0dHBzOi8vZ2l0aHViLmNvbS9zaW5kcmVzb3JodXMvYW5zaS1yZWdleFxudmFyIF9yZWdBTlNJID0gLyg/Oig/OlxcdTAwMWJcXFspfFxcdTAwOWIpKD86KD86WzAtOV17MSwzfSk/KD86KD86O1swLTldezAsM30pKik/W0EtTXxmLW1dKXxcXHUwMDFiW0EtTV0vXG5cbnZhciBfZGVmQ29sb3JzID0ge1xuICByZXNldDogWydmZmYnLCAnMDAwJ10sIC8vIFtGT1JFR1JPVURfQ09MT1IsIEJBQ0tHUk9VTkRfQ09MT1JdXG4gIGJsYWNrOiAnMDAwJyxcbiAgcmVkOiAnZmYwMDAwJyxcbiAgZ3JlZW46ICcyMDk4MDUnLFxuICB5ZWxsb3c6ICdlOGJmMDMnLFxuICBibHVlOiAnMDAwMGZmJyxcbiAgbWFnZW50YTogJ2ZmMDBmZicsXG4gIGN5YW46ICcwMGZmZWUnLFxuICBsaWdodGdyZXk6ICdmMGYwZjAnLFxuICBkYXJrZ3JleTogJzg4OCdcbn1cbnZhciBfc3R5bGVzID0ge1xuICAzMDogJ2JsYWNrJyxcbiAgMzE6ICdyZWQnLFxuICAzMjogJ2dyZWVuJyxcbiAgMzM6ICd5ZWxsb3cnLFxuICAzNDogJ2JsdWUnLFxuICAzNTogJ21hZ2VudGEnLFxuICAzNjogJ2N5YW4nLFxuICAzNzogJ2xpZ2h0Z3JleSdcbn1cbnZhciBfb3BlblRhZ3MgPSB7XG4gICcxJzogJ2ZvbnQtd2VpZ2h0OmJvbGQnLCAvLyBib2xkXG4gICcyJzogJ29wYWNpdHk6MC41JywgLy8gZGltXG4gICczJzogJzxpPicsIC8vIGl0YWxpY1xuICAnNCc6ICc8dT4nLCAvLyB1bmRlcnNjb3JlXG4gICc4JzogJ2Rpc3BsYXk6bm9uZScsIC8vIGhpZGRlblxuICAnOSc6ICc8ZGVsPicgLy8gZGVsZXRlXG59XG52YXIgX2Nsb3NlVGFncyA9IHtcbiAgJzIzJzogJzwvaT4nLCAvLyByZXNldCBpdGFsaWNcbiAgJzI0JzogJzwvdT4nLCAvLyByZXNldCB1bmRlcnNjb3JlXG4gICcyOSc6ICc8L2RlbD4nIC8vIHJlc2V0IGRlbGV0ZVxufVxuXG47WzAsIDIxLCAyMiwgMjcsIDI4LCAzOSwgNDldLmZvckVhY2goZnVuY3Rpb24gKG4pIHtcbiAgX2Nsb3NlVGFnc1tuXSA9ICc8L3NwYW4+J1xufSlcblxuLyoqXG4gKiBDb252ZXJ0cyB0ZXh0IHdpdGggQU5TSSBjb2xvciBjb2RlcyB0byBIVE1MIG1hcmt1cC5cbiAqIEBwYXJhbSB7U3RyaW5nfSB0ZXh0XG4gKiBAcmV0dXJucyB7Kn1cbiAqL1xuZnVuY3Rpb24gYW5zaUhUTUwgKHRleHQpIHtcbiAgLy8gUmV0dXJucyB0aGUgdGV4dCBpZiB0aGUgc3RyaW5nIGhhcyBubyBBTlNJIGVzY2FwZSBjb2RlLlxuICBpZiAoIV9yZWdBTlNJLnRlc3QodGV4dCkpIHtcbiAgICByZXR1cm4gdGV4dFxuICB9XG5cbiAgLy8gQ2FjaGUgb3BlbmVkIHNlcXVlbmNlLlxuICB2YXIgYW5zaUNvZGVzID0gW11cbiAgLy8gUmVwbGFjZSB3aXRoIG1hcmt1cC5cbiAgdmFyIHJldCA9IHRleHQucmVwbGFjZSgvXFwwMzNcXFsoXFxkKyltL2csIGZ1bmN0aW9uIChtYXRjaCwgc2VxKSB7XG4gICAgdmFyIG90ID0gX29wZW5UYWdzW3NlcV1cbiAgICBpZiAob3QpIHtcbiAgICAgIC8vIElmIGN1cnJlbnQgc2VxdWVuY2UgaGFzIGJlZW4gb3BlbmVkLCBjbG9zZSBpdC5cbiAgICAgIGlmICghIX5hbnNpQ29kZXMuaW5kZXhPZihzZXEpKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZXh0cmEtYm9vbGVhbi1jYXN0XG4gICAgICAgIGFuc2lDb2Rlcy5wb3AoKVxuICAgICAgICByZXR1cm4gJzwvc3Bhbj4nXG4gICAgICB9XG4gICAgICAvLyBPcGVuIHRhZy5cbiAgICAgIGFuc2lDb2Rlcy5wdXNoKHNlcSlcbiAgICAgIHJldHVybiBvdFswXSA9PT0gJzwnID8gb3QgOiAnPHNwYW4gc3R5bGU9XCInICsgb3QgKyAnO1wiPidcbiAgICB9XG5cbiAgICB2YXIgY3QgPSBfY2xvc2VUYWdzW3NlcV1cbiAgICBpZiAoY3QpIHtcbiAgICAgIC8vIFBvcCBzZXF1ZW5jZVxuICAgICAgYW5zaUNvZGVzLnBvcCgpXG4gICAgICByZXR1cm4gY3RcbiAgICB9XG4gICAgcmV0dXJuICcnXG4gIH0pXG5cbiAgLy8gTWFrZSBzdXJlIHRhZ3MgYXJlIGNsb3NlZC5cbiAgdmFyIGwgPSBhbnNpQ29kZXMubGVuZ3RoXG4gIDsobCA+IDApICYmIChyZXQgKz0gQXJyYXkobCArIDEpLmpvaW4oJzwvc3Bhbj4nKSlcblxuICByZXR1cm4gcmV0XG59XG5cbi8qKlxuICogQ3VzdG9taXplIGNvbG9ycy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb2xvcnMgcmVmZXJlbmNlIHRvIF9kZWZDb2xvcnNcbiAqL1xuYW5zaUhUTUwuc2V0Q29sb3JzID0gZnVuY3Rpb24gKGNvbG9ycykge1xuICBpZiAodHlwZW9mIGNvbG9ycyAhPT0gJ29iamVjdCcpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2Bjb2xvcnNgIHBhcmFtZXRlciBtdXN0IGJlIGFuIE9iamVjdC4nKVxuICB9XG5cbiAgdmFyIF9maW5hbENvbG9ycyA9IHt9XG4gIGZvciAodmFyIGtleSBpbiBfZGVmQ29sb3JzKSB7XG4gICAgdmFyIGhleCA9IGNvbG9ycy5oYXNPd25Qcm9wZXJ0eShrZXkpID8gY29sb3JzW2tleV0gOiBudWxsXG4gICAgaWYgKCFoZXgpIHtcbiAgICAgIF9maW5hbENvbG9yc1trZXldID0gX2RlZkNvbG9yc1trZXldXG4gICAgICBjb250aW51ZVxuICAgIH1cbiAgICBpZiAoJ3Jlc2V0JyA9PT0ga2V5KSB7XG4gICAgICBpZiAodHlwZW9mIGhleCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaGV4ID0gW2hleF1cbiAgICAgIH1cbiAgICAgIGlmICghQXJyYXkuaXNBcnJheShoZXgpIHx8IGhleC5sZW5ndGggPT09IDAgfHwgaGV4LnNvbWUoZnVuY3Rpb24gKGgpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBoICE9PSAnc3RyaW5nJ1xuICAgICAgfSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgdmFsdWUgb2YgYCcgKyBrZXkgKyAnYCBwcm9wZXJ0eSBtdXN0IGJlIGFuIEFycmF5IGFuZCBlYWNoIGl0ZW0gY291bGQgb25seSBiZSBhIGhleCBzdHJpbmcsIGUuZy46IEZGMDAwMCcpXG4gICAgICB9XG4gICAgICB2YXIgZGVmSGV4Q29sb3IgPSBfZGVmQ29sb3JzW2tleV1cbiAgICAgIGlmICghaGV4WzBdKSB7XG4gICAgICAgIGhleFswXSA9IGRlZkhleENvbG9yWzBdXG4gICAgICB9XG4gICAgICBpZiAoaGV4Lmxlbmd0aCA9PT0gMSB8fCAhaGV4WzFdKSB7XG4gICAgICAgIGhleCA9IFtoZXhbMF1dXG4gICAgICAgIGhleC5wdXNoKGRlZkhleENvbG9yWzFdKVxuICAgICAgfVxuXG4gICAgICBoZXggPSBoZXguc2xpY2UoMCwgMilcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBoZXggIT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSB2YWx1ZSBvZiBgJyArIGtleSArICdgIHByb3BlcnR5IG11c3QgYmUgYSBoZXggc3RyaW5nLCBlLmcuOiBGRjAwMDAnKVxuICAgIH1cbiAgICBfZmluYWxDb2xvcnNba2V5XSA9IGhleFxuICB9XG4gIF9zZXRUYWdzKF9maW5hbENvbG9ycylcbn1cblxuLyoqXG4gKiBSZXNldCBjb2xvcnMuXG4gKi9cbmFuc2lIVE1MLnJlc2V0ID0gZnVuY3Rpb24gKCkge1xuICBfc2V0VGFncyhfZGVmQ29sb3JzKVxufVxuXG4vKipcbiAqIEV4cG9zZSB0YWdzLCBpbmNsdWRpbmcgb3BlbiBhbmQgY2xvc2UuXG4gKiBAdHlwZSB7T2JqZWN0fVxuICovXG5hbnNpSFRNTC50YWdzID0ge31cblxuaWYgKE9iamVjdC5kZWZpbmVQcm9wZXJ0eSkge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoYW5zaUhUTUwudGFncywgJ29wZW4nLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBfb3BlblRhZ3MgfVxuICB9KVxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoYW5zaUhUTUwudGFncywgJ2Nsb3NlJywge1xuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gX2Nsb3NlVGFncyB9XG4gIH0pXG59IGVsc2Uge1xuICBhbnNpSFRNTC50YWdzLm9wZW4gPSBfb3BlblRhZ3NcbiAgYW5zaUhUTUwudGFncy5jbG9zZSA9IF9jbG9zZVRhZ3Ncbn1cblxuZnVuY3Rpb24gX3NldFRhZ3MgKGNvbG9ycykge1xuICAvLyByZXNldCBhbGxcbiAgX29wZW5UYWdzWycwJ10gPSAnZm9udC13ZWlnaHQ6bm9ybWFsO29wYWNpdHk6MTtjb2xvcjojJyArIGNvbG9ycy5yZXNldFswXSArICc7YmFja2dyb3VuZDojJyArIGNvbG9ycy5yZXNldFsxXVxuICAvLyBpbnZlcnNlXG4gIF9vcGVuVGFnc1snNyddID0gJ2NvbG9yOiMnICsgY29sb3JzLnJlc2V0WzFdICsgJztiYWNrZ3JvdW5kOiMnICsgY29sb3JzLnJlc2V0WzBdXG4gIC8vIGRhcmsgZ3JleVxuICBfb3BlblRhZ3NbJzkwJ10gPSAnY29sb3I6IycgKyBjb2xvcnMuZGFya2dyZXlcblxuICBmb3IgKHZhciBjb2RlIGluIF9zdHlsZXMpIHtcbiAgICB2YXIgY29sb3IgPSBfc3R5bGVzW2NvZGVdXG4gICAgdmFyIG9yaUNvbG9yID0gY29sb3JzW2NvbG9yXSB8fCAnMDAwJ1xuICAgIF9vcGVuVGFnc1tjb2RlXSA9ICdjb2xvcjojJyArIG9yaUNvbG9yXG4gICAgY29kZSA9IHBhcnNlSW50KGNvZGUpXG4gICAgX29wZW5UYWdzWyhjb2RlICsgMTApLnRvU3RyaW5nKCldID0gJ2JhY2tncm91bmQ6IycgKyBvcmlDb2xvclxuICB9XG59XG5cbmFuc2lIVE1MLnJlc2V0KClcbiIsIjx0ZW1wbGF0ZT5cblx0PGRpdj5cblx0XHQ8VW5pY29ybkxvZyAvPlxuXHQ8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgVnVlIGZyb20gJ3Z1ZSc7XG5pbXBvcnQgVW5pY29ybkxvZyBmcm9tICdAZG9jcy9Vbmljb3JuTG9nLnZ1ZSc7XG5cbmNvbnN0IEV2ZW50QnVzID0gbmV3IFZ1ZSgpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyhWdWUucHJvdG90eXBlLCB7XG5cdCRidXM6IHtcblx0XHRnZXQoKSB7XG5cdFx0XHRyZXR1cm4gRXZlbnRCdXM7XG5cdFx0fSxcblx0fSxcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCB7XG5cdG5hbWU6ICdBcHAnLFxuXHRjb21wb25lbnRzOiB7XG5cdFx0VW5pY29ybkxvZyxcblx0fSxcbn07XG48L3NjcmlwdD5cbiIsIjx0ZW1wbGF0ZT5cblx0PG5hdiBjbGFzcz1cIm5hdmJhciBzdGlja3ktdG9wIG5hdmJhci1leHBhbmQtbGcgbmF2YmFyLWRhcmsgYmctZGFyayBtYi01XCI+XG5cdFx0PGRpdiBjbGFzcz1cImNvbnRhaW5lclwiPlxuXHRcdFx0PGEgY2xhc3M9XCJuYXZiYXItYnJhbmRcIiBocmVmPVwiL1wiPvCfpoQgVnVlIFVuaWNvcm5Mb2c8L2E+XG5cdFx0XHQ8YnV0dG9uXG5cdFx0XHRcdGNsYXNzPVwibmF2YmFyLXRvZ2dsZXJcIlxuXHRcdFx0XHR0eXBlPVwiYnV0dG9uXCJcblx0XHRcdFx0ZGF0YS1icy10b2dnbGU9XCJjb2xsYXBzZVwiXG5cdFx0XHRcdGRhdGEtYnMtdGFyZ2V0PVwiI25hdmJhclN1cHBvcnRlZENvbnRlbnRcIlxuXHRcdFx0XHRhcmlhLWNvbnRyb2xzPVwibmF2YmFyU3VwcG9ydGVkQ29udGVudFwiXG5cdFx0XHRcdGFyaWEtZXhwYW5kZWQ9XCJmYWxzZVwiXG5cdFx0XHRcdGFyaWEtbGFiZWw9XCJUb2dnbGUgbmF2aWdhdGlvblwiXG5cdFx0XHQ+XG5cdFx0XHRcdDxzcGFuIGNsYXNzPVwibmF2YmFyLXRvZ2dsZXItaWNvblwiPjwvc3Bhbj5cblx0XHRcdDwvYnV0dG9uPlxuXHRcdFx0PGRpdiBjbGFzcz1cImNvbGxhcHNlIG5hdmJhci1jb2xsYXBzZVwiIGlkPVwibmF2YmFyU3VwcG9ydGVkQ29udGVudFwiPlxuXHRcdFx0XHQ8dWwgY2xhc3M9XCJuYXZiYXItbmF2IG1lLWF1dG8gbWItMiBtYi1sZy0wXCI+XG5cdFx0XHRcdFx0PGxpIGNsYXNzPVwibmF2LWl0ZW1cIj5cblx0XHRcdFx0XHRcdDxhIGNsYXNzPVwibmF2LWxpbmsgYWN0aXZlXCIgYXJpYS1jdXJyZW50PVwicGFnZVwiIGhyZWY9XCIvXCI+SG9tZTwvYT5cblx0XHRcdFx0XHQ8L2xpPlxuXHRcdFx0XHRcdDxsaSBjbGFzcz1cIm5hdi1pdGVtIGRyb3Bkb3duXCI+XG5cdFx0XHRcdFx0XHQ8YVxuXHRcdFx0XHRcdFx0XHRjbGFzcz1cIm5hdi1saW5rIGRyb3Bkb3duLXRvZ2dsZVwiXG5cdFx0XHRcdFx0XHRcdGhyZWY9XCIjXCJcblx0XHRcdFx0XHRcdFx0aWQ9XCJkb2NzLWRyb3Bkb3duXCJcblx0XHRcdFx0XHRcdFx0cm9sZT1cImJ1dHRvblwiXG5cdFx0XHRcdFx0XHRcdGRhdGEtYnMtdG9nZ2xlPVwiZHJvcGRvd25cIlxuXHRcdFx0XHRcdFx0XHRhcmlhLWV4cGFuZGVkPVwiZmFsc2VcIlxuXHRcdFx0XHRcdFx0PlxuXHRcdFx0XHRcdFx0XHREb2NzXG5cdFx0XHRcdFx0XHQ8L2E+XG5cdFx0XHRcdFx0XHQ8dWxcblx0XHRcdFx0XHRcdFx0Y2xhc3M9XCJkcm9wZG93bi1tZW51IGRyb3Bkb3duLW1lbnUtZGFya1wiXG5cdFx0XHRcdFx0XHRcdGFyaWEtbGFiZWxsZWRieT1cImRvY3MtZHJvcGRvd25cIlxuXHRcdFx0XHRcdFx0PlxuXHRcdFx0XHRcdFx0XHQ8bGk+XG5cdFx0XHRcdFx0XHRcdFx0PGEgY2xhc3M9XCJkcm9wZG93bi1pdGVtXCIgaHJlZj1cIiN1bC1pbnN0YWxsYXRpb25cIj5cblx0XHRcdFx0XHRcdFx0XHRcdEluc3RhbGxhdGlvblxuXHRcdFx0XHRcdFx0XHRcdDwvYT5cblx0XHRcdFx0XHRcdFx0PC9saT5cblx0XHRcdFx0XHRcdFx0PGxpPlxuXHRcdFx0XHRcdFx0XHRcdDxhIGNsYXNzPVwiZHJvcGRvd24taXRlbVwiIGhyZWY9XCIjdWwtdXNhZ2VcIj5Vc2FnZTwvYT5cblx0XHRcdFx0XHRcdFx0PC9saT5cblxuXHRcdFx0XHRcdFx0XHQ8bGk+PGhyIGNsYXNzPVwiZHJvcGRvd24tZGl2aWRlclwiIC8+PC9saT5cblxuXHRcdFx0XHRcdFx0XHQ8IS0tIE9wdGlvbnMgLS0+XG5cdFx0XHRcdFx0XHRcdDxsaT48aDYgY2xhc3M9XCJkcm9wZG93bi1oZWFkZXJcIj5PcHRpb25zPC9oNj48L2xpPlxuXHRcdFx0XHRcdFx0XHQ8bGk+XG5cdFx0XHRcdFx0XHRcdFx0PGEgY2xhc3M9XCJkcm9wZG93bi1pdGVtXCIgaHJlZj1cIiN1bC1wbHVnaW4tb3B0aW9uc1wiPlxuXHRcdFx0XHRcdFx0XHRcdFx0UGx1Z2luIE9wdGlvbnNcblx0XHRcdFx0XHRcdFx0XHQ8L2E+XG5cdFx0XHRcdFx0XHRcdDwvbGk+XG5cdFx0XHRcdFx0XHRcdDxsaT5cblx0XHRcdFx0XHRcdFx0XHQ8YSBjbGFzcz1cImRyb3Bkb3duLWl0ZW1cIiBocmVmPVwiI3VsLWxvZy1vcHRpb25zXCI+TG9nIE9wdGlvbnM8L2E+XG5cdFx0XHRcdFx0XHRcdDwvbGk+XG5cblx0XHRcdFx0XHRcdFx0PGxpPjxociBjbGFzcz1cImRyb3Bkb3duLWRpdmlkZXJcIiAvPjwvbGk+XG5cblx0XHRcdFx0XHRcdFx0PCEtLSBNZXRob2RzIC0tPlxuXHRcdFx0XHRcdFx0XHQ8bGk+PGg2IGNsYXNzPVwiZHJvcGRvd24taGVhZGVyXCI+TWV0aG9kczwvaDY+PC9saT5cblx0XHRcdFx0XHRcdFx0PGxpPlxuXHRcdFx0XHRcdFx0XHRcdDxhIGNsYXNzPVwiZHJvcGRvd24taXRlbVwiIGhyZWY9XCIjdWwtaW5zdGFuY2UtbWV0aG9kc1wiPlxuXHRcdFx0XHRcdFx0XHRcdFx0SW5zdGFuY2UgTWV0aG9kc1xuXHRcdFx0XHRcdFx0XHRcdDwvYT5cblx0XHRcdFx0XHRcdFx0PC9saT5cblx0XHRcdFx0XHRcdFx0PGxpPlxuXHRcdFx0XHRcdFx0XHRcdDxhIGNsYXNzPVwiZHJvcGRvd24taXRlbVwiIGhyZWY9XCIjdWwtY29uc29sZS1tZXRob2RzXCI+XG5cdFx0XHRcdFx0XHRcdFx0XHRDb25zb2xlIE1ldGhvZHNcblx0XHRcdFx0XHRcdFx0XHQ8L2E+XG5cdFx0XHRcdFx0XHRcdDwvbGk+XG5cdFx0XHRcdFx0XHRcdDxsaT48aHIgY2xhc3M9XCJkcm9wZG93bi1kaXZpZGVyXCIgLz48L2xpPlxuXHRcdFx0XHRcdFx0XHQ8bGk+XG5cdFx0XHRcdFx0XHRcdFx0PGEgY2xhc3M9XCJkcm9wZG93bi1pdGVtXCIgaHJlZj1cIiN1bC1leGFtcGxlc1wiPkV4YW1wbGVzPC9hPlxuXHRcdFx0XHRcdFx0XHQ8L2xpPlxuXHRcdFx0XHRcdFx0PC91bD5cblx0XHRcdFx0XHQ8L2xpPlxuXG5cdFx0XHRcdFx0PCEtLSBFeGFtcGxlcyAtLT5cblx0XHRcdFx0XHQ8bGkgY2xhc3M9XCJuYXYtaXRlbSBkcm9wZG93blwiPlxuXHRcdFx0XHRcdFx0PGFcblx0XHRcdFx0XHRcdFx0Y2xhc3M9XCJuYXYtbGluayBkcm9wZG93bi10b2dnbGVcIlxuXHRcdFx0XHRcdFx0XHRocmVmPVwiI1wiXG5cdFx0XHRcdFx0XHRcdGlkPVwiZXhhbXBsZXMtZHJvcGRvd25cIlxuXHRcdFx0XHRcdFx0XHRyb2xlPVwiYnV0dG9uXCJcblx0XHRcdFx0XHRcdFx0ZGF0YS1icy10b2dnbGU9XCJkcm9wZG93blwiXG5cdFx0XHRcdFx0XHRcdGFyaWEtZXhwYW5kZWQ9XCJmYWxzZVwiXG5cdFx0XHRcdFx0XHQ+XG5cdFx0XHRcdFx0XHRcdEV4YW1wbGVzXG5cdFx0XHRcdFx0XHQ8L2E+XG5cdFx0XHRcdFx0XHQ8dWxcblx0XHRcdFx0XHRcdFx0Y2xhc3M9XCJkcm9wZG93bi1tZW51IGRyb3Bkb3duLW1lbnUtZGFya1wiXG5cdFx0XHRcdFx0XHRcdGFyaWEtbGFiZWxsZWRieT1cImV4YW1wbGVzLWRyb3Bkb3duXCJcblx0XHRcdFx0XHRcdD5cblx0XHRcdFx0XHRcdFx0PGxpPlxuXHRcdFx0XHRcdFx0XHRcdDxhIGNsYXNzPVwiZHJvcGRvd24taXRlbVwiIGhyZWY9XCIjc2ltcGxlLWV4YW1wbGVzXCI+U2ltcGxlPC9hPlxuXHRcdFx0XHRcdFx0XHQ8L2xpPlxuXHRcdFx0XHRcdFx0XHQ8bGk+PGg2IGNsYXNzPVwiZHJvcGRvd24taGVhZGVyXCI+T3B0aW9uczwvaDY+PC9saT5cblx0XHRcdFx0XHRcdFx0PGxpPlxuXHRcdFx0XHRcdFx0XHRcdDxhIGNsYXNzPVwiZHJvcGRvd24taXRlbVwiIGhyZWY9XCIjdGV4dC1leGFtcGxlc1wiPnRleHQ8L2E+XG5cdFx0XHRcdFx0XHRcdDwvbGk+XG5cdFx0XHRcdFx0XHRcdDxsaT5cblx0XHRcdFx0XHRcdFx0XHQ8YSBjbGFzcz1cImRyb3Bkb3duLWl0ZW1cIiBocmVmPVwiI3R5cGUtZXhhbXBsZXNcIj50eXBlPC9hPlxuXHRcdFx0XHRcdFx0XHQ8L2xpPlxuXHRcdFx0XHRcdFx0XHQ8bGk+XG5cdFx0XHRcdFx0XHRcdFx0PGEgY2xhc3M9XCJkcm9wZG93bi1pdGVtXCIgaHJlZj1cIiNzdHlsZXMtZXhhbXBsZXNcIj5zdHlsZXM8L2E+XG5cdFx0XHRcdFx0XHRcdDwvbGk+XG5cdFx0XHRcdFx0XHRcdDxsaT5cblx0XHRcdFx0XHRcdFx0XHQ8YSBjbGFzcz1cImRyb3Bkb3duLWl0ZW1cIiBocmVmPVwiI2Rpc2FibGVkLWV4YW1wbGVzXCI+ZGlzYWJsZWQ8L2E+XG5cdFx0XHRcdFx0XHRcdDwvbGk+XG5cdFx0XHRcdFx0XHRcdDxsaT5cblx0XHRcdFx0XHRcdFx0XHQ8YSBjbGFzcz1cImRyb3Bkb3duLWl0ZW1cIiBocmVmPVwiI2xvZ1ByZWZpeC1leGFtcGxlc1wiPlxuXHRcdFx0XHRcdFx0XHRcdFx0bG9nUHJlZml4XG5cdFx0XHRcdFx0XHRcdFx0PC9hPlxuXHRcdFx0XHRcdFx0XHQ8L2xpPlxuXHRcdFx0XHRcdFx0XHQ8bGk+XG5cdFx0XHRcdFx0XHRcdFx0PGEgY2xhc3M9XCJkcm9wZG93bi1pdGVtXCIgaHJlZj1cIiNtYWdpY2FsLWV4YW1wbGVzXCI+bWFnaWNhbDwvYT5cblx0XHRcdFx0XHRcdFx0PC9saT5cblx0XHRcdFx0XHRcdFx0PGxpPlxuXHRcdFx0XHRcdFx0XHRcdDxhIGNsYXNzPVwiZHJvcGRvd24taXRlbVwiIGhyZWY9XCIjbmFtZS1leGFtcGxlc1wiPm5hbWU8L2E+XG5cdFx0XHRcdFx0XHRcdDwvbGk+XG5cdFx0XHRcdFx0XHRcdDxsaT5cblx0XHRcdFx0XHRcdFx0XHQ8YSBjbGFzcz1cImRyb3Bkb3duLWl0ZW1cIiBocmVmPVwiI29iamVjdHMtZXhhbXBsZXNcIj5vYmplY3RzPC9hPlxuXHRcdFx0XHRcdFx0XHQ8L2xpPlxuXHRcdFx0XHRcdFx0XHQ8bGk+XG5cdFx0XHRcdFx0XHRcdFx0PGEgY2xhc3M9XCJkcm9wZG93bi1pdGVtXCIgaHJlZj1cIiNhcnJheS1leGFtcGxlc1wiPmFycmF5PC9hPlxuXHRcdFx0XHRcdFx0XHQ8L2xpPlxuXHRcdFx0XHRcdFx0PC91bD5cblx0XHRcdFx0XHQ8L2xpPlxuXHRcdFx0XHQ8L3VsPlxuXHRcdFx0XHQ8ZGl2IGNsYXNzPVwiZC1mbGV4XCI+XG5cdFx0XHRcdFx0PHVsIGNsYXNzPVwibmF2YmFyLW5hdiBtZS1hdXRvIG1iLTIgbWItbGctMFwiPlxuXHRcdFx0XHRcdFx0PGxpIGNsYXNzPVwibmF2LWl0ZW1cIj5cblx0XHRcdFx0XHRcdFx0PGEgY2xhc3M9XCJuYXYtbGlua1wiIDpocmVmPVwibGlua3MuZ2l0aHViXCI+R2l0SHViPC9hPlxuXHRcdFx0XHRcdFx0PC9saT5cblx0XHRcdFx0XHRcdDxsaSBjbGFzcz1cIm5hdi1pdGVtXCI+XG5cdFx0XHRcdFx0XHRcdDxhIGNsYXNzPVwibmF2LWxpbmtcIiA6aHJlZj1cImxpbmtzLm5wbVwiPk5QTSBQYWNrYWdlPC9hPlxuXHRcdFx0XHRcdFx0PC9saT5cblx0XHRcdFx0XHQ8L3VsPlxuXHRcdFx0XHQ8L2Rpdj5cblx0XHRcdDwvZGl2PlxuXHRcdDwvZGl2PlxuXHQ8L25hdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5cbmV4cG9ydCBkZWZhdWx0IHtcblx0bmFtZTogJ05hdicsXG5cdGRhdGE6ICgpID0+ICh7XG5cdFx0bGlua3M6IHtcblx0XHRcdGdpdGh1YjogJ2h0dHBzOi8vZ2l0aHViLmNvbS93ZWJkZXZuZXJkc3R1ZmYvdnVlLXVuaWNvcm4tbG9nJyxcblx0XHRcdG5wbTogJ2h0dHBzOi8vZ2l0aHViLmNvbS93ZWJkZXZuZXJkc3R1ZmYvdnVlLXVuaWNvcm4tbG9nJyxcblx0XHR9LFxuXHR9KSxcbn07XG48L3NjcmlwdD5cblxuPHN0eWxlIGxhbmc9XCJzY3NzXCI+XG48L3N0eWxlPlxuIiwiPHRlbXBsYXRlPlxuXHQ8ZGl2PlxuXHRcdDxkaXYgY2xhc3M9XCJyb3cgbWItMlwiPlxuXHRcdFx0PGRpdiBjbGFzcz1cImNvbC0xMlwiPlxuXHRcdFx0XHQ8aDUgY2xhc3M9XCJteS0wXCI+PGNvZGU+YXJyYXk8L2NvZGU+PC9oNT5cblx0XHRcdDwvZGl2PlxuXHRcdDwvZGl2PlxuXG5cdFx0PCEtLSA9PT09PT09PT09PT09PT09PT09PT09PSBTaW1wbGUgRXhhbXBsZSAtLT5cblx0XHQ8ZGl2IGNsYXNzPVwicm93IG1iLTRcIiBpZD1cImFycmF5LXNpbXBsZS1leGFtcGxlXCI+XG5cdFx0XHQ8ZGl2IGNsYXNzPVwiY29sLXhsLTQgY29sLTYgZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlclwiPlxuXHRcdFx0XHQ8aDYgY2xhc3M9XCJteS0wXCI+U2luZ2xlIGFycmF5PC9oNj5cblx0XHRcdDwvZGl2PlxuXHRcdFx0PGRpdiBjbGFzcz1cImNvbC14bC00IGNvbC02IGQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXIganVzdGlmeS1jb250ZW50LWVuZFwiPlxuXHRcdFx0XHQ8YnV0dG9uXG5cdFx0XHRcdFx0QGNsaWNrPVwic2ltcGxlRXhhbXBsZVwiXG5cdFx0XHRcdFx0Y2xhc3M9XCJidG4gYnRuLW91dGxpbmUtcHJpbWFyeSBidG4tc21cIlxuXHRcdFx0XHRcdHR5cGU9XCJidXR0b25cIlxuXHRcdFx0XHQ+XG5cdFx0XHRcdFx0UnVuXG5cdFx0XHRcdDwvYnV0dG9uPlxuXHRcdFx0PC9kaXY+XG5cblx0XHRcdDxkaXYgY2xhc3M9XCJjb2wteGwtOCBjb2wtbGctMTJcIj5cblx0XHRcdFx0PHZ1ZS1jb2RlLWhpZ2hsaWdodCBsYW5ndWFnZT1cImpzXCI+XG5cdFx0XHRcdFx0PHByZT5cbnRoaXMuJHVuaWNvcm5Mb2coe1xuXHR0ZXh0OiAnSGVsbG8gV29ybGQnLFxuXHRhcnJheTogWydmb28nLCAnYmFyJ10sXG59KTtcblx0XHRcdFx0XHRcdDwvcHJlXG5cdFx0XHRcdFx0PlxuXHRcdFx0XHQ8L3Z1ZS1jb2RlLWhpZ2hsaWdodD5cblx0XHRcdDwvZGl2PlxuXHRcdDwvZGl2PlxuXG5cdFx0PCEtLSA9PT09PT09PT09PT09PT09PT09PT09PSBBcnJheSBPYmplY3RzIC0tPlxuXHRcdDxkaXYgY2xhc3M9XCJyb3cgbWItNFwiIGlkPVwiYXJyYXktb2JqZWN0cy1leGFtcGxlXCI+XG5cdFx0XHQ8ZGl2IGNsYXNzPVwiY29sLXhsLTQgY29sLTYgZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlclwiPlxuXHRcdFx0XHQ8aDYgY2xhc3M9XCJteS0wXCI+VXNpbmcgYW4gYXJyYXkgb2Ygb2JqZWN0czwvaDY+XG5cdFx0XHQ8L2Rpdj5cblx0XHRcdDxkaXYgY2xhc3M9XCJjb2wteGwtNCBjb2wtNiBkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyIGp1c3RpZnktY29udGVudC1lbmRcIj5cblx0XHRcdFx0PGJ1dHRvblxuXHRcdFx0XHRcdEBjbGljaz1cIm9iamVjdEFycmF5XCJcblx0XHRcdFx0XHRjbGFzcz1cImJ0biBidG4tb3V0bGluZS1wcmltYXJ5IGJ0bi1zbVwiXG5cdFx0XHRcdFx0dHlwZT1cImJ1dHRvblwiXG5cdFx0XHRcdD5cblx0XHRcdFx0XHRSdW5cblx0XHRcdFx0PC9idXR0b24+XG5cdFx0XHQ8L2Rpdj5cblxuXHRcdFx0PGRpdiBjbGFzcz1cImNvbC14bC04IGNvbC1sZy0xMlwiPlxuXHRcdFx0XHQ8dnVlLWNvZGUtaGlnaGxpZ2h0IGxhbmd1YWdlPVwianNcIj5cblx0XHRcdFx0XHQ8cHJlPlxuY29uc3QgZm9vID0geyBmb286ICdmb28gJyB9O1xuY29uc3QgYmFyID0geyBiYXI6ICdiYXIgJyB9O1xuXG50aGlzLiR1bmljb3JuTG9nKHtcblx0dGV4dDogJ0hlbGxvIFdvcmxkJyxcblx0YXJyYXk6IFtmb28sIGJhcl0sXG59KTtcblx0XHRcdFx0XHRcdDwvcHJlXG5cdFx0XHRcdFx0PlxuXHRcdFx0XHQ8L3Z1ZS1jb2RlLWhpZ2hsaWdodD5cblx0XHRcdDwvZGl2PlxuXHRcdDwvZGl2PlxuXG5cdFx0PCEtLSA9PT09PT09PT09PT09PT09PT09PT09PSBBcnJheSBTcHJlYWQgT3BlcmF0b3IgLS0+XG5cdFx0PGRpdiBjbGFzcz1cInJvdyBtYi00XCIgaWQ9XCJhcnJheS1zcHJlYWQtZXhhbXBsZVwiPlxuXHRcdFx0PGRpdiBjbGFzcz1cImNvbC14bC00IGNvbC02IGQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXJcIj5cblx0XHRcdFx0PGg2IGNsYXNzPVwibXktMFwiPlVzaW5nIGFycmF5IHNwcmVhZCBPcGVyYXRvcjwvaDY+XG5cdFx0XHQ8L2Rpdj5cblx0XHRcdDxkaXYgY2xhc3M9XCJjb2wteGwtNCBjb2wtNiBkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyIGp1c3RpZnktY29udGVudC1lbmRcIj5cblx0XHRcdFx0PGJ1dHRvblxuXHRcdFx0XHRcdEBjbGljaz1cImFycmF5U3ByZWFkT3BlcmF0b3JcIlxuXHRcdFx0XHRcdGNsYXNzPVwiYnRuIGJ0bi1vdXRsaW5lLXByaW1hcnkgYnRuLXNtXCJcblx0XHRcdFx0XHR0eXBlPVwiYnV0dG9uXCJcblx0XHRcdFx0PlxuXHRcdFx0XHRcdFJ1blxuXHRcdFx0XHQ8L2J1dHRvbj5cblx0XHRcdDwvZGl2PlxuXG5cdFx0XHQ8ZGl2IGNsYXNzPVwiY29sLXhsLTggY29sLWxnLTEyXCI+XG5cdFx0XHRcdDx2dWUtY29kZS1oaWdobGlnaHQgbGFuZ3VhZ2U9XCJqc1wiPlxuXHRcdFx0XHRcdDxwcmU+XG5jb25zdCBmb28gPSBbJ2ZvbyddO1xuY29uc3QgYmFyID0gWydiYXInXTtcblxudGhpcy4kdW5pY29ybkxvZyh7XG5cdHRleHQ6ICdIZWxsbyBXb3JsZCcsXG5cdGFycmF5OiBbLi4uZm9vLCAuLi5iYXJdLFxufSk7XG5cdFx0XHRcdFx0XHQ8L3ByZVxuXHRcdFx0XHRcdD5cblx0XHRcdFx0PC92dWUtY29kZS1oaWdobGlnaHQ+XG5cdFx0XHQ8L2Rpdj5cblx0XHQ8L2Rpdj5cblx0PC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IFZ1ZSBmcm9tICd2dWUnO1xuaW1wb3J0IFVuaWNvcm5Mb2cgZnJvbSAnQHBsdWdpbnMvVW5pY29ybkxvZyc7XG5pbXBvcnQgeyBjb21wb25lbnQgYXMgVnVlQ29kZUhpZ2hsaWdodCB9IGZyb20gJ3Z1ZS1jb2RlLWhpZ2hsaWdodCc7XG5cblZ1ZS51c2UoVW5pY29ybkxvZyk7XG5cbmV4cG9ydCBkZWZhdWx0IHtcblx0bmFtZTogJ0FycmF5c0V4YW1wbGUnLFxuXHRjb21wb25lbnRzOiB7XG5cdFx0VnVlQ29kZUhpZ2hsaWdodCxcblx0fSxcblx0ZGF0YTogKCkgPT4gKHt9KSxcblx0bWV0aG9kczoge1xuXHRcdHNpbXBsZUV4YW1wbGUoKSB7XG5cdFx0XHR0aGlzLiR1bmljb3JuTG9nKHtcblx0XHRcdFx0dGV4dDogJ0hlbGxvIFdvcmxkJyxcblx0XHRcdFx0YXJyYXk6IFsnZm9vJywgJ2JhciddLFxuXHRcdFx0fSk7XG5cdFx0fSxcblx0XHRvYmplY3RBcnJheSgpIHtcblx0XHRcdGNvbnN0IGZvbyA9IHsgZm9vOiAnZm9vICcgfTtcblx0XHRcdGNvbnN0IGJhciA9IHsgYmFyOiAnYmFyICcgfTtcblxuXHRcdFx0dGhpcy4kdW5pY29ybkxvZyh7XG5cdFx0XHRcdHRleHQ6ICdIZWxsbyBXb3JsZCcsXG5cdFx0XHRcdGFycmF5OiBbZm9vLCBiYXJdLFxuXHRcdFx0fSk7XG5cdFx0fSxcblx0XHRhcnJheVNwcmVhZE9wZXJhdG9yKCkge1xuXHRcdFx0Y29uc3QgZm9vID0gWydmb28nXTtcblx0XHRcdGNvbnN0IGJhciA9IFsnYmFyJ107XG5cblx0XHRcdHRoaXMuJHVuaWNvcm5Mb2coe1xuXHRcdFx0XHR0ZXh0OiAnSGVsbG8gV29ybGQnLFxuXHRcdFx0XHRhcnJheTogWy4uLmZvbywgLi4uYmFyXSxcblx0XHRcdH0pO1xuXHRcdH0sXG5cdH0sXG59O1xuPC9zY3JpcHQ+XG4iLCI8dGVtcGxhdGU+XG5cdDxkaXY+XG5cdFx0PGRpdiBjbGFzcz1cInJvdyBtYi0yXCI+XG5cdFx0XHQ8ZGl2IGNsYXNzPVwiY29sLTEyXCI+XG5cdFx0XHRcdDxoNSBjbGFzcz1cIm15LTBcIj48Y29kZT5kaXNhYmxlZDwvY29kZT48L2g1PlxuXHRcdFx0PC9kaXY+XG5cdFx0PC9kaXY+XG5cblx0XHQ8IS0tID09PT09PT09PT09PT09PT09PT09PT09IFNpbXBsZSBFeGFtcGxlIC0tPlxuXHRcdDxkaXYgY2xhc3M9XCJyb3cgbWItNFwiIGlkPVwiZGlzYWJsZWQtc2ltcGxlLWV4YW1wbGVcIj5cblx0XHRcdDxkaXYgY2xhc3M9XCJjb2wteGwtNCBjb2wtNiBkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyXCI+XG5cdFx0XHRcdDxkaXYgY2xhc3M9XCJmb3JtLWNoZWNrIGZvcm0tc3dpdGNoXCI+XG5cdFx0XHRcdFx0PGlucHV0XG5cdFx0XHRcdFx0XHR2LW1vZGVsPVwiaXNEaXNhYmxlZFwiXG5cdFx0XHRcdFx0XHRjbGFzcz1cImZvcm0tY2hlY2staW5wdXRcIlxuXHRcdFx0XHRcdFx0dHlwZT1cImNoZWNrYm94XCJcblx0XHRcdFx0XHRcdHJvbGU9XCJzd2l0Y2hcIlxuXHRcdFx0XHRcdFx0Y2hlY2tlZFxuXHRcdFx0XHRcdC8+XG5cdFx0XHRcdFx0PGxhYmVsIGNsYXNzPVwiZm9ybS1jaGVjay1sYWJlbFwiXG5cdFx0XHRcdFx0XHQ+ZGlzYWJsZWQgPVxuXHRcdFx0XHRcdFx0PHNwYW4gY2xhc3M9XCJib29sZWFuLXN0eWxlXCI+e3sgaXNEaXNhYmxlZCB9fTwvc3Bhbj5cblx0XHRcdFx0XHQ8L2xhYmVsPlxuXHRcdFx0XHQ8L2Rpdj5cblx0XHRcdDwvZGl2PlxuXHRcdFx0PGRpdiBjbGFzcz1cImNvbC14bC00IGNvbC02IGQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXIganVzdGlmeS1jb250ZW50LWVuZFwiPlxuXHRcdFx0XHQ8YnV0dG9uXG5cdFx0XHRcdFx0QGNsaWNrPVwic2ltcGxlRXhhbXBsZVwiXG5cdFx0XHRcdFx0Y2xhc3M9XCJidG4gYnRuLW91dGxpbmUtcHJpbWFyeSBidG4tc21cIlxuXHRcdFx0XHRcdHR5cGU9XCJidXR0b25cIlxuXHRcdFx0XHQ+XG5cdFx0XHRcdFx0UnVuXG5cdFx0XHRcdDwvYnV0dG9uPlxuXHRcdFx0PC9kaXY+XG5cblx0XHRcdDxkaXYgY2xhc3M9XCJjb2wteGwtOCBjb2wtbGctMTJcIj5cblx0XHRcdFx0PHZ1ZS1jb2RlLWhpZ2hsaWdodCBsYW5ndWFnZT1cImpzXCI+XG5cdFx0XHRcdFx0PHByZT5cbnRoaXMuJHVuaWNvcm5Mb2coe1xuXHR0ZXh0OiAnSGVsbG8gV29ybGQnLFxuXHRkaXNhYmxlZDogdHJ1ZSxcbn0pO1xuXHRcdFx0XHRcdFx0PC9wcmVcblx0XHRcdFx0XHQ+XG5cdFx0XHRcdDwvdnVlLWNvZGUtaGlnaGxpZ2h0PlxuXHRcdFx0PC9kaXY+XG5cdFx0PC9kaXY+XG5cdFx0PCEtLSA9PT09PT09PT09PT09PT09PT09PT09PSBEaXNhYmxlZCBPcHRpb24gLS0+XG5cdFx0PGRpdiBjbGFzcz1cInJvdyBtYi00XCIgaWQ9XCJkaXNhYmxlZC1jb25kaXRpb25hbC1leGFtcGxlXCI+XG5cdFx0XHQ8ZGl2IGNsYXNzPVwiY29sLTEyXCI+XG5cdFx0XHRcdDxoNiBjbGFzcz1cIm15LTBcIj5Vc2luZyBhbiAuZW52IHZhcmlhYmxlPC9oNj5cblx0XHRcdFx0PGRpdiBjbGFzcz1cImZzdC1pdGFsaWNcIj5cblx0XHRcdFx0XHRDb25kaXRpb25hbGx5IHNldCBzbyBpdCB3aWxsIGxvZyBpbiBkZXZlbG9wbWVudCwgYnV0IG5vdCBvbiB0aGVcblx0XHRcdFx0XHRwcm9kdWN0aW9uIHNpdGUuXG5cdFx0XHRcdDwvZGl2PlxuXHRcdFx0PC9kaXY+XG5cblx0XHRcdDxkaXYgY2xhc3M9XCJjb2wteGwtOCBjb2wtbGctMTJcIj5cblx0XHRcdFx0PHZ1ZS1jb2RlLWhpZ2hsaWdodCBsYW5ndWFnZT1cImpzXCI+XG5cdFx0XHRcdFx0PHByZT5cbnRoaXMuJHVuaWNvcm5Mb2coe1xuXHR0ZXh0OiAnSGVsbG8gV29ybGQnLFxuXHRkaXNhYmxlZDogcHJvY2Vzcy5lbnYuVU5JQ09STl9MT0cgIT09ICd0cnVlJyxcbn0pO1xuXHRcdFx0XHRcdFx0PC9wcmVcblx0XHRcdFx0XHQ+XG5cdFx0XHRcdDwvdnVlLWNvZGUtaGlnaGxpZ2h0PlxuXHRcdFx0PC9kaXY+XG5cdFx0PC9kaXY+XG5cdDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCBWdWUgZnJvbSAndnVlJztcbmltcG9ydCBVbmljb3JuTG9nIGZyb20gJ0BwbHVnaW5zL1VuaWNvcm5Mb2cnO1xuaW1wb3J0IHsgY29tcG9uZW50IGFzIFZ1ZUNvZGVIaWdobGlnaHQgfSBmcm9tICd2dWUtY29kZS1oaWdobGlnaHQnO1xuXG5WdWUudXNlKFVuaWNvcm5Mb2cpO1xuXG5leHBvcnQgZGVmYXVsdCB7XG5cdG5hbWU6ICdEaXNhYmxlZEV4YW1wbGUnLFxuXHRjb21wb25lbnRzOiB7XG5cdFx0VnVlQ29kZUhpZ2hsaWdodCxcblx0fSxcblx0ZGF0YTogKCkgPT4gKHtcblx0XHRpc0Rpc2FibGVkOiB0cnVlLFxuXHR9KSxcblx0bWV0aG9kczoge1xuXHRcdHNpbXBsZUV4YW1wbGUoKSB7XG5cdFx0XHR0aGlzLiR1bmljb3JuTG9nKHtcblx0XHRcdFx0dGV4dDogJ0hlbGxvIFdvcmxkJyxcblx0XHRcdFx0ZGlzYWJsZWQ6IHRoaXMuaXNEaXNhYmxlZCxcblx0XHRcdH0pO1xuXHRcdH0sXG5cdH0sXG59O1xuPC9zY3JpcHQ+XG4iLCI8dGVtcGxhdGU+XG5cdDxkaXY+XG5cdFx0PGRpdiBjbGFzcz1cInJvdyBtYi0yXCI+XG5cdFx0XHQ8ZGl2IGNsYXNzPVwiY29sLTEyXCI+XG5cdFx0XHRcdDxoNSBjbGFzcz1cIm15LTBcIj5cblx0XHRcdFx0XHQ8Y29kZT57eyBpc05hbWVPcHRpb24gPyAnbmFtZScgOiAnbG9nUHJlZml4JyB9fTwvY29kZT5cblx0XHRcdFx0PC9oNT5cblx0XHRcdDwvZGl2PlxuXHRcdDwvZGl2PlxuXG5cdFx0PCEtLSA9PT09PT09PT09PT09PT09PT09PT09PSBTaW1wbGUgRXhhbXBsZSAtLT5cblx0XHQ8ZGl2IGNsYXNzPVwicm93IG1iLTRcIiB2LWlmPVwiIWlzTmFtZU9wdGlvblwiIGlkPVwibG9nUHJlZml4LXNpbXBsZS1leGFtcGxlXCI+XG5cdFx0XHQ8ZGl2IGNsYXNzPVwiY29sLXhsLTQgY29sLTYgZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlclwiPlxuXHRcdFx0XHQ8aW5wdXRcblx0XHRcdFx0XHR2LW1vZGVsPVwibG9nUHJlZml4XCJcblx0XHRcdFx0XHRjbGFzcz1cImZvcm0tY29udHJvbFwiXG5cdFx0XHRcdFx0dHlwZT1cInRleHRcIlxuXHRcdFx0XHRcdHZhbHVlPVwiW0J1bm5pZXNdOlwiXG5cdFx0XHRcdFx0cGxhY2Vob2xkZXI9XCJbQnVubmllc106XCJcblx0XHRcdFx0Lz5cblx0XHRcdDwvZGl2PlxuXHRcdFx0PGRpdiBjbGFzcz1cImNvbC14bC00IGNvbC02IGQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXIganVzdGlmeS1jb250ZW50LWVuZFwiPlxuXHRcdFx0XHQ8YnV0dG9uXG5cdFx0XHRcdFx0QGNsaWNrPVwic2ltcGxlRXhhbXBsZVwiXG5cdFx0XHRcdFx0Y2xhc3M9XCJidG4gYnRuLW91dGxpbmUtcHJpbWFyeSBidG4tc21cIlxuXHRcdFx0XHRcdHR5cGU9XCJidXR0b25cIlxuXHRcdFx0XHQ+XG5cdFx0XHRcdFx0UnVuXG5cdFx0XHRcdDwvYnV0dG9uPlxuXHRcdFx0PC9kaXY+XG5cblx0XHRcdDxkaXYgY2xhc3M9XCJjb2wteGwtOCBjb2wtbGctMTJcIj5cblx0XHRcdFx0PHZ1ZS1jb2RlLWhpZ2hsaWdodCBsYW5ndWFnZT1cImpzXCI+XG5cdFx0XHRcdFx0PHByZT5cbnRoaXMuJHVuaWNvcm5Mb2coe1xuXHR0ZXh0OiAnSGVsbG8gV29ybGQnLFxuXHRsb2dQcmVmaXg6ICdbQnVubmllc106Jyxcbn0pO1xuXHRcdFx0XHRcdFx0PC9wcmVcblx0XHRcdFx0XHQ+XG5cdFx0XHRcdDwvdnVlLWNvZGUtaGlnaGxpZ2h0PlxuXHRcdFx0PC9kaXY+XG5cdFx0PC9kaXY+XG5cblx0XHQ8IS0tID09PT09PT09PT09PT09PT09PT09PT09IE5hbWUgQm9vbGVhbiBPcHRpb24gLS0+XG5cdFx0PGRpdiBjbGFzcz1cInJvdyBtYi00XCIgdi1pZj1cIiFpc05hbWVPcHRpb25cIiBpZD1cIm5hbWUtZGVmYXVsdC1leGFtcGxlXCI+XG5cdFx0XHQ8ZGl2IGNsYXNzPVwiY29sLTEyIG1iLTJcIj5cblx0XHRcdFx0SWYgPGNvZGU+bG9nUHJlZml4PC9jb2RlPiBvcHRpb24gaXMgc2V0IGFzIGFcblx0XHRcdFx0PHNwYW4gY2xhc3M9XCJvcHRpb24tdHlwZVwiPkJvb2xlYW48L3NwYW4+IG9mXG5cdFx0XHRcdDxzcGFuIGNsYXNzPVwiYm9vbGVhbi1zdHlsZVwiPnRydWU8L3NwYW4+LCBpdCB3aWxsIHVzZSB0aGVcblx0XHRcdFx0PGNvZGU+bmFtZTwvY29kZT4gb3B0aW9uIGZvciB0aGUgcHJlZml4LlxuXHRcdFx0PC9kaXY+XG5cblx0XHRcdDxkaXYgY2xhc3M9XCJjb2wteGwtNCBjb2wtNiBkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyXCI+XG5cdFx0XHRcdDxkaXYgY2xhc3M9XCJmb3JtLWNoZWNrIGZvcm0tc3dpdGNoXCI+XG5cdFx0XHRcdFx0PGlucHV0XG5cdFx0XHRcdFx0XHR2LW1vZGVsPVwid2l0aE5hbWVcIlxuXHRcdFx0XHRcdFx0Y2xhc3M9XCJmb3JtLWNoZWNrLWlucHV0XCJcblx0XHRcdFx0XHRcdHR5cGU9XCJjaGVja2JveFwiXG5cdFx0XHRcdFx0XHRyb2xlPVwic3dpdGNoXCJcblx0XHRcdFx0XHRcdGNoZWNrZWRcblx0XHRcdFx0XHQvPlxuXHRcdFx0XHRcdDxsYWJlbCBjbGFzcz1cImZvcm0tY2hlY2stbGFiZWxcIlxuXHRcdFx0XHRcdFx0PmxvZ1ByZWZpeCBvcHRpb24gPVxuXHRcdFx0XHRcdFx0PHNwYW4gY2xhc3M9XCJib29sZWFuLXN0eWxlXCI+e3sgd2l0aE5hbWUgfX08L3NwYW4+IHdpdGggZGVmYXVsdFxuXHRcdFx0XHRcdFx0PGNvZGU+bmFtZTwvY29kZT4gb3B0aW9uXG5cdFx0XHRcdFx0PC9sYWJlbD5cblx0XHRcdFx0PC9kaXY+XG5cdFx0XHQ8L2Rpdj5cblx0XHRcdDxkaXYgY2xhc3M9XCJjb2wteGwtNCBjb2wtNiBkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyIGp1c3RpZnktY29udGVudC1lbmRcIj5cblx0XHRcdFx0PGJ1dHRvblxuXHRcdFx0XHRcdEBjbGljaz1cImV4YW1wbGVOYW1lRGVmYXVsdFwiXG5cdFx0XHRcdFx0Y2xhc3M9XCJidG4gYnRuLW91dGxpbmUtcHJpbWFyeSBidG4tc21cIlxuXHRcdFx0XHRcdHR5cGU9XCJidXR0b25cIlxuXHRcdFx0XHQ+XG5cdFx0XHRcdFx0UnVuXG5cdFx0XHRcdDwvYnV0dG9uPlxuXHRcdFx0PC9kaXY+XG5cblx0XHRcdDxkaXYgY2xhc3M9XCJjb2wteGwtOCBjb2wtbGctMTJcIj5cblx0XHRcdFx0PHZ1ZS1jb2RlLWhpZ2hsaWdodCBsYW5ndWFnZT1cImpzXCI+XG5cdFx0XHRcdFx0PHByZT5cbnRoaXMuJHVuaWNvcm5Mb2coe1xuXHR0ZXh0OiAnSGVsbG8gV29ybGQnLFxuXHRsb2dQcmVmaXg6IHRydWUsXG59KTtcblx0XHRcdFx0XHRcdDwvcHJlXG5cdFx0XHRcdFx0PlxuXHRcdFx0XHQ8L3Z1ZS1jb2RlLWhpZ2hsaWdodD5cblx0XHRcdDwvZGl2PlxuXHRcdDwvZGl2PlxuXG5cdFx0PCEtLSA9PT09PT09PT09PT09PT09PT09PT09PSBOYW1lIE9wdGlvbiAtLT5cblx0XHQ8ZGl2IGNsYXNzPVwicm93IG1iLTRcIiBpZD1cIm5hbWUtZXhhbXBsZVwiPlxuXHRcdFx0PGRpdiBjbGFzcz1cImNvbC14bC00IGNvbC02IGQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXJcIj5cblx0XHRcdFx0PGRpdiBjbGFzcz1cImZvcm0tY2hlY2sgZm9ybS1zd2l0Y2hcIj5cblx0XHRcdFx0XHQ8aW5wdXRcblx0XHRcdFx0XHRcdHYtbW9kZWw9XCJ3aXRoTmFtZVwiXG5cdFx0XHRcdFx0XHRjbGFzcz1cImZvcm0tY2hlY2staW5wdXRcIlxuXHRcdFx0XHRcdFx0dHlwZT1cImNoZWNrYm94XCJcblx0XHRcdFx0XHRcdHJvbGU9XCJzd2l0Y2hcIlxuXHRcdFx0XHRcdFx0Y2hlY2tlZFxuXHRcdFx0XHRcdC8+XG5cdFx0XHRcdFx0PGxhYmVsIGNsYXNzPVwiZm9ybS1jaGVjay1sYWJlbFwiXG5cdFx0XHRcdFx0XHQ+bG9nUHJlZml4ID0gPHNwYW4gY2xhc3M9XCJib29sZWFuLXN0eWxlXCI+e3sgd2l0aE5hbWUgfX08L3NwYW4+IHdpdGhcblx0XHRcdFx0XHRcdDxjb2RlPm5hbWU8L2NvZGU+IG9wdGlvbiBzZXRcblx0XHRcdFx0XHQ8L2xhYmVsPlxuXHRcdFx0XHQ8L2Rpdj5cblx0XHRcdDwvZGl2PlxuXHRcdFx0PGRpdiBjbGFzcz1cImNvbC14bC00IGNvbC02IGQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXIganVzdGlmeS1jb250ZW50LWVuZFwiPlxuXHRcdFx0XHQ8YnV0dG9uXG5cdFx0XHRcdFx0QGNsaWNrPVwiZXhhbXBsZU5hbWVcIlxuXHRcdFx0XHRcdGNsYXNzPVwiYnRuIGJ0bi1vdXRsaW5lLXByaW1hcnkgYnRuLXNtXCJcblx0XHRcdFx0XHR0eXBlPVwiYnV0dG9uXCJcblx0XHRcdFx0PlxuXHRcdFx0XHRcdFJ1blxuXHRcdFx0XHQ8L2J1dHRvbj5cblx0XHRcdDwvZGl2PlxuXG5cdFx0XHQ8ZGl2IGNsYXNzPVwiY29sLXhsLTggY29sLWxnLTEyXCI+XG5cdFx0XHRcdDx2dWUtY29kZS1oaWdobGlnaHQgbGFuZ3VhZ2U9XCJqc1wiPlxuXHRcdFx0XHRcdDxwcmU+XG50aGlzLiR1bmljb3JuTG9nKHtcblx0dGV4dDogJ0hlbGxvIFdvcmxkJyxcblx0bG9nUHJlZml4OiB0cnVlLFxuXHRuYW1lOiAne3sgaXNOYW1lT3B0aW9uID8gJ1N1c2FuJyA6ICdCb2InIH19Jyxcbn0pO1xuXHRcdFx0XHRcdFx0PC9wcmVcblx0XHRcdFx0XHQ+XG5cdFx0XHRcdDwvdnVlLWNvZGUtaGlnaGxpZ2h0PlxuXHRcdFx0PC9kaXY+XG5cdFx0PC9kaXY+XG5cdDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCBWdWUgZnJvbSAndnVlJztcbmltcG9ydCBVbmljb3JuTG9nIGZyb20gJ0BwbHVnaW5zL1VuaWNvcm5Mb2cnO1xuaW1wb3J0IHsgY29tcG9uZW50IGFzIFZ1ZUNvZGVIaWdobGlnaHQgfSBmcm9tICd2dWUtY29kZS1oaWdobGlnaHQnO1xuXG5WdWUudXNlKFVuaWNvcm5Mb2cpO1xuXG5leHBvcnQgZGVmYXVsdCB7XG5cdG5hbWU6ICdMb2dQcmVmaXhFeGFtcGxlJyxcblx0cHJvcHM6IHtcblx0XHRpc05hbWVPcHRpb246IHtcblx0XHRcdHR5cGU6IEJvb2xlYW4sXG5cdFx0XHRkZWZhdWx0OiBmYWxzZSxcblx0XHR9LFxuXHR9LFxuXHRjb21wb25lbnRzOiB7XG5cdFx0VnVlQ29kZUhpZ2hsaWdodCxcblx0fSxcblx0ZGF0YTogKCkgPT4gKHtcblx0XHRsb2dQcmVmaXg6ICdbQnVubmllc106Jyxcblx0XHR3aXRoTmFtZTogdHJ1ZSxcblx0fSksXG5cdG1ldGhvZHM6IHtcblx0XHRleGFtcGxlTmFtZSgpIHtcblx0XHRcdHRoaXMuJHVuaWNvcm5Mb2coe1xuXHRcdFx0XHR0ZXh0OiAnSGVsbG8gV29ybGQnLFxuXHRcdFx0XHRsb2dQcmVmaXg6IHRoaXMud2l0aE5hbWUsXG5cdFx0XHRcdG5hbWU6IHRoaXMuaXNOYW1lT3B0aW9uID8gJ1N1c2FuJyA6ICdCb2InLFxuXHRcdFx0fSk7XG5cdFx0fSxcblx0XHRleGFtcGxlTmFtZURlZmF1bHQoKSB7XG5cdFx0XHR0aGlzLiR1bmljb3JuTG9nKHtcblx0XHRcdFx0dGV4dDogJ0hlbGxvIFdvcmxkJyxcblx0XHRcdFx0bG9nUHJlZml4OiB0aGlzLndpdGhOYW1lLFxuXHRcdFx0fSk7XG5cdFx0fSxcblx0XHRzaW1wbGVFeGFtcGxlKCkge1xuXHRcdFx0dGhpcy4kdW5pY29ybkxvZyh7XG5cdFx0XHRcdHRleHQ6ICdIZWxsbyBXb3JsZCcsXG5cdFx0XHRcdGxvZ1ByZWZpeDogdGhpcy5sb2dQcmVmaXgsXG5cdFx0XHR9KTtcblx0XHR9LFxuXHR9LFxufTtcbjwvc2NyaXB0PlxuIiwiPHRlbXBsYXRlPlxuXHQ8ZGl2PlxuXHRcdDxkaXYgY2xhc3M9XCJyb3cgbWItMlwiPlxuXHRcdFx0PGRpdiBjbGFzcz1cImNvbC0xMlwiPlxuXHRcdFx0XHQ8aDUgY2xhc3M9XCJteS0wXCI+PGNvZGU+bWFnaWNhbDwvY29kZT48L2g1PlxuXHRcdFx0PC9kaXY+XG5cdFx0PC9kaXY+XG5cblx0XHQ8IS0tID09PT09PT09PT09PT09PT09PT09PT09IFNpbXBsZSBFeGFtcGxlIC0tPlxuXHRcdDxkaXYgY2xhc3M9XCJyb3cgbWItNFwiIGlkPVwibWFnaWNhbC1zaW1wbGUtZXhhbXBsZVwiPlxuXHRcdFx0PGRpdiBjbGFzcz1cImNvbC14bC00IGNvbC02IGQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXJcIj5cblx0XHRcdFx0PGRpdiBjbGFzcz1cImZvcm0tY2hlY2sgZm9ybS1zd2l0Y2hcIj5cblx0XHRcdFx0XHQ8aW5wdXRcblx0XHRcdFx0XHRcdHYtbW9kZWw9XCJtYWdpY2FsXCJcblx0XHRcdFx0XHRcdGNsYXNzPVwiZm9ybS1jaGVjay1pbnB1dFwiXG5cdFx0XHRcdFx0XHR0eXBlPVwiY2hlY2tib3hcIlxuXHRcdFx0XHRcdFx0cm9sZT1cInN3aXRjaFwiXG5cdFx0XHRcdFx0XHRjaGVja2VkXG5cdFx0XHRcdFx0Lz5cblx0XHRcdFx0XHQ8bGFiZWwgY2xhc3M9XCJmb3JtLWNoZWNrLWxhYmVsXCJcblx0XHRcdFx0XHRcdD5tYWdpY2FsID1cblx0XHRcdFx0XHRcdDxzcGFuIGNsYXNzPVwiYm9vbGVhbi1zdHlsZVwiPnt7IG1hZ2ljYWwgfX08L3NwYW4+XG5cdFx0XHRcdFx0PC9sYWJlbD5cblx0XHRcdFx0PC9kaXY+XG5cdFx0XHQ8L2Rpdj5cblx0XHRcdDxkaXYgY2xhc3M9XCJjb2wteGwtNCBjb2wtNiBkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyIGp1c3RpZnktY29udGVudC1lbmRcIj5cblx0XHRcdFx0PGJ1dHRvblxuXHRcdFx0XHRcdEBjbGljaz1cInNpbXBsZUV4YW1wbGVcIlxuXHRcdFx0XHRcdGNsYXNzPVwiYnRuIGJ0bi1vdXRsaW5lLXByaW1hcnkgYnRuLXNtXCJcblx0XHRcdFx0XHR0eXBlPVwiYnV0dG9uXCJcblx0XHRcdFx0PlxuXHRcdFx0XHRcdFJ1blxuXHRcdFx0XHQ8L2J1dHRvbj5cblx0XHRcdDwvZGl2PlxuXG5cdFx0XHQ8ZGl2IGNsYXNzPVwiY29sLXhsLTggY29sLWxnLTEyXCI+XG5cdFx0XHRcdDx2dWUtY29kZS1oaWdobGlnaHQgbGFuZ3VhZ2U9XCJqc1wiPlxuXHRcdFx0XHRcdDxwcmU+XG50aGlzLiR1bmljb3JuTG9nKHtcblx0dGV4dDogJ0hlbGxvIFdvcmxkJyxcblx0bWFnaWNhbDogdHJ1ZSxcbn0pO1xuXHRcdFx0XHRcdFx0PC9wcmVcblx0XHRcdFx0XHQ+XG5cdFx0XHRcdDwvdnVlLWNvZGUtaGlnaGxpZ2h0PlxuXHRcdFx0PC9kaXY+XG5cdFx0PC9kaXY+XG5cdDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCBWdWUgZnJvbSAndnVlJztcbmltcG9ydCBVbmljb3JuTG9nIGZyb20gJ0BwbHVnaW5zL1VuaWNvcm5Mb2cnO1xuaW1wb3J0IHsgY29tcG9uZW50IGFzIFZ1ZUNvZGVIaWdobGlnaHQgfSBmcm9tICd2dWUtY29kZS1oaWdobGlnaHQnO1xuXG5WdWUudXNlKFVuaWNvcm5Mb2cpO1xuXG5leHBvcnQgZGVmYXVsdCB7XG5cdG5hbWU6ICdNYWdpY2FsRXhhbXBsZScsXG5cdGNvbXBvbmVudHM6IHtcblx0XHRWdWVDb2RlSGlnaGxpZ2h0LFxuXHR9LFxuXHRkYXRhOiAoKSA9PiAoe1xuXHRcdG1hZ2ljYWw6IHRydWUsXG5cdH0pLFxuXHRtZXRob2RzOiB7XG5cdFx0c2ltcGxlRXhhbXBsZSgpIHtcblx0XHRcdHRoaXMuJHVuaWNvcm5Mb2coe1xuXHRcdFx0XHR0ZXh0OiAnSGVsbG8gV29ybGQnLFxuXHRcdFx0XHRtYWdpY2FsOiB0aGlzLm1hZ2ljYWwsXG5cdFx0XHR9KTtcblx0XHR9LFxuXHR9LFxufTtcbjwvc2NyaXB0PlxuIiwiPHRlbXBsYXRlPlxuXHQ8ZGl2PlxuXHRcdDxkaXYgY2xhc3M9XCJyb3cgbWItMlwiPlxuXHRcdFx0PGRpdiBjbGFzcz1cImNvbC0xMlwiPlxuXHRcdFx0XHQ8aDUgY2xhc3M9XCJteS0wXCI+PGNvZGU+b2JqZWN0czwvY29kZT48L2g1PlxuXHRcdFx0PC9kaXY+XG5cdFx0PC9kaXY+XG5cblx0XHQ8IS0tID09PT09PT09PT09PT09PT09PT09PT09IFNpbXBsZSBFeGFtcGxlIC0tPlxuXHRcdDxkaXYgY2xhc3M9XCJyb3cgbWItNFwiIGlkPVwib2JqZWN0cy1zaW1wbGUtZXhhbXBsZVwiPlxuXHRcdFx0PGRpdiBjbGFzcz1cImNvbC14bC00IGNvbC02IGQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXJcIj5cblx0XHRcdFx0PGg2IGNsYXNzPVwibXktMFwiPlNpbmdsZSBvYmplY3Q8L2g2PlxuXHRcdFx0PC9kaXY+XG5cdFx0XHQ8ZGl2IGNsYXNzPVwiY29sLXhsLTQgY29sLTYgZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNvbnRlbnQtZW5kXCI+XG5cdFx0XHRcdDxidXR0b25cblx0XHRcdFx0XHRAY2xpY2s9XCJzaW1wbGVFeGFtcGxlXCJcblx0XHRcdFx0XHRjbGFzcz1cImJ0biBidG4tb3V0bGluZS1wcmltYXJ5IGJ0bi1zbVwiXG5cdFx0XHRcdFx0dHlwZT1cImJ1dHRvblwiXG5cdFx0XHRcdD5cblx0XHRcdFx0XHRSdW5cblx0XHRcdFx0PC9idXR0b24+XG5cdFx0XHQ8L2Rpdj5cblxuXHRcdFx0PGRpdiBjbGFzcz1cImNvbC14bC04IGNvbC1sZy0xMlwiPlxuXHRcdFx0XHQ8dnVlLWNvZGUtaGlnaGxpZ2h0IGxhbmd1YWdlPVwianNcIj5cblx0XHRcdFx0XHQ8cHJlPlxudGhpcy4kdW5pY29ybkxvZyh7XG5cdHRleHQ6ICdIZWxsbyBXb3JsZCcsXG5cdG9iamVjdHM6IHsgZm9vOiAnYmFyJyB9LFxufSk7XG5cdFx0XHRcdFx0XHQ8L3ByZVxuXHRcdFx0XHRcdD5cblx0XHRcdFx0PC92dWUtY29kZS1oaWdobGlnaHQ+XG5cdFx0XHQ8L2Rpdj5cblx0XHQ8L2Rpdj5cblxuXHRcdDwhLS0gPT09PT09PT09PT09PT09PT09PT09PT0gTXVsdGlwbGUgT2JqZWN0cyAtLT5cblx0XHQ8ZGl2IGNsYXNzPVwicm93IG1iLTRcIiBpZD1cIm9iamVjdHMtbXVsdGlwbGUtZXhhbXBsZVwiPlxuXHRcdFx0PGRpdiBjbGFzcz1cImNvbC14bC00IGNvbC02IGQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXJcIj5cblx0XHRcdFx0PGg2IGNsYXNzPVwibXktMFwiPk11bHRpcGxlIG9iamVjdHM8L2g2PlxuXHRcdFx0PC9kaXY+XG5cdFx0XHQ8ZGl2IGNsYXNzPVwiY29sLXhsLTQgY29sLTYgZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNvbnRlbnQtZW5kXCI+XG5cdFx0XHRcdDxidXR0b25cblx0XHRcdFx0XHRAY2xpY2s9XCJtdWx0aXBsZU9iamVjdHNcIlxuXHRcdFx0XHRcdGNsYXNzPVwiYnRuIGJ0bi1vdXRsaW5lLXByaW1hcnkgYnRuLXNtXCJcblx0XHRcdFx0XHR0eXBlPVwiYnV0dG9uXCJcblx0XHRcdFx0PlxuXHRcdFx0XHRcdFJ1blxuXHRcdFx0XHQ8L2J1dHRvbj5cblx0XHRcdDwvZGl2PlxuXG5cdFx0XHQ8ZGl2IGNsYXNzPVwiY29sLXhsLTggY29sLWxnLTEyXCI+XG5cdFx0XHRcdDx2dWUtY29kZS1oaWdobGlnaHQgbGFuZ3VhZ2U9XCJqc1wiPlxuXHRcdFx0XHRcdDxwcmU+XG5jb25zdCBmb28gPSB7IGZvbzogJ2ZvbyAnIH07XG5jb25zdCBiYXIgPSB7IGJhcjogJ2JhciAnIH07XG5cbnRoaXMuJHVuaWNvcm5Mb2coe1xuXHR0ZXh0OiAnSGVsbG8gV29ybGQnLFxuXHRvYmplY3RzOiB7IGZvbywgYmFyIH0sXG59KTtcblx0XHRcdFx0XHRcdDwvcHJlXG5cdFx0XHRcdFx0PlxuXHRcdFx0XHQ8L3Z1ZS1jb2RlLWhpZ2hsaWdodD5cblx0XHRcdDwvZGl2PlxuXHRcdDwvZGl2PlxuXG5cdFx0PCEtLSA9PT09PT09PT09PT09PT09PT09PT09PSBPYmplY3QgU3ByZWFkIE9wZXJhdG9yIC0tPlxuXHRcdDxkaXYgY2xhc3M9XCJyb3cgbWItNFwiIGlkPVwib2JqZWN0cy1zcHJlYWQtZXhhbXBsZVwiPlxuXHRcdFx0PGRpdiBjbGFzcz1cImNvbC14bC00IGNvbC02IGQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXJcIj5cblx0XHRcdFx0PGg2IGNsYXNzPVwibXktMFwiPlVzaW5nIG9iamVjdCBzcHJlYWQgT3BlcmF0b3I8L2g2PlxuXHRcdFx0PC9kaXY+XG5cdFx0XHQ8ZGl2IGNsYXNzPVwiY29sLXhsLTQgY29sLTYgZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNvbnRlbnQtZW5kXCI+XG5cdFx0XHRcdDxidXR0b25cblx0XHRcdFx0XHRAY2xpY2s9XCJvYmplY3RTcHJlYWRPcGVyYXRvclwiXG5cdFx0XHRcdFx0Y2xhc3M9XCJidG4gYnRuLW91dGxpbmUtcHJpbWFyeSBidG4tc21cIlxuXHRcdFx0XHRcdHR5cGU9XCJidXR0b25cIlxuXHRcdFx0XHQ+XG5cdFx0XHRcdFx0UnVuXG5cdFx0XHRcdDwvYnV0dG9uPlxuXHRcdFx0PC9kaXY+XG5cblx0XHRcdDxkaXYgY2xhc3M9XCJjb2wteGwtOCBjb2wtbGctMTJcIj5cblx0XHRcdFx0PHZ1ZS1jb2RlLWhpZ2hsaWdodCBsYW5ndWFnZT1cImpzXCI+XG5cdFx0XHRcdFx0PHByZT5cbmNvbnN0IGZvbyA9IHsgZm9vOiAnZm9vICcgfTtcbmNvbnN0IGJhciA9IHsgYmFyOiAnYmFyICcgfTtcblxudGhpcy4kdW5pY29ybkxvZyh7XG5cdHRleHQ6ICdIZWxsbyBXb3JsZCcsXG5cdG9iamVjdHM6IHsgLi4uZm9vLCAuLi5iYXIgfSxcbn0pO1xuXHRcdFx0XHRcdFx0PC9wcmVcblx0XHRcdFx0XHQ+XG5cdFx0XHRcdDwvdnVlLWNvZGUtaGlnaGxpZ2h0PlxuXHRcdFx0PC9kaXY+XG5cdFx0PC9kaXY+XG5cdDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCBWdWUgZnJvbSAndnVlJztcbmltcG9ydCBVbmljb3JuTG9nIGZyb20gJ0BwbHVnaW5zL1VuaWNvcm5Mb2cnO1xuaW1wb3J0IHsgY29tcG9uZW50IGFzIFZ1ZUNvZGVIaWdobGlnaHQgfSBmcm9tICd2dWUtY29kZS1oaWdobGlnaHQnO1xuXG5WdWUudXNlKFVuaWNvcm5Mb2cpO1xuXG5leHBvcnQgZGVmYXVsdCB7XG5cdG5hbWU6ICdPYmplY3RzRXhhbXBsZScsXG5cdGNvbXBvbmVudHM6IHtcblx0XHRWdWVDb2RlSGlnaGxpZ2h0LFxuXHR9LFxuXHRkYXRhOiAoKSA9PiAoe30pLFxuXHRtZXRob2RzOiB7XG5cdFx0c2ltcGxlRXhhbXBsZSgpIHtcblx0XHRcdHRoaXMuJHVuaWNvcm5Mb2coe1xuXHRcdFx0XHR0ZXh0OiAnSGVsbG8gV29ybGQnLFxuXHRcdFx0XHRvYmplY3RzOiB7IGZvbzogJ2JhcicgfSxcblx0XHRcdH0pO1xuXHRcdH0sXG5cdFx0bXVsdGlwbGVPYmplY3RzKCkge1xuXHRcdFx0Y29uc3QgZm9vID0geyBmb286ICdmb28gJyB9O1xuXHRcdFx0Y29uc3QgYmFyID0geyBiYXI6ICdiYXIgJyB9O1xuXG5cdFx0XHR0aGlzLiR1bmljb3JuTG9nKHtcblx0XHRcdFx0dGV4dDogJ0hlbGxvIFdvcmxkJyxcblx0XHRcdFx0b2JqZWN0czogeyBmb28sIGJhciB9LFxuXHRcdFx0fSk7XG5cdFx0fSxcblx0XHRvYmplY3RTcHJlYWRPcGVyYXRvcigpIHtcblx0XHRcdGNvbnN0IGZvbyA9IHsgZm9vOiAnZm9vJyB9O1xuXHRcdFx0Y29uc3QgYmFyID0geyBiYXI6ICdiYXInIH07XG5cblx0XHRcdHRoaXMuJHVuaWNvcm5Mb2coe1xuXHRcdFx0XHR0ZXh0OiAnSGVsbG8gV29ybGQnLFxuXHRcdFx0XHRvYmplY3RzOiB7IC4uLmZvbywgLi4uYmFyIH0sXG5cdFx0XHR9KTtcblx0XHR9LFxuXHR9LFxufTtcbjwvc2NyaXB0PlxuIiwiPHRlbXBsYXRlPlxuXHQ8ZGl2PlxuXHRcdDwhLS0gPT09PT09PT09PT09PT09PT09PT09PT0gU2ltcGxlIEV4YW1wbGUgLS0+XG5cdFx0PGRpdiBjbGFzcz1cInJvdyBtYi00XCI+XG5cdFx0XHQ8ZGl2IGNsYXNzPVwiY29sLXhsLTQgY29sLTYgZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlclwiPlxuXHRcdFx0XHQ8aDUgY2xhc3M9XCJteS0wXCI+U2ltcGxlIEV4YW1wbGU8L2g1PlxuXHRcdFx0PC9kaXY+XG5cdFx0XHQ8ZGl2IGNsYXNzPVwiY29sLXhsLTQgY29sLTYgZC1mbGV4IGp1c3RpZnktY29udGVudC1lbmRcIj5cblx0XHRcdFx0PGJ1dHRvblxuXHRcdFx0XHRcdEBjbGljaz1cInNpbXBsZUV4YW1wbGVcIlxuXHRcdFx0XHRcdGNsYXNzPVwiYnRuIGJ0bi1vdXRsaW5lLXByaW1hcnkgYnRuLXNtXCJcblx0XHRcdFx0XHR0eXBlPVwiYnV0dG9uXCJcblx0XHRcdFx0PlxuXHRcdFx0XHRcdFJ1blxuXHRcdFx0XHQ8L2J1dHRvbj5cblx0XHRcdDwvZGl2PlxuXG5cdFx0XHQ8ZGl2IGNsYXNzPVwiY29sLXhsLTggY29sLWxnLTEyXCI+XG5cdFx0XHRcdDx2dWUtY29kZS1oaWdobGlnaHQgbGFuZ3VhZ2U9XCJqc1wiPlxuXHRcdFx0XHRcdDxwcmU+XG50aGlzLiR1bmljb3JuTG9nKCk7XG5cdFx0XHRcdFx0XHQ8L3ByZVxuXHRcdFx0XHRcdD5cblx0XHRcdFx0PC92dWUtY29kZS1oaWdobGlnaHQ+XG5cdFx0XHQ8L2Rpdj5cblx0XHQ8L2Rpdj5cblx0PC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IFZ1ZSBmcm9tICd2dWUnO1xuaW1wb3J0IFVuaWNvcm5Mb2cgZnJvbSAnQHBsdWdpbnMvVW5pY29ybkxvZyc7XG5pbXBvcnQgeyBjb21wb25lbnQgYXMgVnVlQ29kZUhpZ2hsaWdodCB9IGZyb20gJ3Z1ZS1jb2RlLWhpZ2hsaWdodCc7XG5cblZ1ZS51c2UoVW5pY29ybkxvZyk7XG5cbmV4cG9ydCBkZWZhdWx0IHtcblx0bmFtZTogJ1NpbXBsZUV4YW1wbGUnLFxuXHRjb21wb25lbnRzOiB7XG5cdFx0VnVlQ29kZUhpZ2hsaWdodCxcblx0fSxcblx0ZGF0YTogKCkgPT4gKHt9KSxcblx0bWV0aG9kczoge1xuXHRcdHNpbXBsZUV4YW1wbGUoKSB7XG5cdFx0XHR0aGlzLiR1bmljb3JuTG9nKCk7XG5cdFx0fSxcblxuXHR9LFxufTtcbjwvc2NyaXB0PlxuIiwiPHRlbXBsYXRlPlxuXHQ8ZGl2PlxuXHRcdDxkaXYgY2xhc3M9XCJyb3cgbWItMlwiPlxuXHRcdFx0PGRpdiBjbGFzcz1cImNvbC0xMlwiPlxuXHRcdFx0XHQ8aDUgY2xhc3M9XCJteS0wXCI+PGNvZGU+c3R5bGVzPC9jb2RlPjwvaDU+XG5cdFx0XHQ8L2Rpdj5cblxuXHRcdFx0PGRpdiBjbGFzcz1cImNvbC14bC04IGNvbC1sZy0xMlwiPlxuXHRcdFx0XHRGb3IgYSBsaXN0IG9mIHRoZSBkaWZmZXJlbnQgYXZhaWxhYmxlIHN0eWxlcywgcmVmZXIgdG8gdGhlXG5cdFx0XHRcdDxhXG5cdFx0XHRcdFx0aHJlZj1cImh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9jb25zb2xlI3N0eWxpbmdfY29uc29sZV9vdXRwdXRcIlxuXHRcdFx0XHRcdHRhcmdldD1cIl9ibGFua1wiXG5cdFx0XHRcdFx0PldlYiBBUElzIE1ETiBTdHlsaW5nIENvbnNvbGUgT3V0cHV0XG5cdFx0XHRcdDwvYT5cblx0XHRcdFx0ZGV2ZWxvcGVyIGRvY3VtZW50YXRpb24uIERlcGVuZGluZyBvbiB0aGUgYnJvd3Nlciwgc29tZSBzdHlsZXMgbWF5IG5vdFxuXHRcdFx0XHR3b3JrLlxuXHRcdFx0PC9kaXY+XG5cdFx0PC9kaXY+XG5cblx0XHQ8IS0tID09PT09PT09PT09PT09PT09PT09PT09IFNpbXBsZSBFeGFtcGxlIC0tPlxuXHRcdDxkaXYgY2xhc3M9XCJyb3cgbWItNFwiIGlkPVwiZGVmYXVsdFN0eWxlcy1zaW1wbGUtZXhhbXBsZVwiPlxuXHRcdFx0PGRpdiBjbGFzcz1cImNvbC14bC00IGNvbC02IGQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXJcIj5cblx0XHRcdFx0PGRpdiBjbGFzcz1cImNvbC14bC04IGNvbC1sZy0xMiBtdC0yXCI+XG5cdFx0XHRcdFx0PGlucHV0XG5cdFx0XHRcdFx0XHR2LW1vZGVsPVwiZGVmYXVsdFN0eWxlc1wiXG5cdFx0XHRcdFx0XHRjbGFzcz1cImZvcm0tY29udHJvbFwiXG5cdFx0XHRcdFx0XHR0eXBlPVwidGV4dFwiXG5cdFx0XHRcdFx0XHR2YWx1ZT1cIltCdW5uaWVzXTpcIlxuXHRcdFx0XHRcdFx0cGxhY2Vob2xkZXI9XCJbQnVubmllc106XCJcblx0XHRcdFx0XHQvPlxuXHRcdFx0XHQ8L2Rpdj5cblx0XHRcdDwvZGl2PlxuXHRcdFx0PGRpdiBjbGFzcz1cImNvbC14bC00IGNvbC02IGQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXIganVzdGlmeS1jb250ZW50LWVuZFwiPlxuXHRcdFx0XHQ8YnV0dG9uXG5cdFx0XHRcdFx0QGNsaWNrPVwic2ltcGxlRXhhbXBsZVwiXG5cdFx0XHRcdFx0Y2xhc3M9XCJidG4gYnRuLW91dGxpbmUtcHJpbWFyeSBidG4tc21cIlxuXHRcdFx0XHRcdHR5cGU9XCJidXR0b25cIlxuXHRcdFx0XHQ+XG5cdFx0XHRcdFx0UnVuXG5cdFx0XHRcdDwvYnV0dG9uPlxuXHRcdFx0PC9kaXY+XG5cblx0XHRcdDxkaXYgY2xhc3M9XCJjb2wteGwtOCBjb2wtbGctMTJcIj5cblx0XHRcdFx0PHZ1ZS1jb2RlLWhpZ2hsaWdodCBsYW5ndWFnZT1cImpzXCI+XG5cdFx0XHRcdFx0PHByZT5cbnRoaXMuJHVuaWNvcm5Mb2coe1xuXHR0ZXh0OiAnSGVsbG8gV29ybGQnLFxuXHRzdHlsZXM6ICd7eyB0aGlzLmRlZmF1bHRTdHlsZXMgfX0nLFxufSk7XG5cdFx0XHRcdFx0XHQ8L3ByZVxuXHRcdFx0XHRcdD5cblx0XHRcdFx0PC92dWUtY29kZS1oaWdobGlnaHQ+XG5cdFx0XHQ8L2Rpdj5cblx0XHQ8L2Rpdj5cblxuXHRcdDwhLS0gPT09PT09PT09PT09PT09PT09PT09PT0gQXJyYXkgRXhhbXBsZSAtLT5cblx0XHQ8ZGl2IGNsYXNzPVwicm93IG1iLTRcIiBpZD1cImRlZmF1bHRTdHlsZXMtc2ltcGxlLWV4YW1wbGVcIj5cblx0XHRcdDxkaXYgY2xhc3M9XCJjb2wteGwtNCBjb2wtNiBkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyXCI+XG5cdFx0XHRcdDxkaXYgY2xhc3M9XCJjb2wteGwtOCBjb2wtbGctMTJcIj5cblx0XHRcdFx0XHQ8aDYgY2xhc3M9XCJteS0wXCI+VXNpbmcgYW4gQXJyYXkuPC9oNj5cblx0XHRcdFx0PC9kaXY+XG5cdFx0XHQ8L2Rpdj5cblx0XHRcdDxkaXYgY2xhc3M9XCJjb2wteGwtNCBjb2wtNiBkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyIGp1c3RpZnktY29udGVudC1lbmRcIj5cblx0XHRcdFx0PGJ1dHRvblxuXHRcdFx0XHRcdEBjbGljaz1cImFycmF5RXhhbXBsZVwiXG5cdFx0XHRcdFx0Y2xhc3M9XCJidG4gYnRuLW91dGxpbmUtcHJpbWFyeSBidG4tc21cIlxuXHRcdFx0XHRcdHR5cGU9XCJidXR0b25cIlxuXHRcdFx0XHQ+XG5cdFx0XHRcdFx0UnVuXG5cdFx0XHRcdDwvYnV0dG9uPlxuXHRcdFx0PC9kaXY+XG5cblx0XHRcdDxkaXYgY2xhc3M9XCJjb2wteGwtOCBjb2wtbGctMTJcIj5cblx0XHRcdFx0PHZ1ZS1jb2RlLWhpZ2hsaWdodCBsYW5ndWFnZT1cImpzXCI+XG5cdFx0XHRcdFx0PHByZT5cbnRoaXMuJHVuaWNvcm5Mb2coe1xuXHR0ZXh0OiAnSGVsbG8gV29ybGQnLFxuXHRzdHlsZXM6IFtcblx0XHQnYmFja2dyb3VuZDogYmxhY2snLFxuXHRcdCdib3JkZXI6IDFweCBkYXNoZWQgbWFnZW50YScsXG5cdFx0J2NvbG9yOiBtYWdlbnRhJyxcblx0XHQnZm9udC1mYW1pbHk6IG1vbm9zcGFjZScsXG5cdFx0J2ZvbnQtc2l6ZTogMmVtJyxcblx0XHQncGFkZGluZzogMTBweCcsXG5cdF0sXG59KTtcblx0XHRcdFx0XHRcdDwvcHJlXG5cdFx0XHRcdFx0PlxuXHRcdFx0XHQ8L3Z1ZS1jb2RlLWhpZ2hsaWdodD5cblx0XHRcdDwvZGl2PlxuXHRcdDwvZGl2PlxuXG5cdFx0PCEtLSA9PT09PT09PT09PT09PT09PT09PT09PSBXb3JkIEV4YW1wbGUgLS0+XG5cdFx0PGRpdiBjbGFzcz1cInJvdyBtYi0yXCIgaWQ9XCJkZWZhdWx0U3R5bGVzLXdvcmQtZXhhbXBsZVwiPlxuXHRcdFx0PGRpdiBjbGFzcz1cImNvbC14bC04IGNvbC1sZy0xMlwiPlxuXHRcdFx0XHRZb3UgY2FuIGFsc28gc2V0IHRoZSA8Y29kZT5zdHlsZTwvY29kZT4gb3B0aW9uIHRvIGEgbWFnaWNhbCB3b3JkIHRvIG1ha2Vcblx0XHRcdFx0dGhlIG1hZ2ljIGhhcHBlbi4gVGhpcyBjYW4gYWxzbyBiZSBzZXQgd2l0aCB0aGVcblx0XHRcdFx0PGNvZGU+bWFnaWNhbDwvY29kZT4gb3B0aW9uIHRvIDxzcGFuIGNsYXNzPVwiYm9vbGVhbi1zdHlsZVwiPnRydWU8L3NwYW4+LlxuXHRcdFx0PC9kaXY+XG5cdFx0PC9kaXY+XG5cblx0XHQ8ZGl2IGNsYXNzPVwicm93IG1iLTRcIiBpZD1cImRlZmF1bHRTdHlsZXMtd29yZC1leGFtcGxlXCI+XG5cdFx0XHQ8ZGl2IGNsYXNzPVwiY29sLXhsLTQgY29sLTYgZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlclwiPlxuXHRcdFx0XHQ8ZGl2IGNsYXNzPVwiY29sLXhsLTggY29sLWxnLTEyIG10LTJcIj5cblx0XHRcdFx0XHQ8c2VsZWN0IHYtbW9kZWw9XCJtYWdpY2FsV29yZFwiIGNsYXNzPVwiZm9ybS1zZWxlY3RcIj5cblx0XHRcdFx0XHRcdDxvcHRpb24gdi1mb3I9XCJ3b3JkIGluIG1hZ2ljYWxXb3Jkc1wiIDprZXk9XCJ3b3JkXCI+e3sgd29yZCB9fTwvb3B0aW9uPlxuXHRcdFx0XHRcdDwvc2VsZWN0PlxuXHRcdFx0XHQ8L2Rpdj5cblx0XHRcdDwvZGl2PlxuXHRcdFx0PGRpdiBjbGFzcz1cImNvbC14bC00IGNvbC02IGQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXIganVzdGlmeS1jb250ZW50LWVuZFwiPlxuXHRcdFx0XHQ8YnV0dG9uXG5cdFx0XHRcdFx0QGNsaWNrPVwid29yZEV4YW1wbGVcIlxuXHRcdFx0XHRcdGNsYXNzPVwiYnRuIGJ0bi1vdXRsaW5lLXByaW1hcnkgYnRuLXNtXCJcblx0XHRcdFx0XHR0eXBlPVwiYnV0dG9uXCJcblx0XHRcdFx0PlxuXHRcdFx0XHRcdFJ1blxuXHRcdFx0XHQ8L2J1dHRvbj5cblx0XHRcdDwvZGl2PlxuXG5cdFx0XHQ8ZGl2IGNsYXNzPVwiY29sLXhsLTggY29sLWxnLTEyXCI+XG5cdFx0XHRcdDx2dWUtY29kZS1oaWdobGlnaHQgbGFuZ3VhZ2U9XCJqc1wiPlxuXHRcdFx0XHRcdDxwcmU+XG50aGlzLiR1bmljb3JuTG9nKHtcblx0dGV4dDogJ0hlbGxvIFdvcmxkJyxcblx0c3R5bGVzOiAne3sgdGhpcy5tYWdpY2FsV29yZCB9fScsXG59KTtcblx0XHRcdFx0XHRcdDwvcHJlXG5cdFx0XHRcdFx0PlxuXHRcdFx0XHQ8L3Z1ZS1jb2RlLWhpZ2hsaWdodD5cblx0XHRcdDwvZGl2PlxuXHRcdDwvZGl2PlxuXHQ8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgVnVlIGZyb20gJ3Z1ZSc7XG5pbXBvcnQgVW5pY29ybkxvZyBmcm9tICdAcGx1Z2lucy9Vbmljb3JuTG9nJztcbmltcG9ydCB7IGNvbXBvbmVudCBhcyBWdWVDb2RlSGlnaGxpZ2h0IH0gZnJvbSAndnVlLWNvZGUtaGlnaGxpZ2h0JztcblxuVnVlLnVzZShVbmljb3JuTG9nKTtcblxuZXhwb3J0IGRlZmF1bHQge1xuXHRuYW1lOiAnU3R5bGVzRXhhbXBsZScsXG5cdGNvbXBvbmVudHM6IHtcblx0XHRWdWVDb2RlSGlnaGxpZ2h0LFxuXHR9LFxuXHRkYXRhOiAoKSA9PiAoe1xuXHRcdGRlZmF1bHRTdHlsZXM6ICdjb2xvcjogRGVlcFBpbms7IGZvbnQtc2l6ZTogMnJlbTsnLFxuXHRcdG1hZ2ljYWxXb3JkOiAndW5pY29ybicsXG5cdFx0bWFnaWNhbFdvcmRzOiBbXG5cdFx0XHQnbWFnaWMnLFxuXHRcdFx0J21hZ2ljYWwnLFxuXHRcdFx0J3ByaXNtJyxcblx0XHRcdCdwc3ljaGVkZWxpYycsXG5cdFx0XHQncmFpbmJvdycsXG5cdFx0XHQndHJpcHB5Jyxcblx0XHRcdCd1bmljb3JuJyxcblx0XHRdLFxuXHR9KSxcblx0bWV0aG9kczoge1xuXHRcdGFycmF5RXhhbXBsZSgpIHtcblx0XHRcdHRoaXMuJHVuaWNvcm5Mb2coe1xuXHRcdFx0XHR0ZXh0OiAnSGVsbG8gV29ybGQnLFxuXHRcdFx0XHRzdHlsZXM6IFtcblx0XHRcdFx0XHQnYmFja2dyb3VuZDogYmxhY2snLFxuXHRcdFx0XHRcdCdib3JkZXI6IDFweCBkYXNoZWQgbWFnZW50YScsXG5cdFx0XHRcdFx0J2NvbG9yOiBtYWdlbnRhJyxcblx0XHRcdFx0XHQnZm9udC1mYW1pbHk6IG1vbm9zcGFjZScsXG5cdFx0XHRcdFx0J2ZvbnQtc2l6ZTogMmVtJyxcblx0XHRcdFx0XHQncGFkZGluZzogMTBweCcsXG5cdFx0XHRcdF0sXG5cdFx0XHR9KTtcblx0XHR9LFxuXHRcdHNpbXBsZUV4YW1wbGUoKSB7XG5cdFx0XHR0aGlzLiR1bmljb3JuTG9nKHtcblx0XHRcdFx0dGV4dDogJ0hlbGxvIFdvcmxkJyxcblx0XHRcdFx0c3R5bGVzOiB0aGlzLmRlZmF1bHRTdHlsZXMsXG5cdFx0XHR9KTtcblx0XHR9LFxuXHRcdHdvcmRFeGFtcGxlKCkge1xuXHRcdFx0dGhpcy4kdW5pY29ybkxvZyh7XG5cdFx0XHRcdHRleHQ6IGBVc2luZyB0aGUgd29yZCAke3RoaXMubWFnaWNhbFdvcmR9YCxcblx0XHRcdFx0c3R5bGVzOiB0aGlzLm1hZ2ljYWxXb3JkLFxuXHRcdFx0fSk7XG5cdFx0fSxcblx0fSxcbn07XG48L3NjcmlwdD5cbiIsIjx0ZW1wbGF0ZT5cblx0PGRpdj5cblx0XHQ8ZGl2IGNsYXNzPVwicm93IG1iLTJcIj5cblx0XHRcdDxkaXYgY2xhc3M9XCJjb2wtMTJcIj5cblx0XHRcdFx0PGg1IGNsYXNzPVwibXktMFwiPjxjb2RlPnRleHQ8L2NvZGU+PC9oNT5cblx0XHRcdDwvZGl2PlxuXHRcdDwvZGl2PlxuXG5cdFx0PCEtLSA9PT09PT09PT09PT09PT09PT09PT09PSBTaW1wbGUgRXhhbXBsZSAtLT5cblx0XHQ8ZGl2IGNsYXNzPVwicm93IG1iLTRcIiBpZD1cInRleHQtc2ltcGxlLWV4YW1wbGVcIj5cblx0XHRcdDxkaXYgY2xhc3M9XCJjb2wteGwtNCBjb2wtNiBkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyXCI+XG5cdFx0XHRcdDxkaXYgY2xhc3M9XCJjb2wteGwtOCBjb2wtbGctMTIgbXQtMlwiPlxuXHRcdFx0XHRcdDxpbnB1dFxuXHRcdFx0XHRcdFx0di1tb2RlbD1cInRleHRcIlxuXHRcdFx0XHRcdFx0Y2xhc3M9XCJmb3JtLWNvbnRyb2xcIlxuXHRcdFx0XHRcdFx0dHlwZT1cInRleHRcIlxuXHRcdFx0XHRcdFx0dmFsdWU9XCJbQnVubmllc106XCJcblx0XHRcdFx0XHRcdHBsYWNlaG9sZGVyPVwiW0J1bm5pZXNdOlwiXG5cdFx0XHRcdFx0Lz5cblx0XHRcdFx0PC9kaXY+XG5cdFx0XHQ8L2Rpdj5cblx0XHRcdDxkaXYgY2xhc3M9XCJjb2wteGwtNCBjb2wtNiBkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyIGp1c3RpZnktY29udGVudC1lbmRcIj5cblx0XHRcdFx0PGJ1dHRvblxuXHRcdFx0XHRcdEBjbGljaz1cInNpbXBsZUV4YW1wbGVcIlxuXHRcdFx0XHRcdGNsYXNzPVwiYnRuIGJ0bi1vdXRsaW5lLXByaW1hcnkgYnRuLXNtXCJcblx0XHRcdFx0XHR0eXBlPVwiYnV0dG9uXCJcblx0XHRcdFx0PlxuXHRcdFx0XHRcdFJ1blxuXHRcdFx0XHQ8L2J1dHRvbj5cblx0XHRcdDwvZGl2PlxuXG5cdFx0XHQ8ZGl2IGNsYXNzPVwiY29sLXhsLTggY29sLWxnLTEyXCI+XG5cdFx0XHRcdDx2dWUtY29kZS1oaWdobGlnaHQgbGFuZ3VhZ2U9XCJqc1wiPlxuXHRcdFx0XHRcdDxwcmU+XG50aGlzLiR1bmljb3JuTG9nKHtcblx0dGV4dDogJ0hlbGxvIFdvcmxkJyxcbn0pO1xuXHRcdFx0XHRcdFx0PC9wcmVcblx0XHRcdFx0XHQ+XG5cdFx0XHRcdDwvdnVlLWNvZGUtaGlnaGxpZ2h0PlxuXHRcdFx0PC9kaXY+XG5cdFx0PC9kaXY+XG5cdDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCBWdWUgZnJvbSAndnVlJztcbmltcG9ydCBVbmljb3JuTG9nIGZyb20gJ0BwbHVnaW5zL1VuaWNvcm5Mb2cnO1xuaW1wb3J0IHsgY29tcG9uZW50IGFzIFZ1ZUNvZGVIaWdobGlnaHQgfSBmcm9tICd2dWUtY29kZS1oaWdobGlnaHQnO1xuXG5WdWUudXNlKFVuaWNvcm5Mb2cpO1xuXG5leHBvcnQgZGVmYXVsdCB7XG5cdG5hbWU6ICdUZXh0RXhhbXBsZScsXG5cdGNvbXBvbmVudHM6IHtcblx0XHRWdWVDb2RlSGlnaGxpZ2h0LFxuXHR9LFxuXHRkYXRhOiAoKSA9PiAoe1xuXHRcdHRleHQ6ICdIZWxsbyBXb3JsZCcsXG5cdH0pLFxuXHRtZXRob2RzOiB7XG5cdFx0c2ltcGxlRXhhbXBsZSgpIHtcblx0XHRcdGlmICh0aGlzLnRleHQgIT09ICcnKSB7XG5cdFx0XHRcdHRoaXMuJHVuaWNvcm5Mb2coe1xuXHRcdFx0XHRcdHRleHQ6IHRoaXMudGV4dCxcblx0XHRcdFx0fSk7XG5cblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLiR1bmljb3JuTG9nKCk7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSxcblx0fSxcbn07XG48L3NjcmlwdD5cbiIsIjx0ZW1wbGF0ZT5cblx0PGRpdj5cblx0XHQ8ZGl2IGNsYXNzPVwicm93IG1iLTJcIj5cblx0XHRcdDxkaXYgY2xhc3M9XCJjb2wtMTJcIj5cblx0XHRcdFx0PGg1IGNsYXNzPVwibXktMFwiPjxjb2RlPnR5cGU8L2NvZGU+PC9oNT5cblx0XHRcdDwvZGl2PlxuXHRcdDwvZGl2PlxuXG5cdFx0PCEtLSA9PT09PT09PT09PT09PT09PT09PT09PSBTaW1wbGUgRXhhbXBsZSAtLT5cblx0XHQ8ZGl2IGNsYXNzPVwicm93IG1iLTRcIiBpZD1cImRlZmF1bHRTdHlsZXMtc2ltcGxlLWV4YW1wbGVcIj5cblx0XHRcdDxkaXYgY2xhc3M9XCJjb2wteGwtNCBjb2wtNiBkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyXCI+XG5cdFx0XHRcdDxkaXYgY2xhc3M9XCJjb2wteGwtOCBjb2wtbGctMTIgbXQtMlwiPlxuXHRcdFx0XHRcdDxzZWxlY3Qgdi1tb2RlbD1cImxvZ1R5cGVcIiBjbGFzcz1cImZvcm0tc2VsZWN0XCIgQGNoYW5nZT1cImNoZWNrVHlwZVwiPlxuXHRcdFx0XHRcdFx0PG9wdGlvbiB2LWZvcj1cInR5cGUgaW4gdHlwZXNcIiA6a2V5PVwidHlwZVwiPnt7IHR5cGUgfX08L29wdGlvbj5cblx0XHRcdFx0XHQ8L3NlbGVjdD5cblx0XHRcdFx0PC9kaXY+XG5cdFx0XHQ8L2Rpdj5cblx0XHRcdDxkaXYgY2xhc3M9XCJjb2wteGwtNCBjb2wtNiBkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyIGp1c3RpZnktY29udGVudC1lbmRcIj5cblx0XHRcdFx0PGJ1dHRvblxuXHRcdFx0XHRcdEBjbGljaz1cInNpbXBsZUV4YW1wbGVcIlxuXHRcdFx0XHRcdGNsYXNzPVwiYnRuIGJ0bi1vdXRsaW5lLXByaW1hcnkgYnRuLXNtXCJcblx0XHRcdFx0XHR0eXBlPVwiYnV0dG9uXCJcblx0XHRcdFx0XHQ6ZGlzYWJsZWQ9XCJ0aGlzLmxvZ1R5cGUgPT09ICdncm91cEVuZCdcIlxuXHRcdFx0XHQ+XG5cdFx0XHRcdFx0UnVuXG5cdFx0XHRcdDwvYnV0dG9uPlxuXHRcdFx0PC9kaXY+XG5cblx0XHRcdDxkaXYgY2xhc3M9XCJjb2wteGwtOCBjb2wtbGctMTIgbXktMlwiIHYtaWY9XCJsb2dOb3RlXCI+XG5cdFx0XHRcdDxkaXZcblx0XHRcdFx0XHRjbGFzcz1cImFsZXJ0IGFsZXJ0LXByaW1hcnkgZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlciBtYi0wXCJcblx0XHRcdFx0XHRyb2xlPVwiYWxlcnRcIlxuXHRcdFx0XHRcdHYtaHRtbD1cImxvZ05vdGVcIlxuXHRcdFx0XHQ+PC9kaXY+XG5cdFx0XHQ8L2Rpdj5cblxuXHRcdFx0PGRpdiBjbGFzcz1cImNvbC14bC04IGNvbC1sZy0xMlwiPlxuXHRcdFx0XHQ8dnVlLWNvZGUtaGlnaGxpZ2h0IGxhbmd1YWdlPVwianNcIj5cblx0XHRcdFx0XHQ8cHJlPlxudGhpcy4kdW5pY29ybkxvZyh7XG5cdHRleHQ6ICdIZWxsbyBXb3JsZCcsXG5cdHR5cGU6ICdsb2cnLFxufSk7XG5cdFx0XHRcdFx0XHQ8L3ByZVxuXHRcdFx0XHRcdD5cblx0XHRcdFx0PC92dWUtY29kZS1oaWdobGlnaHQ+XG5cdFx0XHQ8L2Rpdj5cblx0XHQ8L2Rpdj5cblx0PC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IFZ1ZSBmcm9tICd2dWUnO1xuaW1wb3J0IFVuaWNvcm5Mb2cgZnJvbSAnQHBsdWdpbnMvVW5pY29ybkxvZyc7XG5pbXBvcnQgeyBjb21wb25lbnQgYXMgVnVlQ29kZUhpZ2hsaWdodCB9IGZyb20gJ3Z1ZS1jb2RlLWhpZ2hsaWdodCc7XG5cblZ1ZS51c2UoVW5pY29ybkxvZyk7XG5cbmV4cG9ydCBkZWZhdWx0IHtcblx0bmFtZTogJ1R5cGVFeGFtcGxlJyxcblx0Y29tcG9uZW50czoge1xuXHRcdFZ1ZUNvZGVIaWdobGlnaHQsXG5cdH0sXG5cdGRhdGE6ICgpID0+ICh7XG5cdFx0bG9nTm90ZTogJycsXG5cdFx0bG9nVHlwZTogJ2xvZycsXG5cdFx0dHlwZXM6IFtcblx0XHRcdCdjbGVhcicsXG5cdFx0XHQnZGVidWcnLFxuXHRcdFx0J2RpcicsXG5cdFx0XHQnZXJyb3InLFxuXHRcdFx0J2dyb3VwJyxcblx0XHRcdCdncm91cENvbGxhcHNlZCcsXG5cdFx0XHQnZ3JvdXBFbmQnLFxuXHRcdFx0J2luZm8nLFxuXHRcdFx0J2xvZycsXG5cdFx0XHQndGFibGUnLFxuXHRcdFx0J3RyYWNlJyxcblx0XHRcdCd3YXJuJyxcblx0XHRdLFxuXHR9KSxcblx0bWV0aG9kczoge1xuXHRcdGNoZWNrVHlwZSgpIHtcblx0XHRcdHRoaXMubG9nTm90ZSA9ICcnO1xuXG5cdFx0XHRjb25zdCBpY29uU3ZnID0gYFxuXHRcdFx0XHQ8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiBzdHlsZT1cImRpc3BsYXk6IG5vbmU7XCI+XG5cdFx0XHRcdFx0PHN5bWJvbCBpZD1cImluZm8tZmlsbFwiIGZpbGw9XCJjdXJyZW50Q29sb3JcIiB2aWV3Qm94PVwiMCAwIDE2IDE2XCI+XG5cdFx0XHRcdFx0XHQ8cGF0aCBkPVwiTTggMTZBOCA4IDAgMSAwIDggMGE4IDggMCAwIDAgMCAxNnptLjkzLTkuNDEyLTEgNC43MDVjLS4wNy4zNC4wMjkuNTMzLjMwNC41MzMuMTk0IDAgLjQ4Ny0uMDcuNjg2LS4yNDZsLS4wODguNDE2Yy0uMjg3LjM0Ni0uOTIuNTk4LTEuNDY1LjU5OC0uNzAzIDAtMS4wMDItLjQyMi0uODA4LTEuMzE5bC43MzgtMy40NjhjLjA2NC0uMjkzLjAwNi0uMzk5LS4yODctLjQ3bC0uNDUxLS4wODEuMDgyLS4zODEgMi4yOS0uMjg3ek04IDUuNWExIDEgMCAxIDEgMC0yIDEgMSAwIDAgMSAwIDJ6XCIvPlxuXHRcdFx0XHRcdDwvc3ltYm9sPlxuXHRcdFx0XHQ8L3N2Zz5cblx0XHRcdGA7XG5cblx0XHRcdGNvbnN0IGluZm9JY29uID0gYFxuXHRcdFx0JHtpY29uU3ZnfVxuXHRcdFx0IDxzdmcgY2xhc3M9XCJiaSBmbGV4LXNocmluay0wIG1lLTJcIiB3aWR0aD1cIjI0XCIgaGVpZ2h0PVwiMjRcIiByb2xlPVwiaW1nXCIgYXJpYS1sYWJlbD1cIkluZm86XCI+PHVzZSB4bGluazpocmVmPVwiI2luZm8tZmlsbFwiPjwvdXNlPjwvc3ZnPlxuXHRcdFx0YDtcblxuXHRcdFx0aWYgKHRoaXMubG9nVHlwZSA9PT0gJ2RpcicgfHwgdGhpcy5sb2dUeXBlID09PSAndGFibGUnKSB7XG5cdFx0XHRcdHRoaXMubG9nTm90ZSA9IGAke2luZm9JY29ufTxkaXY+Q29uc29sZSBtZXRob2QgPGNvZGU+JHt0aGlzLmxvZ1R5cGV9PC9jb2RlPiB3aWxsIHdvcmssIGJ1dCBkb2VzIG5vdCBzdXBwb3J0IGNvbG9ycy48L2Rpdj5gO1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cblx0XHRcdGlmICh0aGlzLmxvZ1R5cGUgPT09ICdncm91cEVuZCcpIHtcblx0XHRcdFx0dGhpcy5sb2dOb3RlID0gYCR7aW5mb0ljb259PGRpdj48Y29kZT5ncm91cEVuZDwvY29kZT4gb25seSB3b3JrcyB3aGVuIHVzZWQgd2l0aCA8Y29kZT5ncm91cDwvY29kZT4gb3IgPGNvZGU+Z3JvdXBDb2xsYXBzZWQ8L2NvZGU+PGRpdj5gO1xuXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0sXG5cdFx0c2ltcGxlRXhhbXBsZSgpIHtcblx0XHRcdGlmICh0aGlzLmxvZ1R5cGUgPT09ICdkaXInKSB7XG5cdFx0XHRcdHRoaXMuJHVuaWNvcm5Mb2coe1xuXHRcdFx0XHRcdHRleHQ6ICdIZWxsbyBXb3JsZCcsXG5cdFx0XHRcdFx0dHlwZTogJ2RpcicsXG5cdFx0XHRcdFx0b2JqZWN0czogeyBmb286ICdiYXInIH0sXG5cdFx0XHRcdH0pO1xuXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKHRoaXMubG9nVHlwZSA9PT0gJ3RhYmxlJykge1xuXHRcdFx0XHR0aGlzLiR1bmljb3JuTG9nKHtcblx0XHRcdFx0XHR0ZXh0OiAnSGVsbG8gV29ybGQnLFxuXHRcdFx0XHRcdHR5cGU6IHRoaXMubG9nVHlwZSxcblx0XHRcdFx0XHRhcnJheTogW3sgZm9vOiAnZm9vJyB9LCB7IGZvbzogJ2JhcicgfV0sXG5cdFx0XHRcdH0pO1xuXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKHRoaXMubG9nVHlwZSA9PT0gJ2RlYnVnJykge1xuXHRcdFx0XHR0aGlzLiR1bmljb3JuTG9nKHtcblx0XHRcdFx0XHR0ZXh0OiAnSGVsbG8gV29ybGQnLFxuXHRcdFx0XHRcdHR5cGU6IHRoaXMubG9nVHlwZSxcblx0XHRcdFx0XHRhcnJheTogW3sgZm9vOiAnZm9vJyB9LCB7IGZvbzogJ2JhcicgfV0sXG5cdFx0XHRcdH0pO1xuXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKHRoaXMubG9nVHlwZSA9PT0gJ2dyb3VwJyB8fCB0aGlzLmxvZ1R5cGUgPT09ICdncm91cENvbGxhcHNlZCcpIHtcblx0XHRcdFx0dGhpcy4kdW5pY29ybkxvZyh7XG5cdFx0XHRcdFx0dGV4dDogYCR7dGhpcy5sb2dUeXBlfWAsXG5cdFx0XHRcdFx0dHlwZTogdGhpcy5sb2dUeXBlLFxuXHRcdFx0XHR9KTtcblxuXHRcdFx0XHR0aGlzLiR1bmljb3JuTG9nKHtcblx0XHRcdFx0XHR0ZXh0OiAnRm9vJyxcblx0XHRcdFx0XHR0eXBlOiAnbG9nJyxcblx0XHRcdFx0fSk7XG5cblx0XHRcdFx0dGhpcy4kdW5pY29ybkxvZyh7XG5cdFx0XHRcdFx0dGV4dDogJ0JhcicsXG5cdFx0XHRcdFx0dHlwZTogJ2xvZycsXG5cdFx0XHRcdH0pO1xuXG5cdFx0XHRcdHRoaXMuJHVuaWNvcm5Mb2coe1xuXHRcdFx0XHRcdHR5cGU6ICdncm91cEVuZCcsXG5cdFx0XHRcdFx0YXJyYXk6IFt7IGZvbzogJ2ZvbycgfSwgeyBmb286ICdiYXInIH1dLFxuXHRcdFx0XHR9KTtcblxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuJHVuaWNvcm5Mb2coe1xuXHRcdFx0XHR0ZXh0OiAnSGVsbG8gV29ybGQnLFxuXHRcdFx0XHR0eXBlOiB0aGlzLmxvZ1R5cGUsXG5cdFx0XHR9KTtcblxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0sXG5cdH0sXG59O1xuPC9zY3JpcHQ+XG4iLCI8dGVtcGxhdGU+XG5cdDxkaXY+XG5cdFx0PE5hdiAvPlxuXG5cdFx0PGRpdiBjbGFzcz1cImNvbnRhaW5lciBtYi01XCI+XG5cdFx0XHQ8ZGl2IGNsYXNzPVwicm93IG1iLTNcIj5cblx0XHRcdFx0PGRpdiBjbGFzcz1cImNvbC0xMiB0ZXh0LWNlbnRlclwiPlxuXHRcdFx0XHRcdDxoMSBjbGFzcz1cInJhaW5ib3ctdGV4dFwiPlZ1ZSBVbmljb3JuIExvZzwvaDE+XG5cdFx0XHRcdDwvZGl2PlxuXHRcdFx0PC9kaXY+XG5cblx0XHRcdDxkaXYgY2xhc3M9XCJyb3dcIj5cblx0XHRcdFx0PGRpdiBjbGFzcz1cImNvbC0xMiBtYi00XCI+XG5cdFx0XHRcdFx0PGgzIGNsYXNzPVwidGV4dC1jZW50ZXIgbWItNFwiPlxuXHRcdFx0XHRcdFx0QSA8c3BhbiBjbGFzcz1cInJhaW5ib3ctdGV4dFwiPm1hZ2ljYWw8L3NwYW4+IPCfpoQgcGx1Z2luIHRvIG1ha2Vcblx0XHRcdFx0XHRcdGNvbG9yaW5nIHRoZSBjb25zb2xlIG91dHB1dCBlYXNpZXIgYW5kIG1vcmUgZmxleGlibGUuXG5cdFx0XHRcdFx0PC9oMz5cblx0XHRcdFx0XHQ8cD5cblx0XHRcdFx0XHRcdFNvbWV0aW1lcyB3aGVuIGJ1aWxkaW5nIHlvdXIgYXBwbGljYXRpb24vc2l0ZSB5b3UgZG9uJ3Qgd2FudCB0byBzZWVcblx0XHRcdFx0XHRcdHlvdXIgbGludGVyIGNvbXBsYWluaW5nIGFib3V0IHVzaW5nIGNvbnNvbGUgZnVuY3Rpb25zLiBUaGlzIGhlbHBzIHRvXG5cdFx0XHRcdFx0XHRrZWVwIHlvdXIgbGludGVyIGhhcHB5IHNvIHlvdSBjYW4gY29uY2VudHJhdGUgb24gd3JpdGluZyBidWcgZnJlZVxuXHRcdFx0XHRcdFx0bWFnaWNhbCBjb2RlLlxuXHRcdFx0XHRcdDwvcD5cblx0XHRcdFx0XHQ8cD5cblx0XHRcdFx0XHRcdEl0IGFsc28gaGFzIHRoZSBhYmlsaXR5IHRvIHJ1biB0aGUgY29uc29sZSBmdW5jdGlvbnMgZGVwZW5kaW5nIG9uXG5cdFx0XHRcdFx0XHRlbnZpcm9ubWVudCB2YXJpYWJsZXMgc28geW91IGNhbiBrZWVwIHlvdXIgcHJvZHVjdGlvbiBzaXRlJ3MgY29uc29sZVxuXHRcdFx0XHRcdFx0cXVpZXQuXG5cdFx0XHRcdFx0PC9wPlxuXHRcdFx0XHQ8L2Rpdj5cblxuXHRcdFx0XHQ8ZGl2IGNsYXNzPVwiY29sLTEyXCI+XG5cdFx0XHRcdFx0PGg1PkRlbW88L2g1PlxuXHRcdFx0XHQ8L2Rpdj5cblxuXHRcdFx0XHQ8ZGl2IGNsYXNzPVwiY29sLTEyXCI+XG5cdFx0XHRcdFx0T3BlbiBEZXZUb29scyBhbmQgY2xpY2sgb24gdGhlIFwiQ29uc29sZVwiIHRhYiBhbmQgdHJ5IG91dCBzb21lXG5cdFx0XHRcdFx0PGEgaHJlZj1cIiN1bC1leGFtcGxlc1wiPkV4YW1wbGVzPC9hPi5cblx0XHRcdFx0PC9kaXY+XG5cdFx0XHQ8L2Rpdj5cblx0XHQ8L2Rpdj5cblxuXHRcdDxkaXYgY2xhc3M9XCJjb250YWluZXJcIj5cblx0XHRcdDwhLS0gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSBJbnN0YWxsYXRpb24gLS0+XG5cdFx0XHQ8ZGl2IGNsYXNzPVwicm93IG1iLTVcIiBpZD1cInVsLWluc3RhbGxhdGlvblwiPlxuXHRcdFx0XHQ8ZGl2IGNsYXNzPVwiY29sLTEyXCI+XG5cdFx0XHRcdFx0PGgyPkluc3RhbGxhdGlvbjwvaDI+XG5cdFx0XHRcdDwvZGl2PlxuXG5cdFx0XHRcdDxkaXYgY2xhc3M9XCJjb2wteGwtOCBjb2wtbGctMTJcIj5cblx0XHRcdFx0XHQ8dnVlLWNvZGUtaGlnaGxpZ2h0IGxhbmd1YWdlPVwic2hlbGxcIj5cblx0XHRcdFx0XHRcdDxwcmU+XG5ucG0gaSAtRCB2dWUtdW5pY29ybi1sb2dcblx0XHRcdFx0XHRcdDwvcHJlXG5cdFx0XHRcdFx0XHQ+XG5cdFx0XHRcdFx0PC92dWUtY29kZS1oaWdobGlnaHQ+XG5cdFx0XHRcdDwvZGl2PlxuXHRcdFx0PC9kaXY+XG5cblx0XHRcdDwhLS0gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSBVc2FnZSAtLT5cblx0XHRcdDxkaXYgY2xhc3M9XCJyb3cgbWItNVwiIGlkPVwidWwtdXNhZ2VcIj5cblx0XHRcdFx0PGRpdiBjbGFzcz1cImNvbC0xMlwiPlxuXHRcdFx0XHRcdDxoMj5Vc2FnZTwvaDI+XG5cdFx0XHRcdDwvZGl2PlxuXG5cdFx0XHRcdDxkaXYgY2xhc3M9XCJjb2wteGwtOCBjb2wtbGctMTJcIj5cblx0XHRcdFx0XHQ8dnVlLWNvZGUtaGlnaGxpZ2h0IGxhbmd1YWdlPVwianNcIj5cblx0XHRcdFx0XHRcdDxwcmU+XG5pbXBvcnQgVnVlIGZyb20gJ3Z1ZSc7XG5pbXBvcnQgVW5pY29ybkxvZyBmcm9tICd2dWUtdW5pY29ybi1sb2cnO1xuXG5WdWUudXNlKFVuaWNvcm5Mb2cpO1xuXHRcdFx0XHRcdFx0XHRcdDwvcHJlXG5cdFx0XHRcdFx0XHQ+XG5cdFx0XHRcdFx0PC92dWUtY29kZS1oaWdobGlnaHQ+XG5cdFx0XHRcdDwvZGl2PlxuXHRcdFx0PC9kaXY+XG5cblx0XHRcdDwhLS0gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSBQbHVnaW4gT3B0aW9ucyAtLT5cblx0XHRcdDxkaXYgY2xhc3M9XCJyb3cgbWItNVwiIGlkPVwidWwtcGx1Z2luLW9wdGlvbnNcIj5cblx0XHRcdFx0PGRpdiBjbGFzcz1cImNvbC0xMiBtYi0zXCI+XG5cdFx0XHRcdFx0PGgyPlBsdWdpbiBPcHRpb25zPC9oMj5cblx0XHRcdFx0PC9kaXY+XG5cblx0XHRcdFx0PGRpdiBjbGFzcz1cImNvbC0xMiBtYi0zXCI+XG5cdFx0XHRcdFx0PGRpdiBjbGFzcz1cInRhYmxlLXJlc3BvbnNpdmVcIj5cblx0XHRcdFx0XHRcdDx0YWJsZSBjbGFzcz1cInRhYmxlIHRhYmxlLXN0cmlwZWQgdGFibGUtYm9yZGVyZWRcIj5cblx0XHRcdFx0XHRcdFx0PHRoZWFkPlxuXHRcdFx0XHRcdFx0XHRcdDx0cj5cblx0XHRcdFx0XHRcdFx0XHRcdDx0aD5OYW1lPC90aD5cblx0XHRcdFx0XHRcdFx0XHRcdDx0aD5UeXBlPC90aD5cblx0XHRcdFx0XHRcdFx0XHRcdDx0aD5EZWZhdWx0PC90aD5cblx0XHRcdFx0XHRcdFx0XHRcdDx0aD5PcHRpb25zPC90aD5cblx0XHRcdFx0XHRcdFx0XHRcdDx0aD5EZXNjcmlwdGlvbjwvdGg+XG5cdFx0XHRcdFx0XHRcdFx0PC90cj5cblx0XHRcdFx0XHRcdFx0PC90aGVhZD5cblx0XHRcdFx0XHRcdFx0PHRib2R5PlxuXHRcdFx0XHRcdFx0XHRcdDx0cj5cblx0XHRcdFx0XHRcdFx0XHRcdDx0ZCB2YWxpZ249XCJ0b3BcIj5kZWZhdWx0U3R5bGVzPC90ZD5cblx0XHRcdFx0XHRcdFx0XHRcdDx0ZCB2YWxpZ249XCJ0b3BcIiBjbGFzcz1cIm9wdGlvbi10eXBlXCI+T2JqZWN0PC90ZD5cblx0XHRcdFx0XHRcdFx0XHRcdDx0ZCB2YWxpZ249XCJ0b3BcIj5cblx0XHRcdFx0XHRcdFx0XHRcdFx0PGNvZGU+XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0PHByZT5cbmNvbnN0IHJhaW5ib3dMaW5lYXJHcmFkaWVudCA9IGBsaW5lYXItZ3JhZGllbnQodG8gcmlnaHQsXG5cdGhzbCgwLCAxMDAlLCA1MCUpLFxuXHRoc2woNjAsIDEwMCUsIDUwJSksXG5cdGhzbCgxMjAsIDEwMCUsIDUwJSksXG5cdGhzbCgxODAsIDEwMCUsIDUwJSksXG5cdGhzbCgyNDAsIDEwMCUsIDUwJSksXG5cdGhzbCgzMDAsIDEwMCUsIDUwJSksXG5cdGhzbCgzNjAsIDEwMCUsIDUwJSlcbilgO1xuXG5kZWZhdWx0U3R5bGVzOiB7XG5cdGxvZzogW1xuXHRcdCdiYWNrZ3JvdW5kLWNvbG9yOiBibGFjaycsXG5cdFx0YGJvcmRlci1pbWFnZTogJHtyYWluYm93TGluZWFyR3JhZGllbnR9IDFgLFxuXHRcdCdib3JkZXItc3R5bGU6IHNvbGlkJyxcblx0XHQnYm9yZGVyLXdpZHRoOiA0cHgnLFxuXHRcdCdjb2xvcjogI2ZmZicsXG5cdFx0J2ZvbnQtd2VpZ2h0OiBub3JtYWwnLFxuXHRcdCdwYWRkaW5nOiA4cHgnLFxuXHRdLFxuXHRpbmZvOiBbXG5cdFx0J2JhY2tncm91bmQtY29sb3I6IGhzbGEoMjI1LCAxMDAlLCA4JSwgMSknLFxuXHRcdCdib3gtc2hhZG93OiA5OTlweCAwIDAgaHNsYSgyMjUsIDEwMCUsIDglLCAxKScsXG5cdFx0J2NvbG9yOiBoc2xhKDIyNSwgMTAwJSwgODUlLCAxKScsXG5cdFx0J2Rpc3BsYXk6IGJsb2NrJyxcblx0XHQncGFkZGluZzogMnB4Jyxcblx0XSxcbn08L3ByZVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdD5cblx0XHRcdFx0XHRcdFx0XHRcdFx0PC9jb2RlPlxuXHRcdFx0XHRcdFx0XHRcdFx0PC90ZD5cblx0XHRcdFx0XHRcdFx0XHRcdDx0ZCB2YWxpZ249XCJ0b3BcIj5cblx0XHRcdFx0XHRcdFx0XHRcdFx0PGNvZGU+XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0PHByZT5cbntcblx0bG9nOiBbXSxcblx0aW5mbzogW10sXG59PC9wcmVcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ+XG5cdFx0XHRcdFx0XHRcdFx0XHRcdDwvY29kZT5cblx0XHRcdFx0XHRcdFx0XHRcdDwvdGQ+XG5cdFx0XHRcdFx0XHRcdFx0XHQ8dGQgdmFsaWduPVwidG9wXCI+e3sgY29weS5kZWZhdWx0U3R5bGVzIH19PC90ZD5cblx0XHRcdFx0XHRcdFx0XHQ8L3RyPlxuXHRcdFx0XHRcdFx0XHRcdDx0cj5cblx0XHRcdFx0XHRcdFx0XHRcdDx0ZCB2YWxpZ249XCJ0b3BcIj5kaXNhYmxlZDwvdGQ+XG5cdFx0XHRcdFx0XHRcdFx0XHQ8dGQgdmFsaWduPVwidG9wXCIgY2xhc3M9XCJvcHRpb24tdHlwZVwiPkJvb2xlYW48L3RkPlxuXHRcdFx0XHRcdFx0XHRcdFx0PHRkIHZhbGlnbj1cInRvcFwiIGNsYXNzPVwiYm9vbGVhbi1zdHlsZVwiPmZhbHNlPC90ZD5cblx0XHRcdFx0XHRcdFx0XHRcdDx0ZCB2YWxpZ249XCJ0b3BcIiB2LWh0bWw9XCJvcHRpb25zLmJvb2xlYW5cIj48L3RkPlxuXHRcdFx0XHRcdFx0XHRcdFx0PHRkIHZhbGlnbj1cInRvcFwiPnt7IGNvcHkuZGlzYWJsZWQgfX08L3RkPlxuXHRcdFx0XHRcdFx0XHRcdDwvdHI+XG5cdFx0XHRcdFx0XHRcdFx0PHRyPlxuXHRcdFx0XHRcdFx0XHRcdFx0PHRkIHZhbGlnbj1cInRvcFwiPmxvZ1ByZWZpeDwvdGQ+XG5cdFx0XHRcdFx0XHRcdFx0XHQ8dGQgdmFsaWduPVwidG9wXCIgY2xhc3M9XCJvcHRpb24tdHlwZVwiPkJvb2xlYW4gfCBTdHJpbmc8L3RkPlxuXHRcdFx0XHRcdFx0XHRcdFx0PHRkIHZhbGlnbj1cInRvcFwiIGNsYXNzPVwiYm9vbGVhbi1zdHlsZVwiPmZhbHNlPC90ZD5cblx0XHRcdFx0XHRcdFx0XHRcdDx0ZCB2YWxpZ249XCJ0b3BcIj4tPC90ZD5cblx0XHRcdFx0XHRcdFx0XHRcdDx0ZCB2YWxpZ249XCJ0b3BcIj57eyBjb3B5LmxvZ1ByZWZpeCB9fTwvdGQ+XG5cdFx0XHRcdFx0XHRcdFx0PC90cj5cblx0XHRcdFx0XHRcdFx0XHQ8dHI+XG5cdFx0XHRcdFx0XHRcdFx0XHQ8dGQgdmFsaWduPVwidG9wXCI+c3R5bGVzPC90ZD5cblx0XHRcdFx0XHRcdFx0XHRcdDx0ZCB2YWxpZ249XCJ0b3BcIiBjbGFzcz1cIm9wdGlvbi10eXBlXCI+U3RyaW5nIHwgQXJyYXk8L3RkPlxuXHRcdFx0XHRcdFx0XHRcdFx0PHRkIHZhbGlnbj1cInRvcFwiPi08L3RkPlxuXHRcdFx0XHRcdFx0XHRcdFx0PHRkIHZhbGlnbj1cInRvcFwiIHYtaHRtbD1cIm9wdGlvbnMuc3R5bGVzXCI+PC90ZD5cblx0XHRcdFx0XHRcdFx0XHRcdDx0ZCB2YWxpZ249XCJ0b3BcIj57eyBjb3B5LnN0eWxlcyB9fTwvdGQ+XG5cdFx0XHRcdFx0XHRcdFx0PC90cj5cblx0XHRcdFx0XHRcdFx0XHQ8dHI+XG5cdFx0XHRcdFx0XHRcdFx0XHQ8dGQgdmFsaWduPVwidG9wXCI+dHlwZTwvdGQ+XG5cdFx0XHRcdFx0XHRcdFx0XHQ8dGQgdmFsaWduPVwidG9wXCIgY2xhc3M9XCJvcHRpb24tdHlwZVwiPlN0cmluZzwvdGQ+XG5cdFx0XHRcdFx0XHRcdFx0XHQ8dGQgdmFsaWduPVwidG9wXCI+bG9nPC90ZD5cblx0XHRcdFx0XHRcdFx0XHRcdDx0ZCB2YWxpZ249XCJ0b3BcIiB2LWh0bWw9XCJvcHRpb25zLnR5cGVcIj48L3RkPlxuXHRcdFx0XHRcdFx0XHRcdFx0PHRkIHZhbGlnbj1cInRvcFwiPnt7IGNvcHkudHlwZSB9fTwvdGQ+XG5cdFx0XHRcdFx0XHRcdFx0PC90cj5cblx0XHRcdFx0XHRcdFx0PC90Ym9keT5cblx0XHRcdFx0XHRcdDwvdGFibGU+XG5cdFx0XHRcdFx0PC9kaXY+XG5cdFx0XHRcdDwvZGl2PlxuXG5cdFx0XHRcdDwhLS0gPT09PT09PT09PT09PT09PT09PT09PT0gUGx1Z2luIE9wdGlvbiBPdmVycmlkaW5nIC0tPlxuXHRcdFx0XHQ8ZGl2IGNsYXNzPVwiY29sLTEyXCI+XG5cdFx0XHRcdFx0PGg1Pk92ZXJyaWRpbmcgdGhlIHBsdWdpbiBkZWZhdWx0IG9wdGlvbnM8L2g1PlxuXHRcdFx0XHQ8L2Rpdj5cblxuXHRcdFx0XHQ8ZGl2IGNsYXNzPVwiY29sLXhsLTggY29sLWxnLTEyXCI+XG5cdFx0XHRcdFx0PHZ1ZS1jb2RlLWhpZ2hsaWdodCBsYW5ndWFnZT1cImpzXCI+XG5cdFx0XHRcdFx0XHQ8cHJlPlxuaW1wb3J0IFZ1ZSBmcm9tICd2dWUnO1xuaW1wb3J0IFVuaWNvcm5Mb2cgZnJvbSAndnVlLXVuaWNvcm4tbG9nJztcblxuVnVlLnVzZShVbmljb3JuTG9nLCB7XG4gIGRlZmF1bHRTdHlsZXM6IHt9LFxuICBkaXNhYmxlZDogcHJvY2Vzcy5lbnYuVU5JQ09STl9MT0cgIT09ICd0cnVlJyxcbiAgbG9nUHJlZml4OiAnW09NRyBMT09LIEhFUkUhXScsXG4gIHN0eWxlczogJ2ZvbnQtd2VpZ2h0OiBib2xkOycsXG4gIHR5cGU6ICdpbmZvJ1xufSk7XG5cdFx0XHRcdFx0XHRcdFx0PC9wcmVcblx0XHRcdFx0XHRcdD5cblx0XHRcdFx0XHQ8L3Z1ZS1jb2RlLWhpZ2hsaWdodD5cblx0XHRcdFx0PC9kaXY+XG5cblx0XHRcdFx0PGRpdiBjbGFzcz1cImNvbC0xMlwiPlxuXHRcdFx0XHRcdDxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHN0eWxlPVwiZGlzcGxheTogbm9uZVwiPlxuXHRcdFx0XHRcdFx0PHN5bWJvbFxuXHRcdFx0XHRcdFx0XHRpZD1cImV4Y2xhbWF0aW9uLXRyaWFuZ2xlLWZpbGxcIlxuXHRcdFx0XHRcdFx0XHRmaWxsPVwiY3VycmVudENvbG9yXCJcblx0XHRcdFx0XHRcdFx0dmlld0JveD1cIjAgMCAxNiAxNlwiXG5cdFx0XHRcdFx0XHQ+XG5cdFx0XHRcdFx0XHRcdDxwYXRoXG5cdFx0XHRcdFx0XHRcdFx0ZD1cIk04Ljk4MiAxLjU2NmExLjEzIDEuMTMgMCAwIDAtMS45NiAwTC4xNjUgMTMuMjMzYy0uNDU3Ljc3OC4wOTEgMS43NjcuOTggMS43NjdoMTMuNzEzYy44ODkgMCAxLjQzOC0uOTkuOTgtMS43NjdMOC45ODIgMS41NjZ6TTggNWMuNTM1IDAgLjk1NC40NjIuOS45OTVsLS4zNSAzLjUwN2EuNTUyLjU1MiAwIDAgMS0xLjEgMEw3LjEgNS45OTVBLjkwNS45MDUgMCAwIDEgOCA1em0uMDAyIDZhMSAxIDAgMSAxIDAgMiAxIDEgMCAwIDEgMC0yelwiXG5cdFx0XHRcdFx0XHRcdC8+XG5cdFx0XHRcdFx0XHQ8L3N5bWJvbD5cblx0XHRcdFx0XHQ8L3N2Zz5cblxuXHRcdFx0XHRcdDxkaXZcblx0XHRcdFx0XHRcdGNsYXNzPVwiYWxlcnQgYWxlcnQtcHJpbWFyeSBkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyIG15LTJcIlxuXHRcdFx0XHRcdFx0cm9sZT1cImFsZXJ0XCJcblx0XHRcdFx0XHQ+XG5cdFx0XHRcdFx0XHQ8c3ZnXG5cdFx0XHRcdFx0XHRcdGNsYXNzPVwiYmkgZmxleC1zaHJpbmstMCBtZS0yXCJcblx0XHRcdFx0XHRcdFx0d2lkdGg9XCIyNFwiXG5cdFx0XHRcdFx0XHRcdGhlaWdodD1cIjI0XCJcblx0XHRcdFx0XHRcdFx0cm9sZT1cImltZ1wiXG5cdFx0XHRcdFx0XHRcdGFyaWEtbGFiZWw9XCJJbmZvOlwiXG5cdFx0XHRcdFx0XHQ+XG5cdFx0XHRcdFx0XHRcdDx1c2UgeGxpbms6aHJlZj1cIiNleGNsYW1hdGlvbi10cmlhbmdsZS1maWxsXCI+PC91c2U+XG5cdFx0XHRcdFx0XHQ8L3N2Zz5cblx0XHRcdFx0XHRcdDxkaXY+XG5cdFx0XHRcdFx0XHRcdEl0IGlzIHJlY29tbWVuZGVkIHRvIHNldCB0aGUgPGNvZGU+ZGlzYWJsZWQ8L2NvZGU+IG9wdGlvbiB0byB1c2UgYVxuXHRcdFx0XHRcdFx0XHQ8c3BhbiBjbGFzcz1cImZzdC1pdGFsaWNcIj4uZW52PC9zcGFuPiB2YXJpYWJsZSB3aGVuIHBvc3NpYmxlLiBUaGlzXG5cdFx0XHRcdFx0XHRcdHdheSB5b3Ugd2lsbCBub3QgaGF2ZSB5b3VyIGxvZ3MgZXhwb3NlZCB0byB0aGUgcHVibGljIHdoZW4gb24gYVxuXHRcdFx0XHRcdFx0XHRwcm9kdWN0aW9uIHNpdGUuXG5cdFx0XHRcdFx0XHQ8L2Rpdj5cblx0XHRcdFx0XHQ8L2Rpdj5cblx0XHRcdFx0PC9kaXY+XG5cdFx0XHQ8L2Rpdj5cblxuXHRcdFx0PCEtLSA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IExvZyBPcHRpb25zIC0tPlxuXHRcdFx0PGRpdiBjbGFzcz1cInJvdyBtYi01XCIgaWQ9XCJ1bC1sb2ctb3B0aW9uc1wiPlxuXHRcdFx0XHQ8ZGl2IGNsYXNzPVwiY29sLTEyIG1iLTNcIj5cblx0XHRcdFx0XHQ8aDI+TG9nIE9wdGlvbnM8L2gyPlxuXHRcdFx0XHQ8L2Rpdj5cblxuXHRcdFx0XHQ8ZGl2IGNsYXNzPVwiY29sLWxnLTEyXCI+XG5cdFx0XHRcdFx0PGRpdiBjbGFzcz1cInRhYmxlLXJlc3BvbnNpdmVcIj5cblx0XHRcdFx0XHRcdDx0YWJsZSBjbGFzcz1cInRhYmxlIHRhYmxlLXN0cmlwZWQgdGFibGUtYm9yZGVyZWRcIj5cblx0XHRcdFx0XHRcdFx0PHRoZWFkPlxuXHRcdFx0XHRcdFx0XHRcdDx0cj5cblx0XHRcdFx0XHRcdFx0XHRcdDx0aD5OYW1lPC90aD5cblx0XHRcdFx0XHRcdFx0XHRcdDx0aD5UeXBlPC90aD5cblx0XHRcdFx0XHRcdFx0XHRcdDx0aD5EZWZhdWx0PC90aD5cblx0XHRcdFx0XHRcdFx0XHRcdDx0aD5PcHRpb25zPC90aD5cblx0XHRcdFx0XHRcdFx0XHRcdDx0aD5EZXNjcmlwdGlvbjwvdGg+XG5cdFx0XHRcdFx0XHRcdFx0PC90cj5cblx0XHRcdFx0XHRcdFx0PC90aGVhZD5cblx0XHRcdFx0XHRcdFx0PHRib2R5PlxuXHRcdFx0XHRcdFx0XHRcdDx0cj5cblx0XHRcdFx0XHRcdFx0XHRcdDx0ZCB2YWxpZ249XCJ0b3BcIj5hcnJheTwvdGQ+XG5cdFx0XHRcdFx0XHRcdFx0XHQ8dGQgdmFsaWduPVwidG9wXCIgY2xhc3M9XCJvcHRpb24tdHlwZVwiPkFycmF5PC90ZD5cblx0XHRcdFx0XHRcdFx0XHRcdDx0ZCB2YWxpZ249XCJ0b3BcIj48Y29kZT5bXTwvY29kZT48L3RkPlxuXHRcdFx0XHRcdFx0XHRcdFx0PHRkIHZhbGlnbj1cInRvcFwiPi08L3RkPlxuXHRcdFx0XHRcdFx0XHRcdFx0PHRkIHZhbGlnbj1cInRvcFwiPnt7IGNvcHkuYXJyYXkgfX08L3RkPlxuXHRcdFx0XHRcdFx0XHRcdDwvdHI+XG5cdFx0XHRcdFx0XHRcdFx0PHRyPlxuXHRcdFx0XHRcdFx0XHRcdFx0PHRkIHZhbGlnbj1cInRvcFwiPmRpc2FibGVkPC90ZD5cblx0XHRcdFx0XHRcdFx0XHRcdDx0ZCB2YWxpZ249XCJ0b3BcIiBjbGFzcz1cIm9wdGlvbi10eXBlXCI+Qm9vbGVhbjwvdGQ+XG5cdFx0XHRcdFx0XHRcdFx0XHQ8dGQgdmFsaWduPVwidG9wXCIgY2xhc3M9XCJib29sZWFuLXN0eWxlXCI+ZmFsc2U8L3RkPlxuXHRcdFx0XHRcdFx0XHRcdFx0PHRkIHZhbGlnbj1cInRvcFwiIHYtaHRtbD1cIm9wdGlvbnMuYm9vbGVhblwiPjwvdGQ+XG5cdFx0XHRcdFx0XHRcdFx0XHQ8dGQgdmFsaWduPVwidG9wXCI+e3sgY29weS5kaXNhYmxlZCB9fTwvdGQ+XG5cdFx0XHRcdFx0XHRcdFx0PC90cj5cblx0XHRcdFx0XHRcdFx0XHQ8dHI+XG5cdFx0XHRcdFx0XHRcdFx0XHQ8dGQgdmFsaWduPVwidG9wXCI+bG9nUHJlZml4PC90ZD5cblx0XHRcdFx0XHRcdFx0XHRcdDx0ZCB2YWxpZ249XCJ0b3BcIiBjbGFzcz1cIm9wdGlvbi10eXBlXCI+Qm9vbGVhbiB8IFN0cmluZzwvdGQ+XG5cdFx0XHRcdFx0XHRcdFx0XHQ8dGQgdmFsaWduPVwidG9wXCIgY2xhc3M9XCJib29sZWFuLXN0eWxlXCI+ZmFsc2U8L3RkPlxuXHRcdFx0XHRcdFx0XHRcdFx0PHRkIHZhbGlnbj1cInRvcFwiPi08L3RkPlxuXHRcdFx0XHRcdFx0XHRcdFx0PHRkIHZhbGlnbj1cInRvcFwiPnt7IGNvcHkubG9nUHJlZml4IH19PC90ZD5cblx0XHRcdFx0XHRcdFx0XHQ8L3RyPlxuXHRcdFx0XHRcdFx0XHRcdDx0cj5cblx0XHRcdFx0XHRcdFx0XHRcdDx0ZCB2YWxpZ249XCJ0b3BcIj5tYWdpY2FsPC90ZD5cblx0XHRcdFx0XHRcdFx0XHRcdDx0ZCB2YWxpZ249XCJ0b3BcIiBjbGFzcz1cIm9wdGlvbi10eXBlXCI+Qm9vbGVhbjwvdGQ+XG5cdFx0XHRcdFx0XHRcdFx0XHQ8dGQgdmFsaWduPVwidG9wXCIgY2xhc3M9XCJib29sZWFuLXN0eWxlXCI+ZmFsc2U8L3RkPlxuXHRcdFx0XHRcdFx0XHRcdFx0PHRkIHZhbGlnbj1cInRvcFwiIHYtaHRtbD1cIm9wdGlvbnMuYm9vbGVhblwiPjwvdGQ+XG5cdFx0XHRcdFx0XHRcdFx0XHQ8dGQgdmFsaWduPVwidG9wXCI+e3sgY29weS5tYWdpY2FsIH19PC90ZD5cblx0XHRcdFx0XHRcdFx0XHQ8L3RyPlxuXHRcdFx0XHRcdFx0XHRcdDx0cj5cblx0XHRcdFx0XHRcdFx0XHRcdDx0ZCB2YWxpZ249XCJ0b3BcIj5uYW1lPC90ZD5cblx0XHRcdFx0XHRcdFx0XHRcdDx0ZCB2YWxpZ249XCJ0b3BcIiBjbGFzcz1cIm9wdGlvbi10eXBlXCI+U3RyaW5nPC90ZD5cblx0XHRcdFx0XHRcdFx0XHRcdDx0ZCB2YWxpZ249XCJ0b3BcIj5bVW5pY29ybkxvZ106PC90ZD5cblx0XHRcdFx0XHRcdFx0XHRcdDx0ZCB2YWxpZ249XCJ0b3BcIj4tPC90ZD5cblx0XHRcdFx0XHRcdFx0XHRcdDx0ZCB2YWxpZ249XCJ0b3BcIj5cblx0XHRcdFx0XHRcdFx0XHRcdFx0SWYgPGNvZGU+bG9nUHJlZml4PC9jb2RlPiBvcHRpb24gaXMgc2V0IGFzIGFcblx0XHRcdFx0XHRcdFx0XHRcdFx0PHNwYW4gY2xhc3M9XCJvcHRpb24tdHlwZVwiPkJvb2xlYW48L3NwYW4+IG9mXG5cdFx0XHRcdFx0XHRcdFx0XHRcdDxzcGFuIGNsYXNzPVwiYm9vbGVhbi1zdHlsZVwiPnRydWU8L3NwYW4+LCBpdCB3aWxsIHVzZSB0aGVcblx0XHRcdFx0XHRcdFx0XHRcdFx0PGNvZGU+bmFtZTwvY29kZT4gb3B0aW9uIGZvciB0aGUgcHJlZml4LlxuXHRcdFx0XHRcdFx0XHRcdFx0PC90ZD5cblx0XHRcdFx0XHRcdFx0XHQ8L3RyPlxuXHRcdFx0XHRcdFx0XHRcdDx0cj5cblx0XHRcdFx0XHRcdFx0XHRcdDx0ZCB2YWxpZ249XCJ0b3BcIj5vYmplY3RzPC90ZD5cblx0XHRcdFx0XHRcdFx0XHRcdDx0ZCB2YWxpZ249XCJ0b3BcIiBjbGFzcz1cIm9wdGlvbi10eXBlXCI+T2JqZWN0PC90ZD5cblx0XHRcdFx0XHRcdFx0XHRcdDx0ZCB2YWxpZ249XCJ0b3BcIj48Y29kZT57fTwvY29kZT48L3RkPlxuXHRcdFx0XHRcdFx0XHRcdFx0PHRkIHZhbGlnbj1cInRvcFwiPi08L3RkPlxuXHRcdFx0XHRcdFx0XHRcdFx0PHRkIHZhbGlnbj1cInRvcFwiPnt7IGNvcHkub2JqZWN0IH19PC90ZD5cblx0XHRcdFx0XHRcdFx0XHQ8L3RyPlxuXHRcdFx0XHRcdFx0XHRcdDx0cj5cblx0XHRcdFx0XHRcdFx0XHRcdDx0ZCB2YWxpZ249XCJ0b3BcIj5zdHlsZXM8L3RkPlxuXHRcdFx0XHRcdFx0XHRcdFx0PHRkIHZhbGlnbj1cInRvcFwiIGNsYXNzPVwib3B0aW9uLXR5cGVcIj5TdHJpbmcgfCBBcnJheTwvdGQ+XG5cdFx0XHRcdFx0XHRcdFx0XHQ8dGQgdmFsaWduPVwidG9wXCI+LTwvdGQ+XG5cdFx0XHRcdFx0XHRcdFx0XHQ8dGQgdmFsaWduPVwidG9wXCIgdi1odG1sPVwib3B0aW9ucy5zdHlsZXNcIj48L3RkPlxuXHRcdFx0XHRcdFx0XHRcdFx0PHRkIHZhbGlnbj1cInRvcFwiPnt7IGNvcHkuc3R5bGVzIH19PC90ZD5cblx0XHRcdFx0XHRcdFx0XHQ8L3RyPlxuXHRcdFx0XHRcdFx0XHRcdDx0cj5cblx0XHRcdFx0XHRcdFx0XHRcdDx0ZCB2YWxpZ249XCJ0b3BcIj50ZXh0PC90ZD5cblx0XHRcdFx0XHRcdFx0XHRcdDx0ZCB2YWxpZ249XCJ0b3BcIiBjbGFzcz1cIm9wdGlvbi10eXBlXCI+U3RyaW5nPC90ZD5cblx0XHRcdFx0XHRcdFx0XHRcdDx0ZCB2YWxpZ249XCJ0b3BcIj7wn6aEPC90ZD5cblx0XHRcdFx0XHRcdFx0XHRcdDx0ZCB2YWxpZ249XCJ0b3BcIj4tPC90ZD5cblx0XHRcdFx0XHRcdFx0XHRcdDx0ZCB2YWxpZ249XCJ0b3BcIj57eyBjb3B5LnRleHQgfX08L3RkPlxuXHRcdFx0XHRcdFx0XHRcdDwvdHI+XG5cdFx0XHRcdFx0XHRcdFx0PHRyPlxuXHRcdFx0XHRcdFx0XHRcdFx0PHRkIHZhbGlnbj1cInRvcFwiPnR5cGU8L3RkPlxuXHRcdFx0XHRcdFx0XHRcdFx0PHRkIHZhbGlnbj1cInRvcFwiIGNsYXNzPVwib3B0aW9uLXR5cGVcIj5TdHJpbmc8L3RkPlxuXHRcdFx0XHRcdFx0XHRcdFx0PHRkIHZhbGlnbj1cInRvcFwiPmxvZzwvdGQ+XG5cdFx0XHRcdFx0XHRcdFx0XHQ8dGQgdmFsaWduPVwidG9wXCIgdi1odG1sPVwib3B0aW9ucy50eXBlXCI+PC90ZD5cblx0XHRcdFx0XHRcdFx0XHRcdDx0ZCB2YWxpZ249XCJ0b3BcIj57eyBjb3B5LnR5cGUgfX08L3RkPlxuXHRcdFx0XHRcdFx0XHRcdDwvdHI+XG5cdFx0XHRcdFx0XHRcdDwvdGJvZHk+XG5cdFx0XHRcdFx0XHQ8L3RhYmxlPlxuXHRcdFx0XHRcdDwvZGl2PlxuXHRcdFx0XHQ8L2Rpdj5cblx0XHRcdDwvZGl2PlxuXG5cdFx0XHQ8IS0tID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gSW5zdGFuY2UgTWV0aG9kcyAtLT5cblx0XHRcdDxkaXYgY2xhc3M9XCJyb3cgbWItNVwiIGlkPVwidWwtaW5zdGFuY2UtbWV0aG9kc1wiPlxuXHRcdFx0XHQ8ZGl2IGNsYXNzPVwiY29sLTEyXCI+XG5cdFx0XHRcdFx0PGgyPkluc3RhbmNlIE1ldGhvZHM8L2gyPlxuXHRcdFx0XHQ8L2Rpdj5cblxuXHRcdFx0XHQ8ZGl2IGNsYXNzPVwiY29sLTEyXCI+XG5cdFx0XHRcdFx0VGhlcmUgYXJlIHR3byBpbnN0YW5jZSBtZXRob2RzIGF2YWlsYWJsZSB0byB1c2U6XG5cdFx0XHRcdFx0PGJyIC8+XG5cdFx0XHRcdFx0PGNvZGU+JHVuaWNvcm5Mb2c8L2NvZGU+XG5cdFx0XHRcdFx0PGJyIC8+XG5cdFx0XHRcdFx0PGNvZGU+JHVuaUxvZzwvY29kZT5cblx0XHRcdFx0PC9kaXY+XG5cdFx0XHQ8L2Rpdj5cblxuXHRcdFx0PCEtLSA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IENvbnNvbGUgTWV0aG9kcyAtLT5cblx0XHRcdDxkaXYgY2xhc3M9XCJyb3cgbWItNVwiIGlkPVwidWwtY29uc29sZS1tZXRob2RzXCI+XG5cdFx0XHRcdDxkaXYgY2xhc3M9XCJjb2wtMTJcIj5cblx0XHRcdFx0XHQ8aDI+Q29uc29sZSBNZXRob2RzPC9oMj5cblx0XHRcdFx0PC9kaXY+XG5cblx0XHRcdFx0PGRpdiBjbGFzcz1cImNvbC0xMlwiPlxuXHRcdFx0XHRcdEZvciBhIGRlc2NyaXB0aW9uIG9mIHRoZSBkaWZmZXJlbnQgbG9nIG1ldGhvZHMsIHJlZmVyIHRvIHRoZVxuXHRcdFx0XHRcdDxhXG5cdFx0XHRcdFx0XHRocmVmPVwiaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL2NvbnNvbGVcIlxuXHRcdFx0XHRcdFx0dGFyZ2V0PVwiX2JsYW5rXCJcblx0XHRcdFx0XHRcdD5XZWIgQVBJcyBNRE48L2Fcblx0XHRcdFx0XHQ+XG5cdFx0XHRcdFx0ZGV2ZWxvcGVyIGRvY3VtZW50YXRpb24gZm9yIGNvbnNvbGUuXG5cdFx0XHRcdDwvZGl2PlxuXHRcdFx0PC9kaXY+XG5cblx0XHRcdDwhLS0gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSBFeGFtcGxlcyAtLT5cblx0XHRcdDxkaXYgY2xhc3M9XCJtYi01XCIgaWQ9XCJ1bC1leGFtcGxlc1wiPlxuXHRcdFx0XHQ8ZGl2IGNsYXNzPVwicm93XCI+XG5cdFx0XHRcdFx0PGRpdiBjbGFzcz1cImNvbC0xMiBtYi0zXCI+XG5cdFx0XHRcdFx0XHQ8aDI+RXhhbXBsZXM8L2gyPlxuXHRcdFx0XHRcdFx0PHAgY2xhc3M9XCJmc3QtaXRhbGljXCI+XG5cdFx0XHRcdFx0XHRcdE9wZW4gRGV2VG9vbHMgYW5kIGNsaWNrIG9uIHRoZSBcIkNvbnNvbGVcIiB0YWIgdG8gdmlldyBleGFtcGxlXG5cdFx0XHRcdFx0XHRcdHJlc3VsdHMuXG5cdFx0XHRcdFx0XHQ8L3A+XG5cdFx0XHRcdFx0PC9kaXY+XG5cdFx0XHRcdDwvZGl2PlxuXG5cdFx0XHRcdDwhLS0gPT09PT09PT09PT09PT09PT09PT09PT0gQmFzaWMgLS0+XG5cdFx0XHRcdDxTaW1wbGVFeGFtcGxlIGlkPVwic2ltcGxlLWV4YW1wbGVzXCIgLz5cblxuXHRcdFx0XHQ8IS0tID09PT09PT09PT09PT09PT09PT09PT09IFRleHQgT3B0aW9uIC0tPlxuXHRcdFx0XHQ8VGV4dEV4YW1wbGUgaWQ9XCJ0ZXh0LWV4YW1wbGVzXCIgLz5cblxuXHRcdFx0XHQ8IS0tID09PT09PT09PT09PT09PT09PT09PT09IFR5cGUgT3B0aW9uIC0tPlxuXHRcdFx0XHQ8VHlwZUV4YW1wbGUgaWQ9XCJ0eXBlLWV4YW1wbGVzXCIgLz5cblxuXHRcdFx0XHQ8IS0tID09PT09PT09PT09PT09PT09PT09PT09IFN0eWxlcyBPcHRpb24gLS0+XG5cdFx0XHRcdDxTdHlsZXNFeGFtcGxlIGlkPVwic3R5bGVzLWV4YW1wbGVzXCIgLz5cblxuXHRcdFx0XHQ8IS0tID09PT09PT09PT09PT09PT09PT09PT09IERpc2FibGVkIE9wdGlvbiAtLT5cblx0XHRcdFx0PERpc2FibGVkRXhhbXBsZSBpZD1cImRpc2FibGVkLWV4YW1wbGVzXCIgLz5cblxuXHRcdFx0XHQ8IS0tID09PT09PT09PT09PT09PT09PT09PT09IExvZyBQcmVmaXggT3B0aW9uIC0tPlxuXHRcdFx0XHQ8TG9nUHJlZml4RXhhbXBsZSBpZD1cImxvZ1ByZWZpeC1leGFtcGxlc1wiIC8+XG5cblx0XHRcdFx0PCEtLSA9PT09PT09PT09PT09PT09PT09PT09PSBNYWdpY2FsIE9wdGlvbiAtLT5cblx0XHRcdFx0PE1hZ2ljYWxFeGFtcGxlIGlkPVwibWFnaWNhbC1leGFtcGxlc1wiIC8+XG5cblx0XHRcdFx0PCEtLSA9PT09PT09PT09PT09PT09PT09PT09PSBOYW1lIE9wdGlvbiAtLT5cblx0XHRcdFx0PExvZ1ByZWZpeEV4YW1wbGUgaWQ9XCJuYW1lLWV4YW1wbGVzXCIgOmlzTmFtZU9wdGlvbj1cInRydWVcIiAvPlxuXG5cdFx0XHRcdDwhLS0gPT09PT09PT09PT09PT09PT09PT09PT0gT2JqZWN0cyBPcHRpb24gLS0+XG5cdFx0XHRcdDxPYmplY3RzRXhhbXBsZXMgaWQ9XCJvYmplY3RzLWV4YW1wbGVzXCIgLz5cblxuXHRcdFx0XHQ8IS0tID09PT09PT09PT09PT09PT09PT09PT09IEFycmF5IE9wdGlvbiAtLT5cblx0XHRcdFx0PEFycmF5c0V4YW1wbGUgaWQ9XCJhcnJheS1leGFtcGxlc1wiIC8+XG5cdFx0XHQ8L2Rpdj5cblxuXHRcdFx0PCEtLSA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IERlcGVuZGVuY2llcyAtLT5cblx0XHRcdDxkaXYgY2xhc3M9XCJyb3cgbWItNVwiIGlkPVwidWwtZGVwZW5kZW5jaWVzXCI+XG5cdFx0XHRcdDxkaXYgY2xhc3M9XCJjb2wtMTJcIj5cblx0XHRcdFx0XHQ8aDI+RGVwZW5kZW5jaWVzPC9oMj5cblx0XHRcdFx0PC9kaXY+XG5cblx0XHRcdFx0PGRpdiBjbGFzcz1cImNvbC14bC04IGNvbC1sZy0xMlwiPlxuXHRcdFx0XHRcdDxhIGhyZWY9XCJodHRwczovL3YyLnZ1ZWpzLm9yZy9cIiB0YXJnZXQ9XCJfYmxhbmtcIj5WdWUgMjwvYT5cblx0XHRcdFx0PC9kaXY+XG5cdFx0XHQ8L2Rpdj5cblxuXHRcdFx0PCEtLSA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IENoYW5nZSBMb2cgLS0+XG5cdFx0XHQ8ZGl2IGNsYXNzPVwicm93IG1iLTVcIiBpZD1cInVsLWNoYW5nZS1sb2dcIj5cblx0XHRcdFx0PGRpdiBjbGFzcz1cImNvbC0xMlwiPlxuXHRcdFx0XHRcdDxoMj5DaGFuZ2UgTG9nPC9oMj5cblx0XHRcdFx0PC9kaXY+XG5cblx0XHRcdFx0PGRpdiBjbGFzcz1cImNvbC0xMlwiPlxuXHRcdFx0XHRcdDxhXG5cdFx0XHRcdFx0XHRocmVmPVwiaHR0cHM6Ly9naXRodWIuY29tL3dlYmRldm5lcmRzdHVmZi92dWUtdW5pY29ybi1sb2cvYmxvYi9tYXN0ZXIvQ0hBTkdFTE9HLm1kXCJcblx0XHRcdFx0XHRcdHRhcmdldD1cIl9ibGFua1wiXG5cdFx0XHRcdFx0XHQ+Q0hBTkdFTE9HLm1kPC9hXG5cdFx0XHRcdFx0PlxuXHRcdFx0XHQ8L2Rpdj5cblx0XHRcdDwvZGl2PlxuXG5cdFx0XHQ8IS0tID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gTGljZW5zZSAtLT5cblx0XHRcdDxkaXYgY2xhc3M9XCJyb3cgbWItNVwiIGlkPVwidWwtbGljZW5zZVwiPlxuXHRcdFx0XHQ8ZGl2IGNsYXNzPVwiY29sLTEyXCI+XG5cdFx0XHRcdFx0PGgyPkxpY2Vuc2U8L2gyPlxuXHRcdFx0XHQ8L2Rpdj5cblxuXHRcdFx0XHQ8ZGl2IGNsYXNzPVwiY29sLTEyXCI+XG5cdFx0XHRcdFx0PHA+XG5cdFx0XHRcdFx0XHRDb3B5cmlnaHQgJmNvcHk7IDIwMjIgV2ViRGV2TmVyZFN0dWZmXG5cdFx0XHRcdFx0XHQ8YnIgLz5cblx0XHRcdFx0XHRcdExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cblx0XHRcdFx0XHQ8L3A+XG5cdFx0XHRcdFx0PHA+XG5cdFx0XHRcdFx0XHQ8YVxuXHRcdFx0XHRcdFx0XHRocmVmPVwiaHR0cHM6Ly9naXRodWIuY29tL3dlYmRldm5lcmRzdHVmZi92dWUtdW5pY29ybi1sb2cvYmxvYi9tYXN0ZXIvTElDRU5TRS5tZFwiXG5cdFx0XHRcdFx0XHRcdHRhcmdldD1cIl9ibGFua1wiXG5cdFx0XHRcdFx0XHQ+XG5cdFx0XHRcdFx0XHRcdExJQ0VOU0UubWRcblx0XHRcdFx0XHRcdDwvYT5cblx0XHRcdFx0XHQ8L3A+XG5cdFx0XHRcdDwvZGl2PlxuXHRcdFx0PC9kaXY+XG5cblx0XHRcdDxkaXYgY2xhc3M9XCJyb3cgbWItNVwiPlxuXHRcdFx0XHQ8ZGl2IGNsYXNzPVwiY29sLTEyIHRleHQtY2VudGVyXCI+XG5cdFx0XHRcdFx0PGltZ1xuXHRcdFx0XHRcdFx0c3JjPVwiaW1hZ2VzL3Z1ZS11bmljb3JuLWxvZy1zb2NpYWwuanBnXCJcblx0XHRcdFx0XHRcdGFsdD1cIlZ1ZSBVbmljb3JuIExvZyBieSBAV2ViRGV2TmVyZFN0dWZmXCJcblx0XHRcdFx0XHQvPlxuXHRcdFx0XHQ8L2Rpdj5cblx0XHRcdDwvZGl2PlxuXHRcdDwvZGl2PlxuXHQ8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgVnVlIGZyb20gJ3Z1ZSc7XG5pbXBvcnQgTmF2IGZyb20gJ0Bjb21wb25lbnRzL05hdi52dWUnO1xuaW1wb3J0IEFycmF5c0V4YW1wbGUgZnJvbSAnQGNvbXBvbmVudHMvZXhhbXBsZXMvQXJyYXlzLnZ1ZSc7XG5pbXBvcnQgRGlzYWJsZWRFeGFtcGxlIGZyb20gJ0Bjb21wb25lbnRzL2V4YW1wbGVzL0Rpc2FibGVkLnZ1ZSc7XG5pbXBvcnQgTG9nUHJlZml4RXhhbXBsZSBmcm9tICdAY29tcG9uZW50cy9leGFtcGxlcy9Mb2dQcmVmaXgudnVlJztcbmltcG9ydCBNYWdpY2FsRXhhbXBsZSBmcm9tICdAY29tcG9uZW50cy9leGFtcGxlcy9NYWdpY2FsLnZ1ZSc7XG5pbXBvcnQgT2JqZWN0c0V4YW1wbGVzIGZyb20gJ0Bjb21wb25lbnRzL2V4YW1wbGVzL09iamVjdHMudnVlJztcbmltcG9ydCBTaW1wbGVFeGFtcGxlIGZyb20gJ0Bjb21wb25lbnRzL2V4YW1wbGVzL1NpbXBsZS52dWUnO1xuaW1wb3J0IFN0eWxlc0V4YW1wbGUgZnJvbSAnQGNvbXBvbmVudHMvZXhhbXBsZXMvU3R5bGVzLnZ1ZSc7XG5pbXBvcnQgVGV4dEV4YW1wbGUgZnJvbSAnQGNvbXBvbmVudHMvZXhhbXBsZXMvVGV4dC52dWUnO1xuaW1wb3J0IFR5cGVFeGFtcGxlIGZyb20gJ0Bjb21wb25lbnRzL2V4YW1wbGVzL1R5cGUudnVlJztcbmltcG9ydCBVbmljb3JuTG9nIGZyb20gJ0BwbHVnaW5zL1VuaWNvcm5Mb2cnO1xuaW1wb3J0IHsgY29tcG9uZW50IGFzIFZ1ZUNvZGVIaWdobGlnaHQgfSBmcm9tICd2dWUtY29kZS1oaWdobGlnaHQnO1xuXG5WdWUudXNlKFVuaWNvcm5Mb2cpO1xuXG5leHBvcnQgZGVmYXVsdCB7XG5cdG5hbWU6ICdVbmljb3JuTG9nJyxcblx0cHJvcHM6IHt9LFxuXHRjb21wb25lbnRzOiB7XG5cdFx0QXJyYXlzRXhhbXBsZSxcblx0XHREaXNhYmxlZEV4YW1wbGUsXG5cdFx0TG9nUHJlZml4RXhhbXBsZSxcblx0XHRNYWdpY2FsRXhhbXBsZSxcblx0XHROYXYsXG5cdFx0T2JqZWN0c0V4YW1wbGVzLFxuXHRcdFNpbXBsZUV4YW1wbGUsXG5cdFx0U3R5bGVzRXhhbXBsZSxcblx0XHRUZXh0RXhhbXBsZSxcblx0XHRUeXBlRXhhbXBsZSxcblx0XHRWdWVDb2RlSGlnaGxpZ2h0LFxuXHR9LFxuXHRkYXRhOiAoKSA9PiAoe1xuXHRcdGNvcHk6IHtcblx0XHRcdGFycmF5OiAnVXNlZCB0byBpbmNsdWRlIGFuIGFycmF5IGluIHRoZSBsb2cuJyxcblx0XHRcdGRlZmF1bHRTdHlsZXM6ICdVc2VkIHRvIGFkanVzdCB0aGUgZGVmYXVsdCBzdHlsZXMuJyxcblx0XHRcdGRpc2FibGVkOiAnRGlzYWJsZXMgdGhlIG91dHB1dCBvZiB0aGUgbG9nIGluIHRoZSBjb25zb2xlLiBUaGlzIHdvcmtzIGJlc3Qgd2hlbiB1c2luZyBhbiBlbnZpcm9ubWVudCB0byBjb25kaXRpb25hbGx5IHNldCBzbyBpdCBcdFx0XHRcdFx0XHRcdFx0XHRcdHdpbGwgbG9nIGluIGRldmVsb3BtZW50LCBidXQgbm90IG9uIHRoZSBwcm9kdWN0aW9uIHNpdGUuJyxcblx0XHRcdGxvZ1ByZWZpeDogJ1ByZXBlbmRzIGEgc3RyaW5nIHRvIHRvIHRoZSBvdXRwdXQuJyxcblx0XHRcdG1hZ2ljYWw6ICdBZGRzIGEgbWFnaWNhbCBzdHlsZSB0byB0aGUgb3V0cHV0LicsXG5cdFx0XHRvYmplY3Q6ICdVc2VkIHRvIGluY2x1ZGUgb2JqZWN0cyBpbiB0aGUgbG9nLicsXG5cdFx0XHRzdHlsZXM6ICdTZXRzIHRoZSBzdHlsZXMgZm9yIHRoZSBsb2cuJyxcblx0XHRcdHRleHQ6ICdVc2VkIHRvIGluY2x1ZGUgYSBzdHJpbmcgaW4gdGhlIGxvZy4nLFxuXHRcdFx0dHlwZTogJ1NwZWNpZmllcyB3aGljaCBjb25zb2xlIG1ldGhvZCBzaG91bGQgYmUgdXNlZC4nLFxuXHRcdH0sXG5cdFx0b3B0aW9uczoge1xuXHRcdFx0Ym9vbGVhbjogJzxzcGFuIGNsYXNzPVwiYm9vbGVhbi1zdHlsZVwiPnRydWU8YnIgLz5mYWxzZTwvc3Bhbj4nLFxuXHRcdFx0c3R5bGVzOiAnPGEgaHJlZj1cImh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9jb25zb2xlI3N0eWxpbmdfY29uc29sZV9vdXRwdXRcIiB0YXJnZXQ9XCJfYmxhbmtcIlx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ+U3R5bGluZyBDb25zb2xlIE91dHB1dDwvYT4nLFxuXHRcdFx0dHlwZTogYFxuXHRcdFx0XHRjbGVhclxuXHRcdFx0XHQ8YnIgLz5cblx0XHRcdFx0ZGVidWdcblx0XHRcdFx0PGJyIC8+XG5cdFx0XHRcdGRpclxuXHRcdFx0XHQ8YnIgLz5cblx0XHRcdFx0ZXJyb3Jcblx0XHRcdFx0PGJyIC8+XG5cdFx0XHRcdGdyb3VwXG5cdFx0XHRcdDxiciAvPlxuXHRcdFx0XHRncm91cENvbGxhcHNlZFxuXHRcdFx0XHQ8YnIgLz5cblx0XHRcdFx0Z3JvdXBFbmRcblx0XHRcdFx0PGJyIC8+XG5cdFx0XHRcdGluZm9cblx0XHRcdFx0PGJyIC8+XG5cdFx0XHRcdGxvZ1xuXHRcdFx0XHQ8YnIgLz5cblx0XHRcdFx0dGFibGVcblx0XHRcdFx0PGJyIC8+XG5cdFx0XHRcdHRyYWNlXG5cdFx0XHRcdDxiciAvPlxuXHRcdFx0XHR3YXJuXG5cdFx0XHRgLFxuXHRcdH0sXG5cdFx0cmFpbmJvd0xpbmVhckdyYWRpZW50OiBgbGluZWFyLWdyYWRpZW50KHRvIHJpZ2h0LFxuXHRcdFx0aHNsKDAsIDEwMCUsIDUwJSksXG5cdFx0XHRoc2woMzksIDEwMCUsIDUwJSksXG5cdFx0XHRoc2woNjAsIDEwMCUsIDUwJSksXG5cdFx0XHRoc2woMTIwLCAxMDAlLCA1MCUpLFxuXHRcdFx0aHNsKDE4MCwgMTAwJSwgNTAlKSxcblx0XHRcdGhzbCgyNDAsIDEwMCUsIDUwJSksXG5cdFx0XHRoc2woMzAwLCAxMDAlLCA1MCUpLFxuXHRcdFx0aHNsKDM2MCwgMTAwJSwgNTAlKVxuXHRcdClgLFxuXHRcdHRlc3RBcnJheXM6IFtcblx0XHRcdFsnZm9vJywgJ2JhciddLFxuXHRcdFx0WydiYXInLCAnZm9vJ10sXG5cdFx0XSxcblx0XHR0ZXN0T2JqZWN0czogW1xuXHRcdFx0e1xuXHRcdFx0XHRmb286ICdmb28nLFxuXHRcdFx0XHRiYXI6ICdiYXInLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0Zm9vVHdvOiAnZm9vVHdvJyxcblx0XHRcdFx0YmFyVHdvOiAnYmFyVHdvJyxcblx0XHRcdH0sXG5cdFx0XSxcblx0fSksXG5cdG1vdW50ZWQoKSB7XG5cdFx0dGhpcy53ZWxjb21lTG9nKCk7XG5cdFx0Ly8gdGhpcy50ZXN0aW5nTG9ncygpO1xuXHR9LFxuXHRtZXRob2RzOiB7XG5cdFx0dGVzdGluZ0xvZ3MoKSB7XG5cdFx0XHRjb25zdCB0ZXN0QXJyYXkxID0gdGhpcy50ZXN0QXJyYXlzWzBdO1xuXHRcdFx0Y29uc3QgdGVzdEFycmF5MiA9IHRoaXMudGVzdEFycmF5c1sxXTtcblx0XHRcdGNvbnN0IHRlc3RBcnJheTMgPSBbJ2Zvb2JhciddO1xuXHRcdFx0Y29uc3QgdGVzdE9iajEgPSB0aGlzLnRlc3RPYmplY3RzWzBdO1xuXHRcdFx0Y29uc3QgdGVzdE9iajIgPSB0aGlzLnRlc3RPYmplY3RzWzFdO1xuXHRcdFx0Y29uc3QgdGVzdE9iajMgPSB7XG5cdFx0XHRcdGJhclRocmVlOiAnYmFyVGhyZWUnLFxuXHRcdFx0XHRmb29UaHJlZTogJ2Zvb1RocmVlJyxcblx0XHRcdH07XG5cblx0XHRcdHRoaXMuJHVuaWNvcm5Mb2coe1xuXHRcdFx0XHRhcnJheTogWy4uLnRlc3RBcnJheTEsIC4uLnRlc3RBcnJheTIsIHRlc3RBcnJheTNdLFxuXHRcdFx0XHRsb2dQcmVmaXg6IHRydWUsXG5cdFx0XHRcdG9iamVjdHM6IHsgdGVzdE9iajEsIHRlc3RPYmoyLCB0ZXN0T2JqMyB9LFxuXHRcdFx0XHR0ZXh0OiAnVGVzdGluZyBMb2cnLFxuXHRcdFx0XHR0eXBlOiAnbG9nJyxcblx0XHRcdH0pO1xuXHRcdH0sXG5cdFx0d2VsY29tZUxvZygpIHtcblx0XHRcdHRoaXMuJHVuaWNvcm5Mb2coe1xuXHRcdFx0XHR0ZXh0OiAnVnVlIFVuaWNvcm4gTG9nLi4uIEl0XFwncyBtYWdpY2FsIScsXG5cdFx0XHRcdHN0eWxlczogW1xuXHRcdFx0XHRcdGBiYWNrZ3JvdW5kOiAke3RoaXMucmFpbmJvd0xpbmVhckdyYWRpZW50fWAsXG5cdFx0XHRcdFx0J2NvbG9yOiAjZjdmN2Y3Jyxcblx0XHRcdFx0XHQnZGlzcGxheTogYmxvY2snLFxuXHRcdFx0XHRcdCdmb250LWZhbWlseTogXCJIZWx2ZXRpY2FcIiwgXCJBcmlhbFwiJyxcblx0XHRcdFx0XHQnZm9udC1zaXplOiAyNXB4Jyxcblx0XHRcdFx0XHQnZm9udC13ZWlnaHQ6IGJvbGQnLFxuXHRcdFx0XHRcdCdtYXJnaW46IDVweCAwJyxcblx0XHRcdFx0XHQncGFkZGluZzogMTVweCcsXG5cdFx0XHRcdFx0J3RleHQtYWxpZ246IGNlbnRlcicsXG5cdFx0XHRcdFx0J3RleHQtc2hhZG93OiAxcHggMXB4IDJweCAjMDAwJyxcblx0XHRcdFx0XSxcblx0XHRcdFx0dHlwZTogJ2xvZycsXG5cdFx0XHR9KTtcblx0XHR9LFxuXHR9LFxufTtcbjwvc2NyaXB0PlxuXG48c3R5bGUgbGFuZz1cInNjc3NcIj5cbkBpbXBvcnQgJ3Z1ZS1jb2RlLWhpZ2hsaWdodC90aGVtZXMvcHJpc20tdG9tb3Jyb3cuY3NzJztcbkBpbXBvcnQgJ3Z1ZS1jb2RlLWhpZ2hsaWdodC90aGVtZXMvd2luZG93LmNzcyc7XG5cbiRyYWluYm93LWdyYWRpZW50OiBsaW5lYXItZ3JhZGllbnQoXG5cdHRvIHJpZ2h0LFxuXHRoc2woMCwgMTAwJSwgNTAlKSxcblx0aHNsKDM5LCAxMDAlLCA1MCUpLFxuXHRoc2woNjAsIDEwMCUsIDUwJSksXG5cdGhzbCgxMjAsIDEwMCUsIDUwJSksXG5cdGhzbCgxODAsIDEwMCUsIDUwJSksXG5cdGhzbCgyNDAsIDEwMCUsIDUwJSksXG5cdGhzbCgzMDAsIDEwMCUsIDUwJSksXG5cdGhzbCgwLCAxMDAlLCA1MCUpXG4pO1xuXG5odG1sIHtcblx0c2Nyb2xsLXBhZGRpbmctdG9wOiA3MHB4O1xufVxuXG5oMSB7XG5cdGZvbnQtZmFtaWx5OiAnSGVubnkgUGVubnknLCBjdXJzaXZlO1xuXHRmb250LXdlaWdodDogYm9sZDtcblx0Zm9udC1zaXplOiAzZW07XG59XG5cbmgyIHtcblx0Zm9udC1mYW1pbHk6ICdJbmRpZSBGbG93ZXInLCBjdXJzaXZlO1xuXG5cdCY6OmFmdGVyIHtcblx0XHRjb250ZW50OiAnICc7XG5cdFx0YmFja2dyb3VuZC1pbWFnZTogJHJhaW5ib3ctZ3JhZGllbnQ7XG5cdFx0Ym9yZGVyLXJhZGl1czogNXB4O1xuXHRcdGRpc3BsYXk6IGJsb2NrO1xuXHRcdGhlaWdodDogMnB4O1xuXHR9XG59XG5cbi50YWJsZSB7XG5cdHRib2R5IHtcblx0XHR0ZCB7XG5cdFx0XHRwcmUge1xuXHRcdFx0XHRiYWNrZ3JvdW5kLWNvbG9yOiAjZmFmYWZhICFpbXBvcnRhbnQ7XG5cdFx0XHRcdGJvcmRlci1yYWRpdXM6IDVweDtcblx0XHRcdFx0cGFkZGluZzogMXJlbTtcblx0XHRcdFx0dGFiLXNpemU6IDI7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59XG5cbi5vcHRpb24tdHlwZSB7XG5cdGNvbG9yOiBoc2woMjgyLCA2OCUsIDM4JSkgIWltcG9ydGFudDtcblx0Zm9udC13ZWlnaHQ6IDUwMDtcbn1cblxuLmJvb2xlYW4tc3R5bGUge1xuXHRjb2xvcjogaHNsKDI0MCwgMTAwJSwgNTAlKSAhaW1wb3J0YW50O1xuXHRmb250LXdlaWdodDogNTAwO1xufVxuXG4ucmFpbmJvdy10ZXh0IHtcblx0LXdlYmtpdC1iYWNrZ3JvdW5kLWNsaXA6IHRleHQ7XG5cdC13ZWJraXQtdGV4dC1maWxsLWNvbG9yOiB0cmFuc3BhcmVudDtcblx0YmFja2dyb3VuZC1jbGlwOiB0ZXh0O1xuXHRiYWNrZ3JvdW5kLWltYWdlOiAkcmFpbmJvdy1ncmFkaWVudDtcblx0Ym9yZGVyLXJhZGl1czogNXB4O1xuXHRjb2xvcjogdHJhbnNwYXJlbnQ7XG5cdGRpc3BsYXk6IGlubGluZS1ibG9jaztcblx0Zm9udC13ZWlnaHQ6IGJvbGQ7XG5cdGhlaWdodDogMTAwJTtcblx0dGV4dC1zaGFkb3c6IDAgMnB4IDNweCByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMyksIDAgLTFweCAycHggcmdiYSgwLCAwLCAwLCAwLjIpO1xufVxuXG4ucmFpbmJvdy1ib3JkZXIge1xuXHRiYWNrZ3JvdW5kLWNvbG9yOiAjMDAwO1xuXHRib3JkZXItaW1hZ2U6ICRyYWluYm93LWdyYWRpZW50IDE7XG5cdGJvcmRlci1zdHlsZTogc29saWQ7XG5cdGJvcmRlci13aWR0aDogNHB4O1xuXHRwYWRkaW5nOiAycmVtO1xufVxuPC9zdHlsZT5cbiIsImltcG9ydCBVbmljb3JuTG9nQ29yZSBmcm9tICcuL1VuaWNvcm5Mb2dDb3JlJztcblxuY29uc3QgVW5pY29ybkxvZyA9IHtcblx0aW5zdGFsbChWdWUsIG9wdGlvbnMgPSB7fSkge1xuXHRcdGNvbnN0IE1hZ2ljYWwgPSBWdWU7XG5cblx0XHRpZiAoVnVlLnByb3RvdHlwZS4kdW5pY29ybkxvZyB8fCBWdWUucHJvdG90eXBlLiR1bmlMb2cpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIEdsb2JhbCBvcHRpb25zIC8vXG5cdFx0dGhpcy5vcHRpb25zID0geyAuLi50aGlzLm9wdGlvbnMsIC4uLm9wdGlvbnMgfTtcblxuXHRcdC8vIGNvbnNvbGUubG9nKHRoaXMub3B0aW9ucyk7XG5cblx0XHQvLyBBZGQgYW4gaW5zdGFuY2UgbWV0aG9kcyAvL1xuXHRcdE1hZ2ljYWwucHJvdG90eXBlLiR1bmljb3JuTG9nID0gZnVuY3Rpb24obG9nT3B0aW9ucykge1xuXHRcdFx0VW5pY29ybkxvZ0NvcmUuaW5pdChWdWUsIFVuaWNvcm5Mb2cub3B0aW9ucywgbG9nT3B0aW9ucyk7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fTtcblxuXHRcdE1hZ2ljYWwucHJvdG90eXBlLiR1bmlMb2cgPSBmdW5jdGlvbihsb2dPcHRpb25zKSB7XG5cdFx0XHRVbmljb3JuTG9nQ29yZS5pbml0KFZ1ZSwgVW5pY29ybkxvZy5vcHRpb25zLCBsb2dPcHRpb25zKTtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9O1xuXHR9LFxuXHRvcHRpb25zOiB7XG5cdFx0ZGVmYXVsdFN0eWxlczoge30sXG5cdFx0ZGlzYWJsZWQ6IGZhbHNlLFxuXHRcdGxvZ1ByZWZpeDogZmFsc2UsXG5cdFx0c3R5bGVzOiAnJyxcblx0XHR0eXBlOiAnbG9nJyxcblx0fSxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFVuaWNvcm5Mb2c7XG4iLCIvKipcbiAqIFZ1ZSBVbmljb3JuTG9nIFBsdWdpblxuICpcbiAqIEBhdXRob3IgV2ViRGV2TmVyZFN0dWZmICYgQnVubmllc1xuICogQHZlcnNpb24gMS4wLjBcbiAqIEBjb3B5cmlnaHQgQ29weXJpZ2h0IDIwMjIsIFdlYkRldk5lcmRTdHVmZlxuICogQHN1cHBvcnRzIE1hZ2ljYWwgQ3JlYXR1cmVzXG4gKlxuICovXG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLWNvbnNvbGUgKi9cbmNvbnN0IHJhaW5ib3dMaW5lYXJHcmFkaWVudCA9IGBsaW5lYXItZ3JhZGllbnQodG8gcmlnaHQsXG5cdGhzbCgwLCAxMDAlLCA1MCUpLFxuXHRoc2woMzksIDEwMCUsIDUwJSksXG5cdGhzbCg2MCwgMTAwJSwgNTAlKSxcblx0aHNsKDEyMCwgMTAwJSwgNTAlKSxcblx0aHNsKDE4MCwgMTAwJSwgNTAlKSxcblx0aHNsKDI0MCwgMTAwJSwgNTAlKSxcblx0aHNsKDMwMCwgMTAwJSwgNTAlKSxcblx0aHNsKDM2MCwgMTAwJSwgNTAlKVxuKWA7XG5cbmNvbnN0IFVuaWNvcm5Mb2cgPSB7XG5cdC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSBDb21tb24gVmFyaWFibGVzIC8vXG5cdGVycm9yczogMCxcblx0bG9nT3B0aW9uczoge30sXG5cdG5hbWU6ICdVbmljb3JuTG9nJyxcblx0b3V0cHV0OiBudWxsLFxuXHRwbHVnaW5PcHRpb25zOiB7fSxcblx0dHlwZXM6IFtcblx0XHQnY2xlYXInLFxuXHRcdCdjb3VudCcsXG5cdFx0J2NvdW50UmVzZXQnLFxuXHRcdCdkZWJ1ZycsXG5cdFx0J2RpcicsXG5cdFx0J2Vycm9yJyxcblx0XHQnZ3JvdXAnLFxuXHRcdCdncm91cENvbGxhcHNlZCcsXG5cdFx0J2dyb3VwRW5kJyxcblx0XHQnaW5mbycsXG5cdFx0J2xvZycsXG5cdFx0J3RhYmxlJyxcblx0XHQndGltZScsXG5cdFx0J3RpbWVFbmQnLFxuXHRcdCd0aW1lTG9nJyxcblx0XHQndHJhY2UnLFxuXHRcdCd3YXJuJyxcblx0XSxcblxuXHQvLyA9PT09PT09PT09PT09PT09PT09PT0gRGVmYXVsdCBTdHlsZXMgLy9cblx0ZGVmYXVsdFN0eWxlczoge1xuXHRcdGxvZzogW1xuXHRcdFx0J2JhY2tncm91bmQtY29sb3I6IGJsYWNrJyxcblx0XHRcdGBib3JkZXItaW1hZ2U6ICR7cmFpbmJvd0xpbmVhckdyYWRpZW50fSAxYCxcblx0XHRcdCdib3JkZXItc3R5bGU6IHNvbGlkJyxcblx0XHRcdCdib3JkZXItd2lkdGg6IDRweCcsXG5cdFx0XHQnY29sb3I6ICNmZmYnLFxuXHRcdFx0J2ZvbnQtd2VpZ2h0OiBub3JtYWwnLFxuXHRcdFx0J3BhZGRpbmc6IDhweCcsXG5cdFx0XSxcblx0XHRpbmZvOiBbXG5cdFx0XHQnYmFja2dyb3VuZC1jb2xvcjogaHNsYSgyMjUsIDEwMCUsIDglLCAxKScsXG5cdFx0XHQnYm94LXNoYWRvdzogOTk5cHggMCAwIGhzbGEoMjI1LCAxMDAlLCA4JSwgMSknLFxuXHRcdFx0J2NvbG9yOiBoc2xhKDIyNSwgMTAwJSwgODUlLCAxKScsXG5cdFx0XHQnZGlzcGxheTogYmxvY2snLFxuXHRcdFx0J3BhZGRpbmc6IDJweCcsXG5cdFx0XSxcblx0XHRnb051dHM6IFtcblx0XHRcdGBiYWNrZ3JvdW5kOiAke3JhaW5ib3dMaW5lYXJHcmFkaWVudH1gLFxuXHRcdFx0J2NvbG9yOiAjZjdmN2Y3Jyxcblx0XHRcdCdkaXNwbGF5OiBibG9jaycsXG5cdFx0XHQnZm9udC1mYW1pbHk6IFwiSGVsdmV0aWNhXCIsIFwiQXJpYWxcIicsXG5cdFx0XHQnZm9udC1zaXplOiAxNXB4Jyxcblx0XHRcdCdmb250LXdlaWdodDogYm9sZCcsXG5cdFx0XHQnbWFyZ2luOiA1cHggMCcsXG5cdFx0XHQncGFkZGluZzogMTBweCcsXG5cdFx0XHQndGV4dC1zaGFkb3c6IDFweCAxcHggMnB4ICMwMDAnLFxuXHRcdF0sXG5cdH0sXG5cdC8vIFNvIHByZXR0eSAvL1xuXHRtYWdpY2FsU3R5bGVOYW1lczogW1xuXHRcdCdtYWdpYycsXG5cdFx0J21hZ2ljYWwnLFxuXHRcdCdwcmlzbScsXG5cdFx0J3BzeWNoZWRlbGljJyxcblx0XHQncmFpbmJvdycsXG5cdFx0J3RyaXBweScsXG5cdFx0J3VuaWNvcm4nLFxuXHRdLFxuXG5cdC8vID09PT09PT09PT09PT09PT09PT09PSBEZWZhdWx0IE9wdGlvbnMgLy9cblx0ZGVmYXVsdE9wdGlvbnM6IHtcblx0XHRhcnJheTogW10sXG5cdFx0ZGVmYXVsdFN0eWxlczoge30sXG5cdFx0ZGlzYWJsZWQ6IHRydWUsXG5cdFx0bG9nUHJlZml4OiBmYWxzZSxcblx0XHRtYWdpY2FsOiBmYWxzZSxcblx0XHRuYW1lOiAnW1VuaWNvcm5Mb2ddOicsXG5cdFx0b2JqZWN0czoge30sXG5cdFx0c3R5bGVzOiAnJyxcblx0XHR0ZXh0OiAn8J+mhCcsXG5cdFx0dHlwZTogJ2xvZycsXG5cdH0sXG5cblx0Ly8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IE1ldGhvZHMgLy9cblxuXHQvLyA9PT09PT09PT09PT09PT09PT09PT0gSW5pdCAvL1xuXHRpbml0KFZ1ZSwgcGx1Z2luT3B0aW9ucyA9IHt9LCBsb2dPcHRpb25zID0ge30pIHtcblx0XHQvLyBEbyBub3QgcnVuIGlmIGRpc2FibGVkIGluIHRoZSBQbHVnaW4gb3B0aW9ucyAvL1xuXHRcdGlmIChwbHVnaW5PcHRpb25zLmRpc2FibGVkIHx8IGxvZ09wdGlvbnMuZGlzYWJsZWQpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBTZXQgT3B0aW9ucyAvL1xuXHRcdHRoaXMucGx1Z2luT3B0aW9ucyA9IHBsdWdpbk9wdGlvbnM7XG5cdFx0dGhpcy5sb2dPcHRpb25zID0geyAuLi50aGlzLmRlZmF1bHRPcHRpb25zLCAuLi50aGlzLnBsdWdpbk9wdGlvbnMsIC4uLmxvZ09wdGlvbnMgfTtcblx0XHR0aGlzLmRlZmF1bHRTdHlsZXMgPSB7IC4uLnRoaXMuZGVmYXVsdFN0eWxlcywgLi4udGhpcy5wbHVnaW5PcHRpb25zLmRlZmF1bHRTdHlsZXMsIC4uLmxvZ09wdGlvbnMuZGVmYXVsdFN0eWxlcyB9O1xuXG5cdFx0Ly8gUnVuIHZhbGlkYXRpb24gZnVuY3Rpb25zIC8vXG5cdFx0T2JqZWN0LnZhbHVlcyh0aGlzLnZhbGlkYXRlT3B0aW9ucykubWFwKCh2YWx1ZSkgPT4ge1xuXHRcdFx0aWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdFx0XHRyZXR1cm4gdmFsdWUuY2FsbCgpO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSk7XG5cblx0XHQvLyBSdW4gQnVpbGQgZnVuY3Rpb25zIC8vXG5cdFx0T2JqZWN0LnZhbHVlcyh0aGlzLmJ1aWxkKS5tYXAoKHZhbHVlKSA9PiB7XG5cdFx0XHRpZiAodHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRcdHJldHVybiB2YWx1ZS5jYWxsKCk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9KTtcblxuXHRcdC8vIElmIGVycm9ycywgZG9uJ3QgbG9nIC8vXG5cdFx0aWYgKHRoaXMuZXJyb3JzKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0dGhpcy5jb25zb2xlT3V0cHV0KHRoaXMubG9nT3B0aW9ucy50eXBlKTtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH0sXG5cblx0Ly8gPT09PT09PT09PT09PT09PT09PT09IFZhbGlkYXRlIHRoZSBvcHRpb25zIC8vXG5cdHZhbGlkYXRlT3B0aW9uczoge1xuXHRcdHR5cGUoKSB7XG5cdFx0XHRjb25zdCB0eXBlID0gVW5pY29ybkxvZy5sb2dPcHRpb25zLnR5cGU7XG5cdFx0XHRjb25zdCB0eXBlcyA9IFVuaWNvcm5Mb2cudHlwZXM7XG5cblx0XHRcdGlmICghdHlwZXMuaW5jbHVkZXModHlwZSkpIHtcblx0XHRcdFx0VW5pY29ybkxvZy5lcnJvcnMgKz0gMTtcblxuXHRcdFx0XHRpZiAodHlwZSA9PT0gJ2RpclhtbCcpIHtcblx0XHRcdFx0XHRVbmljb3JuTG9nLmxvZ2dlcignY29uc29sZS5kaXIoKSBpcyBub3Qgc3VwcG9ydGVkIGNvbnNvbGUgbWV0aG9kLicsICd3YXJuJyk7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0VW5pY29ybkxvZy5sb2dnZXIoYGNvbnNvbGUuJHt0eXBlfSgpIGlzIG5vdCBzdXBwb3J0ZWQgYXQgdGhpcyB0aW1lIG9yIGlzIG5vdCBhIHZhbGlkIGNvbnNvbGUgbWV0aG9kLmAsICd3YXJuJyk7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0sXG5cdFx0c3R5bGVzKHZhbHVlID0gVW5pY29ybkxvZy5sb2dPcHRpb25zLnN0eWxlcykge1xuXHRcdFx0aWYgKCEodmFsdWUgaW5zdGFuY2VvZiBBcnJheSkgJiYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgfHwgTnVtYmVyLmlzSW50ZWdlcih2YWx1ZSkpKSB7XG5cdFx0XHRcdFVuaWNvcm5Mb2cubG9nZ2VyKCdUaGUgXCJzdHlsZXNcIiBvcHRpb24gaXMgbm90IGEgU3RyaW5nIG9yIGFuIEFycmF5LicsICdlcnJvcicpO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0bG9nUHJlZml4KHZhbHVlID0gVW5pY29ybkxvZy5sb2dPcHRpb25zLmxvZ1ByZWZpeCkge1xuXHRcdFx0aWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgfHwgdmFsdWUgaW5zdGFuY2VvZiBCb29sZWFuKSB7XG5cdFx0XHRcdFVuaWNvcm5Mb2cubG9nZ2VyKCdUaGUgXCJsb2dQcmVmaXhcIiBvcHRpb24gaXMgbm90IGEgc3RyaW5nIG9yIGJvb2xlYW4uJywgJ2Vycm9yJyk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHR0ZXh0KHZhbHVlID0gVW5pY29ybkxvZy5sb2dPcHRpb25zLnRleHQpIHtcblx0XHRcdGlmICh0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnKSB7XG5cdFx0XHRcdFVuaWNvcm5Mb2cubG9nZ2VyKCdUaGUgXCJ0ZXh0XCIgb3B0aW9uIGlzIG5vdCBhIHN0cmluZy4nLCAnZXJyb3InKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdG9iamVjdHModmFsdWUgPSBVbmljb3JuTG9nLmxvZ09wdGlvbnMub2JqZWN0cykge1xuXHRcdFx0aWYgKHZhbHVlIGluc3RhbmNlb2YgQXJyYXkgfHwgdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyB8fCBOdW1iZXIuaXNJbnRlZ2VyKHZhbHVlKSkge1xuXHRcdFx0XHRVbmljb3JuTG9nLmxvZ2dlcignVGhlIFwib2JqZWN0c1wiIG9wdGlvbiBpcyBub3QgYW4gb2JqZWN0LicsICdlcnJvcicpO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0YXJyYXkodmFsdWUgPSBVbmljb3JuTG9nLmxvZ09wdGlvbnMuYXJyYXkpIHtcblx0XHRcdGlmICghKHZhbHVlIGluc3RhbmNlb2YgQXJyYXkpIHx8IHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgfHwgTnVtYmVyLmlzSW50ZWdlcih2YWx1ZSkpIHtcblx0XHRcdFx0VW5pY29ybkxvZy5sb2dnZXIoJ1RoZSBcImFycmF5XCIgb3B0aW9uIGlzIG5vdCBhbiBhcnJheS4nLCAnZXJyb3InKTtcblx0XHRcdH1cblx0XHR9LFxuXHR9LFxuXG5cdC8vID09PT09PT09PT09PT09PT09PT09PSBCdWlsZCBzdHVmZiAvL1xuXHRidWlsZDoge1xuXHRcdC8vIEFkZCBQcmVmaXggaWYgb3B0aW9uIHNldCAvL1xuXHRcdHByZWZpeCgpIHtcblx0XHRcdGNvbnN0IG9wdGlvbnMgPSBVbmljb3JuTG9nLmxvZ09wdGlvbnM7XG5cblx0XHRcdGlmIChvcHRpb25zLmxvZ1ByZWZpeCkge1xuXHRcdFx0XHRpZiAodHlwZW9mIG9wdGlvbnMubG9nUHJlZml4ID09PSAnc3RyaW5nJykge1xuXHRcdFx0XHRcdG9wdGlvbnMudGV4dCA9IGAke29wdGlvbnMubG9nUHJlZml4fSAke29wdGlvbnMudGV4dH1gO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGVsc2Uge1xuXHRcdFx0XHRcdG9wdGlvbnMudGV4dCA9IGAke29wdGlvbnMubmFtZX0gJHtvcHRpb25zLnRleHR9YDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0Ly8gQnVpbGQgbG9nIHN0eWxlcyAvL1xuXHRcdHN0eWxlcygpIHtcblx0XHRcdGNvbnN0IG9wdGlvbnMgPSBVbmljb3JuTG9nLmxvZ09wdGlvbnM7XG5cdFx0XHRsZXQgc3R5bGVzID0gb3B0aW9ucy5zdHlsZXM7XG5cblx0XHRcdGlmIChzdHlsZXMgPT09IGZhbHNlKSB7XG5cdFx0XHRcdHN0eWxlcyA9ICcnO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBzdHlsZXMgc2hvdWxkIGJlIG1hZ2ljYWwgQUYgLy9cblx0XHRcdGVsc2UgaWYgKChvcHRpb25zLnR5cGUgPT09ICdsb2cnIHx8IG9wdGlvbnMudHlwZSA9PT0gJ2luZm8nKSAmJiAoVW5pY29ybkxvZy5tYWdpY2FsU3R5bGVOYW1lcy5pbmNsdWRlcyhvcHRpb25zLnN0eWxlcykgfHwgb3B0aW9ucy5tYWdpY2FsKSkge1xuXHRcdFx0XHRzdHlsZXMgPSBVbmljb3JuTG9nLmRlZmF1bHRTdHlsZXMuZ29OdXRzLmpvaW4oJzsnKTtcblx0XHRcdH1cblx0XHRcdC8vIFN0eWxlcyBmb3IgaW5mbyBtZXRob2QgLy9cblx0XHRcdGVsc2UgaWYgKChzdHlsZXMgPT09ICcnIHx8IHN0eWxlcyA9PT0gdHJ1ZSkgJiYgb3B0aW9ucy50eXBlID09PSAnaW5mbycpIHtcblx0XHRcdFx0c3R5bGVzID0gVW5pY29ybkxvZy5kZWZhdWx0U3R5bGVzLmluZm8uam9pbignOycpO1xuXHRcdFx0fVxuXHRcdFx0Ly8gRGVmYXVsdCBzdHlsZXMgLy9cblx0XHRcdGVsc2Uge1xuXHRcdFx0XHRzdHlsZXMgPSBzdHlsZXMgfHwgVW5pY29ybkxvZy5kZWZhdWx0U3R5bGVzLmxvZy5qb2luKCc7Jyk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIHN0eWxlcyBpcyBhbiBhcnJheSwgam9pbiB0aGVtIC8vXG5cdFx0XHRpZiAoQXJyYXkuaXNBcnJheShzdHlsZXMpKSB7XG5cdFx0XHRcdHN0eWxlcyA9IHN0eWxlcy5qb2luKCc7Jyk7XG5cdFx0XHR9XG5cblx0XHRcdG9wdGlvbnMuc3R5bGVzID0gc3R5bGVzO1xuXHRcdH0sXG5cdFx0Ly8gQnVpbGQgdGhlIG91dHB1dCAvL1xuXHRcdG91dHB1dChvcHRpb25zID0gVW5pY29ybkxvZy5sb2dPcHRpb25zKSB7XG5cdFx0XHRjb25zdCByZXN1bHRzID0gWyclYyVzJywgb3B0aW9ucy5zdHlsZXNdO1xuXG5cdFx0XHQvLyBCdWlsZCB0aGUgb3V0cHV0IHJlc3VsdHMgLy9cblx0XHRcdGlmIChvcHRpb25zLnRleHQpIHtcblx0XHRcdFx0cmVzdWx0cy5wdXNoKG9wdGlvbnMudGV4dCk7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChvcHRpb25zLmFycmF5Lmxlbmd0aCkge1xuXHRcdFx0XHRyZXN1bHRzLnB1c2gob3B0aW9ucy5hcnJheSk7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChPYmplY3Qua2V5cyhvcHRpb25zLm9iamVjdHMpLmxlbmd0aCkge1xuXHRcdFx0XHRyZXN1bHRzLnB1c2gob3B0aW9ucy5vYmplY3RzKTtcblx0XHRcdH1cblxuXHRcdFx0VW5pY29ybkxvZy5vdXRwdXQgPSByZXN1bHRzO1xuXHRcdH0sXG5cdH0sXG5cblx0Ly8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IENvbnNvbGUgT3V0cHV0IC8vXG5cdGNvbnNvbGVEaXIoKSB7XG5cdFx0Y29uc3QgdmFsdWUgPSB7fTtcblxuXHRcdGlmIChPYmplY3Qua2V5cyh0aGlzLmxvZ09wdGlvbnMub2JqZWN0cykubGVuZ3RoKSB7XG5cdFx0XHRpZiAoT2JqZWN0LmtleXModGhpcy5sb2dPcHRpb25zLmFycmF5KS5sZW5ndGgpIHtcblx0XHRcdFx0dmFsdWUub2JqZWN0cyA9IHRoaXMubG9nT3B0aW9ucy5vYmplY3RzO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZSB7XG5cdFx0XHRcdE9iamVjdC5hc3NpZ24odmFsdWUsIHRoaXMubG9nT3B0aW9ucy5vYmplY3RzKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoT2JqZWN0LmtleXModGhpcy5sb2dPcHRpb25zLmFycmF5KS5sZW5ndGgpIHtcblx0XHRcdGlmIChPYmplY3Qua2V5cyh0aGlzLmxvZ09wdGlvbnMub2JqZWN0cykubGVuZ3RoKSB7XG5cdFx0XHRcdHZhbHVlLmFycmF5ID0gdGhpcy5sb2dPcHRpb25zLmFycmF5O1xuXHRcdFx0fVxuXHRcdFx0ZWxzZSB7XG5cdFx0XHRcdE9iamVjdC5hc3NpZ24odmFsdWUsIHRoaXMubG9nT3B0aW9ucy5hcnJheSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCFPYmplY3Qua2V5cyh2YWx1ZSkubGVuZ3RoKSB7XG5cdFx0XHRyZXR1cm4gVW5pY29ybkxvZy5sb2dnZXIoJ2NvbnNvbGUuZGlyKCkgZXhwZWN0cyB0aGUgXCJvYmplY3RzXCIgYW5kL29yIGFycmF5IG9wdGlvbiB2YWx1ZSB0byBiZSBzZXQuJywgJ2Vycm9yJyk7XG5cdFx0fVxuXG5cdFx0VW5pY29ybkxvZy5sb2dnZXIoJ2NvbnNvbGUuZGlyKCkgZG9lcyBub3Qgc3VwcG9ydCBjb2xvcnMuJywgJ2luZm8nKTtcblxuXHRcdHJldHVybiB2YWx1ZTtcblx0fSxcblxuXHRjb25zb2xlVGFibGUoKSB7XG5cdFx0VW5pY29ybkxvZy5sb2dnZXIoJ2NvbnNvbGUudGFibGUoKSBkb2VzIG5vdCBzdXBwb3J0IGNvbG9ycy4nLCAnaW5mbycpO1xuXG5cdFx0cmV0dXJuIHRoaXMubG9nT3B0aW9ucy5hcnJheTtcblx0fSxcblxuXHRjb25zb2xlTWV0aG9kTm90U3VwcG9ydGVkKGxvZ1R5cGUpIHtcblx0XHR0aGlzLmVycm9ycyArPSAxO1xuXHRcdFVuaWNvcm5Mb2cubG9nZ2VyKGBjb25zb2xlLiR7bG9nVHlwZX0oKSBkb2VzIG5vdCBzdXBwb3J0IGNvbG9ycy5gLCAnaW5mbycpO1xuXHR9LFxuXG5cdC8vID09PT09PT09PT09PT09PT09PT09PSBNYWtlIHRoZSBmaW5hbCBtYWdpYyBoYXBwZW4gbm93IC8vXG5cdGNvbnNvbGVPdXRwdXQobG9nVHlwZSkge1xuXHRcdGlmIChsb2dUeXBlID09PSAnZGlyJykge1xuXHRcdFx0dGhpcy5vdXRwdXQgPSBbdGhpcy5jb25zb2xlRGlyKCldO1xuXHRcdH1cblxuXHRcdGlmIChsb2dUeXBlID09PSAndGFibGUnKSB7XG5cdFx0XHR0aGlzLm91dHB1dCA9IFt0aGlzLmNvbnNvbGVUYWJsZSgpXTtcblx0XHR9XG5cblx0XHQvLyBUaGVzZSBtZXRob2RzIGRvIG5vdCBzdXBwb3J0IGNvbnNvbGUgY29sb3JzIC8vXG5cdFx0aWYgKGxvZ1R5cGUgPT09ICdjb3VudCcgfHwgbG9nVHlwZSA9PT0gJ2NvdW50UmVzZXQnIHx8IGxvZ1R5cGUgPT09ICd0aW1lJyB8fCBsb2dUeXBlID09PSAndGltZUVuZCcgfHwgbG9nVHlwZSA9PT0gJ3RpbWVMb2cnKSB7XG5cdFx0XHR0aGlzLm91dHB1dCA9IFt0aGlzLmNvbnNvbGVNZXRob2ROb3RTdXBwb3J0ZWQobG9nVHlwZSldO1xuXHRcdH1cblxuXHRcdGlmICghdGhpcy5lcnJvcnMpIHtcblx0XHRcdGNvbnNvbGVbbG9nVHlwZV0oLi4udGhpcy5vdXRwdXQpO1xuXHRcdH1cblx0fSxcblxuXHQvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gVW5pY29ybiBMb2dnZXIgLy9cblx0bG9nZ2VyKG1zZyA9ICdBbiBlcnJvciBoYXMgb2NjdXJyZWQuJywgbG9nVHlwZSA9ICdsb2cnKSB7XG5cdFx0Y29uc3QgbGFiZWwgPSBsb2dUeXBlLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgbG9nVHlwZS5zbGljZSgxKTtcblx0XHRsZXQgc3R5bGUgPSAnJztcblxuXHRcdGlmIChsb2dUeXBlID09PSAnZXJyb3InKSB7XG5cdFx0XHR0aGlzLmVycm9ycyArPSAxO1xuXHRcdH1cblxuXHRcdGlmIChsb2dUeXBlID09PSAnaW5mbycpIHtcblx0XHRcdHN0eWxlID0gdGhpcy5kZWZhdWx0U3R5bGVzLmluZm8uam9pbignOycpO1xuXHRcdH1cblxuXHRcdGNvbnNvbGVbbG9nVHlwZV0oJyVjJXMnLCBzdHlsZSwgYFske1VuaWNvcm5Mb2cubmFtZX0gJHtsYWJlbH1dOiAke21zZ31gKTtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH0sXG59O1xuXG5leHBvcnQgZGVmYXVsdCBVbmljb3JuTG9nO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLyoqXFxuICogcHJpc20uanMgdG9tb3Jyb3cgbmlnaHQgZWlnaHRpZXMgZm9yIEphdmFTY3JpcHQsIENvZmZlZVNjcmlwdCwgQ1NTIGFuZCBIVE1MXFxuICogQmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL2Nocmlza2VtcHNvbi90b21vcnJvdy10aGVtZVxcbiAqIEBhdXRob3IgUm9zZSBQcml0Y2hhcmRcXG4gKi9cXG5cXG5jb2RlW2NsYXNzKj1cXFwibGFuZ3VhZ2UtXFxcIl0sXFxucHJlW2NsYXNzKj1cXFwibGFuZ3VhZ2UtXFxcIl0ge1xcblxcdGNvbG9yOiAjY2NjO1xcblxcdGJhY2tncm91bmQ6IG5vbmU7XFxuXFx0Zm9udC1mYW1pbHk6IENvbnNvbGFzLCBNb25hY28sICdBbmRhbGUgTW9ubycsICdVYnVudHUgTW9ubycsIG1vbm9zcGFjZTtcXG5cXHR0ZXh0LWFsaWduOiBsZWZ0O1xcblxcdHdoaXRlLXNwYWNlOiBwcmU7XFxuXFx0d29yZC1zcGFjaW5nOiBub3JtYWw7XFxuXFx0d29yZC1icmVhazogbm9ybWFsO1xcblxcdHdvcmQtd3JhcDogbm9ybWFsO1xcblxcdGxpbmUtaGVpZ2h0OiAxLjU7XFxuXFxuXFx0LW1vei10YWItc2l6ZTogNDtcXG5cXHQtby10YWItc2l6ZTogNDtcXG5cXHR0YWItc2l6ZTogNDtcXG5cXG5cXHQtd2Via2l0LWh5cGhlbnM6IG5vbmU7XFxuXFx0LW1vei1oeXBoZW5zOiBub25lO1xcblxcdC1tcy1oeXBoZW5zOiBub25lO1xcblxcdGh5cGhlbnM6IG5vbmU7XFxuXFxufVxcblxcbi8qIENvZGUgYmxvY2tzICovXFxucHJlW2NsYXNzKj1cXFwibGFuZ3VhZ2UtXFxcIl0ge1xcblxcdHBhZGRpbmc6IDFlbTtcXG5cXHRtYXJnaW46IC41ZW0gMDtcXG5cXHRvdmVyZmxvdzogYXV0bztcXG59XFxuXFxuOm5vdChwcmUpID4gY29kZVtjbGFzcyo9XFxcImxhbmd1YWdlLVxcXCJdLFxcbnByZVtjbGFzcyo9XFxcImxhbmd1YWdlLVxcXCJdIHtcXG5cXHRiYWNrZ3JvdW5kOiAjMmQyZDJkO1xcbn1cXG5cXG4vKiBJbmxpbmUgY29kZSAqL1xcbjpub3QocHJlKSA+IGNvZGVbY2xhc3MqPVxcXCJsYW5ndWFnZS1cXFwiXSB7XFxuXFx0cGFkZGluZzogLjFlbTtcXG5cXHRib3JkZXItcmFkaXVzOiAuM2VtO1xcblxcdHdoaXRlLXNwYWNlOiBub3JtYWw7XFxufVxcblxcbi50b2tlbi5jb21tZW50LFxcbi50b2tlbi5ibG9jay1jb21tZW50LFxcbi50b2tlbi5wcm9sb2csXFxuLnRva2VuLmRvY3R5cGUsXFxuLnRva2VuLmNkYXRhIHtcXG5cXHRjb2xvcjogIzk5OTtcXG59XFxuXFxuLnRva2VuLnB1bmN0dWF0aW9uIHtcXG5cXHRjb2xvcjogI2NjYztcXG59XFxuXFxuLnRva2VuLnRhZyxcXG4udG9rZW4uYXR0ci1uYW1lLFxcbi50b2tlbi5uYW1lc3BhY2UsXFxuLnRva2VuLmRlbGV0ZWQge1xcblxcdGNvbG9yOiAjZTI3NzdhO1xcbn1cXG5cXG4udG9rZW4uZnVuY3Rpb24tbmFtZSB7XFxuXFx0Y29sb3I6ICM2MTk2Y2M7XFxufVxcblxcbi50b2tlbi5ib29sZWFuLFxcbi50b2tlbi5udW1iZXIsXFxuLnRva2VuLmZ1bmN0aW9uIHtcXG5cXHRjb2xvcjogI2YwOGQ0OTtcXG59XFxuXFxuLnRva2VuLnByb3BlcnR5LFxcbi50b2tlbi5jbGFzcy1uYW1lLFxcbi50b2tlbi5jb25zdGFudCxcXG4udG9rZW4uc3ltYm9sIHtcXG5cXHRjb2xvcjogI2Y4YzU1NTtcXG59XFxuXFxuLnRva2VuLnNlbGVjdG9yLFxcbi50b2tlbi5pbXBvcnRhbnQsXFxuLnRva2VuLmF0cnVsZSxcXG4udG9rZW4ua2V5d29yZCxcXG4udG9rZW4uYnVpbHRpbiB7XFxuXFx0Y29sb3I6ICNjYzk5Y2Q7XFxufVxcblxcbi50b2tlbi5zdHJpbmcsXFxuLnRva2VuLmNoYXIsXFxuLnRva2VuLmF0dHItdmFsdWUsXFxuLnRva2VuLnJlZ2V4LFxcbi50b2tlbi52YXJpYWJsZSB7XFxuXFx0Y29sb3I6ICM3ZWM2OTk7XFxufVxcblxcbi50b2tlbi5vcGVyYXRvcixcXG4udG9rZW4uZW50aXR5LFxcbi50b2tlbi51cmwge1xcblxcdGNvbG9yOiAjNjdjZGNjO1xcbn1cXG5cXG4udG9rZW4uaW1wb3J0YW50LFxcbi50b2tlbi5ib2xkIHtcXG5cXHRmb250LXdlaWdodDogYm9sZDtcXG59XFxuLnRva2VuLml0YWxpYyB7XFxuXFx0Zm9udC1zdHlsZTogaXRhbGljO1xcbn1cXG5cXG4udG9rZW4uZW50aXR5IHtcXG5cXHRjdXJzb3I6IGhlbHA7XFxufVxcblxcbi50b2tlbi5pbnNlcnRlZCB7XFxuXFx0Y29sb3I6IGdyZWVuO1xcbn1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi8uLi9ub2RlX21vZHVsZXMvdnVlLWNvZGUtaGlnaGxpZ2h0L3RoZW1lcy9wcmlzbS10b21vcnJvdy5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7Ozs7RUFJRTs7QUFFRjs7Q0FFQyxXQUFXO0NBQ1gsZ0JBQWdCO0NBQ2hCLHNFQUFzRTtDQUN0RSxnQkFBZ0I7Q0FDaEIsZ0JBQWdCO0NBQ2hCLG9CQUFvQjtDQUNwQixrQkFBa0I7Q0FDbEIsaUJBQWlCO0NBQ2pCLGdCQUFnQjs7Q0FFaEIsZ0JBQWdCO0NBQ2hCLGNBQWM7Q0FDZCxXQUFXOztDQUVYLHFCQUFxQjtDQUNyQixrQkFBa0I7Q0FDbEIsaUJBQWlCO0NBQ2pCLGFBQWE7O0FBRWQ7O0FBRUEsZ0JBQWdCO0FBQ2hCO0NBQ0MsWUFBWTtDQUNaLGNBQWM7Q0FDZCxjQUFjO0FBQ2Y7O0FBRUE7O0NBRUMsbUJBQW1CO0FBQ3BCOztBQUVBLGdCQUFnQjtBQUNoQjtDQUNDLGFBQWE7Q0FDYixtQkFBbUI7Q0FDbkIsbUJBQW1CO0FBQ3BCOztBQUVBOzs7OztDQUtDLFdBQVc7QUFDWjs7QUFFQTtDQUNDLFdBQVc7QUFDWjs7QUFFQTs7OztDQUlDLGNBQWM7QUFDZjs7QUFFQTtDQUNDLGNBQWM7QUFDZjs7QUFFQTs7O0NBR0MsY0FBYztBQUNmOztBQUVBOzs7O0NBSUMsY0FBYztBQUNmOztBQUVBOzs7OztDQUtDLGNBQWM7QUFDZjs7QUFFQTs7Ozs7Q0FLQyxjQUFjO0FBQ2Y7O0FBRUE7OztDQUdDLGNBQWM7QUFDZjs7QUFFQTs7Q0FFQyxpQkFBaUI7QUFDbEI7QUFDQTtDQUNDLGtCQUFrQjtBQUNuQjs7QUFFQTtDQUNDLFlBQVk7QUFDYjs7QUFFQTtDQUNDLFlBQVk7QUFDYlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIvKipcXG4gKiBwcmlzbS5qcyB0b21vcnJvdyBuaWdodCBlaWdodGllcyBmb3IgSmF2YVNjcmlwdCwgQ29mZmVlU2NyaXB0LCBDU1MgYW5kIEhUTUxcXG4gKiBCYXNlZCBvbiBodHRwczovL2dpdGh1Yi5jb20vY2hyaXNrZW1wc29uL3RvbW9ycm93LXRoZW1lXFxuICogQGF1dGhvciBSb3NlIFByaXRjaGFyZFxcbiAqL1xcblxcbmNvZGVbY2xhc3MqPVxcXCJsYW5ndWFnZS1cXFwiXSxcXG5wcmVbY2xhc3MqPVxcXCJsYW5ndWFnZS1cXFwiXSB7XFxuXFx0Y29sb3I6ICNjY2M7XFxuXFx0YmFja2dyb3VuZDogbm9uZTtcXG5cXHRmb250LWZhbWlseTogQ29uc29sYXMsIE1vbmFjbywgJ0FuZGFsZSBNb25vJywgJ1VidW50dSBNb25vJywgbW9ub3NwYWNlO1xcblxcdHRleHQtYWxpZ246IGxlZnQ7XFxuXFx0d2hpdGUtc3BhY2U6IHByZTtcXG5cXHR3b3JkLXNwYWNpbmc6IG5vcm1hbDtcXG5cXHR3b3JkLWJyZWFrOiBub3JtYWw7XFxuXFx0d29yZC13cmFwOiBub3JtYWw7XFxuXFx0bGluZS1oZWlnaHQ6IDEuNTtcXG5cXG5cXHQtbW96LXRhYi1zaXplOiA0O1xcblxcdC1vLXRhYi1zaXplOiA0O1xcblxcdHRhYi1zaXplOiA0O1xcblxcblxcdC13ZWJraXQtaHlwaGVuczogbm9uZTtcXG5cXHQtbW96LWh5cGhlbnM6IG5vbmU7XFxuXFx0LW1zLWh5cGhlbnM6IG5vbmU7XFxuXFx0aHlwaGVuczogbm9uZTtcXG5cXG59XFxuXFxuLyogQ29kZSBibG9ja3MgKi9cXG5wcmVbY2xhc3MqPVxcXCJsYW5ndWFnZS1cXFwiXSB7XFxuXFx0cGFkZGluZzogMWVtO1xcblxcdG1hcmdpbjogLjVlbSAwO1xcblxcdG92ZXJmbG93OiBhdXRvO1xcbn1cXG5cXG46bm90KHByZSkgPiBjb2RlW2NsYXNzKj1cXFwibGFuZ3VhZ2UtXFxcIl0sXFxucHJlW2NsYXNzKj1cXFwibGFuZ3VhZ2UtXFxcIl0ge1xcblxcdGJhY2tncm91bmQ6ICMyZDJkMmQ7XFxufVxcblxcbi8qIElubGluZSBjb2RlICovXFxuOm5vdChwcmUpID4gY29kZVtjbGFzcyo9XFxcImxhbmd1YWdlLVxcXCJdIHtcXG5cXHRwYWRkaW5nOiAuMWVtO1xcblxcdGJvcmRlci1yYWRpdXM6IC4zZW07XFxuXFx0d2hpdGUtc3BhY2U6IG5vcm1hbDtcXG59XFxuXFxuLnRva2VuLmNvbW1lbnQsXFxuLnRva2VuLmJsb2NrLWNvbW1lbnQsXFxuLnRva2VuLnByb2xvZyxcXG4udG9rZW4uZG9jdHlwZSxcXG4udG9rZW4uY2RhdGEge1xcblxcdGNvbG9yOiAjOTk5O1xcbn1cXG5cXG4udG9rZW4ucHVuY3R1YXRpb24ge1xcblxcdGNvbG9yOiAjY2NjO1xcbn1cXG5cXG4udG9rZW4udGFnLFxcbi50b2tlbi5hdHRyLW5hbWUsXFxuLnRva2VuLm5hbWVzcGFjZSxcXG4udG9rZW4uZGVsZXRlZCB7XFxuXFx0Y29sb3I6ICNlMjc3N2E7XFxufVxcblxcbi50b2tlbi5mdW5jdGlvbi1uYW1lIHtcXG5cXHRjb2xvcjogIzYxOTZjYztcXG59XFxuXFxuLnRva2VuLmJvb2xlYW4sXFxuLnRva2VuLm51bWJlcixcXG4udG9rZW4uZnVuY3Rpb24ge1xcblxcdGNvbG9yOiAjZjA4ZDQ5O1xcbn1cXG5cXG4udG9rZW4ucHJvcGVydHksXFxuLnRva2VuLmNsYXNzLW5hbWUsXFxuLnRva2VuLmNvbnN0YW50LFxcbi50b2tlbi5zeW1ib2wge1xcblxcdGNvbG9yOiAjZjhjNTU1O1xcbn1cXG5cXG4udG9rZW4uc2VsZWN0b3IsXFxuLnRva2VuLmltcG9ydGFudCxcXG4udG9rZW4uYXRydWxlLFxcbi50b2tlbi5rZXl3b3JkLFxcbi50b2tlbi5idWlsdGluIHtcXG5cXHRjb2xvcjogI2NjOTljZDtcXG59XFxuXFxuLnRva2VuLnN0cmluZyxcXG4udG9rZW4uY2hhcixcXG4udG9rZW4uYXR0ci12YWx1ZSxcXG4udG9rZW4ucmVnZXgsXFxuLnRva2VuLnZhcmlhYmxlIHtcXG5cXHRjb2xvcjogIzdlYzY5OTtcXG59XFxuXFxuLnRva2VuLm9wZXJhdG9yLFxcbi50b2tlbi5lbnRpdHksXFxuLnRva2VuLnVybCB7XFxuXFx0Y29sb3I6ICM2N2NkY2M7XFxufVxcblxcbi50b2tlbi5pbXBvcnRhbnQsXFxuLnRva2VuLmJvbGQge1xcblxcdGZvbnQtd2VpZ2h0OiBib2xkO1xcbn1cXG4udG9rZW4uaXRhbGljIHtcXG5cXHRmb250LXN0eWxlOiBpdGFsaWM7XFxufVxcblxcbi50b2tlbi5lbnRpdHkge1xcblxcdGN1cnNvcjogaGVscDtcXG59XFxuXFxuLnRva2VuLmluc2VydGVkIHtcXG5cXHRjb2xvcjogZ3JlZW47XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvZ2V0VXJsLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzBfX18gPSBuZXcgVVJMKFwiZGF0YTppbWFnZS9zdmcreG1sO3V0ZjgsIDxzdmcgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIiB3aWR0aD1cXFwiNTRcXFwiIGhlaWdodD1cXFwiMTRcXFwiIHZpZXdCb3g9XFxcIjAgMCA1NCAxNFxcXCI+PGcgZmlsbD1cXFwibm9uZVxcXCIgZmlsbFJ1bGU9XFxcImV2ZW5vZGRcXFwiIHRyYW5zZm9ybT1cXFwidHJhbnNsYXRlJTI4MSAxJTI5XFxcIj48Y2lyY2xlIGN4PVxcXCI2XFxcIiBjeT1cXFwiNlxcXCIgcj1cXFwiNlxcXCIgZmlsbD1cXFwiJTIzRkY1RjU2XFxcIiBzdHJva2U9XFxcIiUyM0UwNDQzRVxcXCIgc3Ryb2tlV2lkdGg9XFxcIi41XFxcIiAvPjxjaXJjbGUgY3g9XFxcIjI2XFxcIiBjeT1cXFwiNlxcXCIgcj1cXFwiNlxcXCIgZmlsbD1cXFwiJTIzRkZCRDJFXFxcIiBzdHJva2U9XFxcIiUyM0RFQTEyM1xcXCIgc3Ryb2tlV2lkdGg9XFxcIi41XFxcIiAvPjxjaXJjbGUgY3g9XFxcIjQ2XFxcIiBjeT1cXFwiNlxcXCIgcj1cXFwiNlxcXCIgZmlsbD1cXFwiJTIzMjdDOTNGXFxcIiBzdHJva2U9XFxcIiUyMzFBQUIyOVxcXCIgc3Ryb2tlV2lkdGg9XFxcIi41XFxcIiAvPjwvZz48L3N2Zz5cIiwgaW1wb3J0Lm1ldGEudXJsKTtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8wX19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCJkaXYgcHJlW2NsYXNzKj1cXFwibGFuZ3VhZ2UtXFxcIl0ge1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgd2lkdGg6IDEwMCU7XFxuICBwYWRkaW5nLXJpZ2h0OiAxMGVtO1xcbiAgcGFkZGluZy10b3A6IDNyZW07XFxuICBib3JkZXItcmFkaXVzOiA2cHg7XFxuICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8wX19fICsgXCIpO1xcbiAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDtcXG4gIGJhY2tncm91bmQtcG9zaXRpb246IDE2cHggMTZweDtcXG4gIGJveC1zaGFkb3c6IDVweCA1cHggMTVweCAwcHggcmdiYSg1MCwgNTAsIDUwLCAwLjc1KTtcXG59XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1jb2RlLWhpZ2hsaWdodC90aGVtZXMvd2luZG93LmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNFLHFCQUFxQjtFQUNyQixXQUFXO0VBQ1gsbUJBQW1CO0VBQ25CLGlCQUFpQjtFQUNqQixrQkFBa0I7RUFDbEIseURBQXVjO0VBQ3ZjLDRCQUE0QjtFQUM1Qiw4QkFBOEI7RUFDOUIsbURBQW1EO0FBQ3JEXCIsXCJzb3VyY2VzQ29udGVudFwiOltcImRpdiBwcmVbY2xhc3MqPVxcXCJsYW5ndWFnZS1cXFwiXSB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICB3aWR0aDogMTAwJTtcXG4gIHBhZGRpbmctcmlnaHQ6IDEwZW07XFxuICBwYWRkaW5nLXRvcDogM3JlbTtcXG4gIGJvcmRlci1yYWRpdXM6IDZweDtcXG4gIGJhY2tncm91bmQtaW1hZ2U6IHVybCgnZGF0YTppbWFnZS9zdmcreG1sO3V0ZjgsIDxzdmcgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIiB3aWR0aD1cXFwiNTRcXFwiIGhlaWdodD1cXFwiMTRcXFwiIHZpZXdCb3g9XFxcIjAgMCA1NCAxNFxcXCI+PGcgZmlsbD1cXFwibm9uZVxcXCIgZmlsbFJ1bGU9XFxcImV2ZW5vZGRcXFwiIHRyYW5zZm9ybT1cXFwidHJhbnNsYXRlKDEgMSlcXFwiPjxjaXJjbGUgY3g9XFxcIjZcXFwiIGN5PVxcXCI2XFxcIiByPVxcXCI2XFxcIiBmaWxsPVxcXCIlMjNGRjVGNTZcXFwiIHN0cm9rZT1cXFwiJTIzRTA0NDNFXFxcIiBzdHJva2VXaWR0aD1cXFwiLjVcXFwiIC8+PGNpcmNsZSBjeD1cXFwiMjZcXFwiIGN5PVxcXCI2XFxcIiByPVxcXCI2XFxcIiBmaWxsPVxcXCIlMjNGRkJEMkVcXFwiIHN0cm9rZT1cXFwiJTIzREVBMTIzXFxcIiBzdHJva2VXaWR0aD1cXFwiLjVcXFwiIC8+PGNpcmNsZSBjeD1cXFwiNDZcXFwiIGN5PVxcXCI2XFxcIiByPVxcXCI2XFxcIiBmaWxsPVxcXCIlMjMyN0M5M0ZcXFwiIHN0cm9rZT1cXFwiJTIzMUFBQjI5XFxcIiBzdHJva2VXaWR0aD1cXFwiLjVcXFwiIC8+PC9nPjwvc3ZnPicpO1xcbiAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDtcXG4gIGJhY2tncm91bmQtcG9zaXRpb246IDE2cHggMTZweDtcXG4gIGJveC1zaGFkb3c6IDVweCA1cHggMTVweCAwcHggcmdiYSg1MCwgNTAsIDUwLCAwLjc1KTtcXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVRfUlVMRV9JTVBPUlRfMF9fXyBmcm9tIFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWNvZGUtaGlnaGxpZ2h0L3RoZW1lcy9wcmlzbS10b21vcnJvdy5jc3NcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FUX1JVTEVfSU1QT1JUXzFfX18gZnJvbSBcIi0hLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1jb2RlLWhpZ2hsaWdodC90aGVtZXMvd2luZG93LmNzc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18uaShfX19DU1NfTE9BREVSX0FUX1JVTEVfSU1QT1JUXzBfX18pO1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18uaShfX19DU1NfTE9BREVSX0FUX1JVTEVfSU1QT1JUXzFfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiaHRtbCB7XFxuICBzY3JvbGwtcGFkZGluZy10b3A6IDcwcHg7XFxufVxcbmgxIHtcXG4gIGZvbnQtZmFtaWx5OiBcXFwiSGVubnkgUGVubnlcXFwiLCBjdXJzaXZlO1xcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxuICBmb250LXNpemU6IDNlbTtcXG59XFxuaDIge1xcbiAgZm9udC1mYW1pbHk6IFxcXCJJbmRpZSBGbG93ZXJcXFwiLCBjdXJzaXZlO1xcbn1cXG5oMjo6YWZ0ZXIge1xcbiAgY29udGVudDogXFxcIiBcXFwiO1xcbiAgYmFja2dyb3VuZC1pbWFnZTogbGluZWFyLWdyYWRpZW50KHRvIHJpZ2h0LCByZWQsICNmZmE2MDAsIHllbGxvdywgbGltZSwgYXF1YSwgYmx1ZSwgZnVjaHNpYSwgcmVkKTtcXG4gIGJvcmRlci1yYWRpdXM6IDVweDtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgaGVpZ2h0OiAycHg7XFxufVxcbi50YWJsZSB0Ym9keSB0ZCBwcmUge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZhZmFmYSAhaW1wb3J0YW50O1xcbiAgYm9yZGVyLXJhZGl1czogNXB4O1xcbiAgcGFkZGluZzogMXJlbTtcXG4gIHRhYi1zaXplOiAyO1xcbn1cXG4ub3B0aW9uLXR5cGUge1xcbiAgY29sb3I6ICM3YjFmYTMgIWltcG9ydGFudDtcXG4gIGZvbnQtd2VpZ2h0OiA1MDA7XFxufVxcbi5ib29sZWFuLXN0eWxlIHtcXG4gIGNvbG9yOiBibHVlICFpbXBvcnRhbnQ7XFxuICBmb250LXdlaWdodDogNTAwO1xcbn1cXG4ucmFpbmJvdy10ZXh0IHtcXG4gIC13ZWJraXQtYmFja2dyb3VuZC1jbGlwOiB0ZXh0O1xcbiAgLXdlYmtpdC10ZXh0LWZpbGwtY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgYmFja2dyb3VuZC1jbGlwOiB0ZXh0O1xcbiAgYmFja2dyb3VuZC1pbWFnZTogbGluZWFyLWdyYWRpZW50KHRvIHJpZ2h0LCByZWQsICNmZmE2MDAsIHllbGxvdywgbGltZSwgYXF1YSwgYmx1ZSwgZnVjaHNpYSwgcmVkKTtcXG4gIGJvcmRlci1yYWRpdXM6IDVweDtcXG4gIGNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xcbiAgaGVpZ2h0OiAxMDAlO1xcbiAgdGV4dC1zaGFkb3c6IDAgMnB4IDNweCByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMyksIDAgLTFweCAycHggcmdiYSgwLCAwLCAwLCAwLjIpO1xcbn1cXG4ucmFpbmJvdy1ib3JkZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzAwMDtcXG4gIGJvcmRlci1pbWFnZTogbGluZWFyLWdyYWRpZW50KHRvIHJpZ2h0LCByZWQsICNmZmE2MDAsIHllbGxvdywgbGltZSwgYXF1YSwgYmx1ZSwgZnVjaHNpYSwgcmVkKSAxO1xcbiAgYm9yZGVyLXN0eWxlOiBzb2xpZDtcXG4gIGJvcmRlci13aWR0aDogNHB4O1xcbiAgcGFkZGluZzogMnJlbTtcXG59XCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vZG9jcy9Vbmljb3JuTG9nLnZ1ZVwiLFwid2VicGFjazovLy4vLi4vVW5pY29ybkxvZy52dWVcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBbW5CQTtFQUNDLHdCQUFBO0FDaG5CRDtBRG1uQkE7RUFDQyxtQ0FBQTtFQUNBLGlCQUFBO0VBQ0EsY0FBQTtBQ2huQkQ7QURtbkJBO0VBQ0Msb0NBQUE7QUNobkJEO0FEa25CQztFQUNDLFlBQUE7RUFDQSxpR0EzQmlCO0VBNEJqQixrQkFBQTtFQUNBLGNBQUE7RUFDQSxXQUFBO0FDaG5CRjtBRHVuQkc7RUFDQyxvQ0FBQTtFQUNBLGtCQUFBO0VBQ0EsYUFBQTtFQUNBLFdBQUE7QUNwbkJKO0FEMG5CQTtFQUNDLHlCQUFBO0VBQ0EsZ0JBQUE7QUN2bkJEO0FEMG5CQTtFQUNDLHNCQUFBO0VBQ0EsZ0JBQUE7QUN2bkJEO0FEMG5CQTtFQUNDLDZCQUFBO0VBQ0Esb0NBQUE7RUFDQSxxQkFBQTtFQUNBLGlHQTdEa0I7RUE4RGxCLGtCQUFBO0VBQ0Esa0JBQUE7RUFDQSxxQkFBQTtFQUNBLGlCQUFBO0VBQ0EsWUFBQTtFQUNBLDhFQUFBO0FDdm5CRDtBRDBuQkE7RUFDQyxzQkFBQTtFQUNBLCtGQUFBO0VBQ0EsbUJBQUE7RUFDQSxpQkFBQTtFQUNBLGFBQUE7QUN2bkJEXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIlxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcbkBpbXBvcnQgJ3Z1ZS1jb2RlLWhpZ2hsaWdodC90aGVtZXMvcHJpc20tdG9tb3Jyb3cuY3NzJztcXG5AaW1wb3J0ICd2dWUtY29kZS1oaWdobGlnaHQvdGhlbWVzL3dpbmRvdy5jc3MnO1xcblxcbiRyYWluYm93LWdyYWRpZW50OiBsaW5lYXItZ3JhZGllbnQoXFxuXFx0dG8gcmlnaHQsXFxuXFx0aHNsKDAsIDEwMCUsIDUwJSksXFxuXFx0aHNsKDM5LCAxMDAlLCA1MCUpLFxcblxcdGhzbCg2MCwgMTAwJSwgNTAlKSxcXG5cXHRoc2woMTIwLCAxMDAlLCA1MCUpLFxcblxcdGhzbCgxODAsIDEwMCUsIDUwJSksXFxuXFx0aHNsKDI0MCwgMTAwJSwgNTAlKSxcXG5cXHRoc2woMzAwLCAxMDAlLCA1MCUpLFxcblxcdGhzbCgwLCAxMDAlLCA1MCUpXFxuKTtcXG5cXG5odG1sIHtcXG5cXHRzY3JvbGwtcGFkZGluZy10b3A6IDcwcHg7XFxufVxcblxcbmgxIHtcXG5cXHRmb250LWZhbWlseTogJ0hlbm55IFBlbm55JywgY3Vyc2l2ZTtcXG5cXHRmb250LXdlaWdodDogYm9sZDtcXG5cXHRmb250LXNpemU6IDNlbTtcXG59XFxuXFxuaDIge1xcblxcdGZvbnQtZmFtaWx5OiAnSW5kaWUgRmxvd2VyJywgY3Vyc2l2ZTtcXG5cXG5cXHQmOjphZnRlciB7XFxuXFx0XFx0Y29udGVudDogJyAnO1xcblxcdFxcdGJhY2tncm91bmQtaW1hZ2U6ICRyYWluYm93LWdyYWRpZW50O1xcblxcdFxcdGJvcmRlci1yYWRpdXM6IDVweDtcXG5cXHRcXHRkaXNwbGF5OiBibG9jaztcXG5cXHRcXHRoZWlnaHQ6IDJweDtcXG5cXHR9XFxufVxcblxcbi50YWJsZSB7XFxuXFx0dGJvZHkge1xcblxcdFxcdHRkIHtcXG5cXHRcXHRcXHRwcmUge1xcblxcdFxcdFxcdFxcdGJhY2tncm91bmQtY29sb3I6ICNmYWZhZmEgIWltcG9ydGFudDtcXG5cXHRcXHRcXHRcXHRib3JkZXItcmFkaXVzOiA1cHg7XFxuXFx0XFx0XFx0XFx0cGFkZGluZzogMXJlbTtcXG5cXHRcXHRcXHRcXHR0YWItc2l6ZTogMjtcXG5cXHRcXHRcXHR9XFxuXFx0XFx0fVxcblxcdH1cXG59XFxuXFxuLm9wdGlvbi10eXBlIHtcXG5cXHRjb2xvcjogaHNsKDI4MiwgNjglLCAzOCUpICFpbXBvcnRhbnQ7XFxuXFx0Zm9udC13ZWlnaHQ6IDUwMDtcXG59XFxuXFxuLmJvb2xlYW4tc3R5bGUge1xcblxcdGNvbG9yOiBoc2woMjQwLCAxMDAlLCA1MCUpICFpbXBvcnRhbnQ7XFxuXFx0Zm9udC13ZWlnaHQ6IDUwMDtcXG59XFxuXFxuLnJhaW5ib3ctdGV4dCB7XFxuXFx0LXdlYmtpdC1iYWNrZ3JvdW5kLWNsaXA6IHRleHQ7XFxuXFx0LXdlYmtpdC10ZXh0LWZpbGwtY29sb3I6IHRyYW5zcGFyZW50O1xcblxcdGJhY2tncm91bmQtY2xpcDogdGV4dDtcXG5cXHRiYWNrZ3JvdW5kLWltYWdlOiAkcmFpbmJvdy1ncmFkaWVudDtcXG5cXHRib3JkZXItcmFkaXVzOiA1cHg7XFxuXFx0Y29sb3I6IHRyYW5zcGFyZW50O1xcblxcdGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG5cXHRmb250LXdlaWdodDogYm9sZDtcXG5cXHRoZWlnaHQ6IDEwMCU7XFxuXFx0dGV4dC1zaGFkb3c6IDAgMnB4IDNweCByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMyksIDAgLTFweCAycHggcmdiYSgwLCAwLCAwLCAwLjIpO1xcbn1cXG5cXG4ucmFpbmJvdy1ib3JkZXIge1xcblxcdGJhY2tncm91bmQtY29sb3I6ICMwMDA7XFxuXFx0Ym9yZGVyLWltYWdlOiAkcmFpbmJvdy1ncmFkaWVudCAxO1xcblxcdGJvcmRlci1zdHlsZTogc29saWQ7XFxuXFx0Ym9yZGVyLXdpZHRoOiA0cHg7XFxuXFx0cGFkZGluZzogMnJlbTtcXG59XFxuXCIsXCJAaW1wb3J0ICd2dWUtY29kZS1oaWdobGlnaHQvdGhlbWVzL3ByaXNtLXRvbW9ycm93LmNzcyc7XFxuQGltcG9ydCAndnVlLWNvZGUtaGlnaGxpZ2h0L3RoZW1lcy93aW5kb3cuY3NzJztcXG5odG1sIHtcXG4gIHNjcm9sbC1wYWRkaW5nLXRvcDogNzBweDtcXG59XFxuXFxuaDEge1xcbiAgZm9udC1mYW1pbHk6IFxcXCJIZW5ueSBQZW5ueVxcXCIsIGN1cnNpdmU7XFxuICBmb250LXdlaWdodDogYm9sZDtcXG4gIGZvbnQtc2l6ZTogM2VtO1xcbn1cXG5cXG5oMiB7XFxuICBmb250LWZhbWlseTogXFxcIkluZGllIEZsb3dlclxcXCIsIGN1cnNpdmU7XFxufVxcbmgyOjphZnRlciB7XFxuICBjb250ZW50OiBcXFwiIFxcXCI7XFxuICBiYWNrZ3JvdW5kLWltYWdlOiBsaW5lYXItZ3JhZGllbnQodG8gcmlnaHQsIHJlZCwgI2ZmYTYwMCwgeWVsbG93LCBsaW1lLCBhcXVhLCBibHVlLCBmdWNoc2lhLCByZWQpO1xcbiAgYm9yZGVyLXJhZGl1czogNXB4O1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICBoZWlnaHQ6IDJweDtcXG59XFxuXFxuLnRhYmxlIHRib2R5IHRkIHByZSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmFmYWZhICFpbXBvcnRhbnQ7XFxuICBib3JkZXItcmFkaXVzOiA1cHg7XFxuICBwYWRkaW5nOiAxcmVtO1xcbiAgdGFiLXNpemU6IDI7XFxufVxcblxcbi5vcHRpb24tdHlwZSB7XFxuICBjb2xvcjogIzdiMWZhMyAhaW1wb3J0YW50O1xcbiAgZm9udC13ZWlnaHQ6IDUwMDtcXG59XFxuXFxuLmJvb2xlYW4tc3R5bGUge1xcbiAgY29sb3I6IGJsdWUgIWltcG9ydGFudDtcXG4gIGZvbnQtd2VpZ2h0OiA1MDA7XFxufVxcblxcbi5yYWluYm93LXRleHQge1xcbiAgLXdlYmtpdC1iYWNrZ3JvdW5kLWNsaXA6IHRleHQ7XFxuICAtd2Via2l0LXRleHQtZmlsbC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICBiYWNrZ3JvdW5kLWNsaXA6IHRleHQ7XFxuICBiYWNrZ3JvdW5kLWltYWdlOiBsaW5lYXItZ3JhZGllbnQodG8gcmlnaHQsIHJlZCwgI2ZmYTYwMCwgeWVsbG93LCBsaW1lLCBhcXVhLCBibHVlLCBmdWNoc2lhLCByZWQpO1xcbiAgYm9yZGVyLXJhZGl1czogNXB4O1xcbiAgY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxuICBoZWlnaHQ6IDEwMCU7XFxuICB0ZXh0LXNoYWRvdzogMCAycHggM3B4IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4zKSwgMCAtMXB4IDJweCByZ2JhKDAsIDAsIDAsIDAuMik7XFxufVxcblxcbi5yYWluYm93LWJvcmRlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDAwO1xcbiAgYm9yZGVyLWltYWdlOiBsaW5lYXItZ3JhZGllbnQodG8gcmlnaHQsIHJlZCwgI2ZmYTYwMCwgeWVsbG93LCBsaW1lLCBhcXVhLCBibHVlLCBmdWNoc2lhLCByZWQpIDE7XFxuICBib3JkZXItc3R5bGU6IHNvbGlkO1xcbiAgYm9yZGVyLXdpZHRoOiA0cHg7XFxuICBwYWRkaW5nOiAycmVtO1xcbn1cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107IC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblxuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IFwiXCI7XG4gICAgICB2YXIgbmVlZExheWVyID0gdHlwZW9mIGl0ZW1bNV0gIT09IFwidW5kZWZpbmVkXCI7XG5cbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIik7XG4gICAgICB9XG5cbiAgICAgIGNvbnRlbnQgKz0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKTtcblxuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKFwiXCIpO1xuICB9OyAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuXG5cbiAgbGlzdC5pID0gZnVuY3Rpb24gaShtb2R1bGVzLCBtZWRpYSwgZGVkdXBlLCBzdXBwb3J0cywgbGF5ZXIpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIHVuZGVmaW5lZF1dO1xuICAgIH1cblxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG5cbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBrID0gMDsgayA8IHRoaXMubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgdmFyIGlkID0gdGhpc1trXVswXTtcblxuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIF9rID0gMDsgX2sgPCBtb2R1bGVzLmxlbmd0aDsgX2srKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfa10pO1xuXG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgbGF5ZXIgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpdGVtWzVdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChtZWRpYSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChzdXBwb3J0cykge1xuICAgICAgICBpZiAoIWl0ZW1bNF0pIHtcbiAgICAgICAgICBpdGVtWzRdID0gXCJcIi5jb25jYXQoc3VwcG9ydHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs0XSA9IHN1cHBvcnRzO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIGxpc3Q7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh1cmwsIG9wdGlvbnMpIHtcbiAgaWYgKCFvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgaWYgKCF1cmwpIHtcbiAgICByZXR1cm4gdXJsO1xuICB9XG5cbiAgdXJsID0gU3RyaW5nKHVybC5fX2VzTW9kdWxlID8gdXJsLmRlZmF1bHQgOiB1cmwpOyAvLyBJZiB1cmwgaXMgYWxyZWFkeSB3cmFwcGVkIGluIHF1b3RlcywgcmVtb3ZlIHRoZW1cblxuICBpZiAoL15bJ1wiXS4qWydcIl0kLy50ZXN0KHVybCkpIHtcbiAgICB1cmwgPSB1cmwuc2xpY2UoMSwgLTEpO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMuaGFzaCkge1xuICAgIHVybCArPSBvcHRpb25zLmhhc2g7XG4gIH0gLy8gU2hvdWxkIHVybCBiZSB3cmFwcGVkP1xuICAvLyBTZWUgaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzcy12YWx1ZXMtMy8jdXJsc1xuXG5cbiAgaWYgKC9bXCInKCkgXFx0XFxuXXwoJTIwKS8udGVzdCh1cmwpIHx8IG9wdGlvbnMubmVlZFF1b3Rlcykge1xuICAgIHJldHVybiBcIlxcXCJcIi5jb25jYXQodXJsLnJlcGxhY2UoL1wiL2csICdcXFxcXCInKS5yZXBsYWNlKC9cXG4vZywgXCJcXFxcblwiKSwgXCJcXFwiXCIpO1xuICB9XG5cbiAgcmV0dXJuIHVybDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgdmFyIGNvbnRlbnQgPSBpdGVtWzFdO1xuICB2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG5cbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cblxuICBpZiAodHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShjc3NNYXBwaW5nKSkpKTtcbiAgICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG4gICAgdmFyIHNvdXJjZVVSTHMgPSBjc3NNYXBwaW5nLnNvdXJjZXMubWFwKGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgIHJldHVybiBcIi8qIyBzb3VyY2VVUkw9XCIuY29uY2F0KGNzc01hcHBpbmcuc291cmNlUm9vdCB8fCBcIlwiKS5jb25jYXQoc291cmNlLCBcIiAqL1wiKTtcbiAgICB9KTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKFwiXFxuXCIpO1xuICB9XG5cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKFwiXFxuXCIpO1xufTsiLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUiA9IHR5cGVvZiBSZWZsZWN0ID09PSAnb2JqZWN0JyA/IFJlZmxlY3QgOiBudWxsXG52YXIgUmVmbGVjdEFwcGx5ID0gUiAmJiB0eXBlb2YgUi5hcHBseSA9PT0gJ2Z1bmN0aW9uJ1xuICA/IFIuYXBwbHlcbiAgOiBmdW5jdGlvbiBSZWZsZWN0QXBwbHkodGFyZ2V0LCByZWNlaXZlciwgYXJncykge1xuICAgIHJldHVybiBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHkuY2FsbCh0YXJnZXQsIHJlY2VpdmVyLCBhcmdzKTtcbiAgfVxuXG52YXIgUmVmbGVjdE93bktleXNcbmlmIChSICYmIHR5cGVvZiBSLm93bktleXMgPT09ICdmdW5jdGlvbicpIHtcbiAgUmVmbGVjdE93bktleXMgPSBSLm93bktleXNcbn0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICBSZWZsZWN0T3duS2V5cyA9IGZ1bmN0aW9uIFJlZmxlY3RPd25LZXlzKHRhcmdldCkge1xuICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0YXJnZXQpXG4gICAgICAuY29uY2F0KE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHModGFyZ2V0KSk7XG4gIH07XG59IGVsc2Uge1xuICBSZWZsZWN0T3duS2V5cyA9IGZ1bmN0aW9uIFJlZmxlY3RPd25LZXlzKHRhcmdldCkge1xuICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0YXJnZXQpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBQcm9jZXNzRW1pdFdhcm5pbmcod2FybmluZykge1xuICBpZiAoY29uc29sZSAmJiBjb25zb2xlLndhcm4pIGNvbnNvbGUud2Fybih3YXJuaW5nKTtcbn1cblxudmFyIE51bWJlcklzTmFOID0gTnVtYmVyLmlzTmFOIHx8IGZ1bmN0aW9uIE51bWJlcklzTmFOKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPT0gdmFsdWU7XG59XG5cbmZ1bmN0aW9uIEV2ZW50RW1pdHRlcigpIHtcbiAgRXZlbnRFbWl0dGVyLmluaXQuY2FsbCh0aGlzKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gRXZlbnRFbWl0dGVyO1xubW9kdWxlLmV4cG9ydHMub25jZSA9IG9uY2U7XG5cbi8vIEJhY2t3YXJkcy1jb21wYXQgd2l0aCBub2RlIDAuMTAueFxuRXZlbnRFbWl0dGVyLkV2ZW50RW1pdHRlciA9IEV2ZW50RW1pdHRlcjtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fZXZlbnRzID0gdW5kZWZpbmVkO1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fZXZlbnRzQ291bnQgPSAwO1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fbWF4TGlzdGVuZXJzID0gdW5kZWZpbmVkO1xuXG4vLyBCeSBkZWZhdWx0IEV2ZW50RW1pdHRlcnMgd2lsbCBwcmludCBhIHdhcm5pbmcgaWYgbW9yZSB0aGFuIDEwIGxpc3RlbmVycyBhcmVcbi8vIGFkZGVkIHRvIGl0LiBUaGlzIGlzIGEgdXNlZnVsIGRlZmF1bHQgd2hpY2ggaGVscHMgZmluZGluZyBtZW1vcnkgbGVha3MuXG52YXIgZGVmYXVsdE1heExpc3RlbmVycyA9IDEwO1xuXG5mdW5jdGlvbiBjaGVja0xpc3RlbmVyKGxpc3RlbmVyKSB7XG4gIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJsaXN0ZW5lclwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBGdW5jdGlvbi4gUmVjZWl2ZWQgdHlwZSAnICsgdHlwZW9mIGxpc3RlbmVyKTtcbiAgfVxufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoRXZlbnRFbWl0dGVyLCAnZGVmYXVsdE1heExpc3RlbmVycycsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZGVmYXVsdE1heExpc3RlbmVycztcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbihhcmcpIHtcbiAgICBpZiAodHlwZW9mIGFyZyAhPT0gJ251bWJlcicgfHwgYXJnIDwgMCB8fCBOdW1iZXJJc05hTihhcmcpKSB7XG4gICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVGhlIHZhbHVlIG9mIFwiZGVmYXVsdE1heExpc3RlbmVyc1wiIGlzIG91dCBvZiByYW5nZS4gSXQgbXVzdCBiZSBhIG5vbi1uZWdhdGl2ZSBudW1iZXIuIFJlY2VpdmVkICcgKyBhcmcgKyAnLicpO1xuICAgIH1cbiAgICBkZWZhdWx0TWF4TGlzdGVuZXJzID0gYXJnO1xuICB9XG59KTtcblxuRXZlbnRFbWl0dGVyLmluaXQgPSBmdW5jdGlvbigpIHtcblxuICBpZiAodGhpcy5fZXZlbnRzID09PSB1bmRlZmluZWQgfHxcbiAgICAgIHRoaXMuX2V2ZW50cyA9PT0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHRoaXMpLl9ldmVudHMpIHtcbiAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcbiAgfVxuXG4gIHRoaXMuX21heExpc3RlbmVycyA9IHRoaXMuX21heExpc3RlbmVycyB8fCB1bmRlZmluZWQ7XG59O1xuXG4vLyBPYnZpb3VzbHkgbm90IGFsbCBFbWl0dGVycyBzaG91bGQgYmUgbGltaXRlZCB0byAxMC4gVGhpcyBmdW5jdGlvbiBhbGxvd3Ncbi8vIHRoYXQgdG8gYmUgaW5jcmVhc2VkLiBTZXQgdG8gemVybyBmb3IgdW5saW1pdGVkLlxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5zZXRNYXhMaXN0ZW5lcnMgPSBmdW5jdGlvbiBzZXRNYXhMaXN0ZW5lcnMobikge1xuICBpZiAodHlwZW9mIG4gIT09ICdudW1iZXInIHx8IG4gPCAwIHx8IE51bWJlcklzTmFOKG4pKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RoZSB2YWx1ZSBvZiBcIm5cIiBpcyBvdXQgb2YgcmFuZ2UuIEl0IG11c3QgYmUgYSBub24tbmVnYXRpdmUgbnVtYmVyLiBSZWNlaXZlZCAnICsgbiArICcuJyk7XG4gIH1cbiAgdGhpcy5fbWF4TGlzdGVuZXJzID0gbjtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5mdW5jdGlvbiBfZ2V0TWF4TGlzdGVuZXJzKHRoYXQpIHtcbiAgaWYgKHRoYXQuX21heExpc3RlbmVycyA9PT0gdW5kZWZpbmVkKVxuICAgIHJldHVybiBFdmVudEVtaXR0ZXIuZGVmYXVsdE1heExpc3RlbmVycztcbiAgcmV0dXJuIHRoYXQuX21heExpc3RlbmVycztcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5nZXRNYXhMaXN0ZW5lcnMgPSBmdW5jdGlvbiBnZXRNYXhMaXN0ZW5lcnMoKSB7XG4gIHJldHVybiBfZ2V0TWF4TGlzdGVuZXJzKHRoaXMpO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24gZW1pdCh0eXBlKSB7XG4gIHZhciBhcmdzID0gW107XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSBhcmdzLnB1c2goYXJndW1lbnRzW2ldKTtcbiAgdmFyIGRvRXJyb3IgPSAodHlwZSA9PT0gJ2Vycm9yJyk7XG5cbiAgdmFyIGV2ZW50cyA9IHRoaXMuX2V2ZW50cztcbiAgaWYgKGV2ZW50cyAhPT0gdW5kZWZpbmVkKVxuICAgIGRvRXJyb3IgPSAoZG9FcnJvciAmJiBldmVudHMuZXJyb3IgPT09IHVuZGVmaW5lZCk7XG4gIGVsc2UgaWYgKCFkb0Vycm9yKVxuICAgIHJldHVybiBmYWxzZTtcblxuICAvLyBJZiB0aGVyZSBpcyBubyAnZXJyb3InIGV2ZW50IGxpc3RlbmVyIHRoZW4gdGhyb3cuXG4gIGlmIChkb0Vycm9yKSB7XG4gICAgdmFyIGVyO1xuICAgIGlmIChhcmdzLmxlbmd0aCA+IDApXG4gICAgICBlciA9IGFyZ3NbMF07XG4gICAgaWYgKGVyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgIC8vIE5vdGU6IFRoZSBjb21tZW50cyBvbiB0aGUgYHRocm93YCBsaW5lcyBhcmUgaW50ZW50aW9uYWwsIHRoZXkgc2hvd1xuICAgICAgLy8gdXAgaW4gTm9kZSdzIG91dHB1dCBpZiB0aGlzIHJlc3VsdHMgaW4gYW4gdW5oYW5kbGVkIGV4Y2VwdGlvbi5cbiAgICAgIHRocm93IGVyOyAvLyBVbmhhbmRsZWQgJ2Vycm9yJyBldmVudFxuICAgIH1cbiAgICAvLyBBdCBsZWFzdCBnaXZlIHNvbWUga2luZCBvZiBjb250ZXh0IHRvIHRoZSB1c2VyXG4gICAgdmFyIGVyciA9IG5ldyBFcnJvcignVW5oYW5kbGVkIGVycm9yLicgKyAoZXIgPyAnICgnICsgZXIubWVzc2FnZSArICcpJyA6ICcnKSk7XG4gICAgZXJyLmNvbnRleHQgPSBlcjtcbiAgICB0aHJvdyBlcnI7IC8vIFVuaGFuZGxlZCAnZXJyb3InIGV2ZW50XG4gIH1cblxuICB2YXIgaGFuZGxlciA9IGV2ZW50c1t0eXBlXTtcblxuICBpZiAoaGFuZGxlciA9PT0gdW5kZWZpbmVkKVxuICAgIHJldHVybiBmYWxzZTtcblxuICBpZiAodHlwZW9mIGhhbmRsZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICBSZWZsZWN0QXBwbHkoaGFuZGxlciwgdGhpcywgYXJncyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGxlbiA9IGhhbmRsZXIubGVuZ3RoO1xuICAgIHZhciBsaXN0ZW5lcnMgPSBhcnJheUNsb25lKGhhbmRsZXIsIGxlbik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSlcbiAgICAgIFJlZmxlY3RBcHBseShsaXN0ZW5lcnNbaV0sIHRoaXMsIGFyZ3MpO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG5mdW5jdGlvbiBfYWRkTGlzdGVuZXIodGFyZ2V0LCB0eXBlLCBsaXN0ZW5lciwgcHJlcGVuZCkge1xuICB2YXIgbTtcbiAgdmFyIGV2ZW50cztcbiAgdmFyIGV4aXN0aW5nO1xuXG4gIGNoZWNrTGlzdGVuZXIobGlzdGVuZXIpO1xuXG4gIGV2ZW50cyA9IHRhcmdldC5fZXZlbnRzO1xuICBpZiAoZXZlbnRzID09PSB1bmRlZmluZWQpIHtcbiAgICBldmVudHMgPSB0YXJnZXQuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdGFyZ2V0Ll9ldmVudHNDb3VudCA9IDA7XG4gIH0gZWxzZSB7XG4gICAgLy8gVG8gYXZvaWQgcmVjdXJzaW9uIGluIHRoZSBjYXNlIHRoYXQgdHlwZSA9PT0gXCJuZXdMaXN0ZW5lclwiISBCZWZvcmVcbiAgICAvLyBhZGRpbmcgaXQgdG8gdGhlIGxpc3RlbmVycywgZmlyc3QgZW1pdCBcIm5ld0xpc3RlbmVyXCIuXG4gICAgaWYgKGV2ZW50cy5uZXdMaXN0ZW5lciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0YXJnZXQuZW1pdCgnbmV3TGlzdGVuZXInLCB0eXBlLFxuICAgICAgICAgICAgICAgICAgbGlzdGVuZXIubGlzdGVuZXIgPyBsaXN0ZW5lci5saXN0ZW5lciA6IGxpc3RlbmVyKTtcblxuICAgICAgLy8gUmUtYXNzaWduIGBldmVudHNgIGJlY2F1c2UgYSBuZXdMaXN0ZW5lciBoYW5kbGVyIGNvdWxkIGhhdmUgY2F1c2VkIHRoZVxuICAgICAgLy8gdGhpcy5fZXZlbnRzIHRvIGJlIGFzc2lnbmVkIHRvIGEgbmV3IG9iamVjdFxuICAgICAgZXZlbnRzID0gdGFyZ2V0Ll9ldmVudHM7XG4gICAgfVxuICAgIGV4aXN0aW5nID0gZXZlbnRzW3R5cGVdO1xuICB9XG5cbiAgaWYgKGV4aXN0aW5nID09PSB1bmRlZmluZWQpIHtcbiAgICAvLyBPcHRpbWl6ZSB0aGUgY2FzZSBvZiBvbmUgbGlzdGVuZXIuIERvbid0IG5lZWQgdGhlIGV4dHJhIGFycmF5IG9iamVjdC5cbiAgICBleGlzdGluZyA9IGV2ZW50c1t0eXBlXSA9IGxpc3RlbmVyO1xuICAgICsrdGFyZ2V0Ll9ldmVudHNDb3VudDtcbiAgfSBlbHNlIHtcbiAgICBpZiAodHlwZW9mIGV4aXN0aW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAvLyBBZGRpbmcgdGhlIHNlY29uZCBlbGVtZW50LCBuZWVkIHRvIGNoYW5nZSB0byBhcnJheS5cbiAgICAgIGV4aXN0aW5nID0gZXZlbnRzW3R5cGVdID1cbiAgICAgICAgcHJlcGVuZCA/IFtsaXN0ZW5lciwgZXhpc3RpbmddIDogW2V4aXN0aW5nLCBsaXN0ZW5lcl07XG4gICAgICAvLyBJZiB3ZSd2ZSBhbHJlYWR5IGdvdCBhbiBhcnJheSwganVzdCBhcHBlbmQuXG4gICAgfSBlbHNlIGlmIChwcmVwZW5kKSB7XG4gICAgICBleGlzdGluZy51bnNoaWZ0KGxpc3RlbmVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZXhpc3RpbmcucHVzaChsaXN0ZW5lcik7XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgZm9yIGxpc3RlbmVyIGxlYWtcbiAgICBtID0gX2dldE1heExpc3RlbmVycyh0YXJnZXQpO1xuICAgIGlmIChtID4gMCAmJiBleGlzdGluZy5sZW5ndGggPiBtICYmICFleGlzdGluZy53YXJuZWQpIHtcbiAgICAgIGV4aXN0aW5nLndhcm5lZCA9IHRydWU7XG4gICAgICAvLyBObyBlcnJvciBjb2RlIGZvciB0aGlzIHNpbmNlIGl0IGlzIGEgV2FybmluZ1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4XG4gICAgICB2YXIgdyA9IG5ldyBFcnJvcignUG9zc2libGUgRXZlbnRFbWl0dGVyIG1lbW9yeSBsZWFrIGRldGVjdGVkLiAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZXhpc3RpbmcubGVuZ3RoICsgJyAnICsgU3RyaW5nKHR5cGUpICsgJyBsaXN0ZW5lcnMgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdhZGRlZC4gVXNlIGVtaXR0ZXIuc2V0TWF4TGlzdGVuZXJzKCkgdG8gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdpbmNyZWFzZSBsaW1pdCcpO1xuICAgICAgdy5uYW1lID0gJ01heExpc3RlbmVyc0V4Y2VlZGVkV2FybmluZyc7XG4gICAgICB3LmVtaXR0ZXIgPSB0YXJnZXQ7XG4gICAgICB3LnR5cGUgPSB0eXBlO1xuICAgICAgdy5jb3VudCA9IGV4aXN0aW5nLmxlbmd0aDtcbiAgICAgIFByb2Nlc3NFbWl0V2FybmluZyh3KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmFkZExpc3RlbmVyID0gZnVuY3Rpb24gYWRkTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgcmV0dXJuIF9hZGRMaXN0ZW5lcih0aGlzLCB0eXBlLCBsaXN0ZW5lciwgZmFsc2UpO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbiA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGUuYWRkTGlzdGVuZXI7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucHJlcGVuZExpc3RlbmVyID1cbiAgICBmdW5jdGlvbiBwcmVwZW5kTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgIHJldHVybiBfYWRkTGlzdGVuZXIodGhpcywgdHlwZSwgbGlzdGVuZXIsIHRydWUpO1xuICAgIH07XG5cbmZ1bmN0aW9uIG9uY2VXcmFwcGVyKCkge1xuICBpZiAoIXRoaXMuZmlyZWQpIHtcbiAgICB0aGlzLnRhcmdldC5yZW1vdmVMaXN0ZW5lcih0aGlzLnR5cGUsIHRoaXMud3JhcEZuKTtcbiAgICB0aGlzLmZpcmVkID0gdHJ1ZTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMClcbiAgICAgIHJldHVybiB0aGlzLmxpc3RlbmVyLmNhbGwodGhpcy50YXJnZXQpO1xuICAgIHJldHVybiB0aGlzLmxpc3RlbmVyLmFwcGx5KHRoaXMudGFyZ2V0LCBhcmd1bWVudHMpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9vbmNlV3JhcCh0YXJnZXQsIHR5cGUsIGxpc3RlbmVyKSB7XG4gIHZhciBzdGF0ZSA9IHsgZmlyZWQ6IGZhbHNlLCB3cmFwRm46IHVuZGVmaW5lZCwgdGFyZ2V0OiB0YXJnZXQsIHR5cGU6IHR5cGUsIGxpc3RlbmVyOiBsaXN0ZW5lciB9O1xuICB2YXIgd3JhcHBlZCA9IG9uY2VXcmFwcGVyLmJpbmQoc3RhdGUpO1xuICB3cmFwcGVkLmxpc3RlbmVyID0gbGlzdGVuZXI7XG4gIHN0YXRlLndyYXBGbiA9IHdyYXBwZWQ7XG4gIHJldHVybiB3cmFwcGVkO1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uY2UgPSBmdW5jdGlvbiBvbmNlKHR5cGUsIGxpc3RlbmVyKSB7XG4gIGNoZWNrTGlzdGVuZXIobGlzdGVuZXIpO1xuICB0aGlzLm9uKHR5cGUsIF9vbmNlV3JhcCh0aGlzLCB0eXBlLCBsaXN0ZW5lcikpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucHJlcGVuZE9uY2VMaXN0ZW5lciA9XG4gICAgZnVuY3Rpb24gcHJlcGVuZE9uY2VMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikge1xuICAgICAgY2hlY2tMaXN0ZW5lcihsaXN0ZW5lcik7XG4gICAgICB0aGlzLnByZXBlbmRMaXN0ZW5lcih0eXBlLCBfb25jZVdyYXAodGhpcywgdHlwZSwgbGlzdGVuZXIpKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbi8vIEVtaXRzIGEgJ3JlbW92ZUxpc3RlbmVyJyBldmVudCBpZiBhbmQgb25seSBpZiB0aGUgbGlzdGVuZXIgd2FzIHJlbW92ZWQuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyID1cbiAgICBmdW5jdGlvbiByZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikge1xuICAgICAgdmFyIGxpc3QsIGV2ZW50cywgcG9zaXRpb24sIGksIG9yaWdpbmFsTGlzdGVuZXI7XG5cbiAgICAgIGNoZWNrTGlzdGVuZXIobGlzdGVuZXIpO1xuXG4gICAgICBldmVudHMgPSB0aGlzLl9ldmVudHM7XG4gICAgICBpZiAoZXZlbnRzID09PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICBsaXN0ID0gZXZlbnRzW3R5cGVdO1xuICAgICAgaWYgKGxpc3QgPT09IHVuZGVmaW5lZClcbiAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgIGlmIChsaXN0ID09PSBsaXN0ZW5lciB8fCBsaXN0Lmxpc3RlbmVyID09PSBsaXN0ZW5lcikge1xuICAgICAgICBpZiAoLS10aGlzLl9ldmVudHNDb3VudCA9PT0gMClcbiAgICAgICAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBkZWxldGUgZXZlbnRzW3R5cGVdO1xuICAgICAgICAgIGlmIChldmVudHMucmVtb3ZlTGlzdGVuZXIpXG4gICAgICAgICAgICB0aGlzLmVtaXQoJ3JlbW92ZUxpc3RlbmVyJywgdHlwZSwgbGlzdC5saXN0ZW5lciB8fCBsaXN0ZW5lcik7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGxpc3QgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcG9zaXRpb24gPSAtMTtcblxuICAgICAgICBmb3IgKGkgPSBsaXN0Lmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgaWYgKGxpc3RbaV0gPT09IGxpc3RlbmVyIHx8IGxpc3RbaV0ubGlzdGVuZXIgPT09IGxpc3RlbmVyKSB7XG4gICAgICAgICAgICBvcmlnaW5hbExpc3RlbmVyID0gbGlzdFtpXS5saXN0ZW5lcjtcbiAgICAgICAgICAgIHBvc2l0aW9uID0gaTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwb3NpdGlvbiA8IDApXG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgICAgaWYgKHBvc2l0aW9uID09PSAwKVxuICAgICAgICAgIGxpc3Quc2hpZnQoKTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgc3BsaWNlT25lKGxpc3QsIHBvc2l0aW9uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChsaXN0Lmxlbmd0aCA9PT0gMSlcbiAgICAgICAgICBldmVudHNbdHlwZV0gPSBsaXN0WzBdO1xuXG4gICAgICAgIGlmIChldmVudHMucmVtb3ZlTGlzdGVuZXIgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICB0aGlzLmVtaXQoJ3JlbW92ZUxpc3RlbmVyJywgdHlwZSwgb3JpZ2luYWxMaXN0ZW5lciB8fCBsaXN0ZW5lcik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub2ZmID0gRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lcjtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnMgPVxuICAgIGZ1bmN0aW9uIHJlbW92ZUFsbExpc3RlbmVycyh0eXBlKSB7XG4gICAgICB2YXIgbGlzdGVuZXJzLCBldmVudHMsIGk7XG5cbiAgICAgIGV2ZW50cyA9IHRoaXMuX2V2ZW50cztcbiAgICAgIGlmIChldmVudHMgPT09IHVuZGVmaW5lZClcbiAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgIC8vIG5vdCBsaXN0ZW5pbmcgZm9yIHJlbW92ZUxpc3RlbmVyLCBubyBuZWVkIHRvIGVtaXRcbiAgICAgIGlmIChldmVudHMucmVtb3ZlTGlzdGVuZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIHRoaXMuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgICAgdGhpcy5fZXZlbnRzQ291bnQgPSAwO1xuICAgICAgICB9IGVsc2UgaWYgKGV2ZW50c1t0eXBlXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgaWYgKC0tdGhpcy5fZXZlbnRzQ291bnQgPT09IDApXG4gICAgICAgICAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIGRlbGV0ZSBldmVudHNbdHlwZV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIC8vIGVtaXQgcmVtb3ZlTGlzdGVuZXIgZm9yIGFsbCBsaXN0ZW5lcnMgb24gYWxsIGV2ZW50c1xuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhldmVudHMpO1xuICAgICAgICB2YXIga2V5O1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgIGtleSA9IGtleXNbaV07XG4gICAgICAgICAgaWYgKGtleSA9PT0gJ3JlbW92ZUxpc3RlbmVyJykgY29udGludWU7XG4gICAgICAgICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoa2V5KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycygncmVtb3ZlTGlzdGVuZXInKTtcbiAgICAgICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgdGhpcy5fZXZlbnRzQ291bnQgPSAwO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgbGlzdGVuZXJzID0gZXZlbnRzW3R5cGVdO1xuXG4gICAgICBpZiAodHlwZW9mIGxpc3RlbmVycyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVycyk7XG4gICAgICB9IGVsc2UgaWYgKGxpc3RlbmVycyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIC8vIExJRk8gb3JkZXJcbiAgICAgICAgZm9yIChpID0gbGlzdGVuZXJzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcnNbaV0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbmZ1bmN0aW9uIF9saXN0ZW5lcnModGFyZ2V0LCB0eXBlLCB1bndyYXApIHtcbiAgdmFyIGV2ZW50cyA9IHRhcmdldC5fZXZlbnRzO1xuXG4gIGlmIChldmVudHMgPT09IHVuZGVmaW5lZClcbiAgICByZXR1cm4gW107XG5cbiAgdmFyIGV2bGlzdGVuZXIgPSBldmVudHNbdHlwZV07XG4gIGlmIChldmxpc3RlbmVyID09PSB1bmRlZmluZWQpXG4gICAgcmV0dXJuIFtdO1xuXG4gIGlmICh0eXBlb2YgZXZsaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJylcbiAgICByZXR1cm4gdW53cmFwID8gW2V2bGlzdGVuZXIubGlzdGVuZXIgfHwgZXZsaXN0ZW5lcl0gOiBbZXZsaXN0ZW5lcl07XG5cbiAgcmV0dXJuIHVud3JhcCA/XG4gICAgdW53cmFwTGlzdGVuZXJzKGV2bGlzdGVuZXIpIDogYXJyYXlDbG9uZShldmxpc3RlbmVyLCBldmxpc3RlbmVyLmxlbmd0aCk7XG59XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJzID0gZnVuY3Rpb24gbGlzdGVuZXJzKHR5cGUpIHtcbiAgcmV0dXJuIF9saXN0ZW5lcnModGhpcywgdHlwZSwgdHJ1ZSk7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJhd0xpc3RlbmVycyA9IGZ1bmN0aW9uIHJhd0xpc3RlbmVycyh0eXBlKSB7XG4gIHJldHVybiBfbGlzdGVuZXJzKHRoaXMsIHR5cGUsIGZhbHNlKTtcbn07XG5cbkV2ZW50RW1pdHRlci5saXN0ZW5lckNvdW50ID0gZnVuY3Rpb24oZW1pdHRlciwgdHlwZSkge1xuICBpZiAodHlwZW9mIGVtaXR0ZXIubGlzdGVuZXJDb3VudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBlbWl0dGVyLmxpc3RlbmVyQ291bnQodHlwZSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGxpc3RlbmVyQ291bnQuY2FsbChlbWl0dGVyLCB0eXBlKTtcbiAgfVxufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lckNvdW50ID0gbGlzdGVuZXJDb3VudDtcbmZ1bmN0aW9uIGxpc3RlbmVyQ291bnQodHlwZSkge1xuICB2YXIgZXZlbnRzID0gdGhpcy5fZXZlbnRzO1xuXG4gIGlmIChldmVudHMgIT09IHVuZGVmaW5lZCkge1xuICAgIHZhciBldmxpc3RlbmVyID0gZXZlbnRzW3R5cGVdO1xuXG4gICAgaWYgKHR5cGVvZiBldmxpc3RlbmVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9IGVsc2UgaWYgKGV2bGlzdGVuZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGV2bGlzdGVuZXIubGVuZ3RoO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiAwO1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmV2ZW50TmFtZXMgPSBmdW5jdGlvbiBldmVudE5hbWVzKCkge1xuICByZXR1cm4gdGhpcy5fZXZlbnRzQ291bnQgPiAwID8gUmVmbGVjdE93bktleXModGhpcy5fZXZlbnRzKSA6IFtdO1xufTtcblxuZnVuY3Rpb24gYXJyYXlDbG9uZShhcnIsIG4pIHtcbiAgdmFyIGNvcHkgPSBuZXcgQXJyYXkobik7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbjsgKytpKVxuICAgIGNvcHlbaV0gPSBhcnJbaV07XG4gIHJldHVybiBjb3B5O1xufVxuXG5mdW5jdGlvbiBzcGxpY2VPbmUobGlzdCwgaW5kZXgpIHtcbiAgZm9yICg7IGluZGV4ICsgMSA8IGxpc3QubGVuZ3RoOyBpbmRleCsrKVxuICAgIGxpc3RbaW5kZXhdID0gbGlzdFtpbmRleCArIDFdO1xuICBsaXN0LnBvcCgpO1xufVxuXG5mdW5jdGlvbiB1bndyYXBMaXN0ZW5lcnMoYXJyKSB7XG4gIHZhciByZXQgPSBuZXcgQXJyYXkoYXJyLmxlbmd0aCk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcmV0Lmxlbmd0aDsgKytpKSB7XG4gICAgcmV0W2ldID0gYXJyW2ldLmxpc3RlbmVyIHx8IGFycltpXTtcbiAgfVxuICByZXR1cm4gcmV0O1xufVxuXG5mdW5jdGlvbiBvbmNlKGVtaXR0ZXIsIG5hbWUpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICBmdW5jdGlvbiBlcnJvckxpc3RlbmVyKGVycikge1xuICAgICAgZW1pdHRlci5yZW1vdmVMaXN0ZW5lcihuYW1lLCByZXNvbHZlcik7XG4gICAgICByZWplY3QoZXJyKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZXNvbHZlcigpIHtcbiAgICAgIGlmICh0eXBlb2YgZW1pdHRlci5yZW1vdmVMaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBlbWl0dGVyLnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIGVycm9yTGlzdGVuZXIpO1xuICAgICAgfVxuICAgICAgcmVzb2x2ZShbXS5zbGljZS5jYWxsKGFyZ3VtZW50cykpO1xuICAgIH07XG5cbiAgICBldmVudFRhcmdldEFnbm9zdGljQWRkTGlzdGVuZXIoZW1pdHRlciwgbmFtZSwgcmVzb2x2ZXIsIHsgb25jZTogdHJ1ZSB9KTtcbiAgICBpZiAobmFtZSAhPT0gJ2Vycm9yJykge1xuICAgICAgYWRkRXJyb3JIYW5kbGVySWZFdmVudEVtaXR0ZXIoZW1pdHRlciwgZXJyb3JMaXN0ZW5lciwgeyBvbmNlOiB0cnVlIH0pO1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGFkZEVycm9ySGFuZGxlcklmRXZlbnRFbWl0dGVyKGVtaXR0ZXIsIGhhbmRsZXIsIGZsYWdzKSB7XG4gIGlmICh0eXBlb2YgZW1pdHRlci5vbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGV2ZW50VGFyZ2V0QWdub3N0aWNBZGRMaXN0ZW5lcihlbWl0dGVyLCAnZXJyb3InLCBoYW5kbGVyLCBmbGFncyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZXZlbnRUYXJnZXRBZ25vc3RpY0FkZExpc3RlbmVyKGVtaXR0ZXIsIG5hbWUsIGxpc3RlbmVyLCBmbGFncykge1xuICBpZiAodHlwZW9mIGVtaXR0ZXIub24gPT09ICdmdW5jdGlvbicpIHtcbiAgICBpZiAoZmxhZ3Mub25jZSkge1xuICAgICAgZW1pdHRlci5vbmNlKG5hbWUsIGxpc3RlbmVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZW1pdHRlci5vbihuYW1lLCBsaXN0ZW5lcik7XG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiBlbWl0dGVyLmFkZEV2ZW50TGlzdGVuZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAvLyBFdmVudFRhcmdldCBkb2VzIG5vdCBoYXZlIGBlcnJvcmAgZXZlbnQgc2VtYW50aWNzIGxpa2UgTm9kZVxuICAgIC8vIEV2ZW50RW1pdHRlcnMsIHdlIGRvIG5vdCBsaXN0ZW4gZm9yIGBlcnJvcmAgZXZlbnRzIGhlcmUuXG4gICAgZW1pdHRlci5hZGRFdmVudExpc3RlbmVyKG5hbWUsIGZ1bmN0aW9uIHdyYXBMaXN0ZW5lcihhcmcpIHtcbiAgICAgIC8vIElFIGRvZXMgbm90IGhhdmUgYnVpbHRpbiBgeyBvbmNlOiB0cnVlIH1gIHN1cHBvcnQgc28gd2VcbiAgICAgIC8vIGhhdmUgdG8gZG8gaXQgbWFudWFsbHkuXG4gICAgICBpZiAoZmxhZ3Mub25jZSkge1xuICAgICAgICBlbWl0dGVyLnJlbW92ZUV2ZW50TGlzdGVuZXIobmFtZSwgd3JhcExpc3RlbmVyKTtcbiAgICAgIH1cbiAgICAgIGxpc3RlbmVyKGFyZyk7XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwiZW1pdHRlclwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBFdmVudEVtaXR0ZXIuIFJlY2VpdmVkIHR5cGUgJyArIHR5cGVvZiBlbWl0dGVyKTtcbiAgfVxufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19hc3NpZ24gPSAodGhpcyAmJiB0aGlzLl9fYXNzaWduKSB8fCBmdW5jdGlvbiAoKSB7XG4gICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xuICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKVxuICAgICAgICAgICAgICAgIHRbcF0gPSBzW3BdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0O1xuICAgIH07XG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIG5hbWVkX3JlZmVyZW5jZXNfMSA9IHJlcXVpcmUoXCIuL25hbWVkLXJlZmVyZW5jZXNcIik7XG52YXIgbnVtZXJpY191bmljb2RlX21hcF8xID0gcmVxdWlyZShcIi4vbnVtZXJpYy11bmljb2RlLW1hcFwiKTtcbnZhciBzdXJyb2dhdGVfcGFpcnNfMSA9IHJlcXVpcmUoXCIuL3N1cnJvZ2F0ZS1wYWlyc1wiKTtcbnZhciBhbGxOYW1lZFJlZmVyZW5jZXMgPSBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgbmFtZWRfcmVmZXJlbmNlc18xLm5hbWVkUmVmZXJlbmNlcyksIHsgYWxsOiBuYW1lZF9yZWZlcmVuY2VzXzEubmFtZWRSZWZlcmVuY2VzLmh0bWw1IH0pO1xudmFyIGVuY29kZVJlZ0V4cHMgPSB7XG4gICAgc3BlY2lhbENoYXJzOiAvWzw+J1wiJl0vZyxcbiAgICBub25Bc2NpaTogLyg/Ols8PidcIiZcXHUwMDgwLVxcdUQ3RkZcXHVFMDAwLVxcdUZGRkZdfFtcXHVEODAwLVxcdURCRkZdW1xcdURDMDAtXFx1REZGRl18W1xcdUQ4MDAtXFx1REJGRl0oPyFbXFx1REMwMC1cXHVERkZGXSl8KD86W15cXHVEODAwLVxcdURCRkZdfF4pW1xcdURDMDAtXFx1REZGRl0pL2csXG4gICAgbm9uQXNjaWlQcmludGFibGU6IC8oPzpbPD4nXCImXFx4MDEtXFx4MDhcXHgxMS1cXHgxNVxceDE3LVxceDFGXFx4N2YtXFx1RDdGRlxcdUUwMDAtXFx1RkZGRl18W1xcdUQ4MDAtXFx1REJGRl1bXFx1REMwMC1cXHVERkZGXXxbXFx1RDgwMC1cXHVEQkZGXSg/IVtcXHVEQzAwLVxcdURGRkZdKXwoPzpbXlxcdUQ4MDAtXFx1REJGRl18XilbXFx1REMwMC1cXHVERkZGXSkvZyxcbiAgICBleHRlbnNpdmU6IC8oPzpbXFx4MDEtXFx4MGNcXHgwZS1cXHgxZlxceDIxLVxceDJjXFx4MmUtXFx4MmZcXHgzYS1cXHg0MFxceDViLVxceDYwXFx4N2ItXFx4N2RcXHg3Zi1cXHVEN0ZGXFx1RTAwMC1cXHVGRkZGXXxbXFx1RDgwMC1cXHVEQkZGXVtcXHVEQzAwLVxcdURGRkZdfFtcXHVEODAwLVxcdURCRkZdKD8hW1xcdURDMDAtXFx1REZGRl0pfCg/OlteXFx1RDgwMC1cXHVEQkZGXXxeKVtcXHVEQzAwLVxcdURGRkZdKS9nXG59O1xudmFyIGRlZmF1bHRFbmNvZGVPcHRpb25zID0ge1xuICAgIG1vZGU6ICdzcGVjaWFsQ2hhcnMnLFxuICAgIGxldmVsOiAnYWxsJyxcbiAgICBudW1lcmljOiAnZGVjaW1hbCdcbn07XG4vKiogRW5jb2RlcyBhbGwgdGhlIG5lY2Vzc2FyeSAoc3BlY2lmaWVkIGJ5IGBsZXZlbGApIGNoYXJhY3RlcnMgaW4gdGhlIHRleHQgKi9cbmZ1bmN0aW9uIGVuY29kZSh0ZXh0LCBfYSkge1xuICAgIHZhciBfYiA9IF9hID09PSB2b2lkIDAgPyBkZWZhdWx0RW5jb2RlT3B0aW9ucyA6IF9hLCBfYyA9IF9iLm1vZGUsIG1vZGUgPSBfYyA9PT0gdm9pZCAwID8gJ3NwZWNpYWxDaGFycycgOiBfYywgX2QgPSBfYi5udW1lcmljLCBudW1lcmljID0gX2QgPT09IHZvaWQgMCA/ICdkZWNpbWFsJyA6IF9kLCBfZSA9IF9iLmxldmVsLCBsZXZlbCA9IF9lID09PSB2b2lkIDAgPyAnYWxsJyA6IF9lO1xuICAgIGlmICghdGV4dCkge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgfVxuICAgIHZhciBlbmNvZGVSZWdFeHAgPSBlbmNvZGVSZWdFeHBzW21vZGVdO1xuICAgIHZhciByZWZlcmVuY2VzID0gYWxsTmFtZWRSZWZlcmVuY2VzW2xldmVsXS5jaGFyYWN0ZXJzO1xuICAgIHZhciBpc0hleCA9IG51bWVyaWMgPT09ICdoZXhhZGVjaW1hbCc7XG4gICAgZW5jb2RlUmVnRXhwLmxhc3RJbmRleCA9IDA7XG4gICAgdmFyIF9iID0gZW5jb2RlUmVnRXhwLmV4ZWModGV4dCk7XG4gICAgdmFyIF9jO1xuICAgIGlmIChfYikge1xuICAgICAgICBfYyA9ICcnO1xuICAgICAgICB2YXIgX2QgPSAwO1xuICAgICAgICBkbyB7XG4gICAgICAgICAgICBpZiAoX2QgIT09IF9iLmluZGV4KSB7XG4gICAgICAgICAgICAgICAgX2MgKz0gdGV4dC5zdWJzdHJpbmcoX2QsIF9iLmluZGV4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBfZSA9IF9iWzBdO1xuICAgICAgICAgICAgdmFyIHJlc3VsdF8xID0gcmVmZXJlbmNlc1tfZV07XG4gICAgICAgICAgICBpZiAoIXJlc3VsdF8xKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNvZGVfMSA9IF9lLmxlbmd0aCA+IDEgPyBzdXJyb2dhdGVfcGFpcnNfMS5nZXRDb2RlUG9pbnQoX2UsIDApIDogX2UuY2hhckNvZGVBdCgwKTtcbiAgICAgICAgICAgICAgICByZXN1bHRfMSA9IChpc0hleCA/ICcmI3gnICsgY29kZV8xLnRvU3RyaW5nKDE2KSA6ICcmIycgKyBjb2RlXzEpICsgJzsnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgX2MgKz0gcmVzdWx0XzE7XG4gICAgICAgICAgICBfZCA9IF9iLmluZGV4ICsgX2UubGVuZ3RoO1xuICAgICAgICB9IHdoaWxlICgoX2IgPSBlbmNvZGVSZWdFeHAuZXhlYyh0ZXh0KSkpO1xuICAgICAgICBpZiAoX2QgIT09IHRleHQubGVuZ3RoKSB7XG4gICAgICAgICAgICBfYyArPSB0ZXh0LnN1YnN0cmluZyhfZCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIF9jID1cbiAgICAgICAgICAgIHRleHQ7XG4gICAgfVxuICAgIHJldHVybiBfYztcbn1cbmV4cG9ydHMuZW5jb2RlID0gZW5jb2RlO1xudmFyIGRlZmF1bHREZWNvZGVPcHRpb25zID0ge1xuICAgIHNjb3BlOiAnYm9keScsXG4gICAgbGV2ZWw6ICdhbGwnXG59O1xudmFyIHN0cmljdCA9IC8mKD86I1xcZCt8I1t4WF1bXFxkYS1mQS1GXSt8WzAtOWEtekEtWl0rKTsvZztcbnZhciBhdHRyaWJ1dGUgPSAvJig/OiNcXGQrfCNbeFhdW1xcZGEtZkEtRl0rfFswLTlhLXpBLVpdKylbOz1dPy9nO1xudmFyIGJhc2VEZWNvZGVSZWdFeHBzID0ge1xuICAgIHhtbDoge1xuICAgICAgICBzdHJpY3Q6IHN0cmljdCxcbiAgICAgICAgYXR0cmlidXRlOiBhdHRyaWJ1dGUsXG4gICAgICAgIGJvZHk6IG5hbWVkX3JlZmVyZW5jZXNfMS5ib2R5UmVnRXhwcy54bWxcbiAgICB9LFxuICAgIGh0bWw0OiB7XG4gICAgICAgIHN0cmljdDogc3RyaWN0LFxuICAgICAgICBhdHRyaWJ1dGU6IGF0dHJpYnV0ZSxcbiAgICAgICAgYm9keTogbmFtZWRfcmVmZXJlbmNlc18xLmJvZHlSZWdFeHBzLmh0bWw0XG4gICAgfSxcbiAgICBodG1sNToge1xuICAgICAgICBzdHJpY3Q6IHN0cmljdCxcbiAgICAgICAgYXR0cmlidXRlOiBhdHRyaWJ1dGUsXG4gICAgICAgIGJvZHk6IG5hbWVkX3JlZmVyZW5jZXNfMS5ib2R5UmVnRXhwcy5odG1sNVxuICAgIH1cbn07XG52YXIgZGVjb2RlUmVnRXhwcyA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCBiYXNlRGVjb2RlUmVnRXhwcyksIHsgYWxsOiBiYXNlRGVjb2RlUmVnRXhwcy5odG1sNSB9KTtcbnZhciBmcm9tQ2hhckNvZGUgPSBTdHJpbmcuZnJvbUNoYXJDb2RlO1xudmFyIG91dE9mQm91bmRzQ2hhciA9IGZyb21DaGFyQ29kZSg2NTUzMyk7XG52YXIgZGVmYXVsdERlY29kZUVudGl0eU9wdGlvbnMgPSB7XG4gICAgbGV2ZWw6ICdhbGwnXG59O1xuLyoqIERlY29kZXMgYSBzaW5nbGUgZW50aXR5ICovXG5mdW5jdGlvbiBkZWNvZGVFbnRpdHkoZW50aXR5LCBfYSkge1xuICAgIHZhciBfYiA9IChfYSA9PT0gdm9pZCAwID8gZGVmYXVsdERlY29kZUVudGl0eU9wdGlvbnMgOiBfYSkubGV2ZWwsIGxldmVsID0gX2IgPT09IHZvaWQgMCA/ICdhbGwnIDogX2I7XG4gICAgaWYgKCFlbnRpdHkpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgICB2YXIgX2IgPSBlbnRpdHk7XG4gICAgdmFyIGRlY29kZUVudGl0eUxhc3RDaGFyXzEgPSBlbnRpdHlbZW50aXR5Lmxlbmd0aCAtIDFdO1xuICAgIGlmIChmYWxzZVxuICAgICAgICAmJiBkZWNvZGVFbnRpdHlMYXN0Q2hhcl8xID09PSAnPScpIHtcbiAgICAgICAgX2IgPVxuICAgICAgICAgICAgZW50aXR5O1xuICAgIH1cbiAgICBlbHNlIGlmIChmYWxzZVxuICAgICAgICAmJiBkZWNvZGVFbnRpdHlMYXN0Q2hhcl8xICE9PSAnOycpIHtcbiAgICAgICAgX2IgPVxuICAgICAgICAgICAgZW50aXR5O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdmFyIGRlY29kZVJlc3VsdEJ5UmVmZXJlbmNlXzEgPSBhbGxOYW1lZFJlZmVyZW5jZXNbbGV2ZWxdLmVudGl0aWVzW2VudGl0eV07XG4gICAgICAgIGlmIChkZWNvZGVSZXN1bHRCeVJlZmVyZW5jZV8xKSB7XG4gICAgICAgICAgICBfYiA9IGRlY29kZVJlc3VsdEJ5UmVmZXJlbmNlXzE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZW50aXR5WzBdID09PSAnJicgJiYgZW50aXR5WzFdID09PSAnIycpIHtcbiAgICAgICAgICAgIHZhciBkZWNvZGVTZWNvbmRDaGFyXzEgPSBlbnRpdHlbMl07XG4gICAgICAgICAgICB2YXIgZGVjb2RlQ29kZV8xID0gZGVjb2RlU2Vjb25kQ2hhcl8xID09ICd4JyB8fCBkZWNvZGVTZWNvbmRDaGFyXzEgPT0gJ1gnXG4gICAgICAgICAgICAgICAgPyBwYXJzZUludChlbnRpdHkuc3Vic3RyKDMpLCAxNilcbiAgICAgICAgICAgICAgICA6IHBhcnNlSW50KGVudGl0eS5zdWJzdHIoMikpO1xuICAgICAgICAgICAgX2IgPVxuICAgICAgICAgICAgICAgIGRlY29kZUNvZGVfMSA+PSAweDEwZmZmZlxuICAgICAgICAgICAgICAgICAgICA/IG91dE9mQm91bmRzQ2hhclxuICAgICAgICAgICAgICAgICAgICA6IGRlY29kZUNvZGVfMSA+IDY1NTM1XG4gICAgICAgICAgICAgICAgICAgICAgICA/IHN1cnJvZ2F0ZV9wYWlyc18xLmZyb21Db2RlUG9pbnQoZGVjb2RlQ29kZV8xKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBmcm9tQ2hhckNvZGUobnVtZXJpY191bmljb2RlX21hcF8xLm51bWVyaWNVbmljb2RlTWFwW2RlY29kZUNvZGVfMV0gfHwgZGVjb2RlQ29kZV8xKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gX2I7XG59XG5leHBvcnRzLmRlY29kZUVudGl0eSA9IGRlY29kZUVudGl0eTtcbi8qKiBEZWNvZGVzIGFsbCBlbnRpdGllcyBpbiB0aGUgdGV4dCAqL1xuZnVuY3Rpb24gZGVjb2RlKHRleHQsIF9hKSB7XG4gICAgdmFyIGRlY29kZVNlY29uZENoYXJfMSA9IF9hID09PSB2b2lkIDAgPyBkZWZhdWx0RGVjb2RlT3B0aW9ucyA6IF9hLCBkZWNvZGVDb2RlXzEgPSBkZWNvZGVTZWNvbmRDaGFyXzEubGV2ZWwsIGxldmVsID0gZGVjb2RlQ29kZV8xID09PSB2b2lkIDAgPyAnYWxsJyA6IGRlY29kZUNvZGVfMSwgX2IgPSBkZWNvZGVTZWNvbmRDaGFyXzEuc2NvcGUsIHNjb3BlID0gX2IgPT09IHZvaWQgMCA/IGxldmVsID09PSAneG1sJyA/ICdzdHJpY3QnIDogJ2JvZHknIDogX2I7XG4gICAgaWYgKCF0ZXh0KSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICB9XG4gICAgdmFyIGRlY29kZVJlZ0V4cCA9IGRlY29kZVJlZ0V4cHNbbGV2ZWxdW3Njb3BlXTtcbiAgICB2YXIgcmVmZXJlbmNlcyA9IGFsbE5hbWVkUmVmZXJlbmNlc1tsZXZlbF0uZW50aXRpZXM7XG4gICAgdmFyIGlzQXR0cmlidXRlID0gc2NvcGUgPT09ICdhdHRyaWJ1dGUnO1xuICAgIHZhciBpc1N0cmljdCA9IHNjb3BlID09PSAnc3RyaWN0JztcbiAgICBkZWNvZGVSZWdFeHAubGFzdEluZGV4ID0gMDtcbiAgICB2YXIgcmVwbGFjZU1hdGNoXzEgPSBkZWNvZGVSZWdFeHAuZXhlYyh0ZXh0KTtcbiAgICB2YXIgcmVwbGFjZVJlc3VsdF8xO1xuICAgIGlmIChyZXBsYWNlTWF0Y2hfMSkge1xuICAgICAgICByZXBsYWNlUmVzdWx0XzEgPSAnJztcbiAgICAgICAgdmFyIHJlcGxhY2VMYXN0SW5kZXhfMSA9IDA7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICAgIGlmIChyZXBsYWNlTGFzdEluZGV4XzEgIT09IHJlcGxhY2VNYXRjaF8xLmluZGV4KSB7XG4gICAgICAgICAgICAgICAgcmVwbGFjZVJlc3VsdF8xICs9IHRleHQuc3Vic3RyaW5nKHJlcGxhY2VMYXN0SW5kZXhfMSwgcmVwbGFjZU1hdGNoXzEuaW5kZXgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHJlcGxhY2VJbnB1dF8xID0gcmVwbGFjZU1hdGNoXzFbMF07XG4gICAgICAgICAgICB2YXIgZGVjb2RlUmVzdWx0XzEgPSByZXBsYWNlSW5wdXRfMTtcbiAgICAgICAgICAgIHZhciBkZWNvZGVFbnRpdHlMYXN0Q2hhcl8yID0gcmVwbGFjZUlucHV0XzFbcmVwbGFjZUlucHV0XzEubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICBpZiAoaXNBdHRyaWJ1dGVcbiAgICAgICAgICAgICAgICAmJiBkZWNvZGVFbnRpdHlMYXN0Q2hhcl8yID09PSAnPScpIHtcbiAgICAgICAgICAgICAgICBkZWNvZGVSZXN1bHRfMSA9IHJlcGxhY2VJbnB1dF8xO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoaXNTdHJpY3RcbiAgICAgICAgICAgICAgICAmJiBkZWNvZGVFbnRpdHlMYXN0Q2hhcl8yICE9PSAnOycpIHtcbiAgICAgICAgICAgICAgICBkZWNvZGVSZXN1bHRfMSA9IHJlcGxhY2VJbnB1dF8xO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIGRlY29kZVJlc3VsdEJ5UmVmZXJlbmNlXzIgPSByZWZlcmVuY2VzW3JlcGxhY2VJbnB1dF8xXTtcbiAgICAgICAgICAgICAgICBpZiAoZGVjb2RlUmVzdWx0QnlSZWZlcmVuY2VfMikge1xuICAgICAgICAgICAgICAgICAgICBkZWNvZGVSZXN1bHRfMSA9IGRlY29kZVJlc3VsdEJ5UmVmZXJlbmNlXzI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHJlcGxhY2VJbnB1dF8xWzBdID09PSAnJicgJiYgcmVwbGFjZUlucHV0XzFbMV0gPT09ICcjJykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZGVjb2RlU2Vjb25kQ2hhcl8yID0gcmVwbGFjZUlucHV0XzFbMl07XG4gICAgICAgICAgICAgICAgICAgIHZhciBkZWNvZGVDb2RlXzIgPSBkZWNvZGVTZWNvbmRDaGFyXzIgPT0gJ3gnIHx8IGRlY29kZVNlY29uZENoYXJfMiA9PSAnWCdcbiAgICAgICAgICAgICAgICAgICAgICAgID8gcGFyc2VJbnQocmVwbGFjZUlucHV0XzEuc3Vic3RyKDMpLCAxNilcbiAgICAgICAgICAgICAgICAgICAgICAgIDogcGFyc2VJbnQocmVwbGFjZUlucHV0XzEuc3Vic3RyKDIpKTtcbiAgICAgICAgICAgICAgICAgICAgZGVjb2RlUmVzdWx0XzEgPVxuICAgICAgICAgICAgICAgICAgICAgICAgZGVjb2RlQ29kZV8yID49IDB4MTBmZmZmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBvdXRPZkJvdW5kc0NoYXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGRlY29kZUNvZGVfMiA+IDY1NTM1XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gc3Vycm9nYXRlX3BhaXJzXzEuZnJvbUNvZGVQb2ludChkZWNvZGVDb2RlXzIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogZnJvbUNoYXJDb2RlKG51bWVyaWNfdW5pY29kZV9tYXBfMS5udW1lcmljVW5pY29kZU1hcFtkZWNvZGVDb2RlXzJdIHx8IGRlY29kZUNvZGVfMik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVwbGFjZVJlc3VsdF8xICs9IGRlY29kZVJlc3VsdF8xO1xuICAgICAgICAgICAgcmVwbGFjZUxhc3RJbmRleF8xID0gcmVwbGFjZU1hdGNoXzEuaW5kZXggKyByZXBsYWNlSW5wdXRfMS5sZW5ndGg7XG4gICAgICAgIH0gd2hpbGUgKChyZXBsYWNlTWF0Y2hfMSA9IGRlY29kZVJlZ0V4cC5leGVjKHRleHQpKSk7XG4gICAgICAgIGlmIChyZXBsYWNlTGFzdEluZGV4XzEgIT09IHRleHQubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXBsYWNlUmVzdWx0XzEgKz0gdGV4dC5zdWJzdHJpbmcocmVwbGFjZUxhc3RJbmRleF8xKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmVwbGFjZVJlc3VsdF8xID1cbiAgICAgICAgICAgIHRleHQ7XG4gICAgfVxuICAgIHJldHVybiByZXBsYWNlUmVzdWx0XzE7XG59XG5leHBvcnRzLmRlY29kZSA9IGRlY29kZTtcbiIsIlwidXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTp0cnVlfSk7ZXhwb3J0cy5ib2R5UmVnRXhwcz17eG1sOi8mKD86I1xcZCt8I1t4WF1bXFxkYS1mQS1GXSt8WzAtOWEtekEtWl0rKTs/L2csaHRtbDQ6LyYoPzpuYnNwfGlleGNsfGNlbnR8cG91bmR8Y3VycmVufHllbnxicnZiYXJ8c2VjdHx1bWx8Y29weXxvcmRmfGxhcXVvfG5vdHxzaHl8cmVnfG1hY3J8ZGVnfHBsdXNtbnxzdXAyfHN1cDN8YWN1dGV8bWljcm98cGFyYXxtaWRkb3R8Y2VkaWx8c3VwMXxvcmRtfHJhcXVvfGZyYWMxNHxmcmFjMTJ8ZnJhYzM0fGlxdWVzdHxBZ3JhdmV8QWFjdXRlfEFjaXJjfEF0aWxkZXxBdW1sfEFyaW5nfEFFbGlnfENjZWRpbHxFZ3JhdmV8RWFjdXRlfEVjaXJjfEV1bWx8SWdyYXZlfElhY3V0ZXxJY2lyY3xJdW1sfEVUSHxOdGlsZGV8T2dyYXZlfE9hY3V0ZXxPY2lyY3xPdGlsZGV8T3VtbHx0aW1lc3xPc2xhc2h8VWdyYXZlfFVhY3V0ZXxVY2lyY3xVdW1sfFlhY3V0ZXxUSE9STnxzemxpZ3xhZ3JhdmV8YWFjdXRlfGFjaXJjfGF0aWxkZXxhdW1sfGFyaW5nfGFlbGlnfGNjZWRpbHxlZ3JhdmV8ZWFjdXRlfGVjaXJjfGV1bWx8aWdyYXZlfGlhY3V0ZXxpY2lyY3xpdW1sfGV0aHxudGlsZGV8b2dyYXZlfG9hY3V0ZXxvY2lyY3xvdGlsZGV8b3VtbHxkaXZpZGV8b3NsYXNofHVncmF2ZXx1YWN1dGV8dWNpcmN8dXVtbHx5YWN1dGV8dGhvcm58eXVtbHxxdW90fGFtcHxsdHxndHwjXFxkK3wjW3hYXVtcXGRhLWZBLUZdK3xbMC05YS16QS1aXSspOz8vZyxodG1sNTovJig/OkFFbGlnfEFNUHxBYWN1dGV8QWNpcmN8QWdyYXZlfEFyaW5nfEF0aWxkZXxBdW1sfENPUFl8Q2NlZGlsfEVUSHxFYWN1dGV8RWNpcmN8RWdyYXZlfEV1bWx8R1R8SWFjdXRlfEljaXJjfElncmF2ZXxJdW1sfExUfE50aWxkZXxPYWN1dGV8T2NpcmN8T2dyYXZlfE9zbGFzaHxPdGlsZGV8T3VtbHxRVU9UfFJFR3xUSE9STnxVYWN1dGV8VWNpcmN8VWdyYXZlfFV1bWx8WWFjdXRlfGFhY3V0ZXxhY2lyY3xhY3V0ZXxhZWxpZ3xhZ3JhdmV8YW1wfGFyaW5nfGF0aWxkZXxhdW1sfGJydmJhcnxjY2VkaWx8Y2VkaWx8Y2VudHxjb3B5fGN1cnJlbnxkZWd8ZGl2aWRlfGVhY3V0ZXxlY2lyY3xlZ3JhdmV8ZXRofGV1bWx8ZnJhYzEyfGZyYWMxNHxmcmFjMzR8Z3R8aWFjdXRlfGljaXJjfGlleGNsfGlncmF2ZXxpcXVlc3R8aXVtbHxsYXF1b3xsdHxtYWNyfG1pY3JvfG1pZGRvdHxuYnNwfG5vdHxudGlsZGV8b2FjdXRlfG9jaXJjfG9ncmF2ZXxvcmRmfG9yZG18b3NsYXNofG90aWxkZXxvdW1sfHBhcmF8cGx1c21ufHBvdW5kfHF1b3R8cmFxdW98cmVnfHNlY3R8c2h5fHN1cDF8c3VwMnxzdXAzfHN6bGlnfHRob3JufHRpbWVzfHVhY3V0ZXx1Y2lyY3x1Z3JhdmV8dW1sfHV1bWx8eWFjdXRlfHllbnx5dW1sfCNcXGQrfCNbeFhdW1xcZGEtZkEtRl0rfFswLTlhLXpBLVpdKyk7Py9nfTtleHBvcnRzLm5hbWVkUmVmZXJlbmNlcz17eG1sOntlbnRpdGllczp7XCImbHQ7XCI6XCI8XCIsXCImZ3Q7XCI6XCI+XCIsXCImcXVvdDtcIjonXCInLFwiJmFwb3M7XCI6XCInXCIsXCImYW1wO1wiOlwiJlwifSxjaGFyYWN0ZXJzOntcIjxcIjpcIiZsdDtcIixcIj5cIjpcIiZndDtcIiwnXCInOlwiJnF1b3Q7XCIsXCInXCI6XCImYXBvcztcIixcIiZcIjpcIiZhbXA7XCJ9fSxodG1sNDp7ZW50aXRpZXM6e1wiJmFwb3M7XCI6XCInXCIsXCImbmJzcFwiOlwiwqBcIixcIiZuYnNwO1wiOlwiwqBcIixcIiZpZXhjbFwiOlwiwqFcIixcIiZpZXhjbDtcIjpcIsKhXCIsXCImY2VudFwiOlwiwqJcIixcIiZjZW50O1wiOlwiwqJcIixcIiZwb3VuZFwiOlwiwqNcIixcIiZwb3VuZDtcIjpcIsKjXCIsXCImY3VycmVuXCI6XCLCpFwiLFwiJmN1cnJlbjtcIjpcIsKkXCIsXCImeWVuXCI6XCLCpVwiLFwiJnllbjtcIjpcIsKlXCIsXCImYnJ2YmFyXCI6XCLCplwiLFwiJmJydmJhcjtcIjpcIsKmXCIsXCImc2VjdFwiOlwiwqdcIixcIiZzZWN0O1wiOlwiwqdcIixcIiZ1bWxcIjpcIsKoXCIsXCImdW1sO1wiOlwiwqhcIixcIiZjb3B5XCI6XCLCqVwiLFwiJmNvcHk7XCI6XCLCqVwiLFwiJm9yZGZcIjpcIsKqXCIsXCImb3JkZjtcIjpcIsKqXCIsXCImbGFxdW9cIjpcIsKrXCIsXCImbGFxdW87XCI6XCLCq1wiLFwiJm5vdFwiOlwiwqxcIixcIiZub3Q7XCI6XCLCrFwiLFwiJnNoeVwiOlwiwq1cIixcIiZzaHk7XCI6XCLCrVwiLFwiJnJlZ1wiOlwiwq5cIixcIiZyZWc7XCI6XCLCrlwiLFwiJm1hY3JcIjpcIsKvXCIsXCImbWFjcjtcIjpcIsKvXCIsXCImZGVnXCI6XCLCsFwiLFwiJmRlZztcIjpcIsKwXCIsXCImcGx1c21uXCI6XCLCsVwiLFwiJnBsdXNtbjtcIjpcIsKxXCIsXCImc3VwMlwiOlwiwrJcIixcIiZzdXAyO1wiOlwiwrJcIixcIiZzdXAzXCI6XCLCs1wiLFwiJnN1cDM7XCI6XCLCs1wiLFwiJmFjdXRlXCI6XCLCtFwiLFwiJmFjdXRlO1wiOlwiwrRcIixcIiZtaWNyb1wiOlwiwrVcIixcIiZtaWNybztcIjpcIsK1XCIsXCImcGFyYVwiOlwiwrZcIixcIiZwYXJhO1wiOlwiwrZcIixcIiZtaWRkb3RcIjpcIsK3XCIsXCImbWlkZG90O1wiOlwiwrdcIixcIiZjZWRpbFwiOlwiwrhcIixcIiZjZWRpbDtcIjpcIsK4XCIsXCImc3VwMVwiOlwiwrlcIixcIiZzdXAxO1wiOlwiwrlcIixcIiZvcmRtXCI6XCLCulwiLFwiJm9yZG07XCI6XCLCulwiLFwiJnJhcXVvXCI6XCLCu1wiLFwiJnJhcXVvO1wiOlwiwrtcIixcIiZmcmFjMTRcIjpcIsK8XCIsXCImZnJhYzE0O1wiOlwiwrxcIixcIiZmcmFjMTJcIjpcIsK9XCIsXCImZnJhYzEyO1wiOlwiwr1cIixcIiZmcmFjMzRcIjpcIsK+XCIsXCImZnJhYzM0O1wiOlwiwr5cIixcIiZpcXVlc3RcIjpcIsK/XCIsXCImaXF1ZXN0O1wiOlwiwr9cIixcIiZBZ3JhdmVcIjpcIsOAXCIsXCImQWdyYXZlO1wiOlwiw4BcIixcIiZBYWN1dGVcIjpcIsOBXCIsXCImQWFjdXRlO1wiOlwiw4FcIixcIiZBY2lyY1wiOlwiw4JcIixcIiZBY2lyYztcIjpcIsOCXCIsXCImQXRpbGRlXCI6XCLDg1wiLFwiJkF0aWxkZTtcIjpcIsODXCIsXCImQXVtbFwiOlwiw4RcIixcIiZBdW1sO1wiOlwiw4RcIixcIiZBcmluZ1wiOlwiw4VcIixcIiZBcmluZztcIjpcIsOFXCIsXCImQUVsaWdcIjpcIsOGXCIsXCImQUVsaWc7XCI6XCLDhlwiLFwiJkNjZWRpbFwiOlwiw4dcIixcIiZDY2VkaWw7XCI6XCLDh1wiLFwiJkVncmF2ZVwiOlwiw4hcIixcIiZFZ3JhdmU7XCI6XCLDiFwiLFwiJkVhY3V0ZVwiOlwiw4lcIixcIiZFYWN1dGU7XCI6XCLDiVwiLFwiJkVjaXJjXCI6XCLDilwiLFwiJkVjaXJjO1wiOlwiw4pcIixcIiZFdW1sXCI6XCLDi1wiLFwiJkV1bWw7XCI6XCLDi1wiLFwiJklncmF2ZVwiOlwiw4xcIixcIiZJZ3JhdmU7XCI6XCLDjFwiLFwiJklhY3V0ZVwiOlwiw41cIixcIiZJYWN1dGU7XCI6XCLDjVwiLFwiJkljaXJjXCI6XCLDjlwiLFwiJkljaXJjO1wiOlwiw45cIixcIiZJdW1sXCI6XCLDj1wiLFwiJkl1bWw7XCI6XCLDj1wiLFwiJkVUSFwiOlwiw5BcIixcIiZFVEg7XCI6XCLDkFwiLFwiJk50aWxkZVwiOlwiw5FcIixcIiZOdGlsZGU7XCI6XCLDkVwiLFwiJk9ncmF2ZVwiOlwiw5JcIixcIiZPZ3JhdmU7XCI6XCLDklwiLFwiJk9hY3V0ZVwiOlwiw5NcIixcIiZPYWN1dGU7XCI6XCLDk1wiLFwiJk9jaXJjXCI6XCLDlFwiLFwiJk9jaXJjO1wiOlwiw5RcIixcIiZPdGlsZGVcIjpcIsOVXCIsXCImT3RpbGRlO1wiOlwiw5VcIixcIiZPdW1sXCI6XCLDllwiLFwiJk91bWw7XCI6XCLDllwiLFwiJnRpbWVzXCI6XCLDl1wiLFwiJnRpbWVzO1wiOlwiw5dcIixcIiZPc2xhc2hcIjpcIsOYXCIsXCImT3NsYXNoO1wiOlwiw5hcIixcIiZVZ3JhdmVcIjpcIsOZXCIsXCImVWdyYXZlO1wiOlwiw5lcIixcIiZVYWN1dGVcIjpcIsOaXCIsXCImVWFjdXRlO1wiOlwiw5pcIixcIiZVY2lyY1wiOlwiw5tcIixcIiZVY2lyYztcIjpcIsObXCIsXCImVXVtbFwiOlwiw5xcIixcIiZVdW1sO1wiOlwiw5xcIixcIiZZYWN1dGVcIjpcIsOdXCIsXCImWWFjdXRlO1wiOlwiw51cIixcIiZUSE9STlwiOlwiw55cIixcIiZUSE9STjtcIjpcIsOeXCIsXCImc3psaWdcIjpcIsOfXCIsXCImc3psaWc7XCI6XCLDn1wiLFwiJmFncmF2ZVwiOlwiw6BcIixcIiZhZ3JhdmU7XCI6XCLDoFwiLFwiJmFhY3V0ZVwiOlwiw6FcIixcIiZhYWN1dGU7XCI6XCLDoVwiLFwiJmFjaXJjXCI6XCLDolwiLFwiJmFjaXJjO1wiOlwiw6JcIixcIiZhdGlsZGVcIjpcIsOjXCIsXCImYXRpbGRlO1wiOlwiw6NcIixcIiZhdW1sXCI6XCLDpFwiLFwiJmF1bWw7XCI6XCLDpFwiLFwiJmFyaW5nXCI6XCLDpVwiLFwiJmFyaW5nO1wiOlwiw6VcIixcIiZhZWxpZ1wiOlwiw6ZcIixcIiZhZWxpZztcIjpcIsOmXCIsXCImY2NlZGlsXCI6XCLDp1wiLFwiJmNjZWRpbDtcIjpcIsOnXCIsXCImZWdyYXZlXCI6XCLDqFwiLFwiJmVncmF2ZTtcIjpcIsOoXCIsXCImZWFjdXRlXCI6XCLDqVwiLFwiJmVhY3V0ZTtcIjpcIsOpXCIsXCImZWNpcmNcIjpcIsOqXCIsXCImZWNpcmM7XCI6XCLDqlwiLFwiJmV1bWxcIjpcIsOrXCIsXCImZXVtbDtcIjpcIsOrXCIsXCImaWdyYXZlXCI6XCLDrFwiLFwiJmlncmF2ZTtcIjpcIsOsXCIsXCImaWFjdXRlXCI6XCLDrVwiLFwiJmlhY3V0ZTtcIjpcIsOtXCIsXCImaWNpcmNcIjpcIsOuXCIsXCImaWNpcmM7XCI6XCLDrlwiLFwiJml1bWxcIjpcIsOvXCIsXCImaXVtbDtcIjpcIsOvXCIsXCImZXRoXCI6XCLDsFwiLFwiJmV0aDtcIjpcIsOwXCIsXCImbnRpbGRlXCI6XCLDsVwiLFwiJm50aWxkZTtcIjpcIsOxXCIsXCImb2dyYXZlXCI6XCLDslwiLFwiJm9ncmF2ZTtcIjpcIsOyXCIsXCImb2FjdXRlXCI6XCLDs1wiLFwiJm9hY3V0ZTtcIjpcIsOzXCIsXCImb2NpcmNcIjpcIsO0XCIsXCImb2NpcmM7XCI6XCLDtFwiLFwiJm90aWxkZVwiOlwiw7VcIixcIiZvdGlsZGU7XCI6XCLDtVwiLFwiJm91bWxcIjpcIsO2XCIsXCImb3VtbDtcIjpcIsO2XCIsXCImZGl2aWRlXCI6XCLDt1wiLFwiJmRpdmlkZTtcIjpcIsO3XCIsXCImb3NsYXNoXCI6XCLDuFwiLFwiJm9zbGFzaDtcIjpcIsO4XCIsXCImdWdyYXZlXCI6XCLDuVwiLFwiJnVncmF2ZTtcIjpcIsO5XCIsXCImdWFjdXRlXCI6XCLDulwiLFwiJnVhY3V0ZTtcIjpcIsO6XCIsXCImdWNpcmNcIjpcIsO7XCIsXCImdWNpcmM7XCI6XCLDu1wiLFwiJnV1bWxcIjpcIsO8XCIsXCImdXVtbDtcIjpcIsO8XCIsXCImeWFjdXRlXCI6XCLDvVwiLFwiJnlhY3V0ZTtcIjpcIsO9XCIsXCImdGhvcm5cIjpcIsO+XCIsXCImdGhvcm47XCI6XCLDvlwiLFwiJnl1bWxcIjpcIsO/XCIsXCImeXVtbDtcIjpcIsO/XCIsXCImcXVvdFwiOidcIicsXCImcXVvdDtcIjonXCInLFwiJmFtcFwiOlwiJlwiLFwiJmFtcDtcIjpcIiZcIixcIiZsdFwiOlwiPFwiLFwiJmx0O1wiOlwiPFwiLFwiJmd0XCI6XCI+XCIsXCImZ3Q7XCI6XCI+XCIsXCImT0VsaWc7XCI6XCLFklwiLFwiJm9lbGlnO1wiOlwixZNcIixcIiZTY2Fyb247XCI6XCLFoFwiLFwiJnNjYXJvbjtcIjpcIsWhXCIsXCImWXVtbDtcIjpcIsW4XCIsXCImY2lyYztcIjpcIsuGXCIsXCImdGlsZGU7XCI6XCLLnFwiLFwiJmVuc3A7XCI6XCLigIJcIixcIiZlbXNwO1wiOlwi4oCDXCIsXCImdGhpbnNwO1wiOlwi4oCJXCIsXCImenduajtcIjpcIuKAjFwiLFwiJnp3ajtcIjpcIuKAjVwiLFwiJmxybTtcIjpcIuKAjlwiLFwiJnJsbTtcIjpcIuKAj1wiLFwiJm5kYXNoO1wiOlwi4oCTXCIsXCImbWRhc2g7XCI6XCLigJRcIixcIiZsc3F1bztcIjpcIuKAmFwiLFwiJnJzcXVvO1wiOlwi4oCZXCIsXCImc2JxdW87XCI6XCLigJpcIixcIiZsZHF1bztcIjpcIuKAnFwiLFwiJnJkcXVvO1wiOlwi4oCdXCIsXCImYmRxdW87XCI6XCLigJ5cIixcIiZkYWdnZXI7XCI6XCLigKBcIixcIiZEYWdnZXI7XCI6XCLigKFcIixcIiZwZXJtaWw7XCI6XCLigLBcIixcIiZsc2FxdW87XCI6XCLigLlcIixcIiZyc2FxdW87XCI6XCLigLpcIixcIiZldXJvO1wiOlwi4oKsXCIsXCImZm5vZjtcIjpcIsaSXCIsXCImQWxwaGE7XCI6XCLOkVwiLFwiJkJldGE7XCI6XCLOklwiLFwiJkdhbW1hO1wiOlwizpNcIixcIiZEZWx0YTtcIjpcIs6UXCIsXCImRXBzaWxvbjtcIjpcIs6VXCIsXCImWmV0YTtcIjpcIs6WXCIsXCImRXRhO1wiOlwizpdcIixcIiZUaGV0YTtcIjpcIs6YXCIsXCImSW90YTtcIjpcIs6ZXCIsXCImS2FwcGE7XCI6XCLOmlwiLFwiJkxhbWJkYTtcIjpcIs6bXCIsXCImTXU7XCI6XCLOnFwiLFwiJk51O1wiOlwizp1cIixcIiZYaTtcIjpcIs6eXCIsXCImT21pY3JvbjtcIjpcIs6fXCIsXCImUGk7XCI6XCLOoFwiLFwiJlJobztcIjpcIs6hXCIsXCImU2lnbWE7XCI6XCLOo1wiLFwiJlRhdTtcIjpcIs6kXCIsXCImVXBzaWxvbjtcIjpcIs6lXCIsXCImUGhpO1wiOlwizqZcIixcIiZDaGk7XCI6XCLOp1wiLFwiJlBzaTtcIjpcIs6oXCIsXCImT21lZ2E7XCI6XCLOqVwiLFwiJmFscGhhO1wiOlwizrFcIixcIiZiZXRhO1wiOlwizrJcIixcIiZnYW1tYTtcIjpcIs6zXCIsXCImZGVsdGE7XCI6XCLOtFwiLFwiJmVwc2lsb247XCI6XCLOtVwiLFwiJnpldGE7XCI6XCLOtlwiLFwiJmV0YTtcIjpcIs63XCIsXCImdGhldGE7XCI6XCLOuFwiLFwiJmlvdGE7XCI6XCLOuVwiLFwiJmthcHBhO1wiOlwizrpcIixcIiZsYW1iZGE7XCI6XCLOu1wiLFwiJm11O1wiOlwizrxcIixcIiZudTtcIjpcIs69XCIsXCImeGk7XCI6XCLOvlwiLFwiJm9taWNyb247XCI6XCLOv1wiLFwiJnBpO1wiOlwiz4BcIixcIiZyaG87XCI6XCLPgVwiLFwiJnNpZ21hZjtcIjpcIs+CXCIsXCImc2lnbWE7XCI6XCLPg1wiLFwiJnRhdTtcIjpcIs+EXCIsXCImdXBzaWxvbjtcIjpcIs+FXCIsXCImcGhpO1wiOlwiz4ZcIixcIiZjaGk7XCI6XCLPh1wiLFwiJnBzaTtcIjpcIs+IXCIsXCImb21lZ2E7XCI6XCLPiVwiLFwiJnRoZXRhc3ltO1wiOlwiz5FcIixcIiZ1cHNpaDtcIjpcIs+SXCIsXCImcGl2O1wiOlwiz5ZcIixcIiZidWxsO1wiOlwi4oCiXCIsXCImaGVsbGlwO1wiOlwi4oCmXCIsXCImcHJpbWU7XCI6XCLigLJcIixcIiZQcmltZTtcIjpcIuKAs1wiLFwiJm9saW5lO1wiOlwi4oC+XCIsXCImZnJhc2w7XCI6XCLigYRcIixcIiZ3ZWllcnA7XCI6XCLihJhcIixcIiZpbWFnZTtcIjpcIuKEkVwiLFwiJnJlYWw7XCI6XCLihJxcIixcIiZ0cmFkZTtcIjpcIuKEolwiLFwiJmFsZWZzeW07XCI6XCLihLVcIixcIiZsYXJyO1wiOlwi4oaQXCIsXCImdWFycjtcIjpcIuKGkVwiLFwiJnJhcnI7XCI6XCLihpJcIixcIiZkYXJyO1wiOlwi4oaTXCIsXCImaGFycjtcIjpcIuKGlFwiLFwiJmNyYXJyO1wiOlwi4oa1XCIsXCImbEFycjtcIjpcIuKHkFwiLFwiJnVBcnI7XCI6XCLih5FcIixcIiZyQXJyO1wiOlwi4oeSXCIsXCImZEFycjtcIjpcIuKHk1wiLFwiJmhBcnI7XCI6XCLih5RcIixcIiZmb3JhbGw7XCI6XCLiiIBcIixcIiZwYXJ0O1wiOlwi4oiCXCIsXCImZXhpc3Q7XCI6XCLiiINcIixcIiZlbXB0eTtcIjpcIuKIhVwiLFwiJm5hYmxhO1wiOlwi4oiHXCIsXCImaXNpbjtcIjpcIuKIiFwiLFwiJm5vdGluO1wiOlwi4oiJXCIsXCImbmk7XCI6XCLiiItcIixcIiZwcm9kO1wiOlwi4oiPXCIsXCImc3VtO1wiOlwi4oiRXCIsXCImbWludXM7XCI6XCLiiJJcIixcIiZsb3dhc3Q7XCI6XCLiiJdcIixcIiZyYWRpYztcIjpcIuKImlwiLFwiJnByb3A7XCI6XCLiiJ1cIixcIiZpbmZpbjtcIjpcIuKInlwiLFwiJmFuZztcIjpcIuKIoFwiLFwiJmFuZDtcIjpcIuKIp1wiLFwiJm9yO1wiOlwi4oioXCIsXCImY2FwO1wiOlwi4oipXCIsXCImY3VwO1wiOlwi4oiqXCIsXCImaW50O1wiOlwi4oirXCIsXCImdGhlcmU0O1wiOlwi4oi0XCIsXCImc2ltO1wiOlwi4oi8XCIsXCImY29uZztcIjpcIuKJhVwiLFwiJmFzeW1wO1wiOlwi4omIXCIsXCImbmU7XCI6XCLiiaBcIixcIiZlcXVpdjtcIjpcIuKJoVwiLFwiJmxlO1wiOlwi4omkXCIsXCImZ2U7XCI6XCLiiaVcIixcIiZzdWI7XCI6XCLiioJcIixcIiZzdXA7XCI6XCLiioNcIixcIiZuc3ViO1wiOlwi4oqEXCIsXCImc3ViZTtcIjpcIuKKhlwiLFwiJnN1cGU7XCI6XCLiiodcIixcIiZvcGx1cztcIjpcIuKKlVwiLFwiJm90aW1lcztcIjpcIuKKl1wiLFwiJnBlcnA7XCI6XCLiiqVcIixcIiZzZG90O1wiOlwi4ouFXCIsXCImbGNlaWw7XCI6XCLijIhcIixcIiZyY2VpbDtcIjpcIuKMiVwiLFwiJmxmbG9vcjtcIjpcIuKMilwiLFwiJnJmbG9vcjtcIjpcIuKMi1wiLFwiJmxhbmc7XCI6XCLijKlcIixcIiZyYW5nO1wiOlwi4oyqXCIsXCImbG96O1wiOlwi4peKXCIsXCImc3BhZGVzO1wiOlwi4pmgXCIsXCImY2x1YnM7XCI6XCLimaNcIixcIiZoZWFydHM7XCI6XCLimaVcIixcIiZkaWFtcztcIjpcIuKZplwifSxjaGFyYWN0ZXJzOntcIidcIjpcIiZhcG9zO1wiLFwiwqBcIjpcIiZuYnNwO1wiLFwiwqFcIjpcIiZpZXhjbDtcIixcIsKiXCI6XCImY2VudDtcIixcIsKjXCI6XCImcG91bmQ7XCIsXCLCpFwiOlwiJmN1cnJlbjtcIixcIsKlXCI6XCImeWVuO1wiLFwiwqZcIjpcIiZicnZiYXI7XCIsXCLCp1wiOlwiJnNlY3Q7XCIsXCLCqFwiOlwiJnVtbDtcIixcIsKpXCI6XCImY29weTtcIixcIsKqXCI6XCImb3JkZjtcIixcIsKrXCI6XCImbGFxdW87XCIsXCLCrFwiOlwiJm5vdDtcIixcIsKtXCI6XCImc2h5O1wiLFwiwq5cIjpcIiZyZWc7XCIsXCLCr1wiOlwiJm1hY3I7XCIsXCLCsFwiOlwiJmRlZztcIixcIsKxXCI6XCImcGx1c21uO1wiLFwiwrJcIjpcIiZzdXAyO1wiLFwiwrNcIjpcIiZzdXAzO1wiLFwiwrRcIjpcIiZhY3V0ZTtcIixcIsK1XCI6XCImbWljcm87XCIsXCLCtlwiOlwiJnBhcmE7XCIsXCLCt1wiOlwiJm1pZGRvdDtcIixcIsK4XCI6XCImY2VkaWw7XCIsXCLCuVwiOlwiJnN1cDE7XCIsXCLCulwiOlwiJm9yZG07XCIsXCLCu1wiOlwiJnJhcXVvO1wiLFwiwrxcIjpcIiZmcmFjMTQ7XCIsXCLCvVwiOlwiJmZyYWMxMjtcIixcIsK+XCI6XCImZnJhYzM0O1wiLFwiwr9cIjpcIiZpcXVlc3Q7XCIsXCLDgFwiOlwiJkFncmF2ZTtcIixcIsOBXCI6XCImQWFjdXRlO1wiLFwiw4JcIjpcIiZBY2lyYztcIixcIsODXCI6XCImQXRpbGRlO1wiLFwiw4RcIjpcIiZBdW1sO1wiLFwiw4VcIjpcIiZBcmluZztcIixcIsOGXCI6XCImQUVsaWc7XCIsXCLDh1wiOlwiJkNjZWRpbDtcIixcIsOIXCI6XCImRWdyYXZlO1wiLFwiw4lcIjpcIiZFYWN1dGU7XCIsXCLDilwiOlwiJkVjaXJjO1wiLFwiw4tcIjpcIiZFdW1sO1wiLFwiw4xcIjpcIiZJZ3JhdmU7XCIsXCLDjVwiOlwiJklhY3V0ZTtcIixcIsOOXCI6XCImSWNpcmM7XCIsXCLDj1wiOlwiJkl1bWw7XCIsXCLDkFwiOlwiJkVUSDtcIixcIsORXCI6XCImTnRpbGRlO1wiLFwiw5JcIjpcIiZPZ3JhdmU7XCIsXCLDk1wiOlwiJk9hY3V0ZTtcIixcIsOUXCI6XCImT2NpcmM7XCIsXCLDlVwiOlwiJk90aWxkZTtcIixcIsOWXCI6XCImT3VtbDtcIixcIsOXXCI6XCImdGltZXM7XCIsXCLDmFwiOlwiJk9zbGFzaDtcIixcIsOZXCI6XCImVWdyYXZlO1wiLFwiw5pcIjpcIiZVYWN1dGU7XCIsXCLDm1wiOlwiJlVjaXJjO1wiLFwiw5xcIjpcIiZVdW1sO1wiLFwiw51cIjpcIiZZYWN1dGU7XCIsXCLDnlwiOlwiJlRIT1JOO1wiLFwiw59cIjpcIiZzemxpZztcIixcIsOgXCI6XCImYWdyYXZlO1wiLFwiw6FcIjpcIiZhYWN1dGU7XCIsXCLDolwiOlwiJmFjaXJjO1wiLFwiw6NcIjpcIiZhdGlsZGU7XCIsXCLDpFwiOlwiJmF1bWw7XCIsXCLDpVwiOlwiJmFyaW5nO1wiLFwiw6ZcIjpcIiZhZWxpZztcIixcIsOnXCI6XCImY2NlZGlsO1wiLFwiw6hcIjpcIiZlZ3JhdmU7XCIsXCLDqVwiOlwiJmVhY3V0ZTtcIixcIsOqXCI6XCImZWNpcmM7XCIsXCLDq1wiOlwiJmV1bWw7XCIsXCLDrFwiOlwiJmlncmF2ZTtcIixcIsOtXCI6XCImaWFjdXRlO1wiLFwiw65cIjpcIiZpY2lyYztcIixcIsOvXCI6XCImaXVtbDtcIixcIsOwXCI6XCImZXRoO1wiLFwiw7FcIjpcIiZudGlsZGU7XCIsXCLDslwiOlwiJm9ncmF2ZTtcIixcIsOzXCI6XCImb2FjdXRlO1wiLFwiw7RcIjpcIiZvY2lyYztcIixcIsO1XCI6XCImb3RpbGRlO1wiLFwiw7ZcIjpcIiZvdW1sO1wiLFwiw7dcIjpcIiZkaXZpZGU7XCIsXCLDuFwiOlwiJm9zbGFzaDtcIixcIsO5XCI6XCImdWdyYXZlO1wiLFwiw7pcIjpcIiZ1YWN1dGU7XCIsXCLDu1wiOlwiJnVjaXJjO1wiLFwiw7xcIjpcIiZ1dW1sO1wiLFwiw71cIjpcIiZ5YWN1dGU7XCIsXCLDvlwiOlwiJnRob3JuO1wiLFwiw79cIjpcIiZ5dW1sO1wiLCdcIic6XCImcXVvdDtcIixcIiZcIjpcIiZhbXA7XCIsXCI8XCI6XCImbHQ7XCIsXCI+XCI6XCImZ3Q7XCIsXCLFklwiOlwiJk9FbGlnO1wiLFwixZNcIjpcIiZvZWxpZztcIixcIsWgXCI6XCImU2Nhcm9uO1wiLFwixaFcIjpcIiZzY2Fyb247XCIsXCLFuFwiOlwiJll1bWw7XCIsXCLLhlwiOlwiJmNpcmM7XCIsXCLLnFwiOlwiJnRpbGRlO1wiLFwi4oCCXCI6XCImZW5zcDtcIixcIuKAg1wiOlwiJmVtc3A7XCIsXCLigIlcIjpcIiZ0aGluc3A7XCIsXCLigIxcIjpcIiZ6d25qO1wiLFwi4oCNXCI6XCImendqO1wiLFwi4oCOXCI6XCImbHJtO1wiLFwi4oCPXCI6XCImcmxtO1wiLFwi4oCTXCI6XCImbmRhc2g7XCIsXCLigJRcIjpcIiZtZGFzaDtcIixcIuKAmFwiOlwiJmxzcXVvO1wiLFwi4oCZXCI6XCImcnNxdW87XCIsXCLigJpcIjpcIiZzYnF1bztcIixcIuKAnFwiOlwiJmxkcXVvO1wiLFwi4oCdXCI6XCImcmRxdW87XCIsXCLigJ5cIjpcIiZiZHF1bztcIixcIuKAoFwiOlwiJmRhZ2dlcjtcIixcIuKAoVwiOlwiJkRhZ2dlcjtcIixcIuKAsFwiOlwiJnBlcm1pbDtcIixcIuKAuVwiOlwiJmxzYXF1bztcIixcIuKAulwiOlwiJnJzYXF1bztcIixcIuKCrFwiOlwiJmV1cm87XCIsXCLGklwiOlwiJmZub2Y7XCIsXCLOkVwiOlwiJkFscGhhO1wiLFwizpJcIjpcIiZCZXRhO1wiLFwizpNcIjpcIiZHYW1tYTtcIixcIs6UXCI6XCImRGVsdGE7XCIsXCLOlVwiOlwiJkVwc2lsb247XCIsXCLOllwiOlwiJlpldGE7XCIsXCLOl1wiOlwiJkV0YTtcIixcIs6YXCI6XCImVGhldGE7XCIsXCLOmVwiOlwiJklvdGE7XCIsXCLOmlwiOlwiJkthcHBhO1wiLFwizptcIjpcIiZMYW1iZGE7XCIsXCLOnFwiOlwiJk11O1wiLFwizp1cIjpcIiZOdTtcIixcIs6eXCI6XCImWGk7XCIsXCLOn1wiOlwiJk9taWNyb247XCIsXCLOoFwiOlwiJlBpO1wiLFwizqFcIjpcIiZSaG87XCIsXCLOo1wiOlwiJlNpZ21hO1wiLFwizqRcIjpcIiZUYXU7XCIsXCLOpVwiOlwiJlVwc2lsb247XCIsXCLOplwiOlwiJlBoaTtcIixcIs6nXCI6XCImQ2hpO1wiLFwizqhcIjpcIiZQc2k7XCIsXCLOqVwiOlwiJk9tZWdhO1wiLFwizrFcIjpcIiZhbHBoYTtcIixcIs6yXCI6XCImYmV0YTtcIixcIs6zXCI6XCImZ2FtbWE7XCIsXCLOtFwiOlwiJmRlbHRhO1wiLFwizrVcIjpcIiZlcHNpbG9uO1wiLFwizrZcIjpcIiZ6ZXRhO1wiLFwizrdcIjpcIiZldGE7XCIsXCLOuFwiOlwiJnRoZXRhO1wiLFwizrlcIjpcIiZpb3RhO1wiLFwizrpcIjpcIiZrYXBwYTtcIixcIs67XCI6XCImbGFtYmRhO1wiLFwizrxcIjpcIiZtdTtcIixcIs69XCI6XCImbnU7XCIsXCLOvlwiOlwiJnhpO1wiLFwizr9cIjpcIiZvbWljcm9uO1wiLFwiz4BcIjpcIiZwaTtcIixcIs+BXCI6XCImcmhvO1wiLFwiz4JcIjpcIiZzaWdtYWY7XCIsXCLPg1wiOlwiJnNpZ21hO1wiLFwiz4RcIjpcIiZ0YXU7XCIsXCLPhVwiOlwiJnVwc2lsb247XCIsXCLPhlwiOlwiJnBoaTtcIixcIs+HXCI6XCImY2hpO1wiLFwiz4hcIjpcIiZwc2k7XCIsXCLPiVwiOlwiJm9tZWdhO1wiLFwiz5FcIjpcIiZ0aGV0YXN5bTtcIixcIs+SXCI6XCImdXBzaWg7XCIsXCLPllwiOlwiJnBpdjtcIixcIuKAolwiOlwiJmJ1bGw7XCIsXCLigKZcIjpcIiZoZWxsaXA7XCIsXCLigLJcIjpcIiZwcmltZTtcIixcIuKAs1wiOlwiJlByaW1lO1wiLFwi4oC+XCI6XCImb2xpbmU7XCIsXCLigYRcIjpcIiZmcmFzbDtcIixcIuKEmFwiOlwiJndlaWVycDtcIixcIuKEkVwiOlwiJmltYWdlO1wiLFwi4oScXCI6XCImcmVhbDtcIixcIuKEolwiOlwiJnRyYWRlO1wiLFwi4oS1XCI6XCImYWxlZnN5bTtcIixcIuKGkFwiOlwiJmxhcnI7XCIsXCLihpFcIjpcIiZ1YXJyO1wiLFwi4oaSXCI6XCImcmFycjtcIixcIuKGk1wiOlwiJmRhcnI7XCIsXCLihpRcIjpcIiZoYXJyO1wiLFwi4oa1XCI6XCImY3JhcnI7XCIsXCLih5BcIjpcIiZsQXJyO1wiLFwi4oeRXCI6XCImdUFycjtcIixcIuKHklwiOlwiJnJBcnI7XCIsXCLih5NcIjpcIiZkQXJyO1wiLFwi4oeUXCI6XCImaEFycjtcIixcIuKIgFwiOlwiJmZvcmFsbDtcIixcIuKIglwiOlwiJnBhcnQ7XCIsXCLiiINcIjpcIiZleGlzdDtcIixcIuKIhVwiOlwiJmVtcHR5O1wiLFwi4oiHXCI6XCImbmFibGE7XCIsXCLiiIhcIjpcIiZpc2luO1wiLFwi4oiJXCI6XCImbm90aW47XCIsXCLiiItcIjpcIiZuaTtcIixcIuKIj1wiOlwiJnByb2Q7XCIsXCLiiJFcIjpcIiZzdW07XCIsXCLiiJJcIjpcIiZtaW51cztcIixcIuKIl1wiOlwiJmxvd2FzdDtcIixcIuKImlwiOlwiJnJhZGljO1wiLFwi4oidXCI6XCImcHJvcDtcIixcIuKInlwiOlwiJmluZmluO1wiLFwi4oigXCI6XCImYW5nO1wiLFwi4oinXCI6XCImYW5kO1wiLFwi4oioXCI6XCImb3I7XCIsXCLiiKlcIjpcIiZjYXA7XCIsXCLiiKpcIjpcIiZjdXA7XCIsXCLiiKtcIjpcIiZpbnQ7XCIsXCLiiLRcIjpcIiZ0aGVyZTQ7XCIsXCLiiLxcIjpcIiZzaW07XCIsXCLiiYVcIjpcIiZjb25nO1wiLFwi4omIXCI6XCImYXN5bXA7XCIsXCLiiaBcIjpcIiZuZTtcIixcIuKJoVwiOlwiJmVxdWl2O1wiLFwi4omkXCI6XCImbGU7XCIsXCLiiaVcIjpcIiZnZTtcIixcIuKKglwiOlwiJnN1YjtcIixcIuKKg1wiOlwiJnN1cDtcIixcIuKKhFwiOlwiJm5zdWI7XCIsXCLiioZcIjpcIiZzdWJlO1wiLFwi4oqHXCI6XCImc3VwZTtcIixcIuKKlVwiOlwiJm9wbHVzO1wiLFwi4oqXXCI6XCImb3RpbWVzO1wiLFwi4oqlXCI6XCImcGVycDtcIixcIuKLhVwiOlwiJnNkb3Q7XCIsXCLijIhcIjpcIiZsY2VpbDtcIixcIuKMiVwiOlwiJnJjZWlsO1wiLFwi4oyKXCI6XCImbGZsb29yO1wiLFwi4oyLXCI6XCImcmZsb29yO1wiLFwi4oypXCI6XCImbGFuZztcIixcIuKMqlwiOlwiJnJhbmc7XCIsXCLil4pcIjpcIiZsb3o7XCIsXCLimaBcIjpcIiZzcGFkZXM7XCIsXCLimaNcIjpcIiZjbHVicztcIixcIuKZpVwiOlwiJmhlYXJ0cztcIixcIuKZplwiOlwiJmRpYW1zO1wifX0saHRtbDU6e2VudGl0aWVzOntcIiZBRWxpZ1wiOlwiw4ZcIixcIiZBRWxpZztcIjpcIsOGXCIsXCImQU1QXCI6XCImXCIsXCImQU1QO1wiOlwiJlwiLFwiJkFhY3V0ZVwiOlwiw4FcIixcIiZBYWN1dGU7XCI6XCLDgVwiLFwiJkFicmV2ZTtcIjpcIsSCXCIsXCImQWNpcmNcIjpcIsOCXCIsXCImQWNpcmM7XCI6XCLDglwiLFwiJkFjeTtcIjpcItCQXCIsXCImQWZyO1wiOlwi8J2UhFwiLFwiJkFncmF2ZVwiOlwiw4BcIixcIiZBZ3JhdmU7XCI6XCLDgFwiLFwiJkFscGhhO1wiOlwizpFcIixcIiZBbWFjcjtcIjpcIsSAXCIsXCImQW5kO1wiOlwi4qmTXCIsXCImQW9nb247XCI6XCLEhFwiLFwiJkFvcGY7XCI6XCLwnZS4XCIsXCImQXBwbHlGdW5jdGlvbjtcIjpcIuKBoVwiLFwiJkFyaW5nXCI6XCLDhVwiLFwiJkFyaW5nO1wiOlwiw4VcIixcIiZBc2NyO1wiOlwi8J2SnFwiLFwiJkFzc2lnbjtcIjpcIuKJlFwiLFwiJkF0aWxkZVwiOlwiw4NcIixcIiZBdGlsZGU7XCI6XCLDg1wiLFwiJkF1bWxcIjpcIsOEXCIsXCImQXVtbDtcIjpcIsOEXCIsXCImQmFja3NsYXNoO1wiOlwi4oiWXCIsXCImQmFydjtcIjpcIuKrp1wiLFwiJkJhcndlZDtcIjpcIuKMhlwiLFwiJkJjeTtcIjpcItCRXCIsXCImQmVjYXVzZTtcIjpcIuKItVwiLFwiJkJlcm5vdWxsaXM7XCI6XCLihKxcIixcIiZCZXRhO1wiOlwizpJcIixcIiZCZnI7XCI6XCLwnZSFXCIsXCImQm9wZjtcIjpcIvCdlLlcIixcIiZCcmV2ZTtcIjpcIsuYXCIsXCImQnNjcjtcIjpcIuKErFwiLFwiJkJ1bXBlcTtcIjpcIuKJjlwiLFwiJkNIY3k7XCI6XCLQp1wiLFwiJkNPUFlcIjpcIsKpXCIsXCImQ09QWTtcIjpcIsKpXCIsXCImQ2FjdXRlO1wiOlwixIZcIixcIiZDYXA7XCI6XCLii5JcIixcIiZDYXBpdGFsRGlmZmVyZW50aWFsRDtcIjpcIuKFhVwiLFwiJkNheWxleXM7XCI6XCLihK1cIixcIiZDY2Fyb247XCI6XCLEjFwiLFwiJkNjZWRpbFwiOlwiw4dcIixcIiZDY2VkaWw7XCI6XCLDh1wiLFwiJkNjaXJjO1wiOlwixIhcIixcIiZDY29uaW50O1wiOlwi4oiwXCIsXCImQ2RvdDtcIjpcIsSKXCIsXCImQ2VkaWxsYTtcIjpcIsK4XCIsXCImQ2VudGVyRG90O1wiOlwiwrdcIixcIiZDZnI7XCI6XCLihK1cIixcIiZDaGk7XCI6XCLOp1wiLFwiJkNpcmNsZURvdDtcIjpcIuKKmVwiLFwiJkNpcmNsZU1pbnVzO1wiOlwi4oqWXCIsXCImQ2lyY2xlUGx1cztcIjpcIuKKlVwiLFwiJkNpcmNsZVRpbWVzO1wiOlwi4oqXXCIsXCImQ2xvY2t3aXNlQ29udG91ckludGVncmFsO1wiOlwi4oiyXCIsXCImQ2xvc2VDdXJseURvdWJsZVF1b3RlO1wiOlwi4oCdXCIsXCImQ2xvc2VDdXJseVF1b3RlO1wiOlwi4oCZXCIsXCImQ29sb247XCI6XCLiiLdcIixcIiZDb2xvbmU7XCI6XCLiqbRcIixcIiZDb25ncnVlbnQ7XCI6XCLiiaFcIixcIiZDb25pbnQ7XCI6XCLiiK9cIixcIiZDb250b3VySW50ZWdyYWw7XCI6XCLiiK5cIixcIiZDb3BmO1wiOlwi4oSCXCIsXCImQ29wcm9kdWN0O1wiOlwi4oiQXCIsXCImQ291bnRlckNsb2Nrd2lzZUNvbnRvdXJJbnRlZ3JhbDtcIjpcIuKIs1wiLFwiJkNyb3NzO1wiOlwi4qivXCIsXCImQ3NjcjtcIjpcIvCdkp5cIixcIiZDdXA7XCI6XCLii5NcIixcIiZDdXBDYXA7XCI6XCLiiY1cIixcIiZERDtcIjpcIuKFhVwiLFwiJkREb3RyYWhkO1wiOlwi4qSRXCIsXCImREpjeTtcIjpcItCCXCIsXCImRFNjeTtcIjpcItCFXCIsXCImRFpjeTtcIjpcItCPXCIsXCImRGFnZ2VyO1wiOlwi4oChXCIsXCImRGFycjtcIjpcIuKGoVwiLFwiJkRhc2h2O1wiOlwi4qukXCIsXCImRGNhcm9uO1wiOlwixI5cIixcIiZEY3k7XCI6XCLQlFwiLFwiJkRlbDtcIjpcIuKIh1wiLFwiJkRlbHRhO1wiOlwizpRcIixcIiZEZnI7XCI6XCLwnZSHXCIsXCImRGlhY3JpdGljYWxBY3V0ZTtcIjpcIsK0XCIsXCImRGlhY3JpdGljYWxEb3Q7XCI6XCLLmVwiLFwiJkRpYWNyaXRpY2FsRG91YmxlQWN1dGU7XCI6XCLLnVwiLFwiJkRpYWNyaXRpY2FsR3JhdmU7XCI6XCJgXCIsXCImRGlhY3JpdGljYWxUaWxkZTtcIjpcIsucXCIsXCImRGlhbW9uZDtcIjpcIuKLhFwiLFwiJkRpZmZlcmVudGlhbEQ7XCI6XCLihYZcIixcIiZEb3BmO1wiOlwi8J2Uu1wiLFwiJkRvdDtcIjpcIsKoXCIsXCImRG90RG90O1wiOlwi4oOcXCIsXCImRG90RXF1YWw7XCI6XCLiiZBcIixcIiZEb3VibGVDb250b3VySW50ZWdyYWw7XCI6XCLiiK9cIixcIiZEb3VibGVEb3Q7XCI6XCLCqFwiLFwiJkRvdWJsZURvd25BcnJvdztcIjpcIuKHk1wiLFwiJkRvdWJsZUxlZnRBcnJvdztcIjpcIuKHkFwiLFwiJkRvdWJsZUxlZnRSaWdodEFycm93O1wiOlwi4oeUXCIsXCImRG91YmxlTGVmdFRlZTtcIjpcIuKrpFwiLFwiJkRvdWJsZUxvbmdMZWZ0QXJyb3c7XCI6XCLin7hcIixcIiZEb3VibGVMb25nTGVmdFJpZ2h0QXJyb3c7XCI6XCLin7pcIixcIiZEb3VibGVMb25nUmlnaHRBcnJvdztcIjpcIuKfuVwiLFwiJkRvdWJsZVJpZ2h0QXJyb3c7XCI6XCLih5JcIixcIiZEb3VibGVSaWdodFRlZTtcIjpcIuKKqFwiLFwiJkRvdWJsZVVwQXJyb3c7XCI6XCLih5FcIixcIiZEb3VibGVVcERvd25BcnJvdztcIjpcIuKHlVwiLFwiJkRvdWJsZVZlcnRpY2FsQmFyO1wiOlwi4oilXCIsXCImRG93bkFycm93O1wiOlwi4oaTXCIsXCImRG93bkFycm93QmFyO1wiOlwi4qSTXCIsXCImRG93bkFycm93VXBBcnJvdztcIjpcIuKHtVwiLFwiJkRvd25CcmV2ZTtcIjpcIsyRXCIsXCImRG93bkxlZnRSaWdodFZlY3RvcjtcIjpcIuKlkFwiLFwiJkRvd25MZWZ0VGVlVmVjdG9yO1wiOlwi4qWeXCIsXCImRG93bkxlZnRWZWN0b3I7XCI6XCLihr1cIixcIiZEb3duTGVmdFZlY3RvckJhcjtcIjpcIuKlllwiLFwiJkRvd25SaWdodFRlZVZlY3RvcjtcIjpcIuKln1wiLFwiJkRvd25SaWdodFZlY3RvcjtcIjpcIuKHgVwiLFwiJkRvd25SaWdodFZlY3RvckJhcjtcIjpcIuKll1wiLFwiJkRvd25UZWU7XCI6XCLiiqRcIixcIiZEb3duVGVlQXJyb3c7XCI6XCLihqdcIixcIiZEb3duYXJyb3c7XCI6XCLih5NcIixcIiZEc2NyO1wiOlwi8J2Sn1wiLFwiJkRzdHJvaztcIjpcIsSQXCIsXCImRU5HO1wiOlwixYpcIixcIiZFVEhcIjpcIsOQXCIsXCImRVRIO1wiOlwiw5BcIixcIiZFYWN1dGVcIjpcIsOJXCIsXCImRWFjdXRlO1wiOlwiw4lcIixcIiZFY2Fyb247XCI6XCLEmlwiLFwiJkVjaXJjXCI6XCLDilwiLFwiJkVjaXJjO1wiOlwiw4pcIixcIiZFY3k7XCI6XCLQrVwiLFwiJkVkb3Q7XCI6XCLEllwiLFwiJkVmcjtcIjpcIvCdlIhcIixcIiZFZ3JhdmVcIjpcIsOIXCIsXCImRWdyYXZlO1wiOlwiw4hcIixcIiZFbGVtZW50O1wiOlwi4oiIXCIsXCImRW1hY3I7XCI6XCLEklwiLFwiJkVtcHR5U21hbGxTcXVhcmU7XCI6XCLil7tcIixcIiZFbXB0eVZlcnlTbWFsbFNxdWFyZTtcIjpcIuKWq1wiLFwiJkVvZ29uO1wiOlwixJhcIixcIiZFb3BmO1wiOlwi8J2UvFwiLFwiJkVwc2lsb247XCI6XCLOlVwiLFwiJkVxdWFsO1wiOlwi4qm1XCIsXCImRXF1YWxUaWxkZTtcIjpcIuKJglwiLFwiJkVxdWlsaWJyaXVtO1wiOlwi4oeMXCIsXCImRXNjcjtcIjpcIuKEsFwiLFwiJkVzaW07XCI6XCLiqbNcIixcIiZFdGE7XCI6XCLOl1wiLFwiJkV1bWxcIjpcIsOLXCIsXCImRXVtbDtcIjpcIsOLXCIsXCImRXhpc3RzO1wiOlwi4oiDXCIsXCImRXhwb25lbnRpYWxFO1wiOlwi4oWHXCIsXCImRmN5O1wiOlwi0KRcIixcIiZGZnI7XCI6XCLwnZSJXCIsXCImRmlsbGVkU21hbGxTcXVhcmU7XCI6XCLil7xcIixcIiZGaWxsZWRWZXJ5U21hbGxTcXVhcmU7XCI6XCLilqpcIixcIiZGb3BmO1wiOlwi8J2UvVwiLFwiJkZvckFsbDtcIjpcIuKIgFwiLFwiJkZvdXJpZXJ0cmY7XCI6XCLihLFcIixcIiZGc2NyO1wiOlwi4oSxXCIsXCImR0pjeTtcIjpcItCDXCIsXCImR1RcIjpcIj5cIixcIiZHVDtcIjpcIj5cIixcIiZHYW1tYTtcIjpcIs6TXCIsXCImR2FtbWFkO1wiOlwiz5xcIixcIiZHYnJldmU7XCI6XCLEnlwiLFwiJkdjZWRpbDtcIjpcIsSiXCIsXCImR2NpcmM7XCI6XCLEnFwiLFwiJkdjeTtcIjpcItCTXCIsXCImR2RvdDtcIjpcIsSgXCIsXCImR2ZyO1wiOlwi8J2UilwiLFwiJkdnO1wiOlwi4ouZXCIsXCImR29wZjtcIjpcIvCdlL5cIixcIiZHcmVhdGVyRXF1YWw7XCI6XCLiiaVcIixcIiZHcmVhdGVyRXF1YWxMZXNzO1wiOlwi4oubXCIsXCImR3JlYXRlckZ1bGxFcXVhbDtcIjpcIuKJp1wiLFwiJkdyZWF0ZXJHcmVhdGVyO1wiOlwi4qqiXCIsXCImR3JlYXRlckxlc3M7XCI6XCLiibdcIixcIiZHcmVhdGVyU2xhbnRFcXVhbDtcIjpcIuKpvlwiLFwiJkdyZWF0ZXJUaWxkZTtcIjpcIuKJs1wiLFwiJkdzY3I7XCI6XCLwnZKiXCIsXCImR3Q7XCI6XCLiiatcIixcIiZIQVJEY3k7XCI6XCLQqlwiLFwiJkhhY2VrO1wiOlwiy4dcIixcIiZIYXQ7XCI6XCJeXCIsXCImSGNpcmM7XCI6XCLEpFwiLFwiJkhmcjtcIjpcIuKEjFwiLFwiJkhpbGJlcnRTcGFjZTtcIjpcIuKEi1wiLFwiJkhvcGY7XCI6XCLihI1cIixcIiZIb3Jpem9udGFsTGluZTtcIjpcIuKUgFwiLFwiJkhzY3I7XCI6XCLihItcIixcIiZIc3Ryb2s7XCI6XCLEplwiLFwiJkh1bXBEb3duSHVtcDtcIjpcIuKJjlwiLFwiJkh1bXBFcXVhbDtcIjpcIuKJj1wiLFwiJklFY3k7XCI6XCLQlVwiLFwiJklKbGlnO1wiOlwixLJcIixcIiZJT2N5O1wiOlwi0IFcIixcIiZJYWN1dGVcIjpcIsONXCIsXCImSWFjdXRlO1wiOlwiw41cIixcIiZJY2lyY1wiOlwiw45cIixcIiZJY2lyYztcIjpcIsOOXCIsXCImSWN5O1wiOlwi0JhcIixcIiZJZG90O1wiOlwixLBcIixcIiZJZnI7XCI6XCLihJFcIixcIiZJZ3JhdmVcIjpcIsOMXCIsXCImSWdyYXZlO1wiOlwiw4xcIixcIiZJbTtcIjpcIuKEkVwiLFwiJkltYWNyO1wiOlwixKpcIixcIiZJbWFnaW5hcnlJO1wiOlwi4oWIXCIsXCImSW1wbGllcztcIjpcIuKHklwiLFwiJkludDtcIjpcIuKIrFwiLFwiJkludGVncmFsO1wiOlwi4oirXCIsXCImSW50ZXJzZWN0aW9uO1wiOlwi4ouCXCIsXCImSW52aXNpYmxlQ29tbWE7XCI6XCLigaNcIixcIiZJbnZpc2libGVUaW1lcztcIjpcIuKBolwiLFwiJklvZ29uO1wiOlwixK5cIixcIiZJb3BmO1wiOlwi8J2VgFwiLFwiJklvdGE7XCI6XCLOmVwiLFwiJklzY3I7XCI6XCLihJBcIixcIiZJdGlsZGU7XCI6XCLEqFwiLFwiJkl1a2N5O1wiOlwi0IZcIixcIiZJdW1sXCI6XCLDj1wiLFwiJkl1bWw7XCI6XCLDj1wiLFwiJkpjaXJjO1wiOlwixLRcIixcIiZKY3k7XCI6XCLQmVwiLFwiJkpmcjtcIjpcIvCdlI1cIixcIiZKb3BmO1wiOlwi8J2VgVwiLFwiJkpzY3I7XCI6XCLwnZKlXCIsXCImSnNlcmN5O1wiOlwi0IhcIixcIiZKdWtjeTtcIjpcItCEXCIsXCImS0hjeTtcIjpcItClXCIsXCImS0pjeTtcIjpcItCMXCIsXCImS2FwcGE7XCI6XCLOmlwiLFwiJktjZWRpbDtcIjpcIsS2XCIsXCImS2N5O1wiOlwi0JpcIixcIiZLZnI7XCI6XCLwnZSOXCIsXCImS29wZjtcIjpcIvCdlYJcIixcIiZLc2NyO1wiOlwi8J2SplwiLFwiJkxKY3k7XCI6XCLQiVwiLFwiJkxUXCI6XCI8XCIsXCImTFQ7XCI6XCI8XCIsXCImTGFjdXRlO1wiOlwixLlcIixcIiZMYW1iZGE7XCI6XCLOm1wiLFwiJkxhbmc7XCI6XCLin6pcIixcIiZMYXBsYWNldHJmO1wiOlwi4oSSXCIsXCImTGFycjtcIjpcIuKGnlwiLFwiJkxjYXJvbjtcIjpcIsS9XCIsXCImTGNlZGlsO1wiOlwixLtcIixcIiZMY3k7XCI6XCLQm1wiLFwiJkxlZnRBbmdsZUJyYWNrZXQ7XCI6XCLin6hcIixcIiZMZWZ0QXJyb3c7XCI6XCLihpBcIixcIiZMZWZ0QXJyb3dCYXI7XCI6XCLih6RcIixcIiZMZWZ0QXJyb3dSaWdodEFycm93O1wiOlwi4oeGXCIsXCImTGVmdENlaWxpbmc7XCI6XCLijIhcIixcIiZMZWZ0RG91YmxlQnJhY2tldDtcIjpcIuKfplwiLFwiJkxlZnREb3duVGVlVmVjdG9yO1wiOlwi4qWhXCIsXCImTGVmdERvd25WZWN0b3I7XCI6XCLih4NcIixcIiZMZWZ0RG93blZlY3RvckJhcjtcIjpcIuKlmVwiLFwiJkxlZnRGbG9vcjtcIjpcIuKMilwiLFwiJkxlZnRSaWdodEFycm93O1wiOlwi4oaUXCIsXCImTGVmdFJpZ2h0VmVjdG9yO1wiOlwi4qWOXCIsXCImTGVmdFRlZTtcIjpcIuKKo1wiLFwiJkxlZnRUZWVBcnJvdztcIjpcIuKGpFwiLFwiJkxlZnRUZWVWZWN0b3I7XCI6XCLipZpcIixcIiZMZWZ0VHJpYW5nbGU7XCI6XCLiirJcIixcIiZMZWZ0VHJpYW5nbGVCYXI7XCI6XCLip49cIixcIiZMZWZ0VHJpYW5nbGVFcXVhbDtcIjpcIuKKtFwiLFwiJkxlZnRVcERvd25WZWN0b3I7XCI6XCLipZFcIixcIiZMZWZ0VXBUZWVWZWN0b3I7XCI6XCLipaBcIixcIiZMZWZ0VXBWZWN0b3I7XCI6XCLihr9cIixcIiZMZWZ0VXBWZWN0b3JCYXI7XCI6XCLipZhcIixcIiZMZWZ0VmVjdG9yO1wiOlwi4oa8XCIsXCImTGVmdFZlY3RvckJhcjtcIjpcIuKlklwiLFwiJkxlZnRhcnJvdztcIjpcIuKHkFwiLFwiJkxlZnRyaWdodGFycm93O1wiOlwi4oeUXCIsXCImTGVzc0VxdWFsR3JlYXRlcjtcIjpcIuKLmlwiLFwiJkxlc3NGdWxsRXF1YWw7XCI6XCLiiaZcIixcIiZMZXNzR3JlYXRlcjtcIjpcIuKJtlwiLFwiJkxlc3NMZXNzO1wiOlwi4qqhXCIsXCImTGVzc1NsYW50RXF1YWw7XCI6XCLiqb1cIixcIiZMZXNzVGlsZGU7XCI6XCLiibJcIixcIiZMZnI7XCI6XCLwnZSPXCIsXCImTGw7XCI6XCLii5hcIixcIiZMbGVmdGFycm93O1wiOlwi4oeaXCIsXCImTG1pZG90O1wiOlwixL9cIixcIiZMb25nTGVmdEFycm93O1wiOlwi4p+1XCIsXCImTG9uZ0xlZnRSaWdodEFycm93O1wiOlwi4p+3XCIsXCImTG9uZ1JpZ2h0QXJyb3c7XCI6XCLin7ZcIixcIiZMb25nbGVmdGFycm93O1wiOlwi4p+4XCIsXCImTG9uZ2xlZnRyaWdodGFycm93O1wiOlwi4p+6XCIsXCImTG9uZ3JpZ2h0YXJyb3c7XCI6XCLin7lcIixcIiZMb3BmO1wiOlwi8J2Vg1wiLFwiJkxvd2VyTGVmdEFycm93O1wiOlwi4oaZXCIsXCImTG93ZXJSaWdodEFycm93O1wiOlwi4oaYXCIsXCImTHNjcjtcIjpcIuKEklwiLFwiJkxzaDtcIjpcIuKGsFwiLFwiJkxzdHJvaztcIjpcIsWBXCIsXCImTHQ7XCI6XCLiiapcIixcIiZNYXA7XCI6XCLipIVcIixcIiZNY3k7XCI6XCLQnFwiLFwiJk1lZGl1bVNwYWNlO1wiOlwi4oGfXCIsXCImTWVsbGludHJmO1wiOlwi4oSzXCIsXCImTWZyO1wiOlwi8J2UkFwiLFwiJk1pbnVzUGx1cztcIjpcIuKIk1wiLFwiJk1vcGY7XCI6XCLwnZWEXCIsXCImTXNjcjtcIjpcIuKEs1wiLFwiJk11O1wiOlwizpxcIixcIiZOSmN5O1wiOlwi0IpcIixcIiZOYWN1dGU7XCI6XCLFg1wiLFwiJk5jYXJvbjtcIjpcIsWHXCIsXCImTmNlZGlsO1wiOlwixYVcIixcIiZOY3k7XCI6XCLQnVwiLFwiJk5lZ2F0aXZlTWVkaXVtU3BhY2U7XCI6XCLigItcIixcIiZOZWdhdGl2ZVRoaWNrU3BhY2U7XCI6XCLigItcIixcIiZOZWdhdGl2ZVRoaW5TcGFjZTtcIjpcIuKAi1wiLFwiJk5lZ2F0aXZlVmVyeVRoaW5TcGFjZTtcIjpcIuKAi1wiLFwiJk5lc3RlZEdyZWF0ZXJHcmVhdGVyO1wiOlwi4omrXCIsXCImTmVzdGVkTGVzc0xlc3M7XCI6XCLiiapcIixcIiZOZXdMaW5lO1wiOlwiXFxuXCIsXCImTmZyO1wiOlwi8J2UkVwiLFwiJk5vQnJlYWs7XCI6XCLigaBcIixcIiZOb25CcmVha2luZ1NwYWNlO1wiOlwiwqBcIixcIiZOb3BmO1wiOlwi4oSVXCIsXCImTm90O1wiOlwi4qusXCIsXCImTm90Q29uZ3J1ZW50O1wiOlwi4omiXCIsXCImTm90Q3VwQ2FwO1wiOlwi4omtXCIsXCImTm90RG91YmxlVmVydGljYWxCYXI7XCI6XCLiiKZcIixcIiZOb3RFbGVtZW50O1wiOlwi4oiJXCIsXCImTm90RXF1YWw7XCI6XCLiiaBcIixcIiZOb3RFcXVhbFRpbGRlO1wiOlwi4omCzLhcIixcIiZOb3RFeGlzdHM7XCI6XCLiiIRcIixcIiZOb3RHcmVhdGVyO1wiOlwi4omvXCIsXCImTm90R3JlYXRlckVxdWFsO1wiOlwi4omxXCIsXCImTm90R3JlYXRlckZ1bGxFcXVhbDtcIjpcIuKJp8y4XCIsXCImTm90R3JlYXRlckdyZWF0ZXI7XCI6XCLiiavMuFwiLFwiJk5vdEdyZWF0ZXJMZXNzO1wiOlwi4om5XCIsXCImTm90R3JlYXRlclNsYW50RXF1YWw7XCI6XCLiqb7MuFwiLFwiJk5vdEdyZWF0ZXJUaWxkZTtcIjpcIuKJtVwiLFwiJk5vdEh1bXBEb3duSHVtcDtcIjpcIuKJjsy4XCIsXCImTm90SHVtcEVxdWFsO1wiOlwi4omPzLhcIixcIiZOb3RMZWZ0VHJpYW5nbGU7XCI6XCLii6pcIixcIiZOb3RMZWZ0VHJpYW5nbGVCYXI7XCI6XCLip4/MuFwiLFwiJk5vdExlZnRUcmlhbmdsZUVxdWFsO1wiOlwi4ousXCIsXCImTm90TGVzcztcIjpcIuKJrlwiLFwiJk5vdExlc3NFcXVhbDtcIjpcIuKJsFwiLFwiJk5vdExlc3NHcmVhdGVyO1wiOlwi4om4XCIsXCImTm90TGVzc0xlc3M7XCI6XCLiiarMuFwiLFwiJk5vdExlc3NTbGFudEVxdWFsO1wiOlwi4qm9zLhcIixcIiZOb3RMZXNzVGlsZGU7XCI6XCLiibRcIixcIiZOb3ROZXN0ZWRHcmVhdGVyR3JlYXRlcjtcIjpcIuKqosy4XCIsXCImTm90TmVzdGVkTGVzc0xlc3M7XCI6XCLiqqHMuFwiLFwiJk5vdFByZWNlZGVzO1wiOlwi4oqAXCIsXCImTm90UHJlY2VkZXNFcXVhbDtcIjpcIuKqr8y4XCIsXCImTm90UHJlY2VkZXNTbGFudEVxdWFsO1wiOlwi4ougXCIsXCImTm90UmV2ZXJzZUVsZW1lbnQ7XCI6XCLiiIxcIixcIiZOb3RSaWdodFRyaWFuZ2xlO1wiOlwi4ourXCIsXCImTm90UmlnaHRUcmlhbmdsZUJhcjtcIjpcIuKnkMy4XCIsXCImTm90UmlnaHRUcmlhbmdsZUVxdWFsO1wiOlwi4outXCIsXCImTm90U3F1YXJlU3Vic2V0O1wiOlwi4oqPzLhcIixcIiZOb3RTcXVhcmVTdWJzZXRFcXVhbDtcIjpcIuKLolwiLFwiJk5vdFNxdWFyZVN1cGVyc2V0O1wiOlwi4oqQzLhcIixcIiZOb3RTcXVhcmVTdXBlcnNldEVxdWFsO1wiOlwi4oujXCIsXCImTm90U3Vic2V0O1wiOlwi4oqC4oOSXCIsXCImTm90U3Vic2V0RXF1YWw7XCI6XCLiiohcIixcIiZOb3RTdWNjZWVkcztcIjpcIuKKgVwiLFwiJk5vdFN1Y2NlZWRzRXF1YWw7XCI6XCLiqrDMuFwiLFwiJk5vdFN1Y2NlZWRzU2xhbnRFcXVhbDtcIjpcIuKLoVwiLFwiJk5vdFN1Y2NlZWRzVGlsZGU7XCI6XCLiib/MuFwiLFwiJk5vdFN1cGVyc2V0O1wiOlwi4oqD4oOSXCIsXCImTm90U3VwZXJzZXRFcXVhbDtcIjpcIuKKiVwiLFwiJk5vdFRpbGRlO1wiOlwi4omBXCIsXCImTm90VGlsZGVFcXVhbDtcIjpcIuKJhFwiLFwiJk5vdFRpbGRlRnVsbEVxdWFsO1wiOlwi4omHXCIsXCImTm90VGlsZGVUaWxkZTtcIjpcIuKJiVwiLFwiJk5vdFZlcnRpY2FsQmFyO1wiOlwi4oikXCIsXCImTnNjcjtcIjpcIvCdkqlcIixcIiZOdGlsZGVcIjpcIsORXCIsXCImTnRpbGRlO1wiOlwiw5FcIixcIiZOdTtcIjpcIs6dXCIsXCImT0VsaWc7XCI6XCLFklwiLFwiJk9hY3V0ZVwiOlwiw5NcIixcIiZPYWN1dGU7XCI6XCLDk1wiLFwiJk9jaXJjXCI6XCLDlFwiLFwiJk9jaXJjO1wiOlwiw5RcIixcIiZPY3k7XCI6XCLQnlwiLFwiJk9kYmxhYztcIjpcIsWQXCIsXCImT2ZyO1wiOlwi8J2UklwiLFwiJk9ncmF2ZVwiOlwiw5JcIixcIiZPZ3JhdmU7XCI6XCLDklwiLFwiJk9tYWNyO1wiOlwixYxcIixcIiZPbWVnYTtcIjpcIs6pXCIsXCImT21pY3JvbjtcIjpcIs6fXCIsXCImT29wZjtcIjpcIvCdlYZcIixcIiZPcGVuQ3VybHlEb3VibGVRdW90ZTtcIjpcIuKAnFwiLFwiJk9wZW5DdXJseVF1b3RlO1wiOlwi4oCYXCIsXCImT3I7XCI6XCLiqZRcIixcIiZPc2NyO1wiOlwi8J2SqlwiLFwiJk9zbGFzaFwiOlwiw5hcIixcIiZPc2xhc2g7XCI6XCLDmFwiLFwiJk90aWxkZVwiOlwiw5VcIixcIiZPdGlsZGU7XCI6XCLDlVwiLFwiJk90aW1lcztcIjpcIuKot1wiLFwiJk91bWxcIjpcIsOWXCIsXCImT3VtbDtcIjpcIsOWXCIsXCImT3ZlckJhcjtcIjpcIuKAvlwiLFwiJk92ZXJCcmFjZTtcIjpcIuKPnlwiLFwiJk92ZXJCcmFja2V0O1wiOlwi4o60XCIsXCImT3ZlclBhcmVudGhlc2lzO1wiOlwi4o+cXCIsXCImUGFydGlhbEQ7XCI6XCLiiIJcIixcIiZQY3k7XCI6XCLQn1wiLFwiJlBmcjtcIjpcIvCdlJNcIixcIiZQaGk7XCI6XCLOplwiLFwiJlBpO1wiOlwizqBcIixcIiZQbHVzTWludXM7XCI6XCLCsVwiLFwiJlBvaW5jYXJlcGxhbmU7XCI6XCLihIxcIixcIiZQb3BmO1wiOlwi4oSZXCIsXCImUHI7XCI6XCLiqrtcIixcIiZQcmVjZWRlcztcIjpcIuKJulwiLFwiJlByZWNlZGVzRXF1YWw7XCI6XCLiqq9cIixcIiZQcmVjZWRlc1NsYW50RXF1YWw7XCI6XCLiibxcIixcIiZQcmVjZWRlc1RpbGRlO1wiOlwi4om+XCIsXCImUHJpbWU7XCI6XCLigLNcIixcIiZQcm9kdWN0O1wiOlwi4oiPXCIsXCImUHJvcG9ydGlvbjtcIjpcIuKIt1wiLFwiJlByb3BvcnRpb25hbDtcIjpcIuKInVwiLFwiJlBzY3I7XCI6XCLwnZKrXCIsXCImUHNpO1wiOlwizqhcIixcIiZRVU9UXCI6J1wiJyxcIiZRVU9UO1wiOidcIicsXCImUWZyO1wiOlwi8J2UlFwiLFwiJlFvcGY7XCI6XCLihJpcIixcIiZRc2NyO1wiOlwi8J2SrFwiLFwiJlJCYXJyO1wiOlwi4qSQXCIsXCImUkVHXCI6XCLCrlwiLFwiJlJFRztcIjpcIsKuXCIsXCImUmFjdXRlO1wiOlwixZRcIixcIiZSYW5nO1wiOlwi4p+rXCIsXCImUmFycjtcIjpcIuKGoFwiLFwiJlJhcnJ0bDtcIjpcIuKkllwiLFwiJlJjYXJvbjtcIjpcIsWYXCIsXCImUmNlZGlsO1wiOlwixZZcIixcIiZSY3k7XCI6XCLQoFwiLFwiJlJlO1wiOlwi4oScXCIsXCImUmV2ZXJzZUVsZW1lbnQ7XCI6XCLiiItcIixcIiZSZXZlcnNlRXF1aWxpYnJpdW07XCI6XCLih4tcIixcIiZSZXZlcnNlVXBFcXVpbGlicml1bTtcIjpcIuKlr1wiLFwiJlJmcjtcIjpcIuKEnFwiLFwiJlJobztcIjpcIs6hXCIsXCImUmlnaHRBbmdsZUJyYWNrZXQ7XCI6XCLin6lcIixcIiZSaWdodEFycm93O1wiOlwi4oaSXCIsXCImUmlnaHRBcnJvd0JhcjtcIjpcIuKHpVwiLFwiJlJpZ2h0QXJyb3dMZWZ0QXJyb3c7XCI6XCLih4RcIixcIiZSaWdodENlaWxpbmc7XCI6XCLijIlcIixcIiZSaWdodERvdWJsZUJyYWNrZXQ7XCI6XCLin6dcIixcIiZSaWdodERvd25UZWVWZWN0b3I7XCI6XCLipZ1cIixcIiZSaWdodERvd25WZWN0b3I7XCI6XCLih4JcIixcIiZSaWdodERvd25WZWN0b3JCYXI7XCI6XCLipZVcIixcIiZSaWdodEZsb29yO1wiOlwi4oyLXCIsXCImUmlnaHRUZWU7XCI6XCLiiqJcIixcIiZSaWdodFRlZUFycm93O1wiOlwi4oamXCIsXCImUmlnaHRUZWVWZWN0b3I7XCI6XCLipZtcIixcIiZSaWdodFRyaWFuZ2xlO1wiOlwi4oqzXCIsXCImUmlnaHRUcmlhbmdsZUJhcjtcIjpcIuKnkFwiLFwiJlJpZ2h0VHJpYW5nbGVFcXVhbDtcIjpcIuKKtVwiLFwiJlJpZ2h0VXBEb3duVmVjdG9yO1wiOlwi4qWPXCIsXCImUmlnaHRVcFRlZVZlY3RvcjtcIjpcIuKlnFwiLFwiJlJpZ2h0VXBWZWN0b3I7XCI6XCLihr5cIixcIiZSaWdodFVwVmVjdG9yQmFyO1wiOlwi4qWUXCIsXCImUmlnaHRWZWN0b3I7XCI6XCLih4BcIixcIiZSaWdodFZlY3RvckJhcjtcIjpcIuKlk1wiLFwiJlJpZ2h0YXJyb3c7XCI6XCLih5JcIixcIiZSb3BmO1wiOlwi4oSdXCIsXCImUm91bmRJbXBsaWVzO1wiOlwi4qWwXCIsXCImUnJpZ2h0YXJyb3c7XCI6XCLih5tcIixcIiZSc2NyO1wiOlwi4oSbXCIsXCImUnNoO1wiOlwi4oaxXCIsXCImUnVsZURlbGF5ZWQ7XCI6XCLip7RcIixcIiZTSENIY3k7XCI6XCLQqVwiLFwiJlNIY3k7XCI6XCLQqFwiLFwiJlNPRlRjeTtcIjpcItCsXCIsXCImU2FjdXRlO1wiOlwixZpcIixcIiZTYztcIjpcIuKqvFwiLFwiJlNjYXJvbjtcIjpcIsWgXCIsXCImU2NlZGlsO1wiOlwixZ5cIixcIiZTY2lyYztcIjpcIsWcXCIsXCImU2N5O1wiOlwi0KFcIixcIiZTZnI7XCI6XCLwnZSWXCIsXCImU2hvcnREb3duQXJyb3c7XCI6XCLihpNcIixcIiZTaG9ydExlZnRBcnJvdztcIjpcIuKGkFwiLFwiJlNob3J0UmlnaHRBcnJvdztcIjpcIuKGklwiLFwiJlNob3J0VXBBcnJvdztcIjpcIuKGkVwiLFwiJlNpZ21hO1wiOlwizqNcIixcIiZTbWFsbENpcmNsZTtcIjpcIuKImFwiLFwiJlNvcGY7XCI6XCLwnZWKXCIsXCImU3FydDtcIjpcIuKImlwiLFwiJlNxdWFyZTtcIjpcIuKWoVwiLFwiJlNxdWFyZUludGVyc2VjdGlvbjtcIjpcIuKKk1wiLFwiJlNxdWFyZVN1YnNldDtcIjpcIuKKj1wiLFwiJlNxdWFyZVN1YnNldEVxdWFsO1wiOlwi4oqRXCIsXCImU3F1YXJlU3VwZXJzZXQ7XCI6XCLiipBcIixcIiZTcXVhcmVTdXBlcnNldEVxdWFsO1wiOlwi4oqSXCIsXCImU3F1YXJlVW5pb247XCI6XCLiipRcIixcIiZTc2NyO1wiOlwi8J2SrlwiLFwiJlN0YXI7XCI6XCLii4ZcIixcIiZTdWI7XCI6XCLii5BcIixcIiZTdWJzZXQ7XCI6XCLii5BcIixcIiZTdWJzZXRFcXVhbDtcIjpcIuKKhlwiLFwiJlN1Y2NlZWRzO1wiOlwi4om7XCIsXCImU3VjY2VlZHNFcXVhbDtcIjpcIuKqsFwiLFwiJlN1Y2NlZWRzU2xhbnRFcXVhbDtcIjpcIuKJvVwiLFwiJlN1Y2NlZWRzVGlsZGU7XCI6XCLiib9cIixcIiZTdWNoVGhhdDtcIjpcIuKIi1wiLFwiJlN1bTtcIjpcIuKIkVwiLFwiJlN1cDtcIjpcIuKLkVwiLFwiJlN1cGVyc2V0O1wiOlwi4oqDXCIsXCImU3VwZXJzZXRFcXVhbDtcIjpcIuKKh1wiLFwiJlN1cHNldDtcIjpcIuKLkVwiLFwiJlRIT1JOXCI6XCLDnlwiLFwiJlRIT1JOO1wiOlwiw55cIixcIiZUUkFERTtcIjpcIuKEolwiLFwiJlRTSGN5O1wiOlwi0ItcIixcIiZUU2N5O1wiOlwi0KZcIixcIiZUYWI7XCI6XCJcXHRcIixcIiZUYXU7XCI6XCLOpFwiLFwiJlRjYXJvbjtcIjpcIsWkXCIsXCImVGNlZGlsO1wiOlwixaJcIixcIiZUY3k7XCI6XCLQolwiLFwiJlRmcjtcIjpcIvCdlJdcIixcIiZUaGVyZWZvcmU7XCI6XCLiiLRcIixcIiZUaGV0YTtcIjpcIs6YXCIsXCImVGhpY2tTcGFjZTtcIjpcIuKBn+KAilwiLFwiJlRoaW5TcGFjZTtcIjpcIuKAiVwiLFwiJlRpbGRlO1wiOlwi4oi8XCIsXCImVGlsZGVFcXVhbDtcIjpcIuKJg1wiLFwiJlRpbGRlRnVsbEVxdWFsO1wiOlwi4omFXCIsXCImVGlsZGVUaWxkZTtcIjpcIuKJiFwiLFwiJlRvcGY7XCI6XCLwnZWLXCIsXCImVHJpcGxlRG90O1wiOlwi4oObXCIsXCImVHNjcjtcIjpcIvCdkq9cIixcIiZUc3Ryb2s7XCI6XCLFplwiLFwiJlVhY3V0ZVwiOlwiw5pcIixcIiZVYWN1dGU7XCI6XCLDmlwiLFwiJlVhcnI7XCI6XCLihp9cIixcIiZVYXJyb2NpcjtcIjpcIuKliVwiLFwiJlVicmN5O1wiOlwi0I5cIixcIiZVYnJldmU7XCI6XCLFrFwiLFwiJlVjaXJjXCI6XCLDm1wiLFwiJlVjaXJjO1wiOlwiw5tcIixcIiZVY3k7XCI6XCLQo1wiLFwiJlVkYmxhYztcIjpcIsWwXCIsXCImVWZyO1wiOlwi8J2UmFwiLFwiJlVncmF2ZVwiOlwiw5lcIixcIiZVZ3JhdmU7XCI6XCLDmVwiLFwiJlVtYWNyO1wiOlwixapcIixcIiZVbmRlckJhcjtcIjpcIl9cIixcIiZVbmRlckJyYWNlO1wiOlwi4o+fXCIsXCImVW5kZXJCcmFja2V0O1wiOlwi4o61XCIsXCImVW5kZXJQYXJlbnRoZXNpcztcIjpcIuKPnVwiLFwiJlVuaW9uO1wiOlwi4ouDXCIsXCImVW5pb25QbHVzO1wiOlwi4oqOXCIsXCImVW9nb247XCI6XCLFslwiLFwiJlVvcGY7XCI6XCLwnZWMXCIsXCImVXBBcnJvdztcIjpcIuKGkVwiLFwiJlVwQXJyb3dCYXI7XCI6XCLipJJcIixcIiZVcEFycm93RG93bkFycm93O1wiOlwi4oeFXCIsXCImVXBEb3duQXJyb3c7XCI6XCLihpVcIixcIiZVcEVxdWlsaWJyaXVtO1wiOlwi4qWuXCIsXCImVXBUZWU7XCI6XCLiiqVcIixcIiZVcFRlZUFycm93O1wiOlwi4oalXCIsXCImVXBhcnJvdztcIjpcIuKHkVwiLFwiJlVwZG93bmFycm93O1wiOlwi4oeVXCIsXCImVXBwZXJMZWZ0QXJyb3c7XCI6XCLihpZcIixcIiZVcHBlclJpZ2h0QXJyb3c7XCI6XCLihpdcIixcIiZVcHNpO1wiOlwiz5JcIixcIiZVcHNpbG9uO1wiOlwizqVcIixcIiZVcmluZztcIjpcIsWuXCIsXCImVXNjcjtcIjpcIvCdkrBcIixcIiZVdGlsZGU7XCI6XCLFqFwiLFwiJlV1bWxcIjpcIsOcXCIsXCImVXVtbDtcIjpcIsOcXCIsXCImVkRhc2g7XCI6XCLiiqtcIixcIiZWYmFyO1wiOlwi4qurXCIsXCImVmN5O1wiOlwi0JJcIixcIiZWZGFzaDtcIjpcIuKKqVwiLFwiJlZkYXNobDtcIjpcIuKrplwiLFwiJlZlZTtcIjpcIuKLgVwiLFwiJlZlcmJhcjtcIjpcIuKAllwiLFwiJlZlcnQ7XCI6XCLigJZcIixcIiZWZXJ0aWNhbEJhcjtcIjpcIuKIo1wiLFwiJlZlcnRpY2FsTGluZTtcIjpcInxcIixcIiZWZXJ0aWNhbFNlcGFyYXRvcjtcIjpcIuKdmFwiLFwiJlZlcnRpY2FsVGlsZGU7XCI6XCLiiYBcIixcIiZWZXJ5VGhpblNwYWNlO1wiOlwi4oCKXCIsXCImVmZyO1wiOlwi8J2UmVwiLFwiJlZvcGY7XCI6XCLwnZWNXCIsXCImVnNjcjtcIjpcIvCdkrFcIixcIiZWdmRhc2g7XCI6XCLiiqpcIixcIiZXY2lyYztcIjpcIsW0XCIsXCImV2VkZ2U7XCI6XCLii4BcIixcIiZXZnI7XCI6XCLwnZSaXCIsXCImV29wZjtcIjpcIvCdlY5cIixcIiZXc2NyO1wiOlwi8J2SslwiLFwiJlhmcjtcIjpcIvCdlJtcIixcIiZYaTtcIjpcIs6eXCIsXCImWG9wZjtcIjpcIvCdlY9cIixcIiZYc2NyO1wiOlwi8J2Ss1wiLFwiJllBY3k7XCI6XCLQr1wiLFwiJllJY3k7XCI6XCLQh1wiLFwiJllVY3k7XCI6XCLQrlwiLFwiJllhY3V0ZVwiOlwiw51cIixcIiZZYWN1dGU7XCI6XCLDnVwiLFwiJlljaXJjO1wiOlwixbZcIixcIiZZY3k7XCI6XCLQq1wiLFwiJllmcjtcIjpcIvCdlJxcIixcIiZZb3BmO1wiOlwi8J2VkFwiLFwiJllzY3I7XCI6XCLwnZK0XCIsXCImWXVtbDtcIjpcIsW4XCIsXCImWkhjeTtcIjpcItCWXCIsXCImWmFjdXRlO1wiOlwixblcIixcIiZaY2Fyb247XCI6XCLFvVwiLFwiJlpjeTtcIjpcItCXXCIsXCImWmRvdDtcIjpcIsW7XCIsXCImWmVyb1dpZHRoU3BhY2U7XCI6XCLigItcIixcIiZaZXRhO1wiOlwizpZcIixcIiZaZnI7XCI6XCLihKhcIixcIiZab3BmO1wiOlwi4oSkXCIsXCImWnNjcjtcIjpcIvCdkrVcIixcIiZhYWN1dGVcIjpcIsOhXCIsXCImYWFjdXRlO1wiOlwiw6FcIixcIiZhYnJldmU7XCI6XCLEg1wiLFwiJmFjO1wiOlwi4oi+XCIsXCImYWNFO1wiOlwi4oi+zLNcIixcIiZhY2Q7XCI6XCLiiL9cIixcIiZhY2lyY1wiOlwiw6JcIixcIiZhY2lyYztcIjpcIsOiXCIsXCImYWN1dGVcIjpcIsK0XCIsXCImYWN1dGU7XCI6XCLCtFwiLFwiJmFjeTtcIjpcItCwXCIsXCImYWVsaWdcIjpcIsOmXCIsXCImYWVsaWc7XCI6XCLDplwiLFwiJmFmO1wiOlwi4oGhXCIsXCImYWZyO1wiOlwi8J2UnlwiLFwiJmFncmF2ZVwiOlwiw6BcIixcIiZhZ3JhdmU7XCI6XCLDoFwiLFwiJmFsZWZzeW07XCI6XCLihLVcIixcIiZhbGVwaDtcIjpcIuKEtVwiLFwiJmFscGhhO1wiOlwizrFcIixcIiZhbWFjcjtcIjpcIsSBXCIsXCImYW1hbGc7XCI6XCLiqL9cIixcIiZhbXBcIjpcIiZcIixcIiZhbXA7XCI6XCImXCIsXCImYW5kO1wiOlwi4oinXCIsXCImYW5kYW5kO1wiOlwi4qmVXCIsXCImYW5kZDtcIjpcIuKpnFwiLFwiJmFuZHNsb3BlO1wiOlwi4qmYXCIsXCImYW5kdjtcIjpcIuKpmlwiLFwiJmFuZztcIjpcIuKIoFwiLFwiJmFuZ2U7XCI6XCLipqRcIixcIiZhbmdsZTtcIjpcIuKIoFwiLFwiJmFuZ21zZDtcIjpcIuKIoVwiLFwiJmFuZ21zZGFhO1wiOlwi4qaoXCIsXCImYW5nbXNkYWI7XCI6XCLipqlcIixcIiZhbmdtc2RhYztcIjpcIuKmqlwiLFwiJmFuZ21zZGFkO1wiOlwi4qarXCIsXCImYW5nbXNkYWU7XCI6XCLipqxcIixcIiZhbmdtc2RhZjtcIjpcIuKmrVwiLFwiJmFuZ21zZGFnO1wiOlwi4qauXCIsXCImYW5nbXNkYWg7XCI6XCLipq9cIixcIiZhbmdydDtcIjpcIuKIn1wiLFwiJmFuZ3J0dmI7XCI6XCLiir5cIixcIiZhbmdydHZiZDtcIjpcIuKmnVwiLFwiJmFuZ3NwaDtcIjpcIuKIolwiLFwiJmFuZ3N0O1wiOlwiw4VcIixcIiZhbmd6YXJyO1wiOlwi4o28XCIsXCImYW9nb247XCI6XCLEhVwiLFwiJmFvcGY7XCI6XCLwnZWSXCIsXCImYXA7XCI6XCLiiYhcIixcIiZhcEU7XCI6XCLiqbBcIixcIiZhcGFjaXI7XCI6XCLiqa9cIixcIiZhcGU7XCI6XCLiiYpcIixcIiZhcGlkO1wiOlwi4omLXCIsXCImYXBvcztcIjpcIidcIixcIiZhcHByb3g7XCI6XCLiiYhcIixcIiZhcHByb3hlcTtcIjpcIuKJilwiLFwiJmFyaW5nXCI6XCLDpVwiLFwiJmFyaW5nO1wiOlwiw6VcIixcIiZhc2NyO1wiOlwi8J2StlwiLFwiJmFzdDtcIjpcIipcIixcIiZhc3ltcDtcIjpcIuKJiFwiLFwiJmFzeW1wZXE7XCI6XCLiiY1cIixcIiZhdGlsZGVcIjpcIsOjXCIsXCImYXRpbGRlO1wiOlwiw6NcIixcIiZhdW1sXCI6XCLDpFwiLFwiJmF1bWw7XCI6XCLDpFwiLFwiJmF3Y29uaW50O1wiOlwi4oizXCIsXCImYXdpbnQ7XCI6XCLiqJFcIixcIiZiTm90O1wiOlwi4qutXCIsXCImYmFja2Nvbmc7XCI6XCLiiYxcIixcIiZiYWNrZXBzaWxvbjtcIjpcIs+2XCIsXCImYmFja3ByaW1lO1wiOlwi4oC1XCIsXCImYmFja3NpbTtcIjpcIuKIvVwiLFwiJmJhY2tzaW1lcTtcIjpcIuKLjVwiLFwiJmJhcnZlZTtcIjpcIuKKvVwiLFwiJmJhcndlZDtcIjpcIuKMhVwiLFwiJmJhcndlZGdlO1wiOlwi4oyFXCIsXCImYmJyaztcIjpcIuKOtVwiLFwiJmJicmt0YnJrO1wiOlwi4o62XCIsXCImYmNvbmc7XCI6XCLiiYxcIixcIiZiY3k7XCI6XCLQsVwiLFwiJmJkcXVvO1wiOlwi4oCeXCIsXCImYmVjYXVzO1wiOlwi4oi1XCIsXCImYmVjYXVzZTtcIjpcIuKItVwiLFwiJmJlbXB0eXY7XCI6XCLiprBcIixcIiZiZXBzaTtcIjpcIs+2XCIsXCImYmVybm91O1wiOlwi4oSsXCIsXCImYmV0YTtcIjpcIs6yXCIsXCImYmV0aDtcIjpcIuKEtlwiLFwiJmJldHdlZW47XCI6XCLiiaxcIixcIiZiZnI7XCI6XCLwnZSfXCIsXCImYmlnY2FwO1wiOlwi4ouCXCIsXCImYmlnY2lyYztcIjpcIuKXr1wiLFwiJmJpZ2N1cDtcIjpcIuKLg1wiLFwiJmJpZ29kb3Q7XCI6XCLiqIBcIixcIiZiaWdvcGx1cztcIjpcIuKogVwiLFwiJmJpZ290aW1lcztcIjpcIuKoglwiLFwiJmJpZ3NxY3VwO1wiOlwi4qiGXCIsXCImYmlnc3RhcjtcIjpcIuKYhVwiLFwiJmJpZ3RyaWFuZ2xlZG93bjtcIjpcIuKWvVwiLFwiJmJpZ3RyaWFuZ2xldXA7XCI6XCLilrNcIixcIiZiaWd1cGx1cztcIjpcIuKohFwiLFwiJmJpZ3ZlZTtcIjpcIuKLgVwiLFwiJmJpZ3dlZGdlO1wiOlwi4ouAXCIsXCImYmthcm93O1wiOlwi4qSNXCIsXCImYmxhY2tsb3plbmdlO1wiOlwi4qerXCIsXCImYmxhY2tzcXVhcmU7XCI6XCLilqpcIixcIiZibGFja3RyaWFuZ2xlO1wiOlwi4pa0XCIsXCImYmxhY2t0cmlhbmdsZWRvd247XCI6XCLilr5cIixcIiZibGFja3RyaWFuZ2xlbGVmdDtcIjpcIuKXglwiLFwiJmJsYWNrdHJpYW5nbGVyaWdodDtcIjpcIuKWuFwiLFwiJmJsYW5rO1wiOlwi4pCjXCIsXCImYmxrMTI7XCI6XCLilpJcIixcIiZibGsxNDtcIjpcIuKWkVwiLFwiJmJsazM0O1wiOlwi4paTXCIsXCImYmxvY2s7XCI6XCLilohcIixcIiZibmU7XCI6XCI94oOlXCIsXCImYm5lcXVpdjtcIjpcIuKJoeKDpVwiLFwiJmJub3Q7XCI6XCLijJBcIixcIiZib3BmO1wiOlwi8J2Vk1wiLFwiJmJvdDtcIjpcIuKKpVwiLFwiJmJvdHRvbTtcIjpcIuKKpVwiLFwiJmJvd3RpZTtcIjpcIuKLiFwiLFwiJmJveERMO1wiOlwi4pWXXCIsXCImYm94RFI7XCI6XCLilZRcIixcIiZib3hEbDtcIjpcIuKVllwiLFwiJmJveERyO1wiOlwi4pWTXCIsXCImYm94SDtcIjpcIuKVkFwiLFwiJmJveEhEO1wiOlwi4pWmXCIsXCImYm94SFU7XCI6XCLilalcIixcIiZib3hIZDtcIjpcIuKVpFwiLFwiJmJveEh1O1wiOlwi4pWnXCIsXCImYm94VUw7XCI6XCLilZ1cIixcIiZib3hVUjtcIjpcIuKVmlwiLFwiJmJveFVsO1wiOlwi4pWcXCIsXCImYm94VXI7XCI6XCLilZlcIixcIiZib3hWO1wiOlwi4pWRXCIsXCImYm94Vkg7XCI6XCLilaxcIixcIiZib3hWTDtcIjpcIuKVo1wiLFwiJmJveFZSO1wiOlwi4pWgXCIsXCImYm94Vmg7XCI6XCLilatcIixcIiZib3hWbDtcIjpcIuKVolwiLFwiJmJveFZyO1wiOlwi4pWfXCIsXCImYm94Ym94O1wiOlwi4qeJXCIsXCImYm94ZEw7XCI6XCLilZVcIixcIiZib3hkUjtcIjpcIuKVklwiLFwiJmJveGRsO1wiOlwi4pSQXCIsXCImYm94ZHI7XCI6XCLilIxcIixcIiZib3hoO1wiOlwi4pSAXCIsXCImYm94aEQ7XCI6XCLilaVcIixcIiZib3hoVTtcIjpcIuKVqFwiLFwiJmJveGhkO1wiOlwi4pSsXCIsXCImYm94aHU7XCI6XCLilLRcIixcIiZib3htaW51cztcIjpcIuKKn1wiLFwiJmJveHBsdXM7XCI6XCLiip5cIixcIiZib3h0aW1lcztcIjpcIuKKoFwiLFwiJmJveHVMO1wiOlwi4pWbXCIsXCImYm94dVI7XCI6XCLilZhcIixcIiZib3h1bDtcIjpcIuKUmFwiLFwiJmJveHVyO1wiOlwi4pSUXCIsXCImYm94djtcIjpcIuKUglwiLFwiJmJveHZIO1wiOlwi4pWqXCIsXCImYm94dkw7XCI6XCLilaFcIixcIiZib3h2UjtcIjpcIuKVnlwiLFwiJmJveHZoO1wiOlwi4pS8XCIsXCImYm94dmw7XCI6XCLilKRcIixcIiZib3h2cjtcIjpcIuKUnFwiLFwiJmJwcmltZTtcIjpcIuKAtVwiLFwiJmJyZXZlO1wiOlwiy5hcIixcIiZicnZiYXJcIjpcIsKmXCIsXCImYnJ2YmFyO1wiOlwiwqZcIixcIiZic2NyO1wiOlwi8J2St1wiLFwiJmJzZW1pO1wiOlwi4oGPXCIsXCImYnNpbTtcIjpcIuKIvVwiLFwiJmJzaW1lO1wiOlwi4ouNXCIsXCImYnNvbDtcIjpcIlxcXFxcIixcIiZic29sYjtcIjpcIuKnhVwiLFwiJmJzb2xoc3ViO1wiOlwi4p+IXCIsXCImYnVsbDtcIjpcIuKAolwiLFwiJmJ1bGxldDtcIjpcIuKAolwiLFwiJmJ1bXA7XCI6XCLiiY5cIixcIiZidW1wRTtcIjpcIuKqrlwiLFwiJmJ1bXBlO1wiOlwi4omPXCIsXCImYnVtcGVxO1wiOlwi4omPXCIsXCImY2FjdXRlO1wiOlwixIdcIixcIiZjYXA7XCI6XCLiiKlcIixcIiZjYXBhbmQ7XCI6XCLiqYRcIixcIiZjYXBicmN1cDtcIjpcIuKpiVwiLFwiJmNhcGNhcDtcIjpcIuKpi1wiLFwiJmNhcGN1cDtcIjpcIuKph1wiLFwiJmNhcGRvdDtcIjpcIuKpgFwiLFwiJmNhcHM7XCI6XCLiiKnvuIBcIixcIiZjYXJldDtcIjpcIuKBgVwiLFwiJmNhcm9uO1wiOlwiy4dcIixcIiZjY2FwcztcIjpcIuKpjVwiLFwiJmNjYXJvbjtcIjpcIsSNXCIsXCImY2NlZGlsXCI6XCLDp1wiLFwiJmNjZWRpbDtcIjpcIsOnXCIsXCImY2NpcmM7XCI6XCLEiVwiLFwiJmNjdXBzO1wiOlwi4qmMXCIsXCImY2N1cHNzbTtcIjpcIuKpkFwiLFwiJmNkb3Q7XCI6XCLEi1wiLFwiJmNlZGlsXCI6XCLCuFwiLFwiJmNlZGlsO1wiOlwiwrhcIixcIiZjZW1wdHl2O1wiOlwi4qayXCIsXCImY2VudFwiOlwiwqJcIixcIiZjZW50O1wiOlwiwqJcIixcIiZjZW50ZXJkb3Q7XCI6XCLCt1wiLFwiJmNmcjtcIjpcIvCdlKBcIixcIiZjaGN5O1wiOlwi0YdcIixcIiZjaGVjaztcIjpcIuKck1wiLFwiJmNoZWNrbWFyaztcIjpcIuKck1wiLFwiJmNoaTtcIjpcIs+HXCIsXCImY2lyO1wiOlwi4peLXCIsXCImY2lyRTtcIjpcIuKng1wiLFwiJmNpcmM7XCI6XCLLhlwiLFwiJmNpcmNlcTtcIjpcIuKJl1wiLFwiJmNpcmNsZWFycm93bGVmdDtcIjpcIuKGulwiLFwiJmNpcmNsZWFycm93cmlnaHQ7XCI6XCLihrtcIixcIiZjaXJjbGVkUjtcIjpcIsKuXCIsXCImY2lyY2xlZFM7XCI6XCLik4hcIixcIiZjaXJjbGVkYXN0O1wiOlwi4oqbXCIsXCImY2lyY2xlZGNpcmM7XCI6XCLiippcIixcIiZjaXJjbGVkZGFzaDtcIjpcIuKKnVwiLFwiJmNpcmU7XCI6XCLiiZdcIixcIiZjaXJmbmludDtcIjpcIuKokFwiLFwiJmNpcm1pZDtcIjpcIuKrr1wiLFwiJmNpcnNjaXI7XCI6XCLip4JcIixcIiZjbHVicztcIjpcIuKZo1wiLFwiJmNsdWJzdWl0O1wiOlwi4pmjXCIsXCImY29sb247XCI6XCI6XCIsXCImY29sb25lO1wiOlwi4omUXCIsXCImY29sb25lcTtcIjpcIuKJlFwiLFwiJmNvbW1hO1wiOlwiLFwiLFwiJmNvbW1hdDtcIjpcIkBcIixcIiZjb21wO1wiOlwi4oiBXCIsXCImY29tcGZuO1wiOlwi4oiYXCIsXCImY29tcGxlbWVudDtcIjpcIuKIgVwiLFwiJmNvbXBsZXhlcztcIjpcIuKEglwiLFwiJmNvbmc7XCI6XCLiiYVcIixcIiZjb25nZG90O1wiOlwi4qmtXCIsXCImY29uaW50O1wiOlwi4oiuXCIsXCImY29wZjtcIjpcIvCdlZRcIixcIiZjb3Byb2Q7XCI6XCLiiJBcIixcIiZjb3B5XCI6XCLCqVwiLFwiJmNvcHk7XCI6XCLCqVwiLFwiJmNvcHlzcjtcIjpcIuKEl1wiLFwiJmNyYXJyO1wiOlwi4oa1XCIsXCImY3Jvc3M7XCI6XCLinJdcIixcIiZjc2NyO1wiOlwi8J2SuFwiLFwiJmNzdWI7XCI6XCLiq49cIixcIiZjc3ViZTtcIjpcIuKrkVwiLFwiJmNzdXA7XCI6XCLiq5BcIixcIiZjc3VwZTtcIjpcIuKrklwiLFwiJmN0ZG90O1wiOlwi4ouvXCIsXCImY3VkYXJybDtcIjpcIuKkuFwiLFwiJmN1ZGFycnI7XCI6XCLipLVcIixcIiZjdWVwcjtcIjpcIuKLnlwiLFwiJmN1ZXNjO1wiOlwi4oufXCIsXCImY3VsYXJyO1wiOlwi4oa2XCIsXCImY3VsYXJycDtcIjpcIuKkvVwiLFwiJmN1cDtcIjpcIuKIqlwiLFwiJmN1cGJyY2FwO1wiOlwi4qmIXCIsXCImY3VwY2FwO1wiOlwi4qmGXCIsXCImY3VwY3VwO1wiOlwi4qmKXCIsXCImY3VwZG90O1wiOlwi4oqNXCIsXCImY3Vwb3I7XCI6XCLiqYVcIixcIiZjdXBzO1wiOlwi4oiq77iAXCIsXCImY3VyYXJyO1wiOlwi4oa3XCIsXCImY3VyYXJybTtcIjpcIuKkvFwiLFwiJmN1cmx5ZXFwcmVjO1wiOlwi4oueXCIsXCImY3VybHllcXN1Y2M7XCI6XCLii59cIixcIiZjdXJseXZlZTtcIjpcIuKLjlwiLFwiJmN1cmx5d2VkZ2U7XCI6XCLii49cIixcIiZjdXJyZW5cIjpcIsKkXCIsXCImY3VycmVuO1wiOlwiwqRcIixcIiZjdXJ2ZWFycm93bGVmdDtcIjpcIuKGtlwiLFwiJmN1cnZlYXJyb3dyaWdodDtcIjpcIuKGt1wiLFwiJmN1dmVlO1wiOlwi4ouOXCIsXCImY3V3ZWQ7XCI6XCLii49cIixcIiZjd2NvbmludDtcIjpcIuKIslwiLFwiJmN3aW50O1wiOlwi4oixXCIsXCImY3lsY3R5O1wiOlwi4oytXCIsXCImZEFycjtcIjpcIuKHk1wiLFwiJmRIYXI7XCI6XCLipaVcIixcIiZkYWdnZXI7XCI6XCLigKBcIixcIiZkYWxldGg7XCI6XCLihLhcIixcIiZkYXJyO1wiOlwi4oaTXCIsXCImZGFzaDtcIjpcIuKAkFwiLFwiJmRhc2h2O1wiOlwi4oqjXCIsXCImZGJrYXJvdztcIjpcIuKkj1wiLFwiJmRibGFjO1wiOlwiy51cIixcIiZkY2Fyb247XCI6XCLEj1wiLFwiJmRjeTtcIjpcItC0XCIsXCImZGQ7XCI6XCLihYZcIixcIiZkZGFnZ2VyO1wiOlwi4oChXCIsXCImZGRhcnI7XCI6XCLih4pcIixcIiZkZG90c2VxO1wiOlwi4qm3XCIsXCImZGVnXCI6XCLCsFwiLFwiJmRlZztcIjpcIsKwXCIsXCImZGVsdGE7XCI6XCLOtFwiLFwiJmRlbXB0eXY7XCI6XCLiprFcIixcIiZkZmlzaHQ7XCI6XCLipb9cIixcIiZkZnI7XCI6XCLwnZShXCIsXCImZGhhcmw7XCI6XCLih4NcIixcIiZkaGFycjtcIjpcIuKHglwiLFwiJmRpYW07XCI6XCLii4RcIixcIiZkaWFtb25kO1wiOlwi4ouEXCIsXCImZGlhbW9uZHN1aXQ7XCI6XCLimaZcIixcIiZkaWFtcztcIjpcIuKZplwiLFwiJmRpZTtcIjpcIsKoXCIsXCImZGlnYW1tYTtcIjpcIs+dXCIsXCImZGlzaW47XCI6XCLii7JcIixcIiZkaXY7XCI6XCLDt1wiLFwiJmRpdmlkZVwiOlwiw7dcIixcIiZkaXZpZGU7XCI6XCLDt1wiLFwiJmRpdmlkZW9udGltZXM7XCI6XCLii4dcIixcIiZkaXZvbng7XCI6XCLii4dcIixcIiZkamN5O1wiOlwi0ZJcIixcIiZkbGNvcm47XCI6XCLijJ5cIixcIiZkbGNyb3A7XCI6XCLijI1cIixcIiZkb2xsYXI7XCI6XCIkXCIsXCImZG9wZjtcIjpcIvCdlZVcIixcIiZkb3Q7XCI6XCLLmVwiLFwiJmRvdGVxO1wiOlwi4omQXCIsXCImZG90ZXFkb3Q7XCI6XCLiiZFcIixcIiZkb3RtaW51cztcIjpcIuKIuFwiLFwiJmRvdHBsdXM7XCI6XCLiiJRcIixcIiZkb3RzcXVhcmU7XCI6XCLiiqFcIixcIiZkb3VibGViYXJ3ZWRnZTtcIjpcIuKMhlwiLFwiJmRvd25hcnJvdztcIjpcIuKGk1wiLFwiJmRvd25kb3duYXJyb3dzO1wiOlwi4oeKXCIsXCImZG93bmhhcnBvb25sZWZ0O1wiOlwi4oeDXCIsXCImZG93bmhhcnBvb25yaWdodDtcIjpcIuKHglwiLFwiJmRyYmthcm93O1wiOlwi4qSQXCIsXCImZHJjb3JuO1wiOlwi4oyfXCIsXCImZHJjcm9wO1wiOlwi4oyMXCIsXCImZHNjcjtcIjpcIvCdkrlcIixcIiZkc2N5O1wiOlwi0ZVcIixcIiZkc29sO1wiOlwi4qe2XCIsXCImZHN0cm9rO1wiOlwixJFcIixcIiZkdGRvdDtcIjpcIuKLsVwiLFwiJmR0cmk7XCI6XCLilr9cIixcIiZkdHJpZjtcIjpcIuKWvlwiLFwiJmR1YXJyO1wiOlwi4oe1XCIsXCImZHVoYXI7XCI6XCLipa9cIixcIiZkd2FuZ2xlO1wiOlwi4qamXCIsXCImZHpjeTtcIjpcItGfXCIsXCImZHppZ3JhcnI7XCI6XCLin79cIixcIiZlRERvdDtcIjpcIuKpt1wiLFwiJmVEb3Q7XCI6XCLiiZFcIixcIiZlYWN1dGVcIjpcIsOpXCIsXCImZWFjdXRlO1wiOlwiw6lcIixcIiZlYXN0ZXI7XCI6XCLiqa5cIixcIiZlY2Fyb247XCI6XCLEm1wiLFwiJmVjaXI7XCI6XCLiiZZcIixcIiZlY2lyY1wiOlwiw6pcIixcIiZlY2lyYztcIjpcIsOqXCIsXCImZWNvbG9uO1wiOlwi4omVXCIsXCImZWN5O1wiOlwi0Y1cIixcIiZlZG90O1wiOlwixJdcIixcIiZlZTtcIjpcIuKFh1wiLFwiJmVmRG90O1wiOlwi4omSXCIsXCImZWZyO1wiOlwi8J2UolwiLFwiJmVnO1wiOlwi4qqaXCIsXCImZWdyYXZlXCI6XCLDqFwiLFwiJmVncmF2ZTtcIjpcIsOoXCIsXCImZWdzO1wiOlwi4qqWXCIsXCImZWdzZG90O1wiOlwi4qqYXCIsXCImZWw7XCI6XCLiqplcIixcIiZlbGludGVycztcIjpcIuKPp1wiLFwiJmVsbDtcIjpcIuKEk1wiLFwiJmVscztcIjpcIuKqlVwiLFwiJmVsc2RvdDtcIjpcIuKql1wiLFwiJmVtYWNyO1wiOlwixJNcIixcIiZlbXB0eTtcIjpcIuKIhVwiLFwiJmVtcHR5c2V0O1wiOlwi4oiFXCIsXCImZW1wdHl2O1wiOlwi4oiFXCIsXCImZW1zcDEzO1wiOlwi4oCEXCIsXCImZW1zcDE0O1wiOlwi4oCFXCIsXCImZW1zcDtcIjpcIuKAg1wiLFwiJmVuZztcIjpcIsWLXCIsXCImZW5zcDtcIjpcIuKAglwiLFwiJmVvZ29uO1wiOlwixJlcIixcIiZlb3BmO1wiOlwi8J2VllwiLFwiJmVwYXI7XCI6XCLii5VcIixcIiZlcGFyc2w7XCI6XCLip6NcIixcIiZlcGx1cztcIjpcIuKpsVwiLFwiJmVwc2k7XCI6XCLOtVwiLFwiJmVwc2lsb247XCI6XCLOtVwiLFwiJmVwc2l2O1wiOlwiz7VcIixcIiZlcWNpcmM7XCI6XCLiiZZcIixcIiZlcWNvbG9uO1wiOlwi4omVXCIsXCImZXFzaW07XCI6XCLiiYJcIixcIiZlcXNsYW50Z3RyO1wiOlwi4qqWXCIsXCImZXFzbGFudGxlc3M7XCI6XCLiqpVcIixcIiZlcXVhbHM7XCI6XCI9XCIsXCImZXF1ZXN0O1wiOlwi4omfXCIsXCImZXF1aXY7XCI6XCLiiaFcIixcIiZlcXVpdkREO1wiOlwi4qm4XCIsXCImZXF2cGFyc2w7XCI6XCLip6VcIixcIiZlckRvdDtcIjpcIuKJk1wiLFwiJmVyYXJyO1wiOlwi4qWxXCIsXCImZXNjcjtcIjpcIuKEr1wiLFwiJmVzZG90O1wiOlwi4omQXCIsXCImZXNpbTtcIjpcIuKJglwiLFwiJmV0YTtcIjpcIs63XCIsXCImZXRoXCI6XCLDsFwiLFwiJmV0aDtcIjpcIsOwXCIsXCImZXVtbFwiOlwiw6tcIixcIiZldW1sO1wiOlwiw6tcIixcIiZldXJvO1wiOlwi4oKsXCIsXCImZXhjbDtcIjpcIiFcIixcIiZleGlzdDtcIjpcIuKIg1wiLFwiJmV4cGVjdGF0aW9uO1wiOlwi4oSwXCIsXCImZXhwb25lbnRpYWxlO1wiOlwi4oWHXCIsXCImZmFsbGluZ2RvdHNlcTtcIjpcIuKJklwiLFwiJmZjeTtcIjpcItGEXCIsXCImZmVtYWxlO1wiOlwi4pmAXCIsXCImZmZpbGlnO1wiOlwi76yDXCIsXCImZmZsaWc7XCI6XCLvrIBcIixcIiZmZmxsaWc7XCI6XCLvrIRcIixcIiZmZnI7XCI6XCLwnZSjXCIsXCImZmlsaWc7XCI6XCLvrIFcIixcIiZmamxpZztcIjpcImZqXCIsXCImZmxhdDtcIjpcIuKZrVwiLFwiJmZsbGlnO1wiOlwi76yCXCIsXCImZmx0bnM7XCI6XCLilrFcIixcIiZmbm9mO1wiOlwixpJcIixcIiZmb3BmO1wiOlwi8J2Vl1wiLFwiJmZvcmFsbDtcIjpcIuKIgFwiLFwiJmZvcms7XCI6XCLii5RcIixcIiZmb3JrdjtcIjpcIuKrmVwiLFwiJmZwYXJ0aW50O1wiOlwi4qiNXCIsXCImZnJhYzEyXCI6XCLCvVwiLFwiJmZyYWMxMjtcIjpcIsK9XCIsXCImZnJhYzEzO1wiOlwi4oWTXCIsXCImZnJhYzE0XCI6XCLCvFwiLFwiJmZyYWMxNDtcIjpcIsK8XCIsXCImZnJhYzE1O1wiOlwi4oWVXCIsXCImZnJhYzE2O1wiOlwi4oWZXCIsXCImZnJhYzE4O1wiOlwi4oWbXCIsXCImZnJhYzIzO1wiOlwi4oWUXCIsXCImZnJhYzI1O1wiOlwi4oWWXCIsXCImZnJhYzM0XCI6XCLCvlwiLFwiJmZyYWMzNDtcIjpcIsK+XCIsXCImZnJhYzM1O1wiOlwi4oWXXCIsXCImZnJhYzM4O1wiOlwi4oWcXCIsXCImZnJhYzQ1O1wiOlwi4oWYXCIsXCImZnJhYzU2O1wiOlwi4oWaXCIsXCImZnJhYzU4O1wiOlwi4oWdXCIsXCImZnJhYzc4O1wiOlwi4oWeXCIsXCImZnJhc2w7XCI6XCLigYRcIixcIiZmcm93bjtcIjpcIuKMolwiLFwiJmZzY3I7XCI6XCLwnZK7XCIsXCImZ0U7XCI6XCLiiadcIixcIiZnRWw7XCI6XCLiqoxcIixcIiZnYWN1dGU7XCI6XCLHtVwiLFwiJmdhbW1hO1wiOlwizrNcIixcIiZnYW1tYWQ7XCI6XCLPnVwiLFwiJmdhcDtcIjpcIuKqhlwiLFwiJmdicmV2ZTtcIjpcIsSfXCIsXCImZ2NpcmM7XCI6XCLEnVwiLFwiJmdjeTtcIjpcItCzXCIsXCImZ2RvdDtcIjpcIsShXCIsXCImZ2U7XCI6XCLiiaVcIixcIiZnZWw7XCI6XCLii5tcIixcIiZnZXE7XCI6XCLiiaVcIixcIiZnZXFxO1wiOlwi4omnXCIsXCImZ2Vxc2xhbnQ7XCI6XCLiqb5cIixcIiZnZXM7XCI6XCLiqb5cIixcIiZnZXNjYztcIjpcIuKqqVwiLFwiJmdlc2RvdDtcIjpcIuKqgFwiLFwiJmdlc2RvdG87XCI6XCLiqoJcIixcIiZnZXNkb3RvbDtcIjpcIuKqhFwiLFwiJmdlc2w7XCI6XCLii5vvuIBcIixcIiZnZXNsZXM7XCI6XCLiqpRcIixcIiZnZnI7XCI6XCLwnZSkXCIsXCImZ2c7XCI6XCLiiatcIixcIiZnZ2c7XCI6XCLii5lcIixcIiZnaW1lbDtcIjpcIuKEt1wiLFwiJmdqY3k7XCI6XCLRk1wiLFwiJmdsO1wiOlwi4om3XCIsXCImZ2xFO1wiOlwi4qqSXCIsXCImZ2xhO1wiOlwi4qqlXCIsXCImZ2xqO1wiOlwi4qqkXCIsXCImZ25FO1wiOlwi4ompXCIsXCImZ25hcDtcIjpcIuKqilwiLFwiJmduYXBwcm94O1wiOlwi4qqKXCIsXCImZ25lO1wiOlwi4qqIXCIsXCImZ25lcTtcIjpcIuKqiFwiLFwiJmduZXFxO1wiOlwi4ompXCIsXCImZ25zaW07XCI6XCLii6dcIixcIiZnb3BmO1wiOlwi8J2VmFwiLFwiJmdyYXZlO1wiOlwiYFwiLFwiJmdzY3I7XCI6XCLihIpcIixcIiZnc2ltO1wiOlwi4omzXCIsXCImZ3NpbWU7XCI6XCLiqo5cIixcIiZnc2ltbDtcIjpcIuKqkFwiLFwiJmd0XCI6XCI+XCIsXCImZ3Q7XCI6XCI+XCIsXCImZ3RjYztcIjpcIuKqp1wiLFwiJmd0Y2lyO1wiOlwi4qm6XCIsXCImZ3Rkb3Q7XCI6XCLii5dcIixcIiZndGxQYXI7XCI6XCLippVcIixcIiZndHF1ZXN0O1wiOlwi4qm8XCIsXCImZ3RyYXBwcm94O1wiOlwi4qqGXCIsXCImZ3RyYXJyO1wiOlwi4qW4XCIsXCImZ3RyZG90O1wiOlwi4ouXXCIsXCImZ3RyZXFsZXNzO1wiOlwi4oubXCIsXCImZ3RyZXFxbGVzcztcIjpcIuKqjFwiLFwiJmd0cmxlc3M7XCI6XCLiibdcIixcIiZndHJzaW07XCI6XCLiibNcIixcIiZndmVydG5lcXE7XCI6XCLiianvuIBcIixcIiZndm5FO1wiOlwi4omp77iAXCIsXCImaEFycjtcIjpcIuKHlFwiLFwiJmhhaXJzcDtcIjpcIuKAilwiLFwiJmhhbGY7XCI6XCLCvVwiLFwiJmhhbWlsdDtcIjpcIuKEi1wiLFwiJmhhcmRjeTtcIjpcItGKXCIsXCImaGFycjtcIjpcIuKGlFwiLFwiJmhhcnJjaXI7XCI6XCLipYhcIixcIiZoYXJydztcIjpcIuKGrVwiLFwiJmhiYXI7XCI6XCLihI9cIixcIiZoY2lyYztcIjpcIsSlXCIsXCImaGVhcnRzO1wiOlwi4pmlXCIsXCImaGVhcnRzdWl0O1wiOlwi4pmlXCIsXCImaGVsbGlwO1wiOlwi4oCmXCIsXCImaGVyY29uO1wiOlwi4oq5XCIsXCImaGZyO1wiOlwi8J2UpVwiLFwiJmhrc2Vhcm93O1wiOlwi4qSlXCIsXCImaGtzd2Fyb3c7XCI6XCLipKZcIixcIiZob2FycjtcIjpcIuKHv1wiLFwiJmhvbXRodDtcIjpcIuKIu1wiLFwiJmhvb2tsZWZ0YXJyb3c7XCI6XCLihqlcIixcIiZob29rcmlnaHRhcnJvdztcIjpcIuKGqlwiLFwiJmhvcGY7XCI6XCLwnZWZXCIsXCImaG9yYmFyO1wiOlwi4oCVXCIsXCImaHNjcjtcIjpcIvCdkr1cIixcIiZoc2xhc2g7XCI6XCLihI9cIixcIiZoc3Ryb2s7XCI6XCLEp1wiLFwiJmh5YnVsbDtcIjpcIuKBg1wiLFwiJmh5cGhlbjtcIjpcIuKAkFwiLFwiJmlhY3V0ZVwiOlwiw61cIixcIiZpYWN1dGU7XCI6XCLDrVwiLFwiJmljO1wiOlwi4oGjXCIsXCImaWNpcmNcIjpcIsOuXCIsXCImaWNpcmM7XCI6XCLDrlwiLFwiJmljeTtcIjpcItC4XCIsXCImaWVjeTtcIjpcItC1XCIsXCImaWV4Y2xcIjpcIsKhXCIsXCImaWV4Y2w7XCI6XCLCoVwiLFwiJmlmZjtcIjpcIuKHlFwiLFwiJmlmcjtcIjpcIvCdlKZcIixcIiZpZ3JhdmVcIjpcIsOsXCIsXCImaWdyYXZlO1wiOlwiw6xcIixcIiZpaTtcIjpcIuKFiFwiLFwiJmlpaWludDtcIjpcIuKojFwiLFwiJmlpaW50O1wiOlwi4oitXCIsXCImaWluZmluO1wiOlwi4qecXCIsXCImaWlvdGE7XCI6XCLihKlcIixcIiZpamxpZztcIjpcIsSzXCIsXCImaW1hY3I7XCI6XCLEq1wiLFwiJmltYWdlO1wiOlwi4oSRXCIsXCImaW1hZ2xpbmU7XCI6XCLihJBcIixcIiZpbWFncGFydDtcIjpcIuKEkVwiLFwiJmltYXRoO1wiOlwixLFcIixcIiZpbW9mO1wiOlwi4oq3XCIsXCImaW1wZWQ7XCI6XCLGtVwiLFwiJmluO1wiOlwi4oiIXCIsXCImaW5jYXJlO1wiOlwi4oSFXCIsXCImaW5maW47XCI6XCLiiJ5cIixcIiZpbmZpbnRpZTtcIjpcIuKnnVwiLFwiJmlub2RvdDtcIjpcIsSxXCIsXCImaW50O1wiOlwi4oirXCIsXCImaW50Y2FsO1wiOlwi4oq6XCIsXCImaW50ZWdlcnM7XCI6XCLihKRcIixcIiZpbnRlcmNhbDtcIjpcIuKKulwiLFwiJmludGxhcmhrO1wiOlwi4qiXXCIsXCImaW50cHJvZDtcIjpcIuKovFwiLFwiJmlvY3k7XCI6XCLRkVwiLFwiJmlvZ29uO1wiOlwixK9cIixcIiZpb3BmO1wiOlwi8J2VmlwiLFwiJmlvdGE7XCI6XCLOuVwiLFwiJmlwcm9kO1wiOlwi4qi8XCIsXCImaXF1ZXN0XCI6XCLCv1wiLFwiJmlxdWVzdDtcIjpcIsK/XCIsXCImaXNjcjtcIjpcIvCdkr5cIixcIiZpc2luO1wiOlwi4oiIXCIsXCImaXNpbkU7XCI6XCLii7lcIixcIiZpc2luZG90O1wiOlwi4ou1XCIsXCImaXNpbnM7XCI6XCLii7RcIixcIiZpc2luc3Y7XCI6XCLii7NcIixcIiZpc2ludjtcIjpcIuKIiFwiLFwiJml0O1wiOlwi4oGiXCIsXCImaXRpbGRlO1wiOlwixKlcIixcIiZpdWtjeTtcIjpcItGWXCIsXCImaXVtbFwiOlwiw69cIixcIiZpdW1sO1wiOlwiw69cIixcIiZqY2lyYztcIjpcIsS1XCIsXCImamN5O1wiOlwi0LlcIixcIiZqZnI7XCI6XCLwnZSnXCIsXCImam1hdGg7XCI6XCLIt1wiLFwiJmpvcGY7XCI6XCLwnZWbXCIsXCImanNjcjtcIjpcIvCdkr9cIixcIiZqc2VyY3k7XCI6XCLRmFwiLFwiJmp1a2N5O1wiOlwi0ZRcIixcIiZrYXBwYTtcIjpcIs66XCIsXCIma2FwcGF2O1wiOlwiz7BcIixcIiZrY2VkaWw7XCI6XCLEt1wiLFwiJmtjeTtcIjpcItC6XCIsXCIma2ZyO1wiOlwi8J2UqFwiLFwiJmtncmVlbjtcIjpcIsS4XCIsXCIma2hjeTtcIjpcItGFXCIsXCIma2pjeTtcIjpcItGcXCIsXCIma29wZjtcIjpcIvCdlZxcIixcIiZrc2NyO1wiOlwi8J2TgFwiLFwiJmxBYXJyO1wiOlwi4oeaXCIsXCImbEFycjtcIjpcIuKHkFwiLFwiJmxBdGFpbDtcIjpcIuKkm1wiLFwiJmxCYXJyO1wiOlwi4qSOXCIsXCImbEU7XCI6XCLiiaZcIixcIiZsRWc7XCI6XCLiqotcIixcIiZsSGFyO1wiOlwi4qWiXCIsXCImbGFjdXRlO1wiOlwixLpcIixcIiZsYWVtcHR5djtcIjpcIuKmtFwiLFwiJmxhZ3JhbjtcIjpcIuKEklwiLFwiJmxhbWJkYTtcIjpcIs67XCIsXCImbGFuZztcIjpcIuKfqFwiLFwiJmxhbmdkO1wiOlwi4qaRXCIsXCImbGFuZ2xlO1wiOlwi4p+oXCIsXCImbGFwO1wiOlwi4qqFXCIsXCImbGFxdW9cIjpcIsKrXCIsXCImbGFxdW87XCI6XCLCq1wiLFwiJmxhcnI7XCI6XCLihpBcIixcIiZsYXJyYjtcIjpcIuKHpFwiLFwiJmxhcnJiZnM7XCI6XCLipJ9cIixcIiZsYXJyZnM7XCI6XCLipJ1cIixcIiZsYXJyaGs7XCI6XCLihqlcIixcIiZsYXJybHA7XCI6XCLihqtcIixcIiZsYXJycGw7XCI6XCLipLlcIixcIiZsYXJyc2ltO1wiOlwi4qWzXCIsXCImbGFycnRsO1wiOlwi4oaiXCIsXCImbGF0O1wiOlwi4qqrXCIsXCImbGF0YWlsO1wiOlwi4qSZXCIsXCImbGF0ZTtcIjpcIuKqrVwiLFwiJmxhdGVzO1wiOlwi4qqt77iAXCIsXCImbGJhcnI7XCI6XCLipIxcIixcIiZsYmJyaztcIjpcIuKdslwiLFwiJmxicmFjZTtcIjpcIntcIixcIiZsYnJhY2s7XCI6XCJbXCIsXCImbGJya2U7XCI6XCLipotcIixcIiZsYnJrc2xkO1wiOlwi4qaPXCIsXCImbGJya3NsdTtcIjpcIuKmjVwiLFwiJmxjYXJvbjtcIjpcIsS+XCIsXCImbGNlZGlsO1wiOlwixLxcIixcIiZsY2VpbDtcIjpcIuKMiFwiLFwiJmxjdWI7XCI6XCJ7XCIsXCImbGN5O1wiOlwi0LtcIixcIiZsZGNhO1wiOlwi4qS2XCIsXCImbGRxdW87XCI6XCLigJxcIixcIiZsZHF1b3I7XCI6XCLigJ5cIixcIiZsZHJkaGFyO1wiOlwi4qWnXCIsXCImbGRydXNoYXI7XCI6XCLipYtcIixcIiZsZHNoO1wiOlwi4oayXCIsXCImbGU7XCI6XCLiiaRcIixcIiZsZWZ0YXJyb3c7XCI6XCLihpBcIixcIiZsZWZ0YXJyb3d0YWlsO1wiOlwi4oaiXCIsXCImbGVmdGhhcnBvb25kb3duO1wiOlwi4oa9XCIsXCImbGVmdGhhcnBvb251cDtcIjpcIuKGvFwiLFwiJmxlZnRsZWZ0YXJyb3dzO1wiOlwi4oeHXCIsXCImbGVmdHJpZ2h0YXJyb3c7XCI6XCLihpRcIixcIiZsZWZ0cmlnaHRhcnJvd3M7XCI6XCLih4ZcIixcIiZsZWZ0cmlnaHRoYXJwb29ucztcIjpcIuKHi1wiLFwiJmxlZnRyaWdodHNxdWlnYXJyb3c7XCI6XCLihq1cIixcIiZsZWZ0dGhyZWV0aW1lcztcIjpcIuKLi1wiLFwiJmxlZztcIjpcIuKLmlwiLFwiJmxlcTtcIjpcIuKJpFwiLFwiJmxlcXE7XCI6XCLiiaZcIixcIiZsZXFzbGFudDtcIjpcIuKpvVwiLFwiJmxlcztcIjpcIuKpvVwiLFwiJmxlc2NjO1wiOlwi4qqoXCIsXCImbGVzZG90O1wiOlwi4qm/XCIsXCImbGVzZG90bztcIjpcIuKqgVwiLFwiJmxlc2RvdG9yO1wiOlwi4qqDXCIsXCImbGVzZztcIjpcIuKLmu+4gFwiLFwiJmxlc2dlcztcIjpcIuKqk1wiLFwiJmxlc3NhcHByb3g7XCI6XCLiqoVcIixcIiZsZXNzZG90O1wiOlwi4ouWXCIsXCImbGVzc2VxZ3RyO1wiOlwi4ouaXCIsXCImbGVzc2VxcWd0cjtcIjpcIuKqi1wiLFwiJmxlc3NndHI7XCI6XCLiibZcIixcIiZsZXNzc2ltO1wiOlwi4omyXCIsXCImbGZpc2h0O1wiOlwi4qW8XCIsXCImbGZsb29yO1wiOlwi4oyKXCIsXCImbGZyO1wiOlwi8J2UqVwiLFwiJmxnO1wiOlwi4om2XCIsXCImbGdFO1wiOlwi4qqRXCIsXCImbGhhcmQ7XCI6XCLihr1cIixcIiZsaGFydTtcIjpcIuKGvFwiLFwiJmxoYXJ1bDtcIjpcIuKlqlwiLFwiJmxoYmxrO1wiOlwi4paEXCIsXCImbGpjeTtcIjpcItGZXCIsXCImbGw7XCI6XCLiiapcIixcIiZsbGFycjtcIjpcIuKHh1wiLFwiJmxsY29ybmVyO1wiOlwi4oyeXCIsXCImbGxoYXJkO1wiOlwi4qWrXCIsXCImbGx0cmk7XCI6XCLil7pcIixcIiZsbWlkb3Q7XCI6XCLFgFwiLFwiJmxtb3VzdDtcIjpcIuKOsFwiLFwiJmxtb3VzdGFjaGU7XCI6XCLijrBcIixcIiZsbkU7XCI6XCLiiahcIixcIiZsbmFwO1wiOlwi4qqJXCIsXCImbG5hcHByb3g7XCI6XCLiqolcIixcIiZsbmU7XCI6XCLiqodcIixcIiZsbmVxO1wiOlwi4qqHXCIsXCImbG5lcXE7XCI6XCLiiahcIixcIiZsbnNpbTtcIjpcIuKLplwiLFwiJmxvYW5nO1wiOlwi4p+sXCIsXCImbG9hcnI7XCI6XCLih71cIixcIiZsb2JyaztcIjpcIuKfplwiLFwiJmxvbmdsZWZ0YXJyb3c7XCI6XCLin7VcIixcIiZsb25nbGVmdHJpZ2h0YXJyb3c7XCI6XCLin7dcIixcIiZsb25nbWFwc3RvO1wiOlwi4p+8XCIsXCImbG9uZ3JpZ2h0YXJyb3c7XCI6XCLin7ZcIixcIiZsb29wYXJyb3dsZWZ0O1wiOlwi4oarXCIsXCImbG9vcGFycm93cmlnaHQ7XCI6XCLihqxcIixcIiZsb3BhcjtcIjpcIuKmhVwiLFwiJmxvcGY7XCI6XCLwnZWdXCIsXCImbG9wbHVzO1wiOlwi4qitXCIsXCImbG90aW1lcztcIjpcIuKotFwiLFwiJmxvd2FzdDtcIjpcIuKIl1wiLFwiJmxvd2JhcjtcIjpcIl9cIixcIiZsb3o7XCI6XCLil4pcIixcIiZsb3plbmdlO1wiOlwi4peKXCIsXCImbG96ZjtcIjpcIuKnq1wiLFwiJmxwYXI7XCI6XCIoXCIsXCImbHBhcmx0O1wiOlwi4qaTXCIsXCImbHJhcnI7XCI6XCLih4ZcIixcIiZscmNvcm5lcjtcIjpcIuKMn1wiLFwiJmxyaGFyO1wiOlwi4oeLXCIsXCImbHJoYXJkO1wiOlwi4qWtXCIsXCImbHJtO1wiOlwi4oCOXCIsXCImbHJ0cmk7XCI6XCLiir9cIixcIiZsc2FxdW87XCI6XCLigLlcIixcIiZsc2NyO1wiOlwi8J2TgVwiLFwiJmxzaDtcIjpcIuKGsFwiLFwiJmxzaW07XCI6XCLiibJcIixcIiZsc2ltZTtcIjpcIuKqjVwiLFwiJmxzaW1nO1wiOlwi4qqPXCIsXCImbHNxYjtcIjpcIltcIixcIiZsc3F1bztcIjpcIuKAmFwiLFwiJmxzcXVvcjtcIjpcIuKAmlwiLFwiJmxzdHJvaztcIjpcIsWCXCIsXCImbHRcIjpcIjxcIixcIiZsdDtcIjpcIjxcIixcIiZsdGNjO1wiOlwi4qqmXCIsXCImbHRjaXI7XCI6XCLiqblcIixcIiZsdGRvdDtcIjpcIuKLllwiLFwiJmx0aHJlZTtcIjpcIuKLi1wiLFwiJmx0aW1lcztcIjpcIuKLiVwiLFwiJmx0bGFycjtcIjpcIuKltlwiLFwiJmx0cXVlc3Q7XCI6XCLiqbtcIixcIiZsdHJQYXI7XCI6XCLippZcIixcIiZsdHJpO1wiOlwi4peDXCIsXCImbHRyaWU7XCI6XCLiirRcIixcIiZsdHJpZjtcIjpcIuKXglwiLFwiJmx1cmRzaGFyO1wiOlwi4qWKXCIsXCImbHVydWhhcjtcIjpcIuKlplwiLFwiJmx2ZXJ0bmVxcTtcIjpcIuKJqO+4gFwiLFwiJmx2bkU7XCI6XCLiiajvuIBcIixcIiZtRERvdDtcIjpcIuKIulwiLFwiJm1hY3JcIjpcIsKvXCIsXCImbWFjcjtcIjpcIsKvXCIsXCImbWFsZTtcIjpcIuKZglwiLFwiJm1hbHQ7XCI6XCLinKBcIixcIiZtYWx0ZXNlO1wiOlwi4pygXCIsXCImbWFwO1wiOlwi4oamXCIsXCImbWFwc3RvO1wiOlwi4oamXCIsXCImbWFwc3RvZG93bjtcIjpcIuKGp1wiLFwiJm1hcHN0b2xlZnQ7XCI6XCLihqRcIixcIiZtYXBzdG91cDtcIjpcIuKGpVwiLFwiJm1hcmtlcjtcIjpcIuKWrlwiLFwiJm1jb21tYTtcIjpcIuKoqVwiLFwiJm1jeTtcIjpcItC8XCIsXCImbWRhc2g7XCI6XCLigJRcIixcIiZtZWFzdXJlZGFuZ2xlO1wiOlwi4oihXCIsXCImbWZyO1wiOlwi8J2UqlwiLFwiJm1obztcIjpcIuKEp1wiLFwiJm1pY3JvXCI6XCLCtVwiLFwiJm1pY3JvO1wiOlwiwrVcIixcIiZtaWQ7XCI6XCLiiKNcIixcIiZtaWRhc3Q7XCI6XCIqXCIsXCImbWlkY2lyO1wiOlwi4quwXCIsXCImbWlkZG90XCI6XCLCt1wiLFwiJm1pZGRvdDtcIjpcIsK3XCIsXCImbWludXM7XCI6XCLiiJJcIixcIiZtaW51c2I7XCI6XCLiip9cIixcIiZtaW51c2Q7XCI6XCLiiLhcIixcIiZtaW51c2R1O1wiOlwi4qiqXCIsXCImbWxjcDtcIjpcIuKrm1wiLFwiJm1sZHI7XCI6XCLigKZcIixcIiZtbnBsdXM7XCI6XCLiiJNcIixcIiZtb2RlbHM7XCI6XCLiiqdcIixcIiZtb3BmO1wiOlwi8J2VnlwiLFwiJm1wO1wiOlwi4oiTXCIsXCImbXNjcjtcIjpcIvCdk4JcIixcIiZtc3Rwb3M7XCI6XCLiiL5cIixcIiZtdTtcIjpcIs68XCIsXCImbXVsdGltYXA7XCI6XCLiirhcIixcIiZtdW1hcDtcIjpcIuKKuFwiLFwiJm5HZztcIjpcIuKLmcy4XCIsXCImbkd0O1wiOlwi4omr4oOSXCIsXCImbkd0djtcIjpcIuKJq8y4XCIsXCImbkxlZnRhcnJvdztcIjpcIuKHjVwiLFwiJm5MZWZ0cmlnaHRhcnJvdztcIjpcIuKHjlwiLFwiJm5MbDtcIjpcIuKLmMy4XCIsXCImbkx0O1wiOlwi4omq4oOSXCIsXCImbkx0djtcIjpcIuKJqsy4XCIsXCImblJpZ2h0YXJyb3c7XCI6XCLih49cIixcIiZuVkRhc2g7XCI6XCLiiq9cIixcIiZuVmRhc2g7XCI6XCLiiq5cIixcIiZuYWJsYTtcIjpcIuKIh1wiLFwiJm5hY3V0ZTtcIjpcIsWEXCIsXCImbmFuZztcIjpcIuKIoOKDklwiLFwiJm5hcDtcIjpcIuKJiVwiLFwiJm5hcEU7XCI6XCLiqbDMuFwiLFwiJm5hcGlkO1wiOlwi4omLzLhcIixcIiZuYXBvcztcIjpcIsWJXCIsXCImbmFwcHJveDtcIjpcIuKJiVwiLFwiJm5hdHVyO1wiOlwi4pmuXCIsXCImbmF0dXJhbDtcIjpcIuKZrlwiLFwiJm5hdHVyYWxzO1wiOlwi4oSVXCIsXCImbmJzcFwiOlwiwqBcIixcIiZuYnNwO1wiOlwiwqBcIixcIiZuYnVtcDtcIjpcIuKJjsy4XCIsXCImbmJ1bXBlO1wiOlwi4omPzLhcIixcIiZuY2FwO1wiOlwi4qmDXCIsXCImbmNhcm9uO1wiOlwixYhcIixcIiZuY2VkaWw7XCI6XCLFhlwiLFwiJm5jb25nO1wiOlwi4omHXCIsXCImbmNvbmdkb3Q7XCI6XCLiqa3MuFwiLFwiJm5jdXA7XCI6XCLiqYJcIixcIiZuY3k7XCI6XCLQvVwiLFwiJm5kYXNoO1wiOlwi4oCTXCIsXCImbmU7XCI6XCLiiaBcIixcIiZuZUFycjtcIjpcIuKHl1wiLFwiJm5lYXJoaztcIjpcIuKkpFwiLFwiJm5lYXJyO1wiOlwi4oaXXCIsXCImbmVhcnJvdztcIjpcIuKGl1wiLFwiJm5lZG90O1wiOlwi4omQzLhcIixcIiZuZXF1aXY7XCI6XCLiiaJcIixcIiZuZXNlYXI7XCI6XCLipKhcIixcIiZuZXNpbTtcIjpcIuKJgsy4XCIsXCImbmV4aXN0O1wiOlwi4oiEXCIsXCImbmV4aXN0cztcIjpcIuKIhFwiLFwiJm5mcjtcIjpcIvCdlKtcIixcIiZuZ0U7XCI6XCLiiafMuFwiLFwiJm5nZTtcIjpcIuKJsVwiLFwiJm5nZXE7XCI6XCLiibFcIixcIiZuZ2VxcTtcIjpcIuKJp8y4XCIsXCImbmdlcXNsYW50O1wiOlwi4qm+zLhcIixcIiZuZ2VzO1wiOlwi4qm+zLhcIixcIiZuZ3NpbTtcIjpcIuKJtVwiLFwiJm5ndDtcIjpcIuKJr1wiLFwiJm5ndHI7XCI6XCLiia9cIixcIiZuaEFycjtcIjpcIuKHjlwiLFwiJm5oYXJyO1wiOlwi4oauXCIsXCImbmhwYXI7XCI6XCLiq7JcIixcIiZuaTtcIjpcIuKIi1wiLFwiJm5pcztcIjpcIuKLvFwiLFwiJm5pc2Q7XCI6XCLii7pcIixcIiZuaXY7XCI6XCLiiItcIixcIiZuamN5O1wiOlwi0ZpcIixcIiZubEFycjtcIjpcIuKHjVwiLFwiJm5sRTtcIjpcIuKJpsy4XCIsXCImbmxhcnI7XCI6XCLihppcIixcIiZubGRyO1wiOlwi4oClXCIsXCImbmxlO1wiOlwi4omwXCIsXCImbmxlZnRhcnJvdztcIjpcIuKGmlwiLFwiJm5sZWZ0cmlnaHRhcnJvdztcIjpcIuKGrlwiLFwiJm5sZXE7XCI6XCLiibBcIixcIiZubGVxcTtcIjpcIuKJpsy4XCIsXCImbmxlcXNsYW50O1wiOlwi4qm9zLhcIixcIiZubGVzO1wiOlwi4qm9zLhcIixcIiZubGVzcztcIjpcIuKJrlwiLFwiJm5sc2ltO1wiOlwi4om0XCIsXCImbmx0O1wiOlwi4omuXCIsXCImbmx0cmk7XCI6XCLii6pcIixcIiZubHRyaWU7XCI6XCLii6xcIixcIiZubWlkO1wiOlwi4oikXCIsXCImbm9wZjtcIjpcIvCdlZ9cIixcIiZub3RcIjpcIsKsXCIsXCImbm90O1wiOlwiwqxcIixcIiZub3RpbjtcIjpcIuKIiVwiLFwiJm5vdGluRTtcIjpcIuKLucy4XCIsXCImbm90aW5kb3Q7XCI6XCLii7XMuFwiLFwiJm5vdGludmE7XCI6XCLiiIlcIixcIiZub3RpbnZiO1wiOlwi4ou3XCIsXCImbm90aW52YztcIjpcIuKLtlwiLFwiJm5vdG5pO1wiOlwi4oiMXCIsXCImbm90bml2YTtcIjpcIuKIjFwiLFwiJm5vdG5pdmI7XCI6XCLii75cIixcIiZub3RuaXZjO1wiOlwi4ou9XCIsXCImbnBhcjtcIjpcIuKIplwiLFwiJm5wYXJhbGxlbDtcIjpcIuKIplwiLFwiJm5wYXJzbDtcIjpcIuKrveKDpVwiLFwiJm5wYXJ0O1wiOlwi4oiCzLhcIixcIiZucG9saW50O1wiOlwi4qiUXCIsXCImbnByO1wiOlwi4oqAXCIsXCImbnByY3VlO1wiOlwi4ougXCIsXCImbnByZTtcIjpcIuKqr8y4XCIsXCImbnByZWM7XCI6XCLiioBcIixcIiZucHJlY2VxO1wiOlwi4qqvzLhcIixcIiZuckFycjtcIjpcIuKHj1wiLFwiJm5yYXJyO1wiOlwi4oabXCIsXCImbnJhcnJjO1wiOlwi4qSzzLhcIixcIiZucmFycnc7XCI6XCLihp3MuFwiLFwiJm5yaWdodGFycm93O1wiOlwi4oabXCIsXCImbnJ0cmk7XCI6XCLii6tcIixcIiZucnRyaWU7XCI6XCLii61cIixcIiZuc2M7XCI6XCLiioFcIixcIiZuc2NjdWU7XCI6XCLii6FcIixcIiZuc2NlO1wiOlwi4qqwzLhcIixcIiZuc2NyO1wiOlwi8J2Tg1wiLFwiJm5zaG9ydG1pZDtcIjpcIuKIpFwiLFwiJm5zaG9ydHBhcmFsbGVsO1wiOlwi4oimXCIsXCImbnNpbTtcIjpcIuKJgVwiLFwiJm5zaW1lO1wiOlwi4omEXCIsXCImbnNpbWVxO1wiOlwi4omEXCIsXCImbnNtaWQ7XCI6XCLiiKRcIixcIiZuc3BhcjtcIjpcIuKIplwiLFwiJm5zcXN1YmU7XCI6XCLii6JcIixcIiZuc3FzdXBlO1wiOlwi4oujXCIsXCImbnN1YjtcIjpcIuKKhFwiLFwiJm5zdWJFO1wiOlwi4quFzLhcIixcIiZuc3ViZTtcIjpcIuKKiFwiLFwiJm5zdWJzZXQ7XCI6XCLiioLig5JcIixcIiZuc3Vic2V0ZXE7XCI6XCLiiohcIixcIiZuc3Vic2V0ZXFxO1wiOlwi4quFzLhcIixcIiZuc3VjYztcIjpcIuKKgVwiLFwiJm5zdWNjZXE7XCI6XCLiqrDMuFwiLFwiJm5zdXA7XCI6XCLiioVcIixcIiZuc3VwRTtcIjpcIuKrhsy4XCIsXCImbnN1cGU7XCI6XCLiiolcIixcIiZuc3Vwc2V0O1wiOlwi4oqD4oOSXCIsXCImbnN1cHNldGVxO1wiOlwi4oqJXCIsXCImbnN1cHNldGVxcTtcIjpcIuKrhsy4XCIsXCImbnRnbDtcIjpcIuKJuVwiLFwiJm50aWxkZVwiOlwiw7FcIixcIiZudGlsZGU7XCI6XCLDsVwiLFwiJm50bGc7XCI6XCLiibhcIixcIiZudHJpYW5nbGVsZWZ0O1wiOlwi4ouqXCIsXCImbnRyaWFuZ2xlbGVmdGVxO1wiOlwi4ousXCIsXCImbnRyaWFuZ2xlcmlnaHQ7XCI6XCLii6tcIixcIiZudHJpYW5nbGVyaWdodGVxO1wiOlwi4outXCIsXCImbnU7XCI6XCLOvVwiLFwiJm51bTtcIjpcIiNcIixcIiZudW1lcm87XCI6XCLihJZcIixcIiZudW1zcDtcIjpcIuKAh1wiLFwiJm52RGFzaDtcIjpcIuKKrVwiLFwiJm52SGFycjtcIjpcIuKkhFwiLFwiJm52YXA7XCI6XCLiiY3ig5JcIixcIiZudmRhc2g7XCI6XCLiiqxcIixcIiZudmdlO1wiOlwi4oml4oOSXCIsXCImbnZndDtcIjpcIj7ig5JcIixcIiZudmluZmluO1wiOlwi4qeeXCIsXCImbnZsQXJyO1wiOlwi4qSCXCIsXCImbnZsZTtcIjpcIuKJpOKDklwiLFwiJm52bHQ7XCI6XCI84oOSXCIsXCImbnZsdHJpZTtcIjpcIuKKtOKDklwiLFwiJm52ckFycjtcIjpcIuKkg1wiLFwiJm52cnRyaWU7XCI6XCLiirXig5JcIixcIiZudnNpbTtcIjpcIuKIvOKDklwiLFwiJm53QXJyO1wiOlwi4oeWXCIsXCImbndhcmhrO1wiOlwi4qSjXCIsXCImbndhcnI7XCI6XCLihpZcIixcIiZud2Fycm93O1wiOlwi4oaWXCIsXCImbnduZWFyO1wiOlwi4qSnXCIsXCImb1M7XCI6XCLik4hcIixcIiZvYWN1dGVcIjpcIsOzXCIsXCImb2FjdXRlO1wiOlwiw7NcIixcIiZvYXN0O1wiOlwi4oqbXCIsXCImb2NpcjtcIjpcIuKKmlwiLFwiJm9jaXJjXCI6XCLDtFwiLFwiJm9jaXJjO1wiOlwiw7RcIixcIiZvY3k7XCI6XCLQvlwiLFwiJm9kYXNoO1wiOlwi4oqdXCIsXCImb2RibGFjO1wiOlwixZFcIixcIiZvZGl2O1wiOlwi4qi4XCIsXCImb2RvdDtcIjpcIuKKmVwiLFwiJm9kc29sZDtcIjpcIuKmvFwiLFwiJm9lbGlnO1wiOlwixZNcIixcIiZvZmNpcjtcIjpcIuKmv1wiLFwiJm9mcjtcIjpcIvCdlKxcIixcIiZvZ29uO1wiOlwiy5tcIixcIiZvZ3JhdmVcIjpcIsOyXCIsXCImb2dyYXZlO1wiOlwiw7JcIixcIiZvZ3Q7XCI6XCLip4FcIixcIiZvaGJhcjtcIjpcIuKmtVwiLFwiJm9obTtcIjpcIs6pXCIsXCImb2ludDtcIjpcIuKIrlwiLFwiJm9sYXJyO1wiOlwi4oa6XCIsXCImb2xjaXI7XCI6XCLipr5cIixcIiZvbGNyb3NzO1wiOlwi4qa7XCIsXCImb2xpbmU7XCI6XCLigL5cIixcIiZvbHQ7XCI6XCLip4BcIixcIiZvbWFjcjtcIjpcIsWNXCIsXCImb21lZ2E7XCI6XCLPiVwiLFwiJm9taWNyb247XCI6XCLOv1wiLFwiJm9taWQ7XCI6XCLiprZcIixcIiZvbWludXM7XCI6XCLiipZcIixcIiZvb3BmO1wiOlwi8J2VoFwiLFwiJm9wYXI7XCI6XCLiprdcIixcIiZvcGVycDtcIjpcIuKmuVwiLFwiJm9wbHVzO1wiOlwi4oqVXCIsXCImb3I7XCI6XCLiiKhcIixcIiZvcmFycjtcIjpcIuKGu1wiLFwiJm9yZDtcIjpcIuKpnVwiLFwiJm9yZGVyO1wiOlwi4oS0XCIsXCImb3JkZXJvZjtcIjpcIuKEtFwiLFwiJm9yZGZcIjpcIsKqXCIsXCImb3JkZjtcIjpcIsKqXCIsXCImb3JkbVwiOlwiwrpcIixcIiZvcmRtO1wiOlwiwrpcIixcIiZvcmlnb2Y7XCI6XCLiirZcIixcIiZvcm9yO1wiOlwi4qmWXCIsXCImb3JzbG9wZTtcIjpcIuKpl1wiLFwiJm9ydjtcIjpcIuKpm1wiLFwiJm9zY3I7XCI6XCLihLRcIixcIiZvc2xhc2hcIjpcIsO4XCIsXCImb3NsYXNoO1wiOlwiw7hcIixcIiZvc29sO1wiOlwi4oqYXCIsXCImb3RpbGRlXCI6XCLDtVwiLFwiJm90aWxkZTtcIjpcIsO1XCIsXCImb3RpbWVzO1wiOlwi4oqXXCIsXCImb3RpbWVzYXM7XCI6XCLiqLZcIixcIiZvdW1sXCI6XCLDtlwiLFwiJm91bWw7XCI6XCLDtlwiLFwiJm92YmFyO1wiOlwi4oy9XCIsXCImcGFyO1wiOlwi4oilXCIsXCImcGFyYVwiOlwiwrZcIixcIiZwYXJhO1wiOlwiwrZcIixcIiZwYXJhbGxlbDtcIjpcIuKIpVwiLFwiJnBhcnNpbTtcIjpcIuKrs1wiLFwiJnBhcnNsO1wiOlwi4qu9XCIsXCImcGFydDtcIjpcIuKIglwiLFwiJnBjeTtcIjpcItC/XCIsXCImcGVyY250O1wiOlwiJVwiLFwiJnBlcmlvZDtcIjpcIi5cIixcIiZwZXJtaWw7XCI6XCLigLBcIixcIiZwZXJwO1wiOlwi4oqlXCIsXCImcGVydGVuaztcIjpcIuKAsVwiLFwiJnBmcjtcIjpcIvCdlK1cIixcIiZwaGk7XCI6XCLPhlwiLFwiJnBoaXY7XCI6XCLPlVwiLFwiJnBobW1hdDtcIjpcIuKEs1wiLFwiJnBob25lO1wiOlwi4piOXCIsXCImcGk7XCI6XCLPgFwiLFwiJnBpdGNoZm9yaztcIjpcIuKLlFwiLFwiJnBpdjtcIjpcIs+WXCIsXCImcGxhbmNrO1wiOlwi4oSPXCIsXCImcGxhbmNraDtcIjpcIuKEjlwiLFwiJnBsYW5rdjtcIjpcIuKEj1wiLFwiJnBsdXM7XCI6XCIrXCIsXCImcGx1c2FjaXI7XCI6XCLiqKNcIixcIiZwbHVzYjtcIjpcIuKKnlwiLFwiJnBsdXNjaXI7XCI6XCLiqKJcIixcIiZwbHVzZG87XCI6XCLiiJRcIixcIiZwbHVzZHU7XCI6XCLiqKVcIixcIiZwbHVzZTtcIjpcIuKpslwiLFwiJnBsdXNtblwiOlwiwrFcIixcIiZwbHVzbW47XCI6XCLCsVwiLFwiJnBsdXNzaW07XCI6XCLiqKZcIixcIiZwbHVzdHdvO1wiOlwi4qinXCIsXCImcG07XCI6XCLCsVwiLFwiJnBvaW50aW50O1wiOlwi4qiVXCIsXCImcG9wZjtcIjpcIvCdlaFcIixcIiZwb3VuZFwiOlwiwqNcIixcIiZwb3VuZDtcIjpcIsKjXCIsXCImcHI7XCI6XCLiibpcIixcIiZwckU7XCI6XCLiqrNcIixcIiZwcmFwO1wiOlwi4qq3XCIsXCImcHJjdWU7XCI6XCLiibxcIixcIiZwcmU7XCI6XCLiqq9cIixcIiZwcmVjO1wiOlwi4om6XCIsXCImcHJlY2FwcHJveDtcIjpcIuKqt1wiLFwiJnByZWNjdXJseWVxO1wiOlwi4om8XCIsXCImcHJlY2VxO1wiOlwi4qqvXCIsXCImcHJlY25hcHByb3g7XCI6XCLiqrlcIixcIiZwcmVjbmVxcTtcIjpcIuKqtVwiLFwiJnByZWNuc2ltO1wiOlwi4ouoXCIsXCImcHJlY3NpbTtcIjpcIuKJvlwiLFwiJnByaW1lO1wiOlwi4oCyXCIsXCImcHJpbWVzO1wiOlwi4oSZXCIsXCImcHJuRTtcIjpcIuKqtVwiLFwiJnBybmFwO1wiOlwi4qq5XCIsXCImcHJuc2ltO1wiOlwi4ouoXCIsXCImcHJvZDtcIjpcIuKIj1wiLFwiJnByb2ZhbGFyO1wiOlwi4oyuXCIsXCImcHJvZmxpbmU7XCI6XCLijJJcIixcIiZwcm9mc3VyZjtcIjpcIuKMk1wiLFwiJnByb3A7XCI6XCLiiJ1cIixcIiZwcm9wdG87XCI6XCLiiJ1cIixcIiZwcnNpbTtcIjpcIuKJvlwiLFwiJnBydXJlbDtcIjpcIuKKsFwiLFwiJnBzY3I7XCI6XCLwnZOFXCIsXCImcHNpO1wiOlwiz4hcIixcIiZwdW5jc3A7XCI6XCLigIhcIixcIiZxZnI7XCI6XCLwnZSuXCIsXCImcWludDtcIjpcIuKojFwiLFwiJnFvcGY7XCI6XCLwnZWiXCIsXCImcXByaW1lO1wiOlwi4oGXXCIsXCImcXNjcjtcIjpcIvCdk4ZcIixcIiZxdWF0ZXJuaW9ucztcIjpcIuKEjVwiLFwiJnF1YXRpbnQ7XCI6XCLiqJZcIixcIiZxdWVzdDtcIjpcIj9cIixcIiZxdWVzdGVxO1wiOlwi4omfXCIsXCImcXVvdFwiOidcIicsXCImcXVvdDtcIjonXCInLFwiJnJBYXJyO1wiOlwi4oebXCIsXCImckFycjtcIjpcIuKHklwiLFwiJnJBdGFpbDtcIjpcIuKknFwiLFwiJnJCYXJyO1wiOlwi4qSPXCIsXCImckhhcjtcIjpcIuKlpFwiLFwiJnJhY2U7XCI6XCLiiL3MsVwiLFwiJnJhY3V0ZTtcIjpcIsWVXCIsXCImcmFkaWM7XCI6XCLiiJpcIixcIiZyYWVtcHR5djtcIjpcIuKms1wiLFwiJnJhbmc7XCI6XCLin6lcIixcIiZyYW5nZDtcIjpcIuKmklwiLFwiJnJhbmdlO1wiOlwi4qalXCIsXCImcmFuZ2xlO1wiOlwi4p+pXCIsXCImcmFxdW9cIjpcIsK7XCIsXCImcmFxdW87XCI6XCLCu1wiLFwiJnJhcnI7XCI6XCLihpJcIixcIiZyYXJyYXA7XCI6XCLipbVcIixcIiZyYXJyYjtcIjpcIuKHpVwiLFwiJnJhcnJiZnM7XCI6XCLipKBcIixcIiZyYXJyYztcIjpcIuKks1wiLFwiJnJhcnJmcztcIjpcIuKknlwiLFwiJnJhcnJoaztcIjpcIuKGqlwiLFwiJnJhcnJscDtcIjpcIuKGrFwiLFwiJnJhcnJwbDtcIjpcIuKlhVwiLFwiJnJhcnJzaW07XCI6XCLipbRcIixcIiZyYXJydGw7XCI6XCLihqNcIixcIiZyYXJydztcIjpcIuKGnVwiLFwiJnJhdGFpbDtcIjpcIuKkmlwiLFwiJnJhdGlvO1wiOlwi4oi2XCIsXCImcmF0aW9uYWxzO1wiOlwi4oSaXCIsXCImcmJhcnI7XCI6XCLipI1cIixcIiZyYmJyaztcIjpcIuKds1wiLFwiJnJicmFjZTtcIjpcIn1cIixcIiZyYnJhY2s7XCI6XCJdXCIsXCImcmJya2U7XCI6XCLipoxcIixcIiZyYnJrc2xkO1wiOlwi4qaOXCIsXCImcmJya3NsdTtcIjpcIuKmkFwiLFwiJnJjYXJvbjtcIjpcIsWZXCIsXCImcmNlZGlsO1wiOlwixZdcIixcIiZyY2VpbDtcIjpcIuKMiVwiLFwiJnJjdWI7XCI6XCJ9XCIsXCImcmN5O1wiOlwi0YBcIixcIiZyZGNhO1wiOlwi4qS3XCIsXCImcmRsZGhhcjtcIjpcIuKlqVwiLFwiJnJkcXVvO1wiOlwi4oCdXCIsXCImcmRxdW9yO1wiOlwi4oCdXCIsXCImcmRzaDtcIjpcIuKGs1wiLFwiJnJlYWw7XCI6XCLihJxcIixcIiZyZWFsaW5lO1wiOlwi4oSbXCIsXCImcmVhbHBhcnQ7XCI6XCLihJxcIixcIiZyZWFscztcIjpcIuKEnVwiLFwiJnJlY3Q7XCI6XCLilq1cIixcIiZyZWdcIjpcIsKuXCIsXCImcmVnO1wiOlwiwq5cIixcIiZyZmlzaHQ7XCI6XCLipb1cIixcIiZyZmxvb3I7XCI6XCLijItcIixcIiZyZnI7XCI6XCLwnZSvXCIsXCImcmhhcmQ7XCI6XCLih4FcIixcIiZyaGFydTtcIjpcIuKHgFwiLFwiJnJoYXJ1bDtcIjpcIuKlrFwiLFwiJnJobztcIjpcIs+BXCIsXCImcmhvdjtcIjpcIs+xXCIsXCImcmlnaHRhcnJvdztcIjpcIuKGklwiLFwiJnJpZ2h0YXJyb3d0YWlsO1wiOlwi4oajXCIsXCImcmlnaHRoYXJwb29uZG93bjtcIjpcIuKHgVwiLFwiJnJpZ2h0aGFycG9vbnVwO1wiOlwi4oeAXCIsXCImcmlnaHRsZWZ0YXJyb3dzO1wiOlwi4oeEXCIsXCImcmlnaHRsZWZ0aGFycG9vbnM7XCI6XCLih4xcIixcIiZyaWdodHJpZ2h0YXJyb3dzO1wiOlwi4oeJXCIsXCImcmlnaHRzcXVpZ2Fycm93O1wiOlwi4oadXCIsXCImcmlnaHR0aHJlZXRpbWVzO1wiOlwi4ouMXCIsXCImcmluZztcIjpcIsuaXCIsXCImcmlzaW5nZG90c2VxO1wiOlwi4omTXCIsXCImcmxhcnI7XCI6XCLih4RcIixcIiZybGhhcjtcIjpcIuKHjFwiLFwiJnJsbTtcIjpcIuKAj1wiLFwiJnJtb3VzdDtcIjpcIuKOsVwiLFwiJnJtb3VzdGFjaGU7XCI6XCLijrFcIixcIiZybm1pZDtcIjpcIuKrrlwiLFwiJnJvYW5nO1wiOlwi4p+tXCIsXCImcm9hcnI7XCI6XCLih75cIixcIiZyb2JyaztcIjpcIuKfp1wiLFwiJnJvcGFyO1wiOlwi4qaGXCIsXCImcm9wZjtcIjpcIvCdlaNcIixcIiZyb3BsdXM7XCI6XCLiqK5cIixcIiZyb3RpbWVzO1wiOlwi4qi1XCIsXCImcnBhcjtcIjpcIilcIixcIiZycGFyZ3Q7XCI6XCLippRcIixcIiZycHBvbGludDtcIjpcIuKoklwiLFwiJnJyYXJyO1wiOlwi4oeJXCIsXCImcnNhcXVvO1wiOlwi4oC6XCIsXCImcnNjcjtcIjpcIvCdk4dcIixcIiZyc2g7XCI6XCLihrFcIixcIiZyc3FiO1wiOlwiXVwiLFwiJnJzcXVvO1wiOlwi4oCZXCIsXCImcnNxdW9yO1wiOlwi4oCZXCIsXCImcnRocmVlO1wiOlwi4ouMXCIsXCImcnRpbWVzO1wiOlwi4ouKXCIsXCImcnRyaTtcIjpcIuKWuVwiLFwiJnJ0cmllO1wiOlwi4oq1XCIsXCImcnRyaWY7XCI6XCLilrhcIixcIiZydHJpbHRyaTtcIjpcIuKnjlwiLFwiJnJ1bHVoYXI7XCI6XCLipahcIixcIiZyeDtcIjpcIuKEnlwiLFwiJnNhY3V0ZTtcIjpcIsWbXCIsXCImc2JxdW87XCI6XCLigJpcIixcIiZzYztcIjpcIuKJu1wiLFwiJnNjRTtcIjpcIuKqtFwiLFwiJnNjYXA7XCI6XCLiqrhcIixcIiZzY2Fyb247XCI6XCLFoVwiLFwiJnNjY3VlO1wiOlwi4om9XCIsXCImc2NlO1wiOlwi4qqwXCIsXCImc2NlZGlsO1wiOlwixZ9cIixcIiZzY2lyYztcIjpcIsWdXCIsXCImc2NuRTtcIjpcIuKqtlwiLFwiJnNjbmFwO1wiOlwi4qq6XCIsXCImc2Nuc2ltO1wiOlwi4oupXCIsXCImc2Nwb2xpbnQ7XCI6XCLiqJNcIixcIiZzY3NpbTtcIjpcIuKJv1wiLFwiJnNjeTtcIjpcItGBXCIsXCImc2RvdDtcIjpcIuKLhVwiLFwiJnNkb3RiO1wiOlwi4oqhXCIsXCImc2RvdGU7XCI6XCLiqaZcIixcIiZzZUFycjtcIjpcIuKHmFwiLFwiJnNlYXJoaztcIjpcIuKkpVwiLFwiJnNlYXJyO1wiOlwi4oaYXCIsXCImc2VhcnJvdztcIjpcIuKGmFwiLFwiJnNlY3RcIjpcIsKnXCIsXCImc2VjdDtcIjpcIsKnXCIsXCImc2VtaTtcIjpcIjtcIixcIiZzZXN3YXI7XCI6XCLipKlcIixcIiZzZXRtaW51cztcIjpcIuKIllwiLFwiJnNldG1uO1wiOlwi4oiWXCIsXCImc2V4dDtcIjpcIuKctlwiLFwiJnNmcjtcIjpcIvCdlLBcIixcIiZzZnJvd247XCI6XCLijKJcIixcIiZzaGFycDtcIjpcIuKZr1wiLFwiJnNoY2hjeTtcIjpcItGJXCIsXCImc2hjeTtcIjpcItGIXCIsXCImc2hvcnRtaWQ7XCI6XCLiiKNcIixcIiZzaG9ydHBhcmFsbGVsO1wiOlwi4oilXCIsXCImc2h5XCI6XCLCrVwiLFwiJnNoeTtcIjpcIsKtXCIsXCImc2lnbWE7XCI6XCLPg1wiLFwiJnNpZ21hZjtcIjpcIs+CXCIsXCImc2lnbWF2O1wiOlwiz4JcIixcIiZzaW07XCI6XCLiiLxcIixcIiZzaW1kb3Q7XCI6XCLiqapcIixcIiZzaW1lO1wiOlwi4omDXCIsXCImc2ltZXE7XCI6XCLiiYNcIixcIiZzaW1nO1wiOlwi4qqeXCIsXCImc2ltZ0U7XCI6XCLiqqBcIixcIiZzaW1sO1wiOlwi4qqdXCIsXCImc2ltbEU7XCI6XCLiqp9cIixcIiZzaW1uZTtcIjpcIuKJhlwiLFwiJnNpbXBsdXM7XCI6XCLiqKRcIixcIiZzaW1yYXJyO1wiOlwi4qWyXCIsXCImc2xhcnI7XCI6XCLihpBcIixcIiZzbWFsbHNldG1pbnVzO1wiOlwi4oiWXCIsXCImc21hc2hwO1wiOlwi4qizXCIsXCImc21lcGFyc2w7XCI6XCLip6RcIixcIiZzbWlkO1wiOlwi4oijXCIsXCImc21pbGU7XCI6XCLijKNcIixcIiZzbXQ7XCI6XCLiqqpcIixcIiZzbXRlO1wiOlwi4qqsXCIsXCImc210ZXM7XCI6XCLiqqzvuIBcIixcIiZzb2Z0Y3k7XCI6XCLRjFwiLFwiJnNvbDtcIjpcIi9cIixcIiZzb2xiO1wiOlwi4qeEXCIsXCImc29sYmFyO1wiOlwi4oy/XCIsXCImc29wZjtcIjpcIvCdlaRcIixcIiZzcGFkZXM7XCI6XCLimaBcIixcIiZzcGFkZXN1aXQ7XCI6XCLimaBcIixcIiZzcGFyO1wiOlwi4oilXCIsXCImc3FjYXA7XCI6XCLiipNcIixcIiZzcWNhcHM7XCI6XCLiipPvuIBcIixcIiZzcWN1cDtcIjpcIuKKlFwiLFwiJnNxY3VwcztcIjpcIuKKlO+4gFwiLFwiJnNxc3ViO1wiOlwi4oqPXCIsXCImc3FzdWJlO1wiOlwi4oqRXCIsXCImc3FzdWJzZXQ7XCI6XCLiio9cIixcIiZzcXN1YnNldGVxO1wiOlwi4oqRXCIsXCImc3FzdXA7XCI6XCLiipBcIixcIiZzcXN1cGU7XCI6XCLiipJcIixcIiZzcXN1cHNldDtcIjpcIuKKkFwiLFwiJnNxc3Vwc2V0ZXE7XCI6XCLiipJcIixcIiZzcXU7XCI6XCLilqFcIixcIiZzcXVhcmU7XCI6XCLilqFcIixcIiZzcXVhcmY7XCI6XCLilqpcIixcIiZzcXVmO1wiOlwi4paqXCIsXCImc3JhcnI7XCI6XCLihpJcIixcIiZzc2NyO1wiOlwi8J2TiFwiLFwiJnNzZXRtbjtcIjpcIuKIllwiLFwiJnNzbWlsZTtcIjpcIuKMo1wiLFwiJnNzdGFyZjtcIjpcIuKLhlwiLFwiJnN0YXI7XCI6XCLimIZcIixcIiZzdGFyZjtcIjpcIuKYhVwiLFwiJnN0cmFpZ2h0ZXBzaWxvbjtcIjpcIs+1XCIsXCImc3RyYWlnaHRwaGk7XCI6XCLPlVwiLFwiJnN0cm5zO1wiOlwiwq9cIixcIiZzdWI7XCI6XCLiioJcIixcIiZzdWJFO1wiOlwi4quFXCIsXCImc3ViZG90O1wiOlwi4qq9XCIsXCImc3ViZTtcIjpcIuKKhlwiLFwiJnN1YmVkb3Q7XCI6XCLiq4NcIixcIiZzdWJtdWx0O1wiOlwi4quBXCIsXCImc3VibkU7XCI6XCLiq4tcIixcIiZzdWJuZTtcIjpcIuKKilwiLFwiJnN1YnBsdXM7XCI6XCLiqr9cIixcIiZzdWJyYXJyO1wiOlwi4qW5XCIsXCImc3Vic2V0O1wiOlwi4oqCXCIsXCImc3Vic2V0ZXE7XCI6XCLiioZcIixcIiZzdWJzZXRlcXE7XCI6XCLiq4VcIixcIiZzdWJzZXRuZXE7XCI6XCLiiopcIixcIiZzdWJzZXRuZXFxO1wiOlwi4quLXCIsXCImc3Vic2ltO1wiOlwi4quHXCIsXCImc3Vic3ViO1wiOlwi4quVXCIsXCImc3Vic3VwO1wiOlwi4quTXCIsXCImc3VjYztcIjpcIuKJu1wiLFwiJnN1Y2NhcHByb3g7XCI6XCLiqrhcIixcIiZzdWNjY3VybHllcTtcIjpcIuKJvVwiLFwiJnN1Y2NlcTtcIjpcIuKqsFwiLFwiJnN1Y2NuYXBwcm94O1wiOlwi4qq6XCIsXCImc3VjY25lcXE7XCI6XCLiqrZcIixcIiZzdWNjbnNpbTtcIjpcIuKLqVwiLFwiJnN1Y2NzaW07XCI6XCLiib9cIixcIiZzdW07XCI6XCLiiJFcIixcIiZzdW5nO1wiOlwi4pmqXCIsXCImc3VwMVwiOlwiwrlcIixcIiZzdXAxO1wiOlwiwrlcIixcIiZzdXAyXCI6XCLCslwiLFwiJnN1cDI7XCI6XCLCslwiLFwiJnN1cDNcIjpcIsKzXCIsXCImc3VwMztcIjpcIsKzXCIsXCImc3VwO1wiOlwi4oqDXCIsXCImc3VwRTtcIjpcIuKrhlwiLFwiJnN1cGRvdDtcIjpcIuKqvlwiLFwiJnN1cGRzdWI7XCI6XCLiq5hcIixcIiZzdXBlO1wiOlwi4oqHXCIsXCImc3VwZWRvdDtcIjpcIuKrhFwiLFwiJnN1cGhzb2w7XCI6XCLin4lcIixcIiZzdXBoc3ViO1wiOlwi4quXXCIsXCImc3VwbGFycjtcIjpcIuKlu1wiLFwiJnN1cG11bHQ7XCI6XCLiq4JcIixcIiZzdXBuRTtcIjpcIuKrjFwiLFwiJnN1cG5lO1wiOlwi4oqLXCIsXCImc3VwcGx1cztcIjpcIuKrgFwiLFwiJnN1cHNldDtcIjpcIuKKg1wiLFwiJnN1cHNldGVxO1wiOlwi4oqHXCIsXCImc3Vwc2V0ZXFxO1wiOlwi4quGXCIsXCImc3Vwc2V0bmVxO1wiOlwi4oqLXCIsXCImc3Vwc2V0bmVxcTtcIjpcIuKrjFwiLFwiJnN1cHNpbTtcIjpcIuKriFwiLFwiJnN1cHN1YjtcIjpcIuKrlFwiLFwiJnN1cHN1cDtcIjpcIuKrllwiLFwiJnN3QXJyO1wiOlwi4oeZXCIsXCImc3dhcmhrO1wiOlwi4qSmXCIsXCImc3dhcnI7XCI6XCLihplcIixcIiZzd2Fycm93O1wiOlwi4oaZXCIsXCImc3dud2FyO1wiOlwi4qSqXCIsXCImc3psaWdcIjpcIsOfXCIsXCImc3psaWc7XCI6XCLDn1wiLFwiJnRhcmdldDtcIjpcIuKMllwiLFwiJnRhdTtcIjpcIs+EXCIsXCImdGJyaztcIjpcIuKOtFwiLFwiJnRjYXJvbjtcIjpcIsWlXCIsXCImdGNlZGlsO1wiOlwixaNcIixcIiZ0Y3k7XCI6XCLRglwiLFwiJnRkb3Q7XCI6XCLig5tcIixcIiZ0ZWxyZWM7XCI6XCLijJVcIixcIiZ0ZnI7XCI6XCLwnZSxXCIsXCImdGhlcmU0O1wiOlwi4oi0XCIsXCImdGhlcmVmb3JlO1wiOlwi4oi0XCIsXCImdGhldGE7XCI6XCLOuFwiLFwiJnRoZXRhc3ltO1wiOlwiz5FcIixcIiZ0aGV0YXY7XCI6XCLPkVwiLFwiJnRoaWNrYXBwcm94O1wiOlwi4omIXCIsXCImdGhpY2tzaW07XCI6XCLiiLxcIixcIiZ0aGluc3A7XCI6XCLigIlcIixcIiZ0aGthcDtcIjpcIuKJiFwiLFwiJnRoa3NpbTtcIjpcIuKIvFwiLFwiJnRob3JuXCI6XCLDvlwiLFwiJnRob3JuO1wiOlwiw75cIixcIiZ0aWxkZTtcIjpcIsucXCIsXCImdGltZXNcIjpcIsOXXCIsXCImdGltZXM7XCI6XCLDl1wiLFwiJnRpbWVzYjtcIjpcIuKKoFwiLFwiJnRpbWVzYmFyO1wiOlwi4qixXCIsXCImdGltZXNkO1wiOlwi4qiwXCIsXCImdGludDtcIjpcIuKIrVwiLFwiJnRvZWE7XCI6XCLipKhcIixcIiZ0b3A7XCI6XCLiiqRcIixcIiZ0b3Bib3Q7XCI6XCLijLZcIixcIiZ0b3BjaXI7XCI6XCLiq7FcIixcIiZ0b3BmO1wiOlwi8J2VpVwiLFwiJnRvcGZvcms7XCI6XCLiq5pcIixcIiZ0b3NhO1wiOlwi4qSpXCIsXCImdHByaW1lO1wiOlwi4oC0XCIsXCImdHJhZGU7XCI6XCLihKJcIixcIiZ0cmlhbmdsZTtcIjpcIuKWtVwiLFwiJnRyaWFuZ2xlZG93bjtcIjpcIuKWv1wiLFwiJnRyaWFuZ2xlbGVmdDtcIjpcIuKXg1wiLFwiJnRyaWFuZ2xlbGVmdGVxO1wiOlwi4oq0XCIsXCImdHJpYW5nbGVxO1wiOlwi4omcXCIsXCImdHJpYW5nbGVyaWdodDtcIjpcIuKWuVwiLFwiJnRyaWFuZ2xlcmlnaHRlcTtcIjpcIuKKtVwiLFwiJnRyaWRvdDtcIjpcIuKXrFwiLFwiJnRyaWU7XCI6XCLiiZxcIixcIiZ0cmltaW51cztcIjpcIuKoulwiLFwiJnRyaXBsdXM7XCI6XCLiqLlcIixcIiZ0cmlzYjtcIjpcIuKnjVwiLFwiJnRyaXRpbWU7XCI6XCLiqLtcIixcIiZ0cnBleml1bTtcIjpcIuKPolwiLFwiJnRzY3I7XCI6XCLwnZOJXCIsXCImdHNjeTtcIjpcItGGXCIsXCImdHNoY3k7XCI6XCLRm1wiLFwiJnRzdHJvaztcIjpcIsWnXCIsXCImdHdpeHQ7XCI6XCLiiaxcIixcIiZ0d29oZWFkbGVmdGFycm93O1wiOlwi4oaeXCIsXCImdHdvaGVhZHJpZ2h0YXJyb3c7XCI6XCLihqBcIixcIiZ1QXJyO1wiOlwi4oeRXCIsXCImdUhhcjtcIjpcIuKlo1wiLFwiJnVhY3V0ZVwiOlwiw7pcIixcIiZ1YWN1dGU7XCI6XCLDulwiLFwiJnVhcnI7XCI6XCLihpFcIixcIiZ1YnJjeTtcIjpcItGeXCIsXCImdWJyZXZlO1wiOlwixa1cIixcIiZ1Y2lyY1wiOlwiw7tcIixcIiZ1Y2lyYztcIjpcIsO7XCIsXCImdWN5O1wiOlwi0YNcIixcIiZ1ZGFycjtcIjpcIuKHhVwiLFwiJnVkYmxhYztcIjpcIsWxXCIsXCImdWRoYXI7XCI6XCLipa5cIixcIiZ1ZmlzaHQ7XCI6XCLipb5cIixcIiZ1ZnI7XCI6XCLwnZSyXCIsXCImdWdyYXZlXCI6XCLDuVwiLFwiJnVncmF2ZTtcIjpcIsO5XCIsXCImdWhhcmw7XCI6XCLihr9cIixcIiZ1aGFycjtcIjpcIuKGvlwiLFwiJnVoYmxrO1wiOlwi4paAXCIsXCImdWxjb3JuO1wiOlwi4oycXCIsXCImdWxjb3JuZXI7XCI6XCLijJxcIixcIiZ1bGNyb3A7XCI6XCLijI9cIixcIiZ1bHRyaTtcIjpcIuKXuFwiLFwiJnVtYWNyO1wiOlwixatcIixcIiZ1bWxcIjpcIsKoXCIsXCImdW1sO1wiOlwiwqhcIixcIiZ1b2dvbjtcIjpcIsWzXCIsXCImdW9wZjtcIjpcIvCdlaZcIixcIiZ1cGFycm93O1wiOlwi4oaRXCIsXCImdXBkb3duYXJyb3c7XCI6XCLihpVcIixcIiZ1cGhhcnBvb25sZWZ0O1wiOlwi4oa/XCIsXCImdXBoYXJwb29ucmlnaHQ7XCI6XCLihr5cIixcIiZ1cGx1cztcIjpcIuKKjlwiLFwiJnVwc2k7XCI6XCLPhVwiLFwiJnVwc2loO1wiOlwiz5JcIixcIiZ1cHNpbG9uO1wiOlwiz4VcIixcIiZ1cHVwYXJyb3dzO1wiOlwi4oeIXCIsXCImdXJjb3JuO1wiOlwi4oydXCIsXCImdXJjb3JuZXI7XCI6XCLijJ1cIixcIiZ1cmNyb3A7XCI6XCLijI5cIixcIiZ1cmluZztcIjpcIsWvXCIsXCImdXJ0cmk7XCI6XCLil7lcIixcIiZ1c2NyO1wiOlwi8J2TilwiLFwiJnV0ZG90O1wiOlwi4ouwXCIsXCImdXRpbGRlO1wiOlwixalcIixcIiZ1dHJpO1wiOlwi4pa1XCIsXCImdXRyaWY7XCI6XCLilrRcIixcIiZ1dWFycjtcIjpcIuKHiFwiLFwiJnV1bWxcIjpcIsO8XCIsXCImdXVtbDtcIjpcIsO8XCIsXCImdXdhbmdsZTtcIjpcIuKmp1wiLFwiJnZBcnI7XCI6XCLih5VcIixcIiZ2QmFyO1wiOlwi4quoXCIsXCImdkJhcnY7XCI6XCLiq6lcIixcIiZ2RGFzaDtcIjpcIuKKqFwiLFwiJnZhbmdydDtcIjpcIuKmnFwiLFwiJnZhcmVwc2lsb247XCI6XCLPtVwiLFwiJnZhcmthcHBhO1wiOlwiz7BcIixcIiZ2YXJub3RoaW5nO1wiOlwi4oiFXCIsXCImdmFycGhpO1wiOlwiz5VcIixcIiZ2YXJwaTtcIjpcIs+WXCIsXCImdmFycHJvcHRvO1wiOlwi4oidXCIsXCImdmFycjtcIjpcIuKGlVwiLFwiJnZhcnJobztcIjpcIs+xXCIsXCImdmFyc2lnbWE7XCI6XCLPglwiLFwiJnZhcnN1YnNldG5lcTtcIjpcIuKKiu+4gFwiLFwiJnZhcnN1YnNldG5lcXE7XCI6XCLiq4vvuIBcIixcIiZ2YXJzdXBzZXRuZXE7XCI6XCLiiovvuIBcIixcIiZ2YXJzdXBzZXRuZXFxO1wiOlwi4quM77iAXCIsXCImdmFydGhldGE7XCI6XCLPkVwiLFwiJnZhcnRyaWFuZ2xlbGVmdDtcIjpcIuKKslwiLFwiJnZhcnRyaWFuZ2xlcmlnaHQ7XCI6XCLiirNcIixcIiZ2Y3k7XCI6XCLQslwiLFwiJnZkYXNoO1wiOlwi4oqiXCIsXCImdmVlO1wiOlwi4oioXCIsXCImdmVlYmFyO1wiOlwi4oq7XCIsXCImdmVlZXE7XCI6XCLiiZpcIixcIiZ2ZWxsaXA7XCI6XCLii65cIixcIiZ2ZXJiYXI7XCI6XCJ8XCIsXCImdmVydDtcIjpcInxcIixcIiZ2ZnI7XCI6XCLwnZSzXCIsXCImdmx0cmk7XCI6XCLiirJcIixcIiZ2bnN1YjtcIjpcIuKKguKDklwiLFwiJnZuc3VwO1wiOlwi4oqD4oOSXCIsXCImdm9wZjtcIjpcIvCdladcIixcIiZ2cHJvcDtcIjpcIuKInVwiLFwiJnZydHJpO1wiOlwi4oqzXCIsXCImdnNjcjtcIjpcIvCdk4tcIixcIiZ2c3VibkU7XCI6XCLiq4vvuIBcIixcIiZ2c3VibmU7XCI6XCLiiorvuIBcIixcIiZ2c3VwbkU7XCI6XCLiq4zvuIBcIixcIiZ2c3VwbmU7XCI6XCLiiovvuIBcIixcIiZ2emlnemFnO1wiOlwi4qaaXCIsXCImd2NpcmM7XCI6XCLFtVwiLFwiJndlZGJhcjtcIjpcIuKpn1wiLFwiJndlZGdlO1wiOlwi4oinXCIsXCImd2VkZ2VxO1wiOlwi4omZXCIsXCImd2VpZXJwO1wiOlwi4oSYXCIsXCImd2ZyO1wiOlwi8J2UtFwiLFwiJndvcGY7XCI6XCLwnZWoXCIsXCImd3A7XCI6XCLihJhcIixcIiZ3cjtcIjpcIuKJgFwiLFwiJndyZWF0aDtcIjpcIuKJgFwiLFwiJndzY3I7XCI6XCLwnZOMXCIsXCImeGNhcDtcIjpcIuKLglwiLFwiJnhjaXJjO1wiOlwi4pevXCIsXCImeGN1cDtcIjpcIuKLg1wiLFwiJnhkdHJpO1wiOlwi4pa9XCIsXCImeGZyO1wiOlwi8J2UtVwiLFwiJnhoQXJyO1wiOlwi4p+6XCIsXCImeGhhcnI7XCI6XCLin7dcIixcIiZ4aTtcIjpcIs6+XCIsXCImeGxBcnI7XCI6XCLin7hcIixcIiZ4bGFycjtcIjpcIuKftVwiLFwiJnhtYXA7XCI6XCLin7xcIixcIiZ4bmlzO1wiOlwi4ou7XCIsXCImeG9kb3Q7XCI6XCLiqIBcIixcIiZ4b3BmO1wiOlwi8J2VqVwiLFwiJnhvcGx1cztcIjpcIuKogVwiLFwiJnhvdGltZTtcIjpcIuKoglwiLFwiJnhyQXJyO1wiOlwi4p+5XCIsXCImeHJhcnI7XCI6XCLin7ZcIixcIiZ4c2NyO1wiOlwi8J2TjVwiLFwiJnhzcWN1cDtcIjpcIuKohlwiLFwiJnh1cGx1cztcIjpcIuKohFwiLFwiJnh1dHJpO1wiOlwi4pazXCIsXCImeHZlZTtcIjpcIuKLgVwiLFwiJnh3ZWRnZTtcIjpcIuKLgFwiLFwiJnlhY3V0ZVwiOlwiw71cIixcIiZ5YWN1dGU7XCI6XCLDvVwiLFwiJnlhY3k7XCI6XCLRj1wiLFwiJnljaXJjO1wiOlwixbdcIixcIiZ5Y3k7XCI6XCLRi1wiLFwiJnllblwiOlwiwqVcIixcIiZ5ZW47XCI6XCLCpVwiLFwiJnlmcjtcIjpcIvCdlLZcIixcIiZ5aWN5O1wiOlwi0ZdcIixcIiZ5b3BmO1wiOlwi8J2VqlwiLFwiJnlzY3I7XCI6XCLwnZOOXCIsXCImeXVjeTtcIjpcItGOXCIsXCImeXVtbFwiOlwiw79cIixcIiZ5dW1sO1wiOlwiw79cIixcIiZ6YWN1dGU7XCI6XCLFulwiLFwiJnpjYXJvbjtcIjpcIsW+XCIsXCImemN5O1wiOlwi0LdcIixcIiZ6ZG90O1wiOlwixbxcIixcIiZ6ZWV0cmY7XCI6XCLihKhcIixcIiZ6ZXRhO1wiOlwizrZcIixcIiZ6ZnI7XCI6XCLwnZS3XCIsXCImemhjeTtcIjpcItC2XCIsXCImemlncmFycjtcIjpcIuKHnVwiLFwiJnpvcGY7XCI6XCLwnZWrXCIsXCImenNjcjtcIjpcIvCdk49cIixcIiZ6d2o7XCI6XCLigI1cIixcIiZ6d25qO1wiOlwi4oCMXCJ9LGNoYXJhY3RlcnM6e1wiw4ZcIjpcIiZBRWxpZztcIixcIiZcIjpcIiZhbXA7XCIsXCLDgVwiOlwiJkFhY3V0ZTtcIixcIsSCXCI6XCImQWJyZXZlO1wiLFwiw4JcIjpcIiZBY2lyYztcIixcItCQXCI6XCImQWN5O1wiLFwi8J2UhFwiOlwiJkFmcjtcIixcIsOAXCI6XCImQWdyYXZlO1wiLFwizpFcIjpcIiZBbHBoYTtcIixcIsSAXCI6XCImQW1hY3I7XCIsXCLiqZNcIjpcIiZBbmQ7XCIsXCLEhFwiOlwiJkFvZ29uO1wiLFwi8J2UuFwiOlwiJkFvcGY7XCIsXCLigaFcIjpcIiZhZjtcIixcIsOFXCI6XCImYW5nc3Q7XCIsXCLwnZKcXCI6XCImQXNjcjtcIixcIuKJlFwiOlwiJmNvbG9uZXE7XCIsXCLDg1wiOlwiJkF0aWxkZTtcIixcIsOEXCI6XCImQXVtbDtcIixcIuKIllwiOlwiJnNzZXRtbjtcIixcIuKrp1wiOlwiJkJhcnY7XCIsXCLijIZcIjpcIiZkb3VibGViYXJ3ZWRnZTtcIixcItCRXCI6XCImQmN5O1wiLFwi4oi1XCI6XCImYmVjYXVzZTtcIixcIuKErFwiOlwiJmJlcm5vdTtcIixcIs6SXCI6XCImQmV0YTtcIixcIvCdlIVcIjpcIiZCZnI7XCIsXCLwnZS5XCI6XCImQm9wZjtcIixcIsuYXCI6XCImYnJldmU7XCIsXCLiiY5cIjpcIiZidW1wO1wiLFwi0KdcIjpcIiZDSGN5O1wiLFwiwqlcIjpcIiZjb3B5O1wiLFwixIZcIjpcIiZDYWN1dGU7XCIsXCLii5JcIjpcIiZDYXA7XCIsXCLihYVcIjpcIiZERDtcIixcIuKErVwiOlwiJkNmcjtcIixcIsSMXCI6XCImQ2Nhcm9uO1wiLFwiw4dcIjpcIiZDY2VkaWw7XCIsXCLEiFwiOlwiJkNjaXJjO1wiLFwi4oiwXCI6XCImQ2NvbmludDtcIixcIsSKXCI6XCImQ2RvdDtcIixcIsK4XCI6XCImY2VkaWw7XCIsXCLCt1wiOlwiJm1pZGRvdDtcIixcIs6nXCI6XCImQ2hpO1wiLFwi4oqZXCI6XCImb2RvdDtcIixcIuKKllwiOlwiJm9taW51cztcIixcIuKKlVwiOlwiJm9wbHVzO1wiLFwi4oqXXCI6XCImb3RpbWVzO1wiLFwi4oiyXCI6XCImY3djb25pbnQ7XCIsXCLigJ1cIjpcIiZyZHF1b3I7XCIsXCLigJlcIjpcIiZyc3F1b3I7XCIsXCLiiLdcIjpcIiZQcm9wb3J0aW9uO1wiLFwi4qm0XCI6XCImQ29sb25lO1wiLFwi4omhXCI6XCImZXF1aXY7XCIsXCLiiK9cIjpcIiZEb3VibGVDb250b3VySW50ZWdyYWw7XCIsXCLiiK5cIjpcIiZvaW50O1wiLFwi4oSCXCI6XCImY29tcGxleGVzO1wiLFwi4oiQXCI6XCImY29wcm9kO1wiLFwi4oizXCI6XCImYXdjb25pbnQ7XCIsXCLiqK9cIjpcIiZDcm9zcztcIixcIvCdkp5cIjpcIiZDc2NyO1wiLFwi4ouTXCI6XCImQ3VwO1wiLFwi4omNXCI6XCImYXN5bXBlcTtcIixcIuKkkVwiOlwiJkREb3RyYWhkO1wiLFwi0IJcIjpcIiZESmN5O1wiLFwi0IVcIjpcIiZEU2N5O1wiLFwi0I9cIjpcIiZEWmN5O1wiLFwi4oChXCI6XCImZGRhZ2dlcjtcIixcIuKGoVwiOlwiJkRhcnI7XCIsXCLiq6RcIjpcIiZEb3VibGVMZWZ0VGVlO1wiLFwixI5cIjpcIiZEY2Fyb247XCIsXCLQlFwiOlwiJkRjeTtcIixcIuKIh1wiOlwiJm5hYmxhO1wiLFwizpRcIjpcIiZEZWx0YTtcIixcIvCdlIdcIjpcIiZEZnI7XCIsXCLCtFwiOlwiJmFjdXRlO1wiLFwiy5lcIjpcIiZkb3Q7XCIsXCLLnVwiOlwiJmRibGFjO1wiLFwiYFwiOlwiJmdyYXZlO1wiLFwiy5xcIjpcIiZ0aWxkZTtcIixcIuKLhFwiOlwiJmRpYW1vbmQ7XCIsXCLihYZcIjpcIiZkZDtcIixcIvCdlLtcIjpcIiZEb3BmO1wiLFwiwqhcIjpcIiZ1bWw7XCIsXCLig5xcIjpcIiZEb3REb3Q7XCIsXCLiiZBcIjpcIiZlc2RvdDtcIixcIuKHk1wiOlwiJmRBcnI7XCIsXCLih5BcIjpcIiZsQXJyO1wiLFwi4oeUXCI6XCImaWZmO1wiLFwi4p+4XCI6XCImeGxBcnI7XCIsXCLin7pcIjpcIiZ4aEFycjtcIixcIuKfuVwiOlwiJnhyQXJyO1wiLFwi4oeSXCI6XCImckFycjtcIixcIuKKqFwiOlwiJnZEYXNoO1wiLFwi4oeRXCI6XCImdUFycjtcIixcIuKHlVwiOlwiJnZBcnI7XCIsXCLiiKVcIjpcIiZzcGFyO1wiLFwi4oaTXCI6XCImZG93bmFycm93O1wiLFwi4qSTXCI6XCImRG93bkFycm93QmFyO1wiLFwi4oe1XCI6XCImZHVhcnI7XCIsXCLMkVwiOlwiJkRvd25CcmV2ZTtcIixcIuKlkFwiOlwiJkRvd25MZWZ0UmlnaHRWZWN0b3I7XCIsXCLipZ5cIjpcIiZEb3duTGVmdFRlZVZlY3RvcjtcIixcIuKGvVwiOlwiJmxoYXJkO1wiLFwi4qWWXCI6XCImRG93bkxlZnRWZWN0b3JCYXI7XCIsXCLipZ9cIjpcIiZEb3duUmlnaHRUZWVWZWN0b3I7XCIsXCLih4FcIjpcIiZyaWdodGhhcnBvb25kb3duO1wiLFwi4qWXXCI6XCImRG93blJpZ2h0VmVjdG9yQmFyO1wiLFwi4oqkXCI6XCImdG9wO1wiLFwi4oanXCI6XCImbWFwc3RvZG93bjtcIixcIvCdkp9cIjpcIiZEc2NyO1wiLFwixJBcIjpcIiZEc3Ryb2s7XCIsXCLFilwiOlwiJkVORztcIixcIsOQXCI6XCImRVRIO1wiLFwiw4lcIjpcIiZFYWN1dGU7XCIsXCLEmlwiOlwiJkVjYXJvbjtcIixcIsOKXCI6XCImRWNpcmM7XCIsXCLQrVwiOlwiJkVjeTtcIixcIsSWXCI6XCImRWRvdDtcIixcIvCdlIhcIjpcIiZFZnI7XCIsXCLDiFwiOlwiJkVncmF2ZTtcIixcIuKIiFwiOlwiJmlzaW52O1wiLFwixJJcIjpcIiZFbWFjcjtcIixcIuKXu1wiOlwiJkVtcHR5U21hbGxTcXVhcmU7XCIsXCLilqtcIjpcIiZFbXB0eVZlcnlTbWFsbFNxdWFyZTtcIixcIsSYXCI6XCImRW9nb247XCIsXCLwnZS8XCI6XCImRW9wZjtcIixcIs6VXCI6XCImRXBzaWxvbjtcIixcIuKptVwiOlwiJkVxdWFsO1wiLFwi4omCXCI6XCImZXNpbTtcIixcIuKHjFwiOlwiJnJsaGFyO1wiLFwi4oSwXCI6XCImZXhwZWN0YXRpb247XCIsXCLiqbNcIjpcIiZFc2ltO1wiLFwizpdcIjpcIiZFdGE7XCIsXCLDi1wiOlwiJkV1bWw7XCIsXCLiiINcIjpcIiZleGlzdDtcIixcIuKFh1wiOlwiJmV4cG9uZW50aWFsZTtcIixcItCkXCI6XCImRmN5O1wiLFwi8J2UiVwiOlwiJkZmcjtcIixcIuKXvFwiOlwiJkZpbGxlZFNtYWxsU3F1YXJlO1wiLFwi4paqXCI6XCImc3F1ZjtcIixcIvCdlL1cIjpcIiZGb3BmO1wiLFwi4oiAXCI6XCImZm9yYWxsO1wiLFwi4oSxXCI6XCImRnNjcjtcIixcItCDXCI6XCImR0pjeTtcIixcIj5cIjpcIiZndDtcIixcIs6TXCI6XCImR2FtbWE7XCIsXCLPnFwiOlwiJkdhbW1hZDtcIixcIsSeXCI6XCImR2JyZXZlO1wiLFwixKJcIjpcIiZHY2VkaWw7XCIsXCLEnFwiOlwiJkdjaXJjO1wiLFwi0JNcIjpcIiZHY3k7XCIsXCLEoFwiOlwiJkdkb3Q7XCIsXCLwnZSKXCI6XCImR2ZyO1wiLFwi4ouZXCI6XCImZ2dnO1wiLFwi8J2UvlwiOlwiJkdvcGY7XCIsXCLiiaVcIjpcIiZnZXE7XCIsXCLii5tcIjpcIiZndHJlcWxlc3M7XCIsXCLiiadcIjpcIiZnZXFxO1wiLFwi4qqiXCI6XCImR3JlYXRlckdyZWF0ZXI7XCIsXCLiibdcIjpcIiZndHJsZXNzO1wiLFwi4qm+XCI6XCImZ2VzO1wiLFwi4omzXCI6XCImZ3Ryc2ltO1wiLFwi8J2SolwiOlwiJkdzY3I7XCIsXCLiiatcIjpcIiZnZztcIixcItCqXCI6XCImSEFSRGN5O1wiLFwiy4dcIjpcIiZjYXJvbjtcIixcIl5cIjpcIiZIYXQ7XCIsXCLEpFwiOlwiJkhjaXJjO1wiLFwi4oSMXCI6XCImUG9pbmNhcmVwbGFuZTtcIixcIuKEi1wiOlwiJmhhbWlsdDtcIixcIuKEjVwiOlwiJnF1YXRlcm5pb25zO1wiLFwi4pSAXCI6XCImYm94aDtcIixcIsSmXCI6XCImSHN0cm9rO1wiLFwi4omPXCI6XCImYnVtcGVxO1wiLFwi0JVcIjpcIiZJRWN5O1wiLFwixLJcIjpcIiZJSmxpZztcIixcItCBXCI6XCImSU9jeTtcIixcIsONXCI6XCImSWFjdXRlO1wiLFwiw45cIjpcIiZJY2lyYztcIixcItCYXCI6XCImSWN5O1wiLFwixLBcIjpcIiZJZG90O1wiLFwi4oSRXCI6XCImaW1hZ3BhcnQ7XCIsXCLDjFwiOlwiJklncmF2ZTtcIixcIsSqXCI6XCImSW1hY3I7XCIsXCLihYhcIjpcIiZpaTtcIixcIuKIrFwiOlwiJkludDtcIixcIuKIq1wiOlwiJmludDtcIixcIuKLglwiOlwiJnhjYXA7XCIsXCLigaNcIjpcIiZpYztcIixcIuKBolwiOlwiJml0O1wiLFwixK5cIjpcIiZJb2dvbjtcIixcIvCdlYBcIjpcIiZJb3BmO1wiLFwizplcIjpcIiZJb3RhO1wiLFwi4oSQXCI6XCImaW1hZ2xpbmU7XCIsXCLEqFwiOlwiJkl0aWxkZTtcIixcItCGXCI6XCImSXVrY3k7XCIsXCLDj1wiOlwiJkl1bWw7XCIsXCLEtFwiOlwiJkpjaXJjO1wiLFwi0JlcIjpcIiZKY3k7XCIsXCLwnZSNXCI6XCImSmZyO1wiLFwi8J2VgVwiOlwiJkpvcGY7XCIsXCLwnZKlXCI6XCImSnNjcjtcIixcItCIXCI6XCImSnNlcmN5O1wiLFwi0IRcIjpcIiZKdWtjeTtcIixcItClXCI6XCImS0hjeTtcIixcItCMXCI6XCImS0pjeTtcIixcIs6aXCI6XCImS2FwcGE7XCIsXCLEtlwiOlwiJktjZWRpbDtcIixcItCaXCI6XCImS2N5O1wiLFwi8J2UjlwiOlwiJktmcjtcIixcIvCdlYJcIjpcIiZLb3BmO1wiLFwi8J2SplwiOlwiJktzY3I7XCIsXCLQiVwiOlwiJkxKY3k7XCIsXCI8XCI6XCImbHQ7XCIsXCLEuVwiOlwiJkxhY3V0ZTtcIixcIs6bXCI6XCImTGFtYmRhO1wiLFwi4p+qXCI6XCImTGFuZztcIixcIuKEklwiOlwiJmxhZ3JhbjtcIixcIuKGnlwiOlwiJnR3b2hlYWRsZWZ0YXJyb3c7XCIsXCLEvVwiOlwiJkxjYXJvbjtcIixcIsS7XCI6XCImTGNlZGlsO1wiLFwi0JtcIjpcIiZMY3k7XCIsXCLin6hcIjpcIiZsYW5nbGU7XCIsXCLihpBcIjpcIiZzbGFycjtcIixcIuKHpFwiOlwiJmxhcnJiO1wiLFwi4oeGXCI6XCImbHJhcnI7XCIsXCLijIhcIjpcIiZsY2VpbDtcIixcIuKfplwiOlwiJmxvYnJrO1wiLFwi4qWhXCI6XCImTGVmdERvd25UZWVWZWN0b3I7XCIsXCLih4NcIjpcIiZkb3duaGFycG9vbmxlZnQ7XCIsXCLipZlcIjpcIiZMZWZ0RG93blZlY3RvckJhcjtcIixcIuKMilwiOlwiJmxmbG9vcjtcIixcIuKGlFwiOlwiJmxlZnRyaWdodGFycm93O1wiLFwi4qWOXCI6XCImTGVmdFJpZ2h0VmVjdG9yO1wiLFwi4oqjXCI6XCImZGFzaHY7XCIsXCLihqRcIjpcIiZtYXBzdG9sZWZ0O1wiLFwi4qWaXCI6XCImTGVmdFRlZVZlY3RvcjtcIixcIuKKslwiOlwiJnZsdHJpO1wiLFwi4qePXCI6XCImTGVmdFRyaWFuZ2xlQmFyO1wiLFwi4oq0XCI6XCImdHJpYW5nbGVsZWZ0ZXE7XCIsXCLipZFcIjpcIiZMZWZ0VXBEb3duVmVjdG9yO1wiLFwi4qWgXCI6XCImTGVmdFVwVGVlVmVjdG9yO1wiLFwi4oa/XCI6XCImdXBoYXJwb29ubGVmdDtcIixcIuKlmFwiOlwiJkxlZnRVcFZlY3RvckJhcjtcIixcIuKGvFwiOlwiJmxoYXJ1O1wiLFwi4qWSXCI6XCImTGVmdFZlY3RvckJhcjtcIixcIuKLmlwiOlwiJmxlc3NlcWd0cjtcIixcIuKJplwiOlwiJmxlcXE7XCIsXCLiibZcIjpcIiZsZztcIixcIuKqoVwiOlwiJkxlc3NMZXNzO1wiLFwi4qm9XCI6XCImbGVzO1wiLFwi4omyXCI6XCImbHNpbTtcIixcIvCdlI9cIjpcIiZMZnI7XCIsXCLii5hcIjpcIiZMbDtcIixcIuKHmlwiOlwiJmxBYXJyO1wiLFwixL9cIjpcIiZMbWlkb3Q7XCIsXCLin7VcIjpcIiZ4bGFycjtcIixcIuKft1wiOlwiJnhoYXJyO1wiLFwi4p+2XCI6XCImeHJhcnI7XCIsXCLwnZWDXCI6XCImTG9wZjtcIixcIuKGmVwiOlwiJnN3YXJyb3c7XCIsXCLihphcIjpcIiZzZWFycm93O1wiLFwi4oawXCI6XCImbHNoO1wiLFwixYFcIjpcIiZMc3Ryb2s7XCIsXCLiiapcIjpcIiZsbDtcIixcIuKkhVwiOlwiJk1hcDtcIixcItCcXCI6XCImTWN5O1wiLFwi4oGfXCI6XCImTWVkaXVtU3BhY2U7XCIsXCLihLNcIjpcIiZwaG1tYXQ7XCIsXCLwnZSQXCI6XCImTWZyO1wiLFwi4oiTXCI6XCImbXA7XCIsXCLwnZWEXCI6XCImTW9wZjtcIixcIs6cXCI6XCImTXU7XCIsXCLQilwiOlwiJk5KY3k7XCIsXCLFg1wiOlwiJk5hY3V0ZTtcIixcIsWHXCI6XCImTmNhcm9uO1wiLFwixYVcIjpcIiZOY2VkaWw7XCIsXCLQnVwiOlwiJk5jeTtcIixcIuKAi1wiOlwiJlplcm9XaWR0aFNwYWNlO1wiLFwiXFxuXCI6XCImTmV3TGluZTtcIixcIvCdlJFcIjpcIiZOZnI7XCIsXCLigaBcIjpcIiZOb0JyZWFrO1wiLFwiwqBcIjpcIiZuYnNwO1wiLFwi4oSVXCI6XCImbmF0dXJhbHM7XCIsXCLiq6xcIjpcIiZOb3Q7XCIsXCLiiaJcIjpcIiZuZXF1aXY7XCIsXCLiia1cIjpcIiZOb3RDdXBDYXA7XCIsXCLiiKZcIjpcIiZuc3BhcjtcIixcIuKIiVwiOlwiJm5vdGludmE7XCIsXCLiiaBcIjpcIiZuZTtcIixcIuKJgsy4XCI6XCImbmVzaW07XCIsXCLiiIRcIjpcIiZuZXhpc3RzO1wiLFwi4omvXCI6XCImbmd0cjtcIixcIuKJsVwiOlwiJm5nZXE7XCIsXCLiiafMuFwiOlwiJm5nZXFxO1wiLFwi4omrzLhcIjpcIiZuR3R2O1wiLFwi4om5XCI6XCImbnRnbDtcIixcIuKpvsy4XCI6XCImbmdlcztcIixcIuKJtVwiOlwiJm5nc2ltO1wiLFwi4omOzLhcIjpcIiZuYnVtcDtcIixcIuKJj8y4XCI6XCImbmJ1bXBlO1wiLFwi4ouqXCI6XCImbnRyaWFuZ2xlbGVmdDtcIixcIuKnj8y4XCI6XCImTm90TGVmdFRyaWFuZ2xlQmFyO1wiLFwi4ousXCI6XCImbnRyaWFuZ2xlbGVmdGVxO1wiLFwi4omuXCI6XCImbmx0O1wiLFwi4omwXCI6XCImbmxlcTtcIixcIuKJuFwiOlwiJm50bGc7XCIsXCLiiarMuFwiOlwiJm5MdHY7XCIsXCLiqb3MuFwiOlwiJm5sZXM7XCIsXCLiibRcIjpcIiZubHNpbTtcIixcIuKqosy4XCI6XCImTm90TmVzdGVkR3JlYXRlckdyZWF0ZXI7XCIsXCLiqqHMuFwiOlwiJk5vdE5lc3RlZExlc3NMZXNzO1wiLFwi4oqAXCI6XCImbnByZWM7XCIsXCLiqq/MuFwiOlwiJm5wcmVjZXE7XCIsXCLii6BcIjpcIiZucHJjdWU7XCIsXCLiiIxcIjpcIiZub3RuaXZhO1wiLFwi4ourXCI6XCImbnRyaWFuZ2xlcmlnaHQ7XCIsXCLip5DMuFwiOlwiJk5vdFJpZ2h0VHJpYW5nbGVCYXI7XCIsXCLii61cIjpcIiZudHJpYW5nbGVyaWdodGVxO1wiLFwi4oqPzLhcIjpcIiZOb3RTcXVhcmVTdWJzZXQ7XCIsXCLii6JcIjpcIiZuc3FzdWJlO1wiLFwi4oqQzLhcIjpcIiZOb3RTcXVhcmVTdXBlcnNldDtcIixcIuKLo1wiOlwiJm5zcXN1cGU7XCIsXCLiioLig5JcIjpcIiZ2bnN1YjtcIixcIuKKiFwiOlwiJm5zdWJzZXRlcTtcIixcIuKKgVwiOlwiJm5zdWNjO1wiLFwi4qqwzLhcIjpcIiZuc3VjY2VxO1wiLFwi4ouhXCI6XCImbnNjY3VlO1wiLFwi4om/zLhcIjpcIiZOb3RTdWNjZWVkc1RpbGRlO1wiLFwi4oqD4oOSXCI6XCImdm5zdXA7XCIsXCLiiolcIjpcIiZuc3Vwc2V0ZXE7XCIsXCLiiYFcIjpcIiZuc2ltO1wiLFwi4omEXCI6XCImbnNpbWVxO1wiLFwi4omHXCI6XCImbmNvbmc7XCIsXCLiiYlcIjpcIiZuYXBwcm94O1wiLFwi4oikXCI6XCImbnNtaWQ7XCIsXCLwnZKpXCI6XCImTnNjcjtcIixcIsORXCI6XCImTnRpbGRlO1wiLFwizp1cIjpcIiZOdTtcIixcIsWSXCI6XCImT0VsaWc7XCIsXCLDk1wiOlwiJk9hY3V0ZTtcIixcIsOUXCI6XCImT2NpcmM7XCIsXCLQnlwiOlwiJk9jeTtcIixcIsWQXCI6XCImT2RibGFjO1wiLFwi8J2UklwiOlwiJk9mcjtcIixcIsOSXCI6XCImT2dyYXZlO1wiLFwixYxcIjpcIiZPbWFjcjtcIixcIs6pXCI6XCImb2htO1wiLFwizp9cIjpcIiZPbWljcm9uO1wiLFwi8J2VhlwiOlwiJk9vcGY7XCIsXCLigJxcIjpcIiZsZHF1bztcIixcIuKAmFwiOlwiJmxzcXVvO1wiLFwi4qmUXCI6XCImT3I7XCIsXCLwnZKqXCI6XCImT3NjcjtcIixcIsOYXCI6XCImT3NsYXNoO1wiLFwiw5VcIjpcIiZPdGlsZGU7XCIsXCLiqLdcIjpcIiZPdGltZXM7XCIsXCLDllwiOlwiJk91bWw7XCIsXCLigL5cIjpcIiZvbGluZTtcIixcIuKPnlwiOlwiJk92ZXJCcmFjZTtcIixcIuKOtFwiOlwiJnRicms7XCIsXCLij5xcIjpcIiZPdmVyUGFyZW50aGVzaXM7XCIsXCLiiIJcIjpcIiZwYXJ0O1wiLFwi0J9cIjpcIiZQY3k7XCIsXCLwnZSTXCI6XCImUGZyO1wiLFwizqZcIjpcIiZQaGk7XCIsXCLOoFwiOlwiJlBpO1wiLFwiwrFcIjpcIiZwbTtcIixcIuKEmVwiOlwiJnByaW1lcztcIixcIuKqu1wiOlwiJlByO1wiLFwi4om6XCI6XCImcHJlYztcIixcIuKqr1wiOlwiJnByZWNlcTtcIixcIuKJvFwiOlwiJnByZWNjdXJseWVxO1wiLFwi4om+XCI6XCImcHJzaW07XCIsXCLigLNcIjpcIiZQcmltZTtcIixcIuKIj1wiOlwiJnByb2Q7XCIsXCLiiJ1cIjpcIiZ2cHJvcDtcIixcIvCdkqtcIjpcIiZQc2NyO1wiLFwizqhcIjpcIiZQc2k7XCIsJ1wiJzpcIiZxdW90O1wiLFwi8J2UlFwiOlwiJlFmcjtcIixcIuKEmlwiOlwiJnJhdGlvbmFscztcIixcIvCdkqxcIjpcIiZRc2NyO1wiLFwi4qSQXCI6XCImZHJia2Fyb3c7XCIsXCLCrlwiOlwiJnJlZztcIixcIsWUXCI6XCImUmFjdXRlO1wiLFwi4p+rXCI6XCImUmFuZztcIixcIuKGoFwiOlwiJnR3b2hlYWRyaWdodGFycm93O1wiLFwi4qSWXCI6XCImUmFycnRsO1wiLFwixZhcIjpcIiZSY2Fyb247XCIsXCLFllwiOlwiJlJjZWRpbDtcIixcItCgXCI6XCImUmN5O1wiLFwi4oScXCI6XCImcmVhbHBhcnQ7XCIsXCLiiItcIjpcIiZuaXY7XCIsXCLih4tcIjpcIiZscmhhcjtcIixcIuKlr1wiOlwiJmR1aGFyO1wiLFwizqFcIjpcIiZSaG87XCIsXCLin6lcIjpcIiZyYW5nbGU7XCIsXCLihpJcIjpcIiZzcmFycjtcIixcIuKHpVwiOlwiJnJhcnJiO1wiLFwi4oeEXCI6XCImcmxhcnI7XCIsXCLijIlcIjpcIiZyY2VpbDtcIixcIuKfp1wiOlwiJnJvYnJrO1wiLFwi4qWdXCI6XCImUmlnaHREb3duVGVlVmVjdG9yO1wiLFwi4oeCXCI6XCImZG93bmhhcnBvb25yaWdodDtcIixcIuKllVwiOlwiJlJpZ2h0RG93blZlY3RvckJhcjtcIixcIuKMi1wiOlwiJnJmbG9vcjtcIixcIuKKolwiOlwiJnZkYXNoO1wiLFwi4oamXCI6XCImbWFwc3RvO1wiLFwi4qWbXCI6XCImUmlnaHRUZWVWZWN0b3I7XCIsXCLiirNcIjpcIiZ2cnRyaTtcIixcIuKnkFwiOlwiJlJpZ2h0VHJpYW5nbGVCYXI7XCIsXCLiirVcIjpcIiZ0cmlhbmdsZXJpZ2h0ZXE7XCIsXCLipY9cIjpcIiZSaWdodFVwRG93blZlY3RvcjtcIixcIuKlnFwiOlwiJlJpZ2h0VXBUZWVWZWN0b3I7XCIsXCLihr5cIjpcIiZ1cGhhcnBvb25yaWdodDtcIixcIuKllFwiOlwiJlJpZ2h0VXBWZWN0b3JCYXI7XCIsXCLih4BcIjpcIiZyaWdodGhhcnBvb251cDtcIixcIuKlk1wiOlwiJlJpZ2h0VmVjdG9yQmFyO1wiLFwi4oSdXCI6XCImcmVhbHM7XCIsXCLipbBcIjpcIiZSb3VuZEltcGxpZXM7XCIsXCLih5tcIjpcIiZyQWFycjtcIixcIuKEm1wiOlwiJnJlYWxpbmU7XCIsXCLihrFcIjpcIiZyc2g7XCIsXCLip7RcIjpcIiZSdWxlRGVsYXllZDtcIixcItCpXCI6XCImU0hDSGN5O1wiLFwi0KhcIjpcIiZTSGN5O1wiLFwi0KxcIjpcIiZTT0ZUY3k7XCIsXCLFmlwiOlwiJlNhY3V0ZTtcIixcIuKqvFwiOlwiJlNjO1wiLFwixaBcIjpcIiZTY2Fyb247XCIsXCLFnlwiOlwiJlNjZWRpbDtcIixcIsWcXCI6XCImU2NpcmM7XCIsXCLQoVwiOlwiJlNjeTtcIixcIvCdlJZcIjpcIiZTZnI7XCIsXCLihpFcIjpcIiZ1cGFycm93O1wiLFwizqNcIjpcIiZTaWdtYTtcIixcIuKImFwiOlwiJmNvbXBmbjtcIixcIvCdlYpcIjpcIiZTb3BmO1wiLFwi4oiaXCI6XCImcmFkaWM7XCIsXCLilqFcIjpcIiZzcXVhcmU7XCIsXCLiipNcIjpcIiZzcWNhcDtcIixcIuKKj1wiOlwiJnNxc3Vic2V0O1wiLFwi4oqRXCI6XCImc3FzdWJzZXRlcTtcIixcIuKKkFwiOlwiJnNxc3Vwc2V0O1wiLFwi4oqSXCI6XCImc3FzdXBzZXRlcTtcIixcIuKKlFwiOlwiJnNxY3VwO1wiLFwi8J2SrlwiOlwiJlNzY3I7XCIsXCLii4ZcIjpcIiZzc3RhcmY7XCIsXCLii5BcIjpcIiZTdWJzZXQ7XCIsXCLiioZcIjpcIiZzdWJzZXRlcTtcIixcIuKJu1wiOlwiJnN1Y2M7XCIsXCLiqrBcIjpcIiZzdWNjZXE7XCIsXCLiib1cIjpcIiZzdWNjY3VybHllcTtcIixcIuKJv1wiOlwiJnN1Y2NzaW07XCIsXCLiiJFcIjpcIiZzdW07XCIsXCLii5FcIjpcIiZTdXBzZXQ7XCIsXCLiioNcIjpcIiZzdXBzZXQ7XCIsXCLiiodcIjpcIiZzdXBzZXRlcTtcIixcIsOeXCI6XCImVEhPUk47XCIsXCLihKJcIjpcIiZ0cmFkZTtcIixcItCLXCI6XCImVFNIY3k7XCIsXCLQplwiOlwiJlRTY3k7XCIsXCJcXHRcIjpcIiZUYWI7XCIsXCLOpFwiOlwiJlRhdTtcIixcIsWkXCI6XCImVGNhcm9uO1wiLFwixaJcIjpcIiZUY2VkaWw7XCIsXCLQolwiOlwiJlRjeTtcIixcIvCdlJdcIjpcIiZUZnI7XCIsXCLiiLRcIjpcIiZ0aGVyZWZvcmU7XCIsXCLOmFwiOlwiJlRoZXRhO1wiLFwi4oGf4oCKXCI6XCImVGhpY2tTcGFjZTtcIixcIuKAiVwiOlwiJnRoaW5zcDtcIixcIuKIvFwiOlwiJnRoa3NpbTtcIixcIuKJg1wiOlwiJnNpbWVxO1wiLFwi4omFXCI6XCImY29uZztcIixcIuKJiFwiOlwiJnRoa2FwO1wiLFwi8J2Vi1wiOlwiJlRvcGY7XCIsXCLig5tcIjpcIiZ0ZG90O1wiLFwi8J2Sr1wiOlwiJlRzY3I7XCIsXCLFplwiOlwiJlRzdHJvaztcIixcIsOaXCI6XCImVWFjdXRlO1wiLFwi4oafXCI6XCImVWFycjtcIixcIuKliVwiOlwiJlVhcnJvY2lyO1wiLFwi0I5cIjpcIiZVYnJjeTtcIixcIsWsXCI6XCImVWJyZXZlO1wiLFwiw5tcIjpcIiZVY2lyYztcIixcItCjXCI6XCImVWN5O1wiLFwixbBcIjpcIiZVZGJsYWM7XCIsXCLwnZSYXCI6XCImVWZyO1wiLFwiw5lcIjpcIiZVZ3JhdmU7XCIsXCLFqlwiOlwiJlVtYWNyO1wiLF86XCImbG93YmFyO1wiLFwi4o+fXCI6XCImVW5kZXJCcmFjZTtcIixcIuKOtVwiOlwiJmJicms7XCIsXCLij51cIjpcIiZVbmRlclBhcmVudGhlc2lzO1wiLFwi4ouDXCI6XCImeGN1cDtcIixcIuKKjlwiOlwiJnVwbHVzO1wiLFwixbJcIjpcIiZVb2dvbjtcIixcIvCdlYxcIjpcIiZVb3BmO1wiLFwi4qSSXCI6XCImVXBBcnJvd0JhcjtcIixcIuKHhVwiOlwiJnVkYXJyO1wiLFwi4oaVXCI6XCImdmFycjtcIixcIuKlrlwiOlwiJnVkaGFyO1wiLFwi4oqlXCI6XCImcGVycDtcIixcIuKGpVwiOlwiJm1hcHN0b3VwO1wiLFwi4oaWXCI6XCImbndhcnJvdztcIixcIuKGl1wiOlwiJm5lYXJyb3c7XCIsXCLPklwiOlwiJnVwc2loO1wiLFwizqVcIjpcIiZVcHNpbG9uO1wiLFwixa5cIjpcIiZVcmluZztcIixcIvCdkrBcIjpcIiZVc2NyO1wiLFwixahcIjpcIiZVdGlsZGU7XCIsXCLDnFwiOlwiJlV1bWw7XCIsXCLiiqtcIjpcIiZWRGFzaDtcIixcIuKrq1wiOlwiJlZiYXI7XCIsXCLQklwiOlwiJlZjeTtcIixcIuKKqVwiOlwiJlZkYXNoO1wiLFwi4qumXCI6XCImVmRhc2hsO1wiLFwi4ouBXCI6XCImeHZlZTtcIixcIuKAllwiOlwiJlZlcnQ7XCIsXCLiiKNcIjpcIiZzbWlkO1wiLFwifFwiOlwiJnZlcnQ7XCIsXCLinZhcIjpcIiZWZXJ0aWNhbFNlcGFyYXRvcjtcIixcIuKJgFwiOlwiJndyZWF0aDtcIixcIuKAilwiOlwiJmhhaXJzcDtcIixcIvCdlJlcIjpcIiZWZnI7XCIsXCLwnZWNXCI6XCImVm9wZjtcIixcIvCdkrFcIjpcIiZWc2NyO1wiLFwi4oqqXCI6XCImVnZkYXNoO1wiLFwixbRcIjpcIiZXY2lyYztcIixcIuKLgFwiOlwiJnh3ZWRnZTtcIixcIvCdlJpcIjpcIiZXZnI7XCIsXCLwnZWOXCI6XCImV29wZjtcIixcIvCdkrJcIjpcIiZXc2NyO1wiLFwi8J2Um1wiOlwiJlhmcjtcIixcIs6eXCI6XCImWGk7XCIsXCLwnZWPXCI6XCImWG9wZjtcIixcIvCdkrNcIjpcIiZYc2NyO1wiLFwi0K9cIjpcIiZZQWN5O1wiLFwi0IdcIjpcIiZZSWN5O1wiLFwi0K5cIjpcIiZZVWN5O1wiLFwiw51cIjpcIiZZYWN1dGU7XCIsXCLFtlwiOlwiJlljaXJjO1wiLFwi0KtcIjpcIiZZY3k7XCIsXCLwnZScXCI6XCImWWZyO1wiLFwi8J2VkFwiOlwiJllvcGY7XCIsXCLwnZK0XCI6XCImWXNjcjtcIixcIsW4XCI6XCImWXVtbDtcIixcItCWXCI6XCImWkhjeTtcIixcIsW5XCI6XCImWmFjdXRlO1wiLFwixb1cIjpcIiZaY2Fyb247XCIsXCLQl1wiOlwiJlpjeTtcIixcIsW7XCI6XCImWmRvdDtcIixcIs6WXCI6XCImWmV0YTtcIixcIuKEqFwiOlwiJnplZXRyZjtcIixcIuKEpFwiOlwiJmludGVnZXJzO1wiLFwi8J2StVwiOlwiJlpzY3I7XCIsXCLDoVwiOlwiJmFhY3V0ZTtcIixcIsSDXCI6XCImYWJyZXZlO1wiLFwi4oi+XCI6XCImbXN0cG9zO1wiLFwi4oi+zLNcIjpcIiZhY0U7XCIsXCLiiL9cIjpcIiZhY2Q7XCIsXCLDolwiOlwiJmFjaXJjO1wiLFwi0LBcIjpcIiZhY3k7XCIsXCLDplwiOlwiJmFlbGlnO1wiLFwi8J2UnlwiOlwiJmFmcjtcIixcIsOgXCI6XCImYWdyYXZlO1wiLFwi4oS1XCI6XCImYWxlcGg7XCIsXCLOsVwiOlwiJmFscGhhO1wiLFwixIFcIjpcIiZhbWFjcjtcIixcIuKov1wiOlwiJmFtYWxnO1wiLFwi4oinXCI6XCImd2VkZ2U7XCIsXCLiqZVcIjpcIiZhbmRhbmQ7XCIsXCLiqZxcIjpcIiZhbmRkO1wiLFwi4qmYXCI6XCImYW5kc2xvcGU7XCIsXCLiqZpcIjpcIiZhbmR2O1wiLFwi4oigXCI6XCImYW5nbGU7XCIsXCLipqRcIjpcIiZhbmdlO1wiLFwi4oihXCI6XCImbWVhc3VyZWRhbmdsZTtcIixcIuKmqFwiOlwiJmFuZ21zZGFhO1wiLFwi4qapXCI6XCImYW5nbXNkYWI7XCIsXCLipqpcIjpcIiZhbmdtc2RhYztcIixcIuKmq1wiOlwiJmFuZ21zZGFkO1wiLFwi4qasXCI6XCImYW5nbXNkYWU7XCIsXCLipq1cIjpcIiZhbmdtc2RhZjtcIixcIuKmrlwiOlwiJmFuZ21zZGFnO1wiLFwi4qavXCI6XCImYW5nbXNkYWg7XCIsXCLiiJ9cIjpcIiZhbmdydDtcIixcIuKKvlwiOlwiJmFuZ3J0dmI7XCIsXCLipp1cIjpcIiZhbmdydHZiZDtcIixcIuKIolwiOlwiJmFuZ3NwaDtcIixcIuKNvFwiOlwiJmFuZ3phcnI7XCIsXCLEhVwiOlwiJmFvZ29uO1wiLFwi8J2VklwiOlwiJmFvcGY7XCIsXCLiqbBcIjpcIiZhcEU7XCIsXCLiqa9cIjpcIiZhcGFjaXI7XCIsXCLiiYpcIjpcIiZhcHByb3hlcTtcIixcIuKJi1wiOlwiJmFwaWQ7XCIsXCInXCI6XCImYXBvcztcIixcIsOlXCI6XCImYXJpbmc7XCIsXCLwnZK2XCI6XCImYXNjcjtcIixcIipcIjpcIiZtaWRhc3Q7XCIsXCLDo1wiOlwiJmF0aWxkZTtcIixcIsOkXCI6XCImYXVtbDtcIixcIuKokVwiOlwiJmF3aW50O1wiLFwi4qutXCI6XCImYk5vdDtcIixcIuKJjFwiOlwiJmJjb25nO1wiLFwiz7ZcIjpcIiZiZXBzaTtcIixcIuKAtVwiOlwiJmJwcmltZTtcIixcIuKIvVwiOlwiJmJzaW07XCIsXCLii41cIjpcIiZic2ltZTtcIixcIuKKvVwiOlwiJmJhcnZlZTtcIixcIuKMhVwiOlwiJmJhcndlZGdlO1wiLFwi4o62XCI6XCImYmJya3Ricms7XCIsXCLQsVwiOlwiJmJjeTtcIixcIuKAnlwiOlwiJmxkcXVvcjtcIixcIuKmsFwiOlwiJmJlbXB0eXY7XCIsXCLOslwiOlwiJmJldGE7XCIsXCLihLZcIjpcIiZiZXRoO1wiLFwi4omsXCI6XCImdHdpeHQ7XCIsXCLwnZSfXCI6XCImYmZyO1wiLFwi4pevXCI6XCImeGNpcmM7XCIsXCLiqIBcIjpcIiZ4b2RvdDtcIixcIuKogVwiOlwiJnhvcGx1cztcIixcIuKoglwiOlwiJnhvdGltZTtcIixcIuKohlwiOlwiJnhzcWN1cDtcIixcIuKYhVwiOlwiJnN0YXJmO1wiLFwi4pa9XCI6XCImeGR0cmk7XCIsXCLilrNcIjpcIiZ4dXRyaTtcIixcIuKohFwiOlwiJnh1cGx1cztcIixcIuKkjVwiOlwiJnJiYXJyO1wiLFwi4qerXCI6XCImbG96ZjtcIixcIuKWtFwiOlwiJnV0cmlmO1wiLFwi4pa+XCI6XCImZHRyaWY7XCIsXCLil4JcIjpcIiZsdHJpZjtcIixcIuKWuFwiOlwiJnJ0cmlmO1wiLFwi4pCjXCI6XCImYmxhbms7XCIsXCLilpJcIjpcIiZibGsxMjtcIixcIuKWkVwiOlwiJmJsazE0O1wiLFwi4paTXCI6XCImYmxrMzQ7XCIsXCLilohcIjpcIiZibG9jaztcIixcIj3ig6VcIjpcIiZibmU7XCIsXCLiiaHig6VcIjpcIiZibmVxdWl2O1wiLFwi4oyQXCI6XCImYm5vdDtcIixcIvCdlZNcIjpcIiZib3BmO1wiLFwi4ouIXCI6XCImYm93dGllO1wiLFwi4pWXXCI6XCImYm94REw7XCIsXCLilZRcIjpcIiZib3hEUjtcIixcIuKVllwiOlwiJmJveERsO1wiLFwi4pWTXCI6XCImYm94RHI7XCIsXCLilZBcIjpcIiZib3hIO1wiLFwi4pWmXCI6XCImYm94SEQ7XCIsXCLilalcIjpcIiZib3hIVTtcIixcIuKVpFwiOlwiJmJveEhkO1wiLFwi4pWnXCI6XCImYm94SHU7XCIsXCLilZ1cIjpcIiZib3hVTDtcIixcIuKVmlwiOlwiJmJveFVSO1wiLFwi4pWcXCI6XCImYm94VWw7XCIsXCLilZlcIjpcIiZib3hVcjtcIixcIuKVkVwiOlwiJmJveFY7XCIsXCLilaxcIjpcIiZib3hWSDtcIixcIuKVo1wiOlwiJmJveFZMO1wiLFwi4pWgXCI6XCImYm94VlI7XCIsXCLilatcIjpcIiZib3hWaDtcIixcIuKVolwiOlwiJmJveFZsO1wiLFwi4pWfXCI6XCImYm94VnI7XCIsXCLip4lcIjpcIiZib3hib3g7XCIsXCLilZVcIjpcIiZib3hkTDtcIixcIuKVklwiOlwiJmJveGRSO1wiLFwi4pSQXCI6XCImYm94ZGw7XCIsXCLilIxcIjpcIiZib3hkcjtcIixcIuKVpVwiOlwiJmJveGhEO1wiLFwi4pWoXCI6XCImYm94aFU7XCIsXCLilKxcIjpcIiZib3hoZDtcIixcIuKUtFwiOlwiJmJveGh1O1wiLFwi4oqfXCI6XCImbWludXNiO1wiLFwi4oqeXCI6XCImcGx1c2I7XCIsXCLiiqBcIjpcIiZ0aW1lc2I7XCIsXCLilZtcIjpcIiZib3h1TDtcIixcIuKVmFwiOlwiJmJveHVSO1wiLFwi4pSYXCI6XCImYm94dWw7XCIsXCLilJRcIjpcIiZib3h1cjtcIixcIuKUglwiOlwiJmJveHY7XCIsXCLilapcIjpcIiZib3h2SDtcIixcIuKVoVwiOlwiJmJveHZMO1wiLFwi4pWeXCI6XCImYm94dlI7XCIsXCLilLxcIjpcIiZib3h2aDtcIixcIuKUpFwiOlwiJmJveHZsO1wiLFwi4pScXCI6XCImYm94dnI7XCIsXCLCplwiOlwiJmJydmJhcjtcIixcIvCdkrdcIjpcIiZic2NyO1wiLFwi4oGPXCI6XCImYnNlbWk7XCIsXCJcXFxcXCI6XCImYnNvbDtcIixcIuKnhVwiOlwiJmJzb2xiO1wiLFwi4p+IXCI6XCImYnNvbGhzdWI7XCIsXCLigKJcIjpcIiZidWxsZXQ7XCIsXCLiqq5cIjpcIiZidW1wRTtcIixcIsSHXCI6XCImY2FjdXRlO1wiLFwi4oipXCI6XCImY2FwO1wiLFwi4qmEXCI6XCImY2FwYW5kO1wiLFwi4qmJXCI6XCImY2FwYnJjdXA7XCIsXCLiqYtcIjpcIiZjYXBjYXA7XCIsXCLiqYdcIjpcIiZjYXBjdXA7XCIsXCLiqYBcIjpcIiZjYXBkb3Q7XCIsXCLiiKnvuIBcIjpcIiZjYXBzO1wiLFwi4oGBXCI6XCImY2FyZXQ7XCIsXCLiqY1cIjpcIiZjY2FwcztcIixcIsSNXCI6XCImY2Nhcm9uO1wiLFwiw6dcIjpcIiZjY2VkaWw7XCIsXCLEiVwiOlwiJmNjaXJjO1wiLFwi4qmMXCI6XCImY2N1cHM7XCIsXCLiqZBcIjpcIiZjY3Vwc3NtO1wiLFwixItcIjpcIiZjZG90O1wiLFwi4qayXCI6XCImY2VtcHR5djtcIixcIsKiXCI6XCImY2VudDtcIixcIvCdlKBcIjpcIiZjZnI7XCIsXCLRh1wiOlwiJmNoY3k7XCIsXCLinJNcIjpcIiZjaGVja21hcms7XCIsXCLPh1wiOlwiJmNoaTtcIixcIuKXi1wiOlwiJmNpcjtcIixcIuKng1wiOlwiJmNpckU7XCIsXCLLhlwiOlwiJmNpcmM7XCIsXCLiiZdcIjpcIiZjaXJlO1wiLFwi4oa6XCI6XCImb2xhcnI7XCIsXCLihrtcIjpcIiZvcmFycjtcIixcIuKTiFwiOlwiJm9TO1wiLFwi4oqbXCI6XCImb2FzdDtcIixcIuKKmlwiOlwiJm9jaXI7XCIsXCLiip1cIjpcIiZvZGFzaDtcIixcIuKokFwiOlwiJmNpcmZuaW50O1wiLFwi4quvXCI6XCImY2lybWlkO1wiLFwi4qeCXCI6XCImY2lyc2NpcjtcIixcIuKZo1wiOlwiJmNsdWJzdWl0O1wiLFwiOlwiOlwiJmNvbG9uO1wiLFwiLFwiOlwiJmNvbW1hO1wiLFwiQFwiOlwiJmNvbW1hdDtcIixcIuKIgVwiOlwiJmNvbXBsZW1lbnQ7XCIsXCLiqa1cIjpcIiZjb25nZG90O1wiLFwi8J2VlFwiOlwiJmNvcGY7XCIsXCLihJdcIjpcIiZjb3B5c3I7XCIsXCLihrVcIjpcIiZjcmFycjtcIixcIuKcl1wiOlwiJmNyb3NzO1wiLFwi8J2SuFwiOlwiJmNzY3I7XCIsXCLiq49cIjpcIiZjc3ViO1wiLFwi4quRXCI6XCImY3N1YmU7XCIsXCLiq5BcIjpcIiZjc3VwO1wiLFwi4quSXCI6XCImY3N1cGU7XCIsXCLii69cIjpcIiZjdGRvdDtcIixcIuKkuFwiOlwiJmN1ZGFycmw7XCIsXCLipLVcIjpcIiZjdWRhcnJyO1wiLFwi4oueXCI6XCImY3VybHllcXByZWM7XCIsXCLii59cIjpcIiZjdXJseWVxc3VjYztcIixcIuKGtlwiOlwiJmN1cnZlYXJyb3dsZWZ0O1wiLFwi4qS9XCI6XCImY3VsYXJycDtcIixcIuKIqlwiOlwiJmN1cDtcIixcIuKpiFwiOlwiJmN1cGJyY2FwO1wiLFwi4qmGXCI6XCImY3VwY2FwO1wiLFwi4qmKXCI6XCImY3VwY3VwO1wiLFwi4oqNXCI6XCImY3VwZG90O1wiLFwi4qmFXCI6XCImY3Vwb3I7XCIsXCLiiKrvuIBcIjpcIiZjdXBzO1wiLFwi4oa3XCI6XCImY3VydmVhcnJvd3JpZ2h0O1wiLFwi4qS8XCI6XCImY3VyYXJybTtcIixcIuKLjlwiOlwiJmN1dmVlO1wiLFwi4ouPXCI6XCImY3V3ZWQ7XCIsXCLCpFwiOlwiJmN1cnJlbjtcIixcIuKIsVwiOlwiJmN3aW50O1wiLFwi4oytXCI6XCImY3lsY3R5O1wiLFwi4qWlXCI6XCImZEhhcjtcIixcIuKAoFwiOlwiJmRhZ2dlcjtcIixcIuKEuFwiOlwiJmRhbGV0aDtcIixcIuKAkFwiOlwiJmh5cGhlbjtcIixcIuKkj1wiOlwiJnJCYXJyO1wiLFwixI9cIjpcIiZkY2Fyb247XCIsXCLQtFwiOlwiJmRjeTtcIixcIuKHilwiOlwiJmRvd25kb3duYXJyb3dzO1wiLFwi4qm3XCI6XCImZUREb3Q7XCIsXCLCsFwiOlwiJmRlZztcIixcIs60XCI6XCImZGVsdGE7XCIsXCLiprFcIjpcIiZkZW1wdHl2O1wiLFwi4qW/XCI6XCImZGZpc2h0O1wiLFwi8J2UoVwiOlwiJmRmcjtcIixcIuKZplwiOlwiJmRpYW1zO1wiLFwiz51cIjpcIiZnYW1tYWQ7XCIsXCLii7JcIjpcIiZkaXNpbjtcIixcIsO3XCI6XCImZGl2aWRlO1wiLFwi4ouHXCI6XCImZGl2b254O1wiLFwi0ZJcIjpcIiZkamN5O1wiLFwi4oyeXCI6XCImbGxjb3JuZXI7XCIsXCLijI1cIjpcIiZkbGNyb3A7XCIsJDpcIiZkb2xsYXI7XCIsXCLwnZWVXCI6XCImZG9wZjtcIixcIuKJkVwiOlwiJmVEb3Q7XCIsXCLiiLhcIjpcIiZtaW51c2Q7XCIsXCLiiJRcIjpcIiZwbHVzZG87XCIsXCLiiqFcIjpcIiZzZG90YjtcIixcIuKMn1wiOlwiJmxyY29ybmVyO1wiLFwi4oyMXCI6XCImZHJjcm9wO1wiLFwi8J2SuVwiOlwiJmRzY3I7XCIsXCLRlVwiOlwiJmRzY3k7XCIsXCLip7ZcIjpcIiZkc29sO1wiLFwixJFcIjpcIiZkc3Ryb2s7XCIsXCLii7FcIjpcIiZkdGRvdDtcIixcIuKWv1wiOlwiJnRyaWFuZ2xlZG93bjtcIixcIuKmplwiOlwiJmR3YW5nbGU7XCIsXCLRn1wiOlwiJmR6Y3k7XCIsXCLin79cIjpcIiZkemlncmFycjtcIixcIsOpXCI6XCImZWFjdXRlO1wiLFwi4qmuXCI6XCImZWFzdGVyO1wiLFwixJtcIjpcIiZlY2Fyb247XCIsXCLiiZZcIjpcIiZlcWNpcmM7XCIsXCLDqlwiOlwiJmVjaXJjO1wiLFwi4omVXCI6XCImZXFjb2xvbjtcIixcItGNXCI6XCImZWN5O1wiLFwixJdcIjpcIiZlZG90O1wiLFwi4omSXCI6XCImZmFsbGluZ2RvdHNlcTtcIixcIvCdlKJcIjpcIiZlZnI7XCIsXCLiqppcIjpcIiZlZztcIixcIsOoXCI6XCImZWdyYXZlO1wiLFwi4qqWXCI6XCImZXFzbGFudGd0cjtcIixcIuKqmFwiOlwiJmVnc2RvdDtcIixcIuKqmVwiOlwiJmVsO1wiLFwi4o+nXCI6XCImZWxpbnRlcnM7XCIsXCLihJNcIjpcIiZlbGw7XCIsXCLiqpVcIjpcIiZlcXNsYW50bGVzcztcIixcIuKql1wiOlwiJmVsc2RvdDtcIixcIsSTXCI6XCImZW1hY3I7XCIsXCLiiIVcIjpcIiZ2YXJub3RoaW5nO1wiLFwi4oCEXCI6XCImZW1zcDEzO1wiLFwi4oCFXCI6XCImZW1zcDE0O1wiLFwi4oCDXCI6XCImZW1zcDtcIixcIsWLXCI6XCImZW5nO1wiLFwi4oCCXCI6XCImZW5zcDtcIixcIsSZXCI6XCImZW9nb247XCIsXCLwnZWWXCI6XCImZW9wZjtcIixcIuKLlVwiOlwiJmVwYXI7XCIsXCLip6NcIjpcIiZlcGFyc2w7XCIsXCLiqbFcIjpcIiZlcGx1cztcIixcIs61XCI6XCImZXBzaWxvbjtcIixcIs+1XCI6XCImdmFyZXBzaWxvbjtcIixcIj1cIjpcIiZlcXVhbHM7XCIsXCLiiZ9cIjpcIiZxdWVzdGVxO1wiLFwi4qm4XCI6XCImZXF1aXZERDtcIixcIuKnpVwiOlwiJmVxdnBhcnNsO1wiLFwi4omTXCI6XCImcmlzaW5nZG90c2VxO1wiLFwi4qWxXCI6XCImZXJhcnI7XCIsXCLihK9cIjpcIiZlc2NyO1wiLFwizrdcIjpcIiZldGE7XCIsXCLDsFwiOlwiJmV0aDtcIixcIsOrXCI6XCImZXVtbDtcIixcIuKCrFwiOlwiJmV1cm87XCIsXCIhXCI6XCImZXhjbDtcIixcItGEXCI6XCImZmN5O1wiLFwi4pmAXCI6XCImZmVtYWxlO1wiLFwi76yDXCI6XCImZmZpbGlnO1wiLFwi76yAXCI6XCImZmZsaWc7XCIsXCLvrIRcIjpcIiZmZmxsaWc7XCIsXCLwnZSjXCI6XCImZmZyO1wiLFwi76yBXCI6XCImZmlsaWc7XCIsZmo6XCImZmpsaWc7XCIsXCLima1cIjpcIiZmbGF0O1wiLFwi76yCXCI6XCImZmxsaWc7XCIsXCLilrFcIjpcIiZmbHRucztcIixcIsaSXCI6XCImZm5vZjtcIixcIvCdlZdcIjpcIiZmb3BmO1wiLFwi4ouUXCI6XCImcGl0Y2hmb3JrO1wiLFwi4quZXCI6XCImZm9ya3Y7XCIsXCLiqI1cIjpcIiZmcGFydGludDtcIixcIsK9XCI6XCImaGFsZjtcIixcIuKFk1wiOlwiJmZyYWMxMztcIixcIsK8XCI6XCImZnJhYzE0O1wiLFwi4oWVXCI6XCImZnJhYzE1O1wiLFwi4oWZXCI6XCImZnJhYzE2O1wiLFwi4oWbXCI6XCImZnJhYzE4O1wiLFwi4oWUXCI6XCImZnJhYzIzO1wiLFwi4oWWXCI6XCImZnJhYzI1O1wiLFwiwr5cIjpcIiZmcmFjMzQ7XCIsXCLihZdcIjpcIiZmcmFjMzU7XCIsXCLihZxcIjpcIiZmcmFjMzg7XCIsXCLihZhcIjpcIiZmcmFjNDU7XCIsXCLihZpcIjpcIiZmcmFjNTY7XCIsXCLihZ1cIjpcIiZmcmFjNTg7XCIsXCLihZ5cIjpcIiZmcmFjNzg7XCIsXCLigYRcIjpcIiZmcmFzbDtcIixcIuKMolwiOlwiJnNmcm93bjtcIixcIvCdkrtcIjpcIiZmc2NyO1wiLFwi4qqMXCI6XCImZ3RyZXFxbGVzcztcIixcIse1XCI6XCImZ2FjdXRlO1wiLFwizrNcIjpcIiZnYW1tYTtcIixcIuKqhlwiOlwiJmd0cmFwcHJveDtcIixcIsSfXCI6XCImZ2JyZXZlO1wiLFwixJ1cIjpcIiZnY2lyYztcIixcItCzXCI6XCImZ2N5O1wiLFwixKFcIjpcIiZnZG90O1wiLFwi4qqpXCI6XCImZ2VzY2M7XCIsXCLiqoBcIjpcIiZnZXNkb3Q7XCIsXCLiqoJcIjpcIiZnZXNkb3RvO1wiLFwi4qqEXCI6XCImZ2VzZG90b2w7XCIsXCLii5vvuIBcIjpcIiZnZXNsO1wiLFwi4qqUXCI6XCImZ2VzbGVzO1wiLFwi8J2UpFwiOlwiJmdmcjtcIixcIuKEt1wiOlwiJmdpbWVsO1wiLFwi0ZNcIjpcIiZnamN5O1wiLFwi4qqSXCI6XCImZ2xFO1wiLFwi4qqlXCI6XCImZ2xhO1wiLFwi4qqkXCI6XCImZ2xqO1wiLFwi4ompXCI6XCImZ25lcXE7XCIsXCLiqopcIjpcIiZnbmFwcHJveDtcIixcIuKqiFwiOlwiJmduZXE7XCIsXCLii6dcIjpcIiZnbnNpbTtcIixcIvCdlZhcIjpcIiZnb3BmO1wiLFwi4oSKXCI6XCImZ3NjcjtcIixcIuKqjlwiOlwiJmdzaW1lO1wiLFwi4qqQXCI6XCImZ3NpbWw7XCIsXCLiqqdcIjpcIiZndGNjO1wiLFwi4qm6XCI6XCImZ3RjaXI7XCIsXCLii5dcIjpcIiZndHJkb3Q7XCIsXCLippVcIjpcIiZndGxQYXI7XCIsXCLiqbxcIjpcIiZndHF1ZXN0O1wiLFwi4qW4XCI6XCImZ3RyYXJyO1wiLFwi4omp77iAXCI6XCImZ3ZuRTtcIixcItGKXCI6XCImaGFyZGN5O1wiLFwi4qWIXCI6XCImaGFycmNpcjtcIixcIuKGrVwiOlwiJmxlZnRyaWdodHNxdWlnYXJyb3c7XCIsXCLihI9cIjpcIiZwbGFua3Y7XCIsXCLEpVwiOlwiJmhjaXJjO1wiLFwi4pmlXCI6XCImaGVhcnRzdWl0O1wiLFwi4oCmXCI6XCImbWxkcjtcIixcIuKKuVwiOlwiJmhlcmNvbjtcIixcIvCdlKVcIjpcIiZoZnI7XCIsXCLipKVcIjpcIiZzZWFyaGs7XCIsXCLipKZcIjpcIiZzd2FyaGs7XCIsXCLih79cIjpcIiZob2FycjtcIixcIuKIu1wiOlwiJmhvbXRodDtcIixcIuKGqVwiOlwiJmxhcnJoaztcIixcIuKGqlwiOlwiJnJhcnJoaztcIixcIvCdlZlcIjpcIiZob3BmO1wiLFwi4oCVXCI6XCImaG9yYmFyO1wiLFwi8J2SvVwiOlwiJmhzY3I7XCIsXCLEp1wiOlwiJmhzdHJvaztcIixcIuKBg1wiOlwiJmh5YnVsbDtcIixcIsOtXCI6XCImaWFjdXRlO1wiLFwiw65cIjpcIiZpY2lyYztcIixcItC4XCI6XCImaWN5O1wiLFwi0LVcIjpcIiZpZWN5O1wiLFwiwqFcIjpcIiZpZXhjbDtcIixcIvCdlKZcIjpcIiZpZnI7XCIsXCLDrFwiOlwiJmlncmF2ZTtcIixcIuKojFwiOlwiJnFpbnQ7XCIsXCLiiK1cIjpcIiZ0aW50O1wiLFwi4qecXCI6XCImaWluZmluO1wiLFwi4oSpXCI6XCImaWlvdGE7XCIsXCLEs1wiOlwiJmlqbGlnO1wiLFwixKtcIjpcIiZpbWFjcjtcIixcIsSxXCI6XCImaW5vZG90O1wiLFwi4oq3XCI6XCImaW1vZjtcIixcIsa1XCI6XCImaW1wZWQ7XCIsXCLihIVcIjpcIiZpbmNhcmU7XCIsXCLiiJ5cIjpcIiZpbmZpbjtcIixcIuKnnVwiOlwiJmluZmludGllO1wiLFwi4oq6XCI6XCImaW50ZXJjYWw7XCIsXCLiqJdcIjpcIiZpbnRsYXJoaztcIixcIuKovFwiOlwiJmlwcm9kO1wiLFwi0ZFcIjpcIiZpb2N5O1wiLFwixK9cIjpcIiZpb2dvbjtcIixcIvCdlZpcIjpcIiZpb3BmO1wiLFwizrlcIjpcIiZpb3RhO1wiLFwiwr9cIjpcIiZpcXVlc3Q7XCIsXCLwnZK+XCI6XCImaXNjcjtcIixcIuKLuVwiOlwiJmlzaW5FO1wiLFwi4ou1XCI6XCImaXNpbmRvdDtcIixcIuKLtFwiOlwiJmlzaW5zO1wiLFwi4ouzXCI6XCImaXNpbnN2O1wiLFwixKlcIjpcIiZpdGlsZGU7XCIsXCLRllwiOlwiJml1a2N5O1wiLFwiw69cIjpcIiZpdW1sO1wiLFwixLVcIjpcIiZqY2lyYztcIixcItC5XCI6XCImamN5O1wiLFwi8J2Up1wiOlwiJmpmcjtcIixcIsi3XCI6XCImam1hdGg7XCIsXCLwnZWbXCI6XCImam9wZjtcIixcIvCdkr9cIjpcIiZqc2NyO1wiLFwi0ZhcIjpcIiZqc2VyY3k7XCIsXCLRlFwiOlwiJmp1a2N5O1wiLFwizrpcIjpcIiZrYXBwYTtcIixcIs+wXCI6XCImdmFya2FwcGE7XCIsXCLEt1wiOlwiJmtjZWRpbDtcIixcItC6XCI6XCIma2N5O1wiLFwi8J2UqFwiOlwiJmtmcjtcIixcIsS4XCI6XCIma2dyZWVuO1wiLFwi0YVcIjpcIiZraGN5O1wiLFwi0ZxcIjpcIiZramN5O1wiLFwi8J2VnFwiOlwiJmtvcGY7XCIsXCLwnZOAXCI6XCIma3NjcjtcIixcIuKkm1wiOlwiJmxBdGFpbDtcIixcIuKkjlwiOlwiJmxCYXJyO1wiLFwi4qqLXCI6XCImbGVzc2VxcWd0cjtcIixcIuKlolwiOlwiJmxIYXI7XCIsXCLEulwiOlwiJmxhY3V0ZTtcIixcIuKmtFwiOlwiJmxhZW1wdHl2O1wiLFwizrtcIjpcIiZsYW1iZGE7XCIsXCLippFcIjpcIiZsYW5nZDtcIixcIuKqhVwiOlwiJmxlc3NhcHByb3g7XCIsXCLCq1wiOlwiJmxhcXVvO1wiLFwi4qSfXCI6XCImbGFycmJmcztcIixcIuKknVwiOlwiJmxhcnJmcztcIixcIuKGq1wiOlwiJmxvb3BhcnJvd2xlZnQ7XCIsXCLipLlcIjpcIiZsYXJycGw7XCIsXCLipbNcIjpcIiZsYXJyc2ltO1wiLFwi4oaiXCI6XCImbGVmdGFycm93dGFpbDtcIixcIuKqq1wiOlwiJmxhdDtcIixcIuKkmVwiOlwiJmxhdGFpbDtcIixcIuKqrVwiOlwiJmxhdGU7XCIsXCLiqq3vuIBcIjpcIiZsYXRlcztcIixcIuKkjFwiOlwiJmxiYXJyO1wiLFwi4p2yXCI6XCImbGJicms7XCIsXCJ7XCI6XCImbGN1YjtcIixcIltcIjpcIiZsc3FiO1wiLFwi4qaLXCI6XCImbGJya2U7XCIsXCLipo9cIjpcIiZsYnJrc2xkO1wiLFwi4qaNXCI6XCImbGJya3NsdTtcIixcIsS+XCI6XCImbGNhcm9uO1wiLFwixLxcIjpcIiZsY2VkaWw7XCIsXCLQu1wiOlwiJmxjeTtcIixcIuKktlwiOlwiJmxkY2E7XCIsXCLipadcIjpcIiZsZHJkaGFyO1wiLFwi4qWLXCI6XCImbGRydXNoYXI7XCIsXCLihrJcIjpcIiZsZHNoO1wiLFwi4omkXCI6XCImbGVxO1wiLFwi4oeHXCI6XCImbGxhcnI7XCIsXCLii4tcIjpcIiZsdGhyZWU7XCIsXCLiqqhcIjpcIiZsZXNjYztcIixcIuKpv1wiOlwiJmxlc2RvdDtcIixcIuKqgVwiOlwiJmxlc2RvdG87XCIsXCLiqoNcIjpcIiZsZXNkb3RvcjtcIixcIuKLmu+4gFwiOlwiJmxlc2c7XCIsXCLiqpNcIjpcIiZsZXNnZXM7XCIsXCLii5ZcIjpcIiZsdGRvdDtcIixcIuKlvFwiOlwiJmxmaXNodDtcIixcIvCdlKlcIjpcIiZsZnI7XCIsXCLiqpFcIjpcIiZsZ0U7XCIsXCLipapcIjpcIiZsaGFydWw7XCIsXCLiloRcIjpcIiZsaGJsaztcIixcItGZXCI6XCImbGpjeTtcIixcIuKlq1wiOlwiJmxsaGFyZDtcIixcIuKXulwiOlwiJmxsdHJpO1wiLFwixYBcIjpcIiZsbWlkb3Q7XCIsXCLijrBcIjpcIiZsbW91c3RhY2hlO1wiLFwi4omoXCI6XCImbG5lcXE7XCIsXCLiqolcIjpcIiZsbmFwcHJveDtcIixcIuKqh1wiOlwiJmxuZXE7XCIsXCLii6ZcIjpcIiZsbnNpbTtcIixcIuKfrFwiOlwiJmxvYW5nO1wiLFwi4oe9XCI6XCImbG9hcnI7XCIsXCLin7xcIjpcIiZ4bWFwO1wiLFwi4oasXCI6XCImcmFycmxwO1wiLFwi4qaFXCI6XCImbG9wYXI7XCIsXCLwnZWdXCI6XCImbG9wZjtcIixcIuKorVwiOlwiJmxvcGx1cztcIixcIuKotFwiOlwiJmxvdGltZXM7XCIsXCLiiJdcIjpcIiZsb3dhc3Q7XCIsXCLil4pcIjpcIiZsb3plbmdlO1wiLFwiKFwiOlwiJmxwYXI7XCIsXCLippNcIjpcIiZscGFybHQ7XCIsXCLipa1cIjpcIiZscmhhcmQ7XCIsXCLigI5cIjpcIiZscm07XCIsXCLiir9cIjpcIiZscnRyaTtcIixcIuKAuVwiOlwiJmxzYXF1bztcIixcIvCdk4FcIjpcIiZsc2NyO1wiLFwi4qqNXCI6XCImbHNpbWU7XCIsXCLiqo9cIjpcIiZsc2ltZztcIixcIuKAmlwiOlwiJnNicXVvO1wiLFwixYJcIjpcIiZsc3Ryb2s7XCIsXCLiqqZcIjpcIiZsdGNjO1wiLFwi4qm5XCI6XCImbHRjaXI7XCIsXCLii4lcIjpcIiZsdGltZXM7XCIsXCLipbZcIjpcIiZsdGxhcnI7XCIsXCLiqbtcIjpcIiZsdHF1ZXN0O1wiLFwi4qaWXCI6XCImbHRyUGFyO1wiLFwi4peDXCI6XCImdHJpYW5nbGVsZWZ0O1wiLFwi4qWKXCI6XCImbHVyZHNoYXI7XCIsXCLipaZcIjpcIiZsdXJ1aGFyO1wiLFwi4omo77iAXCI6XCImbHZuRTtcIixcIuKIulwiOlwiJm1ERG90O1wiLFwiwq9cIjpcIiZzdHJucztcIixcIuKZglwiOlwiJm1hbGU7XCIsXCLinKBcIjpcIiZtYWx0ZXNlO1wiLFwi4pauXCI6XCImbWFya2VyO1wiLFwi4qipXCI6XCImbWNvbW1hO1wiLFwi0LxcIjpcIiZtY3k7XCIsXCLigJRcIjpcIiZtZGFzaDtcIixcIvCdlKpcIjpcIiZtZnI7XCIsXCLihKdcIjpcIiZtaG87XCIsXCLCtVwiOlwiJm1pY3JvO1wiLFwi4quwXCI6XCImbWlkY2lyO1wiLFwi4oiSXCI6XCImbWludXM7XCIsXCLiqKpcIjpcIiZtaW51c2R1O1wiLFwi4qubXCI6XCImbWxjcDtcIixcIuKKp1wiOlwiJm1vZGVscztcIixcIvCdlZ5cIjpcIiZtb3BmO1wiLFwi8J2TglwiOlwiJm1zY3I7XCIsXCLOvFwiOlwiJm11O1wiLFwi4oq4XCI6XCImbXVtYXA7XCIsXCLii5nMuFwiOlwiJm5HZztcIixcIuKJq+KDklwiOlwiJm5HdDtcIixcIuKHjVwiOlwiJm5sQXJyO1wiLFwi4oeOXCI6XCImbmhBcnI7XCIsXCLii5jMuFwiOlwiJm5MbDtcIixcIuKJquKDklwiOlwiJm5MdDtcIixcIuKHj1wiOlwiJm5yQXJyO1wiLFwi4oqvXCI6XCImblZEYXNoO1wiLFwi4oquXCI6XCImblZkYXNoO1wiLFwixYRcIjpcIiZuYWN1dGU7XCIsXCLiiKDig5JcIjpcIiZuYW5nO1wiLFwi4qmwzLhcIjpcIiZuYXBFO1wiLFwi4omLzLhcIjpcIiZuYXBpZDtcIixcIsWJXCI6XCImbmFwb3M7XCIsXCLima5cIjpcIiZuYXR1cmFsO1wiLFwi4qmDXCI6XCImbmNhcDtcIixcIsWIXCI6XCImbmNhcm9uO1wiLFwixYZcIjpcIiZuY2VkaWw7XCIsXCLiqa3MuFwiOlwiJm5jb25nZG90O1wiLFwi4qmCXCI6XCImbmN1cDtcIixcItC9XCI6XCImbmN5O1wiLFwi4oCTXCI6XCImbmRhc2g7XCIsXCLih5dcIjpcIiZuZUFycjtcIixcIuKkpFwiOlwiJm5lYXJoaztcIixcIuKJkMy4XCI6XCImbmVkb3Q7XCIsXCLipKhcIjpcIiZ0b2VhO1wiLFwi8J2Uq1wiOlwiJm5mcjtcIixcIuKGrlwiOlwiJm5sZWZ0cmlnaHRhcnJvdztcIixcIuKrslwiOlwiJm5ocGFyO1wiLFwi4ou8XCI6XCImbmlzO1wiLFwi4ou6XCI6XCImbmlzZDtcIixcItGaXCI6XCImbmpjeTtcIixcIuKJpsy4XCI6XCImbmxlcXE7XCIsXCLihppcIjpcIiZubGVmdGFycm93O1wiLFwi4oClXCI6XCImbmxkcjtcIixcIvCdlZ9cIjpcIiZub3BmO1wiLFwiwqxcIjpcIiZub3Q7XCIsXCLii7nMuFwiOlwiJm5vdGluRTtcIixcIuKLtcy4XCI6XCImbm90aW5kb3Q7XCIsXCLii7dcIjpcIiZub3RpbnZiO1wiLFwi4ou2XCI6XCImbm90aW52YztcIixcIuKLvlwiOlwiJm5vdG5pdmI7XCIsXCLii71cIjpcIiZub3RuaXZjO1wiLFwi4qu94oOlXCI6XCImbnBhcnNsO1wiLFwi4oiCzLhcIjpcIiZucGFydDtcIixcIuKolFwiOlwiJm5wb2xpbnQ7XCIsXCLihptcIjpcIiZucmlnaHRhcnJvdztcIixcIuKks8y4XCI6XCImbnJhcnJjO1wiLFwi4oadzLhcIjpcIiZucmFycnc7XCIsXCLwnZODXCI6XCImbnNjcjtcIixcIuKKhFwiOlwiJm5zdWI7XCIsXCLiq4XMuFwiOlwiJm5zdWJzZXRlcXE7XCIsXCLiioVcIjpcIiZuc3VwO1wiLFwi4quGzLhcIjpcIiZuc3Vwc2V0ZXFxO1wiLFwiw7FcIjpcIiZudGlsZGU7XCIsXCLOvVwiOlwiJm51O1wiLFwiI1wiOlwiJm51bTtcIixcIuKEllwiOlwiJm51bWVybztcIixcIuKAh1wiOlwiJm51bXNwO1wiLFwi4oqtXCI6XCImbnZEYXNoO1wiLFwi4qSEXCI6XCImbnZIYXJyO1wiLFwi4omN4oOSXCI6XCImbnZhcDtcIixcIuKKrFwiOlwiJm52ZGFzaDtcIixcIuKJpeKDklwiOlwiJm52Z2U7XCIsXCI+4oOSXCI6XCImbnZndDtcIixcIuKnnlwiOlwiJm52aW5maW47XCIsXCLipIJcIjpcIiZudmxBcnI7XCIsXCLiiaTig5JcIjpcIiZudmxlO1wiLFwiPOKDklwiOlwiJm52bHQ7XCIsXCLiirTig5JcIjpcIiZudmx0cmllO1wiLFwi4qSDXCI6XCImbnZyQXJyO1wiLFwi4oq14oOSXCI6XCImbnZydHJpZTtcIixcIuKIvOKDklwiOlwiJm52c2ltO1wiLFwi4oeWXCI6XCImbndBcnI7XCIsXCLipKNcIjpcIiZud2FyaGs7XCIsXCLipKdcIjpcIiZud25lYXI7XCIsXCLDs1wiOlwiJm9hY3V0ZTtcIixcIsO0XCI6XCImb2NpcmM7XCIsXCLQvlwiOlwiJm9jeTtcIixcIsWRXCI6XCImb2RibGFjO1wiLFwi4qi4XCI6XCImb2RpdjtcIixcIuKmvFwiOlwiJm9kc29sZDtcIixcIsWTXCI6XCImb2VsaWc7XCIsXCLipr9cIjpcIiZvZmNpcjtcIixcIvCdlKxcIjpcIiZvZnI7XCIsXCLLm1wiOlwiJm9nb247XCIsXCLDslwiOlwiJm9ncmF2ZTtcIixcIuKngVwiOlwiJm9ndDtcIixcIuKmtVwiOlwiJm9oYmFyO1wiLFwi4qa+XCI6XCImb2xjaXI7XCIsXCLiprtcIjpcIiZvbGNyb3NzO1wiLFwi4qeAXCI6XCImb2x0O1wiLFwixY1cIjpcIiZvbWFjcjtcIixcIs+JXCI6XCImb21lZ2E7XCIsXCLOv1wiOlwiJm9taWNyb247XCIsXCLiprZcIjpcIiZvbWlkO1wiLFwi8J2VoFwiOlwiJm9vcGY7XCIsXCLiprdcIjpcIiZvcGFyO1wiLFwi4qa5XCI6XCImb3BlcnA7XCIsXCLiiKhcIjpcIiZ2ZWU7XCIsXCLiqZ1cIjpcIiZvcmQ7XCIsXCLihLRcIjpcIiZvc2NyO1wiLFwiwqpcIjpcIiZvcmRmO1wiLFwiwrpcIjpcIiZvcmRtO1wiLFwi4oq2XCI6XCImb3JpZ29mO1wiLFwi4qmWXCI6XCImb3JvcjtcIixcIuKpl1wiOlwiJm9yc2xvcGU7XCIsXCLiqZtcIjpcIiZvcnY7XCIsXCLDuFwiOlwiJm9zbGFzaDtcIixcIuKKmFwiOlwiJm9zb2w7XCIsXCLDtVwiOlwiJm90aWxkZTtcIixcIuKotlwiOlwiJm90aW1lc2FzO1wiLFwiw7ZcIjpcIiZvdW1sO1wiLFwi4oy9XCI6XCImb3ZiYXI7XCIsXCLCtlwiOlwiJnBhcmE7XCIsXCLiq7NcIjpcIiZwYXJzaW07XCIsXCLiq71cIjpcIiZwYXJzbDtcIixcItC/XCI6XCImcGN5O1wiLFwiJVwiOlwiJnBlcmNudDtcIixcIi5cIjpcIiZwZXJpb2Q7XCIsXCLigLBcIjpcIiZwZXJtaWw7XCIsXCLigLFcIjpcIiZwZXJ0ZW5rO1wiLFwi8J2UrVwiOlwiJnBmcjtcIixcIs+GXCI6XCImcGhpO1wiLFwiz5VcIjpcIiZ2YXJwaGk7XCIsXCLimI5cIjpcIiZwaG9uZTtcIixcIs+AXCI6XCImcGk7XCIsXCLPllwiOlwiJnZhcnBpO1wiLFwi4oSOXCI6XCImcGxhbmNraDtcIixcIitcIjpcIiZwbHVzO1wiLFwi4qijXCI6XCImcGx1c2FjaXI7XCIsXCLiqKJcIjpcIiZwbHVzY2lyO1wiLFwi4qilXCI6XCImcGx1c2R1O1wiLFwi4qmyXCI6XCImcGx1c2U7XCIsXCLiqKZcIjpcIiZwbHVzc2ltO1wiLFwi4qinXCI6XCImcGx1c3R3bztcIixcIuKolVwiOlwiJnBvaW50aW50O1wiLFwi8J2VoVwiOlwiJnBvcGY7XCIsXCLCo1wiOlwiJnBvdW5kO1wiLFwi4qqzXCI6XCImcHJFO1wiLFwi4qq3XCI6XCImcHJlY2FwcHJveDtcIixcIuKquVwiOlwiJnBybmFwO1wiLFwi4qq1XCI6XCImcHJuRTtcIixcIuKLqFwiOlwiJnBybnNpbTtcIixcIuKAslwiOlwiJnByaW1lO1wiLFwi4oyuXCI6XCImcHJvZmFsYXI7XCIsXCLijJJcIjpcIiZwcm9mbGluZTtcIixcIuKMk1wiOlwiJnByb2ZzdXJmO1wiLFwi4oqwXCI6XCImcHJ1cmVsO1wiLFwi8J2ThVwiOlwiJnBzY3I7XCIsXCLPiFwiOlwiJnBzaTtcIixcIuKAiFwiOlwiJnB1bmNzcDtcIixcIvCdlK5cIjpcIiZxZnI7XCIsXCLwnZWiXCI6XCImcW9wZjtcIixcIuKBl1wiOlwiJnFwcmltZTtcIixcIvCdk4ZcIjpcIiZxc2NyO1wiLFwi4qiWXCI6XCImcXVhdGludDtcIixcIj9cIjpcIiZxdWVzdDtcIixcIuKknFwiOlwiJnJBdGFpbDtcIixcIuKlpFwiOlwiJnJIYXI7XCIsXCLiiL3MsVwiOlwiJnJhY2U7XCIsXCLFlVwiOlwiJnJhY3V0ZTtcIixcIuKms1wiOlwiJnJhZW1wdHl2O1wiLFwi4qaSXCI6XCImcmFuZ2Q7XCIsXCLipqVcIjpcIiZyYW5nZTtcIixcIsK7XCI6XCImcmFxdW87XCIsXCLipbVcIjpcIiZyYXJyYXA7XCIsXCLipKBcIjpcIiZyYXJyYmZzO1wiLFwi4qSzXCI6XCImcmFycmM7XCIsXCLipJ5cIjpcIiZyYXJyZnM7XCIsXCLipYVcIjpcIiZyYXJycGw7XCIsXCLipbRcIjpcIiZyYXJyc2ltO1wiLFwi4oajXCI6XCImcmlnaHRhcnJvd3RhaWw7XCIsXCLihp1cIjpcIiZyaWdodHNxdWlnYXJyb3c7XCIsXCLipJpcIjpcIiZyYXRhaWw7XCIsXCLiiLZcIjpcIiZyYXRpbztcIixcIuKds1wiOlwiJnJiYnJrO1wiLFwifVwiOlwiJnJjdWI7XCIsXCJdXCI6XCImcnNxYjtcIixcIuKmjFwiOlwiJnJicmtlO1wiLFwi4qaOXCI6XCImcmJya3NsZDtcIixcIuKmkFwiOlwiJnJicmtzbHU7XCIsXCLFmVwiOlwiJnJjYXJvbjtcIixcIsWXXCI6XCImcmNlZGlsO1wiLFwi0YBcIjpcIiZyY3k7XCIsXCLipLdcIjpcIiZyZGNhO1wiLFwi4qWpXCI6XCImcmRsZGhhcjtcIixcIuKGs1wiOlwiJnJkc2g7XCIsXCLilq1cIjpcIiZyZWN0O1wiLFwi4qW9XCI6XCImcmZpc2h0O1wiLFwi8J2Ur1wiOlwiJnJmcjtcIixcIuKlrFwiOlwiJnJoYXJ1bDtcIixcIs+BXCI6XCImcmhvO1wiLFwiz7FcIjpcIiZ2YXJyaG87XCIsXCLih4lcIjpcIiZycmFycjtcIixcIuKLjFwiOlwiJnJ0aHJlZTtcIixcIsuaXCI6XCImcmluZztcIixcIuKAj1wiOlwiJnJsbTtcIixcIuKOsVwiOlwiJnJtb3VzdGFjaGU7XCIsXCLiq65cIjpcIiZybm1pZDtcIixcIuKfrVwiOlwiJnJvYW5nO1wiLFwi4oe+XCI6XCImcm9hcnI7XCIsXCLipoZcIjpcIiZyb3BhcjtcIixcIvCdlaNcIjpcIiZyb3BmO1wiLFwi4qiuXCI6XCImcm9wbHVzO1wiLFwi4qi1XCI6XCImcm90aW1lcztcIixcIilcIjpcIiZycGFyO1wiLFwi4qaUXCI6XCImcnBhcmd0O1wiLFwi4qiSXCI6XCImcnBwb2xpbnQ7XCIsXCLigLpcIjpcIiZyc2FxdW87XCIsXCLwnZOHXCI6XCImcnNjcjtcIixcIuKLilwiOlwiJnJ0aW1lcztcIixcIuKWuVwiOlwiJnRyaWFuZ2xlcmlnaHQ7XCIsXCLip45cIjpcIiZydHJpbHRyaTtcIixcIuKlqFwiOlwiJnJ1bHVoYXI7XCIsXCLihJ5cIjpcIiZyeDtcIixcIsWbXCI6XCImc2FjdXRlO1wiLFwi4qq0XCI6XCImc2NFO1wiLFwi4qq4XCI6XCImc3VjY2FwcHJveDtcIixcIsWhXCI6XCImc2Nhcm9uO1wiLFwixZ9cIjpcIiZzY2VkaWw7XCIsXCLFnVwiOlwiJnNjaXJjO1wiLFwi4qq2XCI6XCImc3VjY25lcXE7XCIsXCLiqrpcIjpcIiZzdWNjbmFwcHJveDtcIixcIuKLqVwiOlwiJnN1Y2Nuc2ltO1wiLFwi4qiTXCI6XCImc2Nwb2xpbnQ7XCIsXCLRgVwiOlwiJnNjeTtcIixcIuKLhVwiOlwiJnNkb3Q7XCIsXCLiqaZcIjpcIiZzZG90ZTtcIixcIuKHmFwiOlwiJnNlQXJyO1wiLFwiwqdcIjpcIiZzZWN0O1wiLFwiO1wiOlwiJnNlbWk7XCIsXCLipKlcIjpcIiZ0b3NhO1wiLFwi4py2XCI6XCImc2V4dDtcIixcIvCdlLBcIjpcIiZzZnI7XCIsXCLima9cIjpcIiZzaGFycDtcIixcItGJXCI6XCImc2hjaGN5O1wiLFwi0YhcIjpcIiZzaGN5O1wiLFwiwq1cIjpcIiZzaHk7XCIsXCLPg1wiOlwiJnNpZ21hO1wiLFwiz4JcIjpcIiZ2YXJzaWdtYTtcIixcIuKpqlwiOlwiJnNpbWRvdDtcIixcIuKqnlwiOlwiJnNpbWc7XCIsXCLiqqBcIjpcIiZzaW1nRTtcIixcIuKqnVwiOlwiJnNpbWw7XCIsXCLiqp9cIjpcIiZzaW1sRTtcIixcIuKJhlwiOlwiJnNpbW5lO1wiLFwi4qikXCI6XCImc2ltcGx1cztcIixcIuKlslwiOlwiJnNpbXJhcnI7XCIsXCLiqLNcIjpcIiZzbWFzaHA7XCIsXCLip6RcIjpcIiZzbWVwYXJzbDtcIixcIuKMo1wiOlwiJnNzbWlsZTtcIixcIuKqqlwiOlwiJnNtdDtcIixcIuKqrFwiOlwiJnNtdGU7XCIsXCLiqqzvuIBcIjpcIiZzbXRlcztcIixcItGMXCI6XCImc29mdGN5O1wiLFwiL1wiOlwiJnNvbDtcIixcIuKnhFwiOlwiJnNvbGI7XCIsXCLijL9cIjpcIiZzb2xiYXI7XCIsXCLwnZWkXCI6XCImc29wZjtcIixcIuKZoFwiOlwiJnNwYWRlc3VpdDtcIixcIuKKk++4gFwiOlwiJnNxY2FwcztcIixcIuKKlO+4gFwiOlwiJnNxY3VwcztcIixcIvCdk4hcIjpcIiZzc2NyO1wiLFwi4piGXCI6XCImc3RhcjtcIixcIuKKglwiOlwiJnN1YnNldDtcIixcIuKrhVwiOlwiJnN1YnNldGVxcTtcIixcIuKqvVwiOlwiJnN1YmRvdDtcIixcIuKrg1wiOlwiJnN1YmVkb3Q7XCIsXCLiq4FcIjpcIiZzdWJtdWx0O1wiLFwi4quLXCI6XCImc3Vic2V0bmVxcTtcIixcIuKKilwiOlwiJnN1YnNldG5lcTtcIixcIuKqv1wiOlwiJnN1YnBsdXM7XCIsXCLipblcIjpcIiZzdWJyYXJyO1wiLFwi4quHXCI6XCImc3Vic2ltO1wiLFwi4quVXCI6XCImc3Vic3ViO1wiLFwi4quTXCI6XCImc3Vic3VwO1wiLFwi4pmqXCI6XCImc3VuZztcIixcIsK5XCI6XCImc3VwMTtcIixcIsKyXCI6XCImc3VwMjtcIixcIsKzXCI6XCImc3VwMztcIixcIuKrhlwiOlwiJnN1cHNldGVxcTtcIixcIuKqvlwiOlwiJnN1cGRvdDtcIixcIuKrmFwiOlwiJnN1cGRzdWI7XCIsXCLiq4RcIjpcIiZzdXBlZG90O1wiLFwi4p+JXCI6XCImc3VwaHNvbDtcIixcIuKrl1wiOlwiJnN1cGhzdWI7XCIsXCLipbtcIjpcIiZzdXBsYXJyO1wiLFwi4quCXCI6XCImc3VwbXVsdDtcIixcIuKrjFwiOlwiJnN1cHNldG5lcXE7XCIsXCLiiotcIjpcIiZzdXBzZXRuZXE7XCIsXCLiq4BcIjpcIiZzdXBwbHVzO1wiLFwi4quIXCI6XCImc3Vwc2ltO1wiLFwi4quUXCI6XCImc3Vwc3ViO1wiLFwi4quWXCI6XCImc3Vwc3VwO1wiLFwi4oeZXCI6XCImc3dBcnI7XCIsXCLipKpcIjpcIiZzd253YXI7XCIsXCLDn1wiOlwiJnN6bGlnO1wiLFwi4oyWXCI6XCImdGFyZ2V0O1wiLFwiz4RcIjpcIiZ0YXU7XCIsXCLFpVwiOlwiJnRjYXJvbjtcIixcIsWjXCI6XCImdGNlZGlsO1wiLFwi0YJcIjpcIiZ0Y3k7XCIsXCLijJVcIjpcIiZ0ZWxyZWM7XCIsXCLwnZSxXCI6XCImdGZyO1wiLFwizrhcIjpcIiZ0aGV0YTtcIixcIs+RXCI6XCImdmFydGhldGE7XCIsXCLDvlwiOlwiJnRob3JuO1wiLFwiw5dcIjpcIiZ0aW1lcztcIixcIuKosVwiOlwiJnRpbWVzYmFyO1wiLFwi4qiwXCI6XCImdGltZXNkO1wiLFwi4oy2XCI6XCImdG9wYm90O1wiLFwi4quxXCI6XCImdG9wY2lyO1wiLFwi8J2VpVwiOlwiJnRvcGY7XCIsXCLiq5pcIjpcIiZ0b3Bmb3JrO1wiLFwi4oC0XCI6XCImdHByaW1lO1wiLFwi4pa1XCI6XCImdXRyaTtcIixcIuKJnFwiOlwiJnRyaWU7XCIsXCLil6xcIjpcIiZ0cmlkb3Q7XCIsXCLiqLpcIjpcIiZ0cmltaW51cztcIixcIuKouVwiOlwiJnRyaXBsdXM7XCIsXCLip41cIjpcIiZ0cmlzYjtcIixcIuKou1wiOlwiJnRyaXRpbWU7XCIsXCLij6JcIjpcIiZ0cnBleml1bTtcIixcIvCdk4lcIjpcIiZ0c2NyO1wiLFwi0YZcIjpcIiZ0c2N5O1wiLFwi0ZtcIjpcIiZ0c2hjeTtcIixcIsWnXCI6XCImdHN0cm9rO1wiLFwi4qWjXCI6XCImdUhhcjtcIixcIsO6XCI6XCImdWFjdXRlO1wiLFwi0Z5cIjpcIiZ1YnJjeTtcIixcIsWtXCI6XCImdWJyZXZlO1wiLFwiw7tcIjpcIiZ1Y2lyYztcIixcItGDXCI6XCImdWN5O1wiLFwixbFcIjpcIiZ1ZGJsYWM7XCIsXCLipb5cIjpcIiZ1ZmlzaHQ7XCIsXCLwnZSyXCI6XCImdWZyO1wiLFwiw7lcIjpcIiZ1Z3JhdmU7XCIsXCLiloBcIjpcIiZ1aGJsaztcIixcIuKMnFwiOlwiJnVsY29ybmVyO1wiLFwi4oyPXCI6XCImdWxjcm9wO1wiLFwi4pe4XCI6XCImdWx0cmk7XCIsXCLFq1wiOlwiJnVtYWNyO1wiLFwixbNcIjpcIiZ1b2dvbjtcIixcIvCdlaZcIjpcIiZ1b3BmO1wiLFwiz4VcIjpcIiZ1cHNpbG9uO1wiLFwi4oeIXCI6XCImdXVhcnI7XCIsXCLijJ1cIjpcIiZ1cmNvcm5lcjtcIixcIuKMjlwiOlwiJnVyY3JvcDtcIixcIsWvXCI6XCImdXJpbmc7XCIsXCLil7lcIjpcIiZ1cnRyaTtcIixcIvCdk4pcIjpcIiZ1c2NyO1wiLFwi4ouwXCI6XCImdXRkb3Q7XCIsXCLFqVwiOlwiJnV0aWxkZTtcIixcIsO8XCI6XCImdXVtbDtcIixcIuKmp1wiOlwiJnV3YW5nbGU7XCIsXCLiq6hcIjpcIiZ2QmFyO1wiLFwi4qupXCI6XCImdkJhcnY7XCIsXCLippxcIjpcIiZ2YW5ncnQ7XCIsXCLiiorvuIBcIjpcIiZ2c3VibmU7XCIsXCLiq4vvuIBcIjpcIiZ2c3VibkU7XCIsXCLiiovvuIBcIjpcIiZ2c3VwbmU7XCIsXCLiq4zvuIBcIjpcIiZ2c3VwbkU7XCIsXCLQslwiOlwiJnZjeTtcIixcIuKKu1wiOlwiJnZlZWJhcjtcIixcIuKJmlwiOlwiJnZlZWVxO1wiLFwi4ouuXCI6XCImdmVsbGlwO1wiLFwi8J2Us1wiOlwiJnZmcjtcIixcIvCdladcIjpcIiZ2b3BmO1wiLFwi8J2Ti1wiOlwiJnZzY3I7XCIsXCLipppcIjpcIiZ2emlnemFnO1wiLFwixbVcIjpcIiZ3Y2lyYztcIixcIuKpn1wiOlwiJndlZGJhcjtcIixcIuKJmVwiOlwiJndlZGdlcTtcIixcIuKEmFwiOlwiJndwO1wiLFwi8J2UtFwiOlwiJndmcjtcIixcIvCdlahcIjpcIiZ3b3BmO1wiLFwi8J2TjFwiOlwiJndzY3I7XCIsXCLwnZS1XCI6XCImeGZyO1wiLFwizr5cIjpcIiZ4aTtcIixcIuKLu1wiOlwiJnhuaXM7XCIsXCLwnZWpXCI6XCImeG9wZjtcIixcIvCdk41cIjpcIiZ4c2NyO1wiLFwiw71cIjpcIiZ5YWN1dGU7XCIsXCLRj1wiOlwiJnlhY3k7XCIsXCLFt1wiOlwiJnljaXJjO1wiLFwi0YtcIjpcIiZ5Y3k7XCIsXCLCpVwiOlwiJnllbjtcIixcIvCdlLZcIjpcIiZ5ZnI7XCIsXCLRl1wiOlwiJnlpY3k7XCIsXCLwnZWqXCI6XCImeW9wZjtcIixcIvCdk45cIjpcIiZ5c2NyO1wiLFwi0Y5cIjpcIiZ5dWN5O1wiLFwiw79cIjpcIiZ5dW1sO1wiLFwixbpcIjpcIiZ6YWN1dGU7XCIsXCLFvlwiOlwiJnpjYXJvbjtcIixcItC3XCI6XCImemN5O1wiLFwixbxcIjpcIiZ6ZG90O1wiLFwizrZcIjpcIiZ6ZXRhO1wiLFwi8J2Ut1wiOlwiJnpmcjtcIixcItC2XCI6XCImemhjeTtcIixcIuKHnVwiOlwiJnppZ3JhcnI7XCIsXCLwnZWrXCI6XCImem9wZjtcIixcIvCdk49cIjpcIiZ6c2NyO1wiLFwi4oCNXCI6XCImendqO1wiLFwi4oCMXCI6XCImenduajtcIn19fTsiLCJcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6dHJ1ZX0pO2V4cG9ydHMubnVtZXJpY1VuaWNvZGVNYXA9ezA6NjU1MzMsMTI4OjgzNjQsMTMwOjgyMTgsMTMxOjQwMiwxMzI6ODIyMiwxMzM6ODIzMCwxMzQ6ODIyNCwxMzU6ODIyNSwxMzY6NzEwLDEzNzo4MjQwLDEzODozNTIsMTM5OjgyNDksMTQwOjMzOCwxNDI6MzgxLDE0NTo4MjE2LDE0Njo4MjE3LDE0Nzo4MjIwLDE0ODo4MjIxLDE0OTo4MjI2LDE1MDo4MjExLDE1MTo4MjEyLDE1Mjo3MzIsMTUzOjg0ODIsMTU0OjM1MywxNTU6ODI1MCwxNTY6MzM5LDE1ODozODIsMTU5OjM3Nn07IiwiXCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOnRydWV9KTtleHBvcnRzLmZyb21Db2RlUG9pbnQ9U3RyaW5nLmZyb21Db2RlUG9pbnR8fGZ1bmN0aW9uKGFzdHJhbENvZGVQb2ludCl7cmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoTWF0aC5mbG9vcigoYXN0cmFsQ29kZVBvaW50LTY1NTM2KS8xMDI0KSs1NTI5NiwoYXN0cmFsQ29kZVBvaW50LTY1NTM2KSUxMDI0KzU2MzIwKX07ZXhwb3J0cy5nZXRDb2RlUG9pbnQ9U3RyaW5nLnByb3RvdHlwZS5jb2RlUG9pbnRBdD9mdW5jdGlvbihpbnB1dCxwb3NpdGlvbil7cmV0dXJuIGlucHV0LmNvZGVQb2ludEF0KHBvc2l0aW9uKX06ZnVuY3Rpb24oaW5wdXQscG9zaXRpb24pe3JldHVybihpbnB1dC5jaGFyQ29kZUF0KHBvc2l0aW9uKS01NTI5NikqMTAyNCtpbnB1dC5jaGFyQ29kZUF0KHBvc2l0aW9uKzEpLTU2MzIwKzY1NTM2fTtleHBvcnRzLmhpZ2hTdXJyb2dhdGVGcm9tPTU1Mjk2O2V4cG9ydHMuaGlnaFN1cnJvZ2F0ZVRvPTU2MzE5OyIsIi8qIGVzbGludC1kaXNhYmxlICovXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gICAgIEJlZ2luIHByaXNtLWNvcmUuanNcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxudmFyIF9zZWxmID0ge307XG5cbi8qKlxuICogUHJpc206IExpZ2h0d2VpZ2h0LCByb2J1c3QsIGVsZWdhbnQgc3ludGF4IGhpZ2hsaWdodGluZ1xuICogTUlUIGxpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHAvXG4gKiBAYXV0aG9yIExlYSBWZXJvdSBodHRwOi8vbGVhLnZlcm91Lm1lXG4gKi9cblxudmFyIFByaXNtID0gKGZ1bmN0aW9uICgpIHtcbi8vIFByaXZhdGUgaGVscGVyIHZhcnNcbiAgdmFyIGxhbmcgPSAvXFxibGFuZyg/OnVhZ2UpPy0oW1xcdy1dKylcXGIvaTtcbiAgdmFyIHVuaXF1ZUlkID0gMDtcblxuICB2YXIgXyA9IF9zZWxmLlByaXNtID0ge1xuICAgIG1hbnVhbDogX3NlbGYuUHJpc20gJiYgX3NlbGYuUHJpc20ubWFudWFsLFxuICAgIGRpc2FibGVXb3JrZXJNZXNzYWdlSGFuZGxlcjogX3NlbGYuUHJpc20gJiYgX3NlbGYuUHJpc20uZGlzYWJsZVdvcmtlck1lc3NhZ2VIYW5kbGVyLFxuICAgIHV0aWw6IHtcbiAgICAgIGVuY29kZTogZnVuY3Rpb24gZW5jb2RlICh0b2tlbnMpIHtcblx0XHRcdGlmICh0b2tlbnMgaW5zdGFuY2VvZiBUb2tlbikge1xuXHRcdFx0XHRyZXR1cm4gbmV3IFRva2VuKHRva2Vucy50eXBlLCBfLnV0aWwuZW5jb2RlKHRva2Vucy5jb250ZW50KSwgdG9rZW5zLmFsaWFzKTtcblx0XHRcdH0gZWxzZSBpZiAoXy51dGlsLnR5cGUodG9rZW5zKSA9PT0gJ0FycmF5Jykge1xuXHRcdFx0XHRyZXR1cm4gdG9rZW5zLm1hcChfLnV0aWwuZW5jb2RlKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldHVybiB0b2tlbnMucmVwbGFjZSgvJi9nLCAnJmFtcDsnKS5yZXBsYWNlKC88L2csICcmbHQ7JykucmVwbGFjZSgvXFx1MDBhMC9nLCAnICcpO1xuXHRcdFx0fVxuXHRcdH0sXG5cbiAgICAgIHR5cGU6IGZ1bmN0aW9uIHR5cGUgKG8pIHtcblx0XHRcdHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykubWF0Y2goL1xcW29iamVjdCAoXFx3KylcXF0vKVsxXTtcblx0XHR9LFxuXG4gICAgICBvYmpJZDogZnVuY3Rpb24gb2JqSWQgKG9iaikge1xuXHRcdFx0aWYgKCFvYmpbJ19faWQnXSkge1xuXHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCAnX19pZCcsIHsgdmFsdWU6ICsrdW5pcXVlSWQgfSk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gb2JqWydfX2lkJ107XG5cdFx0fSxcblxuICAgICAgLy8gRGVlcCBjbG9uZSBhIGxhbmd1YWdlIGRlZmluaXRpb24gKGUuZy4gdG8gZXh0ZW5kIGl0KVxuICAgICAgY2xvbmU6IGZ1bmN0aW9uIGNsb25lIChvLCB2aXNpdGVkKSB7XG5cdFx0XHR2YXIgdHlwZSA9IF8udXRpbC50eXBlKG8pO1xuXHRcdFx0dmlzaXRlZCA9IHZpc2l0ZWQgfHwge307XG5cblx0XHRcdHN3aXRjaCAodHlwZSkge1xuXHRcdFx0XHRjYXNlICdPYmplY3QnOlxuXHRcdFx0XHRcdGlmICh2aXNpdGVkW18udXRpbC5vYmpJZChvKV0pIHtcblx0XHRcdFx0XHRcdHJldHVybiB2aXNpdGVkW18udXRpbC5vYmpJZChvKV07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHZhciBjbG9uZSA9IHt9O1xuXHRcdFx0XHRcdHZpc2l0ZWRbXy51dGlsLm9iaklkKG8pXSA9IGNsb25lO1xuXG5cdFx0XHRcdFx0Zm9yICh2YXIga2V5IGluIG8pIHtcblx0XHRcdFx0XHRcdGlmIChvLmhhc093blByb3BlcnR5KGtleSkpIHtcblx0XHRcdFx0XHRcdFx0Y2xvbmVba2V5XSA9IF8udXRpbC5jbG9uZShvW2tleV0sIHZpc2l0ZWQpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiBjbG9uZTtcblxuXHRcdFx0XHRjYXNlICdBcnJheSc6XG5cdFx0XHRcdFx0aWYgKHZpc2l0ZWRbXy51dGlsLm9iaklkKG8pXSkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHZpc2l0ZWRbXy51dGlsLm9iaklkKG8pXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0dmFyIGNsb25lID0gW107XG5cdFx0XHRcdFx0dmlzaXRlZFtfLnV0aWwub2JqSWQobyldID0gY2xvbmU7XG5cblx0XHRcdFx0XHRvLmZvckVhY2goZnVuY3Rpb24gKHYsIGkpIHtcblx0XHRcdFx0XHRcdGNsb25lW2ldID0gXy51dGlsLmNsb25lKHYsIHZpc2l0ZWQpO1xuXHRcdFx0XHRcdH0pO1xuXG5cdFx0XHRcdFx0cmV0dXJuIGNsb25lO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbztcblx0XHR9LFxuICAgIH0sXG5cbiAgICBsYW5ndWFnZXM6IHtcbiAgICAgIGV4dGVuZDogZnVuY3Rpb24gZXh0ZW5kIChpZCwgcmVkZWYpIHtcblx0XHRcdHZhciBsYW5nID0gXy51dGlsLmNsb25lKF8ubGFuZ3VhZ2VzW2lkXSk7XG5cblx0XHRcdGZvciAodmFyIGtleSBpbiByZWRlZikge1xuXHRcdFx0XHRsYW5nW2tleV0gPSByZWRlZltrZXldO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbGFuZztcblx0XHR9LFxuXG4gICAgICAvKipcblx0XHQgKiBJbnNlcnQgYSB0b2tlbiBiZWZvcmUgYW5vdGhlciB0b2tlbiBpbiBhIGxhbmd1YWdlIGxpdGVyYWxcblx0XHQgKiBBcyB0aGlzIG5lZWRzIHRvIHJlY3JlYXRlIHRoZSBvYmplY3QgKHdlIGNhbm5vdCBhY3R1YWxseSBpbnNlcnQgYmVmb3JlIGtleXMgaW4gb2JqZWN0IGxpdGVyYWxzKSxcblx0XHQgKiB3ZSBjYW5ub3QganVzdCBwcm92aWRlIGFuIG9iamVjdCwgd2UgbmVlZCBhbm9iamVjdCBhbmQgYSBrZXkuXG5cdFx0ICogQHBhcmFtIGluc2lkZSBUaGUga2V5IChvciBsYW5ndWFnZSBpZCkgb2YgdGhlIHBhcmVudFxuXHRcdCAqIEBwYXJhbSBiZWZvcmUgVGhlIGtleSB0byBpbnNlcnQgYmVmb3JlLiBJZiBub3QgcHJvdmlkZWQsIHRoZSBmdW5jdGlvbiBhcHBlbmRzIGluc3RlYWQuXG5cdFx0ICogQHBhcmFtIGluc2VydCBPYmplY3Qgd2l0aCB0aGUga2V5L3ZhbHVlIHBhaXJzIHRvIGluc2VydFxuXHRcdCAqIEBwYXJhbSByb290IFRoZSBvYmplY3QgdGhhdCBjb250YWlucyBgaW5zaWRlYC4gSWYgZXF1YWwgdG8gUHJpc20ubGFuZ3VhZ2VzLCBpdCBjYW4gYmUgb21pdHRlZC5cblx0XHQgKi9cbiAgICAgIGluc2VydEJlZm9yZTogZnVuY3Rpb24gaW5zZXJ0QmVmb3JlIChpbnNpZGUsIGJlZm9yZSwgaW5zZXJ0LCByb290KSB7XG5cdFx0XHRyb290ID0gcm9vdCB8fCBfLmxhbmd1YWdlcztcblx0XHRcdHZhciBncmFtbWFyID0gcm9vdFtpbnNpZGVdO1xuXG5cdFx0XHRpZiAoYXJndW1lbnRzLmxlbmd0aCA9PSAyKSB7XG5cdFx0XHRcdGluc2VydCA9IGFyZ3VtZW50c1sxXTtcblxuXHRcdFx0XHRmb3IgKHZhciBuZXdUb2tlbiBpbiBpbnNlcnQpIHtcblx0XHRcdFx0XHRpZiAoaW5zZXJ0Lmhhc093blByb3BlcnR5KG5ld1Rva2VuKSkge1xuXHRcdFx0XHRcdFx0Z3JhbW1hcltuZXdUb2tlbl0gPSBpbnNlcnRbbmV3VG9rZW5dO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBncmFtbWFyO1xuXHRcdFx0fVxuXG5cdFx0XHR2YXIgcmV0ID0ge307XG5cblx0XHRcdGZvciAodmFyIHRva2VuIGluIGdyYW1tYXIpIHtcblxuXHRcdFx0XHRpZiAoZ3JhbW1hci5oYXNPd25Qcm9wZXJ0eSh0b2tlbikpIHtcblxuXHRcdFx0XHRcdGlmICh0b2tlbiA9PSBiZWZvcmUpIHtcblxuXHRcdFx0XHRcdFx0Zm9yICh2YXIgbmV3VG9rZW4gaW4gaW5zZXJ0KSB7XG5cblx0XHRcdFx0XHRcdFx0aWYgKGluc2VydC5oYXNPd25Qcm9wZXJ0eShuZXdUb2tlbikpIHtcblx0XHRcdFx0XHRcdFx0XHRyZXRbbmV3VG9rZW5dID0gaW5zZXJ0W25ld1Rva2VuXTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldFt0b2tlbl0gPSBncmFtbWFyW3Rva2VuXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBVcGRhdGUgcmVmZXJlbmNlcyBpbiBvdGhlciBsYW5ndWFnZSBkZWZpbml0aW9uc1xuXHRcdFx0Xy5sYW5ndWFnZXMuREZTKF8ubGFuZ3VhZ2VzLCBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG5cdFx0XHRcdGlmICh2YWx1ZSA9PT0gcm9vdFtpbnNpZGVdICYmIGtleSAhPSBpbnNpZGUpIHtcblx0XHRcdFx0XHR0aGlzW2tleV0gPSByZXQ7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0XHRyZXR1cm4gcm9vdFtpbnNpZGVdID0gcmV0O1xuXHRcdH0sXG5cbiAgICAgIC8vIFRyYXZlcnNlIGEgbGFuZ3VhZ2UgZGVmaW5pdGlvbiB3aXRoIERlcHRoIEZpcnN0IFNlYXJjaFxuICAgICAgREZTOiBmdW5jdGlvbiBERlMobywgY2FsbGJhY2ssIHR5cGUsIHZpc2l0ZWQpIHtcblx0XHRcdHZpc2l0ZWQgPSB2aXNpdGVkIHx8IHt9O1xuXHRcdFx0Zm9yICh2YXIgaSBpbiBvKSB7XG5cdFx0XHRcdGlmIChvLmhhc093blByb3BlcnR5KGkpKSB7XG5cdFx0XHRcdFx0Y2FsbGJhY2suY2FsbChvLCBpLCBvW2ldLCB0eXBlIHx8IGkpO1xuXG5cdFx0XHRcdFx0aWYgKF8udXRpbC50eXBlKG9baV0pID09PSAnT2JqZWN0JyAmJiAhdmlzaXRlZFtfLnV0aWwub2JqSWQob1tpXSldKSB7XG5cdFx0XHRcdFx0XHR2aXNpdGVkW18udXRpbC5vYmpJZChvW2ldKV0gPSB0cnVlO1xuXHRcdFx0XHRcdFx0Xy5sYW5ndWFnZXMuREZTKG9baV0sIGNhbGxiYWNrLCBudWxsLCB2aXNpdGVkKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZWxzZSBpZiAoXy51dGlsLnR5cGUob1tpXSkgPT09ICdBcnJheScgJiYgIXZpc2l0ZWRbXy51dGlsLm9iaklkKG9baV0pXSkge1xuXHRcdFx0XHRcdFx0dmlzaXRlZFtfLnV0aWwub2JqSWQob1tpXSldID0gdHJ1ZTtcblx0XHRcdFx0XHRcdF8ubGFuZ3VhZ2VzLkRGUyhvW2ldLCBjYWxsYmFjaywgaSwgdmlzaXRlZCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcbiAgICB9LFxuICAgIHBsdWdpbnM6IHt9LFxuXG4gICAgaGlnaGxpZ2h0QWxsOiBmdW5jdGlvbiBoaWdobGlnaHRBbGwoYXN5bmMsIGNhbGxiYWNrKSB7XG5cdFx0Xy5oaWdobGlnaHRBbGxVbmRlcihkb2N1bWVudCwgYXN5bmMsIGNhbGxiYWNrKTtcblx0fSxcblxuICAgIGhpZ2hsaWdodEFsbFVuZGVyOiBmdW5jdGlvbiBoaWdobGlnaHRBbGxVbmRlcihjb250YWluZXIsIGFzeW5jLCBjYWxsYmFjaykge1xuXHRcdHZhciBlbnYgPSB7XG5cdFx0XHRjYWxsYmFjazogY2FsbGJhY2ssXG5cdFx0XHRzZWxlY3RvcjogJ2NvZGVbY2xhc3MqPVwibGFuZ3VhZ2UtXCJdLCBbY2xhc3MqPVwibGFuZ3VhZ2UtXCJdIGNvZGUsIGNvZGVbY2xhc3MqPVwibGFuZy1cIl0sIFtjbGFzcyo9XCJsYW5nLVwiXSBjb2RlJ1xuXHRcdH07XG5cblx0XHRfLmhvb2tzLnJ1bihcImJlZm9yZS1oaWdobGlnaHRhbGxcIiwgZW52KTtcblxuXHRcdHZhciBlbGVtZW50cyA9IGVudi5lbGVtZW50cyB8fCBjb250YWluZXIucXVlcnlTZWxlY3RvckFsbChlbnYuc2VsZWN0b3IpO1xuXG5cdFx0Zm9yICh2YXIgaT0wLCBlbGVtZW50OyBlbGVtZW50ID0gZWxlbWVudHNbaSsrXTspIHtcblx0XHRcdF8uaGlnaGxpZ2h0RWxlbWVudChlbGVtZW50LCBhc3luYyA9PT0gdHJ1ZSwgZW52LmNhbGxiYWNrKTtcblx0XHR9XG5cdH0sXG5cbiAgICBoaWdobGlnaHRFbGVtZW50OiBmdW5jdGlvbiBoaWdobGlnaHRFbGVtZW50KGVsZW1lbnQsIGFzeW5jLCBjYWxsYmFjaykge1xuXHRcdC8vIEZpbmQgbGFuZ3VhZ2Vcblx0XHR2YXIgbGFuZ3VhZ2UsIGdyYW1tYXIsIHBhcmVudCA9IGVsZW1lbnQ7XG5cblx0XHR3aGlsZSAocGFyZW50ICYmICFsYW5nLnRlc3QocGFyZW50LmNsYXNzTmFtZSkpIHtcblx0XHRcdHBhcmVudCA9IHBhcmVudC5wYXJlbnROb2RlO1xuXHRcdH1cblxuXHRcdGlmIChwYXJlbnQpIHtcblx0XHRcdGxhbmd1YWdlID0gKHBhcmVudC5jbGFzc05hbWUubWF0Y2gobGFuZykgfHwgWywnJ10pWzFdLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRncmFtbWFyID0gXy5sYW5ndWFnZXNbbGFuZ3VhZ2VdO1xuXHRcdH1cblxuXHRcdC8vIFNldCBsYW5ndWFnZSBvbiB0aGUgZWxlbWVudCwgaWYgbm90IHByZXNlbnRcblx0XHRlbGVtZW50LmNsYXNzTmFtZSA9IGVsZW1lbnQuY2xhc3NOYW1lLnJlcGxhY2UobGFuZywgJycpLnJlcGxhY2UoL1xccysvZywgJyAnKSArICcgbGFuZ3VhZ2UtJyArIGxhbmd1YWdlO1xuXG5cdFx0aWYgKGVsZW1lbnQucGFyZW50Tm9kZSkge1xuXHRcdFx0Ly8gU2V0IGxhbmd1YWdlIG9uIHRoZSBwYXJlbnQsIGZvciBzdHlsaW5nXG5cdFx0XHRwYXJlbnQgPSBlbGVtZW50LnBhcmVudE5vZGU7XG5cblx0XHRcdGlmICgvcHJlL2kudGVzdChwYXJlbnQubm9kZU5hbWUpKSB7XG5cdFx0XHRcdHBhcmVudC5jbGFzc05hbWUgPSBwYXJlbnQuY2xhc3NOYW1lLnJlcGxhY2UobGFuZywgJycpLnJlcGxhY2UoL1xccysvZywgJyAnKSArICcgbGFuZ3VhZ2UtJyArIGxhbmd1YWdlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHZhciBjb2RlID0gZWxlbWVudC50ZXh0Q29udGVudDtcblxuXHRcdHZhciBlbnYgPSB7XG5cdFx0XHRlbGVtZW50OiBlbGVtZW50LFxuXHRcdFx0bGFuZ3VhZ2U6IGxhbmd1YWdlLFxuXHRcdFx0Z3JhbW1hcjogZ3JhbW1hcixcblx0XHRcdGNvZGU6IGNvZGVcblx0XHR9O1xuXG5cdFx0Xy5ob29rcy5ydW4oJ2JlZm9yZS1zYW5pdHktY2hlY2snLCBlbnYpO1xuXG5cdFx0aWYgKCFlbnYuY29kZSB8fCAhZW52LmdyYW1tYXIpIHtcblx0XHRcdGlmIChlbnYuY29kZSkge1xuXHRcdFx0XHRfLmhvb2tzLnJ1bignYmVmb3JlLWhpZ2hsaWdodCcsIGVudik7XG5cdFx0XHRcdGVudi5lbGVtZW50LnRleHRDb250ZW50ID0gZW52LmNvZGU7XG5cdFx0XHRcdF8uaG9va3MucnVuKCdhZnRlci1oaWdobGlnaHQnLCBlbnYpO1xuXHRcdFx0fVxuXHRcdFx0Xy5ob29rcy5ydW4oJ2NvbXBsZXRlJywgZW52KTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRfLmhvb2tzLnJ1bignYmVmb3JlLWhpZ2hsaWdodCcsIGVudik7XG5cblx0XHRpZiAoYXN5bmMgJiYgX3NlbGYuV29ya2VyKSB7XG5cdFx0XHR2YXIgd29ya2VyID0gbmV3IFdvcmtlcihfLmZpbGVuYW1lKTtcblxuXHRcdFx0d29ya2VyLm9ubWVzc2FnZSA9IGZ1bmN0aW9uKGV2dCkge1xuXHRcdFx0XHRlbnYuaGlnaGxpZ2h0ZWRDb2RlID0gZXZ0LmRhdGE7XG5cblx0XHRcdFx0Xy5ob29rcy5ydW4oJ2JlZm9yZS1pbnNlcnQnLCBlbnYpO1xuXG5cdFx0XHRcdGVudi5lbGVtZW50LmlubmVySFRNTCA9IGVudi5oaWdobGlnaHRlZENvZGU7XG5cblx0XHRcdFx0Y2FsbGJhY2sgJiYgY2FsbGJhY2suY2FsbChlbnYuZWxlbWVudCk7XG5cdFx0XHRcdF8uaG9va3MucnVuKCdhZnRlci1oaWdobGlnaHQnLCBlbnYpO1xuXHRcdFx0XHRfLmhvb2tzLnJ1bignY29tcGxldGUnLCBlbnYpO1xuXHRcdFx0fTtcblxuXHRcdFx0d29ya2VyLnBvc3RNZXNzYWdlKEpTT04uc3RyaW5naWZ5KHtcblx0XHRcdFx0bGFuZ3VhZ2U6IGVudi5sYW5ndWFnZSxcblx0XHRcdFx0Y29kZTogZW52LmNvZGUsXG5cdFx0XHRcdGltbWVkaWF0ZUNsb3NlOiB0cnVlXG5cdFx0XHR9KSk7XG5cdFx0fVxuXHRcdGVsc2Uge1xuXHRcdFx0ZW52LmhpZ2hsaWdodGVkQ29kZSA9IF8uaGlnaGxpZ2h0KGVudi5jb2RlLCBlbnYuZ3JhbW1hciwgZW52Lmxhbmd1YWdlKTtcblxuXHRcdFx0Xy5ob29rcy5ydW4oJ2JlZm9yZS1pbnNlcnQnLCBlbnYpO1xuXG5cdFx0XHRlbnYuZWxlbWVudC5pbm5lckhUTUwgPSBlbnYuaGlnaGxpZ2h0ZWRDb2RlO1xuXG5cdFx0XHRjYWxsYmFjayAmJiBjYWxsYmFjay5jYWxsKGVsZW1lbnQpO1xuXG5cdFx0XHRfLmhvb2tzLnJ1bignYWZ0ZXItaGlnaGxpZ2h0JywgZW52KTtcblx0XHRcdF8uaG9va3MucnVuKCdjb21wbGV0ZScsIGVudik7XG5cdFx0fVxuXHR9LFxuXG4gICAgaGlnaGxpZ2h0OiBmdW5jdGlvbiBoaWdobGlnaHQgKHRleHQsIGdyYW1tYXIsIGxhbmd1YWdlKSB7XG5cdFx0dmFyIGVudiA9IHtcblx0XHRcdGNvZGU6IHRleHQsXG5cdFx0XHRncmFtbWFyOiBncmFtbWFyLFxuXHRcdFx0bGFuZ3VhZ2U6IGxhbmd1YWdlXG5cdFx0fTtcblx0XHRfLmhvb2tzLnJ1bignYmVmb3JlLXRva2VuaXplJywgZW52KTtcblx0XHRlbnYudG9rZW5zID0gXy50b2tlbml6ZShlbnYuY29kZSwgZW52LmdyYW1tYXIpO1xuXHRcdF8uaG9va3MucnVuKCdhZnRlci10b2tlbml6ZScsIGVudik7XG5cdFx0cmV0dXJuIFRva2VuLnN0cmluZ2lmeShfLnV0aWwuZW5jb2RlKGVudi50b2tlbnMpLCBlbnYubGFuZ3VhZ2UpO1xuXHR9LFxuXG4gICAgbWF0Y2hHcmFtbWFyOiBmdW5jdGlvbiBtYXRjaEdyYW1tYXIgKHRleHQsIHN0cmFyciwgZ3JhbW1hciwgaW5kZXgsIHN0YXJ0UG9zLCBvbmVzaG90LCB0YXJnZXQpIHtcblx0XHR2YXIgVG9rZW4gPSBfLlRva2VuO1xuXG5cdFx0Zm9yICh2YXIgdG9rZW4gaW4gZ3JhbW1hcikge1xuXHRcdFx0aWYoIWdyYW1tYXIuaGFzT3duUHJvcGVydHkodG9rZW4pIHx8ICFncmFtbWFyW3Rva2VuXSkge1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKHRva2VuID09IHRhcmdldCkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdHZhciBwYXR0ZXJucyA9IGdyYW1tYXJbdG9rZW5dO1xuXHRcdFx0cGF0dGVybnMgPSAoXy51dGlsLnR5cGUocGF0dGVybnMpID09PSBcIkFycmF5XCIpID8gcGF0dGVybnMgOiBbcGF0dGVybnNdO1xuXG5cdFx0XHRmb3IgKHZhciBqID0gMDsgaiA8IHBhdHRlcm5zLmxlbmd0aDsgKytqKSB7XG5cdFx0XHRcdHZhciBwYXR0ZXJuID0gcGF0dGVybnNbal0sXG5cdFx0XHRcdFx0aW5zaWRlID0gcGF0dGVybi5pbnNpZGUsXG5cdFx0XHRcdFx0bG9va2JlaGluZCA9ICEhcGF0dGVybi5sb29rYmVoaW5kLFxuXHRcdFx0XHRcdGdyZWVkeSA9ICEhcGF0dGVybi5ncmVlZHksXG5cdFx0XHRcdFx0bG9va2JlaGluZExlbmd0aCA9IDAsXG5cdFx0XHRcdFx0YWxpYXMgPSBwYXR0ZXJuLmFsaWFzO1xuXG5cdFx0XHRcdGlmIChncmVlZHkgJiYgIXBhdHRlcm4ucGF0dGVybi5nbG9iYWwpIHtcblx0XHRcdFx0XHQvLyBXaXRob3V0IHRoZSBnbG9iYWwgZmxhZywgbGFzdEluZGV4IHdvbid0IHdvcmtcblx0XHRcdFx0XHR2YXIgZmxhZ3MgPSBwYXR0ZXJuLnBhdHRlcm4udG9TdHJpbmcoKS5tYXRjaCgvW2ltdXldKiQvKVswXTtcblx0XHRcdFx0XHRwYXR0ZXJuLnBhdHRlcm4gPSBSZWdFeHAocGF0dGVybi5wYXR0ZXJuLnNvdXJjZSwgZmxhZ3MgKyBcImdcIik7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRwYXR0ZXJuID0gcGF0dGVybi5wYXR0ZXJuIHx8IHBhdHRlcm47XG5cblx0XHRcdFx0Ly8gRG9u4oCZdCBjYWNoZSBsZW5ndGggYXMgaXQgY2hhbmdlcyBkdXJpbmcgdGhlIGxvb3Bcblx0XHRcdFx0Zm9yICh2YXIgaSA9IGluZGV4LCBwb3MgPSBzdGFydFBvczsgaSA8IHN0cmFyci5sZW5ndGg7IHBvcyArPSBzdHJhcnJbaV0ubGVuZ3RoLCArK2kpIHtcblxuXHRcdFx0XHRcdHZhciBzdHIgPSBzdHJhcnJbaV07XG5cblx0XHRcdFx0XHRpZiAoc3RyYXJyLmxlbmd0aCA+IHRleHQubGVuZ3RoKSB7XG5cdFx0XHRcdFx0XHQvLyBTb21ldGhpbmcgd2VudCB0ZXJyaWJseSB3cm9uZywgQUJPUlQsIEFCT1JUIVxuXHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmIChzdHIgaW5zdGFuY2VvZiBUb2tlbikge1xuXHRcdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYgKGdyZWVkeSAmJiBpICE9IHN0cmFyci5sZW5ndGggLSAxKSB7XG5cdFx0XHRcdFx0XHRwYXR0ZXJuLmxhc3RJbmRleCA9IHBvcztcblx0XHRcdFx0XHRcdHZhciBtYXRjaCA9IHBhdHRlcm4uZXhlYyh0ZXh0KTtcblx0XHRcdFx0XHRcdGlmICghbWF0Y2gpIHtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdHZhciBmcm9tID0gbWF0Y2guaW5kZXggKyAobG9va2JlaGluZCA/IG1hdGNoWzFdLmxlbmd0aCA6IDApLFxuXHRcdFx0XHRcdFx0ICAgIHRvID0gbWF0Y2guaW5kZXggKyBtYXRjaFswXS5sZW5ndGgsXG5cdFx0XHRcdFx0XHQgICAgayA9IGksXG5cdFx0XHRcdFx0XHQgICAgcCA9IHBvcztcblxuXHRcdFx0XHRcdFx0Zm9yICh2YXIgbGVuID0gc3RyYXJyLmxlbmd0aDsgayA8IGxlbiAmJiAocCA8IHRvIHx8ICghc3RyYXJyW2tdLnR5cGUgJiYgIXN0cmFycltrIC0gMV0uZ3JlZWR5KSk7ICsraykge1xuXHRcdFx0XHRcdFx0XHRwICs9IHN0cmFycltrXS5sZW5ndGg7XG5cdFx0XHRcdFx0XHRcdC8vIE1vdmUgdGhlIGluZGV4IGkgdG8gdGhlIGVsZW1lbnQgaW4gc3RyYXJyIHRoYXQgaXMgY2xvc2VzdCB0byBmcm9tXG5cdFx0XHRcdFx0XHRcdGlmIChmcm9tID49IHApIHtcblx0XHRcdFx0XHRcdFx0XHQrK2k7XG5cdFx0XHRcdFx0XHRcdFx0cG9zID0gcDtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBJZiBzdHJhcnJbaV0gaXMgYSBUb2tlbiwgdGhlbiB0aGUgbWF0Y2ggc3RhcnRzIGluc2lkZSBhbm90aGVyIFRva2VuLCB3aGljaCBpcyBpbnZhbGlkXG5cdFx0XHRcdFx0XHRpZiAoc3RyYXJyW2ldIGluc3RhbmNlb2YgVG9rZW4pIHtcblx0XHRcdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIE51bWJlciBvZiB0b2tlbnMgdG8gZGVsZXRlIGFuZCByZXBsYWNlIHdpdGggdGhlIG5ldyBtYXRjaFxuXHRcdFx0XHRcdFx0ZGVsTnVtID0gayAtIGk7XG5cdFx0XHRcdFx0XHRzdHIgPSB0ZXh0LnNsaWNlKHBvcywgcCk7XG5cdFx0XHRcdFx0XHRtYXRjaC5pbmRleCAtPSBwb3M7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHBhdHRlcm4ubGFzdEluZGV4ID0gMDtcblxuXHRcdFx0XHRcdFx0dmFyIG1hdGNoID0gcGF0dGVybi5leGVjKHN0ciksXG5cdFx0XHRcdFx0XHRcdGRlbE51bSA9IDE7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYgKCFtYXRjaCkge1xuXHRcdFx0XHRcdFx0aWYgKG9uZXNob3QpIHtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmKGxvb2tiZWhpbmQpIHtcblx0XHRcdFx0XHRcdGxvb2tiZWhpbmRMZW5ndGggPSBtYXRjaFsxXSA/IG1hdGNoWzFdLmxlbmd0aCA6IDA7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0dmFyIGZyb20gPSBtYXRjaC5pbmRleCArIGxvb2tiZWhpbmRMZW5ndGgsXG5cdFx0XHRcdFx0ICAgIG1hdGNoID0gbWF0Y2hbMF0uc2xpY2UobG9va2JlaGluZExlbmd0aCksXG5cdFx0XHRcdFx0ICAgIHRvID0gZnJvbSArIG1hdGNoLmxlbmd0aCxcblx0XHRcdFx0XHQgICAgYmVmb3JlID0gc3RyLnNsaWNlKDAsIGZyb20pLFxuXHRcdFx0XHRcdCAgICBhZnRlciA9IHN0ci5zbGljZSh0byk7XG5cblx0XHRcdFx0XHR2YXIgYXJncyA9IFtpLCBkZWxOdW1dO1xuXG5cdFx0XHRcdFx0aWYgKGJlZm9yZSkge1xuXHRcdFx0XHRcdFx0KytpO1xuXHRcdFx0XHRcdFx0cG9zICs9IGJlZm9yZS5sZW5ndGg7XG5cdFx0XHRcdFx0XHRhcmdzLnB1c2goYmVmb3JlKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR2YXIgd3JhcHBlZCA9IG5ldyBUb2tlbih0b2tlbiwgaW5zaWRlPyBfLnRva2VuaXplKG1hdGNoLCBpbnNpZGUpIDogbWF0Y2gsIGFsaWFzLCBtYXRjaCwgZ3JlZWR5KTtcblxuXHRcdFx0XHRcdGFyZ3MucHVzaCh3cmFwcGVkKTtcblxuXHRcdFx0XHRcdGlmIChhZnRlcikge1xuXHRcdFx0XHRcdFx0YXJncy5wdXNoKGFmdGVyKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRBcnJheS5wcm90b3R5cGUuc3BsaWNlLmFwcGx5KHN0cmFyciwgYXJncyk7XG5cblx0XHRcdFx0XHRpZiAoZGVsTnVtICE9IDEpXG5cdFx0XHRcdFx0XHR7IF8ubWF0Y2hHcmFtbWFyKHRleHQsIHN0cmFyciwgZ3JhbW1hciwgaSwgcG9zLCB0cnVlLCB0b2tlbik7IH1cblxuXHRcdFx0XHRcdGlmIChvbmVzaG90KVxuXHRcdFx0XHRcdFx0eyBicmVhazsgfVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG4gICAgdG9rZW5pemU6IGZ1bmN0aW9uIHRva2VuaXplKHRleHQsIGdyYW1tYXIsIGxhbmd1YWdlKSB7XG5cdFx0dmFyIHN0cmFyciA9IFt0ZXh0XTtcblxuXHRcdHZhciByZXN0ID0gZ3JhbW1hci5yZXN0O1xuXG5cdFx0aWYgKHJlc3QpIHtcblx0XHRcdGZvciAodmFyIHRva2VuIGluIHJlc3QpIHtcblx0XHRcdFx0Z3JhbW1hclt0b2tlbl0gPSByZXN0W3Rva2VuXTtcblx0XHRcdH1cblxuXHRcdFx0ZGVsZXRlIGdyYW1tYXIucmVzdDtcblx0XHR9XG5cblx0XHRfLm1hdGNoR3JhbW1hcih0ZXh0LCBzdHJhcnIsIGdyYW1tYXIsIDAsIDAsIGZhbHNlKTtcblxuXHRcdHJldHVybiBzdHJhcnI7XG5cdH0sXG5cbiAgICBob29rczoge1xuICAgICAgYWxsOiB7fSxcblxuICAgICAgYWRkOiBmdW5jdGlvbiBhZGQgKG5hbWUsIGNhbGxiYWNrKSB7XG5cdFx0XHR2YXIgaG9va3MgPSBfLmhvb2tzLmFsbDtcblxuXHRcdFx0aG9va3NbbmFtZV0gPSBob29rc1tuYW1lXSB8fCBbXTtcblxuXHRcdFx0aG9va3NbbmFtZV0ucHVzaChjYWxsYmFjayk7XG5cdFx0fSxcblxuICAgICAgcnVuOiBmdW5jdGlvbiBydW4gKG5hbWUsIGVudikge1xuXHRcdFx0dmFyIGNhbGxiYWNrcyA9IF8uaG9va3MuYWxsW25hbWVdO1xuXG5cdFx0XHRpZiAoIWNhbGxiYWNrcyB8fCAhY2FsbGJhY2tzLmxlbmd0aCkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGZvciAodmFyIGk9MCwgY2FsbGJhY2s7IGNhbGxiYWNrID0gY2FsbGJhY2tzW2krK107KSB7XG5cdFx0XHRcdGNhbGxiYWNrKGVudik7XG5cdFx0XHR9XG5cdFx0fSxcbiAgICB9LFxuICB9O1xuXG4gIHZhciBUb2tlbiA9IF8uVG9rZW4gPSBmdW5jdGlvbiAodHlwZSwgY29udGVudCwgYWxpYXMsIG1hdGNoZWRTdHIsIGdyZWVkeSkge1xuICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgdGhpcy5jb250ZW50ID0gY29udGVudDtcbiAgICB0aGlzLmFsaWFzID0gYWxpYXM7XG4gICAgLy8gQ29weSBvZiB0aGUgZnVsbCBzdHJpbmcgdGhpcyB0b2tlbiB3YXMgY3JlYXRlZCBmcm9tXG4gICAgdGhpcy5sZW5ndGggPSAobWF0Y2hlZFN0ciB8fCAnJykubGVuZ3RoIHwgMDtcbiAgICB0aGlzLmdyZWVkeSA9ICEhZ3JlZWR5O1xuICB9O1xuXG4gIFRva2VuLnN0cmluZ2lmeSA9IGZ1bmN0aW9uIChvLCBsYW5ndWFnZSwgcGFyZW50KSB7XG4gICAgaWYgKHR5cGVvZiBvID09PSAnc3RyaW5nJykge1xuICAgICAgcmV0dXJuIG87XG4gICAgfVxuXG4gICAgaWYgKF8udXRpbC50eXBlKG8pID09PSAnQXJyYXknKSB7XG4gICAgICByZXR1cm4gby5tYXAoZnVuY3Rpb24gKGVsZW1lbnQpIHtcblx0XHRcdHJldHVybiBUb2tlbi5zdHJpbmdpZnkoZWxlbWVudCwgbGFuZ3VhZ2UsIG8pO1xuXHRcdH0pLmpvaW4oJycpO1xuICAgIH1cblxuICAgIHZhciBlbnYgPSB7XG4gICAgICB0eXBlOiBvLnR5cGUsXG4gICAgICBjb250ZW50OiBUb2tlbi5zdHJpbmdpZnkoby5jb250ZW50LCBsYW5ndWFnZSwgcGFyZW50KSxcbiAgICAgIHRhZzogJ3NwYW4nLFxuICAgICAgY2xhc3NlczogWyd0b2tlbicsIG8udHlwZV0sXG4gICAgICBhdHRyaWJ1dGVzOiB7fSxcbiAgICAgIGxhbmd1YWdlOiBsYW5ndWFnZSxcbiAgICAgIHBhcmVudDogcGFyZW50LFxuICAgIH07XG5cbiAgICBpZiAoby5hbGlhcykge1xuICAgICAgdmFyIGFsaWFzZXMgPSBfLnV0aWwudHlwZShvLmFsaWFzKSA9PT0gJ0FycmF5JyA/IG8uYWxpYXMgOiBbby5hbGlhc107XG4gICAgICBBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseShlbnYuY2xhc3NlcywgYWxpYXNlcyk7XG4gICAgfVxuXG4gICAgXy5ob29rcy5ydW4oJ3dyYXAnLCBlbnYpO1xuXG4gICAgdmFyIGF0dHJpYnV0ZXMgPSBPYmplY3Qua2V5cyhlbnYuYXR0cmlidXRlcykubWFwKGZ1bmN0aW9uIChuYW1lKSB7XG5cdFx0cmV0dXJuIG5hbWUgKyAnPVwiJyArIChlbnYuYXR0cmlidXRlc1tuYW1lXSB8fCAnJykucmVwbGFjZSgvXCIvZywgJyZxdW90OycpICsgJ1wiJztcblx0fSkuam9pbignICcpO1xuXG4gICAgcmV0dXJuIChcIjxcIiArIChlbnYudGFnKSArIFwiIGNsYXNzPVxcXCJcIiArIChlbnYuY2xhc3Nlcy5qb2luKCcgJykpICsgXCJcXFwiXCIgKyAoYXR0cmlidXRlcyA/ICcgJyArIGF0dHJpYnV0ZXMgOiAnJykgKyBcIj5cIiArIChlbnYuY29udGVudCkgKyBcIjwvXCIgKyAoZW52LnRhZykgKyBcIj5cIik7XG4gIH07XG5cbiAgaWYgKCFfc2VsZi5kb2N1bWVudCkge1xuICAgIGlmICghX3NlbGYuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgICAgLy8gaW4gTm9kZS5qc1xuICAgICAgcmV0dXJuIF9zZWxmLlByaXNtO1xuICAgIH1cblxuICAgIGlmICghXy5kaXNhYmxlV29ya2VyTWVzc2FnZUhhbmRsZXIpIHtcbiAgICAgIC8vIEluIHdvcmtlclxuICAgICAgX3NlbGYuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIGZ1bmN0aW9uIChldnQpIHtcblx0XHRcdHZhciBtZXNzYWdlID0gSlNPTi5wYXJzZShldnQuZGF0YSksXG5cdFx0XHRcdGxhbmcgPSBtZXNzYWdlLmxhbmd1YWdlLFxuXHRcdFx0XHRjb2RlID0gbWVzc2FnZS5jb2RlLFxuXHRcdFx0XHRpbW1lZGlhdGVDbG9zZSA9IG1lc3NhZ2UuaW1tZWRpYXRlQ2xvc2U7XG5cblx0XHRcdF9zZWxmLnBvc3RNZXNzYWdlKF8uaGlnaGxpZ2h0KGNvZGUsIF8ubGFuZ3VhZ2VzW2xhbmddLCBsYW5nKSk7XG5cdFx0XHRpZiAoaW1tZWRpYXRlQ2xvc2UpIHtcblx0XHRcdFx0X3NlbGYuY2xvc2UoKTtcblx0XHRcdH1cblx0XHR9LCBmYWxzZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIF9zZWxmLlByaXNtO1xuICB9XG5cbiAgLy8gR2V0IGN1cnJlbnQgc2NyaXB0IGFuZCBoaWdobGlnaHRcbiAgLy8gbGV0IHNjcmlwdCA9IGRvY3VtZW50LmN1cnJlbnRTY3JpcHQgfHwgW10uc2xpY2UuY2FsbChkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnc2NyaXB0JykpLnBvcCgpO1xuXG4gIC8vIGlmIChzY3JpcHQpIHtcbiAgLy8gICBfLmZpbGVuYW1lID0gc2NyaXB0LnNyYztcblxuICAvLyAgIGlmICghXy5tYW51YWwgJiYgIXNjcmlwdC5oYXNBdHRyaWJ1dGUoJ2RhdGEtbWFudWFsJykpIHtcbiAgLy8gICAgIGlmIChkb2N1bWVudC5yZWFkeVN0YXRlICE9PSAnbG9hZGluZycpIHtcbiAgLy8gICAgICAgaWYgKHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUpIHtcbiAgLy8gICAgICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKF8uaGlnaGxpZ2h0QWxsKTtcbiAgLy8gICAgICAgfSBlbHNlIHtcbiAgLy8gICAgICAgICB3aW5kb3cuc2V0VGltZW91dChfLmhpZ2hsaWdodEFsbCwgMTYpO1xuICAvLyAgICAgICB9XG4gIC8vICAgICB9IGVsc2Uge1xuICAvLyAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgXy5oaWdobGlnaHRBbGwpO1xuICAvLyAgICAgfVxuICAvLyAgIH1cbiAgLy8gfVxuXG4gIHJldHVybiBfc2VsZi5QcmlzbTtcbn0oKSk7XG5cbmlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykge1xuICBtb2R1bGUuZXhwb3J0cyA9IFByaXNtO1xufVxuXG4vLyBoYWNrIGZvciBjb21wb25lbnRzIHRvIHdvcmsgY29ycmVjdGx5IGluIG5vZGUuanNcbmlmICh0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJykge1xuICBnbG9iYWwuUHJpc20gPSBQcmlzbTtcbn1cblxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gICAgIEJlZ2luIHByaXNtLW1hcmt1cC5qc1xuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG5QcmlzbS5sYW5ndWFnZXMubWFya3VwID0ge1xuICBjb21tZW50OiAvPCEtLVtcXHNcXFNdKj8tLT4vLFxuICBwcm9sb2c6IC88XFw/W1xcc1xcU10rP1xcPz4vLFxuICBkb2N0eXBlOiAvPCFET0NUWVBFW1xcc1xcU10rPz4vaSxcbiAgY2RhdGE6IC88IVxcW0NEQVRBXFxbW1xcc1xcU10qP11dPi9pLFxuICB0YWc6IHtcbiAgICBwYXR0ZXJuOiAvPFxcLz8oPyFcXGQpW15cXHM+XFwvPSQ8JV0rKD86XFxzK1teXFxzPlxcLz1dKyg/Oj0oPzooXCJ8JykoPzpcXFxcW1xcc1xcU118KD8hXFwxKVteXFxcXF0pKlxcMXxbXlxccydcIj49XSspKT8pKlxccypcXC8/Pi9pLFxuICAgIGdyZWVkeTogdHJ1ZSxcbiAgICBpbnNpZGU6IHtcbiAgICAgIHRhZzoge1xuICAgICAgICBwYXR0ZXJuOiAvXjxcXC8/W15cXHM+XFwvXSsvaSxcbiAgICAgICAgaW5zaWRlOiB7XG4gICAgICAgICAgcHVuY3R1YXRpb246IC9ePFxcLz8vLFxuICAgICAgICAgIG5hbWVzcGFjZTogL15bXlxccz5cXC86XSs6LyxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgICAnYXR0ci12YWx1ZSc6IHtcbiAgICAgICAgcGF0dGVybjogLz0oPzooXCJ8JykoPzpcXFxcW1xcc1xcU118KD8hXFwxKVteXFxcXF0pKlxcMXxbXlxccydcIj49XSspL2ksXG4gICAgICAgIGluc2lkZToge1xuICAgICAgICAgIHB1bmN0dWF0aW9uOiBbXG4gICAgICAgICAgICAvXj0vLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBwYXR0ZXJuOiAvKF58W15cXFxcXSlbXCInXS8sXG4gICAgICAgICAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICAgICAgICB9IF0sXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgICAgcHVuY3R1YXRpb246IC9cXC8/Pi8sXG4gICAgICAnYXR0ci1uYW1lJzoge1xuICAgICAgICBwYXR0ZXJuOiAvW15cXHM+XFwvXSsvLFxuICAgICAgICBpbnNpZGU6IHtcbiAgICAgICAgICBuYW1lc3BhY2U6IC9eW15cXHM+XFwvOl0rOi8sXG4gICAgICAgIH0sXG4gICAgICB9LFxuXG4gICAgfSxcbiAgfSxcbiAgZW50aXR5OiAvJiM/W1xcZGEtel17MSw4fTsvaSxcbn07XG5cblByaXNtLmxhbmd1YWdlcy5tYXJrdXAudGFnLmluc2lkZVsnYXR0ci12YWx1ZSddLmluc2lkZS5lbnRpdHkgPVx0UHJpc20ubGFuZ3VhZ2VzLm1hcmt1cC5lbnRpdHk7XG5cbi8vIFBsdWdpbiB0byBtYWtlIGVudGl0eSB0aXRsZSBzaG93IHRoZSByZWFsIGVudGl0eSwgaWRlYSBieSBSb21hbiBLb21hcm92XG5QcmlzbS5ob29rcy5hZGQoJ3dyYXAnLCBmdW5jdGlvbiAoZW52KSB7XG5cblx0aWYgKGVudi50eXBlID09PSAnZW50aXR5Jykge1xuXHRcdGVudi5hdHRyaWJ1dGVzWyd0aXRsZSddID0gZW52LmNvbnRlbnQucmVwbGFjZSgvJmFtcDsvLCAnJicpO1xuXHR9XG59KTtcblxuUHJpc20ubGFuZ3VhZ2VzLnhtbCA9IFByaXNtLmxhbmd1YWdlcy5tYXJrdXA7XG5QcmlzbS5sYW5ndWFnZXMuaHRtbCA9IFByaXNtLmxhbmd1YWdlcy5tYXJrdXA7XG5QcmlzbS5sYW5ndWFnZXMubWF0aG1sID0gUHJpc20ubGFuZ3VhZ2VzLm1hcmt1cDtcblByaXNtLmxhbmd1YWdlcy5zdmcgPSBQcmlzbS5sYW5ndWFnZXMubWFya3VwO1xuXG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAgICAgQmVnaW4gcHJpc20tY3NzLmpzXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cblByaXNtLmxhbmd1YWdlcy5jc3MgPSB7XG4gIGNvbW1lbnQ6IC9cXC9cXCpbXFxzXFxTXSo/XFwqXFwvLyxcbiAgYXRydWxlOiB7XG4gICAgcGF0dGVybjogL0BbXFx3LV0rPy4qPyg/Ojt8KD89XFxzKlxceykpL2ksXG4gICAgaW5zaWRlOiB7XG4gICAgICBydWxlOiAvQFtcXHctXSsvLFxuICAgICAgLy8gU2VlIHJlc3QgYmVsb3dcbiAgICB9LFxuICB9LFxuICB1cmw6IC91cmxcXCgoPzooW1wiJ10pKD86XFxcXCg/OlxcclxcbnxbXFxzXFxTXSl8KD8hXFwxKVteXFxcXFxcclxcbl0pKlxcMXwuKj8pXFwpL2ksXG4gIHNlbGVjdG9yOiAvW157fVxcc11bXnt9O10qPyg/PVxccypcXHspLyxcbiAgc3RyaW5nOiB7XG4gICAgcGF0dGVybjogLyhcInwnKSg/OlxcXFwoPzpcXHJcXG58W1xcc1xcU10pfCg/IVxcMSlbXlxcXFxcXHJcXG5dKSpcXDEvLFxuICAgIGdyZWVkeTogdHJ1ZSxcbiAgfSxcbiAgcHJvcGVydHk6IC9bLV9hLXpcXHhBMC1cXHVGRkZGXVstXFx3XFx4QTAtXFx1RkZGRl0qKD89XFxzKjopL2ksXG4gIGltcG9ydGFudDogL1xcQiFpbXBvcnRhbnRcXGIvaSxcbiAgZnVuY3Rpb246IC9bLWEtejAtOV0rKD89XFwoKS9pLFxuICBwdW5jdHVhdGlvbjogL1soKXt9OzpdLyxcbn07XG5cblByaXNtLmxhbmd1YWdlcy5jc3MuYXRydWxlLmluc2lkZS5yZXN0ID0gUHJpc20ubGFuZ3VhZ2VzLmNzcztcblxuaWYgKFByaXNtLmxhbmd1YWdlcy5tYXJrdXApIHtcbiAgUHJpc20ubGFuZ3VhZ2VzLmluc2VydEJlZm9yZSgnbWFya3VwJywgJ3RhZycsIHtcbiAgICBzdHlsZToge1xuICAgICAgcGF0dGVybjogLyg8c3R5bGVbXFxzXFxTXSo/PilbXFxzXFxTXSo/KD89PFxcL3N0eWxlPikvaSxcbiAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICBpbnNpZGU6IFByaXNtLmxhbmd1YWdlcy5jc3MsXG4gICAgICBhbGlhczogJ2xhbmd1YWdlLWNzcycsXG4gICAgICBncmVlZHk6IHRydWUsXG4gICAgfSxcbiAgfSk7XG5cbiAgUHJpc20ubGFuZ3VhZ2VzLmluc2VydEJlZm9yZSgnaW5zaWRlJywgJ2F0dHItdmFsdWUnLCB7XG4gICAgJ3N0eWxlLWF0dHInOiB7XG4gICAgICBwYXR0ZXJuOiAvXFxzKnN0eWxlPShcInwnKSg/OlxcXFxbXFxzXFxTXXwoPyFcXDEpW15cXFxcXSkqXFwxL2ksXG4gICAgICBpbnNpZGU6IHtcbiAgICAgICAgJ2F0dHItbmFtZSc6IHtcbiAgICAgICAgICBwYXR0ZXJuOiAvXlxccypzdHlsZS9pLFxuICAgICAgICAgIGluc2lkZTogUHJpc20ubGFuZ3VhZ2VzLm1hcmt1cC50YWcuaW5zaWRlLFxuICAgICAgICB9LFxuICAgICAgICBwdW5jdHVhdGlvbjogL15cXHMqPVxccypbJ1wiXXxbJ1wiXVxccyokLyxcbiAgICAgICAgJ2F0dHItdmFsdWUnOiB7XG4gICAgICAgICAgcGF0dGVybjogLy4rL2ksXG4gICAgICAgICAgaW5zaWRlOiBQcmlzbS5sYW5ndWFnZXMuY3NzLFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICAgIGFsaWFzOiAnbGFuZ3VhZ2UtY3NzJyxcbiAgICB9LFxuICB9LCBQcmlzbS5sYW5ndWFnZXMubWFya3VwLnRhZyk7XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAgICAgQmVnaW4gcHJpc20tY2xpa2UuanNcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuUHJpc20ubGFuZ3VhZ2VzLmNsaWtlID0ge1xuICBjb21tZW50OiBbXG4gICAge1xuICAgICAgcGF0dGVybjogLyhefFteXFxcXF0pXFwvXFwqW1xcc1xcU10qPyg/OlxcKlxcL3wkKS8sXG4gICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgIH0sXG4gICAge1xuICAgICAgcGF0dGVybjogLyhefFteXFxcXDpdKVxcL1xcLy4qLyxcbiAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICBncmVlZHk6IHRydWUsXG4gICAgfSBdLFxuICBzdHJpbmc6IHtcbiAgICBwYXR0ZXJuOiAvKFtcIiddKSg/OlxcXFwoPzpcXHJcXG58W1xcc1xcU10pfCg/IVxcMSlbXlxcXFxcXHJcXG5dKSpcXDEvLFxuICAgIGdyZWVkeTogdHJ1ZSxcbiAgfSxcbiAgJ2NsYXNzLW5hbWUnOiB7XG4gICAgcGF0dGVybjogLygoPzpcXGIoPzpjbGFzc3xpbnRlcmZhY2V8ZXh0ZW5kc3xpbXBsZW1lbnRzfHRyYWl0fGluc3RhbmNlb2Z8bmV3KVxccyspfCg/OmNhdGNoXFxzK1xcKCkpW1xcdy5cXFxcXSsvaSxcbiAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgIGluc2lkZToge1xuICAgICAgcHVuY3R1YXRpb246IC9bLlxcXFxdLyxcbiAgICB9LFxuICB9LFxuICBrZXl3b3JkOiAvXFxiKD86aWZ8ZWxzZXx3aGlsZXxkb3xmb3J8cmV0dXJufGlufGluc3RhbmNlb2Z8ZnVuY3Rpb258bmV3fHRyeXx0aHJvd3xjYXRjaHxmaW5hbGx5fG51bGx8YnJlYWt8Y29udGludWUpXFxiLyxcbiAgYm9vbGVhbjogL1xcYig/OnRydWV8ZmFsc2UpXFxiLyxcbiAgZnVuY3Rpb246IC9bYS16MC05X10rKD89XFwoKS9pLFxuICBudW1iZXI6IC9cXGIweFtcXGRhLWZdK1xcYnwoPzpcXGJcXGQrXFwuP1xcZCp8XFxCXFwuXFxkKykoPzplWystXT9cXGQrKT8vaSxcbiAgb3BlcmF0b3I6IC8tLT98XFwrXFwrP3whPT89P3w8PT98Pj0/fD09Pz0/fCYmP3xcXHxcXHw/fFxcP3xcXCp8XFwvfH58XFxefCUvLFxuICBwdW5jdHVhdGlvbjogL1t7fVtcXF07KCksLjpdLyxcbn07XG5cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICAgICBCZWdpbiBwcmlzbS1qYXZhc2NyaXB0LmpzXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cblByaXNtLmxhbmd1YWdlcy5qYXZhc2NyaXB0ID0gUHJpc20ubGFuZ3VhZ2VzLmV4dGVuZCgnY2xpa2UnLCB7XG4gIGtleXdvcmQ6IC9cXGIoPzphc3xhc3luY3xhd2FpdHxicmVha3xjYXNlfGNhdGNofGNsYXNzfGNvbnN0fGNvbnRpbnVlfGRlYnVnZ2VyfGRlZmF1bHR8ZGVsZXRlfGRvfGVsc2V8ZW51bXxleHBvcnR8ZXh0ZW5kc3xmaW5hbGx5fGZvcnxmcm9tfGZ1bmN0aW9ufGdldHxpZnxpbXBsZW1lbnRzfGltcG9ydHxpbnxpbnN0YW5jZW9mfGludGVyZmFjZXxsZXR8bmV3fG51bGx8b2Z8cGFja2FnZXxwcml2YXRlfHByb3RlY3RlZHxwdWJsaWN8cmV0dXJufHNldHxzdGF0aWN8c3VwZXJ8c3dpdGNofHRoaXN8dGhyb3d8dHJ5fHR5cGVvZnx2YXJ8dm9pZHx3aGlsZXx3aXRofHlpZWxkKVxcYi8sXG4gIG51bWJlcjogL1xcYig/OjBbeFhdW1xcZEEtRmEtZl0rfDBbYkJdWzAxXSt8MFtvT11bMC03XSt8TmFOfEluZmluaXR5KVxcYnwoPzpcXGJcXGQrXFwuP1xcZCp8XFxCXFwuXFxkKykoPzpbRWVdWystXT9cXGQrKT8vLFxuICAvLyBBbGxvdyBmb3IgYWxsIG5vbi1BU0NJSSBjaGFyYWN0ZXJzIChTZWUgaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjAwODQ0NClcbiAgZnVuY3Rpb246IC9bXyRhLXpcXHhBMC1cXHVGRkZGXVskXFx3XFx4QTAtXFx1RkZGRl0qKD89XFxzKlxcKCkvaSxcbiAgb3BlcmF0b3I6IC8tWy09XT98XFwrWys9XT98IT0/PT98PDw/PT98Pj4/Pj89P3w9KD86PT0/fD4pP3wmWyY9XT98XFx8W3w9XT98XFwqXFwqPz0/fFxcLz0/fH58XFxePT98JT0/fFxcP3xcXC57M30vLFxufSk7XG5cblByaXNtLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoJ2phdmFzY3JpcHQnLCAna2V5d29yZCcsIHtcbiAgcmVnZXg6IHtcbiAgICBwYXR0ZXJuOiAvKCg/Ol58W14kXFx3XFx4QTAtXFx1RkZGRi5cIidcXF0pXFxzXSlcXHMqKVxcLyhcXFtbXlxcXVxcclxcbl0rXXxcXFxcLnxbXi9cXFxcXFxbXFxyXFxuXSkrXFwvW2dpbXl1XXswLDV9KD89XFxzKigkfFtcXHJcXG4sLjt9KVxcXV0pKS8sXG4gICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICBncmVlZHk6IHRydWUsXG4gIH0sXG4gIC8vIFRoaXMgbXVzdCBiZSBkZWNsYXJlZCBiZWZvcmUga2V5d29yZCBiZWNhdXNlIHdlIHVzZSBcImZ1bmN0aW9uXCIgaW5zaWRlIHRoZSBsb29rLWZvcndhcmRcbiAgJ2Z1bmN0aW9uLXZhcmlhYmxlJzoge1xuICAgIHBhdHRlcm46IC9bXyRhLXpcXHhBMC1cXHVGRkZGXVskXFx3XFx4QTAtXFx1RkZGRl0qKD89XFxzKj1cXHMqKD86ZnVuY3Rpb25cXGJ8KD86XFwoW14oKV0qXFwpfFtfJGEtelxceEEwLVxcdUZGRkZdWyRcXHdcXHhBMC1cXHVGRkZGXSopXFxzKj0+KSkvaSxcbiAgICBhbGlhczogJ2Z1bmN0aW9uJyxcbiAgfSxcbiAgY29uc3RhbnQ6IC9cXGJbQS1aXVtBLVpcXGRfXSpcXGIvLFxufSk7XG5cblByaXNtLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoJ2phdmFzY3JpcHQnLCAnc3RyaW5nJywge1xuICAndGVtcGxhdGUtc3RyaW5nJzoge1xuICAgIHBhdHRlcm46IC9gKD86XFxcXFtcXHNcXFNdfFxcJHtbXn1dK318W15cXFxcYF0pKmAvLFxuICAgIGdyZWVkeTogdHJ1ZSxcbiAgICBpbnNpZGU6IHtcbiAgICAgIGludGVycG9sYXRpb246IHtcbiAgICAgICAgcGF0dGVybjogL1xcJHtbXn1dK30vLFxuICAgICAgICBpbnNpZGU6IHtcbiAgICAgICAgICAnaW50ZXJwb2xhdGlvbi1wdW5jdHVhdGlvbic6IHtcbiAgICAgICAgICAgIHBhdHRlcm46IC9eXFwke3x9JC8sXG4gICAgICAgICAgICBhbGlhczogJ3B1bmN0dWF0aW9uJyxcbiAgICAgICAgICB9LFxuICAgICAgICAgIHJlc3Q6IG51bGwsIC8vIFNlZSBiZWxvd1xuICAgICAgICB9LFxuICAgICAgfSxcbiAgICAgIHN0cmluZzogL1tcXHNcXFNdKy8sXG4gICAgfSxcbiAgfSxcbn0pO1xuUHJpc20ubGFuZ3VhZ2VzLmphdmFzY3JpcHRbJ3RlbXBsYXRlLXN0cmluZyddLmluc2lkZS5pbnRlcnBvbGF0aW9uLmluc2lkZS5yZXN0ID0gUHJpc20ubGFuZ3VhZ2VzLmphdmFzY3JpcHQ7XG5cbmlmIChQcmlzbS5sYW5ndWFnZXMubWFya3VwKSB7XG4gIFByaXNtLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoJ21hcmt1cCcsICd0YWcnLCB7XG4gICAgc2NyaXB0OiB7XG4gICAgICBwYXR0ZXJuOiAvKDxzY3JpcHRbXFxzXFxTXSo/PilbXFxzXFxTXSo/KD89PFxcL3NjcmlwdD4pL2ksXG4gICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgaW5zaWRlOiBQcmlzbS5sYW5ndWFnZXMuamF2YXNjcmlwdCxcbiAgICAgIGFsaWFzOiAnbGFuZ3VhZ2UtamF2YXNjcmlwdCcsXG4gICAgICBncmVlZHk6IHRydWUsXG4gICAgfSxcbiAgfSk7XG59XG5cblByaXNtLmxhbmd1YWdlcy5qcyA9IFByaXNtLmxhbmd1YWdlcy5qYXZhc2NyaXB0O1xuXG4oZnVuY3Rpb24oKXsgaWYodHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyl7IHZhciBoZWFkPWRvY3VtZW50LmhlYWR8fGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF0sIHN0eWxlPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyksIGNzcz1cIlwiOyBzdHlsZS50eXBlPSd0ZXh0L2Nzcyc7IGlmIChzdHlsZS5zdHlsZVNoZWV0KXsgc3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzOyB9IGVsc2UgeyBzdHlsZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTsgfSBoZWFkLmFwcGVuZENoaWxkKHN0eWxlKTsgfSB9KSgpO1xuXG52YXIgQ29kZUhpZ2hsaWdodCA9IHtyZW5kZXI6IGZ1bmN0aW9uKCl7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7cmV0dXJuIF9jKCdkaXYnLHtyZWY6XCJjb2RlQmxvY2tcIn0sW19jKCdwcmUnLHtjbGFzczpfdm0ubGFuZ3VhZ2VDbGFzc30sW19jKCdjb2RlJyxbX3ZtLl90KFwiZGVmYXVsdFwiKV0sMildKV0pfSxzdGF0aWNSZW5kZXJGbnM6IFtdLFxuICBuYW1lOiAnY29kZS1oaWdobGlnaHQnLFxuICBwcm9wczoge1xuICAgIGxhbmd1YWdlOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAnamF2YXNjcmlwdCcsXG4gICAgfSxcbiAgfSxcbiAgY29tcHV0ZWQ6IHtcbiAgICBsYW5ndWFnZUNsYXNzOiBmdW5jdGlvbiBsYW5ndWFnZUNsYXNzKCkge1xuICAgICAgcmV0dXJuIChcImxhbmd1YWdlLVwiICsgKHRoaXMubGFuZ3VhZ2UpKTtcbiAgICB9LFxuICB9LFxuICBtb3VudGVkOiBmdW5jdGlvbiBtb3VudGVkKCkge1xuICAgIFByaXNtLmhpZ2hsaWdodEFsbFVuZGVyKHRoaXMuJHJlZnMuY29kZUJsb2NrKTtcbiAgfSxcblxuICBiZWZvcmVVcGRhdGU6IGZ1bmN0aW9uIGJlZm9yZVVwZGF0ZSgpIHtcbiAgICBpZih0aGlzLiRzbG90cy5kZWZhdWx0WzBdLnRleHQpe1xuXHQgICAgdmFyIG5ld1RleHQgPSB0aGlzLiRzbG90cy5kZWZhdWx0WzBdLnRleHQucmVwbGFjZSgvXltcXHJcXG5cXHNdKnxbXFxyXFxuXFxzXSokL2csICcnKTtcblx0ICAgIHRoaXMuJGVsLnF1ZXJ5U2VsZWN0b3IoJ2NvZGUnKS50ZXh0Q29udGVudCA9IG5ld1RleHQ7XG5cdCAgICBQcmlzbS5oaWdobGlnaHRBbGxVbmRlcih0aGlzLiRyZWZzLmNvZGVCbG9jayk7XG4gICAgfVxuICB9LFxufTtcblxuZnVuY3Rpb24gcmVnaXN0ZXJEaXJlY3RpdmUgKGVsKSB7XG4gIFByaXNtLmhpZ2hsaWdodEFsbFVuZGVyKGVsKTtcbn1cblxuLy8gSW1wb3J0IHZ1ZSBjb21wb25lbnRcblxuLy8gRGVjbGFyZSBpbnN0YWxsIGZ1bmN0aW9uIGV4ZWN1dGVkIGJ5IFZ1ZS51c2UoKVxuZnVuY3Rpb24gaW5zdGFsbChWdWUpIHtcbiAgaWYgKGluc3RhbGwuaW5zdGFsbGVkKSB7IHJldHVybjsgfVxuICBpbnN0YWxsLmluc3RhbGxlZCA9IHRydWU7XG4gIFZ1ZS5kaXJlY3RpdmUoJ2hpZ2hsaWdodCcsIHJlZ2lzdGVyRGlyZWN0aXZlKTtcbn1cblxuLy8gQ3JlYXRlIG1vZHVsZSBkZWZpbml0aW9uIGZvciBWdWUudXNlKClcbnZhciBwbHVnaW4gPSB7XG4gIGluc3RhbGw6IGluc3RhbGwsXG59O1xuXG4vLyBBdXRvLWluc3RhbGwgd2hlbiB2dWUgaXMgZm91bmQgKGVnLiBpbiBicm93c2VyIHZpYSA8c2NyaXB0PiB0YWcpXG52YXIgR2xvYmFsVnVlID0gbnVsbDtcbmlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICBHbG9iYWxWdWUgPSB3aW5kb3cuVnVlO1xufSBlbHNlIGlmICh0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJykge1xuICBHbG9iYWxWdWUgPSBnbG9iYWwuVnVlO1xufVxuaWYgKEdsb2JhbFZ1ZSkge1xuICBHbG9iYWxWdWUudXNlKHBsdWdpbik7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGluc3RhbGw7XG5leHBvcnQgeyBDb2RlSGlnaGxpZ2h0IGFzIGNvbXBvbmVudCB9O1xuIiwiaW1wb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSBmcm9tIFwiLi9BcHAudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTQ3MmNmZjYzJlwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL0FwcC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmV4cG9ydCAqIGZyb20gXCIuL0FwcC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcblxuXG4vKiBub3JtYWxpemUgY29tcG9uZW50ICovXG5pbXBvcnQgbm9ybWFsaXplciBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9ydW50aW1lL2NvbXBvbmVudE5vcm1hbGl6ZXIuanNcIlxudmFyIGNvbXBvbmVudCA9IG5vcm1hbGl6ZXIoXG4gIHNjcmlwdCxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZhbHNlLFxuICBudWxsLFxuICBudWxsLFxuICBudWxsXG4gIFxuKVxuXG4vKiBob3QgcmVsb2FkICovXG5pZiAobW9kdWxlLmhvdCkge1xuICB2YXIgYXBpID0gcmVxdWlyZShcIi9Vc2Vycy9tc2NhcmNoaWxsaS9TaXRlcy93b3JrL3BsdWdpbnMvdnVlLXVuaWNvcm4tbG9nL25vZGVfbW9kdWxlcy92dWUtaG90LXJlbG9hZC1hcGkvZGlzdC9pbmRleC5qc1wiKVxuICBhcGkuaW5zdGFsbChyZXF1aXJlKCd2dWUnKSlcbiAgaWYgKGFwaS5jb21wYXRpYmxlKSB7XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICAgIGlmICghYXBpLmlzUmVjb3JkZWQoJzQ3MmNmZjYzJykpIHtcbiAgICAgIGFwaS5jcmVhdGVSZWNvcmQoJzQ3MmNmZjYzJywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZWxvYWQoJzQ3MmNmZjYzJywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfVxuICAgIG1vZHVsZS5ob3QuYWNjZXB0KFwiLi9BcHAudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTQ3MmNmZjYzJlwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBhcGkucmVyZW5kZXIoJzQ3MmNmZjYzJywge1xuICAgICAgICByZW5kZXI6IHJlbmRlcixcbiAgICAgICAgc3RhdGljUmVuZGVyRm5zOiBzdGF0aWNSZW5kZXJGbnNcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxufVxuY29tcG9uZW50Lm9wdGlvbnMuX19maWxlID0gXCJBcHAudnVlXCJcbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIiwiaW1wb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSBmcm9tIFwiLi9OYXYudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTczOGZhZTk4JlwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL05hdi52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmV4cG9ydCAqIGZyb20gXCIuL05hdi52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcblxuXG4vKiBub3JtYWxpemUgY29tcG9uZW50ICovXG5pbXBvcnQgbm9ybWFsaXplciBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9ydW50aW1lL2NvbXBvbmVudE5vcm1hbGl6ZXIuanNcIlxudmFyIGNvbXBvbmVudCA9IG5vcm1hbGl6ZXIoXG4gIHNjcmlwdCxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZhbHNlLFxuICBudWxsLFxuICBudWxsLFxuICBudWxsXG4gIFxuKVxuXG4vKiBob3QgcmVsb2FkICovXG5pZiAobW9kdWxlLmhvdCkge1xuICB2YXIgYXBpID0gcmVxdWlyZShcIi9Vc2Vycy9tc2NhcmNoaWxsaS9TaXRlcy93b3JrL3BsdWdpbnMvdnVlLXVuaWNvcm4tbG9nL25vZGVfbW9kdWxlcy92dWUtaG90LXJlbG9hZC1hcGkvZGlzdC9pbmRleC5qc1wiKVxuICBhcGkuaW5zdGFsbChyZXF1aXJlKCd2dWUnKSlcbiAgaWYgKGFwaS5jb21wYXRpYmxlKSB7XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICAgIGlmICghYXBpLmlzUmVjb3JkZWQoJzczOGZhZTk4JykpIHtcbiAgICAgIGFwaS5jcmVhdGVSZWNvcmQoJzczOGZhZTk4JywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZWxvYWQoJzczOGZhZTk4JywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfVxuICAgIG1vZHVsZS5ob3QuYWNjZXB0KFwiLi9OYXYudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTczOGZhZTk4JlwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBhcGkucmVyZW5kZXIoJzczOGZhZTk4Jywge1xuICAgICAgICByZW5kZXI6IHJlbmRlcixcbiAgICAgICAgc3RhdGljUmVuZGVyRm5zOiBzdGF0aWNSZW5kZXJGbnNcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxufVxuY29tcG9uZW50Lm9wdGlvbnMuX19maWxlID0gXCJjb21wb25lbnRzL05hdi52dWVcIlxuZXhwb3J0IGRlZmF1bHQgY29tcG9uZW50LmV4cG9ydHMiLCJpbXBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IGZyb20gXCIuL0FycmF5cy52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9MzgwN2M5NzUmXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vQXJyYXlzLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuZXhwb3J0ICogZnJvbSBcIi4vQXJyYXlzLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIG51bGwsXG4gIG51bGxcbiAgXG4pXG5cbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7XG4gIHZhciBhcGkgPSByZXF1aXJlKFwiL1VzZXJzL21zY2FyY2hpbGxpL1NpdGVzL3dvcmsvcGx1Z2lucy92dWUtdW5pY29ybi1sb2cvbm9kZV9tb2R1bGVzL3Z1ZS1ob3QtcmVsb2FkLWFwaS9kaXN0L2luZGV4LmpzXCIpXG4gIGFwaS5pbnN0YWxsKHJlcXVpcmUoJ3Z1ZScpKVxuICBpZiAoYXBpLmNvbXBhdGlibGUpIHtcbiAgICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gICAgaWYgKCFhcGkuaXNSZWNvcmRlZCgnMzgwN2M5NzUnKSkge1xuICAgICAgYXBpLmNyZWF0ZVJlY29yZCgnMzgwN2M5NzUnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbG9hZCgnMzgwN2M5NzUnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoXCIuL0FycmF5cy52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9MzgwN2M5NzUmXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGFwaS5yZXJlbmRlcignMzgwN2M5NzUnLCB7XG4gICAgICAgIHJlbmRlcjogcmVuZGVyLFxuICAgICAgICBzdGF0aWNSZW5kZXJGbnM6IHN0YXRpY1JlbmRlckZuc1xuICAgICAgfSlcbiAgICB9KVxuICB9XG59XG5jb21wb25lbnQub3B0aW9ucy5fX2ZpbGUgPSBcImNvbXBvbmVudHMvZXhhbXBsZXMvQXJyYXlzLnZ1ZVwiXG5leHBvcnQgZGVmYXVsdCBjb21wb25lbnQuZXhwb3J0cyIsImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0gZnJvbSBcIi4vRGlzYWJsZWQudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPThjNzRjNjEyJlwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL0Rpc2FibGVkLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuZXhwb3J0ICogZnJvbSBcIi4vRGlzYWJsZWQudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5cblxuLyogbm9ybWFsaXplIGNvbXBvbmVudCAqL1xuaW1wb3J0IG5vcm1hbGl6ZXIgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnROb3JtYWxpemVyLmpzXCJcbnZhciBjb21wb25lbnQgPSBub3JtYWxpemVyKFxuICBzY3JpcHQsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmYWxzZSxcbiAgbnVsbCxcbiAgbnVsbCxcbiAgbnVsbFxuICBcbilcblxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHtcbiAgdmFyIGFwaSA9IHJlcXVpcmUoXCIvVXNlcnMvbXNjYXJjaGlsbGkvU2l0ZXMvd29yay9wbHVnaW5zL3Z1ZS11bmljb3JuLWxvZy9ub2RlX21vZHVsZXMvdnVlLWhvdC1yZWxvYWQtYXBpL2Rpc3QvaW5kZXguanNcIilcbiAgYXBpLmluc3RhbGwocmVxdWlyZSgndnVlJykpXG4gIGlmIChhcGkuY29tcGF0aWJsZSkge1xuICAgIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgICBpZiAoIWFwaS5pc1JlY29yZGVkKCc4Yzc0YzYxMicpKSB7XG4gICAgICBhcGkuY3JlYXRlUmVjb3JkKCc4Yzc0YzYxMicsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVsb2FkKCc4Yzc0YzYxMicsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH1cbiAgICBtb2R1bGUuaG90LmFjY2VwdChcIi4vRGlzYWJsZWQudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPThjNzRjNjEyJlwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBhcGkucmVyZW5kZXIoJzhjNzRjNjEyJywge1xuICAgICAgICByZW5kZXI6IHJlbmRlcixcbiAgICAgICAgc3RhdGljUmVuZGVyRm5zOiBzdGF0aWNSZW5kZXJGbnNcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxufVxuY29tcG9uZW50Lm9wdGlvbnMuX19maWxlID0gXCJjb21wb25lbnRzL2V4YW1wbGVzL0Rpc2FibGVkLnZ1ZVwiXG5leHBvcnQgZGVmYXVsdCBjb21wb25lbnQuZXhwb3J0cyIsImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0gZnJvbSBcIi4vTG9nUHJlZml4LnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD1jN2QzMTVlYSZcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9Mb2dQcmVmaXgudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5leHBvcnQgKiBmcm9tIFwiLi9Mb2dQcmVmaXgudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5cblxuLyogbm9ybWFsaXplIGNvbXBvbmVudCAqL1xuaW1wb3J0IG5vcm1hbGl6ZXIgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnROb3JtYWxpemVyLmpzXCJcbnZhciBjb21wb25lbnQgPSBub3JtYWxpemVyKFxuICBzY3JpcHQsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmYWxzZSxcbiAgbnVsbCxcbiAgbnVsbCxcbiAgbnVsbFxuICBcbilcblxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHtcbiAgdmFyIGFwaSA9IHJlcXVpcmUoXCIvVXNlcnMvbXNjYXJjaGlsbGkvU2l0ZXMvd29yay9wbHVnaW5zL3Z1ZS11bmljb3JuLWxvZy9ub2RlX21vZHVsZXMvdnVlLWhvdC1yZWxvYWQtYXBpL2Rpc3QvaW5kZXguanNcIilcbiAgYXBpLmluc3RhbGwocmVxdWlyZSgndnVlJykpXG4gIGlmIChhcGkuY29tcGF0aWJsZSkge1xuICAgIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgICBpZiAoIWFwaS5pc1JlY29yZGVkKCdjN2QzMTVlYScpKSB7XG4gICAgICBhcGkuY3JlYXRlUmVjb3JkKCdjN2QzMTVlYScsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVsb2FkKCdjN2QzMTVlYScsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH1cbiAgICBtb2R1bGUuaG90LmFjY2VwdChcIi4vTG9nUHJlZml4LnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD1jN2QzMTVlYSZcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgYXBpLnJlcmVuZGVyKCdjN2QzMTVlYScsIHtcbiAgICAgICAgcmVuZGVyOiByZW5kZXIsXG4gICAgICAgIHN0YXRpY1JlbmRlckZuczogc3RhdGljUmVuZGVyRm5zXG4gICAgICB9KVxuICAgIH0pXG4gIH1cbn1cbmNvbXBvbmVudC5vcHRpb25zLl9fZmlsZSA9IFwiY29tcG9uZW50cy9leGFtcGxlcy9Mb2dQcmVmaXgudnVlXCJcbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIiwiaW1wb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSBmcm9tIFwiLi9NYWdpY2FsLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD03OGFhZTIyNiZcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9NYWdpY2FsLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuZXhwb3J0ICogZnJvbSBcIi4vTWFnaWNhbC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcblxuXG4vKiBub3JtYWxpemUgY29tcG9uZW50ICovXG5pbXBvcnQgbm9ybWFsaXplciBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9ydW50aW1lL2NvbXBvbmVudE5vcm1hbGl6ZXIuanNcIlxudmFyIGNvbXBvbmVudCA9IG5vcm1hbGl6ZXIoXG4gIHNjcmlwdCxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZhbHNlLFxuICBudWxsLFxuICBudWxsLFxuICBudWxsXG4gIFxuKVxuXG4vKiBob3QgcmVsb2FkICovXG5pZiAobW9kdWxlLmhvdCkge1xuICB2YXIgYXBpID0gcmVxdWlyZShcIi9Vc2Vycy9tc2NhcmNoaWxsaS9TaXRlcy93b3JrL3BsdWdpbnMvdnVlLXVuaWNvcm4tbG9nL25vZGVfbW9kdWxlcy92dWUtaG90LXJlbG9hZC1hcGkvZGlzdC9pbmRleC5qc1wiKVxuICBhcGkuaW5zdGFsbChyZXF1aXJlKCd2dWUnKSlcbiAgaWYgKGFwaS5jb21wYXRpYmxlKSB7XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICAgIGlmICghYXBpLmlzUmVjb3JkZWQoJzc4YWFlMjI2JykpIHtcbiAgICAgIGFwaS5jcmVhdGVSZWNvcmQoJzc4YWFlMjI2JywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZWxvYWQoJzc4YWFlMjI2JywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfVxuICAgIG1vZHVsZS5ob3QuYWNjZXB0KFwiLi9NYWdpY2FsLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD03OGFhZTIyNiZcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgYXBpLnJlcmVuZGVyKCc3OGFhZTIyNicsIHtcbiAgICAgICAgcmVuZGVyOiByZW5kZXIsXG4gICAgICAgIHN0YXRpY1JlbmRlckZuczogc3RhdGljUmVuZGVyRm5zXG4gICAgICB9KVxuICAgIH0pXG4gIH1cbn1cbmNvbXBvbmVudC5vcHRpb25zLl9fZmlsZSA9IFwiY29tcG9uZW50cy9leGFtcGxlcy9NYWdpY2FsLnZ1ZVwiXG5leHBvcnQgZGVmYXVsdCBjb21wb25lbnQuZXhwb3J0cyIsImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0gZnJvbSBcIi4vT2JqZWN0cy52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9MWZkNGI3NjkmXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vT2JqZWN0cy52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmV4cG9ydCAqIGZyb20gXCIuL09iamVjdHMudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5cblxuLyogbm9ybWFsaXplIGNvbXBvbmVudCAqL1xuaW1wb3J0IG5vcm1hbGl6ZXIgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnROb3JtYWxpemVyLmpzXCJcbnZhciBjb21wb25lbnQgPSBub3JtYWxpemVyKFxuICBzY3JpcHQsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmYWxzZSxcbiAgbnVsbCxcbiAgbnVsbCxcbiAgbnVsbFxuICBcbilcblxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHtcbiAgdmFyIGFwaSA9IHJlcXVpcmUoXCIvVXNlcnMvbXNjYXJjaGlsbGkvU2l0ZXMvd29yay9wbHVnaW5zL3Z1ZS11bmljb3JuLWxvZy9ub2RlX21vZHVsZXMvdnVlLWhvdC1yZWxvYWQtYXBpL2Rpc3QvaW5kZXguanNcIilcbiAgYXBpLmluc3RhbGwocmVxdWlyZSgndnVlJykpXG4gIGlmIChhcGkuY29tcGF0aWJsZSkge1xuICAgIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgICBpZiAoIWFwaS5pc1JlY29yZGVkKCcxZmQ0Yjc2OScpKSB7XG4gICAgICBhcGkuY3JlYXRlUmVjb3JkKCcxZmQ0Yjc2OScsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVsb2FkKCcxZmQ0Yjc2OScsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH1cbiAgICBtb2R1bGUuaG90LmFjY2VwdChcIi4vT2JqZWN0cy52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9MWZkNGI3NjkmXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGFwaS5yZXJlbmRlcignMWZkNGI3NjknLCB7XG4gICAgICAgIHJlbmRlcjogcmVuZGVyLFxuICAgICAgICBzdGF0aWNSZW5kZXJGbnM6IHN0YXRpY1JlbmRlckZuc1xuICAgICAgfSlcbiAgICB9KVxuICB9XG59XG5jb21wb25lbnQub3B0aW9ucy5fX2ZpbGUgPSBcImNvbXBvbmVudHMvZXhhbXBsZXMvT2JqZWN0cy52dWVcIlxuZXhwb3J0IGRlZmF1bHQgY29tcG9uZW50LmV4cG9ydHMiLCJpbXBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IGZyb20gXCIuL1NpbXBsZS52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9MjllZDI1ZWQmXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vU2ltcGxlLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuZXhwb3J0ICogZnJvbSBcIi4vU2ltcGxlLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIG51bGwsXG4gIG51bGxcbiAgXG4pXG5cbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7XG4gIHZhciBhcGkgPSByZXF1aXJlKFwiL1VzZXJzL21zY2FyY2hpbGxpL1NpdGVzL3dvcmsvcGx1Z2lucy92dWUtdW5pY29ybi1sb2cvbm9kZV9tb2R1bGVzL3Z1ZS1ob3QtcmVsb2FkLWFwaS9kaXN0L2luZGV4LmpzXCIpXG4gIGFwaS5pbnN0YWxsKHJlcXVpcmUoJ3Z1ZScpKVxuICBpZiAoYXBpLmNvbXBhdGlibGUpIHtcbiAgICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gICAgaWYgKCFhcGkuaXNSZWNvcmRlZCgnMjllZDI1ZWQnKSkge1xuICAgICAgYXBpLmNyZWF0ZVJlY29yZCgnMjllZDI1ZWQnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbG9hZCgnMjllZDI1ZWQnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoXCIuL1NpbXBsZS52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9MjllZDI1ZWQmXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGFwaS5yZXJlbmRlcignMjllZDI1ZWQnLCB7XG4gICAgICAgIHJlbmRlcjogcmVuZGVyLFxuICAgICAgICBzdGF0aWNSZW5kZXJGbnM6IHN0YXRpY1JlbmRlckZuc1xuICAgICAgfSlcbiAgICB9KVxuICB9XG59XG5jb21wb25lbnQub3B0aW9ucy5fX2ZpbGUgPSBcImNvbXBvbmVudHMvZXhhbXBsZXMvU2ltcGxlLnZ1ZVwiXG5leHBvcnQgZGVmYXVsdCBjb21wb25lbnQuZXhwb3J0cyIsImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0gZnJvbSBcIi4vU3R5bGVzLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD1lZWIzMTVjNiZcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9TdHlsZXMudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5leHBvcnQgKiBmcm9tIFwiLi9TdHlsZXMudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5cblxuLyogbm9ybWFsaXplIGNvbXBvbmVudCAqL1xuaW1wb3J0IG5vcm1hbGl6ZXIgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnROb3JtYWxpemVyLmpzXCJcbnZhciBjb21wb25lbnQgPSBub3JtYWxpemVyKFxuICBzY3JpcHQsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmYWxzZSxcbiAgbnVsbCxcbiAgbnVsbCxcbiAgbnVsbFxuICBcbilcblxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHtcbiAgdmFyIGFwaSA9IHJlcXVpcmUoXCIvVXNlcnMvbXNjYXJjaGlsbGkvU2l0ZXMvd29yay9wbHVnaW5zL3Z1ZS11bmljb3JuLWxvZy9ub2RlX21vZHVsZXMvdnVlLWhvdC1yZWxvYWQtYXBpL2Rpc3QvaW5kZXguanNcIilcbiAgYXBpLmluc3RhbGwocmVxdWlyZSgndnVlJykpXG4gIGlmIChhcGkuY29tcGF0aWJsZSkge1xuICAgIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgICBpZiAoIWFwaS5pc1JlY29yZGVkKCdlZWIzMTVjNicpKSB7XG4gICAgICBhcGkuY3JlYXRlUmVjb3JkKCdlZWIzMTVjNicsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVsb2FkKCdlZWIzMTVjNicsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH1cbiAgICBtb2R1bGUuaG90LmFjY2VwdChcIi4vU3R5bGVzLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD1lZWIzMTVjNiZcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgYXBpLnJlcmVuZGVyKCdlZWIzMTVjNicsIHtcbiAgICAgICAgcmVuZGVyOiByZW5kZXIsXG4gICAgICAgIHN0YXRpY1JlbmRlckZuczogc3RhdGljUmVuZGVyRm5zXG4gICAgICB9KVxuICAgIH0pXG4gIH1cbn1cbmNvbXBvbmVudC5vcHRpb25zLl9fZmlsZSA9IFwiY29tcG9uZW50cy9leGFtcGxlcy9TdHlsZXMudnVlXCJcbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIiwiaW1wb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSBmcm9tIFwiLi9UZXh0LnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0wMTNmNTBhOCZcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9UZXh0LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuZXhwb3J0ICogZnJvbSBcIi4vVGV4dC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcblxuXG4vKiBub3JtYWxpemUgY29tcG9uZW50ICovXG5pbXBvcnQgbm9ybWFsaXplciBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9ydW50aW1lL2NvbXBvbmVudE5vcm1hbGl6ZXIuanNcIlxudmFyIGNvbXBvbmVudCA9IG5vcm1hbGl6ZXIoXG4gIHNjcmlwdCxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZhbHNlLFxuICBudWxsLFxuICBudWxsLFxuICBudWxsXG4gIFxuKVxuXG4vKiBob3QgcmVsb2FkICovXG5pZiAobW9kdWxlLmhvdCkge1xuICB2YXIgYXBpID0gcmVxdWlyZShcIi9Vc2Vycy9tc2NhcmNoaWxsaS9TaXRlcy93b3JrL3BsdWdpbnMvdnVlLXVuaWNvcm4tbG9nL25vZGVfbW9kdWxlcy92dWUtaG90LXJlbG9hZC1hcGkvZGlzdC9pbmRleC5qc1wiKVxuICBhcGkuaW5zdGFsbChyZXF1aXJlKCd2dWUnKSlcbiAgaWYgKGFwaS5jb21wYXRpYmxlKSB7XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICAgIGlmICghYXBpLmlzUmVjb3JkZWQoJzAxM2Y1MGE4JykpIHtcbiAgICAgIGFwaS5jcmVhdGVSZWNvcmQoJzAxM2Y1MGE4JywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZWxvYWQoJzAxM2Y1MGE4JywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfVxuICAgIG1vZHVsZS5ob3QuYWNjZXB0KFwiLi9UZXh0LnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0wMTNmNTBhOCZcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgYXBpLnJlcmVuZGVyKCcwMTNmNTBhOCcsIHtcbiAgICAgICAgcmVuZGVyOiByZW5kZXIsXG4gICAgICAgIHN0YXRpY1JlbmRlckZuczogc3RhdGljUmVuZGVyRm5zXG4gICAgICB9KVxuICAgIH0pXG4gIH1cbn1cbmNvbXBvbmVudC5vcHRpb25zLl9fZmlsZSA9IFwiY29tcG9uZW50cy9leGFtcGxlcy9UZXh0LnZ1ZVwiXG5leHBvcnQgZGVmYXVsdCBjb21wb25lbnQuZXhwb3J0cyIsImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0gZnJvbSBcIi4vVHlwZS52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9MTRjMWNjMzUmXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vVHlwZS52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmV4cG9ydCAqIGZyb20gXCIuL1R5cGUudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5cblxuLyogbm9ybWFsaXplIGNvbXBvbmVudCAqL1xuaW1wb3J0IG5vcm1hbGl6ZXIgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnROb3JtYWxpemVyLmpzXCJcbnZhciBjb21wb25lbnQgPSBub3JtYWxpemVyKFxuICBzY3JpcHQsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmYWxzZSxcbiAgbnVsbCxcbiAgbnVsbCxcbiAgbnVsbFxuICBcbilcblxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHtcbiAgdmFyIGFwaSA9IHJlcXVpcmUoXCIvVXNlcnMvbXNjYXJjaGlsbGkvU2l0ZXMvd29yay9wbHVnaW5zL3Z1ZS11bmljb3JuLWxvZy9ub2RlX21vZHVsZXMvdnVlLWhvdC1yZWxvYWQtYXBpL2Rpc3QvaW5kZXguanNcIilcbiAgYXBpLmluc3RhbGwocmVxdWlyZSgndnVlJykpXG4gIGlmIChhcGkuY29tcGF0aWJsZSkge1xuICAgIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgICBpZiAoIWFwaS5pc1JlY29yZGVkKCcxNGMxY2MzNScpKSB7XG4gICAgICBhcGkuY3JlYXRlUmVjb3JkKCcxNGMxY2MzNScsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVsb2FkKCcxNGMxY2MzNScsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH1cbiAgICBtb2R1bGUuaG90LmFjY2VwdChcIi4vVHlwZS52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9MTRjMWNjMzUmXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGFwaS5yZXJlbmRlcignMTRjMWNjMzUnLCB7XG4gICAgICAgIHJlbmRlcjogcmVuZGVyLFxuICAgICAgICBzdGF0aWNSZW5kZXJGbnM6IHN0YXRpY1JlbmRlckZuc1xuICAgICAgfSlcbiAgICB9KVxuICB9XG59XG5jb21wb25lbnQub3B0aW9ucy5fX2ZpbGUgPSBcImNvbXBvbmVudHMvZXhhbXBsZXMvVHlwZS52dWVcIlxuZXhwb3J0IGRlZmF1bHQgY29tcG9uZW50LmV4cG9ydHMiLCJpbXBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IGZyb20gXCIuL1VuaWNvcm5Mb2cudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTkyYWMxMjNjJlwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL1VuaWNvcm5Mb2cudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5leHBvcnQgKiBmcm9tIFwiLi9Vbmljb3JuTG9nLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuaW1wb3J0IHN0eWxlMCBmcm9tIFwiLi9Vbmljb3JuTG9nLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmxhbmc9c2NzcyZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIG51bGwsXG4gIG51bGxcbiAgXG4pXG5cbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7XG4gIHZhciBhcGkgPSByZXF1aXJlKFwiL1VzZXJzL21zY2FyY2hpbGxpL1NpdGVzL3dvcmsvcGx1Z2lucy92dWUtdW5pY29ybi1sb2cvbm9kZV9tb2R1bGVzL3Z1ZS1ob3QtcmVsb2FkLWFwaS9kaXN0L2luZGV4LmpzXCIpXG4gIGFwaS5pbnN0YWxsKHJlcXVpcmUoJ3Z1ZScpKVxuICBpZiAoYXBpLmNvbXBhdGlibGUpIHtcbiAgICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gICAgaWYgKCFhcGkuaXNSZWNvcmRlZCgnOTJhYzEyM2MnKSkge1xuICAgICAgYXBpLmNyZWF0ZVJlY29yZCgnOTJhYzEyM2MnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbG9hZCgnOTJhYzEyM2MnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoXCIuL1VuaWNvcm5Mb2cudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTkyYWMxMjNjJlwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBhcGkucmVyZW5kZXIoJzkyYWMxMjNjJywge1xuICAgICAgICByZW5kZXI6IHJlbmRlcixcbiAgICAgICAgc3RhdGljUmVuZGVyRm5zOiBzdGF0aWNSZW5kZXJGbnNcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxufVxuY29tcG9uZW50Lm9wdGlvbnMuX19maWxlID0gXCJkb2NzL1VuaWNvcm5Mb2cudnVlXCJcbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIiwiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/Y2xvbmVkUnVsZVNldC0xWzBdLnJ1bGVzWzBdLnVzZSEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0FwcC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanM/P2Nsb25lZFJ1bGVTZXQtMVswXS5ydWxlc1swXS51c2UhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9BcHAudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiIiwiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/Y2xvbmVkUnVsZVNldC0xWzBdLnJ1bGVzWzBdLnVzZSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL05hdi52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanM/P2Nsb25lZFJ1bGVTZXQtMVswXS5ydWxlc1swXS51c2UhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9OYXYudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiIiwiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/Y2xvbmVkUnVsZVNldC0xWzBdLnJ1bGVzWzBdLnVzZSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0FycmF5cy52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanM/P2Nsb25lZFJ1bGVTZXQtMVswXS5ydWxlc1swXS51c2UhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9BcnJheXMudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiIiwiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/Y2xvbmVkUnVsZVNldC0xWzBdLnJ1bGVzWzBdLnVzZSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0Rpc2FibGVkLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/Y2xvbmVkUnVsZVNldC0xWzBdLnJ1bGVzWzBdLnVzZSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0Rpc2FibGVkLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIiIsImltcG9ydCBtb2QgZnJvbSBcIi0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanM/P2Nsb25lZFJ1bGVTZXQtMVswXS5ydWxlc1swXS51c2UhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9Mb2dQcmVmaXgudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzPz9jbG9uZWRSdWxlU2V0LTFbMF0ucnVsZXNbMF0udXNlIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vTG9nUHJlZml4LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIiIsImltcG9ydCBtb2QgZnJvbSBcIi0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanM/P2Nsb25lZFJ1bGVTZXQtMVswXS5ydWxlc1swXS51c2UhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9NYWdpY2FsLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/Y2xvbmVkUnVsZVNldC0xWzBdLnJ1bGVzWzBdLnVzZSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL01hZ2ljYWwudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiIiwiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/Y2xvbmVkUnVsZVNldC0xWzBdLnJ1bGVzWzBdLnVzZSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL09iamVjdHMudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzPz9jbG9uZWRSdWxlU2V0LTFbMF0ucnVsZXNbMF0udXNlIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vT2JqZWN0cy52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCIiLCJpbXBvcnQgbW9kIGZyb20gXCItIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzPz9jbG9uZWRSdWxlU2V0LTFbMF0ucnVsZXNbMF0udXNlIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vU2ltcGxlLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/Y2xvbmVkUnVsZVNldC0xWzBdLnJ1bGVzWzBdLnVzZSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL1NpbXBsZS52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCIiLCJpbXBvcnQgbW9kIGZyb20gXCItIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzPz9jbG9uZWRSdWxlU2V0LTFbMF0ucnVsZXNbMF0udXNlIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vU3R5bGVzLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/Y2xvbmVkUnVsZVNldC0xWzBdLnJ1bGVzWzBdLnVzZSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL1N0eWxlcy52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCIiLCJpbXBvcnQgbW9kIGZyb20gXCItIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzPz9jbG9uZWRSdWxlU2V0LTFbMF0ucnVsZXNbMF0udXNlIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vVGV4dC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanM/P2Nsb25lZFJ1bGVTZXQtMVswXS5ydWxlc1swXS51c2UhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9UZXh0LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIiIsImltcG9ydCBtb2QgZnJvbSBcIi0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanM/P2Nsb25lZFJ1bGVTZXQtMVswXS5ydWxlc1swXS51c2UhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9UeXBlLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/Y2xvbmVkUnVsZVNldC0xWzBdLnJ1bGVzWzBdLnVzZSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL1R5cGUudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiIiwiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/Y2xvbmVkUnVsZVNldC0xWzBdLnJ1bGVzWzBdLnVzZSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL1VuaWNvcm5Mb2cudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzPz9jbG9uZWRSdWxlU2V0LTFbMF0ucnVsZXNbMF0udXNlIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vVW5pY29ybkxvZy52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCIiLCJ2YXIgcmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICB2YXIgX3ZtID0gdGhpc1xuICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gIHJldHVybiBfYyhcImRpdlwiLCBbX2MoXCJVbmljb3JuTG9nXCIpXSwgMSlcbn1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXVxucmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlXG5cbmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0iLCJ2YXIgcmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICB2YXIgX3ZtID0gdGhpc1xuICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gIHJldHVybiBfYyhcbiAgICBcIm5hdlwiLFxuICAgIHtcbiAgICAgIHN0YXRpY0NsYXNzOlxuICAgICAgICBcIm5hdmJhciBzdGlja3ktdG9wIG5hdmJhci1leHBhbmQtbGcgbmF2YmFyLWRhcmsgYmctZGFyayBtYi01XCIsXG4gICAgfSxcbiAgICBbXG4gICAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImNvbnRhaW5lclwiIH0sIFtcbiAgICAgICAgX2MoXCJhXCIsIHsgc3RhdGljQ2xhc3M6IFwibmF2YmFyLWJyYW5kXCIsIGF0dHJzOiB7IGhyZWY6IFwiL1wiIH0gfSwgW1xuICAgICAgICAgIF92bS5fdihcIvCfpoQgVnVlIFVuaWNvcm5Mb2dcIiksXG4gICAgICAgIF0pLFxuICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICBfdm0uX20oMCksXG4gICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgIF9jKFxuICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAge1xuICAgICAgICAgICAgc3RhdGljQ2xhc3M6IFwiY29sbGFwc2UgbmF2YmFyLWNvbGxhcHNlXCIsXG4gICAgICAgICAgICBhdHRyczogeyBpZDogXCJuYXZiYXJTdXBwb3J0ZWRDb250ZW50XCIgfSxcbiAgICAgICAgICB9LFxuICAgICAgICAgIFtcbiAgICAgICAgICAgIF92bS5fbSgxKSxcbiAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImQtZmxleFwiIH0sIFtcbiAgICAgICAgICAgICAgX2MoXCJ1bFwiLCB7IHN0YXRpY0NsYXNzOiBcIm5hdmJhci1uYXYgbWUtYXV0byBtYi0yIG1iLWxnLTBcIiB9LCBbXG4gICAgICAgICAgICAgICAgX2MoXCJsaVwiLCB7IHN0YXRpY0NsYXNzOiBcIm5hdi1pdGVtXCIgfSwgW1xuICAgICAgICAgICAgICAgICAgX2MoXG4gICAgICAgICAgICAgICAgICAgIFwiYVwiLFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6IFwibmF2LWxpbmtcIixcbiAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBocmVmOiBfdm0ubGlua3MuZ2l0aHViIH0sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoXCJHaXRIdWJcIildXG4gICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgX2MoXCJsaVwiLCB7IHN0YXRpY0NsYXNzOiBcIm5hdi1pdGVtXCIgfSwgW1xuICAgICAgICAgICAgICAgICAgX2MoXG4gICAgICAgICAgICAgICAgICAgIFwiYVwiLFxuICAgICAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiBcIm5hdi1saW5rXCIsIGF0dHJzOiB7IGhyZWY6IF92bS5saW5rcy5ucG0gfSB9LFxuICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KFwiTlBNIFBhY2thZ2VcIildXG4gICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgIF1cbiAgICAgICAgKSxcbiAgICAgIF0pLFxuICAgIF1cbiAgKVxufVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtcbiAgZnVuY3Rpb24gKCkge1xuICAgIHZhciBfdm0gPSB0aGlzXG4gICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50XG4gICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gICAgcmV0dXJuIF9jKFxuICAgICAgXCJidXR0b25cIixcbiAgICAgIHtcbiAgICAgICAgc3RhdGljQ2xhc3M6IFwibmF2YmFyLXRvZ2dsZXJcIixcbiAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICB0eXBlOiBcImJ1dHRvblwiLFxuICAgICAgICAgIFwiZGF0YS1icy10b2dnbGVcIjogXCJjb2xsYXBzZVwiLFxuICAgICAgICAgIFwiZGF0YS1icy10YXJnZXRcIjogXCIjbmF2YmFyU3VwcG9ydGVkQ29udGVudFwiLFxuICAgICAgICAgIFwiYXJpYS1jb250cm9sc1wiOiBcIm5hdmJhclN1cHBvcnRlZENvbnRlbnRcIixcbiAgICAgICAgICBcImFyaWEtZXhwYW5kZWRcIjogXCJmYWxzZVwiLFxuICAgICAgICAgIFwiYXJpYS1sYWJlbFwiOiBcIlRvZ2dsZSBuYXZpZ2F0aW9uXCIsXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgICAgW19jKFwic3BhblwiLCB7IHN0YXRpY0NsYXNzOiBcIm5hdmJhci10b2dnbGVyLWljb25cIiB9KV1cbiAgICApXG4gIH0sXG4gIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX3ZtID0gdGhpc1xuICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICAgIHJldHVybiBfYyhcInVsXCIsIHsgc3RhdGljQ2xhc3M6IFwibmF2YmFyLW5hdiBtZS1hdXRvIG1iLTIgbWItbGctMFwiIH0sIFtcbiAgICAgIF9jKFwibGlcIiwgeyBzdGF0aWNDbGFzczogXCJuYXYtaXRlbVwiIH0sIFtcbiAgICAgICAgX2MoXG4gICAgICAgICAgXCJhXCIsXG4gICAgICAgICAge1xuICAgICAgICAgICAgc3RhdGljQ2xhc3M6IFwibmF2LWxpbmsgYWN0aXZlXCIsXG4gICAgICAgICAgICBhdHRyczogeyBcImFyaWEtY3VycmVudFwiOiBcInBhZ2VcIiwgaHJlZjogXCIvXCIgfSxcbiAgICAgICAgICB9LFxuICAgICAgICAgIFtfdm0uX3YoXCJIb21lXCIpXVxuICAgICAgICApLFxuICAgICAgXSksXG4gICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgX2MoXCJsaVwiLCB7IHN0YXRpY0NsYXNzOiBcIm5hdi1pdGVtIGRyb3Bkb3duXCIgfSwgW1xuICAgICAgICBfYyhcbiAgICAgICAgICBcImFcIixcbiAgICAgICAgICB7XG4gICAgICAgICAgICBzdGF0aWNDbGFzczogXCJuYXYtbGluayBkcm9wZG93bi10b2dnbGVcIixcbiAgICAgICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgICAgIGhyZWY6IFwiI1wiLFxuICAgICAgICAgICAgICBpZDogXCJkb2NzLWRyb3Bkb3duXCIsXG4gICAgICAgICAgICAgIHJvbGU6IFwiYnV0dG9uXCIsXG4gICAgICAgICAgICAgIFwiZGF0YS1icy10b2dnbGVcIjogXCJkcm9wZG93blwiLFxuICAgICAgICAgICAgICBcImFyaWEtZXhwYW5kZWRcIjogXCJmYWxzZVwiLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9LFxuICAgICAgICAgIFtfdm0uX3YoXCJcXG5cXHRcXHRcXHRcXHRcXHRcXHREb2NzXFxuXFx0XFx0XFx0XFx0XFx0XCIpXVxuICAgICAgICApLFxuICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICBfYyhcbiAgICAgICAgICBcInVsXCIsXG4gICAgICAgICAge1xuICAgICAgICAgICAgc3RhdGljQ2xhc3M6IFwiZHJvcGRvd24tbWVudSBkcm9wZG93bi1tZW51LWRhcmtcIixcbiAgICAgICAgICAgIGF0dHJzOiB7IFwiYXJpYS1sYWJlbGxlZGJ5XCI6IFwiZG9jcy1kcm9wZG93blwiIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgICBbXG4gICAgICAgICAgICBfYyhcImxpXCIsIFtcbiAgICAgICAgICAgICAgX2MoXG4gICAgICAgICAgICAgICAgXCJhXCIsXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6IFwiZHJvcGRvd24taXRlbVwiLFxuICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogXCIjdWwtaW5zdGFsbGF0aW9uXCIgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIFtfdm0uX3YoXCJcXG5cXHRcXHRcXHRcXHRcXHRcXHRcXHRcXHRJbnN0YWxsYXRpb25cXG5cXHRcXHRcXHRcXHRcXHRcXHRcXHRcIildXG4gICAgICAgICAgICAgICksXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICBfYyhcImxpXCIsIFtcbiAgICAgICAgICAgICAgX2MoXG4gICAgICAgICAgICAgICAgXCJhXCIsXG4gICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogXCJkcm9wZG93bi1pdGVtXCIsIGF0dHJzOiB7IGhyZWY6IFwiI3VsLXVzYWdlXCIgfSB9LFxuICAgICAgICAgICAgICAgIFtfdm0uX3YoXCJVc2FnZVwiKV1cbiAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgIF9jKFwibGlcIiwgW19jKFwiaHJcIiwgeyBzdGF0aWNDbGFzczogXCJkcm9wZG93bi1kaXZpZGVyXCIgfSldKSxcbiAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICBfYyhcImxpXCIsIFtcbiAgICAgICAgICAgICAgX2MoXCJoNlwiLCB7IHN0YXRpY0NsYXNzOiBcImRyb3Bkb3duLWhlYWRlclwiIH0sIFtfdm0uX3YoXCJPcHRpb25zXCIpXSksXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICBfYyhcImxpXCIsIFtcbiAgICAgICAgICAgICAgX2MoXG4gICAgICAgICAgICAgICAgXCJhXCIsXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6IFwiZHJvcGRvd24taXRlbVwiLFxuICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogXCIjdWwtcGx1Z2luLW9wdGlvbnNcIiB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgW192bS5fdihcIlxcblxcdFxcdFxcdFxcdFxcdFxcdFxcdFxcdFBsdWdpbiBPcHRpb25zXFxuXFx0XFx0XFx0XFx0XFx0XFx0XFx0XCIpXVxuICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgX2MoXCJsaVwiLCBbXG4gICAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICAgIFwiYVwiLFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiBcImRyb3Bkb3duLWl0ZW1cIixcbiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6IFwiI3VsLWxvZy1vcHRpb25zXCIgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIFtfdm0uX3YoXCJMb2cgT3B0aW9uc1wiKV1cbiAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgIF9jKFwibGlcIiwgW19jKFwiaHJcIiwgeyBzdGF0aWNDbGFzczogXCJkcm9wZG93bi1kaXZpZGVyXCIgfSldKSxcbiAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICBfYyhcImxpXCIsIFtcbiAgICAgICAgICAgICAgX2MoXCJoNlwiLCB7IHN0YXRpY0NsYXNzOiBcImRyb3Bkb3duLWhlYWRlclwiIH0sIFtfdm0uX3YoXCJNZXRob2RzXCIpXSksXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICBfYyhcImxpXCIsIFtcbiAgICAgICAgICAgICAgX2MoXG4gICAgICAgICAgICAgICAgXCJhXCIsXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6IFwiZHJvcGRvd24taXRlbVwiLFxuICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogXCIjdWwtaW5zdGFuY2UtbWV0aG9kc1wiIH0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBbX3ZtLl92KFwiXFxuXFx0XFx0XFx0XFx0XFx0XFx0XFx0XFx0SW5zdGFuY2UgTWV0aG9kc1xcblxcdFxcdFxcdFxcdFxcdFxcdFxcdFwiKV1cbiAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgIF9jKFwibGlcIiwgW1xuICAgICAgICAgICAgICBfYyhcbiAgICAgICAgICAgICAgICBcImFcIixcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogXCJkcm9wZG93bi1pdGVtXCIsXG4gICAgICAgICAgICAgICAgICBhdHRyczogeyBocmVmOiBcIiN1bC1jb25zb2xlLW1ldGhvZHNcIiB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgW192bS5fdihcIlxcblxcdFxcdFxcdFxcdFxcdFxcdFxcdFxcdENvbnNvbGUgTWV0aG9kc1xcblxcdFxcdFxcdFxcdFxcdFxcdFxcdFwiKV1cbiAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgIF9jKFwibGlcIiwgW19jKFwiaHJcIiwgeyBzdGF0aWNDbGFzczogXCJkcm9wZG93bi1kaXZpZGVyXCIgfSldKSxcbiAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICBfYyhcImxpXCIsIFtcbiAgICAgICAgICAgICAgX2MoXG4gICAgICAgICAgICAgICAgXCJhXCIsXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6IFwiZHJvcGRvd24taXRlbVwiLFxuICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogXCIjdWwtZXhhbXBsZXNcIiB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgW192bS5fdihcIkV4YW1wbGVzXCIpXVxuICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgXSksXG4gICAgICAgICAgXVxuICAgICAgICApLFxuICAgICAgXSksXG4gICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgX2MoXCJsaVwiLCB7IHN0YXRpY0NsYXNzOiBcIm5hdi1pdGVtIGRyb3Bkb3duXCIgfSwgW1xuICAgICAgICBfYyhcbiAgICAgICAgICBcImFcIixcbiAgICAgICAgICB7XG4gICAgICAgICAgICBzdGF0aWNDbGFzczogXCJuYXYtbGluayBkcm9wZG93bi10b2dnbGVcIixcbiAgICAgICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgICAgIGhyZWY6IFwiI1wiLFxuICAgICAgICAgICAgICBpZDogXCJleGFtcGxlcy1kcm9wZG93blwiLFxuICAgICAgICAgICAgICByb2xlOiBcImJ1dHRvblwiLFxuICAgICAgICAgICAgICBcImRhdGEtYnMtdG9nZ2xlXCI6IFwiZHJvcGRvd25cIixcbiAgICAgICAgICAgICAgXCJhcmlhLWV4cGFuZGVkXCI6IFwiZmFsc2VcIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgICBbX3ZtLl92KFwiXFxuXFx0XFx0XFx0XFx0XFx0XFx0RXhhbXBsZXNcXG5cXHRcXHRcXHRcXHRcXHRcIildXG4gICAgICAgICksXG4gICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgIF9jKFxuICAgICAgICAgIFwidWxcIixcbiAgICAgICAgICB7XG4gICAgICAgICAgICBzdGF0aWNDbGFzczogXCJkcm9wZG93bi1tZW51IGRyb3Bkb3duLW1lbnUtZGFya1wiLFxuICAgICAgICAgICAgYXR0cnM6IHsgXCJhcmlhLWxhYmVsbGVkYnlcIjogXCJleGFtcGxlcy1kcm9wZG93blwiIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgICBbXG4gICAgICAgICAgICBfYyhcImxpXCIsIFtcbiAgICAgICAgICAgICAgX2MoXG4gICAgICAgICAgICAgICAgXCJhXCIsXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6IFwiZHJvcGRvd24taXRlbVwiLFxuICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogXCIjc2ltcGxlLWV4YW1wbGVzXCIgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIFtfdm0uX3YoXCJTaW1wbGVcIildXG4gICAgICAgICAgICAgICksXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICBfYyhcImxpXCIsIFtcbiAgICAgICAgICAgICAgX2MoXCJoNlwiLCB7IHN0YXRpY0NsYXNzOiBcImRyb3Bkb3duLWhlYWRlclwiIH0sIFtfdm0uX3YoXCJPcHRpb25zXCIpXSksXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICBfYyhcImxpXCIsIFtcbiAgICAgICAgICAgICAgX2MoXG4gICAgICAgICAgICAgICAgXCJhXCIsXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6IFwiZHJvcGRvd24taXRlbVwiLFxuICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogXCIjdGV4dC1leGFtcGxlc1wiIH0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBbX3ZtLl92KFwidGV4dFwiKV1cbiAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgIF9jKFwibGlcIiwgW1xuICAgICAgICAgICAgICBfYyhcbiAgICAgICAgICAgICAgICBcImFcIixcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogXCJkcm9wZG93bi1pdGVtXCIsXG4gICAgICAgICAgICAgICAgICBhdHRyczogeyBocmVmOiBcIiN0eXBlLWV4YW1wbGVzXCIgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIFtfdm0uX3YoXCJ0eXBlXCIpXVxuICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgX2MoXCJsaVwiLCBbXG4gICAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICAgIFwiYVwiLFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiBcImRyb3Bkb3duLWl0ZW1cIixcbiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6IFwiI3N0eWxlcy1leGFtcGxlc1wiIH0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBbX3ZtLl92KFwic3R5bGVzXCIpXVxuICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgX2MoXCJsaVwiLCBbXG4gICAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICAgIFwiYVwiLFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiBcImRyb3Bkb3duLWl0ZW1cIixcbiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6IFwiI2Rpc2FibGVkLWV4YW1wbGVzXCIgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIFtfdm0uX3YoXCJkaXNhYmxlZFwiKV1cbiAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgIF9jKFwibGlcIiwgW1xuICAgICAgICAgICAgICBfYyhcbiAgICAgICAgICAgICAgICBcImFcIixcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogXCJkcm9wZG93bi1pdGVtXCIsXG4gICAgICAgICAgICAgICAgICBhdHRyczogeyBocmVmOiBcIiNsb2dQcmVmaXgtZXhhbXBsZXNcIiB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgW192bS5fdihcIlxcblxcdFxcdFxcdFxcdFxcdFxcdFxcdFxcdGxvZ1ByZWZpeFxcblxcdFxcdFxcdFxcdFxcdFxcdFxcdFwiKV1cbiAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgIF9jKFwibGlcIiwgW1xuICAgICAgICAgICAgICBfYyhcbiAgICAgICAgICAgICAgICBcImFcIixcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogXCJkcm9wZG93bi1pdGVtXCIsXG4gICAgICAgICAgICAgICAgICBhdHRyczogeyBocmVmOiBcIiNtYWdpY2FsLWV4YW1wbGVzXCIgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIFtfdm0uX3YoXCJtYWdpY2FsXCIpXVxuICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgX2MoXCJsaVwiLCBbXG4gICAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICAgIFwiYVwiLFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiBcImRyb3Bkb3duLWl0ZW1cIixcbiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6IFwiI25hbWUtZXhhbXBsZXNcIiB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgW192bS5fdihcIm5hbWVcIildXG4gICAgICAgICAgICAgICksXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICBfYyhcImxpXCIsIFtcbiAgICAgICAgICAgICAgX2MoXG4gICAgICAgICAgICAgICAgXCJhXCIsXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6IFwiZHJvcGRvd24taXRlbVwiLFxuICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogXCIjb2JqZWN0cy1leGFtcGxlc1wiIH0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBbX3ZtLl92KFwib2JqZWN0c1wiKV1cbiAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgIF9jKFwibGlcIiwgW1xuICAgICAgICAgICAgICBfYyhcbiAgICAgICAgICAgICAgICBcImFcIixcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogXCJkcm9wZG93bi1pdGVtXCIsXG4gICAgICAgICAgICAgICAgICBhdHRyczogeyBocmVmOiBcIiNhcnJheS1leGFtcGxlc1wiIH0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBbX3ZtLl92KFwiYXJyYXlcIildXG4gICAgICAgICAgICAgICksXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICBdXG4gICAgICAgICksXG4gICAgICBdKSxcbiAgICBdKVxuICB9LFxuXVxucmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlXG5cbmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0iLCJ2YXIgcmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICB2YXIgX3ZtID0gdGhpc1xuICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gIHJldHVybiBfYyhcImRpdlwiLCBbXG4gICAgX3ZtLl9tKDApLFxuICAgIF92bS5fdihcIiBcIiksXG4gICAgX2MoXG4gICAgICBcImRpdlwiLFxuICAgICAgeyBzdGF0aWNDbGFzczogXCJyb3cgbWItNFwiLCBhdHRyczogeyBpZDogXCJhcnJheS1zaW1wbGUtZXhhbXBsZVwiIH0gfSxcbiAgICAgIFtcbiAgICAgICAgX3ZtLl9tKDEpLFxuICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICBfYyhcbiAgICAgICAgICBcImRpdlwiLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHN0YXRpY0NsYXNzOlxuICAgICAgICAgICAgICBcImNvbC14bC00IGNvbC02IGQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXIganVzdGlmeS1jb250ZW50LWVuZFwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgW1xuICAgICAgICAgICAgX2MoXG4gICAgICAgICAgICAgIFwiYnV0dG9uXCIsXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogXCJidG4gYnRuLW91dGxpbmUtcHJpbWFyeSBidG4tc21cIixcbiAgICAgICAgICAgICAgICBhdHRyczogeyB0eXBlOiBcImJ1dHRvblwiIH0sXG4gICAgICAgICAgICAgICAgb246IHsgY2xpY2s6IF92bS5zaW1wbGVFeGFtcGxlIH0sXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIFtfdm0uX3YoXCJcXG5cXHRcXHRcXHRcXHRcXHRSdW5cXG5cXHRcXHRcXHRcXHRcIildXG4gICAgICAgICAgICApLFxuICAgICAgICAgIF1cbiAgICAgICAgKSxcbiAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgX2MoXG4gICAgICAgICAgXCJkaXZcIixcbiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiBcImNvbC14bC04IGNvbC1sZy0xMlwiIH0sXG4gICAgICAgICAgW1xuICAgICAgICAgICAgX2MoXCJ2dWUtY29kZS1oaWdobGlnaHRcIiwgeyBhdHRyczogeyBsYW5ndWFnZTogXCJqc1wiIH0gfSwgW1xuICAgICAgICAgICAgICBfYyhcInByZVwiLCBbXG4gICAgICAgICAgICAgICAgX3ZtLl92KFxuICAgICAgICAgICAgICAgICAgXCJ0aGlzLiR1bmljb3JuTG9nKHtcXG5cXHR0ZXh0OiAnSGVsbG8gV29ybGQnLFxcblxcdGFycmF5OiBbJ2ZvbycsICdiYXInXSxcXG59KTtcXG5cXHRcXHRcXHRcXHRcXHRcXHRcIlxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgXSksXG4gICAgICAgICAgXSxcbiAgICAgICAgICAxXG4gICAgICAgICksXG4gICAgICBdXG4gICAgKSxcbiAgICBfdm0uX3YoXCIgXCIpLFxuICAgIF9jKFxuICAgICAgXCJkaXZcIixcbiAgICAgIHsgc3RhdGljQ2xhc3M6IFwicm93IG1iLTRcIiwgYXR0cnM6IHsgaWQ6IFwiYXJyYXktb2JqZWN0cy1leGFtcGxlXCIgfSB9LFxuICAgICAgW1xuICAgICAgICBfdm0uX20oMiksXG4gICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgIF9jKFxuICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAge1xuICAgICAgICAgICAgc3RhdGljQ2xhc3M6XG4gICAgICAgICAgICAgIFwiY29sLXhsLTQgY29sLTYgZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNvbnRlbnQtZW5kXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICBbXG4gICAgICAgICAgICBfYyhcbiAgICAgICAgICAgICAgXCJidXR0b25cIixcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiBcImJ0biBidG4tb3V0bGluZS1wcmltYXJ5IGJ0bi1zbVwiLFxuICAgICAgICAgICAgICAgIGF0dHJzOiB7IHR5cGU6IFwiYnV0dG9uXCIgfSxcbiAgICAgICAgICAgICAgICBvbjogeyBjbGljazogX3ZtLm9iamVjdEFycmF5IH0sXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIFtfdm0uX3YoXCJcXG5cXHRcXHRcXHRcXHRcXHRSdW5cXG5cXHRcXHRcXHRcXHRcIildXG4gICAgICAgICAgICApLFxuICAgICAgICAgIF1cbiAgICAgICAgKSxcbiAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgX2MoXG4gICAgICAgICAgXCJkaXZcIixcbiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiBcImNvbC14bC04IGNvbC1sZy0xMlwiIH0sXG4gICAgICAgICAgW1xuICAgICAgICAgICAgX2MoXCJ2dWUtY29kZS1oaWdobGlnaHRcIiwgeyBhdHRyczogeyBsYW5ndWFnZTogXCJqc1wiIH0gfSwgW1xuICAgICAgICAgICAgICBfYyhcInByZVwiLCBbXG4gICAgICAgICAgICAgICAgX3ZtLl92KFxuICAgICAgICAgICAgICAgICAgXCJjb25zdCBmb28gPSB7IGZvbzogJ2ZvbyAnIH07XFxuY29uc3QgYmFyID0geyBiYXI6ICdiYXIgJyB9O1xcblxcbnRoaXMuJHVuaWNvcm5Mb2coe1xcblxcdHRleHQ6ICdIZWxsbyBXb3JsZCcsXFxuXFx0YXJyYXk6IFtmb28sIGJhcl0sXFxufSk7XFxuXFx0XFx0XFx0XFx0XFx0XFx0XCJcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgIF0sXG4gICAgICAgICAgMVxuICAgICAgICApLFxuICAgICAgXVxuICAgICksXG4gICAgX3ZtLl92KFwiIFwiKSxcbiAgICBfYyhcbiAgICAgIFwiZGl2XCIsXG4gICAgICB7IHN0YXRpY0NsYXNzOiBcInJvdyBtYi00XCIsIGF0dHJzOiB7IGlkOiBcImFycmF5LXNwcmVhZC1leGFtcGxlXCIgfSB9LFxuICAgICAgW1xuICAgICAgICBfdm0uX20oMyksXG4gICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgIF9jKFxuICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAge1xuICAgICAgICAgICAgc3RhdGljQ2xhc3M6XG4gICAgICAgICAgICAgIFwiY29sLXhsLTQgY29sLTYgZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNvbnRlbnQtZW5kXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICBbXG4gICAgICAgICAgICBfYyhcbiAgICAgICAgICAgICAgXCJidXR0b25cIixcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiBcImJ0biBidG4tb3V0bGluZS1wcmltYXJ5IGJ0bi1zbVwiLFxuICAgICAgICAgICAgICAgIGF0dHJzOiB7IHR5cGU6IFwiYnV0dG9uXCIgfSxcbiAgICAgICAgICAgICAgICBvbjogeyBjbGljazogX3ZtLmFycmF5U3ByZWFkT3BlcmF0b3IgfSxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgW192bS5fdihcIlxcblxcdFxcdFxcdFxcdFxcdFJ1blxcblxcdFxcdFxcdFxcdFwiKV1cbiAgICAgICAgICAgICksXG4gICAgICAgICAgXVxuICAgICAgICApLFxuICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICBfYyhcbiAgICAgICAgICBcImRpdlwiLFxuICAgICAgICAgIHsgc3RhdGljQ2xhc3M6IFwiY29sLXhsLTggY29sLWxnLTEyXCIgfSxcbiAgICAgICAgICBbXG4gICAgICAgICAgICBfYyhcInZ1ZS1jb2RlLWhpZ2hsaWdodFwiLCB7IGF0dHJzOiB7IGxhbmd1YWdlOiBcImpzXCIgfSB9LCBbXG4gICAgICAgICAgICAgIF9jKFwicHJlXCIsIFtcbiAgICAgICAgICAgICAgICBfdm0uX3YoXG4gICAgICAgICAgICAgICAgICBcImNvbnN0IGZvbyA9IFsnZm9vJ107XFxuY29uc3QgYmFyID0gWydiYXInXTtcXG5cXG50aGlzLiR1bmljb3JuTG9nKHtcXG5cXHR0ZXh0OiAnSGVsbG8gV29ybGQnLFxcblxcdGFycmF5OiBbLi4uZm9vLCAuLi5iYXJdLFxcbn0pO1xcblxcdFxcdFxcdFxcdFxcdFxcdFwiXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICBdLFxuICAgICAgICAgIDFcbiAgICAgICAgKSxcbiAgICAgIF1cbiAgICApLFxuICBdKVxufVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtcbiAgZnVuY3Rpb24gKCkge1xuICAgIHZhciBfdm0gPSB0aGlzXG4gICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50XG4gICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gICAgcmV0dXJuIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwicm93IG1iLTJcIiB9LCBbXG4gICAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImNvbC0xMlwiIH0sIFtcbiAgICAgICAgX2MoXCJoNVwiLCB7IHN0YXRpY0NsYXNzOiBcIm15LTBcIiB9LCBbX2MoXCJjb2RlXCIsIFtfdm0uX3YoXCJhcnJheVwiKV0pXSksXG4gICAgICBdKSxcbiAgICBdKVxuICB9LFxuICBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF92bSA9IHRoaXNcbiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2hcbiAgICByZXR1cm4gX2MoXG4gICAgICBcImRpdlwiLFxuICAgICAgeyBzdGF0aWNDbGFzczogXCJjb2wteGwtNCBjb2wtNiBkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyXCIgfSxcbiAgICAgIFtfYyhcImg2XCIsIHsgc3RhdGljQ2xhc3M6IFwibXktMFwiIH0sIFtfdm0uX3YoXCJTaW5nbGUgYXJyYXlcIildKV1cbiAgICApXG4gIH0sXG4gIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX3ZtID0gdGhpc1xuICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICAgIHJldHVybiBfYyhcbiAgICAgIFwiZGl2XCIsXG4gICAgICB7IHN0YXRpY0NsYXNzOiBcImNvbC14bC00IGNvbC02IGQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXJcIiB9LFxuICAgICAgW19jKFwiaDZcIiwgeyBzdGF0aWNDbGFzczogXCJteS0wXCIgfSwgW192bS5fdihcIlVzaW5nIGFuIGFycmF5IG9mIG9iamVjdHNcIildKV1cbiAgICApXG4gIH0sXG4gIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX3ZtID0gdGhpc1xuICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICAgIHJldHVybiBfYyhcbiAgICAgIFwiZGl2XCIsXG4gICAgICB7IHN0YXRpY0NsYXNzOiBcImNvbC14bC00IGNvbC02IGQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXJcIiB9LFxuICAgICAgW1xuICAgICAgICBfYyhcImg2XCIsIHsgc3RhdGljQ2xhc3M6IFwibXktMFwiIH0sIFtcbiAgICAgICAgICBfdm0uX3YoXCJVc2luZyBhcnJheSBzcHJlYWQgT3BlcmF0b3JcIiksXG4gICAgICAgIF0pLFxuICAgICAgXVxuICAgIClcbiAgfSxcbl1cbnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZVxuXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIF92bSA9IHRoaXNcbiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50XG4gIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICByZXR1cm4gX2MoXCJkaXZcIiwgW1xuICAgIF92bS5fbSgwKSxcbiAgICBfdm0uX3YoXCIgXCIpLFxuICAgIF9jKFxuICAgICAgXCJkaXZcIixcbiAgICAgIHsgc3RhdGljQ2xhc3M6IFwicm93IG1iLTRcIiwgYXR0cnM6IHsgaWQ6IFwiZGlzYWJsZWQtc2ltcGxlLWV4YW1wbGVcIiB9IH0sXG4gICAgICBbXG4gICAgICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiY29sLXhsLTQgY29sLTYgZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlclwiIH0sIFtcbiAgICAgICAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImZvcm0tY2hlY2sgZm9ybS1zd2l0Y2hcIiB9LCBbXG4gICAgICAgICAgICBfYyhcImlucHV0XCIsIHtcbiAgICAgICAgICAgICAgZGlyZWN0aXZlczogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIG5hbWU6IFwibW9kZWxcIixcbiAgICAgICAgICAgICAgICAgIHJhd05hbWU6IFwidi1tb2RlbFwiLFxuICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS5pc0Rpc2FibGVkLFxuICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogXCJpc0Rpc2FibGVkXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6IFwiZm9ybS1jaGVjay1pbnB1dFwiLFxuICAgICAgICAgICAgICBhdHRyczogeyB0eXBlOiBcImNoZWNrYm94XCIsIHJvbGU6IFwic3dpdGNoXCIsIGNoZWNrZWQ6IFwiXCIgfSxcbiAgICAgICAgICAgICAgZG9tUHJvcHM6IHtcbiAgICAgICAgICAgICAgICBjaGVja2VkOiBBcnJheS5pc0FycmF5KF92bS5pc0Rpc2FibGVkKVxuICAgICAgICAgICAgICAgICAgPyBfdm0uX2koX3ZtLmlzRGlzYWJsZWQsIG51bGwpID4gLTFcbiAgICAgICAgICAgICAgICAgIDogX3ZtLmlzRGlzYWJsZWQsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIG9uOiB7XG4gICAgICAgICAgICAgICAgY2hhbmdlOiBmdW5jdGlvbiAoJGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICB2YXIgJCRhID0gX3ZtLmlzRGlzYWJsZWQsXG4gICAgICAgICAgICAgICAgICAgICQkZWwgPSAkZXZlbnQudGFyZ2V0LFxuICAgICAgICAgICAgICAgICAgICAkJGMgPSAkJGVsLmNoZWNrZWQgPyB0cnVlIDogZmFsc2VcbiAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KCQkYSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyICQkdiA9IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgJCRpID0gX3ZtLl9pKCQkYSwgJCR2KVxuICAgICAgICAgICAgICAgICAgICBpZiAoJCRlbC5jaGVja2VkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgJCRpIDwgMCAmJiAoX3ZtLmlzRGlzYWJsZWQgPSAkJGEuY29uY2F0KFskJHZdKSlcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAkJGkgPiAtMSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgKF92bS5pc0Rpc2FibGVkID0gJCRhXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC5zbGljZSgwLCAkJGkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC5jb25jYXQoJCRhLnNsaWNlKCQkaSArIDEpKSlcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgX3ZtLmlzRGlzYWJsZWQgPSAkJGNcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgX2MoXCJsYWJlbFwiLCB7IHN0YXRpY0NsYXNzOiBcImZvcm0tY2hlY2stbGFiZWxcIiB9LCBbXG4gICAgICAgICAgICAgIF92bS5fdihcImRpc2FibGVkID1cXG5cXHRcXHRcXHRcXHRcXHRcXHRcIiksXG4gICAgICAgICAgICAgIF9jKFwic3BhblwiLCB7IHN0YXRpY0NsYXNzOiBcImJvb2xlYW4tc3R5bGVcIiB9LCBbXG4gICAgICAgICAgICAgICAgX3ZtLl92KF92bS5fcyhfdm0uaXNEaXNhYmxlZCkpLFxuICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgIF0pLFxuICAgICAgICBdKSxcbiAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgX2MoXG4gICAgICAgICAgXCJkaXZcIixcbiAgICAgICAgICB7XG4gICAgICAgICAgICBzdGF0aWNDbGFzczpcbiAgICAgICAgICAgICAgXCJjb2wteGwtNCBjb2wtNiBkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyIGp1c3RpZnktY29udGVudC1lbmRcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIFtcbiAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICBcImJ1dHRvblwiLFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6IFwiYnRuIGJ0bi1vdXRsaW5lLXByaW1hcnkgYnRuLXNtXCIsXG4gICAgICAgICAgICAgICAgYXR0cnM6IHsgdHlwZTogXCJidXR0b25cIiB9LFxuICAgICAgICAgICAgICAgIG9uOiB7IGNsaWNrOiBfdm0uc2ltcGxlRXhhbXBsZSB9LFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBbX3ZtLl92KFwiXFxuXFx0XFx0XFx0XFx0XFx0UnVuXFxuXFx0XFx0XFx0XFx0XCIpXVxuICAgICAgICAgICAgKSxcbiAgICAgICAgICBdXG4gICAgICAgICksXG4gICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgIF9jKFxuICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAgeyBzdGF0aWNDbGFzczogXCJjb2wteGwtOCBjb2wtbGctMTJcIiB9LFxuICAgICAgICAgIFtcbiAgICAgICAgICAgIF9jKFwidnVlLWNvZGUtaGlnaGxpZ2h0XCIsIHsgYXR0cnM6IHsgbGFuZ3VhZ2U6IFwianNcIiB9IH0sIFtcbiAgICAgICAgICAgICAgX2MoXCJwcmVcIiwgW1xuICAgICAgICAgICAgICAgIF92bS5fdihcbiAgICAgICAgICAgICAgICAgIFwidGhpcy4kdW5pY29ybkxvZyh7XFxuXFx0dGV4dDogJ0hlbGxvIFdvcmxkJyxcXG5cXHRkaXNhYmxlZDogdHJ1ZSxcXG59KTtcXG5cXHRcXHRcXHRcXHRcXHRcXHRcIlxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgXSksXG4gICAgICAgICAgXSxcbiAgICAgICAgICAxXG4gICAgICAgICksXG4gICAgICBdXG4gICAgKSxcbiAgICBfdm0uX3YoXCIgXCIpLFxuICAgIF9jKFxuICAgICAgXCJkaXZcIixcbiAgICAgIHtcbiAgICAgICAgc3RhdGljQ2xhc3M6IFwicm93IG1iLTRcIixcbiAgICAgICAgYXR0cnM6IHsgaWQ6IFwiZGlzYWJsZWQtY29uZGl0aW9uYWwtZXhhbXBsZVwiIH0sXG4gICAgICB9LFxuICAgICAgW1xuICAgICAgICBfdm0uX20oMSksXG4gICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgIF9jKFxuICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAgeyBzdGF0aWNDbGFzczogXCJjb2wteGwtOCBjb2wtbGctMTJcIiB9LFxuICAgICAgICAgIFtcbiAgICAgICAgICAgIF9jKFwidnVlLWNvZGUtaGlnaGxpZ2h0XCIsIHsgYXR0cnM6IHsgbGFuZ3VhZ2U6IFwianNcIiB9IH0sIFtcbiAgICAgICAgICAgICAgX2MoXCJwcmVcIiwgW1xuICAgICAgICAgICAgICAgIF92bS5fdihcbiAgICAgICAgICAgICAgICAgIFwidGhpcy4kdW5pY29ybkxvZyh7XFxuXFx0dGV4dDogJ0hlbGxvIFdvcmxkJyxcXG5cXHRkaXNhYmxlZDogcHJvY2Vzcy5lbnYuVU5JQ09STl9MT0cgIT09ICd0cnVlJyxcXG59KTtcXG5cXHRcXHRcXHRcXHRcXHRcXHRcIlxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgXSksXG4gICAgICAgICAgXSxcbiAgICAgICAgICAxXG4gICAgICAgICksXG4gICAgICBdXG4gICAgKSxcbiAgXSlcbn1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXG4gIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX3ZtID0gdGhpc1xuICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICAgIHJldHVybiBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcInJvdyBtYi0yXCIgfSwgW1xuICAgICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJjb2wtMTJcIiB9LCBbXG4gICAgICAgIF9jKFwiaDVcIiwgeyBzdGF0aWNDbGFzczogXCJteS0wXCIgfSwgW19jKFwiY29kZVwiLCBbX3ZtLl92KFwiZGlzYWJsZWRcIildKV0pLFxuICAgICAgXSksXG4gICAgXSlcbiAgfSxcbiAgZnVuY3Rpb24gKCkge1xuICAgIHZhciBfdm0gPSB0aGlzXG4gICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50XG4gICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gICAgcmV0dXJuIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiY29sLTEyXCIgfSwgW1xuICAgICAgX2MoXCJoNlwiLCB7IHN0YXRpY0NsYXNzOiBcIm15LTBcIiB9LCBbX3ZtLl92KFwiVXNpbmcgYW4gLmVudiB2YXJpYWJsZVwiKV0pLFxuICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiZnN0LWl0YWxpY1wiIH0sIFtcbiAgICAgICAgX3ZtLl92KFxuICAgICAgICAgIFwiXFxuXFx0XFx0XFx0XFx0XFx0Q29uZGl0aW9uYWxseSBzZXQgc28gaXQgd2lsbCBsb2cgaW4gZGV2ZWxvcG1lbnQsIGJ1dCBub3Qgb24gdGhlXFxuXFx0XFx0XFx0XFx0XFx0cHJvZHVjdGlvbiBzaXRlLlxcblxcdFxcdFxcdFxcdFwiXG4gICAgICAgICksXG4gICAgICBdKSxcbiAgICBdKVxuICB9LFxuXVxucmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlXG5cbmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0iLCJ2YXIgcmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICB2YXIgX3ZtID0gdGhpc1xuICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gIHJldHVybiBfYyhcImRpdlwiLCBbXG4gICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJyb3cgbWItMlwiIH0sIFtcbiAgICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiY29sLTEyXCIgfSwgW1xuICAgICAgICBfYyhcImg1XCIsIHsgc3RhdGljQ2xhc3M6IFwibXktMFwiIH0sIFtcbiAgICAgICAgICBfYyhcImNvZGVcIiwgW192bS5fdihfdm0uX3MoX3ZtLmlzTmFtZU9wdGlvbiA/IFwibmFtZVwiIDogXCJsb2dQcmVmaXhcIikpXSksXG4gICAgICAgIF0pLFxuICAgICAgXSksXG4gICAgXSksXG4gICAgX3ZtLl92KFwiIFwiKSxcbiAgICAhX3ZtLmlzTmFtZU9wdGlvblxuICAgICAgPyBfYyhcbiAgICAgICAgICBcImRpdlwiLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiBcInJvdyBtYi00XCIsXG4gICAgICAgICAgICBhdHRyczogeyBpZDogXCJsb2dQcmVmaXgtc2ltcGxlLWV4YW1wbGVcIiB9LFxuICAgICAgICAgIH0sXG4gICAgICAgICAgW1xuICAgICAgICAgICAgX2MoXG4gICAgICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6IFwiY29sLXhsLTQgY29sLTYgZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlclwiIH0sXG4gICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICBfYyhcImlucHV0XCIsIHtcbiAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFtcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwibW9kZWxcIixcbiAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiBcInYtbW9kZWxcIixcbiAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLmxvZ1ByZWZpeCxcbiAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiBcImxvZ1ByZWZpeFwiLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiBcImZvcm0tY29udHJvbFwiLFxuICAgICAgICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ0ZXh0XCIsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiBcIltCdW5uaWVzXTpcIixcbiAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6IFwiW0J1bm5pZXNdOlwiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIGRvbVByb3BzOiB7IHZhbHVlOiBfdm0ubG9nUHJlZml4IH0sXG4gICAgICAgICAgICAgICAgICBvbjoge1xuICAgICAgICAgICAgICAgICAgICBpbnB1dDogZnVuY3Rpb24gKCRldmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgIGlmICgkZXZlbnQudGFyZ2V0LmNvbXBvc2luZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIF92bS5sb2dQcmVmaXggPSAkZXZlbnQudGFyZ2V0LnZhbHVlXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICBdXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICBcImRpdlwiLFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6XG4gICAgICAgICAgICAgICAgICBcImNvbC14bC00IGNvbC02IGQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXIganVzdGlmeS1jb250ZW50LWVuZFwiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgX2MoXG4gICAgICAgICAgICAgICAgICBcImJ1dHRvblwiLFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogXCJidG4gYnRuLW91dGxpbmUtcHJpbWFyeSBidG4tc21cIixcbiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgdHlwZTogXCJidXR0b25cIiB9LFxuICAgICAgICAgICAgICAgICAgICBvbjogeyBjbGljazogX3ZtLnNpbXBsZUV4YW1wbGUgfSxcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICBbX3ZtLl92KFwiXFxuXFx0XFx0XFx0XFx0XFx0UnVuXFxuXFx0XFx0XFx0XFx0XCIpXVxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgX2MoXG4gICAgICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6IFwiY29sLXhsLTggY29sLWxnLTEyXCIgfSxcbiAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgIF9jKFwidnVlLWNvZGUtaGlnaGxpZ2h0XCIsIHsgYXR0cnM6IHsgbGFuZ3VhZ2U6IFwianNcIiB9IH0sIFtcbiAgICAgICAgICAgICAgICAgIF9jKFwicHJlXCIsIFtcbiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFxuICAgICAgICAgICAgICAgICAgICAgIFwidGhpcy4kdW5pY29ybkxvZyh7XFxuXFx0dGV4dDogJ0hlbGxvIFdvcmxkJyxcXG5cXHRsb2dQcmVmaXg6ICdbQnVubmllc106JyxcXG59KTtcXG5cXHRcXHRcXHRcXHRcXHRcXHRcIlxuICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgIDFcbiAgICAgICAgICAgICksXG4gICAgICAgICAgXVxuICAgICAgICApXG4gICAgICA6IF92bS5fZSgpLFxuICAgIF92bS5fdihcIiBcIiksXG4gICAgIV92bS5pc05hbWVPcHRpb25cbiAgICAgID8gX2MoXG4gICAgICAgICAgXCJkaXZcIixcbiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiBcInJvdyBtYi00XCIsIGF0dHJzOiB7IGlkOiBcIm5hbWUtZGVmYXVsdC1leGFtcGxlXCIgfSB9LFxuICAgICAgICAgIFtcbiAgICAgICAgICAgIF92bS5fbSgwKSxcbiAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICBfYyhcbiAgICAgICAgICAgICAgXCJkaXZcIixcbiAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogXCJjb2wteGwtNCBjb2wtNiBkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyXCIgfSxcbiAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiZm9ybS1jaGVjayBmb3JtLXN3aXRjaFwiIH0sIFtcbiAgICAgICAgICAgICAgICAgIF9jKFwiaW5wdXRcIiwge1xuICAgICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbXG4gICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJtb2RlbFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogXCJ2LW1vZGVsXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLndpdGhOYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogXCJ3aXRoTmFtZVwiLFxuICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiBcImZvcm0tY2hlY2staW5wdXRcIixcbiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgdHlwZTogXCJjaGVja2JveFwiLCByb2xlOiBcInN3aXRjaFwiLCBjaGVja2VkOiBcIlwiIH0sXG4gICAgICAgICAgICAgICAgICAgIGRvbVByb3BzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgY2hlY2tlZDogQXJyYXkuaXNBcnJheShfdm0ud2l0aE5hbWUpXG4gICAgICAgICAgICAgICAgICAgICAgICA/IF92bS5faShfdm0ud2l0aE5hbWUsIG51bGwpID4gLTFcbiAgICAgICAgICAgICAgICAgICAgICAgIDogX3ZtLndpdGhOYW1lLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBvbjoge1xuICAgICAgICAgICAgICAgICAgICAgIGNoYW5nZTogZnVuY3Rpb24gKCRldmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyICQkYSA9IF92bS53aXRoTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJCRlbCA9ICRldmVudC50YXJnZXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICQkYyA9ICQkZWwuY2hlY2tlZCA/IHRydWUgOiBmYWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoJCRhKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgJCR2ID0gbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkJGkgPSBfdm0uX2koJCRhLCAkJHYpXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkJGVsLmNoZWNrZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkJGkgPCAwICYmIChfdm0ud2l0aE5hbWUgPSAkJGEuY29uY2F0KFskJHZdKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkJGkgPiAtMSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKF92bS53aXRoTmFtZSA9ICQkYVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuc2xpY2UoMCwgJCRpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuY29uY2F0KCQkYS5zbGljZSgkJGkgKyAxKSkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIF92bS53aXRoTmFtZSA9ICQkY1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICBfYyhcImxhYmVsXCIsIHsgc3RhdGljQ2xhc3M6IFwiZm9ybS1jaGVjay1sYWJlbFwiIH0sIFtcbiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwibG9nUHJlZml4IG9wdGlvbiA9XFxuXFx0XFx0XFx0XFx0XFx0XFx0XCIpLFxuICAgICAgICAgICAgICAgICAgICBfYyhcInNwYW5cIiwgeyBzdGF0aWNDbGFzczogXCJib29sZWFuLXN0eWxlXCIgfSwgW1xuICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihfdm0uX3MoX3ZtLndpdGhOYW1lKSksXG4gICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgd2l0aCBkZWZhdWx0XFxuXFx0XFx0XFx0XFx0XFx0XFx0XCIpLFxuICAgICAgICAgICAgICAgICAgICBfYyhcImNvZGVcIiwgW192bS5fdihcIm5hbWVcIildKSxcbiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIG9wdGlvblxcblxcdFxcdFxcdFxcdFxcdFwiKSxcbiAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICBdXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICBcImRpdlwiLFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6XG4gICAgICAgICAgICAgICAgICBcImNvbC14bC00IGNvbC02IGQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXIganVzdGlmeS1jb250ZW50LWVuZFwiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgX2MoXG4gICAgICAgICAgICAgICAgICBcImJ1dHRvblwiLFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogXCJidG4gYnRuLW91dGxpbmUtcHJpbWFyeSBidG4tc21cIixcbiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgdHlwZTogXCJidXR0b25cIiB9LFxuICAgICAgICAgICAgICAgICAgICBvbjogeyBjbGljazogX3ZtLmV4YW1wbGVOYW1lRGVmYXVsdCB9LFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIFtfdm0uX3YoXCJcXG5cXHRcXHRcXHRcXHRcXHRSdW5cXG5cXHRcXHRcXHRcXHRcIildXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICBfYyhcbiAgICAgICAgICAgICAgXCJkaXZcIixcbiAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogXCJjb2wteGwtOCBjb2wtbGctMTJcIiB9LFxuICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgX2MoXCJ2dWUtY29kZS1oaWdobGlnaHRcIiwgeyBhdHRyczogeyBsYW5ndWFnZTogXCJqc1wiIH0gfSwgW1xuICAgICAgICAgICAgICAgICAgX2MoXCJwcmVcIiwgW1xuICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXG4gICAgICAgICAgICAgICAgICAgICAgXCJ0aGlzLiR1bmljb3JuTG9nKHtcXG5cXHR0ZXh0OiAnSGVsbG8gV29ybGQnLFxcblxcdGxvZ1ByZWZpeDogdHJ1ZSxcXG59KTtcXG5cXHRcXHRcXHRcXHRcXHRcXHRcIlxuICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgIDFcbiAgICAgICAgICAgICksXG4gICAgICAgICAgXVxuICAgICAgICApXG4gICAgICA6IF92bS5fZSgpLFxuICAgIF92bS5fdihcIiBcIiksXG4gICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJyb3cgbWItNFwiLCBhdHRyczogeyBpZDogXCJuYW1lLWV4YW1wbGVcIiB9IH0sIFtcbiAgICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiY29sLXhsLTQgY29sLTYgZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlclwiIH0sIFtcbiAgICAgICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJmb3JtLWNoZWNrIGZvcm0tc3dpdGNoXCIgfSwgW1xuICAgICAgICAgIF9jKFwiaW5wdXRcIiwge1xuICAgICAgICAgICAgZGlyZWN0aXZlczogW1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJtb2RlbFwiLFxuICAgICAgICAgICAgICAgIHJhd05hbWU6IFwidi1tb2RlbFwiLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0ud2l0aE5hbWUsXG4gICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogXCJ3aXRoTmFtZVwiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiBcImZvcm0tY2hlY2staW5wdXRcIixcbiAgICAgICAgICAgIGF0dHJzOiB7IHR5cGU6IFwiY2hlY2tib3hcIiwgcm9sZTogXCJzd2l0Y2hcIiwgY2hlY2tlZDogXCJcIiB9LFxuICAgICAgICAgICAgZG9tUHJvcHM6IHtcbiAgICAgICAgICAgICAgY2hlY2tlZDogQXJyYXkuaXNBcnJheShfdm0ud2l0aE5hbWUpXG4gICAgICAgICAgICAgICAgPyBfdm0uX2koX3ZtLndpdGhOYW1lLCBudWxsKSA+IC0xXG4gICAgICAgICAgICAgICAgOiBfdm0ud2l0aE5hbWUsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb246IHtcbiAgICAgICAgICAgICAgY2hhbmdlOiBmdW5jdGlvbiAoJGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgdmFyICQkYSA9IF92bS53aXRoTmFtZSxcbiAgICAgICAgICAgICAgICAgICQkZWwgPSAkZXZlbnQudGFyZ2V0LFxuICAgICAgICAgICAgICAgICAgJCRjID0gJCRlbC5jaGVja2VkID8gdHJ1ZSA6IGZhbHNlXG4gICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoJCRhKSkge1xuICAgICAgICAgICAgICAgICAgdmFyICQkdiA9IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICQkaSA9IF92bS5faSgkJGEsICQkdilcbiAgICAgICAgICAgICAgICAgIGlmICgkJGVsLmNoZWNrZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgJCRpIDwgMCAmJiAoX3ZtLndpdGhOYW1lID0gJCRhLmNvbmNhdChbJCR2XSkpXG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAkJGkgPiAtMSAmJlxuICAgICAgICAgICAgICAgICAgICAgIChfdm0ud2l0aE5hbWUgPSAkJGFcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zbGljZSgwLCAkJGkpXG4gICAgICAgICAgICAgICAgICAgICAgICAuY29uY2F0KCQkYS5zbGljZSgkJGkgKyAxKSkpXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIF92bS53aXRoTmFtZSA9ICQkY1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSksXG4gICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICBfYyhcImxhYmVsXCIsIHsgc3RhdGljQ2xhc3M6IFwiZm9ybS1jaGVjay1sYWJlbFwiIH0sIFtcbiAgICAgICAgICAgIF92bS5fdihcImxvZ1ByZWZpeCA9IFwiKSxcbiAgICAgICAgICAgIF9jKFwic3BhblwiLCB7IHN0YXRpY0NsYXNzOiBcImJvb2xlYW4tc3R5bGVcIiB9LCBbXG4gICAgICAgICAgICAgIF92bS5fdihfdm0uX3MoX3ZtLndpdGhOYW1lKSksXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIF92bS5fdihcIiB3aXRoXFxuXFx0XFx0XFx0XFx0XFx0XFx0XCIpLFxuICAgICAgICAgICAgX2MoXCJjb2RlXCIsIFtfdm0uX3YoXCJuYW1lXCIpXSksXG4gICAgICAgICAgICBfdm0uX3YoXCIgb3B0aW9uIHNldFxcblxcdFxcdFxcdFxcdFxcdFwiKSxcbiAgICAgICAgICBdKSxcbiAgICAgICAgXSksXG4gICAgICBdKSxcbiAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICBfYyhcbiAgICAgICAgXCJkaXZcIixcbiAgICAgICAge1xuICAgICAgICAgIHN0YXRpY0NsYXNzOlxuICAgICAgICAgICAgXCJjb2wteGwtNCBjb2wtNiBkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyIGp1c3RpZnktY29udGVudC1lbmRcIixcbiAgICAgICAgfSxcbiAgICAgICAgW1xuICAgICAgICAgIF9jKFxuICAgICAgICAgICAgXCJidXR0b25cIixcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6IFwiYnRuIGJ0bi1vdXRsaW5lLXByaW1hcnkgYnRuLXNtXCIsXG4gICAgICAgICAgICAgIGF0dHJzOiB7IHR5cGU6IFwiYnV0dG9uXCIgfSxcbiAgICAgICAgICAgICAgb246IHsgY2xpY2s6IF92bS5leGFtcGxlTmFtZSB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFtfdm0uX3YoXCJcXG5cXHRcXHRcXHRcXHRcXHRSdW5cXG5cXHRcXHRcXHRcXHRcIildXG4gICAgICAgICAgKSxcbiAgICAgICAgXVxuICAgICAgKSxcbiAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICBfYyhcbiAgICAgICAgXCJkaXZcIixcbiAgICAgICAgeyBzdGF0aWNDbGFzczogXCJjb2wteGwtOCBjb2wtbGctMTJcIiB9LFxuICAgICAgICBbXG4gICAgICAgICAgX2MoXCJ2dWUtY29kZS1oaWdobGlnaHRcIiwgeyBhdHRyczogeyBsYW5ndWFnZTogXCJqc1wiIH0gfSwgW1xuICAgICAgICAgICAgX2MoXCJwcmVcIiwgW1xuICAgICAgICAgICAgICBfdm0uX3YoXG4gICAgICAgICAgICAgICAgXCJ0aGlzLiR1bmljb3JuTG9nKHtcXG5cXHR0ZXh0OiAnSGVsbG8gV29ybGQnLFxcblxcdGxvZ1ByZWZpeDogdHJ1ZSxcXG5cXHRuYW1lOiAnXCIgK1xuICAgICAgICAgICAgICAgICAgX3ZtLl9zKF92bS5pc05hbWVPcHRpb24gPyBcIlN1c2FuXCIgOiBcIkJvYlwiKSArXG4gICAgICAgICAgICAgICAgICBcIicsXFxufSk7XFxuXFx0XFx0XFx0XFx0XFx0XFx0XCJcbiAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgIF0pLFxuICAgICAgICBdLFxuICAgICAgICAxXG4gICAgICApLFxuICAgIF0pLFxuICBdKVxufVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtcbiAgZnVuY3Rpb24gKCkge1xuICAgIHZhciBfdm0gPSB0aGlzXG4gICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50XG4gICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gICAgcmV0dXJuIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiY29sLTEyIG1iLTJcIiB9LCBbXG4gICAgICBfdm0uX3YoXCJcXG5cXHRcXHRcXHRcXHRJZiBcIiksXG4gICAgICBfYyhcImNvZGVcIiwgW192bS5fdihcImxvZ1ByZWZpeFwiKV0pLFxuICAgICAgX3ZtLl92KFwiIG9wdGlvbiBpcyBzZXQgYXMgYVxcblxcdFxcdFxcdFxcdFwiKSxcbiAgICAgIF9jKFwic3BhblwiLCB7IHN0YXRpY0NsYXNzOiBcIm9wdGlvbi10eXBlXCIgfSwgW192bS5fdihcIkJvb2xlYW5cIildKSxcbiAgICAgIF92bS5fdihcIiBvZlxcblxcdFxcdFxcdFxcdFwiKSxcbiAgICAgIF9jKFwic3BhblwiLCB7IHN0YXRpY0NsYXNzOiBcImJvb2xlYW4tc3R5bGVcIiB9LCBbX3ZtLl92KFwidHJ1ZVwiKV0pLFxuICAgICAgX3ZtLl92KFwiLCBpdCB3aWxsIHVzZSB0aGVcXG5cXHRcXHRcXHRcXHRcIiksXG4gICAgICBfYyhcImNvZGVcIiwgW192bS5fdihcIm5hbWVcIildKSxcbiAgICAgIF92bS5fdihcIiBvcHRpb24gZm9yIHRoZSBwcmVmaXguXFxuXFx0XFx0XFx0XCIpLFxuICAgIF0pXG4gIH0sXG5dXG5yZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWVcblxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSIsInZhciByZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBfdm0gPSB0aGlzXG4gIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2hcbiAgcmV0dXJuIF9jKFwiZGl2XCIsIFtcbiAgICBfdm0uX20oMCksXG4gICAgX3ZtLl92KFwiIFwiKSxcbiAgICBfYyhcbiAgICAgIFwiZGl2XCIsXG4gICAgICB7IHN0YXRpY0NsYXNzOiBcInJvdyBtYi00XCIsIGF0dHJzOiB7IGlkOiBcIm1hZ2ljYWwtc2ltcGxlLWV4YW1wbGVcIiB9IH0sXG4gICAgICBbXG4gICAgICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiY29sLXhsLTQgY29sLTYgZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlclwiIH0sIFtcbiAgICAgICAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImZvcm0tY2hlY2sgZm9ybS1zd2l0Y2hcIiB9LCBbXG4gICAgICAgICAgICBfYyhcImlucHV0XCIsIHtcbiAgICAgICAgICAgICAgZGlyZWN0aXZlczogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIG5hbWU6IFwibW9kZWxcIixcbiAgICAgICAgICAgICAgICAgIHJhd05hbWU6IFwidi1tb2RlbFwiLFxuICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS5tYWdpY2FsLFxuICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogXCJtYWdpY2FsXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6IFwiZm9ybS1jaGVjay1pbnB1dFwiLFxuICAgICAgICAgICAgICBhdHRyczogeyB0eXBlOiBcImNoZWNrYm94XCIsIHJvbGU6IFwic3dpdGNoXCIsIGNoZWNrZWQ6IFwiXCIgfSxcbiAgICAgICAgICAgICAgZG9tUHJvcHM6IHtcbiAgICAgICAgICAgICAgICBjaGVja2VkOiBBcnJheS5pc0FycmF5KF92bS5tYWdpY2FsKVxuICAgICAgICAgICAgICAgICAgPyBfdm0uX2koX3ZtLm1hZ2ljYWwsIG51bGwpID4gLTFcbiAgICAgICAgICAgICAgICAgIDogX3ZtLm1hZ2ljYWwsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIG9uOiB7XG4gICAgICAgICAgICAgICAgY2hhbmdlOiBmdW5jdGlvbiAoJGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICB2YXIgJCRhID0gX3ZtLm1hZ2ljYWwsXG4gICAgICAgICAgICAgICAgICAgICQkZWwgPSAkZXZlbnQudGFyZ2V0LFxuICAgICAgICAgICAgICAgICAgICAkJGMgPSAkJGVsLmNoZWNrZWQgPyB0cnVlIDogZmFsc2VcbiAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KCQkYSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyICQkdiA9IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgJCRpID0gX3ZtLl9pKCQkYSwgJCR2KVxuICAgICAgICAgICAgICAgICAgICBpZiAoJCRlbC5jaGVja2VkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgJCRpIDwgMCAmJiAoX3ZtLm1hZ2ljYWwgPSAkJGEuY29uY2F0KFskJHZdKSlcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAkJGkgPiAtMSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgKF92bS5tYWdpY2FsID0gJCRhXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC5zbGljZSgwLCAkJGkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC5jb25jYXQoJCRhLnNsaWNlKCQkaSArIDEpKSlcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgX3ZtLm1hZ2ljYWwgPSAkJGNcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgX2MoXCJsYWJlbFwiLCB7IHN0YXRpY0NsYXNzOiBcImZvcm0tY2hlY2stbGFiZWxcIiB9LCBbXG4gICAgICAgICAgICAgIF92bS5fdihcIm1hZ2ljYWwgPVxcblxcdFxcdFxcdFxcdFxcdFxcdFwiKSxcbiAgICAgICAgICAgICAgX2MoXCJzcGFuXCIsIHsgc3RhdGljQ2xhc3M6IFwiYm9vbGVhbi1zdHlsZVwiIH0sIFtcbiAgICAgICAgICAgICAgICBfdm0uX3YoX3ZtLl9zKF92bS5tYWdpY2FsKSksXG4gICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgXSksXG4gICAgICAgICAgXSksXG4gICAgICAgIF0pLFxuICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICBfYyhcbiAgICAgICAgICBcImRpdlwiLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHN0YXRpY0NsYXNzOlxuICAgICAgICAgICAgICBcImNvbC14bC00IGNvbC02IGQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXIganVzdGlmeS1jb250ZW50LWVuZFwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgW1xuICAgICAgICAgICAgX2MoXG4gICAgICAgICAgICAgIFwiYnV0dG9uXCIsXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogXCJidG4gYnRuLW91dGxpbmUtcHJpbWFyeSBidG4tc21cIixcbiAgICAgICAgICAgICAgICBhdHRyczogeyB0eXBlOiBcImJ1dHRvblwiIH0sXG4gICAgICAgICAgICAgICAgb246IHsgY2xpY2s6IF92bS5zaW1wbGVFeGFtcGxlIH0sXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIFtfdm0uX3YoXCJcXG5cXHRcXHRcXHRcXHRcXHRSdW5cXG5cXHRcXHRcXHRcXHRcIildXG4gICAgICAgICAgICApLFxuICAgICAgICAgIF1cbiAgICAgICAgKSxcbiAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgX2MoXG4gICAgICAgICAgXCJkaXZcIixcbiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiBcImNvbC14bC04IGNvbC1sZy0xMlwiIH0sXG4gICAgICAgICAgW1xuICAgICAgICAgICAgX2MoXCJ2dWUtY29kZS1oaWdobGlnaHRcIiwgeyBhdHRyczogeyBsYW5ndWFnZTogXCJqc1wiIH0gfSwgW1xuICAgICAgICAgICAgICBfYyhcInByZVwiLCBbXG4gICAgICAgICAgICAgICAgX3ZtLl92KFxuICAgICAgICAgICAgICAgICAgXCJ0aGlzLiR1bmljb3JuTG9nKHtcXG5cXHR0ZXh0OiAnSGVsbG8gV29ybGQnLFxcblxcdG1hZ2ljYWw6IHRydWUsXFxufSk7XFxuXFx0XFx0XFx0XFx0XFx0XFx0XCJcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgIF0sXG4gICAgICAgICAgMVxuICAgICAgICApLFxuICAgICAgXVxuICAgICksXG4gIF0pXG59XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW1xuICBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF92bSA9IHRoaXNcbiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2hcbiAgICByZXR1cm4gX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJyb3cgbWItMlwiIH0sIFtcbiAgICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiY29sLTEyXCIgfSwgW1xuICAgICAgICBfYyhcImg1XCIsIHsgc3RhdGljQ2xhc3M6IFwibXktMFwiIH0sIFtfYyhcImNvZGVcIiwgW192bS5fdihcIm1hZ2ljYWxcIildKV0pLFxuICAgICAgXSksXG4gICAgXSlcbiAgfSxcbl1cbnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZVxuXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIF92bSA9IHRoaXNcbiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50XG4gIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICByZXR1cm4gX2MoXCJkaXZcIiwgW1xuICAgIF92bS5fbSgwKSxcbiAgICBfdm0uX3YoXCIgXCIpLFxuICAgIF9jKFxuICAgICAgXCJkaXZcIixcbiAgICAgIHsgc3RhdGljQ2xhc3M6IFwicm93IG1iLTRcIiwgYXR0cnM6IHsgaWQ6IFwib2JqZWN0cy1zaW1wbGUtZXhhbXBsZVwiIH0gfSxcbiAgICAgIFtcbiAgICAgICAgX3ZtLl9tKDEpLFxuICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICBfYyhcbiAgICAgICAgICBcImRpdlwiLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHN0YXRpY0NsYXNzOlxuICAgICAgICAgICAgICBcImNvbC14bC00IGNvbC02IGQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXIganVzdGlmeS1jb250ZW50LWVuZFwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgW1xuICAgICAgICAgICAgX2MoXG4gICAgICAgICAgICAgIFwiYnV0dG9uXCIsXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogXCJidG4gYnRuLW91dGxpbmUtcHJpbWFyeSBidG4tc21cIixcbiAgICAgICAgICAgICAgICBhdHRyczogeyB0eXBlOiBcImJ1dHRvblwiIH0sXG4gICAgICAgICAgICAgICAgb246IHsgY2xpY2s6IF92bS5zaW1wbGVFeGFtcGxlIH0sXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIFtfdm0uX3YoXCJcXG5cXHRcXHRcXHRcXHRcXHRSdW5cXG5cXHRcXHRcXHRcXHRcIildXG4gICAgICAgICAgICApLFxuICAgICAgICAgIF1cbiAgICAgICAgKSxcbiAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgX2MoXG4gICAgICAgICAgXCJkaXZcIixcbiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiBcImNvbC14bC04IGNvbC1sZy0xMlwiIH0sXG4gICAgICAgICAgW1xuICAgICAgICAgICAgX2MoXCJ2dWUtY29kZS1oaWdobGlnaHRcIiwgeyBhdHRyczogeyBsYW5ndWFnZTogXCJqc1wiIH0gfSwgW1xuICAgICAgICAgICAgICBfYyhcInByZVwiLCBbXG4gICAgICAgICAgICAgICAgX3ZtLl92KFxuICAgICAgICAgICAgICAgICAgXCJ0aGlzLiR1bmljb3JuTG9nKHtcXG5cXHR0ZXh0OiAnSGVsbG8gV29ybGQnLFxcblxcdG9iamVjdHM6IHsgZm9vOiAnYmFyJyB9LFxcbn0pO1xcblxcdFxcdFxcdFxcdFxcdFxcdFwiXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICBdLFxuICAgICAgICAgIDFcbiAgICAgICAgKSxcbiAgICAgIF1cbiAgICApLFxuICAgIF92bS5fdihcIiBcIiksXG4gICAgX2MoXG4gICAgICBcImRpdlwiLFxuICAgICAgeyBzdGF0aWNDbGFzczogXCJyb3cgbWItNFwiLCBhdHRyczogeyBpZDogXCJvYmplY3RzLW11bHRpcGxlLWV4YW1wbGVcIiB9IH0sXG4gICAgICBbXG4gICAgICAgIF92bS5fbSgyKSxcbiAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgX2MoXG4gICAgICAgICAgXCJkaXZcIixcbiAgICAgICAgICB7XG4gICAgICAgICAgICBzdGF0aWNDbGFzczpcbiAgICAgICAgICAgICAgXCJjb2wteGwtNCBjb2wtNiBkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyIGp1c3RpZnktY29udGVudC1lbmRcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIFtcbiAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICBcImJ1dHRvblwiLFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6IFwiYnRuIGJ0bi1vdXRsaW5lLXByaW1hcnkgYnRuLXNtXCIsXG4gICAgICAgICAgICAgICAgYXR0cnM6IHsgdHlwZTogXCJidXR0b25cIiB9LFxuICAgICAgICAgICAgICAgIG9uOiB7IGNsaWNrOiBfdm0ubXVsdGlwbGVPYmplY3RzIH0sXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIFtfdm0uX3YoXCJcXG5cXHRcXHRcXHRcXHRcXHRSdW5cXG5cXHRcXHRcXHRcXHRcIildXG4gICAgICAgICAgICApLFxuICAgICAgICAgIF1cbiAgICAgICAgKSxcbiAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgX2MoXG4gICAgICAgICAgXCJkaXZcIixcbiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiBcImNvbC14bC04IGNvbC1sZy0xMlwiIH0sXG4gICAgICAgICAgW1xuICAgICAgICAgICAgX2MoXCJ2dWUtY29kZS1oaWdobGlnaHRcIiwgeyBhdHRyczogeyBsYW5ndWFnZTogXCJqc1wiIH0gfSwgW1xuICAgICAgICAgICAgICBfYyhcInByZVwiLCBbXG4gICAgICAgICAgICAgICAgX3ZtLl92KFxuICAgICAgICAgICAgICAgICAgXCJjb25zdCBmb28gPSB7IGZvbzogJ2ZvbyAnIH07XFxuY29uc3QgYmFyID0geyBiYXI6ICdiYXIgJyB9O1xcblxcbnRoaXMuJHVuaWNvcm5Mb2coe1xcblxcdHRleHQ6ICdIZWxsbyBXb3JsZCcsXFxuXFx0b2JqZWN0czogeyBmb28sIGJhciB9LFxcbn0pO1xcblxcdFxcdFxcdFxcdFxcdFxcdFwiXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICBdLFxuICAgICAgICAgIDFcbiAgICAgICAgKSxcbiAgICAgIF1cbiAgICApLFxuICAgIF92bS5fdihcIiBcIiksXG4gICAgX2MoXG4gICAgICBcImRpdlwiLFxuICAgICAgeyBzdGF0aWNDbGFzczogXCJyb3cgbWItNFwiLCBhdHRyczogeyBpZDogXCJvYmplY3RzLXNwcmVhZC1leGFtcGxlXCIgfSB9LFxuICAgICAgW1xuICAgICAgICBfdm0uX20oMyksXG4gICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgIF9jKFxuICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAge1xuICAgICAgICAgICAgc3RhdGljQ2xhc3M6XG4gICAgICAgICAgICAgIFwiY29sLXhsLTQgY29sLTYgZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNvbnRlbnQtZW5kXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICBbXG4gICAgICAgICAgICBfYyhcbiAgICAgICAgICAgICAgXCJidXR0b25cIixcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiBcImJ0biBidG4tb3V0bGluZS1wcmltYXJ5IGJ0bi1zbVwiLFxuICAgICAgICAgICAgICAgIGF0dHJzOiB7IHR5cGU6IFwiYnV0dG9uXCIgfSxcbiAgICAgICAgICAgICAgICBvbjogeyBjbGljazogX3ZtLm9iamVjdFNwcmVhZE9wZXJhdG9yIH0sXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIFtfdm0uX3YoXCJcXG5cXHRcXHRcXHRcXHRcXHRSdW5cXG5cXHRcXHRcXHRcXHRcIildXG4gICAgICAgICAgICApLFxuICAgICAgICAgIF1cbiAgICAgICAgKSxcbiAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgX2MoXG4gICAgICAgICAgXCJkaXZcIixcbiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiBcImNvbC14bC04IGNvbC1sZy0xMlwiIH0sXG4gICAgICAgICAgW1xuICAgICAgICAgICAgX2MoXCJ2dWUtY29kZS1oaWdobGlnaHRcIiwgeyBhdHRyczogeyBsYW5ndWFnZTogXCJqc1wiIH0gfSwgW1xuICAgICAgICAgICAgICBfYyhcInByZVwiLCBbXG4gICAgICAgICAgICAgICAgX3ZtLl92KFxuICAgICAgICAgICAgICAgICAgXCJjb25zdCBmb28gPSB7IGZvbzogJ2ZvbyAnIH07XFxuY29uc3QgYmFyID0geyBiYXI6ICdiYXIgJyB9O1xcblxcbnRoaXMuJHVuaWNvcm5Mb2coe1xcblxcdHRleHQ6ICdIZWxsbyBXb3JsZCcsXFxuXFx0b2JqZWN0czogeyAuLi5mb28sIC4uLmJhciB9LFxcbn0pO1xcblxcdFxcdFxcdFxcdFxcdFxcdFwiXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICBdLFxuICAgICAgICAgIDFcbiAgICAgICAgKSxcbiAgICAgIF1cbiAgICApLFxuICBdKVxufVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtcbiAgZnVuY3Rpb24gKCkge1xuICAgIHZhciBfdm0gPSB0aGlzXG4gICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50XG4gICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gICAgcmV0dXJuIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwicm93IG1iLTJcIiB9LCBbXG4gICAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImNvbC0xMlwiIH0sIFtcbiAgICAgICAgX2MoXCJoNVwiLCB7IHN0YXRpY0NsYXNzOiBcIm15LTBcIiB9LCBbX2MoXCJjb2RlXCIsIFtfdm0uX3YoXCJvYmplY3RzXCIpXSldKSxcbiAgICAgIF0pLFxuICAgIF0pXG4gIH0sXG4gIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX3ZtID0gdGhpc1xuICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICAgIHJldHVybiBfYyhcbiAgICAgIFwiZGl2XCIsXG4gICAgICB7IHN0YXRpY0NsYXNzOiBcImNvbC14bC00IGNvbC02IGQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXJcIiB9LFxuICAgICAgW19jKFwiaDZcIiwgeyBzdGF0aWNDbGFzczogXCJteS0wXCIgfSwgW192bS5fdihcIlNpbmdsZSBvYmplY3RcIildKV1cbiAgICApXG4gIH0sXG4gIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX3ZtID0gdGhpc1xuICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICAgIHJldHVybiBfYyhcbiAgICAgIFwiZGl2XCIsXG4gICAgICB7IHN0YXRpY0NsYXNzOiBcImNvbC14bC00IGNvbC02IGQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXJcIiB9LFxuICAgICAgW19jKFwiaDZcIiwgeyBzdGF0aWNDbGFzczogXCJteS0wXCIgfSwgW192bS5fdihcIk11bHRpcGxlIG9iamVjdHNcIildKV1cbiAgICApXG4gIH0sXG4gIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX3ZtID0gdGhpc1xuICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICAgIHJldHVybiBfYyhcbiAgICAgIFwiZGl2XCIsXG4gICAgICB7IHN0YXRpY0NsYXNzOiBcImNvbC14bC00IGNvbC02IGQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXJcIiB9LFxuICAgICAgW1xuICAgICAgICBfYyhcImg2XCIsIHsgc3RhdGljQ2xhc3M6IFwibXktMFwiIH0sIFtcbiAgICAgICAgICBfdm0uX3YoXCJVc2luZyBvYmplY3Qgc3ByZWFkIE9wZXJhdG9yXCIpLFxuICAgICAgICBdKSxcbiAgICAgIF1cbiAgICApXG4gIH0sXG5dXG5yZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWVcblxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSIsInZhciByZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBfdm0gPSB0aGlzXG4gIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2hcbiAgcmV0dXJuIF9jKFwiZGl2XCIsIFtcbiAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcInJvdyBtYi00XCIgfSwgW1xuICAgICAgX3ZtLl9tKDApLFxuICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiY29sLXhsLTQgY29sLTYgZC1mbGV4IGp1c3RpZnktY29udGVudC1lbmRcIiB9LCBbXG4gICAgICAgIF9jKFxuICAgICAgICAgIFwiYnV0dG9uXCIsXG4gICAgICAgICAge1xuICAgICAgICAgICAgc3RhdGljQ2xhc3M6IFwiYnRuIGJ0bi1vdXRsaW5lLXByaW1hcnkgYnRuLXNtXCIsXG4gICAgICAgICAgICBhdHRyczogeyB0eXBlOiBcImJ1dHRvblwiIH0sXG4gICAgICAgICAgICBvbjogeyBjbGljazogX3ZtLnNpbXBsZUV4YW1wbGUgfSxcbiAgICAgICAgICB9LFxuICAgICAgICAgIFtfdm0uX3YoXCJcXG5cXHRcXHRcXHRcXHRcXHRSdW5cXG5cXHRcXHRcXHRcXHRcIildXG4gICAgICAgICksXG4gICAgICBdKSxcbiAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICBfYyhcbiAgICAgICAgXCJkaXZcIixcbiAgICAgICAgeyBzdGF0aWNDbGFzczogXCJjb2wteGwtOCBjb2wtbGctMTJcIiB9LFxuICAgICAgICBbXG4gICAgICAgICAgX2MoXCJ2dWUtY29kZS1oaWdobGlnaHRcIiwgeyBhdHRyczogeyBsYW5ndWFnZTogXCJqc1wiIH0gfSwgW1xuICAgICAgICAgICAgX2MoXCJwcmVcIiwgW192bS5fdihcInRoaXMuJHVuaWNvcm5Mb2coKTtcXG5cXHRcXHRcXHRcXHRcXHRcXHRcIildKSxcbiAgICAgICAgICBdKSxcbiAgICAgICAgXSxcbiAgICAgICAgMVxuICAgICAgKSxcbiAgICBdKSxcbiAgXSlcbn1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXG4gIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX3ZtID0gdGhpc1xuICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICAgIHJldHVybiBfYyhcbiAgICAgIFwiZGl2XCIsXG4gICAgICB7IHN0YXRpY0NsYXNzOiBcImNvbC14bC00IGNvbC02IGQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXJcIiB9LFxuICAgICAgW19jKFwiaDVcIiwgeyBzdGF0aWNDbGFzczogXCJteS0wXCIgfSwgW192bS5fdihcIlNpbXBsZSBFeGFtcGxlXCIpXSldXG4gICAgKVxuICB9LFxuXVxucmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlXG5cbmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0iLCJ2YXIgcmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICB2YXIgX3ZtID0gdGhpc1xuICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gIHJldHVybiBfYyhcImRpdlwiLCBbXG4gICAgX3ZtLl9tKDApLFxuICAgIF92bS5fdihcIiBcIiksXG4gICAgX2MoXG4gICAgICBcImRpdlwiLFxuICAgICAge1xuICAgICAgICBzdGF0aWNDbGFzczogXCJyb3cgbWItNFwiLFxuICAgICAgICBhdHRyczogeyBpZDogXCJkZWZhdWx0U3R5bGVzLXNpbXBsZS1leGFtcGxlXCIgfSxcbiAgICAgIH0sXG4gICAgICBbXG4gICAgICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiY29sLXhsLTQgY29sLTYgZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlclwiIH0sIFtcbiAgICAgICAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImNvbC14bC04IGNvbC1sZy0xMiBtdC0yXCIgfSwgW1xuICAgICAgICAgICAgX2MoXCJpbnB1dFwiLCB7XG4gICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBuYW1lOiBcIm1vZGVsXCIsXG4gICAgICAgICAgICAgICAgICByYXdOYW1lOiBcInYtbW9kZWxcIixcbiAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0uZGVmYXVsdFN0eWxlcyxcbiAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246IFwiZGVmYXVsdFN0eWxlc1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiBcImZvcm0tY29udHJvbFwiLFxuICAgICAgICAgICAgICBhdHRyczoge1xuICAgICAgICAgICAgICAgIHR5cGU6IFwidGV4dFwiLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBcIltCdW5uaWVzXTpcIixcbiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogXCJbQnVubmllc106XCIsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGRvbVByb3BzOiB7IHZhbHVlOiBfdm0uZGVmYXVsdFN0eWxlcyB9LFxuICAgICAgICAgICAgICBvbjoge1xuICAgICAgICAgICAgICAgIGlucHV0OiBmdW5jdGlvbiAoJGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICBpZiAoJGV2ZW50LnRhcmdldC5jb21wb3NpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBfdm0uZGVmYXVsdFN0eWxlcyA9ICRldmVudC50YXJnZXQudmFsdWVcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgXSksXG4gICAgICAgIF0pLFxuICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICBfYyhcbiAgICAgICAgICBcImRpdlwiLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHN0YXRpY0NsYXNzOlxuICAgICAgICAgICAgICBcImNvbC14bC00IGNvbC02IGQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXIganVzdGlmeS1jb250ZW50LWVuZFwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgW1xuICAgICAgICAgICAgX2MoXG4gICAgICAgICAgICAgIFwiYnV0dG9uXCIsXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogXCJidG4gYnRuLW91dGxpbmUtcHJpbWFyeSBidG4tc21cIixcbiAgICAgICAgICAgICAgICBhdHRyczogeyB0eXBlOiBcImJ1dHRvblwiIH0sXG4gICAgICAgICAgICAgICAgb246IHsgY2xpY2s6IF92bS5zaW1wbGVFeGFtcGxlIH0sXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIFtfdm0uX3YoXCJcXG5cXHRcXHRcXHRcXHRcXHRSdW5cXG5cXHRcXHRcXHRcXHRcIildXG4gICAgICAgICAgICApLFxuICAgICAgICAgIF1cbiAgICAgICAgKSxcbiAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgX2MoXG4gICAgICAgICAgXCJkaXZcIixcbiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiBcImNvbC14bC04IGNvbC1sZy0xMlwiIH0sXG4gICAgICAgICAgW1xuICAgICAgICAgICAgX2MoXCJ2dWUtY29kZS1oaWdobGlnaHRcIiwgeyBhdHRyczogeyBsYW5ndWFnZTogXCJqc1wiIH0gfSwgW1xuICAgICAgICAgICAgICBfYyhcInByZVwiLCBbXG4gICAgICAgICAgICAgICAgX3ZtLl92KFxuICAgICAgICAgICAgICAgICAgXCJ0aGlzLiR1bmljb3JuTG9nKHtcXG5cXHR0ZXh0OiAnSGVsbG8gV29ybGQnLFxcblxcdHN0eWxlczogJ1wiICtcbiAgICAgICAgICAgICAgICAgICAgX3ZtLl9zKHRoaXMuZGVmYXVsdFN0eWxlcykgK1xuICAgICAgICAgICAgICAgICAgICBcIicsXFxufSk7XFxuXFx0XFx0XFx0XFx0XFx0XFx0XCJcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgIF0sXG4gICAgICAgICAgMVxuICAgICAgICApLFxuICAgICAgXVxuICAgICksXG4gICAgX3ZtLl92KFwiIFwiKSxcbiAgICBfYyhcbiAgICAgIFwiZGl2XCIsXG4gICAgICB7XG4gICAgICAgIHN0YXRpY0NsYXNzOiBcInJvdyBtYi00XCIsXG4gICAgICAgIGF0dHJzOiB7IGlkOiBcImRlZmF1bHRTdHlsZXMtc2ltcGxlLWV4YW1wbGVcIiB9LFxuICAgICAgfSxcbiAgICAgIFtcbiAgICAgICAgX3ZtLl9tKDEpLFxuICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICBfYyhcbiAgICAgICAgICBcImRpdlwiLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHN0YXRpY0NsYXNzOlxuICAgICAgICAgICAgICBcImNvbC14bC00IGNvbC02IGQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXIganVzdGlmeS1jb250ZW50LWVuZFwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgW1xuICAgICAgICAgICAgX2MoXG4gICAgICAgICAgICAgIFwiYnV0dG9uXCIsXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogXCJidG4gYnRuLW91dGxpbmUtcHJpbWFyeSBidG4tc21cIixcbiAgICAgICAgICAgICAgICBhdHRyczogeyB0eXBlOiBcImJ1dHRvblwiIH0sXG4gICAgICAgICAgICAgICAgb246IHsgY2xpY2s6IF92bS5hcnJheUV4YW1wbGUgfSxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgW192bS5fdihcIlxcblxcdFxcdFxcdFxcdFxcdFJ1blxcblxcdFxcdFxcdFxcdFwiKV1cbiAgICAgICAgICAgICksXG4gICAgICAgICAgXVxuICAgICAgICApLFxuICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICBfYyhcbiAgICAgICAgICBcImRpdlwiLFxuICAgICAgICAgIHsgc3RhdGljQ2xhc3M6IFwiY29sLXhsLTggY29sLWxnLTEyXCIgfSxcbiAgICAgICAgICBbXG4gICAgICAgICAgICBfYyhcInZ1ZS1jb2RlLWhpZ2hsaWdodFwiLCB7IGF0dHJzOiB7IGxhbmd1YWdlOiBcImpzXCIgfSB9LCBbXG4gICAgICAgICAgICAgIF9jKFwicHJlXCIsIFtcbiAgICAgICAgICAgICAgICBfdm0uX3YoXG4gICAgICAgICAgICAgICAgICBcInRoaXMuJHVuaWNvcm5Mb2coe1xcblxcdHRleHQ6ICdIZWxsbyBXb3JsZCcsXFxuXFx0c3R5bGVzOiBbXFxuXFx0XFx0J2JhY2tncm91bmQ6IGJsYWNrJyxcXG5cXHRcXHQnYm9yZGVyOiAxcHggZGFzaGVkIG1hZ2VudGEnLFxcblxcdFxcdCdjb2xvcjogbWFnZW50YScsXFxuXFx0XFx0J2ZvbnQtZmFtaWx5OiBtb25vc3BhY2UnLFxcblxcdFxcdCdmb250LXNpemU6IDJlbScsXFxuXFx0XFx0J3BhZGRpbmc6IDEwcHgnLFxcblxcdF0sXFxufSk7XFxuXFx0XFx0XFx0XFx0XFx0XFx0XCJcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgIF0sXG4gICAgICAgICAgMVxuICAgICAgICApLFxuICAgICAgXVxuICAgICksXG4gICAgX3ZtLl92KFwiIFwiKSxcbiAgICBfdm0uX20oMiksXG4gICAgX3ZtLl92KFwiIFwiKSxcbiAgICBfYyhcbiAgICAgIFwiZGl2XCIsXG4gICAgICB7IHN0YXRpY0NsYXNzOiBcInJvdyBtYi00XCIsIGF0dHJzOiB7IGlkOiBcImRlZmF1bHRTdHlsZXMtd29yZC1leGFtcGxlXCIgfSB9LFxuICAgICAgW1xuICAgICAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImNvbC14bC00IGNvbC02IGQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXJcIiB9LCBbXG4gICAgICAgICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJjb2wteGwtOCBjb2wtbGctMTIgbXQtMlwiIH0sIFtcbiAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICBcInNlbGVjdFwiLFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgZGlyZWN0aXZlczogW1xuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIm1vZGVsXCIsXG4gICAgICAgICAgICAgICAgICAgIHJhd05hbWU6IFwidi1tb2RlbFwiLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLm1hZ2ljYWxXb3JkLFxuICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiBcIm1hZ2ljYWxXb3JkXCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6IFwiZm9ybS1zZWxlY3RcIixcbiAgICAgICAgICAgICAgICBvbjoge1xuICAgICAgICAgICAgICAgICAgY2hhbmdlOiBmdW5jdGlvbiAoJGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciAkJHNlbGVjdGVkVmFsID0gQXJyYXkucHJvdG90eXBlLmZpbHRlclxuICAgICAgICAgICAgICAgICAgICAgIC5jYWxsKCRldmVudC50YXJnZXQub3B0aW9ucywgZnVuY3Rpb24gKG8pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvLnNlbGVjdGVkXG4gICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAubWFwKGZ1bmN0aW9uIChvKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmFsID0gXCJfdmFsdWVcIiBpbiBvID8gby5fdmFsdWUgOiBvLnZhbHVlXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsXG4gICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgX3ZtLm1hZ2ljYWxXb3JkID0gJGV2ZW50LnRhcmdldC5tdWx0aXBsZVxuICAgICAgICAgICAgICAgICAgICAgID8gJCRzZWxlY3RlZFZhbFxuICAgICAgICAgICAgICAgICAgICAgIDogJCRzZWxlY3RlZFZhbFswXVxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBfdm0uX2woX3ZtLm1hZ2ljYWxXb3JkcywgZnVuY3Rpb24gKHdvcmQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX2MoXCJvcHRpb25cIiwgeyBrZXk6IHdvcmQgfSwgW192bS5fdihfdm0uX3Mod29yZCkpXSlcbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgIDBcbiAgICAgICAgICAgICksXG4gICAgICAgICAgXSksXG4gICAgICAgIF0pLFxuICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICBfYyhcbiAgICAgICAgICBcImRpdlwiLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHN0YXRpY0NsYXNzOlxuICAgICAgICAgICAgICBcImNvbC14bC00IGNvbC02IGQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXIganVzdGlmeS1jb250ZW50LWVuZFwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgW1xuICAgICAgICAgICAgX2MoXG4gICAgICAgICAgICAgIFwiYnV0dG9uXCIsXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogXCJidG4gYnRuLW91dGxpbmUtcHJpbWFyeSBidG4tc21cIixcbiAgICAgICAgICAgICAgICBhdHRyczogeyB0eXBlOiBcImJ1dHRvblwiIH0sXG4gICAgICAgICAgICAgICAgb246IHsgY2xpY2s6IF92bS53b3JkRXhhbXBsZSB9LFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBbX3ZtLl92KFwiXFxuXFx0XFx0XFx0XFx0XFx0UnVuXFxuXFx0XFx0XFx0XFx0XCIpXVxuICAgICAgICAgICAgKSxcbiAgICAgICAgICBdXG4gICAgICAgICksXG4gICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgIF9jKFxuICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAgeyBzdGF0aWNDbGFzczogXCJjb2wteGwtOCBjb2wtbGctMTJcIiB9LFxuICAgICAgICAgIFtcbiAgICAgICAgICAgIF9jKFwidnVlLWNvZGUtaGlnaGxpZ2h0XCIsIHsgYXR0cnM6IHsgbGFuZ3VhZ2U6IFwianNcIiB9IH0sIFtcbiAgICAgICAgICAgICAgX2MoXCJwcmVcIiwgW1xuICAgICAgICAgICAgICAgIF92bS5fdihcbiAgICAgICAgICAgICAgICAgIFwidGhpcy4kdW5pY29ybkxvZyh7XFxuXFx0dGV4dDogJ0hlbGxvIFdvcmxkJyxcXG5cXHRzdHlsZXM6ICdcIiArXG4gICAgICAgICAgICAgICAgICAgIF92bS5fcyh0aGlzLm1hZ2ljYWxXb3JkKSArXG4gICAgICAgICAgICAgICAgICAgIFwiJyxcXG59KTtcXG5cXHRcXHRcXHRcXHRcXHRcXHRcIlxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgXSksXG4gICAgICAgICAgXSxcbiAgICAgICAgICAxXG4gICAgICAgICksXG4gICAgICBdXG4gICAgKSxcbiAgXSlcbn1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXG4gIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX3ZtID0gdGhpc1xuICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICAgIHJldHVybiBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcInJvdyBtYi0yXCIgfSwgW1xuICAgICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJjb2wtMTJcIiB9LCBbXG4gICAgICAgIF9jKFwiaDVcIiwgeyBzdGF0aWNDbGFzczogXCJteS0wXCIgfSwgW19jKFwiY29kZVwiLCBbX3ZtLl92KFwic3R5bGVzXCIpXSldKSxcbiAgICAgIF0pLFxuICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiY29sLXhsLTggY29sLWxnLTEyXCIgfSwgW1xuICAgICAgICBfdm0uX3YoXG4gICAgICAgICAgXCJcXG5cXHRcXHRcXHRcXHRGb3IgYSBsaXN0IG9mIHRoZSBkaWZmZXJlbnQgYXZhaWxhYmxlIHN0eWxlcywgcmVmZXIgdG8gdGhlXFxuXFx0XFx0XFx0XFx0XCJcbiAgICAgICAgKSxcbiAgICAgICAgX2MoXG4gICAgICAgICAgXCJhXCIsXG4gICAgICAgICAge1xuICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgaHJlZjogXCJodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvY29uc29sZSNzdHlsaW5nX2NvbnNvbGVfb3V0cHV0XCIsXG4gICAgICAgICAgICAgIHRhcmdldDogXCJfYmxhbmtcIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgICBbX3ZtLl92KFwiV2ViIEFQSXMgTUROIFN0eWxpbmcgQ29uc29sZSBPdXRwdXRcXG5cXHRcXHRcXHRcXHRcIildXG4gICAgICAgICksXG4gICAgICAgIF92bS5fdihcbiAgICAgICAgICBcIlxcblxcdFxcdFxcdFxcdGRldmVsb3BlciBkb2N1bWVudGF0aW9uLiBEZXBlbmRpbmcgb24gdGhlIGJyb3dzZXIsIHNvbWUgc3R5bGVzIG1heSBub3RcXG5cXHRcXHRcXHRcXHR3b3JrLlxcblxcdFxcdFxcdFwiXG4gICAgICAgICksXG4gICAgICBdKSxcbiAgICBdKVxuICB9LFxuICBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF92bSA9IHRoaXNcbiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2hcbiAgICByZXR1cm4gX2MoXG4gICAgICBcImRpdlwiLFxuICAgICAgeyBzdGF0aWNDbGFzczogXCJjb2wteGwtNCBjb2wtNiBkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyXCIgfSxcbiAgICAgIFtcbiAgICAgICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJjb2wteGwtOCBjb2wtbGctMTJcIiB9LCBbXG4gICAgICAgICAgX2MoXCJoNlwiLCB7IHN0YXRpY0NsYXNzOiBcIm15LTBcIiB9LCBbX3ZtLl92KFwiVXNpbmcgYW4gQXJyYXkuXCIpXSksXG4gICAgICAgIF0pLFxuICAgICAgXVxuICAgIClcbiAgfSxcbiAgZnVuY3Rpb24gKCkge1xuICAgIHZhciBfdm0gPSB0aGlzXG4gICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50XG4gICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gICAgcmV0dXJuIF9jKFxuICAgICAgXCJkaXZcIixcbiAgICAgIHsgc3RhdGljQ2xhc3M6IFwicm93IG1iLTJcIiwgYXR0cnM6IHsgaWQ6IFwiZGVmYXVsdFN0eWxlcy13b3JkLWV4YW1wbGVcIiB9IH0sXG4gICAgICBbXG4gICAgICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiY29sLXhsLTggY29sLWxnLTEyXCIgfSwgW1xuICAgICAgICAgIF92bS5fdihcIlxcblxcdFxcdFxcdFxcdFlvdSBjYW4gYWxzbyBzZXQgdGhlIFwiKSxcbiAgICAgICAgICBfYyhcImNvZGVcIiwgW192bS5fdihcInN0eWxlXCIpXSksXG4gICAgICAgICAgX3ZtLl92KFxuICAgICAgICAgICAgXCIgb3B0aW9uIHRvIGEgbWFnaWNhbCB3b3JkIHRvIG1ha2VcXG5cXHRcXHRcXHRcXHR0aGUgbWFnaWMgaGFwcGVuLiBUaGlzIGNhbiBhbHNvIGJlIHNldCB3aXRoIHRoZVxcblxcdFxcdFxcdFxcdFwiXG4gICAgICAgICAgKSxcbiAgICAgICAgICBfYyhcImNvZGVcIiwgW192bS5fdihcIm1hZ2ljYWxcIildKSxcbiAgICAgICAgICBfdm0uX3YoXCIgb3B0aW9uIHRvIFwiKSxcbiAgICAgICAgICBfYyhcInNwYW5cIiwgeyBzdGF0aWNDbGFzczogXCJib29sZWFuLXN0eWxlXCIgfSwgW192bS5fdihcInRydWVcIildKSxcbiAgICAgICAgICBfdm0uX3YoXCIuXFxuXFx0XFx0XFx0XCIpLFxuICAgICAgICBdKSxcbiAgICAgIF1cbiAgICApXG4gIH0sXG5dXG5yZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWVcblxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSIsInZhciByZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBfdm0gPSB0aGlzXG4gIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2hcbiAgcmV0dXJuIF9jKFwiZGl2XCIsIFtcbiAgICBfdm0uX20oMCksXG4gICAgX3ZtLl92KFwiIFwiKSxcbiAgICBfYyhcbiAgICAgIFwiZGl2XCIsXG4gICAgICB7IHN0YXRpY0NsYXNzOiBcInJvdyBtYi00XCIsIGF0dHJzOiB7IGlkOiBcInRleHQtc2ltcGxlLWV4YW1wbGVcIiB9IH0sXG4gICAgICBbXG4gICAgICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiY29sLXhsLTQgY29sLTYgZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlclwiIH0sIFtcbiAgICAgICAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImNvbC14bC04IGNvbC1sZy0xMiBtdC0yXCIgfSwgW1xuICAgICAgICAgICAgX2MoXCJpbnB1dFwiLCB7XG4gICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBuYW1lOiBcIm1vZGVsXCIsXG4gICAgICAgICAgICAgICAgICByYXdOYW1lOiBcInYtbW9kZWxcIixcbiAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0udGV4dCxcbiAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246IFwidGV4dFwiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiBcImZvcm0tY29udHJvbFwiLFxuICAgICAgICAgICAgICBhdHRyczoge1xuICAgICAgICAgICAgICAgIHR5cGU6IFwidGV4dFwiLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBcIltCdW5uaWVzXTpcIixcbiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogXCJbQnVubmllc106XCIsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGRvbVByb3BzOiB7IHZhbHVlOiBfdm0udGV4dCB9LFxuICAgICAgICAgICAgICBvbjoge1xuICAgICAgICAgICAgICAgIGlucHV0OiBmdW5jdGlvbiAoJGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICBpZiAoJGV2ZW50LnRhcmdldC5jb21wb3NpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBfdm0udGV4dCA9ICRldmVudC50YXJnZXQudmFsdWVcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgXSksXG4gICAgICAgIF0pLFxuICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICBfYyhcbiAgICAgICAgICBcImRpdlwiLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHN0YXRpY0NsYXNzOlxuICAgICAgICAgICAgICBcImNvbC14bC00IGNvbC02IGQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXIganVzdGlmeS1jb250ZW50LWVuZFwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgW1xuICAgICAgICAgICAgX2MoXG4gICAgICAgICAgICAgIFwiYnV0dG9uXCIsXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogXCJidG4gYnRuLW91dGxpbmUtcHJpbWFyeSBidG4tc21cIixcbiAgICAgICAgICAgICAgICBhdHRyczogeyB0eXBlOiBcImJ1dHRvblwiIH0sXG4gICAgICAgICAgICAgICAgb246IHsgY2xpY2s6IF92bS5zaW1wbGVFeGFtcGxlIH0sXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIFtfdm0uX3YoXCJcXG5cXHRcXHRcXHRcXHRcXHRSdW5cXG5cXHRcXHRcXHRcXHRcIildXG4gICAgICAgICAgICApLFxuICAgICAgICAgIF1cbiAgICAgICAgKSxcbiAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgX2MoXG4gICAgICAgICAgXCJkaXZcIixcbiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiBcImNvbC14bC04IGNvbC1sZy0xMlwiIH0sXG4gICAgICAgICAgW1xuICAgICAgICAgICAgX2MoXCJ2dWUtY29kZS1oaWdobGlnaHRcIiwgeyBhdHRyczogeyBsYW5ndWFnZTogXCJqc1wiIH0gfSwgW1xuICAgICAgICAgICAgICBfYyhcInByZVwiLCBbXG4gICAgICAgICAgICAgICAgX3ZtLl92KFxuICAgICAgICAgICAgICAgICAgXCJ0aGlzLiR1bmljb3JuTG9nKHtcXG5cXHR0ZXh0OiAnSGVsbG8gV29ybGQnLFxcbn0pO1xcblxcdFxcdFxcdFxcdFxcdFxcdFwiXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICBdLFxuICAgICAgICAgIDFcbiAgICAgICAgKSxcbiAgICAgIF1cbiAgICApLFxuICBdKVxufVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtcbiAgZnVuY3Rpb24gKCkge1xuICAgIHZhciBfdm0gPSB0aGlzXG4gICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50XG4gICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gICAgcmV0dXJuIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwicm93IG1iLTJcIiB9LCBbXG4gICAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImNvbC0xMlwiIH0sIFtcbiAgICAgICAgX2MoXCJoNVwiLCB7IHN0YXRpY0NsYXNzOiBcIm15LTBcIiB9LCBbX2MoXCJjb2RlXCIsIFtfdm0uX3YoXCJ0ZXh0XCIpXSldKSxcbiAgICAgIF0pLFxuICAgIF0pXG4gIH0sXG5dXG5yZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWVcblxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSIsInZhciByZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBfdm0gPSB0aGlzXG4gIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2hcbiAgcmV0dXJuIF9jKFwiZGl2XCIsIFtcbiAgICBfdm0uX20oMCksXG4gICAgX3ZtLl92KFwiIFwiKSxcbiAgICBfYyhcbiAgICAgIFwiZGl2XCIsXG4gICAgICB7XG4gICAgICAgIHN0YXRpY0NsYXNzOiBcInJvdyBtYi00XCIsXG4gICAgICAgIGF0dHJzOiB7IGlkOiBcImRlZmF1bHRTdHlsZXMtc2ltcGxlLWV4YW1wbGVcIiB9LFxuICAgICAgfSxcbiAgICAgIFtcbiAgICAgICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJjb2wteGwtNCBjb2wtNiBkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyXCIgfSwgW1xuICAgICAgICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiY29sLXhsLTggY29sLWxnLTEyIG10LTJcIiB9LCBbXG4gICAgICAgICAgICBfYyhcbiAgICAgICAgICAgICAgXCJzZWxlY3RcIixcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFtcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJtb2RlbFwiLFxuICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiBcInYtbW9kZWxcIixcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS5sb2dUeXBlLFxuICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiBcImxvZ1R5cGVcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogXCJmb3JtLXNlbGVjdFwiLFxuICAgICAgICAgICAgICAgIG9uOiB7XG4gICAgICAgICAgICAgICAgICBjaGFuZ2U6IFtcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKCRldmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgIHZhciAkJHNlbGVjdGVkVmFsID0gQXJyYXkucHJvdG90eXBlLmZpbHRlclxuICAgICAgICAgICAgICAgICAgICAgICAgLmNhbGwoJGV2ZW50LnRhcmdldC5vcHRpb25zLCBmdW5jdGlvbiAobykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gby5zZWxlY3RlZFxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKG8pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZhbCA9IFwiX3ZhbHVlXCIgaW4gbyA/IG8uX3ZhbHVlIDogby52YWx1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgIF92bS5sb2dUeXBlID0gJGV2ZW50LnRhcmdldC5tdWx0aXBsZVxuICAgICAgICAgICAgICAgICAgICAgICAgPyAkJHNlbGVjdGVkVmFsXG4gICAgICAgICAgICAgICAgICAgICAgICA6ICQkc2VsZWN0ZWRWYWxbMF1cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgX3ZtLmNoZWNrVHlwZSxcbiAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgX3ZtLl9sKF92bS50eXBlcywgZnVuY3Rpb24gKHR5cGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX2MoXCJvcHRpb25cIiwgeyBrZXk6IHR5cGUgfSwgW192bS5fdihfdm0uX3ModHlwZSkpXSlcbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgIDBcbiAgICAgICAgICAgICksXG4gICAgICAgICAgXSksXG4gICAgICAgIF0pLFxuICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICBfYyhcbiAgICAgICAgICBcImRpdlwiLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHN0YXRpY0NsYXNzOlxuICAgICAgICAgICAgICBcImNvbC14bC00IGNvbC02IGQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXIganVzdGlmeS1jb250ZW50LWVuZFwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgW1xuICAgICAgICAgICAgX2MoXG4gICAgICAgICAgICAgIFwiYnV0dG9uXCIsXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogXCJidG4gYnRuLW91dGxpbmUtcHJpbWFyeSBidG4tc21cIixcbiAgICAgICAgICAgICAgICBhdHRyczoge1xuICAgICAgICAgICAgICAgICAgdHlwZTogXCJidXR0b25cIixcbiAgICAgICAgICAgICAgICAgIGRpc2FibGVkOiB0aGlzLmxvZ1R5cGUgPT09IFwiZ3JvdXBFbmRcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG9uOiB7IGNsaWNrOiBfdm0uc2ltcGxlRXhhbXBsZSB9LFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBbX3ZtLl92KFwiXFxuXFx0XFx0XFx0XFx0XFx0UnVuXFxuXFx0XFx0XFx0XFx0XCIpXVxuICAgICAgICAgICAgKSxcbiAgICAgICAgICBdXG4gICAgICAgICksXG4gICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgIF92bS5sb2dOb3RlXG4gICAgICAgICAgPyBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImNvbC14bC04IGNvbC1sZy0xMiBteS0yXCIgfSwgW1xuICAgICAgICAgICAgICBfYyhcImRpdlwiLCB7XG4gICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6XG4gICAgICAgICAgICAgICAgICBcImFsZXJ0IGFsZXJ0LXByaW1hcnkgZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlciBtYi0wXCIsXG4gICAgICAgICAgICAgICAgYXR0cnM6IHsgcm9sZTogXCJhbGVydFwiIH0sXG4gICAgICAgICAgICAgICAgZG9tUHJvcHM6IHsgaW5uZXJIVE1MOiBfdm0uX3MoX3ZtLmxvZ05vdGUpIH0sXG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgXSlcbiAgICAgICAgICA6IF92bS5fZSgpLFxuICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICBfYyhcbiAgICAgICAgICBcImRpdlwiLFxuICAgICAgICAgIHsgc3RhdGljQ2xhc3M6IFwiY29sLXhsLTggY29sLWxnLTEyXCIgfSxcbiAgICAgICAgICBbXG4gICAgICAgICAgICBfYyhcInZ1ZS1jb2RlLWhpZ2hsaWdodFwiLCB7IGF0dHJzOiB7IGxhbmd1YWdlOiBcImpzXCIgfSB9LCBbXG4gICAgICAgICAgICAgIF9jKFwicHJlXCIsIFtcbiAgICAgICAgICAgICAgICBfdm0uX3YoXG4gICAgICAgICAgICAgICAgICBcInRoaXMuJHVuaWNvcm5Mb2coe1xcblxcdHRleHQ6ICdIZWxsbyBXb3JsZCcsXFxuXFx0dHlwZTogJ2xvZycsXFxufSk7XFxuXFx0XFx0XFx0XFx0XFx0XFx0XCJcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgIF0sXG4gICAgICAgICAgMVxuICAgICAgICApLFxuICAgICAgXVxuICAgICksXG4gIF0pXG59XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW1xuICBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF92bSA9IHRoaXNcbiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2hcbiAgICByZXR1cm4gX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJyb3cgbWItMlwiIH0sIFtcbiAgICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiY29sLTEyXCIgfSwgW1xuICAgICAgICBfYyhcImg1XCIsIHsgc3RhdGljQ2xhc3M6IFwibXktMFwiIH0sIFtfYyhcImNvZGVcIiwgW192bS5fdihcInR5cGVcIildKV0pLFxuICAgICAgXSksXG4gICAgXSlcbiAgfSxcbl1cbnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZVxuXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIF92bSA9IHRoaXNcbiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50XG4gIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICByZXR1cm4gX2MoXG4gICAgXCJkaXZcIixcbiAgICBbXG4gICAgICBfYyhcIk5hdlwiKSxcbiAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICBfdm0uX20oMCksXG4gICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJjb250YWluZXJcIiB9LCBbXG4gICAgICAgIF9jKFxuICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAgeyBzdGF0aWNDbGFzczogXCJyb3cgbWItNVwiLCBhdHRyczogeyBpZDogXCJ1bC1pbnN0YWxsYXRpb25cIiB9IH0sXG4gICAgICAgICAgW1xuICAgICAgICAgICAgX3ZtLl9tKDEpLFxuICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICBcImRpdlwiLFxuICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiBcImNvbC14bC04IGNvbC1sZy0xMlwiIH0sXG4gICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICBfYyhcInZ1ZS1jb2RlLWhpZ2hsaWdodFwiLCB7IGF0dHJzOiB7IGxhbmd1YWdlOiBcInNoZWxsXCIgfSB9LCBbXG4gICAgICAgICAgICAgICAgICBfYyhcInByZVwiLCBbX3ZtLl92KFwibnBtIGkgLUQgdnVlLXVuaWNvcm4tbG9nXFxuXFx0XFx0XFx0XFx0XFx0XFx0XCIpXSksXG4gICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgIDFcbiAgICAgICAgICAgICksXG4gICAgICAgICAgXVxuICAgICAgICApLFxuICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcInJvdyBtYi01XCIsIGF0dHJzOiB7IGlkOiBcInVsLXVzYWdlXCIgfSB9LCBbXG4gICAgICAgICAgX3ZtLl9tKDIpLFxuICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgX2MoXG4gICAgICAgICAgICBcImRpdlwiLFxuICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogXCJjb2wteGwtOCBjb2wtbGctMTJcIiB9LFxuICAgICAgICAgICAgW1xuICAgICAgICAgICAgICBfYyhcInZ1ZS1jb2RlLWhpZ2hsaWdodFwiLCB7IGF0dHJzOiB7IGxhbmd1YWdlOiBcImpzXCIgfSB9LCBbXG4gICAgICAgICAgICAgICAgX2MoXCJwcmVcIiwgW1xuICAgICAgICAgICAgICAgICAgX3ZtLl92KFxuICAgICAgICAgICAgICAgICAgICBcImltcG9ydCBWdWUgZnJvbSAndnVlJztcXG5pbXBvcnQgVW5pY29ybkxvZyBmcm9tICd2dWUtdW5pY29ybi1sb2cnO1xcblxcblZ1ZS51c2UoVW5pY29ybkxvZyk7XFxuXFx0XFx0XFx0XFx0XFx0XFx0XFx0XFx0XCJcbiAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIDFcbiAgICAgICAgICApLFxuICAgICAgICBdKSxcbiAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgX2MoXG4gICAgICAgICAgXCJkaXZcIixcbiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiBcInJvdyBtYi01XCIsIGF0dHJzOiB7IGlkOiBcInVsLXBsdWdpbi1vcHRpb25zXCIgfSB9LFxuICAgICAgICAgIFtcbiAgICAgICAgICAgIF92bS5fbSgzKSxcbiAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImNvbC0xMiBtYi0zXCIgfSwgW1xuICAgICAgICAgICAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcInRhYmxlLXJlc3BvbnNpdmVcIiB9LCBbXG4gICAgICAgICAgICAgICAgX2MoXG4gICAgICAgICAgICAgICAgICBcInRhYmxlXCIsXG4gICAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiBcInRhYmxlIHRhYmxlLXN0cmlwZWQgdGFibGUtYm9yZGVyZWRcIiB9LFxuICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICBfdm0uX20oNCksXG4gICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgIF9jKFwidGJvZHlcIiwgW1xuICAgICAgICAgICAgICAgICAgICAgIF9jKFwidHJcIiwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgX2MoXCJ0ZFwiLCB7IGF0dHJzOiB7IHZhbGlnbjogXCJ0b3BcIiB9IH0sIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiZGVmYXVsdFN0eWxlc1wiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICAgICAgICAgICAgICBcInRkXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogXCJvcHRpb24tdHlwZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHZhbGlnbjogXCJ0b3BcIiB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KFwiT2JqZWN0XCIpXVxuICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICBfdm0uX20oNSksXG4gICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl9tKDYpLFxuICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jKFwidGRcIiwgeyBhdHRyczogeyB2YWxpZ246IFwidG9wXCIgfSB9LCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihfdm0uX3MoX3ZtLmNvcHkuZGVmYXVsdFN0eWxlcykpLFxuICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICBfYyhcInRyXCIsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jKFwidGRcIiwgeyBhdHRyczogeyB2YWxpZ246IFwidG9wXCIgfSB9LCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcImRpc2FibGVkXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgX2MoXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwidGRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiBcIm9wdGlvbi10eXBlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgdmFsaWduOiBcInRvcFwiIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoXCJCb29sZWFuXCIpXVxuICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICBfYyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ0ZFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6IFwiYm9vbGVhbi1zdHlsZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHZhbGlnbjogXCJ0b3BcIiB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KFwiZmFsc2VcIildXG4gICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jKFwidGRcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyB2YWxpZ246IFwidG9wXCIgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZG9tUHJvcHM6IHsgaW5uZXJIVE1MOiBfdm0uX3MoX3ZtLm9wdGlvbnMuYm9vbGVhbikgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jKFwidGRcIiwgeyBhdHRyczogeyB2YWxpZ246IFwidG9wXCIgfSB9LCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihfdm0uX3MoX3ZtLmNvcHkuZGlzYWJsZWQpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgICAgX2MoXCJ0clwiLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICBfYyhcInRkXCIsIHsgYXR0cnM6IHsgdmFsaWduOiBcInRvcFwiIH0gfSwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCJsb2dQcmVmaXhcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICBfYyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ0ZFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6IFwib3B0aW9uLXR5cGVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyB2YWxpZ246IFwidG9wXCIgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgW192bS5fdihcIkJvb2xlYW4gfCBTdHJpbmdcIildXG4gICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICAgICAgICAgICAgICBcInRkXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogXCJib29sZWFuLXN0eWxlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgdmFsaWduOiBcInRvcFwiIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoXCJmYWxzZVwiKV1cbiAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgX2MoXCJ0ZFwiLCB7IGF0dHJzOiB7IHZhbGlnbjogXCJ0b3BcIiB9IH0sIFtfdm0uX3YoXCItXCIpXSksXG4gICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgX2MoXCJ0ZFwiLCB7IGF0dHJzOiB7IHZhbGlnbjogXCJ0b3BcIiB9IH0sIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KF92bS5fcyhfdm0uY29weS5sb2dQcmVmaXgpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgICAgX2MoXCJ0clwiLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICBfYyhcInRkXCIsIHsgYXR0cnM6IHsgdmFsaWduOiBcInRvcFwiIH0gfSwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCJzdHlsZXNcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICBfYyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ0ZFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6IFwib3B0aW9uLXR5cGVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyB2YWxpZ246IFwidG9wXCIgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgW192bS5fdihcIlN0cmluZyB8IEFycmF5XCIpXVxuICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICBfYyhcInRkXCIsIHsgYXR0cnM6IHsgdmFsaWduOiBcInRvcFwiIH0gfSwgW192bS5fdihcIi1cIildKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICBfYyhcInRkXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgdmFsaWduOiBcInRvcFwiIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGRvbVByb3BzOiB7IGlubmVySFRNTDogX3ZtLl9zKF92bS5vcHRpb25zLnN0eWxlcykgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jKFwidGRcIiwgeyBhdHRyczogeyB2YWxpZ246IFwidG9wXCIgfSB9LCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihfdm0uX3MoX3ZtLmNvcHkuc3R5bGVzKSksXG4gICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICAgIF9jKFwidHJcIiwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgX2MoXCJ0ZFwiLCB7IGF0dHJzOiB7IHZhbGlnbjogXCJ0b3BcIiB9IH0sIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwidHlwZVwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICAgICAgICAgICAgICBcInRkXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogXCJvcHRpb24tdHlwZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHZhbGlnbjogXCJ0b3BcIiB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KFwiU3RyaW5nXCIpXVxuICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICBfYyhcInRkXCIsIHsgYXR0cnM6IHsgdmFsaWduOiBcInRvcFwiIH0gfSwgW192bS5fdihcImxvZ1wiKV0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jKFwidGRcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyB2YWxpZ246IFwidG9wXCIgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZG9tUHJvcHM6IHsgaW5uZXJIVE1MOiBfdm0uX3MoX3ZtLm9wdGlvbnMudHlwZSkgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jKFwidGRcIiwgeyBhdHRyczogeyB2YWxpZ246IFwidG9wXCIgfSB9LCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihfdm0uX3MoX3ZtLmNvcHkudHlwZSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgX3ZtLl9tKDcpLFxuICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICBcImRpdlwiLFxuICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiBcImNvbC14bC04IGNvbC1sZy0xMlwiIH0sXG4gICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICBfYyhcInZ1ZS1jb2RlLWhpZ2hsaWdodFwiLCB7IGF0dHJzOiB7IGxhbmd1YWdlOiBcImpzXCIgfSB9LCBbXG4gICAgICAgICAgICAgICAgICBfYyhcInByZVwiLCBbXG4gICAgICAgICAgICAgICAgICAgIF92bS5fdihcbiAgICAgICAgICAgICAgICAgICAgICBcImltcG9ydCBWdWUgZnJvbSAndnVlJztcXG5pbXBvcnQgVW5pY29ybkxvZyBmcm9tICd2dWUtdW5pY29ybi1sb2cnO1xcblxcblZ1ZS51c2UoVW5pY29ybkxvZywge1xcbiAgZGVmYXVsdFN0eWxlczoge30sXFxuICBkaXNhYmxlZDogcHJvY2Vzcy5lbnYuVU5JQ09STl9MT0cgIT09ICd0cnVlJyxcXG4gIGxvZ1ByZWZpeDogJ1tPTUcgTE9PSyBIRVJFIV0nLFxcbiAgc3R5bGVzOiAnZm9udC13ZWlnaHQ6IGJvbGQ7JyxcXG4gIHR5cGU6ICdpbmZvJ1xcbn0pO1xcblxcdFxcdFxcdFxcdFxcdFxcdFxcdFxcdFwiXG4gICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgMVxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImNvbC0xMlwiIH0sIFtcbiAgICAgICAgICAgICAgX2MoXG4gICAgICAgICAgICAgICAgXCJzdmdcIixcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogeyBkaXNwbGF5OiBcIm5vbmVcIiB9LFxuICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgeG1sbnM6IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgX2MoXG4gICAgICAgICAgICAgICAgICAgIFwic3ltYm9sXCIsXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICBhdHRyczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IFwiZXhjbGFtYXRpb24tdHJpYW5nbGUtZmlsbFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsbDogXCJjdXJyZW50Q29sb3JcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHZpZXdCb3g6IFwiMCAwIDE2IDE2XCIsXG4gICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAgIF9jKFwicGF0aFwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBkOiBcIk04Ljk4MiAxLjU2NmExLjEzIDEuMTMgMCAwIDAtMS45NiAwTC4xNjUgMTMuMjMzYy0uNDU3Ljc3OC4wOTEgMS43NjcuOTggMS43NjdoMTMuNzEzYy44ODkgMCAxLjQzOC0uOTkuOTgtMS43NjdMOC45ODIgMS41NjZ6TTggNWMuNTM1IDAgLjk1NC40NjIuOS45OTVsLS4zNSAzLjUwN2EuNTUyLjU1MiAwIDAgMS0xLjEgMEw3LjEgNS45OTVBLjkwNS45MDUgMCAwIDEgOCA1em0uMDAyIDZhMSAxIDAgMSAxIDAgMiAxIDEgMCAwIDEgMC0yelwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6XG4gICAgICAgICAgICAgICAgICAgIFwiYWxlcnQgYWxlcnQtcHJpbWFyeSBkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyIG15LTJcIixcbiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHJvbGU6IFwiYWxlcnRcIiB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgX2MoXG4gICAgICAgICAgICAgICAgICAgIFwic3ZnXCIsXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogXCJiaSBmbGV4LXNocmluay0wIG1lLTJcIixcbiAgICAgICAgICAgICAgICAgICAgICBhdHRyczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IFwiMjRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogXCIyNFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgcm9sZTogXCJpbWdcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiYXJpYS1sYWJlbFwiOiBcIkluZm86XCIsXG4gICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAgIF9jKFwidXNlXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IFwieGxpbms6aHJlZlwiOiBcIiNleGNsYW1hdGlvbi10cmlhbmdsZS1maWxsXCIgfSxcbiAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICBfdm0uX20oOCksXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgXSksXG4gICAgICAgICAgXVxuICAgICAgICApLFxuICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICBfYyhcbiAgICAgICAgICBcImRpdlwiLFxuICAgICAgICAgIHsgc3RhdGljQ2xhc3M6IFwicm93IG1iLTVcIiwgYXR0cnM6IHsgaWQ6IFwidWwtbG9nLW9wdGlvbnNcIiB9IH0sXG4gICAgICAgICAgW1xuICAgICAgICAgICAgX3ZtLl9tKDkpLFxuICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiY29sLWxnLTEyXCIgfSwgW1xuICAgICAgICAgICAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcInRhYmxlLXJlc3BvbnNpdmVcIiB9LCBbXG4gICAgICAgICAgICAgICAgX2MoXG4gICAgICAgICAgICAgICAgICBcInRhYmxlXCIsXG4gICAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiBcInRhYmxlIHRhYmxlLXN0cmlwZWQgdGFibGUtYm9yZGVyZWRcIiB9LFxuICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICBfdm0uX20oMTApLFxuICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICBfYyhcInRib2R5XCIsIFtcbiAgICAgICAgICAgICAgICAgICAgICBfYyhcInRyXCIsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jKFwidGRcIiwgeyBhdHRyczogeyB2YWxpZ246IFwidG9wXCIgfSB9LCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcImFycmF5XCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgX2MoXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwidGRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiBcIm9wdGlvbi10eXBlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgdmFsaWduOiBcInRvcFwiIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoXCJBcnJheVwiKV1cbiAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl9tKDExKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICBfYyhcInRkXCIsIHsgYXR0cnM6IHsgdmFsaWduOiBcInRvcFwiIH0gfSwgW192bS5fdihcIi1cIildKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICBfYyhcInRkXCIsIHsgYXR0cnM6IHsgdmFsaWduOiBcInRvcFwiIH0gfSwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoX3ZtLl9zKF92bS5jb3B5LmFycmF5KSksXG4gICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICAgIF9jKFwidHJcIiwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgX2MoXCJ0ZFwiLCB7IGF0dHJzOiB7IHZhbGlnbjogXCJ0b3BcIiB9IH0sIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiZGlzYWJsZWRcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICBfYyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ0ZFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6IFwib3B0aW9uLXR5cGVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyB2YWxpZ246IFwidG9wXCIgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgW192bS5fdihcIkJvb2xlYW5cIildXG4gICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICAgICAgICAgICAgICBcInRkXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogXCJib29sZWFuLXN0eWxlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgdmFsaWduOiBcInRvcFwiIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoXCJmYWxzZVwiKV1cbiAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgX2MoXCJ0ZFwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHZhbGlnbjogXCJ0b3BcIiB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICBkb21Qcm9wczogeyBpbm5lckhUTUw6IF92bS5fcyhfdm0ub3B0aW9ucy5ib29sZWFuKSB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgX2MoXCJ0ZFwiLCB7IGF0dHJzOiB7IHZhbGlnbjogXCJ0b3BcIiB9IH0sIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KF92bS5fcyhfdm0uY29weS5kaXNhYmxlZCkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICBfYyhcInRyXCIsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jKFwidGRcIiwgeyBhdHRyczogeyB2YWxpZ246IFwidG9wXCIgfSB9LCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcImxvZ1ByZWZpeFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICAgICAgICAgICAgICBcInRkXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogXCJvcHRpb24tdHlwZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHZhbGlnbjogXCJ0b3BcIiB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KFwiQm9vbGVhbiB8IFN0cmluZ1wiKV1cbiAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgX2MoXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwidGRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiBcImJvb2xlYW4tc3R5bGVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyB2YWxpZ246IFwidG9wXCIgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgW192bS5fdihcImZhbHNlXCIpXVxuICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICBfYyhcInRkXCIsIHsgYXR0cnM6IHsgdmFsaWduOiBcInRvcFwiIH0gfSwgW192bS5fdihcIi1cIildKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICBfYyhcInRkXCIsIHsgYXR0cnM6IHsgdmFsaWduOiBcInRvcFwiIH0gfSwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoX3ZtLl9zKF92bS5jb3B5LmxvZ1ByZWZpeCkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICBfYyhcInRyXCIsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jKFwidGRcIiwgeyBhdHRyczogeyB2YWxpZ246IFwidG9wXCIgfSB9LCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIm1hZ2ljYWxcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICBfYyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ0ZFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6IFwib3B0aW9uLXR5cGVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyB2YWxpZ246IFwidG9wXCIgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgW192bS5fdihcIkJvb2xlYW5cIildXG4gICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICAgICAgICAgICAgICBcInRkXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogXCJib29sZWFuLXN0eWxlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgdmFsaWduOiBcInRvcFwiIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoXCJmYWxzZVwiKV1cbiAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgX2MoXCJ0ZFwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHZhbGlnbjogXCJ0b3BcIiB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICBkb21Qcm9wczogeyBpbm5lckhUTUw6IF92bS5fcyhfdm0ub3B0aW9ucy5ib29sZWFuKSB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgX2MoXCJ0ZFwiLCB7IGF0dHJzOiB7IHZhbGlnbjogXCJ0b3BcIiB9IH0sIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KF92bS5fcyhfdm0uY29weS5tYWdpY2FsKSksXG4gICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICAgIF92bS5fbSgxMiksXG4gICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICBfYyhcInRyXCIsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jKFwidGRcIiwgeyBhdHRyczogeyB2YWxpZ246IFwidG9wXCIgfSB9LCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIm9iamVjdHNcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICBfYyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ0ZFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6IFwib3B0aW9uLXR5cGVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyB2YWxpZ246IFwidG9wXCIgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgW192bS5fdihcIk9iamVjdFwiKV1cbiAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl9tKDEzKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICBfYyhcInRkXCIsIHsgYXR0cnM6IHsgdmFsaWduOiBcInRvcFwiIH0gfSwgW192bS5fdihcIi1cIildKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICBfYyhcInRkXCIsIHsgYXR0cnM6IHsgdmFsaWduOiBcInRvcFwiIH0gfSwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoX3ZtLl9zKF92bS5jb3B5Lm9iamVjdCkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICBfYyhcInRyXCIsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jKFwidGRcIiwgeyBhdHRyczogeyB2YWxpZ246IFwidG9wXCIgfSB9LCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcInN0eWxlc1wiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICAgICAgICAgICAgICBcInRkXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogXCJvcHRpb24tdHlwZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHZhbGlnbjogXCJ0b3BcIiB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KFwiU3RyaW5nIHwgQXJyYXlcIildXG4gICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jKFwidGRcIiwgeyBhdHRyczogeyB2YWxpZ246IFwidG9wXCIgfSB9LCBbX3ZtLl92KFwiLVwiKV0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jKFwidGRcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyB2YWxpZ246IFwidG9wXCIgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZG9tUHJvcHM6IHsgaW5uZXJIVE1MOiBfdm0uX3MoX3ZtLm9wdGlvbnMuc3R5bGVzKSB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgX2MoXCJ0ZFwiLCB7IGF0dHJzOiB7IHZhbGlnbjogXCJ0b3BcIiB9IH0sIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KF92bS5fcyhfdm0uY29weS5zdHlsZXMpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgICAgX2MoXCJ0clwiLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICBfYyhcInRkXCIsIHsgYXR0cnM6IHsgdmFsaWduOiBcInRvcFwiIH0gfSwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCJ0ZXh0XCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgX2MoXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwidGRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiBcIm9wdGlvbi10eXBlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgdmFsaWduOiBcInRvcFwiIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoXCJTdHJpbmdcIildXG4gICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jKFwidGRcIiwgeyBhdHRyczogeyB2YWxpZ246IFwidG9wXCIgfSB9LCBbX3ZtLl92KFwi8J+mhFwiKV0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jKFwidGRcIiwgeyBhdHRyczogeyB2YWxpZ246IFwidG9wXCIgfSB9LCBbX3ZtLl92KFwiLVwiKV0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jKFwidGRcIiwgeyBhdHRyczogeyB2YWxpZ246IFwidG9wXCIgfSB9LCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihfdm0uX3MoX3ZtLmNvcHkudGV4dCkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICBfYyhcInRyXCIsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jKFwidGRcIiwgeyBhdHRyczogeyB2YWxpZ246IFwidG9wXCIgfSB9LCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcInR5cGVcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICBfYyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ0ZFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6IFwib3B0aW9uLXR5cGVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyB2YWxpZ246IFwidG9wXCIgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgW192bS5fdihcIlN0cmluZ1wiKV1cbiAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgX2MoXCJ0ZFwiLCB7IGF0dHJzOiB7IHZhbGlnbjogXCJ0b3BcIiB9IH0sIFtfdm0uX3YoXCJsb2dcIildKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICBfYyhcInRkXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgdmFsaWduOiBcInRvcFwiIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGRvbVByb3BzOiB7IGlubmVySFRNTDogX3ZtLl9zKF92bS5vcHRpb25zLnR5cGUpIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICBfYyhcInRkXCIsIHsgYXR0cnM6IHsgdmFsaWduOiBcInRvcFwiIH0gfSwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoX3ZtLl9zKF92bS5jb3B5LnR5cGUpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgIF1cbiAgICAgICAgKSxcbiAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgX3ZtLl9tKDE0KSxcbiAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgX3ZtLl9tKDE1KSxcbiAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgX2MoXG4gICAgICAgICAgXCJkaXZcIixcbiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiBcIm1iLTVcIiwgYXR0cnM6IHsgaWQ6IFwidWwtZXhhbXBsZXNcIiB9IH0sXG4gICAgICAgICAgW1xuICAgICAgICAgICAgX3ZtLl9tKDE2KSxcbiAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICBfYyhcIlNpbXBsZUV4YW1wbGVcIiwgeyBhdHRyczogeyBpZDogXCJzaW1wbGUtZXhhbXBsZXNcIiB9IH0pLFxuICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgIF9jKFwiVGV4dEV4YW1wbGVcIiwgeyBhdHRyczogeyBpZDogXCJ0ZXh0LWV4YW1wbGVzXCIgfSB9KSxcbiAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICBfYyhcIlR5cGVFeGFtcGxlXCIsIHsgYXR0cnM6IHsgaWQ6IFwidHlwZS1leGFtcGxlc1wiIH0gfSksXG4gICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgX2MoXCJTdHlsZXNFeGFtcGxlXCIsIHsgYXR0cnM6IHsgaWQ6IFwic3R5bGVzLWV4YW1wbGVzXCIgfSB9KSxcbiAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICBfYyhcIkRpc2FibGVkRXhhbXBsZVwiLCB7IGF0dHJzOiB7IGlkOiBcImRpc2FibGVkLWV4YW1wbGVzXCIgfSB9KSxcbiAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICBfYyhcIkxvZ1ByZWZpeEV4YW1wbGVcIiwgeyBhdHRyczogeyBpZDogXCJsb2dQcmVmaXgtZXhhbXBsZXNcIiB9IH0pLFxuICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgIF9jKFwiTWFnaWNhbEV4YW1wbGVcIiwgeyBhdHRyczogeyBpZDogXCJtYWdpY2FsLWV4YW1wbGVzXCIgfSB9KSxcbiAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICBfYyhcIkxvZ1ByZWZpeEV4YW1wbGVcIiwge1xuICAgICAgICAgICAgICBhdHRyczogeyBpZDogXCJuYW1lLWV4YW1wbGVzXCIsIGlzTmFtZU9wdGlvbjogdHJ1ZSB9LFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgX2MoXCJPYmplY3RzRXhhbXBsZXNcIiwgeyBhdHRyczogeyBpZDogXCJvYmplY3RzLWV4YW1wbGVzXCIgfSB9KSxcbiAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICBfYyhcIkFycmF5c0V4YW1wbGVcIiwgeyBhdHRyczogeyBpZDogXCJhcnJheS1leGFtcGxlc1wiIH0gfSksXG4gICAgICAgICAgXSxcbiAgICAgICAgICAxXG4gICAgICAgICksXG4gICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgIF92bS5fbSgxNyksXG4gICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgIF92bS5fbSgxOCksXG4gICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgIF92bS5fbSgxOSksXG4gICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgIF92bS5fbSgyMCksXG4gICAgICBdKSxcbiAgICBdLFxuICAgIDFcbiAgKVxufVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtcbiAgZnVuY3Rpb24gKCkge1xuICAgIHZhciBfdm0gPSB0aGlzXG4gICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50XG4gICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gICAgcmV0dXJuIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiY29udGFpbmVyIG1iLTVcIiB9LCBbXG4gICAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcInJvdyBtYi0zXCIgfSwgW1xuICAgICAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImNvbC0xMiB0ZXh0LWNlbnRlclwiIH0sIFtcbiAgICAgICAgICBfYyhcImgxXCIsIHsgc3RhdGljQ2xhc3M6IFwicmFpbmJvdy10ZXh0XCIgfSwgW1xuICAgICAgICAgICAgX3ZtLl92KFwiVnVlIFVuaWNvcm4gTG9nXCIpLFxuICAgICAgICAgIF0pLFxuICAgICAgICBdKSxcbiAgICAgIF0pLFxuICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwicm93XCIgfSwgW1xuICAgICAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImNvbC0xMiBtYi00XCIgfSwgW1xuICAgICAgICAgIF9jKFwiaDNcIiwgeyBzdGF0aWNDbGFzczogXCJ0ZXh0LWNlbnRlciBtYi00XCIgfSwgW1xuICAgICAgICAgICAgX3ZtLl92KFwiXFxuXFx0XFx0XFx0XFx0XFx0XFx0QSBcIiksXG4gICAgICAgICAgICBfYyhcInNwYW5cIiwgeyBzdGF0aWNDbGFzczogXCJyYWluYm93LXRleHRcIiB9LCBbX3ZtLl92KFwibWFnaWNhbFwiKV0pLFxuICAgICAgICAgICAgX3ZtLl92KFxuICAgICAgICAgICAgICBcIiDwn6aEIHBsdWdpbiB0byBtYWtlXFxuXFx0XFx0XFx0XFx0XFx0XFx0Y29sb3JpbmcgdGhlIGNvbnNvbGUgb3V0cHV0IGVhc2llciBhbmQgbW9yZSBmbGV4aWJsZS5cXG5cXHRcXHRcXHRcXHRcXHRcIlxuICAgICAgICAgICAgKSxcbiAgICAgICAgICBdKSxcbiAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgIF9jKFwicFwiLCBbXG4gICAgICAgICAgICBfdm0uX3YoXG4gICAgICAgICAgICAgIFwiXFxuXFx0XFx0XFx0XFx0XFx0XFx0U29tZXRpbWVzIHdoZW4gYnVpbGRpbmcgeW91ciBhcHBsaWNhdGlvbi9zaXRlIHlvdSBkb24ndCB3YW50IHRvIHNlZVxcblxcdFxcdFxcdFxcdFxcdFxcdHlvdXIgbGludGVyIGNvbXBsYWluaW5nIGFib3V0IHVzaW5nIGNvbnNvbGUgZnVuY3Rpb25zLiBUaGlzIGhlbHBzIHRvXFxuXFx0XFx0XFx0XFx0XFx0XFx0a2VlcCB5b3VyIGxpbnRlciBoYXBweSBzbyB5b3UgY2FuIGNvbmNlbnRyYXRlIG9uIHdyaXRpbmcgYnVnIGZyZWVcXG5cXHRcXHRcXHRcXHRcXHRcXHRtYWdpY2FsIGNvZGUuXFxuXFx0XFx0XFx0XFx0XFx0XCJcbiAgICAgICAgICAgICksXG4gICAgICAgICAgXSksXG4gICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICBfYyhcInBcIiwgW1xuICAgICAgICAgICAgX3ZtLl92KFxuICAgICAgICAgICAgICBcIlxcblxcdFxcdFxcdFxcdFxcdFxcdEl0IGFsc28gaGFzIHRoZSBhYmlsaXR5IHRvIHJ1biB0aGUgY29uc29sZSBmdW5jdGlvbnMgZGVwZW5kaW5nIG9uXFxuXFx0XFx0XFx0XFx0XFx0XFx0ZW52aXJvbm1lbnQgdmFyaWFibGVzIHNvIHlvdSBjYW4ga2VlcCB5b3VyIHByb2R1Y3Rpb24gc2l0ZSdzIGNvbnNvbGVcXG5cXHRcXHRcXHRcXHRcXHRcXHRxdWlldC5cXG5cXHRcXHRcXHRcXHRcXHRcIlxuICAgICAgICAgICAgKSxcbiAgICAgICAgICBdKSxcbiAgICAgICAgXSksXG4gICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiY29sLTEyXCIgfSwgW19jKFwiaDVcIiwgW192bS5fdihcIkRlbW9cIildKV0pLFxuICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImNvbC0xMlwiIH0sIFtcbiAgICAgICAgICBfdm0uX3YoXG4gICAgICAgICAgICAnXFxuXFx0XFx0XFx0XFx0XFx0T3BlbiBEZXZUb29scyBhbmQgY2xpY2sgb24gdGhlIFwiQ29uc29sZVwiIHRhYiBhbmQgdHJ5IG91dCBzb21lXFxuXFx0XFx0XFx0XFx0XFx0J1xuICAgICAgICAgICksXG4gICAgICAgICAgX2MoXCJhXCIsIHsgYXR0cnM6IHsgaHJlZjogXCIjdWwtZXhhbXBsZXNcIiB9IH0sIFtfdm0uX3YoXCJFeGFtcGxlc1wiKV0pLFxuICAgICAgICAgIF92bS5fdihcIi5cXG5cXHRcXHRcXHRcXHRcIiksXG4gICAgICAgIF0pLFxuICAgICAgXSksXG4gICAgXSlcbiAgfSxcbiAgZnVuY3Rpb24gKCkge1xuICAgIHZhciBfdm0gPSB0aGlzXG4gICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50XG4gICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gICAgcmV0dXJuIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiY29sLTEyXCIgfSwgW1xuICAgICAgX2MoXCJoMlwiLCBbX3ZtLl92KFwiSW5zdGFsbGF0aW9uXCIpXSksXG4gICAgXSlcbiAgfSxcbiAgZnVuY3Rpb24gKCkge1xuICAgIHZhciBfdm0gPSB0aGlzXG4gICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50XG4gICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gICAgcmV0dXJuIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiY29sLTEyXCIgfSwgW19jKFwiaDJcIiwgW192bS5fdihcIlVzYWdlXCIpXSldKVxuICB9LFxuICBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF92bSA9IHRoaXNcbiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2hcbiAgICByZXR1cm4gX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJjb2wtMTIgbWItM1wiIH0sIFtcbiAgICAgIF9jKFwiaDJcIiwgW192bS5fdihcIlBsdWdpbiBPcHRpb25zXCIpXSksXG4gICAgXSlcbiAgfSxcbiAgZnVuY3Rpb24gKCkge1xuICAgIHZhciBfdm0gPSB0aGlzXG4gICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50XG4gICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gICAgcmV0dXJuIF9jKFwidGhlYWRcIiwgW1xuICAgICAgX2MoXCJ0clwiLCBbXG4gICAgICAgIF9jKFwidGhcIiwgW192bS5fdihcIk5hbWVcIildKSxcbiAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgX2MoXCJ0aFwiLCBbX3ZtLl92KFwiVHlwZVwiKV0pLFxuICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICBfYyhcInRoXCIsIFtfdm0uX3YoXCJEZWZhdWx0XCIpXSksXG4gICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgIF9jKFwidGhcIiwgW192bS5fdihcIk9wdGlvbnNcIildKSxcbiAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgX2MoXCJ0aFwiLCBbX3ZtLl92KFwiRGVzY3JpcHRpb25cIildKSxcbiAgICAgIF0pLFxuICAgIF0pXG4gIH0sXG4gIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX3ZtID0gdGhpc1xuICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICAgIHJldHVybiBfYyhcInRkXCIsIHsgYXR0cnM6IHsgdmFsaWduOiBcInRvcFwiIH0gfSwgW1xuICAgICAgX2MoXCJjb2RlXCIsIFtcbiAgICAgICAgX2MoXCJwcmVcIiwgW1xuICAgICAgICAgIF92bS5fdihcbiAgICAgICAgICAgIFwiY29uc3QgcmFpbmJvd0xpbmVhckdyYWRpZW50ID0gYGxpbmVhci1ncmFkaWVudCh0byByaWdodCxcXG5cXHRoc2woMCwgMTAwJSwgNTAlKSxcXG5cXHRoc2woNjAsIDEwMCUsIDUwJSksXFxuXFx0aHNsKDEyMCwgMTAwJSwgNTAlKSxcXG5cXHRoc2woMTgwLCAxMDAlLCA1MCUpLFxcblxcdGhzbCgyNDAsIDEwMCUsIDUwJSksXFxuXFx0aHNsKDMwMCwgMTAwJSwgNTAlKSxcXG5cXHRoc2woMzYwLCAxMDAlLCA1MCUpXFxuKWA7XFxuXFxuZGVmYXVsdFN0eWxlczoge1xcblxcdGxvZzogW1xcblxcdFxcdCdiYWNrZ3JvdW5kLWNvbG9yOiBibGFjaycsXFxuXFx0XFx0YGJvcmRlci1pbWFnZTogJHtyYWluYm93TGluZWFyR3JhZGllbnR9IDFgLFxcblxcdFxcdCdib3JkZXItc3R5bGU6IHNvbGlkJyxcXG5cXHRcXHQnYm9yZGVyLXdpZHRoOiA0cHgnLFxcblxcdFxcdCdjb2xvcjogI2ZmZicsXFxuXFx0XFx0J2ZvbnQtd2VpZ2h0OiBub3JtYWwnLFxcblxcdFxcdCdwYWRkaW5nOiA4cHgnLFxcblxcdF0sXFxuXFx0aW5mbzogW1xcblxcdFxcdCdiYWNrZ3JvdW5kLWNvbG9yOiBoc2xhKDIyNSwgMTAwJSwgOCUsIDEpJyxcXG5cXHRcXHQnYm94LXNoYWRvdzogOTk5cHggMCAwIGhzbGEoMjI1LCAxMDAlLCA4JSwgMSknLFxcblxcdFxcdCdjb2xvcjogaHNsYSgyMjUsIDEwMCUsIDg1JSwgMSknLFxcblxcdFxcdCdkaXNwbGF5OiBibG9jaycsXFxuXFx0XFx0J3BhZGRpbmc6IDJweCcsXFxuXFx0XSxcXG59XCJcbiAgICAgICAgICApLFxuICAgICAgICBdKSxcbiAgICAgIF0pLFxuICAgIF0pXG4gIH0sXG4gIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX3ZtID0gdGhpc1xuICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICAgIHJldHVybiBfYyhcInRkXCIsIHsgYXR0cnM6IHsgdmFsaWduOiBcInRvcFwiIH0gfSwgW1xuICAgICAgX2MoXCJjb2RlXCIsIFtfYyhcInByZVwiLCBbX3ZtLl92KFwie1xcblxcdGxvZzogW10sXFxuXFx0aW5mbzogW10sXFxufVwiKV0pXSksXG4gICAgXSlcbiAgfSxcbiAgZnVuY3Rpb24gKCkge1xuICAgIHZhciBfdm0gPSB0aGlzXG4gICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50XG4gICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gICAgcmV0dXJuIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiY29sLTEyXCIgfSwgW1xuICAgICAgX2MoXCJoNVwiLCBbX3ZtLl92KFwiT3ZlcnJpZGluZyB0aGUgcGx1Z2luIGRlZmF1bHQgb3B0aW9uc1wiKV0pLFxuICAgIF0pXG4gIH0sXG4gIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX3ZtID0gdGhpc1xuICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICAgIHJldHVybiBfYyhcImRpdlwiLCBbXG4gICAgICBfdm0uX3YoXCJcXG5cXHRcXHRcXHRcXHRcXHRcXHRcXHRJdCBpcyByZWNvbW1lbmRlZCB0byBzZXQgdGhlIFwiKSxcbiAgICAgIF9jKFwiY29kZVwiLCBbX3ZtLl92KFwiZGlzYWJsZWRcIildKSxcbiAgICAgIF92bS5fdihcIiBvcHRpb24gdG8gdXNlIGFcXG5cXHRcXHRcXHRcXHRcXHRcXHRcXHRcIiksXG4gICAgICBfYyhcInNwYW5cIiwgeyBzdGF0aWNDbGFzczogXCJmc3QtaXRhbGljXCIgfSwgW192bS5fdihcIi5lbnZcIildKSxcbiAgICAgIF92bS5fdihcbiAgICAgICAgXCIgdmFyaWFibGUgd2hlbiBwb3NzaWJsZS4gVGhpc1xcblxcdFxcdFxcdFxcdFxcdFxcdFxcdHdheSB5b3Ugd2lsbCBub3QgaGF2ZSB5b3VyIGxvZ3MgZXhwb3NlZCB0byB0aGUgcHVibGljIHdoZW4gb24gYVxcblxcdFxcdFxcdFxcdFxcdFxcdFxcdHByb2R1Y3Rpb24gc2l0ZS5cXG5cXHRcXHRcXHRcXHRcXHRcXHRcIlxuICAgICAgKSxcbiAgICBdKVxuICB9LFxuICBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF92bSA9IHRoaXNcbiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2hcbiAgICByZXR1cm4gX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJjb2wtMTIgbWItM1wiIH0sIFtcbiAgICAgIF9jKFwiaDJcIiwgW192bS5fdihcIkxvZyBPcHRpb25zXCIpXSksXG4gICAgXSlcbiAgfSxcbiAgZnVuY3Rpb24gKCkge1xuICAgIHZhciBfdm0gPSB0aGlzXG4gICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50XG4gICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gICAgcmV0dXJuIF9jKFwidGhlYWRcIiwgW1xuICAgICAgX2MoXCJ0clwiLCBbXG4gICAgICAgIF9jKFwidGhcIiwgW192bS5fdihcIk5hbWVcIildKSxcbiAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgX2MoXCJ0aFwiLCBbX3ZtLl92KFwiVHlwZVwiKV0pLFxuICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICBfYyhcInRoXCIsIFtfdm0uX3YoXCJEZWZhdWx0XCIpXSksXG4gICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgIF9jKFwidGhcIiwgW192bS5fdihcIk9wdGlvbnNcIildKSxcbiAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgX2MoXCJ0aFwiLCBbX3ZtLl92KFwiRGVzY3JpcHRpb25cIildKSxcbiAgICAgIF0pLFxuICAgIF0pXG4gIH0sXG4gIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX3ZtID0gdGhpc1xuICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICAgIHJldHVybiBfYyhcInRkXCIsIHsgYXR0cnM6IHsgdmFsaWduOiBcInRvcFwiIH0gfSwgW19jKFwiY29kZVwiLCBbX3ZtLl92KFwiW11cIildKV0pXG4gIH0sXG4gIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX3ZtID0gdGhpc1xuICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICAgIHJldHVybiBfYyhcInRyXCIsIFtcbiAgICAgIF9jKFwidGRcIiwgeyBhdHRyczogeyB2YWxpZ246IFwidG9wXCIgfSB9LCBbX3ZtLl92KFwibmFtZVwiKV0pLFxuICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgIF9jKFwidGRcIiwgeyBzdGF0aWNDbGFzczogXCJvcHRpb24tdHlwZVwiLCBhdHRyczogeyB2YWxpZ246IFwidG9wXCIgfSB9LCBbXG4gICAgICAgIF92bS5fdihcIlN0cmluZ1wiKSxcbiAgICAgIF0pLFxuICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgIF9jKFwidGRcIiwgeyBhdHRyczogeyB2YWxpZ246IFwidG9wXCIgfSB9LCBbX3ZtLl92KFwiW1VuaWNvcm5Mb2ddOlwiKV0pLFxuICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgIF9jKFwidGRcIiwgeyBhdHRyczogeyB2YWxpZ246IFwidG9wXCIgfSB9LCBbX3ZtLl92KFwiLVwiKV0pLFxuICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgIF9jKFwidGRcIiwgeyBhdHRyczogeyB2YWxpZ246IFwidG9wXCIgfSB9LCBbXG4gICAgICAgIF92bS5fdihcIlxcblxcdFxcdFxcdFxcdFxcdFxcdFxcdFxcdFxcdFxcdElmIFwiKSxcbiAgICAgICAgX2MoXCJjb2RlXCIsIFtfdm0uX3YoXCJsb2dQcmVmaXhcIildKSxcbiAgICAgICAgX3ZtLl92KFwiIG9wdGlvbiBpcyBzZXQgYXMgYVxcblxcdFxcdFxcdFxcdFxcdFxcdFxcdFxcdFxcdFxcdFwiKSxcbiAgICAgICAgX2MoXCJzcGFuXCIsIHsgc3RhdGljQ2xhc3M6IFwib3B0aW9uLXR5cGVcIiB9LCBbX3ZtLl92KFwiQm9vbGVhblwiKV0pLFxuICAgICAgICBfdm0uX3YoXCIgb2ZcXG5cXHRcXHRcXHRcXHRcXHRcXHRcXHRcXHRcXHRcXHRcIiksXG4gICAgICAgIF9jKFwic3BhblwiLCB7IHN0YXRpY0NsYXNzOiBcImJvb2xlYW4tc3R5bGVcIiB9LCBbX3ZtLl92KFwidHJ1ZVwiKV0pLFxuICAgICAgICBfdm0uX3YoXCIsIGl0IHdpbGwgdXNlIHRoZVxcblxcdFxcdFxcdFxcdFxcdFxcdFxcdFxcdFxcdFxcdFwiKSxcbiAgICAgICAgX2MoXCJjb2RlXCIsIFtfdm0uX3YoXCJuYW1lXCIpXSksXG4gICAgICAgIF92bS5fdihcIiBvcHRpb24gZm9yIHRoZSBwcmVmaXguXFxuXFx0XFx0XFx0XFx0XFx0XFx0XFx0XFx0XFx0XCIpLFxuICAgICAgXSksXG4gICAgXSlcbiAgfSxcbiAgZnVuY3Rpb24gKCkge1xuICAgIHZhciBfdm0gPSB0aGlzXG4gICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50XG4gICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gICAgcmV0dXJuIF9jKFwidGRcIiwgeyBhdHRyczogeyB2YWxpZ246IFwidG9wXCIgfSB9LCBbX2MoXCJjb2RlXCIsIFtfdm0uX3YoXCJ7fVwiKV0pXSlcbiAgfSxcbiAgZnVuY3Rpb24gKCkge1xuICAgIHZhciBfdm0gPSB0aGlzXG4gICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50XG4gICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gICAgcmV0dXJuIF9jKFxuICAgICAgXCJkaXZcIixcbiAgICAgIHsgc3RhdGljQ2xhc3M6IFwicm93IG1iLTVcIiwgYXR0cnM6IHsgaWQ6IFwidWwtaW5zdGFuY2UtbWV0aG9kc1wiIH0gfSxcbiAgICAgIFtcbiAgICAgICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJjb2wtMTJcIiB9LCBbXG4gICAgICAgICAgX2MoXCJoMlwiLCBbX3ZtLl92KFwiSW5zdGFuY2UgTWV0aG9kc1wiKV0pLFxuICAgICAgICBdKSxcbiAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJjb2wtMTJcIiB9LCBbXG4gICAgICAgICAgX3ZtLl92KFxuICAgICAgICAgICAgXCJcXG5cXHRcXHRcXHRcXHRcXHRUaGVyZSBhcmUgdHdvIGluc3RhbmNlIG1ldGhvZHMgYXZhaWxhYmxlIHRvIHVzZTpcXG5cXHRcXHRcXHRcXHRcXHRcIlxuICAgICAgICAgICksXG4gICAgICAgICAgX2MoXCJiclwiKSxcbiAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgIF9jKFwiY29kZVwiLCBbX3ZtLl92KFwiJHVuaWNvcm5Mb2dcIildKSxcbiAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgIF9jKFwiYnJcIiksXG4gICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICBfYyhcImNvZGVcIiwgW192bS5fdihcIiR1bmlMb2dcIildKSxcbiAgICAgICAgXSksXG4gICAgICBdXG4gICAgKVxuICB9LFxuICBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF92bSA9IHRoaXNcbiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2hcbiAgICByZXR1cm4gX2MoXG4gICAgICBcImRpdlwiLFxuICAgICAgeyBzdGF0aWNDbGFzczogXCJyb3cgbWItNVwiLCBhdHRyczogeyBpZDogXCJ1bC1jb25zb2xlLW1ldGhvZHNcIiB9IH0sXG4gICAgICBbXG4gICAgICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiY29sLTEyXCIgfSwgW1xuICAgICAgICAgIF9jKFwiaDJcIiwgW192bS5fdihcIkNvbnNvbGUgTWV0aG9kc1wiKV0pLFxuICAgICAgICBdKSxcbiAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJjb2wtMTJcIiB9LCBbXG4gICAgICAgICAgX3ZtLl92KFxuICAgICAgICAgICAgXCJcXG5cXHRcXHRcXHRcXHRcXHRGb3IgYSBkZXNjcmlwdGlvbiBvZiB0aGUgZGlmZmVyZW50IGxvZyBtZXRob2RzLCByZWZlciB0byB0aGVcXG5cXHRcXHRcXHRcXHRcXHRcIlxuICAgICAgICAgICksXG4gICAgICAgICAgX2MoXG4gICAgICAgICAgICBcImFcIixcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgICBocmVmOiBcImh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9jb25zb2xlXCIsXG4gICAgICAgICAgICAgICAgdGFyZ2V0OiBcIl9ibGFua1wiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFtfdm0uX3YoXCJXZWIgQVBJcyBNRE5cIildXG4gICAgICAgICAgKSxcbiAgICAgICAgICBfdm0uX3YoXCJcXG5cXHRcXHRcXHRcXHRcXHRkZXZlbG9wZXIgZG9jdW1lbnRhdGlvbiBmb3IgY29uc29sZS5cXG5cXHRcXHRcXHRcXHRcIiksXG4gICAgICAgIF0pLFxuICAgICAgXVxuICAgIClcbiAgfSxcbiAgZnVuY3Rpb24gKCkge1xuICAgIHZhciBfdm0gPSB0aGlzXG4gICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50XG4gICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gICAgcmV0dXJuIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwicm93XCIgfSwgW1xuICAgICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJjb2wtMTIgbWItM1wiIH0sIFtcbiAgICAgICAgX2MoXCJoMlwiLCBbX3ZtLl92KFwiRXhhbXBsZXNcIildKSxcbiAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgX2MoXCJwXCIsIHsgc3RhdGljQ2xhc3M6IFwiZnN0LWl0YWxpY1wiIH0sIFtcbiAgICAgICAgICBfdm0uX3YoXG4gICAgICAgICAgICAnXFxuXFx0XFx0XFx0XFx0XFx0XFx0XFx0T3BlbiBEZXZUb29scyBhbmQgY2xpY2sgb24gdGhlIFwiQ29uc29sZVwiIHRhYiB0byB2aWV3IGV4YW1wbGVcXG5cXHRcXHRcXHRcXHRcXHRcXHRcXHRyZXN1bHRzLlxcblxcdFxcdFxcdFxcdFxcdFxcdCdcbiAgICAgICAgICApLFxuICAgICAgICBdKSxcbiAgICAgIF0pLFxuICAgIF0pXG4gIH0sXG4gIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX3ZtID0gdGhpc1xuICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICAgIHJldHVybiBfYyhcbiAgICAgIFwiZGl2XCIsXG4gICAgICB7IHN0YXRpY0NsYXNzOiBcInJvdyBtYi01XCIsIGF0dHJzOiB7IGlkOiBcInVsLWRlcGVuZGVuY2llc1wiIH0gfSxcbiAgICAgIFtcbiAgICAgICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJjb2wtMTJcIiB9LCBbXG4gICAgICAgICAgX2MoXCJoMlwiLCBbX3ZtLl92KFwiRGVwZW5kZW5jaWVzXCIpXSksXG4gICAgICAgIF0pLFxuICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImNvbC14bC04IGNvbC1sZy0xMlwiIH0sIFtcbiAgICAgICAgICBfYyhcbiAgICAgICAgICAgIFwiYVwiLFxuICAgICAgICAgICAgeyBhdHRyczogeyBocmVmOiBcImh0dHBzOi8vdjIudnVlanMub3JnL1wiLCB0YXJnZXQ6IFwiX2JsYW5rXCIgfSB9LFxuICAgICAgICAgICAgW192bS5fdihcIlZ1ZSAyXCIpXVxuICAgICAgICAgICksXG4gICAgICAgIF0pLFxuICAgICAgXVxuICAgIClcbiAgfSxcbiAgZnVuY3Rpb24gKCkge1xuICAgIHZhciBfdm0gPSB0aGlzXG4gICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50XG4gICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gICAgcmV0dXJuIF9jKFxuICAgICAgXCJkaXZcIixcbiAgICAgIHsgc3RhdGljQ2xhc3M6IFwicm93IG1iLTVcIiwgYXR0cnM6IHsgaWQ6IFwidWwtY2hhbmdlLWxvZ1wiIH0gfSxcbiAgICAgIFtcbiAgICAgICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJjb2wtMTJcIiB9LCBbXG4gICAgICAgICAgX2MoXCJoMlwiLCBbX3ZtLl92KFwiQ2hhbmdlIExvZ1wiKV0pLFxuICAgICAgICBdKSxcbiAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJjb2wtMTJcIiB9LCBbXG4gICAgICAgICAgX2MoXG4gICAgICAgICAgICBcImFcIixcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgICBocmVmOiBcImh0dHBzOi8vZ2l0aHViLmNvbS93ZWJkZXZuZXJkc3R1ZmYvdnVlLXVuaWNvcm4tbG9nL2Jsb2IvbWFzdGVyL0NIQU5HRUxPRy5tZFwiLFxuICAgICAgICAgICAgICAgIHRhcmdldDogXCJfYmxhbmtcIixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBbX3ZtLl92KFwiQ0hBTkdFTE9HLm1kXCIpXVxuICAgICAgICAgICksXG4gICAgICAgIF0pLFxuICAgICAgXVxuICAgIClcbiAgfSxcbiAgZnVuY3Rpb24gKCkge1xuICAgIHZhciBfdm0gPSB0aGlzXG4gICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50XG4gICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gICAgcmV0dXJuIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwicm93IG1iLTVcIiwgYXR0cnM6IHsgaWQ6IFwidWwtbGljZW5zZVwiIH0gfSwgW1xuICAgICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJjb2wtMTJcIiB9LCBbX2MoXCJoMlwiLCBbX3ZtLl92KFwiTGljZW5zZVwiKV0pXSksXG4gICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJjb2wtMTJcIiB9LCBbXG4gICAgICAgIF9jKFwicFwiLCBbXG4gICAgICAgICAgX3ZtLl92KFxuICAgICAgICAgICAgXCJcXG5cXHRcXHRcXHRcXHRcXHRcXHRDb3B5cmlnaHQgwqkgMjAyMiBXZWJEZXZOZXJkU3R1ZmZcXG5cXHRcXHRcXHRcXHRcXHRcXHRcIlxuICAgICAgICAgICksXG4gICAgICAgICAgX2MoXCJiclwiKSxcbiAgICAgICAgICBfdm0uX3YoXCJcXG5cXHRcXHRcXHRcXHRcXHRcXHRMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXFxuXFx0XFx0XFx0XFx0XFx0XCIpLFxuICAgICAgICBdKSxcbiAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgX2MoXCJwXCIsIFtcbiAgICAgICAgICBfYyhcbiAgICAgICAgICAgIFwiYVwiLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBhdHRyczoge1xuICAgICAgICAgICAgICAgIGhyZWY6IFwiaHR0cHM6Ly9naXRodWIuY29tL3dlYmRldm5lcmRzdHVmZi92dWUtdW5pY29ybi1sb2cvYmxvYi9tYXN0ZXIvTElDRU5TRS5tZFwiLFxuICAgICAgICAgICAgICAgIHRhcmdldDogXCJfYmxhbmtcIixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBbX3ZtLl92KFwiXFxuXFx0XFx0XFx0XFx0XFx0XFx0XFx0TElDRU5TRS5tZFxcblxcdFxcdFxcdFxcdFxcdFxcdFwiKV1cbiAgICAgICAgICApLFxuICAgICAgICBdKSxcbiAgICAgIF0pLFxuICAgIF0pXG4gIH0sXG4gIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX3ZtID0gdGhpc1xuICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICAgIHJldHVybiBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcInJvdyBtYi01XCIgfSwgW1xuICAgICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJjb2wtMTIgdGV4dC1jZW50ZXJcIiB9LCBbXG4gICAgICAgIF9jKFwiaW1nXCIsIHtcbiAgICAgICAgICBhdHRyczoge1xuICAgICAgICAgICAgc3JjOiBcImltYWdlcy92dWUtdW5pY29ybi1sb2ctc29jaWFsLmpwZ1wiLFxuICAgICAgICAgICAgYWx0OiBcIlZ1ZSBVbmljb3JuIExvZyBieSBAV2ViRGV2TmVyZFN0dWZmXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSksXG4gICAgICBdKSxcbiAgICBdKVxuICB9LFxuXVxucmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlXG5cbmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0iLCIvKiBnbG9iYWxzIF9fVlVFX1NTUl9DT05URVhUX18gKi9cblxuLy8gSU1QT1JUQU5UOiBEbyBOT1QgdXNlIEVTMjAxNSBmZWF0dXJlcyBpbiB0aGlzIGZpbGUgKGV4Y2VwdCBmb3IgbW9kdWxlcykuXG4vLyBUaGlzIG1vZHVsZSBpcyBhIHJ1bnRpbWUgdXRpbGl0eSBmb3IgY2xlYW5lciBjb21wb25lbnQgbW9kdWxlIG91dHB1dCBhbmQgd2lsbFxuLy8gYmUgaW5jbHVkZWQgaW4gdGhlIGZpbmFsIHdlYnBhY2sgdXNlciBidW5kbGUuXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG5vcm1hbGl6ZUNvbXBvbmVudCAoXG4gIHNjcmlwdEV4cG9ydHMsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmdW5jdGlvbmFsVGVtcGxhdGUsXG4gIGluamVjdFN0eWxlcyxcbiAgc2NvcGVJZCxcbiAgbW9kdWxlSWRlbnRpZmllciwgLyogc2VydmVyIG9ubHkgKi9cbiAgc2hhZG93TW9kZSAvKiB2dWUtY2xpIG9ubHkgKi9cbikge1xuICAvLyBWdWUuZXh0ZW5kIGNvbnN0cnVjdG9yIGV4cG9ydCBpbnRlcm9wXG4gIHZhciBvcHRpb25zID0gdHlwZW9mIHNjcmlwdEV4cG9ydHMgPT09ICdmdW5jdGlvbidcbiAgICA/IHNjcmlwdEV4cG9ydHMub3B0aW9uc1xuICAgIDogc2NyaXB0RXhwb3J0c1xuXG4gIC8vIHJlbmRlciBmdW5jdGlvbnNcbiAgaWYgKHJlbmRlcikge1xuICAgIG9wdGlvbnMucmVuZGVyID0gcmVuZGVyXG4gICAgb3B0aW9ucy5zdGF0aWNSZW5kZXJGbnMgPSBzdGF0aWNSZW5kZXJGbnNcbiAgICBvcHRpb25zLl9jb21waWxlZCA9IHRydWVcbiAgfVxuXG4gIC8vIGZ1bmN0aW9uYWwgdGVtcGxhdGVcbiAgaWYgKGZ1bmN0aW9uYWxUZW1wbGF0ZSkge1xuICAgIG9wdGlvbnMuZnVuY3Rpb25hbCA9IHRydWVcbiAgfVxuXG4gIC8vIHNjb3BlZElkXG4gIGlmIChzY29wZUlkKSB7XG4gICAgb3B0aW9ucy5fc2NvcGVJZCA9ICdkYXRhLXYtJyArIHNjb3BlSWRcbiAgfVxuXG4gIHZhciBob29rXG4gIGlmIChtb2R1bGVJZGVudGlmaWVyKSB7IC8vIHNlcnZlciBidWlsZFxuICAgIGhvb2sgPSBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgLy8gMi4zIGluamVjdGlvblxuICAgICAgY29udGV4dCA9XG4gICAgICAgIGNvbnRleHQgfHwgLy8gY2FjaGVkIGNhbGxcbiAgICAgICAgKHRoaXMuJHZub2RlICYmIHRoaXMuJHZub2RlLnNzckNvbnRleHQpIHx8IC8vIHN0YXRlZnVsXG4gICAgICAgICh0aGlzLnBhcmVudCAmJiB0aGlzLnBhcmVudC4kdm5vZGUgJiYgdGhpcy5wYXJlbnQuJHZub2RlLnNzckNvbnRleHQpIC8vIGZ1bmN0aW9uYWxcbiAgICAgIC8vIDIuMiB3aXRoIHJ1bkluTmV3Q29udGV4dDogdHJ1ZVxuICAgICAgaWYgKCFjb250ZXh0ICYmIHR5cGVvZiBfX1ZVRV9TU1JfQ09OVEVYVF9fICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjb250ZXh0ID0gX19WVUVfU1NSX0NPTlRFWFRfX1xuICAgICAgfVxuICAgICAgLy8gaW5qZWN0IGNvbXBvbmVudCBzdHlsZXNcbiAgICAgIGlmIChpbmplY3RTdHlsZXMpIHtcbiAgICAgICAgaW5qZWN0U3R5bGVzLmNhbGwodGhpcywgY29udGV4dClcbiAgICAgIH1cbiAgICAgIC8vIHJlZ2lzdGVyIGNvbXBvbmVudCBtb2R1bGUgaWRlbnRpZmllciBmb3IgYXN5bmMgY2h1bmsgaW5mZXJyZW5jZVxuICAgICAgaWYgKGNvbnRleHQgJiYgY29udGV4dC5fcmVnaXN0ZXJlZENvbXBvbmVudHMpIHtcbiAgICAgICAgY29udGV4dC5fcmVnaXN0ZXJlZENvbXBvbmVudHMuYWRkKG1vZHVsZUlkZW50aWZpZXIpXG4gICAgICB9XG4gICAgfVxuICAgIC8vIHVzZWQgYnkgc3NyIGluIGNhc2UgY29tcG9uZW50IGlzIGNhY2hlZCBhbmQgYmVmb3JlQ3JlYXRlXG4gICAgLy8gbmV2ZXIgZ2V0cyBjYWxsZWRcbiAgICBvcHRpb25zLl9zc3JSZWdpc3RlciA9IGhvb2tcbiAgfSBlbHNlIGlmIChpbmplY3RTdHlsZXMpIHtcbiAgICBob29rID0gc2hhZG93TW9kZVxuICAgICAgPyBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGluamVjdFN0eWxlcy5jYWxsKFxuICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgKG9wdGlvbnMuZnVuY3Rpb25hbCA/IHRoaXMucGFyZW50IDogdGhpcykuJHJvb3QuJG9wdGlvbnMuc2hhZG93Um9vdFxuICAgICAgICApXG4gICAgICB9XG4gICAgICA6IGluamVjdFN0eWxlc1xuICB9XG5cbiAgaWYgKGhvb2spIHtcbiAgICBpZiAob3B0aW9ucy5mdW5jdGlvbmFsKSB7XG4gICAgICAvLyBmb3IgdGVtcGxhdGUtb25seSBob3QtcmVsb2FkIGJlY2F1c2UgaW4gdGhhdCBjYXNlIHRoZSByZW5kZXIgZm4gZG9lc24ndFxuICAgICAgLy8gZ28gdGhyb3VnaCB0aGUgbm9ybWFsaXplclxuICAgICAgb3B0aW9ucy5faW5qZWN0U3R5bGVzID0gaG9va1xuICAgICAgLy8gcmVnaXN0ZXIgZm9yIGZ1bmN0aW9uYWwgY29tcG9uZW50IGluIHZ1ZSBmaWxlXG4gICAgICB2YXIgb3JpZ2luYWxSZW5kZXIgPSBvcHRpb25zLnJlbmRlclxuICAgICAgb3B0aW9ucy5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXJXaXRoU3R5bGVJbmplY3Rpb24gKGgsIGNvbnRleHQpIHtcbiAgICAgICAgaG9vay5jYWxsKGNvbnRleHQpXG4gICAgICAgIHJldHVybiBvcmlnaW5hbFJlbmRlcihoLCBjb250ZXh0KVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBpbmplY3QgY29tcG9uZW50IHJlZ2lzdHJhdGlvbiBhcyBiZWZvcmVDcmVhdGUgaG9va1xuICAgICAgdmFyIGV4aXN0aW5nID0gb3B0aW9ucy5iZWZvcmVDcmVhdGVcbiAgICAgIG9wdGlvbnMuYmVmb3JlQ3JlYXRlID0gZXhpc3RpbmdcbiAgICAgICAgPyBbXS5jb25jYXQoZXhpc3RpbmcsIGhvb2spXG4gICAgICAgIDogW2hvb2tdXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBleHBvcnRzOiBzY3JpcHRFeHBvcnRzLFxuICAgIG9wdGlvbnM6IG9wdGlvbnNcbiAgfVxufVxuIiwiLy8gc3R5bGUtbG9hZGVyOiBBZGRzIHNvbWUgY3NzIHRvIHRoZSBET00gYnkgYWRkaW5nIGEgPHN0eWxlPiB0YWdcblxuLy8gbG9hZCB0aGUgc3R5bGVzXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3N0eWxlUG9zdExvYWRlci5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanM/P2Nsb25lZFJ1bGVTZXQtM1swXS5ydWxlc1swXS51c2VbMl0hLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9Vbmljb3JuTG9nLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmxhbmc9c2NzcyZcIik7XG5pZihjb250ZW50Ll9fZXNNb2R1bGUpIGNvbnRlbnQgPSBjb250ZW50LmRlZmF1bHQ7XG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuLy8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIERPTVxudmFyIGFkZCA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlc0NsaWVudC5qc1wiKS5kZWZhdWx0XG52YXIgdXBkYXRlID0gYWRkKFwiMWVmNzMxYzlcIiwgY29udGVudCwgZmFsc2UsIHt9KTtcbi8vIEhvdCBNb2R1bGUgUmVwbGFjZW1lbnRcbmlmKG1vZHVsZS5ob3QpIHtcbiAvLyBXaGVuIHRoZSBzdHlsZXMgY2hhbmdlLCB1cGRhdGUgdGhlIDxzdHlsZT4gdGFnc1xuIGlmKCFjb250ZW50LmxvY2Fscykge1xuICAgbW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3N0eWxlUG9zdExvYWRlci5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanM/P2Nsb25lZFJ1bGVTZXQtM1swXS5ydWxlc1swXS51c2VbMl0hLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9Vbmljb3JuTG9nLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmxhbmc9c2NzcyZcIiwgZnVuY3Rpb24oKSB7XG4gICAgIHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcz8/Y2xvbmVkUnVsZVNldC0zWzBdLnJ1bGVzWzBdLnVzZVsyXSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL1VuaWNvcm5Mb2cudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmbGFuZz1zY3NzJlwiKTtcbiAgICAgaWYobmV3Q29udGVudC5fX2VzTW9kdWxlKSBuZXdDb250ZW50ID0gbmV3Q29udGVudC5kZWZhdWx0O1xuICAgICBpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcbiAgICAgdXBkYXRlKG5ld0NvbnRlbnQpO1xuICAgfSk7XG4gfVxuIC8vIFdoZW4gdGhlIG1vZHVsZSBpcyBkaXNwb3NlZCwgcmVtb3ZlIHRoZSA8c3R5bGU+IHRhZ3NcbiBtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCIvKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4gIE1vZGlmaWVkIGJ5IEV2YW4gWW91IEB5eXg5OTA4MDNcbiovXG5cbmltcG9ydCBsaXN0VG9TdHlsZXMgZnJvbSAnLi9saXN0VG9TdHlsZXMnXG5cbnZhciBoYXNEb2N1bWVudCA9IHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCdcblxuaWYgKHR5cGVvZiBERUJVRyAhPT0gJ3VuZGVmaW5lZCcgJiYgREVCVUcpIHtcbiAgaWYgKCFoYXNEb2N1bWVudCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAndnVlLXN0eWxlLWxvYWRlciBjYW5ub3QgYmUgdXNlZCBpbiBhIG5vbi1icm93c2VyIGVudmlyb25tZW50LiAnICtcbiAgICBcIlVzZSB7IHRhcmdldDogJ25vZGUnIH0gaW4geW91ciBXZWJwYWNrIGNvbmZpZyB0byBpbmRpY2F0ZSBhIHNlcnZlci1yZW5kZXJpbmcgZW52aXJvbm1lbnQuXCJcbiAgKSB9XG59XG5cbi8qXG50eXBlIFN0eWxlT2JqZWN0ID0ge1xuICBpZDogbnVtYmVyO1xuICBwYXJ0czogQXJyYXk8U3R5bGVPYmplY3RQYXJ0PlxufVxuXG50eXBlIFN0eWxlT2JqZWN0UGFydCA9IHtcbiAgY3NzOiBzdHJpbmc7XG4gIG1lZGlhOiBzdHJpbmc7XG4gIHNvdXJjZU1hcDogP3N0cmluZ1xufVxuKi9cblxudmFyIHN0eWxlc0luRG9tID0gey8qXG4gIFtpZDogbnVtYmVyXToge1xuICAgIGlkOiBudW1iZXIsXG4gICAgcmVmczogbnVtYmVyLFxuICAgIHBhcnRzOiBBcnJheTwob2JqPzogU3R5bGVPYmplY3RQYXJ0KSA9PiB2b2lkPlxuICB9XG4qL31cblxudmFyIGhlYWQgPSBoYXNEb2N1bWVudCAmJiAoZG9jdW1lbnQuaGVhZCB8fCBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaGVhZCcpWzBdKVxudmFyIHNpbmdsZXRvbkVsZW1lbnQgPSBudWxsXG52YXIgc2luZ2xldG9uQ291bnRlciA9IDBcbnZhciBpc1Byb2R1Y3Rpb24gPSBmYWxzZVxudmFyIG5vb3AgPSBmdW5jdGlvbiAoKSB7fVxudmFyIG9wdGlvbnMgPSBudWxsXG52YXIgc3NySWRLZXkgPSAnZGF0YS12dWUtc3NyLWlkJ1xuXG4vLyBGb3JjZSBzaW5nbGUtdGFnIHNvbHV0aW9uIG9uIElFNi05LCB3aGljaCBoYXMgYSBoYXJkIGxpbWl0IG9uIHRoZSAjIG9mIDxzdHlsZT5cbi8vIHRhZ3MgaXQgd2lsbCBhbGxvdyBvbiBhIHBhZ2VcbnZhciBpc09sZElFID0gdHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgL21zaWUgWzYtOV1cXGIvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpKVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhZGRTdHlsZXNDbGllbnQgKHBhcmVudElkLCBsaXN0LCBfaXNQcm9kdWN0aW9uLCBfb3B0aW9ucykge1xuICBpc1Byb2R1Y3Rpb24gPSBfaXNQcm9kdWN0aW9uXG5cbiAgb3B0aW9ucyA9IF9vcHRpb25zIHx8IHt9XG5cbiAgdmFyIHN0eWxlcyA9IGxpc3RUb1N0eWxlcyhwYXJlbnRJZCwgbGlzdClcbiAgYWRkU3R5bGVzVG9Eb20oc3R5bGVzKVxuXG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUgKG5ld0xpc3QpIHtcbiAgICB2YXIgbWF5UmVtb3ZlID0gW11cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGl0ZW0gPSBzdHlsZXNbaV1cbiAgICAgIHZhciBkb21TdHlsZSA9IHN0eWxlc0luRG9tW2l0ZW0uaWRdXG4gICAgICBkb21TdHlsZS5yZWZzLS1cbiAgICAgIG1heVJlbW92ZS5wdXNoKGRvbVN0eWxlKVxuICAgIH1cbiAgICBpZiAobmV3TGlzdCkge1xuICAgICAgc3R5bGVzID0gbGlzdFRvU3R5bGVzKHBhcmVudElkLCBuZXdMaXN0KVxuICAgICAgYWRkU3R5bGVzVG9Eb20oc3R5bGVzKVxuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZXMgPSBbXVxuICAgIH1cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1heVJlbW92ZS5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGRvbVN0eWxlID0gbWF5UmVtb3ZlW2ldXG4gICAgICBpZiAoZG9tU3R5bGUucmVmcyA9PT0gMCkge1xuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGRvbVN0eWxlLnBhcnRzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgZG9tU3R5bGUucGFydHNbal0oKVxuICAgICAgICB9XG4gICAgICAgIGRlbGV0ZSBzdHlsZXNJbkRvbVtkb21TdHlsZS5pZF1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYWRkU3R5bGVzVG9Eb20gKHN0eWxlcyAvKiBBcnJheTxTdHlsZU9iamVjdD4gKi8pIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IHN0eWxlc1tpXVxuICAgIHZhciBkb21TdHlsZSA9IHN0eWxlc0luRG9tW2l0ZW0uaWRdXG4gICAgaWYgKGRvbVN0eWxlKSB7XG4gICAgICBkb21TdHlsZS5yZWZzKytcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgZG9tU3R5bGUucGFydHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgZG9tU3R5bGUucGFydHNbal0oaXRlbS5wYXJ0c1tqXSlcbiAgICAgIH1cbiAgICAgIGZvciAoOyBqIDwgaXRlbS5wYXJ0cy5sZW5ndGg7IGorKykge1xuICAgICAgICBkb21TdHlsZS5wYXJ0cy5wdXNoKGFkZFN0eWxlKGl0ZW0ucGFydHNbal0pKVxuICAgICAgfVxuICAgICAgaWYgKGRvbVN0eWxlLnBhcnRzLmxlbmd0aCA+IGl0ZW0ucGFydHMubGVuZ3RoKSB7XG4gICAgICAgIGRvbVN0eWxlLnBhcnRzLmxlbmd0aCA9IGl0ZW0ucGFydHMubGVuZ3RoXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBwYXJ0cyA9IFtdXG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGl0ZW0ucGFydHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgcGFydHMucHVzaChhZGRTdHlsZShpdGVtLnBhcnRzW2pdKSlcbiAgICAgIH1cbiAgICAgIHN0eWxlc0luRG9tW2l0ZW0uaWRdID0geyBpZDogaXRlbS5pZCwgcmVmczogMSwgcGFydHM6IHBhcnRzIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlU3R5bGVFbGVtZW50ICgpIHtcbiAgdmFyIHN0eWxlRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJylcbiAgc3R5bGVFbGVtZW50LnR5cGUgPSAndGV4dC9jc3MnXG4gIGhlYWQuYXBwZW5kQ2hpbGQoc3R5bGVFbGVtZW50KVxuICByZXR1cm4gc3R5bGVFbGVtZW50XG59XG5cbmZ1bmN0aW9uIGFkZFN0eWxlIChvYmogLyogU3R5bGVPYmplY3RQYXJ0ICovKSB7XG4gIHZhciB1cGRhdGUsIHJlbW92ZVxuICB2YXIgc3R5bGVFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcignc3R5bGVbJyArIHNzcklkS2V5ICsgJ349XCInICsgb2JqLmlkICsgJ1wiXScpXG5cbiAgaWYgKHN0eWxlRWxlbWVudCkge1xuICAgIGlmIChpc1Byb2R1Y3Rpb24pIHtcbiAgICAgIC8vIGhhcyBTU1Igc3R5bGVzIGFuZCBpbiBwcm9kdWN0aW9uIG1vZGUuXG4gICAgICAvLyBzaW1wbHkgZG8gbm90aGluZy5cbiAgICAgIHJldHVybiBub29wXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGhhcyBTU1Igc3R5bGVzIGJ1dCBpbiBkZXYgbW9kZS5cbiAgICAgIC8vIGZvciBzb21lIHJlYXNvbiBDaHJvbWUgY2FuJ3QgaGFuZGxlIHNvdXJjZSBtYXAgaW4gc2VydmVyLXJlbmRlcmVkXG4gICAgICAvLyBzdHlsZSB0YWdzIC0gc291cmNlIG1hcHMgaW4gPHN0eWxlPiBvbmx5IHdvcmtzIGlmIHRoZSBzdHlsZSB0YWcgaXNcbiAgICAgIC8vIGNyZWF0ZWQgYW5kIGluc2VydGVkIGR5bmFtaWNhbGx5LiBTbyB3ZSByZW1vdmUgdGhlIHNlcnZlciByZW5kZXJlZFxuICAgICAgLy8gc3R5bGVzIGFuZCBpbmplY3QgbmV3IG9uZXMuXG4gICAgICBzdHlsZUVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQpXG4gICAgfVxuICB9XG5cbiAgaWYgKGlzT2xkSUUpIHtcbiAgICAvLyB1c2Ugc2luZ2xldG9uIG1vZGUgZm9yIElFOS5cbiAgICB2YXIgc3R5bGVJbmRleCA9IHNpbmdsZXRvbkNvdW50ZXIrK1xuICAgIHN0eWxlRWxlbWVudCA9IHNpbmdsZXRvbkVsZW1lbnQgfHwgKHNpbmdsZXRvbkVsZW1lbnQgPSBjcmVhdGVTdHlsZUVsZW1lbnQoKSlcbiAgICB1cGRhdGUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGVFbGVtZW50LCBzdHlsZUluZGV4LCBmYWxzZSlcbiAgICByZW1vdmUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGVFbGVtZW50LCBzdHlsZUluZGV4LCB0cnVlKVxuICB9IGVsc2Uge1xuICAgIC8vIHVzZSBtdWx0aS1zdHlsZS10YWcgbW9kZSBpbiBhbGwgb3RoZXIgY2FzZXNcbiAgICBzdHlsZUVsZW1lbnQgPSBjcmVhdGVTdHlsZUVsZW1lbnQoKVxuICAgIHVwZGF0ZSA9IGFwcGx5VG9UYWcuYmluZChudWxsLCBzdHlsZUVsZW1lbnQpXG4gICAgcmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuICAgICAgc3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KVxuICAgIH1cbiAgfVxuXG4gIHVwZGF0ZShvYmopXG5cbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZVN0eWxlIChuZXdPYmogLyogU3R5bGVPYmplY3RQYXJ0ICovKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiZcbiAgICAgICAgICBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJlxuICAgICAgICAgIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXApIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICB1cGRhdGUob2JqID0gbmV3T2JqKVxuICAgIH0gZWxzZSB7XG4gICAgICByZW1vdmUoKVxuICAgIH1cbiAgfVxufVxuXG52YXIgcmVwbGFjZVRleHQgPSAoZnVuY3Rpb24gKCkge1xuICB2YXIgdGV4dFN0b3JlID0gW11cblxuICByZXR1cm4gZnVuY3Rpb24gKGluZGV4LCByZXBsYWNlbWVudCkge1xuICAgIHRleHRTdG9yZVtpbmRleF0gPSByZXBsYWNlbWVudFxuICAgIHJldHVybiB0ZXh0U3RvcmUuZmlsdGVyKEJvb2xlYW4pLmpvaW4oJ1xcbicpXG4gIH1cbn0pKClcblxuZnVuY3Rpb24gYXBwbHlUb1NpbmdsZXRvblRhZyAoc3R5bGVFbGVtZW50LCBpbmRleCwgcmVtb3ZlLCBvYmopIHtcbiAgdmFyIGNzcyA9IHJlbW92ZSA/ICcnIDogb2JqLmNzc1xuXG4gIGlmIChzdHlsZUVsZW1lbnQuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0LmNzc1RleHQgPSByZXBsYWNlVGV4dChpbmRleCwgY3NzKVxuICB9IGVsc2Uge1xuICAgIHZhciBjc3NOb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKVxuICAgIHZhciBjaGlsZE5vZGVzID0gc3R5bGVFbGVtZW50LmNoaWxkTm9kZXNcbiAgICBpZiAoY2hpbGROb2Rlc1tpbmRleF0pIHN0eWxlRWxlbWVudC5yZW1vdmVDaGlsZChjaGlsZE5vZGVzW2luZGV4XSlcbiAgICBpZiAoY2hpbGROb2Rlcy5sZW5ndGgpIHtcbiAgICAgIHN0eWxlRWxlbWVudC5pbnNlcnRCZWZvcmUoY3NzTm9kZSwgY2hpbGROb2Rlc1tpbmRleF0pXG4gICAgfSBlbHNlIHtcbiAgICAgIHN0eWxlRWxlbWVudC5hcHBlbmRDaGlsZChjc3NOb2RlKVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBhcHBseVRvVGFnIChzdHlsZUVsZW1lbnQsIG9iaikge1xuICB2YXIgY3NzID0gb2JqLmNzc1xuICB2YXIgbWVkaWEgPSBvYmoubWVkaWFcbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXBcblxuICBpZiAobWVkaWEpIHtcbiAgICBzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKCdtZWRpYScsIG1lZGlhKVxuICB9XG4gIGlmIChvcHRpb25zLnNzcklkKSB7XG4gICAgc3R5bGVFbGVtZW50LnNldEF0dHJpYnV0ZShzc3JJZEtleSwgb2JqLmlkKVxuICB9XG5cbiAgaWYgKHNvdXJjZU1hcCkge1xuICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLmNocm9tZS5jb20vZGV2dG9vbHMvZG9jcy9qYXZhc2NyaXB0LWRlYnVnZ2luZ1xuICAgIC8vIHRoaXMgbWFrZXMgc291cmNlIG1hcHMgaW5zaWRlIHN0eWxlIHRhZ3Mgd29yayBwcm9wZXJseSBpbiBDaHJvbWVcbiAgICBjc3MgKz0gJ1xcbi8qIyBzb3VyY2VVUkw9JyArIHNvdXJjZU1hcC5zb3VyY2VzWzBdICsgJyAqLydcbiAgICAvLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yNjYwMzg3NVxuICAgIGNzcyArPSAnXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCwnICsgYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSArICcgKi8nXG4gIH1cblxuICBpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzXG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZUVsZW1lbnQucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpXG4gICAgfVxuICAgIHN0eWxlRWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKVxuICB9XG59XG4iLCIvKipcbiAqIFRyYW5zbGF0ZXMgdGhlIGxpc3QgZm9ybWF0IHByb2R1Y2VkIGJ5IGNzcy1sb2FkZXIgaW50byBzb21ldGhpbmdcbiAqIGVhc2llciB0byBtYW5pcHVsYXRlLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBsaXN0VG9TdHlsZXMgKHBhcmVudElkLCBsaXN0KSB7XG4gIHZhciBzdHlsZXMgPSBbXVxuICB2YXIgbmV3U3R5bGVzID0ge31cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldXG4gICAgdmFyIGlkID0gaXRlbVswXVxuICAgIHZhciBjc3MgPSBpdGVtWzFdXG4gICAgdmFyIG1lZGlhID0gaXRlbVsyXVxuICAgIHZhciBzb3VyY2VNYXAgPSBpdGVtWzNdXG4gICAgdmFyIHBhcnQgPSB7XG4gICAgICBpZDogcGFyZW50SWQgKyAnOicgKyBpLFxuICAgICAgY3NzOiBjc3MsXG4gICAgICBtZWRpYTogbWVkaWEsXG4gICAgICBzb3VyY2VNYXA6IHNvdXJjZU1hcFxuICAgIH1cbiAgICBpZiAoIW5ld1N0eWxlc1tpZF0pIHtcbiAgICAgIHN0eWxlcy5wdXNoKG5ld1N0eWxlc1tpZF0gPSB7IGlkOiBpZCwgcGFydHM6IFtwYXJ0XSB9KVxuICAgIH0gZWxzZSB7XG4gICAgICBuZXdTdHlsZXNbaWRdLnBhcnRzLnB1c2gocGFydClcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHN0eWxlc1xufVxuIiwiLyohXG4gKiBWdWUuanMgdjIuNi4xNFxuICogKGMpIDIwMTQtMjAyMSBFdmFuIFlvdVxuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuICovXG4vKiAgKi9cblxudmFyIGVtcHR5T2JqZWN0ID0gT2JqZWN0LmZyZWV6ZSh7fSk7XG5cbi8vIFRoZXNlIGhlbHBlcnMgcHJvZHVjZSBiZXR0ZXIgVk0gY29kZSBpbiBKUyBlbmdpbmVzIGR1ZSB0byB0aGVpclxuLy8gZXhwbGljaXRuZXNzIGFuZCBmdW5jdGlvbiBpbmxpbmluZy5cbmZ1bmN0aW9uIGlzVW5kZWYgKHYpIHtcbiAgcmV0dXJuIHYgPT09IHVuZGVmaW5lZCB8fCB2ID09PSBudWxsXG59XG5cbmZ1bmN0aW9uIGlzRGVmICh2KSB7XG4gIHJldHVybiB2ICE9PSB1bmRlZmluZWQgJiYgdiAhPT0gbnVsbFxufVxuXG5mdW5jdGlvbiBpc1RydWUgKHYpIHtcbiAgcmV0dXJuIHYgPT09IHRydWVcbn1cblxuZnVuY3Rpb24gaXNGYWxzZSAodikge1xuICByZXR1cm4gdiA9PT0gZmFsc2Vcbn1cblxuLyoqXG4gKiBDaGVjayBpZiB2YWx1ZSBpcyBwcmltaXRpdmUuXG4gKi9cbmZ1bmN0aW9uIGlzUHJpbWl0aXZlICh2YWx1ZSkge1xuICByZXR1cm4gKFxuICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgfHxcbiAgICB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInIHx8XG4gICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgdHlwZW9mIHZhbHVlID09PSAnc3ltYm9sJyB8fFxuICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nXG4gIClcbn1cblxuLyoqXG4gKiBRdWljayBvYmplY3QgY2hlY2sgLSB0aGlzIGlzIHByaW1hcmlseSB1c2VkIHRvIHRlbGxcbiAqIE9iamVjdHMgZnJvbSBwcmltaXRpdmUgdmFsdWVzIHdoZW4gd2Uga25vdyB0aGUgdmFsdWVcbiAqIGlzIGEgSlNPTi1jb21wbGlhbnQgdHlwZS5cbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QgKG9iaikge1xuICByZXR1cm4gb2JqICE9PSBudWxsICYmIHR5cGVvZiBvYmogPT09ICdvYmplY3QnXG59XG5cbi8qKlxuICogR2V0IHRoZSByYXcgdHlwZSBzdHJpbmcgb2YgYSB2YWx1ZSwgZS5nLiwgW29iamVjdCBPYmplY3RdLlxuICovXG52YXIgX3RvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxuZnVuY3Rpb24gdG9SYXdUeXBlICh2YWx1ZSkge1xuICByZXR1cm4gX3RvU3RyaW5nLmNhbGwodmFsdWUpLnNsaWNlKDgsIC0xKVxufVxuXG4vKipcbiAqIFN0cmljdCBvYmplY3QgdHlwZSBjaGVjay4gT25seSByZXR1cm5zIHRydWVcbiAqIGZvciBwbGFpbiBKYXZhU2NyaXB0IG9iamVjdHMuXG4gKi9cbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3QgKG9iaikge1xuICByZXR1cm4gX3RvU3RyaW5nLmNhbGwob2JqKSA9PT0gJ1tvYmplY3QgT2JqZWN0XSdcbn1cblxuZnVuY3Rpb24gaXNSZWdFeHAgKHYpIHtcbiAgcmV0dXJuIF90b1N0cmluZy5jYWxsKHYpID09PSAnW29iamVjdCBSZWdFeHBdJ1xufVxuXG4vKipcbiAqIENoZWNrIGlmIHZhbCBpcyBhIHZhbGlkIGFycmF5IGluZGV4LlxuICovXG5mdW5jdGlvbiBpc1ZhbGlkQXJyYXlJbmRleCAodmFsKSB7XG4gIHZhciBuID0gcGFyc2VGbG9hdChTdHJpbmcodmFsKSk7XG4gIHJldHVybiBuID49IDAgJiYgTWF0aC5mbG9vcihuKSA9PT0gbiAmJiBpc0Zpbml0ZSh2YWwpXG59XG5cbmZ1bmN0aW9uIGlzUHJvbWlzZSAodmFsKSB7XG4gIHJldHVybiAoXG4gICAgaXNEZWYodmFsKSAmJlxuICAgIHR5cGVvZiB2YWwudGhlbiA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgIHR5cGVvZiB2YWwuY2F0Y2ggPT09ICdmdW5jdGlvbidcbiAgKVxufVxuXG4vKipcbiAqIENvbnZlcnQgYSB2YWx1ZSB0byBhIHN0cmluZyB0aGF0IGlzIGFjdHVhbGx5IHJlbmRlcmVkLlxuICovXG5mdW5jdGlvbiB0b1N0cmluZyAodmFsKSB7XG4gIHJldHVybiB2YWwgPT0gbnVsbFxuICAgID8gJydcbiAgICA6IEFycmF5LmlzQXJyYXkodmFsKSB8fCAoaXNQbGFpbk9iamVjdCh2YWwpICYmIHZhbC50b1N0cmluZyA9PT0gX3RvU3RyaW5nKVxuICAgICAgPyBKU09OLnN0cmluZ2lmeSh2YWwsIG51bGwsIDIpXG4gICAgICA6IFN0cmluZyh2YWwpXG59XG5cbi8qKlxuICogQ29udmVydCBhbiBpbnB1dCB2YWx1ZSB0byBhIG51bWJlciBmb3IgcGVyc2lzdGVuY2UuXG4gKiBJZiB0aGUgY29udmVyc2lvbiBmYWlscywgcmV0dXJuIG9yaWdpbmFsIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gdG9OdW1iZXIgKHZhbCkge1xuICB2YXIgbiA9IHBhcnNlRmxvYXQodmFsKTtcbiAgcmV0dXJuIGlzTmFOKG4pID8gdmFsIDogblxufVxuXG4vKipcbiAqIE1ha2UgYSBtYXAgYW5kIHJldHVybiBhIGZ1bmN0aW9uIGZvciBjaGVja2luZyBpZiBhIGtleVxuICogaXMgaW4gdGhhdCBtYXAuXG4gKi9cbmZ1bmN0aW9uIG1ha2VNYXAgKFxuICBzdHIsXG4gIGV4cGVjdHNMb3dlckNhc2Vcbikge1xuICB2YXIgbWFwID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdmFyIGxpc3QgPSBzdHIuc3BsaXQoJywnKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgbWFwW2xpc3RbaV1dID0gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZXhwZWN0c0xvd2VyQ2FzZVxuICAgID8gZnVuY3Rpb24gKHZhbCkgeyByZXR1cm4gbWFwW3ZhbC50b0xvd2VyQ2FzZSgpXTsgfVxuICAgIDogZnVuY3Rpb24gKHZhbCkgeyByZXR1cm4gbWFwW3ZhbF07IH1cbn1cblxuLyoqXG4gKiBDaGVjayBpZiBhIHRhZyBpcyBhIGJ1aWx0LWluIHRhZy5cbiAqL1xudmFyIGlzQnVpbHRJblRhZyA9IG1ha2VNYXAoJ3Nsb3QsY29tcG9uZW50JywgdHJ1ZSk7XG5cbi8qKlxuICogQ2hlY2sgaWYgYW4gYXR0cmlidXRlIGlzIGEgcmVzZXJ2ZWQgYXR0cmlidXRlLlxuICovXG52YXIgaXNSZXNlcnZlZEF0dHJpYnV0ZSA9IG1ha2VNYXAoJ2tleSxyZWYsc2xvdCxzbG90LXNjb3BlLGlzJyk7XG5cbi8qKlxuICogUmVtb3ZlIGFuIGl0ZW0gZnJvbSBhbiBhcnJheS5cbiAqL1xuZnVuY3Rpb24gcmVtb3ZlIChhcnIsIGl0ZW0pIHtcbiAgaWYgKGFyci5sZW5ndGgpIHtcbiAgICB2YXIgaW5kZXggPSBhcnIuaW5kZXhPZihpdGVtKTtcbiAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgcmV0dXJuIGFyci5zcGxpY2UoaW5kZXgsIDEpXG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQ2hlY2sgd2hldGhlciBhbiBvYmplY3QgaGFzIHRoZSBwcm9wZXJ0eS5cbiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbmZ1bmN0aW9uIGhhc093biAob2JqLCBrZXkpIHtcbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpXG59XG5cbi8qKlxuICogQ3JlYXRlIGEgY2FjaGVkIHZlcnNpb24gb2YgYSBwdXJlIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBjYWNoZWQgKGZuKSB7XG4gIHZhciBjYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHJldHVybiAoZnVuY3Rpb24gY2FjaGVkRm4gKHN0cikge1xuICAgIHZhciBoaXQgPSBjYWNoZVtzdHJdO1xuICAgIHJldHVybiBoaXQgfHwgKGNhY2hlW3N0cl0gPSBmbihzdHIpKVxuICB9KVxufVxuXG4vKipcbiAqIENhbWVsaXplIGEgaHlwaGVuLWRlbGltaXRlZCBzdHJpbmcuXG4gKi9cbnZhciBjYW1lbGl6ZVJFID0gLy0oXFx3KS9nO1xudmFyIGNhbWVsaXplID0gY2FjaGVkKGZ1bmN0aW9uIChzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKGNhbWVsaXplUkUsIGZ1bmN0aW9uIChfLCBjKSB7IHJldHVybiBjID8gYy50b1VwcGVyQ2FzZSgpIDogJyc7IH0pXG59KTtcblxuLyoqXG4gKiBDYXBpdGFsaXplIGEgc3RyaW5nLlxuICovXG52YXIgY2FwaXRhbGl6ZSA9IGNhY2hlZChmdW5jdGlvbiAoc3RyKSB7XG4gIHJldHVybiBzdHIuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHIuc2xpY2UoMSlcbn0pO1xuXG4vKipcbiAqIEh5cGhlbmF0ZSBhIGNhbWVsQ2FzZSBzdHJpbmcuXG4gKi9cbnZhciBoeXBoZW5hdGVSRSA9IC9cXEIoW0EtWl0pL2c7XG52YXIgaHlwaGVuYXRlID0gY2FjaGVkKGZ1bmN0aW9uIChzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKGh5cGhlbmF0ZVJFLCAnLSQxJykudG9Mb3dlckNhc2UoKVxufSk7XG5cbi8qKlxuICogU2ltcGxlIGJpbmQgcG9seWZpbGwgZm9yIGVudmlyb25tZW50cyB0aGF0IGRvIG5vdCBzdXBwb3J0IGl0LFxuICogZS5nLiwgUGhhbnRvbUpTIDEueC4gVGVjaG5pY2FsbHksIHdlIGRvbid0IG5lZWQgdGhpcyBhbnltb3JlXG4gKiBzaW5jZSBuYXRpdmUgYmluZCBpcyBub3cgcGVyZm9ybWFudCBlbm91Z2ggaW4gbW9zdCBicm93c2Vycy5cbiAqIEJ1dCByZW1vdmluZyBpdCB3b3VsZCBtZWFuIGJyZWFraW5nIGNvZGUgdGhhdCB3YXMgYWJsZSB0byBydW4gaW5cbiAqIFBoYW50b21KUyAxLngsIHNvIHRoaXMgbXVzdCBiZSBrZXB0IGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LlxuICovXG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5mdW5jdGlvbiBwb2x5ZmlsbEJpbmQgKGZuLCBjdHgpIHtcbiAgZnVuY3Rpb24gYm91bmRGbiAoYSkge1xuICAgIHZhciBsID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICByZXR1cm4gbFxuICAgICAgPyBsID4gMVxuICAgICAgICA/IGZuLmFwcGx5KGN0eCwgYXJndW1lbnRzKVxuICAgICAgICA6IGZuLmNhbGwoY3R4LCBhKVxuICAgICAgOiBmbi5jYWxsKGN0eClcbiAgfVxuXG4gIGJvdW5kRm4uX2xlbmd0aCA9IGZuLmxlbmd0aDtcbiAgcmV0dXJuIGJvdW5kRm5cbn1cblxuZnVuY3Rpb24gbmF0aXZlQmluZCAoZm4sIGN0eCkge1xuICByZXR1cm4gZm4uYmluZChjdHgpXG59XG5cbnZhciBiaW5kID0gRnVuY3Rpb24ucHJvdG90eXBlLmJpbmRcbiAgPyBuYXRpdmVCaW5kXG4gIDogcG9seWZpbGxCaW5kO1xuXG4vKipcbiAqIENvbnZlcnQgYW4gQXJyYXktbGlrZSBvYmplY3QgdG8gYSByZWFsIEFycmF5LlxuICovXG5mdW5jdGlvbiB0b0FycmF5IChsaXN0LCBzdGFydCkge1xuICBzdGFydCA9IHN0YXJ0IHx8IDA7XG4gIHZhciBpID0gbGlzdC5sZW5ndGggLSBzdGFydDtcbiAgdmFyIHJldCA9IG5ldyBBcnJheShpKTtcbiAgd2hpbGUgKGktLSkge1xuICAgIHJldFtpXSA9IGxpc3RbaSArIHN0YXJ0XTtcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbi8qKlxuICogTWl4IHByb3BlcnRpZXMgaW50byB0YXJnZXQgb2JqZWN0LlxuICovXG5mdW5jdGlvbiBleHRlbmQgKHRvLCBfZnJvbSkge1xuICBmb3IgKHZhciBrZXkgaW4gX2Zyb20pIHtcbiAgICB0b1trZXldID0gX2Zyb21ba2V5XTtcbiAgfVxuICByZXR1cm4gdG9cbn1cblxuLyoqXG4gKiBNZXJnZSBhbiBBcnJheSBvZiBPYmplY3RzIGludG8gYSBzaW5nbGUgT2JqZWN0LlxuICovXG5mdW5jdGlvbiB0b09iamVjdCAoYXJyKSB7XG4gIHZhciByZXMgPSB7fTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoYXJyW2ldKSB7XG4gICAgICBleHRlbmQocmVzLCBhcnJbaV0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG5cbi8qKlxuICogUGVyZm9ybSBubyBvcGVyYXRpb24uXG4gKiBTdHViYmluZyBhcmdzIHRvIG1ha2UgRmxvdyBoYXBweSB3aXRob3V0IGxlYXZpbmcgdXNlbGVzcyB0cmFuc3BpbGVkIGNvZGVcbiAqIHdpdGggLi4ucmVzdCAoaHR0cHM6Ly9mbG93Lm9yZy9ibG9nLzIwMTcvMDUvMDcvU3RyaWN0LUZ1bmN0aW9uLUNhbGwtQXJpdHkvKS5cbiAqL1xuZnVuY3Rpb24gbm9vcCAoYSwgYiwgYykge31cblxuLyoqXG4gKiBBbHdheXMgcmV0dXJuIGZhbHNlLlxuICovXG52YXIgbm8gPSBmdW5jdGlvbiAoYSwgYiwgYykgeyByZXR1cm4gZmFsc2U7IH07XG5cbi8qIGVzbGludC1lbmFibGUgbm8tdW51c2VkLXZhcnMgKi9cblxuLyoqXG4gKiBSZXR1cm4gdGhlIHNhbWUgdmFsdWUuXG4gKi9cbnZhciBpZGVudGl0eSA9IGZ1bmN0aW9uIChfKSB7IHJldHVybiBfOyB9O1xuXG4vKipcbiAqIENoZWNrIGlmIHR3byB2YWx1ZXMgYXJlIGxvb3NlbHkgZXF1YWwgLSB0aGF0IGlzLFxuICogaWYgdGhleSBhcmUgcGxhaW4gb2JqZWN0cywgZG8gdGhleSBoYXZlIHRoZSBzYW1lIHNoYXBlP1xuICovXG5mdW5jdGlvbiBsb29zZUVxdWFsIChhLCBiKSB7XG4gIGlmIChhID09PSBiKSB7IHJldHVybiB0cnVlIH1cbiAgdmFyIGlzT2JqZWN0QSA9IGlzT2JqZWN0KGEpO1xuICB2YXIgaXNPYmplY3RCID0gaXNPYmplY3QoYik7XG4gIGlmIChpc09iamVjdEEgJiYgaXNPYmplY3RCKSB7XG4gICAgdHJ5IHtcbiAgICAgIHZhciBpc0FycmF5QSA9IEFycmF5LmlzQXJyYXkoYSk7XG4gICAgICB2YXIgaXNBcnJheUIgPSBBcnJheS5pc0FycmF5KGIpO1xuICAgICAgaWYgKGlzQXJyYXlBICYmIGlzQXJyYXlCKSB7XG4gICAgICAgIHJldHVybiBhLmxlbmd0aCA9PT0gYi5sZW5ndGggJiYgYS5ldmVyeShmdW5jdGlvbiAoZSwgaSkge1xuICAgICAgICAgIHJldHVybiBsb29zZUVxdWFsKGUsIGJbaV0pXG4gICAgICAgIH0pXG4gICAgICB9IGVsc2UgaWYgKGEgaW5zdGFuY2VvZiBEYXRlICYmIGIgaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgICAgIHJldHVybiBhLmdldFRpbWUoKSA9PT0gYi5nZXRUaW1lKClcbiAgICAgIH0gZWxzZSBpZiAoIWlzQXJyYXlBICYmICFpc0FycmF5Qikge1xuICAgICAgICB2YXIga2V5c0EgPSBPYmplY3Qua2V5cyhhKTtcbiAgICAgICAgdmFyIGtleXNCID0gT2JqZWN0LmtleXMoYik7XG4gICAgICAgIHJldHVybiBrZXlzQS5sZW5ndGggPT09IGtleXNCLmxlbmd0aCAmJiBrZXlzQS5ldmVyeShmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgcmV0dXJuIGxvb3NlRXF1YWwoYVtrZXldLCBiW2tleV0pXG4gICAgICAgIH0pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICB9IGVsc2UgaWYgKCFpc09iamVjdEEgJiYgIWlzT2JqZWN0Qikge1xuICAgIHJldHVybiBTdHJpbmcoYSkgPT09IFN0cmluZyhiKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbi8qKlxuICogUmV0dXJuIHRoZSBmaXJzdCBpbmRleCBhdCB3aGljaCBhIGxvb3NlbHkgZXF1YWwgdmFsdWUgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgYXJyYXkgKGlmIHZhbHVlIGlzIGEgcGxhaW4gb2JqZWN0LCB0aGUgYXJyYXkgbXVzdFxuICogY29udGFpbiBhbiBvYmplY3Qgb2YgdGhlIHNhbWUgc2hhcGUpLCBvciAtMSBpZiBpdCBpcyBub3QgcHJlc2VudC5cbiAqL1xuZnVuY3Rpb24gbG9vc2VJbmRleE9mIChhcnIsIHZhbCkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuICAgIGlmIChsb29zZUVxdWFsKGFycltpXSwgdmFsKSkgeyByZXR1cm4gaSB9XG4gIH1cbiAgcmV0dXJuIC0xXG59XG5cbi8qKlxuICogRW5zdXJlIGEgZnVuY3Rpb24gaXMgY2FsbGVkIG9ubHkgb25jZS5cbiAqL1xuZnVuY3Rpb24gb25jZSAoZm4pIHtcbiAgdmFyIGNhbGxlZCA9IGZhbHNlO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGlmICghY2FsbGVkKSB7XG4gICAgICBjYWxsZWQgPSB0cnVlO1xuICAgICAgZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG4gIH1cbn1cblxudmFyIFNTUl9BVFRSID0gJ2RhdGEtc2VydmVyLXJlbmRlcmVkJztcblxudmFyIEFTU0VUX1RZUEVTID0gW1xuICAnY29tcG9uZW50JyxcbiAgJ2RpcmVjdGl2ZScsXG4gICdmaWx0ZXInXG5dO1xuXG52YXIgTElGRUNZQ0xFX0hPT0tTID0gW1xuICAnYmVmb3JlQ3JlYXRlJyxcbiAgJ2NyZWF0ZWQnLFxuICAnYmVmb3JlTW91bnQnLFxuICAnbW91bnRlZCcsXG4gICdiZWZvcmVVcGRhdGUnLFxuICAndXBkYXRlZCcsXG4gICdiZWZvcmVEZXN0cm95JyxcbiAgJ2Rlc3Ryb3llZCcsXG4gICdhY3RpdmF0ZWQnLFxuICAnZGVhY3RpdmF0ZWQnLFxuICAnZXJyb3JDYXB0dXJlZCcsXG4gICdzZXJ2ZXJQcmVmZXRjaCdcbl07XG5cbi8qICAqL1xuXG5cblxudmFyIGNvbmZpZyA9ICh7XG4gIC8qKlxuICAgKiBPcHRpb24gbWVyZ2Ugc3RyYXRlZ2llcyAodXNlZCBpbiBjb3JlL3V0aWwvb3B0aW9ucylcbiAgICovXG4gIC8vICRmbG93LWRpc2FibGUtbGluZVxuICBvcHRpb25NZXJnZVN0cmF0ZWdpZXM6IE9iamVjdC5jcmVhdGUobnVsbCksXG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gc3VwcHJlc3Mgd2FybmluZ3MuXG4gICAqL1xuICBzaWxlbnQ6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBTaG93IHByb2R1Y3Rpb24gbW9kZSB0aXAgbWVzc2FnZSBvbiBib290P1xuICAgKi9cbiAgcHJvZHVjdGlvblRpcDogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyxcblxuICAvKipcbiAgICogV2hldGhlciB0byBlbmFibGUgZGV2dG9vbHNcbiAgICovXG4gIGRldnRvb2xzOiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nLFxuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRvIHJlY29yZCBwZXJmXG4gICAqL1xuICBwZXJmb3JtYW5jZTogZmFsc2UsXG5cbiAgLyoqXG4gICAqIEVycm9yIGhhbmRsZXIgZm9yIHdhdGNoZXIgZXJyb3JzXG4gICAqL1xuICBlcnJvckhhbmRsZXI6IG51bGwsXG5cbiAgLyoqXG4gICAqIFdhcm4gaGFuZGxlciBmb3Igd2F0Y2hlciB3YXJuc1xuICAgKi9cbiAgd2FybkhhbmRsZXI6IG51bGwsXG5cbiAgLyoqXG4gICAqIElnbm9yZSBjZXJ0YWluIGN1c3RvbSBlbGVtZW50c1xuICAgKi9cbiAgaWdub3JlZEVsZW1lbnRzOiBbXSxcblxuICAvKipcbiAgICogQ3VzdG9tIHVzZXIga2V5IGFsaWFzZXMgZm9yIHYtb25cbiAgICovXG4gIC8vICRmbG93LWRpc2FibGUtbGluZVxuICBrZXlDb2RlczogT2JqZWN0LmNyZWF0ZShudWxsKSxcblxuICAvKipcbiAgICogQ2hlY2sgaWYgYSB0YWcgaXMgcmVzZXJ2ZWQgc28gdGhhdCBpdCBjYW5ub3QgYmUgcmVnaXN0ZXJlZCBhcyBhXG4gICAqIGNvbXBvbmVudC4gVGhpcyBpcyBwbGF0Zm9ybS1kZXBlbmRlbnQgYW5kIG1heSBiZSBvdmVyd3JpdHRlbi5cbiAgICovXG4gIGlzUmVzZXJ2ZWRUYWc6IG5vLFxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhbiBhdHRyaWJ1dGUgaXMgcmVzZXJ2ZWQgc28gdGhhdCBpdCBjYW5ub3QgYmUgdXNlZCBhcyBhIGNvbXBvbmVudFxuICAgKiBwcm9wLiBUaGlzIGlzIHBsYXRmb3JtLWRlcGVuZGVudCBhbmQgbWF5IGJlIG92ZXJ3cml0dGVuLlxuICAgKi9cbiAgaXNSZXNlcnZlZEF0dHI6IG5vLFxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhIHRhZyBpcyBhbiB1bmtub3duIGVsZW1lbnQuXG4gICAqIFBsYXRmb3JtLWRlcGVuZGVudC5cbiAgICovXG4gIGlzVW5rbm93bkVsZW1lbnQ6IG5vLFxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIG5hbWVzcGFjZSBvZiBhbiBlbGVtZW50XG4gICAqL1xuICBnZXRUYWdOYW1lc3BhY2U6IG5vb3AsXG5cbiAgLyoqXG4gICAqIFBhcnNlIHRoZSByZWFsIHRhZyBuYW1lIGZvciB0aGUgc3BlY2lmaWMgcGxhdGZvcm0uXG4gICAqL1xuICBwYXJzZVBsYXRmb3JtVGFnTmFtZTogaWRlbnRpdHksXG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGFuIGF0dHJpYnV0ZSBtdXN0IGJlIGJvdW5kIHVzaW5nIHByb3BlcnR5LCBlLmcuIHZhbHVlXG4gICAqIFBsYXRmb3JtLWRlcGVuZGVudC5cbiAgICovXG4gIG11c3RVc2VQcm9wOiBubyxcblxuICAvKipcbiAgICogUGVyZm9ybSB1cGRhdGVzIGFzeW5jaHJvbm91c2x5LiBJbnRlbmRlZCB0byBiZSB1c2VkIGJ5IFZ1ZSBUZXN0IFV0aWxzXG4gICAqIFRoaXMgd2lsbCBzaWduaWZpY2FudGx5IHJlZHVjZSBwZXJmb3JtYW5jZSBpZiBzZXQgdG8gZmFsc2UuXG4gICAqL1xuICBhc3luYzogdHJ1ZSxcblxuICAvKipcbiAgICogRXhwb3NlZCBmb3IgbGVnYWN5IHJlYXNvbnNcbiAgICovXG4gIF9saWZlY3ljbGVIb29rczogTElGRUNZQ0xFX0hPT0tTXG59KTtcblxuLyogICovXG5cbi8qKlxuICogdW5pY29kZSBsZXR0ZXJzIHVzZWQgZm9yIHBhcnNpbmcgaHRtbCB0YWdzLCBjb21wb25lbnQgbmFtZXMgYW5kIHByb3BlcnR5IHBhdGhzLlxuICogdXNpbmcgaHR0cHM6Ly93d3cudzMub3JnL1RSL2h0bWw1My9zZW1hbnRpY3Mtc2NyaXB0aW5nLmh0bWwjcG90ZW50aWFsY3VzdG9tZWxlbWVudG5hbWVcbiAqIHNraXBwaW5nIFxcdTEwMDAwLVxcdUVGRkZGIGR1ZSB0byBpdCBmcmVlemluZyB1cCBQaGFudG9tSlNcbiAqL1xudmFyIHVuaWNvZGVSZWdFeHAgPSAvYS16QS1aXFx1MDBCN1xcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwM0YtXFx1MjA0MFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRC87XG5cbi8qKlxuICogQ2hlY2sgaWYgYSBzdHJpbmcgc3RhcnRzIHdpdGggJCBvciBfXG4gKi9cbmZ1bmN0aW9uIGlzUmVzZXJ2ZWQgKHN0cikge1xuICB2YXIgYyA9IChzdHIgKyAnJykuY2hhckNvZGVBdCgwKTtcbiAgcmV0dXJuIGMgPT09IDB4MjQgfHwgYyA9PT0gMHg1RlxufVxuXG4vKipcbiAqIERlZmluZSBhIHByb3BlcnR5LlxuICovXG5mdW5jdGlvbiBkZWYgKG9iaiwga2V5LCB2YWwsIGVudW1lcmFibGUpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgdmFsdWU6IHZhbCxcbiAgICBlbnVtZXJhYmxlOiAhIWVudW1lcmFibGUsXG4gICAgd3JpdGFibGU6IHRydWUsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlXG4gIH0pO1xufVxuXG4vKipcbiAqIFBhcnNlIHNpbXBsZSBwYXRoLlxuICovXG52YXIgYmFpbFJFID0gbmV3IFJlZ0V4cCgoXCJbXlwiICsgKHVuaWNvZGVSZWdFeHAuc291cmNlKSArIFwiLiRfXFxcXGRdXCIpKTtcbmZ1bmN0aW9uIHBhcnNlUGF0aCAocGF0aCkge1xuICBpZiAoYmFpbFJFLnRlc3QocGF0aCkpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgc2VnbWVudHMgPSBwYXRoLnNwbGl0KCcuJyk7XG4gIHJldHVybiBmdW5jdGlvbiAob2JqKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWdtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKCFvYmopIHsgcmV0dXJuIH1cbiAgICAgIG9iaiA9IG9ialtzZWdtZW50c1tpXV07XG4gICAgfVxuICAgIHJldHVybiBvYmpcbiAgfVxufVxuXG4vKiAgKi9cblxuLy8gY2FuIHdlIHVzZSBfX3Byb3RvX18/XG52YXIgaGFzUHJvdG8gPSAnX19wcm90b19fJyBpbiB7fTtcblxuLy8gQnJvd3NlciBlbnZpcm9ubWVudCBzbmlmZmluZ1xudmFyIGluQnJvd3NlciA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnO1xudmFyIGluV2VleCA9IHR5cGVvZiBXWEVudmlyb25tZW50ICE9PSAndW5kZWZpbmVkJyAmJiAhIVdYRW52aXJvbm1lbnQucGxhdGZvcm07XG52YXIgd2VleFBsYXRmb3JtID0gaW5XZWV4ICYmIFdYRW52aXJvbm1lbnQucGxhdGZvcm0udG9Mb3dlckNhc2UoKTtcbnZhciBVQSA9IGluQnJvd3NlciAmJiB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpO1xudmFyIGlzSUUgPSBVQSAmJiAvbXNpZXx0cmlkZW50Ly50ZXN0KFVBKTtcbnZhciBpc0lFOSA9IFVBICYmIFVBLmluZGV4T2YoJ21zaWUgOS4wJykgPiAwO1xudmFyIGlzRWRnZSA9IFVBICYmIFVBLmluZGV4T2YoJ2VkZ2UvJykgPiAwO1xudmFyIGlzQW5kcm9pZCA9IChVQSAmJiBVQS5pbmRleE9mKCdhbmRyb2lkJykgPiAwKSB8fCAod2VleFBsYXRmb3JtID09PSAnYW5kcm9pZCcpO1xudmFyIGlzSU9TID0gKFVBICYmIC9pcGhvbmV8aXBhZHxpcG9kfGlvcy8udGVzdChVQSkpIHx8ICh3ZWV4UGxhdGZvcm0gPT09ICdpb3MnKTtcbnZhciBpc0Nocm9tZSA9IFVBICYmIC9jaHJvbWVcXC9cXGQrLy50ZXN0KFVBKSAmJiAhaXNFZGdlO1xudmFyIGlzUGhhbnRvbUpTID0gVUEgJiYgL3BoYW50b21qcy8udGVzdChVQSk7XG52YXIgaXNGRiA9IFVBICYmIFVBLm1hdGNoKC9maXJlZm94XFwvKFxcZCspLyk7XG5cbi8vIEZpcmVmb3ggaGFzIGEgXCJ3YXRjaFwiIGZ1bmN0aW9uIG9uIE9iamVjdC5wcm90b3R5cGUuLi5cbnZhciBuYXRpdmVXYXRjaCA9ICh7fSkud2F0Y2g7XG5cbnZhciBzdXBwb3J0c1Bhc3NpdmUgPSBmYWxzZTtcbmlmIChpbkJyb3dzZXIpIHtcbiAgdHJ5IHtcbiAgICB2YXIgb3B0cyA9IHt9O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvcHRzLCAncGFzc2l2ZScsICh7XG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCAoKSB7XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICAgIHN1cHBvcnRzUGFzc2l2ZSA9IHRydWU7XG4gICAgICB9XG4gICAgfSkpOyAvLyBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svZmxvdy9pc3N1ZXMvMjg1XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Rlc3QtcGFzc2l2ZScsIG51bGwsIG9wdHMpO1xuICB9IGNhdGNoIChlKSB7fVxufVxuXG4vLyB0aGlzIG5lZWRzIHRvIGJlIGxhenktZXZhbGVkIGJlY2F1c2UgdnVlIG1heSBiZSByZXF1aXJlZCBiZWZvcmVcbi8vIHZ1ZS1zZXJ2ZXItcmVuZGVyZXIgY2FuIHNldCBWVUVfRU5WXG52YXIgX2lzU2VydmVyO1xudmFyIGlzU2VydmVyUmVuZGVyaW5nID0gZnVuY3Rpb24gKCkge1xuICBpZiAoX2lzU2VydmVyID09PSB1bmRlZmluZWQpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoIWluQnJvd3NlciAmJiAhaW5XZWV4ICYmIHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAvLyBkZXRlY3QgcHJlc2VuY2Ugb2YgdnVlLXNlcnZlci1yZW5kZXJlciBhbmQgYXZvaWRcbiAgICAgIC8vIFdlYnBhY2sgc2hpbW1pbmcgdGhlIHByb2Nlc3NcbiAgICAgIF9pc1NlcnZlciA9IGdsb2JhbFsncHJvY2VzcyddICYmIGdsb2JhbFsncHJvY2VzcyddLmVudi5WVUVfRU5WID09PSAnc2VydmVyJztcbiAgICB9IGVsc2Uge1xuICAgICAgX2lzU2VydmVyID0gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiBfaXNTZXJ2ZXJcbn07XG5cbi8vIGRldGVjdCBkZXZ0b29sc1xudmFyIGRldnRvb2xzID0gaW5Ccm93c2VyICYmIHdpbmRvdy5fX1ZVRV9ERVZUT09MU19HTE9CQUxfSE9PS19fO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZnVuY3Rpb24gaXNOYXRpdmUgKEN0b3IpIHtcbiAgcmV0dXJuIHR5cGVvZiBDdG9yID09PSAnZnVuY3Rpb24nICYmIC9uYXRpdmUgY29kZS8udGVzdChDdG9yLnRvU3RyaW5nKCkpXG59XG5cbnZhciBoYXNTeW1ib2wgPVxuICB0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBpc05hdGl2ZShTeW1ib2wpICYmXG4gIHR5cGVvZiBSZWZsZWN0ICE9PSAndW5kZWZpbmVkJyAmJiBpc05hdGl2ZShSZWZsZWN0Lm93bktleXMpO1xuXG52YXIgX1NldDtcbi8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqLyAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbmlmICh0eXBlb2YgU2V0ICE9PSAndW5kZWZpbmVkJyAmJiBpc05hdGl2ZShTZXQpKSB7XG4gIC8vIHVzZSBuYXRpdmUgU2V0IHdoZW4gYXZhaWxhYmxlLlxuICBfU2V0ID0gU2V0O1xufSBlbHNlIHtcbiAgLy8gYSBub24tc3RhbmRhcmQgU2V0IHBvbHlmaWxsIHRoYXQgb25seSB3b3JrcyB3aXRoIHByaW1pdGl2ZSBrZXlzLlxuICBfU2V0ID0gLypAX19QVVJFX18qLyhmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU2V0ICgpIHtcbiAgICAgIHRoaXMuc2V0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB9XG4gICAgU2V0LnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbiBoYXMgKGtleSkge1xuICAgICAgcmV0dXJuIHRoaXMuc2V0W2tleV0gPT09IHRydWVcbiAgICB9O1xuICAgIFNldC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gYWRkIChrZXkpIHtcbiAgICAgIHRoaXMuc2V0W2tleV0gPSB0cnVlO1xuICAgIH07XG4gICAgU2V0LnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uIGNsZWFyICgpIHtcbiAgICAgIHRoaXMuc2V0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFNldDtcbiAgfSgpKTtcbn1cblxuLyogICovXG5cbnZhciB3YXJuID0gbm9vcDtcbnZhciB0aXAgPSBub29wO1xudmFyIGdlbmVyYXRlQ29tcG9uZW50VHJhY2UgPSAobm9vcCk7IC8vIHdvcmsgYXJvdW5kIGZsb3cgY2hlY2tcbnZhciBmb3JtYXRDb21wb25lbnROYW1lID0gKG5vb3ApO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgaGFzQ29uc29sZSA9IHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJztcbiAgdmFyIGNsYXNzaWZ5UkUgPSAvKD86XnxbLV9dKShcXHcpL2c7XG4gIHZhciBjbGFzc2lmeSA9IGZ1bmN0aW9uIChzdHIpIHsgcmV0dXJuIHN0clxuICAgIC5yZXBsYWNlKGNsYXNzaWZ5UkUsIGZ1bmN0aW9uIChjKSB7IHJldHVybiBjLnRvVXBwZXJDYXNlKCk7IH0pXG4gICAgLnJlcGxhY2UoL1stX10vZywgJycpOyB9O1xuXG4gIHdhcm4gPSBmdW5jdGlvbiAobXNnLCB2bSkge1xuICAgIHZhciB0cmFjZSA9IHZtID8gZ2VuZXJhdGVDb21wb25lbnRUcmFjZSh2bSkgOiAnJztcblxuICAgIGlmIChjb25maWcud2FybkhhbmRsZXIpIHtcbiAgICAgIGNvbmZpZy53YXJuSGFuZGxlci5jYWxsKG51bGwsIG1zZywgdm0sIHRyYWNlKTtcbiAgICB9IGVsc2UgaWYgKGhhc0NvbnNvbGUgJiYgKCFjb25maWcuc2lsZW50KSkge1xuICAgICAgY29uc29sZS5lcnJvcigoXCJbVnVlIHdhcm5dOiBcIiArIG1zZyArIHRyYWNlKSk7XG4gICAgfVxuICB9O1xuXG4gIHRpcCA9IGZ1bmN0aW9uIChtc2csIHZtKSB7XG4gICAgaWYgKGhhc0NvbnNvbGUgJiYgKCFjb25maWcuc2lsZW50KSkge1xuICAgICAgY29uc29sZS53YXJuKFwiW1Z1ZSB0aXBdOiBcIiArIG1zZyArIChcbiAgICAgICAgdm0gPyBnZW5lcmF0ZUNvbXBvbmVudFRyYWNlKHZtKSA6ICcnXG4gICAgICApKTtcbiAgICB9XG4gIH07XG5cbiAgZm9ybWF0Q29tcG9uZW50TmFtZSA9IGZ1bmN0aW9uICh2bSwgaW5jbHVkZUZpbGUpIHtcbiAgICBpZiAodm0uJHJvb3QgPT09IHZtKSB7XG4gICAgICByZXR1cm4gJzxSb290PidcbiAgICB9XG4gICAgdmFyIG9wdGlvbnMgPSB0eXBlb2Ygdm0gPT09ICdmdW5jdGlvbicgJiYgdm0uY2lkICE9IG51bGxcbiAgICAgID8gdm0ub3B0aW9uc1xuICAgICAgOiB2bS5faXNWdWVcbiAgICAgICAgPyB2bS4kb3B0aW9ucyB8fCB2bS5jb25zdHJ1Y3Rvci5vcHRpb25zXG4gICAgICAgIDogdm07XG4gICAgdmFyIG5hbWUgPSBvcHRpb25zLm5hbWUgfHwgb3B0aW9ucy5fY29tcG9uZW50VGFnO1xuICAgIHZhciBmaWxlID0gb3B0aW9ucy5fX2ZpbGU7XG4gICAgaWYgKCFuYW1lICYmIGZpbGUpIHtcbiAgICAgIHZhciBtYXRjaCA9IGZpbGUubWF0Y2goLyhbXi9cXFxcXSspXFwudnVlJC8pO1xuICAgICAgbmFtZSA9IG1hdGNoICYmIG1hdGNoWzFdO1xuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICAobmFtZSA/IChcIjxcIiArIChjbGFzc2lmeShuYW1lKSkgKyBcIj5cIikgOiBcIjxBbm9ueW1vdXM+XCIpICtcbiAgICAgIChmaWxlICYmIGluY2x1ZGVGaWxlICE9PSBmYWxzZSA/IChcIiBhdCBcIiArIGZpbGUpIDogJycpXG4gICAgKVxuICB9O1xuXG4gIHZhciByZXBlYXQgPSBmdW5jdGlvbiAoc3RyLCBuKSB7XG4gICAgdmFyIHJlcyA9ICcnO1xuICAgIHdoaWxlIChuKSB7XG4gICAgICBpZiAobiAlIDIgPT09IDEpIHsgcmVzICs9IHN0cjsgfVxuICAgICAgaWYgKG4gPiAxKSB7IHN0ciArPSBzdHI7IH1cbiAgICAgIG4gPj49IDE7XG4gICAgfVxuICAgIHJldHVybiByZXNcbiAgfTtcblxuICBnZW5lcmF0ZUNvbXBvbmVudFRyYWNlID0gZnVuY3Rpb24gKHZtKSB7XG4gICAgaWYgKHZtLl9pc1Z1ZSAmJiB2bS4kcGFyZW50KSB7XG4gICAgICB2YXIgdHJlZSA9IFtdO1xuICAgICAgdmFyIGN1cnJlbnRSZWN1cnNpdmVTZXF1ZW5jZSA9IDA7XG4gICAgICB3aGlsZSAodm0pIHtcbiAgICAgICAgaWYgKHRyZWUubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHZhciBsYXN0ID0gdHJlZVt0cmVlLmxlbmd0aCAtIDFdO1xuICAgICAgICAgIGlmIChsYXN0LmNvbnN0cnVjdG9yID09PSB2bS5jb25zdHJ1Y3Rvcikge1xuICAgICAgICAgICAgY3VycmVudFJlY3Vyc2l2ZVNlcXVlbmNlKys7XG4gICAgICAgICAgICB2bSA9IHZtLiRwYXJlbnQ7XG4gICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudFJlY3Vyc2l2ZVNlcXVlbmNlID4gMCkge1xuICAgICAgICAgICAgdHJlZVt0cmVlLmxlbmd0aCAtIDFdID0gW2xhc3QsIGN1cnJlbnRSZWN1cnNpdmVTZXF1ZW5jZV07XG4gICAgICAgICAgICBjdXJyZW50UmVjdXJzaXZlU2VxdWVuY2UgPSAwO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0cmVlLnB1c2godm0pO1xuICAgICAgICB2bSA9IHZtLiRwYXJlbnQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gJ1xcblxcbmZvdW5kIGluXFxuXFxuJyArIHRyZWVcbiAgICAgICAgLm1hcChmdW5jdGlvbiAodm0sIGkpIHsgcmV0dXJuIChcIlwiICsgKGkgPT09IDAgPyAnLS0tPiAnIDogcmVwZWF0KCcgJywgNSArIGkgKiAyKSkgKyAoQXJyYXkuaXNBcnJheSh2bSlcbiAgICAgICAgICAgID8gKChmb3JtYXRDb21wb25lbnROYW1lKHZtWzBdKSkgKyBcIi4uLiAoXCIgKyAodm1bMV0pICsgXCIgcmVjdXJzaXZlIGNhbGxzKVwiKVxuICAgICAgICAgICAgOiBmb3JtYXRDb21wb25lbnROYW1lKHZtKSkpOyB9KVxuICAgICAgICAuam9pbignXFxuJylcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIChcIlxcblxcbihmb3VuZCBpbiBcIiArIChmb3JtYXRDb21wb25lbnROYW1lKHZtKSkgKyBcIilcIilcbiAgICB9XG4gIH07XG59XG5cbi8qICAqL1xuXG52YXIgdWlkID0gMDtcblxuLyoqXG4gKiBBIGRlcCBpcyBhbiBvYnNlcnZhYmxlIHRoYXQgY2FuIGhhdmUgbXVsdGlwbGVcbiAqIGRpcmVjdGl2ZXMgc3Vic2NyaWJpbmcgdG8gaXQuXG4gKi9cbnZhciBEZXAgPSBmdW5jdGlvbiBEZXAgKCkge1xuICB0aGlzLmlkID0gdWlkKys7XG4gIHRoaXMuc3VicyA9IFtdO1xufTtcblxuRGVwLnByb3RvdHlwZS5hZGRTdWIgPSBmdW5jdGlvbiBhZGRTdWIgKHN1Yikge1xuICB0aGlzLnN1YnMucHVzaChzdWIpO1xufTtcblxuRGVwLnByb3RvdHlwZS5yZW1vdmVTdWIgPSBmdW5jdGlvbiByZW1vdmVTdWIgKHN1Yikge1xuICByZW1vdmUodGhpcy5zdWJzLCBzdWIpO1xufTtcblxuRGVwLnByb3RvdHlwZS5kZXBlbmQgPSBmdW5jdGlvbiBkZXBlbmQgKCkge1xuICBpZiAoRGVwLnRhcmdldCkge1xuICAgIERlcC50YXJnZXQuYWRkRGVwKHRoaXMpO1xuICB9XG59O1xuXG5EZXAucHJvdG90eXBlLm5vdGlmeSA9IGZ1bmN0aW9uIG5vdGlmeSAoKSB7XG4gIC8vIHN0YWJpbGl6ZSB0aGUgc3Vic2NyaWJlciBsaXN0IGZpcnN0XG4gIHZhciBzdWJzID0gdGhpcy5zdWJzLnNsaWNlKCk7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFjb25maWcuYXN5bmMpIHtcbiAgICAvLyBzdWJzIGFyZW4ndCBzb3J0ZWQgaW4gc2NoZWR1bGVyIGlmIG5vdCBydW5uaW5nIGFzeW5jXG4gICAgLy8gd2UgbmVlZCB0byBzb3J0IHRoZW0gbm93IHRvIG1ha2Ugc3VyZSB0aGV5IGZpcmUgaW4gY29ycmVjdFxuICAgIC8vIG9yZGVyXG4gICAgc3Vicy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7IHJldHVybiBhLmlkIC0gYi5pZDsgfSk7XG4gIH1cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBzdWJzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIHN1YnNbaV0udXBkYXRlKCk7XG4gIH1cbn07XG5cbi8vIFRoZSBjdXJyZW50IHRhcmdldCB3YXRjaGVyIGJlaW5nIGV2YWx1YXRlZC5cbi8vIFRoaXMgaXMgZ2xvYmFsbHkgdW5pcXVlIGJlY2F1c2Ugb25seSBvbmUgd2F0Y2hlclxuLy8gY2FuIGJlIGV2YWx1YXRlZCBhdCBhIHRpbWUuXG5EZXAudGFyZ2V0ID0gbnVsbDtcbnZhciB0YXJnZXRTdGFjayA9IFtdO1xuXG5mdW5jdGlvbiBwdXNoVGFyZ2V0ICh0YXJnZXQpIHtcbiAgdGFyZ2V0U3RhY2sucHVzaCh0YXJnZXQpO1xuICBEZXAudGFyZ2V0ID0gdGFyZ2V0O1xufVxuXG5mdW5jdGlvbiBwb3BUYXJnZXQgKCkge1xuICB0YXJnZXRTdGFjay5wb3AoKTtcbiAgRGVwLnRhcmdldCA9IHRhcmdldFN0YWNrW3RhcmdldFN0YWNrLmxlbmd0aCAtIDFdO1xufVxuXG4vKiAgKi9cblxudmFyIFZOb2RlID0gZnVuY3Rpb24gVk5vZGUgKFxuICB0YWcsXG4gIGRhdGEsXG4gIGNoaWxkcmVuLFxuICB0ZXh0LFxuICBlbG0sXG4gIGNvbnRleHQsXG4gIGNvbXBvbmVudE9wdGlvbnMsXG4gIGFzeW5jRmFjdG9yeVxuKSB7XG4gIHRoaXMudGFnID0gdGFnO1xuICB0aGlzLmRhdGEgPSBkYXRhO1xuICB0aGlzLmNoaWxkcmVuID0gY2hpbGRyZW47XG4gIHRoaXMudGV4dCA9IHRleHQ7XG4gIHRoaXMuZWxtID0gZWxtO1xuICB0aGlzLm5zID0gdW5kZWZpbmVkO1xuICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xuICB0aGlzLmZuQ29udGV4dCA9IHVuZGVmaW5lZDtcbiAgdGhpcy5mbk9wdGlvbnMgPSB1bmRlZmluZWQ7XG4gIHRoaXMuZm5TY29wZUlkID0gdW5kZWZpbmVkO1xuICB0aGlzLmtleSA9IGRhdGEgJiYgZGF0YS5rZXk7XG4gIHRoaXMuY29tcG9uZW50T3B0aW9ucyA9IGNvbXBvbmVudE9wdGlvbnM7XG4gIHRoaXMuY29tcG9uZW50SW5zdGFuY2UgPSB1bmRlZmluZWQ7XG4gIHRoaXMucGFyZW50ID0gdW5kZWZpbmVkO1xuICB0aGlzLnJhdyA9IGZhbHNlO1xuICB0aGlzLmlzU3RhdGljID0gZmFsc2U7XG4gIHRoaXMuaXNSb290SW5zZXJ0ID0gdHJ1ZTtcbiAgdGhpcy5pc0NvbW1lbnQgPSBmYWxzZTtcbiAgdGhpcy5pc0Nsb25lZCA9IGZhbHNlO1xuICB0aGlzLmlzT25jZSA9IGZhbHNlO1xuICB0aGlzLmFzeW5jRmFjdG9yeSA9IGFzeW5jRmFjdG9yeTtcbiAgdGhpcy5hc3luY01ldGEgPSB1bmRlZmluZWQ7XG4gIHRoaXMuaXNBc3luY1BsYWNlaG9sZGVyID0gZmFsc2U7XG59O1xuXG52YXIgcHJvdG90eXBlQWNjZXNzb3JzID0geyBjaGlsZDogeyBjb25maWd1cmFibGU6IHRydWUgfSB9O1xuXG4vLyBERVBSRUNBVEVEOiBhbGlhcyBmb3IgY29tcG9uZW50SW5zdGFuY2UgZm9yIGJhY2t3YXJkcyBjb21wYXQuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xucHJvdG90eXBlQWNjZXNzb3JzLmNoaWxkLmdldCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuY29tcG9uZW50SW5zdGFuY2Vcbn07XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBWTm9kZS5wcm90b3R5cGUsIHByb3RvdHlwZUFjY2Vzc29ycyApO1xuXG52YXIgY3JlYXRlRW1wdHlWTm9kZSA9IGZ1bmN0aW9uICh0ZXh0KSB7XG4gIGlmICggdGV4dCA9PT0gdm9pZCAwICkgdGV4dCA9ICcnO1xuXG4gIHZhciBub2RlID0gbmV3IFZOb2RlKCk7XG4gIG5vZGUudGV4dCA9IHRleHQ7XG4gIG5vZGUuaXNDb21tZW50ID0gdHJ1ZTtcbiAgcmV0dXJuIG5vZGVcbn07XG5cbmZ1bmN0aW9uIGNyZWF0ZVRleHRWTm9kZSAodmFsKSB7XG4gIHJldHVybiBuZXcgVk5vZGUodW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgU3RyaW5nKHZhbCkpXG59XG5cbi8vIG9wdGltaXplZCBzaGFsbG93IGNsb25lXG4vLyB1c2VkIGZvciBzdGF0aWMgbm9kZXMgYW5kIHNsb3Qgbm9kZXMgYmVjYXVzZSB0aGV5IG1heSBiZSByZXVzZWQgYWNyb3NzXG4vLyBtdWx0aXBsZSByZW5kZXJzLCBjbG9uaW5nIHRoZW0gYXZvaWRzIGVycm9ycyB3aGVuIERPTSBtYW5pcHVsYXRpb25zIHJlbHlcbi8vIG9uIHRoZWlyIGVsbSByZWZlcmVuY2UuXG5mdW5jdGlvbiBjbG9uZVZOb2RlICh2bm9kZSkge1xuICB2YXIgY2xvbmVkID0gbmV3IFZOb2RlKFxuICAgIHZub2RlLnRhZyxcbiAgICB2bm9kZS5kYXRhLFxuICAgIC8vICM3OTc1XG4gICAgLy8gY2xvbmUgY2hpbGRyZW4gYXJyYXkgdG8gYXZvaWQgbXV0YXRpbmcgb3JpZ2luYWwgaW4gY2FzZSBvZiBjbG9uaW5nXG4gICAgLy8gYSBjaGlsZC5cbiAgICB2bm9kZS5jaGlsZHJlbiAmJiB2bm9kZS5jaGlsZHJlbi5zbGljZSgpLFxuICAgIHZub2RlLnRleHQsXG4gICAgdm5vZGUuZWxtLFxuICAgIHZub2RlLmNvbnRleHQsXG4gICAgdm5vZGUuY29tcG9uZW50T3B0aW9ucyxcbiAgICB2bm9kZS5hc3luY0ZhY3RvcnlcbiAgKTtcbiAgY2xvbmVkLm5zID0gdm5vZGUubnM7XG4gIGNsb25lZC5pc1N0YXRpYyA9IHZub2RlLmlzU3RhdGljO1xuICBjbG9uZWQua2V5ID0gdm5vZGUua2V5O1xuICBjbG9uZWQuaXNDb21tZW50ID0gdm5vZGUuaXNDb21tZW50O1xuICBjbG9uZWQuZm5Db250ZXh0ID0gdm5vZGUuZm5Db250ZXh0O1xuICBjbG9uZWQuZm5PcHRpb25zID0gdm5vZGUuZm5PcHRpb25zO1xuICBjbG9uZWQuZm5TY29wZUlkID0gdm5vZGUuZm5TY29wZUlkO1xuICBjbG9uZWQuYXN5bmNNZXRhID0gdm5vZGUuYXN5bmNNZXRhO1xuICBjbG9uZWQuaXNDbG9uZWQgPSB0cnVlO1xuICByZXR1cm4gY2xvbmVkXG59XG5cbi8qXG4gKiBub3QgdHlwZSBjaGVja2luZyB0aGlzIGZpbGUgYmVjYXVzZSBmbG93IGRvZXNuJ3QgcGxheSB3ZWxsIHdpdGhcbiAqIGR5bmFtaWNhbGx5IGFjY2Vzc2luZyBtZXRob2RzIG9uIEFycmF5IHByb3RvdHlwZVxuICovXG5cbnZhciBhcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlO1xudmFyIGFycmF5TWV0aG9kcyA9IE9iamVjdC5jcmVhdGUoYXJyYXlQcm90byk7XG5cbnZhciBtZXRob2RzVG9QYXRjaCA9IFtcbiAgJ3B1c2gnLFxuICAncG9wJyxcbiAgJ3NoaWZ0JyxcbiAgJ3Vuc2hpZnQnLFxuICAnc3BsaWNlJyxcbiAgJ3NvcnQnLFxuICAncmV2ZXJzZSdcbl07XG5cbi8qKlxuICogSW50ZXJjZXB0IG11dGF0aW5nIG1ldGhvZHMgYW5kIGVtaXQgZXZlbnRzXG4gKi9cbm1ldGhvZHNUb1BhdGNoLmZvckVhY2goZnVuY3Rpb24gKG1ldGhvZCkge1xuICAvLyBjYWNoZSBvcmlnaW5hbCBtZXRob2RcbiAgdmFyIG9yaWdpbmFsID0gYXJyYXlQcm90b1ttZXRob2RdO1xuICBkZWYoYXJyYXlNZXRob2RzLCBtZXRob2QsIGZ1bmN0aW9uIG11dGF0b3IgKCkge1xuICAgIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICAgIHZhciByZXN1bHQgPSBvcmlnaW5hbC5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB2YXIgb2IgPSB0aGlzLl9fb2JfXztcbiAgICB2YXIgaW5zZXJ0ZWQ7XG4gICAgc3dpdGNoIChtZXRob2QpIHtcbiAgICAgIGNhc2UgJ3B1c2gnOlxuICAgICAgY2FzZSAndW5zaGlmdCc6XG4gICAgICAgIGluc2VydGVkID0gYXJncztcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ3NwbGljZSc6XG4gICAgICAgIGluc2VydGVkID0gYXJncy5zbGljZSgyKTtcbiAgICAgICAgYnJlYWtcbiAgICB9XG4gICAgaWYgKGluc2VydGVkKSB7IG9iLm9ic2VydmVBcnJheShpbnNlcnRlZCk7IH1cbiAgICAvLyBub3RpZnkgY2hhbmdlXG4gICAgb2IuZGVwLm5vdGlmeSgpO1xuICAgIHJldHVybiByZXN1bHRcbiAgfSk7XG59KTtcblxuLyogICovXG5cbnZhciBhcnJheUtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhhcnJheU1ldGhvZHMpO1xuXG4vKipcbiAqIEluIHNvbWUgY2FzZXMgd2UgbWF5IHdhbnQgdG8gZGlzYWJsZSBvYnNlcnZhdGlvbiBpbnNpZGUgYSBjb21wb25lbnQnc1xuICogdXBkYXRlIGNvbXB1dGF0aW9uLlxuICovXG52YXIgc2hvdWxkT2JzZXJ2ZSA9IHRydWU7XG5cbmZ1bmN0aW9uIHRvZ2dsZU9ic2VydmluZyAodmFsdWUpIHtcbiAgc2hvdWxkT2JzZXJ2ZSA9IHZhbHVlO1xufVxuXG4vKipcbiAqIE9ic2VydmVyIGNsYXNzIHRoYXQgaXMgYXR0YWNoZWQgdG8gZWFjaCBvYnNlcnZlZFxuICogb2JqZWN0LiBPbmNlIGF0dGFjaGVkLCB0aGUgb2JzZXJ2ZXIgY29udmVydHMgdGhlIHRhcmdldFxuICogb2JqZWN0J3MgcHJvcGVydHkga2V5cyBpbnRvIGdldHRlci9zZXR0ZXJzIHRoYXRcbiAqIGNvbGxlY3QgZGVwZW5kZW5jaWVzIGFuZCBkaXNwYXRjaCB1cGRhdGVzLlxuICovXG52YXIgT2JzZXJ2ZXIgPSBmdW5jdGlvbiBPYnNlcnZlciAodmFsdWUpIHtcbiAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICB0aGlzLmRlcCA9IG5ldyBEZXAoKTtcbiAgdGhpcy52bUNvdW50ID0gMDtcbiAgZGVmKHZhbHVlLCAnX19vYl9fJywgdGhpcyk7XG4gIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIGlmIChoYXNQcm90bykge1xuICAgICAgcHJvdG9BdWdtZW50KHZhbHVlLCBhcnJheU1ldGhvZHMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb3B5QXVnbWVudCh2YWx1ZSwgYXJyYXlNZXRob2RzLCBhcnJheUtleXMpO1xuICAgIH1cbiAgICB0aGlzLm9ic2VydmVBcnJheSh2YWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy53YWxrKHZhbHVlKTtcbiAgfVxufTtcblxuLyoqXG4gKiBXYWxrIHRocm91Z2ggYWxsIHByb3BlcnRpZXMgYW5kIGNvbnZlcnQgdGhlbSBpbnRvXG4gKiBnZXR0ZXIvc2V0dGVycy4gVGhpcyBtZXRob2Qgc2hvdWxkIG9ubHkgYmUgY2FsbGVkIHdoZW5cbiAqIHZhbHVlIHR5cGUgaXMgT2JqZWN0LlxuICovXG5PYnNlcnZlci5wcm90b3R5cGUud2FsayA9IGZ1bmN0aW9uIHdhbGsgKG9iaikge1xuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iaik7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGRlZmluZVJlYWN0aXZlJCQxKG9iaiwga2V5c1tpXSk7XG4gIH1cbn07XG5cbi8qKlxuICogT2JzZXJ2ZSBhIGxpc3Qgb2YgQXJyYXkgaXRlbXMuXG4gKi9cbk9ic2VydmVyLnByb3RvdHlwZS5vYnNlcnZlQXJyYXkgPSBmdW5jdGlvbiBvYnNlcnZlQXJyYXkgKGl0ZW1zKSB7XG4gIGZvciAodmFyIGkgPSAwLCBsID0gaXRlbXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgb2JzZXJ2ZShpdGVtc1tpXSk7XG4gIH1cbn07XG5cbi8vIGhlbHBlcnNcblxuLyoqXG4gKiBBdWdtZW50IGEgdGFyZ2V0IE9iamVjdCBvciBBcnJheSBieSBpbnRlcmNlcHRpbmdcbiAqIHRoZSBwcm90b3R5cGUgY2hhaW4gdXNpbmcgX19wcm90b19fXG4gKi9cbmZ1bmN0aW9uIHByb3RvQXVnbWVudCAodGFyZ2V0LCBzcmMpIHtcbiAgLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cbiAgdGFyZ2V0Ll9fcHJvdG9fXyA9IHNyYztcbiAgLyogZXNsaW50LWVuYWJsZSBuby1wcm90byAqL1xufVxuXG4vKipcbiAqIEF1Z21lbnQgYSB0YXJnZXQgT2JqZWN0IG9yIEFycmF5IGJ5IGRlZmluaW5nXG4gKiBoaWRkZW4gcHJvcGVydGllcy5cbiAqL1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmZ1bmN0aW9uIGNvcHlBdWdtZW50ICh0YXJnZXQsIHNyYywga2V5cykge1xuICBmb3IgKHZhciBpID0gMCwgbCA9IGtleXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgZGVmKHRhcmdldCwga2V5LCBzcmNba2V5XSk7XG4gIH1cbn1cblxuLyoqXG4gKiBBdHRlbXB0IHRvIGNyZWF0ZSBhbiBvYnNlcnZlciBpbnN0YW5jZSBmb3IgYSB2YWx1ZSxcbiAqIHJldHVybnMgdGhlIG5ldyBvYnNlcnZlciBpZiBzdWNjZXNzZnVsbHkgb2JzZXJ2ZWQsXG4gKiBvciB0aGUgZXhpc3Rpbmcgb2JzZXJ2ZXIgaWYgdGhlIHZhbHVlIGFscmVhZHkgaGFzIG9uZS5cbiAqL1xuZnVuY3Rpb24gb2JzZXJ2ZSAodmFsdWUsIGFzUm9vdERhdGEpIHtcbiAgaWYgKCFpc09iamVjdCh2YWx1ZSkgfHwgdmFsdWUgaW5zdGFuY2VvZiBWTm9kZSkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciBvYjtcbiAgaWYgKGhhc093bih2YWx1ZSwgJ19fb2JfXycpICYmIHZhbHVlLl9fb2JfXyBpbnN0YW5jZW9mIE9ic2VydmVyKSB7XG4gICAgb2IgPSB2YWx1ZS5fX29iX187XG4gIH0gZWxzZSBpZiAoXG4gICAgc2hvdWxkT2JzZXJ2ZSAmJlxuICAgICFpc1NlcnZlclJlbmRlcmluZygpICYmXG4gICAgKEFycmF5LmlzQXJyYXkodmFsdWUpIHx8IGlzUGxhaW5PYmplY3QodmFsdWUpKSAmJlxuICAgIE9iamVjdC5pc0V4dGVuc2libGUodmFsdWUpICYmXG4gICAgIXZhbHVlLl9pc1Z1ZVxuICApIHtcbiAgICBvYiA9IG5ldyBPYnNlcnZlcih2YWx1ZSk7XG4gIH1cbiAgaWYgKGFzUm9vdERhdGEgJiYgb2IpIHtcbiAgICBvYi52bUNvdW50Kys7XG4gIH1cbiAgcmV0dXJuIG9iXG59XG5cbi8qKlxuICogRGVmaW5lIGEgcmVhY3RpdmUgcHJvcGVydHkgb24gYW4gT2JqZWN0LlxuICovXG5mdW5jdGlvbiBkZWZpbmVSZWFjdGl2ZSQkMSAoXG4gIG9iaixcbiAga2V5LFxuICB2YWwsXG4gIGN1c3RvbVNldHRlcixcbiAgc2hhbGxvd1xuKSB7XG4gIHZhciBkZXAgPSBuZXcgRGVwKCk7XG5cbiAgdmFyIHByb3BlcnR5ID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSk7XG4gIGlmIChwcm9wZXJ0eSAmJiBwcm9wZXJ0eS5jb25maWd1cmFibGUgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICAvLyBjYXRlciBmb3IgcHJlLWRlZmluZWQgZ2V0dGVyL3NldHRlcnNcbiAgdmFyIGdldHRlciA9IHByb3BlcnR5ICYmIHByb3BlcnR5LmdldDtcbiAgdmFyIHNldHRlciA9IHByb3BlcnR5ICYmIHByb3BlcnR5LnNldDtcbiAgaWYgKCghZ2V0dGVyIHx8IHNldHRlcikgJiYgYXJndW1lbnRzLmxlbmd0aCA9PT0gMikge1xuICAgIHZhbCA9IG9ialtrZXldO1xuICB9XG5cbiAgdmFyIGNoaWxkT2IgPSAhc2hhbGxvdyAmJiBvYnNlcnZlKHZhbCk7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gcmVhY3RpdmVHZXR0ZXIgKCkge1xuICAgICAgdmFyIHZhbHVlID0gZ2V0dGVyID8gZ2V0dGVyLmNhbGwob2JqKSA6IHZhbDtcbiAgICAgIGlmIChEZXAudGFyZ2V0KSB7XG4gICAgICAgIGRlcC5kZXBlbmQoKTtcbiAgICAgICAgaWYgKGNoaWxkT2IpIHtcbiAgICAgICAgICBjaGlsZE9iLmRlcC5kZXBlbmQoKTtcbiAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgIGRlcGVuZEFycmF5KHZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWx1ZVxuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiByZWFjdGl2ZVNldHRlciAobmV3VmFsKSB7XG4gICAgICB2YXIgdmFsdWUgPSBnZXR0ZXIgPyBnZXR0ZXIuY2FsbChvYmopIDogdmFsO1xuICAgICAgLyogZXNsaW50LWRpc2FibGUgbm8tc2VsZi1jb21wYXJlICovXG4gICAgICBpZiAobmV3VmFsID09PSB2YWx1ZSB8fCAobmV3VmFsICE9PSBuZXdWYWwgJiYgdmFsdWUgIT09IHZhbHVlKSkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIC8qIGVzbGludC1lbmFibGUgbm8tc2VsZi1jb21wYXJlICovXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBjdXN0b21TZXR0ZXIpIHtcbiAgICAgICAgY3VzdG9tU2V0dGVyKCk7XG4gICAgICB9XG4gICAgICAvLyAjNzk4MTogZm9yIGFjY2Vzc29yIHByb3BlcnRpZXMgd2l0aG91dCBzZXR0ZXJcbiAgICAgIGlmIChnZXR0ZXIgJiYgIXNldHRlcikgeyByZXR1cm4gfVxuICAgICAgaWYgKHNldHRlcikge1xuICAgICAgICBzZXR0ZXIuY2FsbChvYmosIG5ld1ZhbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWwgPSBuZXdWYWw7XG4gICAgICB9XG4gICAgICBjaGlsZE9iID0gIXNoYWxsb3cgJiYgb2JzZXJ2ZShuZXdWYWwpO1xuICAgICAgZGVwLm5vdGlmeSgpO1xuICAgIH1cbiAgfSk7XG59XG5cbi8qKlxuICogU2V0IGEgcHJvcGVydHkgb24gYW4gb2JqZWN0LiBBZGRzIHRoZSBuZXcgcHJvcGVydHkgYW5kXG4gKiB0cmlnZ2VycyBjaGFuZ2Ugbm90aWZpY2F0aW9uIGlmIHRoZSBwcm9wZXJ0eSBkb2Vzbid0XG4gKiBhbHJlYWR5IGV4aXN0LlxuICovXG5mdW5jdGlvbiBzZXQgKHRhcmdldCwga2V5LCB2YWwpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAoaXNVbmRlZih0YXJnZXQpIHx8IGlzUHJpbWl0aXZlKHRhcmdldCkpXG4gICkge1xuICAgIHdhcm4oKFwiQ2Fubm90IHNldCByZWFjdGl2ZSBwcm9wZXJ0eSBvbiB1bmRlZmluZWQsIG51bGwsIG9yIHByaW1pdGl2ZSB2YWx1ZTogXCIgKyAoKHRhcmdldCkpKSk7XG4gIH1cbiAgaWYgKEFycmF5LmlzQXJyYXkodGFyZ2V0KSAmJiBpc1ZhbGlkQXJyYXlJbmRleChrZXkpKSB7XG4gICAgdGFyZ2V0Lmxlbmd0aCA9IE1hdGgubWF4KHRhcmdldC5sZW5ndGgsIGtleSk7XG4gICAgdGFyZ2V0LnNwbGljZShrZXksIDEsIHZhbCk7XG4gICAgcmV0dXJuIHZhbFxuICB9XG4gIGlmIChrZXkgaW4gdGFyZ2V0ICYmICEoa2V5IGluIE9iamVjdC5wcm90b3R5cGUpKSB7XG4gICAgdGFyZ2V0W2tleV0gPSB2YWw7XG4gICAgcmV0dXJuIHZhbFxuICB9XG4gIHZhciBvYiA9ICh0YXJnZXQpLl9fb2JfXztcbiAgaWYgKHRhcmdldC5faXNWdWUgfHwgKG9iICYmIG9iLnZtQ291bnQpKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgJ0F2b2lkIGFkZGluZyByZWFjdGl2ZSBwcm9wZXJ0aWVzIHRvIGEgVnVlIGluc3RhbmNlIG9yIGl0cyByb290ICRkYXRhICcgK1xuICAgICAgJ2F0IHJ1bnRpbWUgLSBkZWNsYXJlIGl0IHVwZnJvbnQgaW4gdGhlIGRhdGEgb3B0aW9uLidcbiAgICApO1xuICAgIHJldHVybiB2YWxcbiAgfVxuICBpZiAoIW9iKSB7XG4gICAgdGFyZ2V0W2tleV0gPSB2YWw7XG4gICAgcmV0dXJuIHZhbFxuICB9XG4gIGRlZmluZVJlYWN0aXZlJCQxKG9iLnZhbHVlLCBrZXksIHZhbCk7XG4gIG9iLmRlcC5ub3RpZnkoKTtcbiAgcmV0dXJuIHZhbFxufVxuXG4vKipcbiAqIERlbGV0ZSBhIHByb3BlcnR5IGFuZCB0cmlnZ2VyIGNoYW5nZSBpZiBuZWNlc3NhcnkuXG4gKi9cbmZ1bmN0aW9uIGRlbCAodGFyZ2V0LCBrZXkpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAoaXNVbmRlZih0YXJnZXQpIHx8IGlzUHJpbWl0aXZlKHRhcmdldCkpXG4gICkge1xuICAgIHdhcm4oKFwiQ2Fubm90IGRlbGV0ZSByZWFjdGl2ZSBwcm9wZXJ0eSBvbiB1bmRlZmluZWQsIG51bGwsIG9yIHByaW1pdGl2ZSB2YWx1ZTogXCIgKyAoKHRhcmdldCkpKSk7XG4gIH1cbiAgaWYgKEFycmF5LmlzQXJyYXkodGFyZ2V0KSAmJiBpc1ZhbGlkQXJyYXlJbmRleChrZXkpKSB7XG4gICAgdGFyZ2V0LnNwbGljZShrZXksIDEpO1xuICAgIHJldHVyblxuICB9XG4gIHZhciBvYiA9ICh0YXJnZXQpLl9fb2JfXztcbiAgaWYgKHRhcmdldC5faXNWdWUgfHwgKG9iICYmIG9iLnZtQ291bnQpKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgJ0F2b2lkIGRlbGV0aW5nIHByb3BlcnRpZXMgb24gYSBWdWUgaW5zdGFuY2Ugb3IgaXRzIHJvb3QgJGRhdGEgJyArXG4gICAgICAnLSBqdXN0IHNldCBpdCB0byBudWxsLidcbiAgICApO1xuICAgIHJldHVyblxuICB9XG4gIGlmICghaGFzT3duKHRhcmdldCwga2V5KSkge1xuICAgIHJldHVyblxuICB9XG4gIGRlbGV0ZSB0YXJnZXRba2V5XTtcbiAgaWYgKCFvYikge1xuICAgIHJldHVyblxuICB9XG4gIG9iLmRlcC5ub3RpZnkoKTtcbn1cblxuLyoqXG4gKiBDb2xsZWN0IGRlcGVuZGVuY2llcyBvbiBhcnJheSBlbGVtZW50cyB3aGVuIHRoZSBhcnJheSBpcyB0b3VjaGVkLCBzaW5jZVxuICogd2UgY2Fubm90IGludGVyY2VwdCBhcnJheSBlbGVtZW50IGFjY2VzcyBsaWtlIHByb3BlcnR5IGdldHRlcnMuXG4gKi9cbmZ1bmN0aW9uIGRlcGVuZEFycmF5ICh2YWx1ZSkge1xuICBmb3IgKHZhciBlID0gKHZvaWQgMCksIGkgPSAwLCBsID0gdmFsdWUubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgZSA9IHZhbHVlW2ldO1xuICAgIGUgJiYgZS5fX29iX18gJiYgZS5fX29iX18uZGVwLmRlcGVuZCgpO1xuICAgIGlmIChBcnJheS5pc0FycmF5KGUpKSB7XG4gICAgICBkZXBlbmRBcnJheShlKTtcbiAgICB9XG4gIH1cbn1cblxuLyogICovXG5cbi8qKlxuICogT3B0aW9uIG92ZXJ3cml0aW5nIHN0cmF0ZWdpZXMgYXJlIGZ1bmN0aW9ucyB0aGF0IGhhbmRsZVxuICogaG93IHRvIG1lcmdlIGEgcGFyZW50IG9wdGlvbiB2YWx1ZSBhbmQgYSBjaGlsZCBvcHRpb25cbiAqIHZhbHVlIGludG8gdGhlIGZpbmFsIHZhbHVlLlxuICovXG52YXIgc3RyYXRzID0gY29uZmlnLm9wdGlvbk1lcmdlU3RyYXRlZ2llcztcblxuLyoqXG4gKiBPcHRpb25zIHdpdGggcmVzdHJpY3Rpb25zXG4gKi9cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHN0cmF0cy5lbCA9IHN0cmF0cy5wcm9wc0RhdGEgPSBmdW5jdGlvbiAocGFyZW50LCBjaGlsZCwgdm0sIGtleSkge1xuICAgIGlmICghdm0pIHtcbiAgICAgIHdhcm4oXG4gICAgICAgIFwib3B0aW9uIFxcXCJcIiArIGtleSArIFwiXFxcIiBjYW4gb25seSBiZSB1c2VkIGR1cmluZyBpbnN0YW5jZSBcIiArXG4gICAgICAgICdjcmVhdGlvbiB3aXRoIHRoZSBgbmV3YCBrZXl3b3JkLidcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBkZWZhdWx0U3RyYXQocGFyZW50LCBjaGlsZClcbiAgfTtcbn1cblxuLyoqXG4gKiBIZWxwZXIgdGhhdCByZWN1cnNpdmVseSBtZXJnZXMgdHdvIGRhdGEgb2JqZWN0cyB0b2dldGhlci5cbiAqL1xuZnVuY3Rpb24gbWVyZ2VEYXRhICh0bywgZnJvbSkge1xuICBpZiAoIWZyb20pIHsgcmV0dXJuIHRvIH1cbiAgdmFyIGtleSwgdG9WYWwsIGZyb21WYWw7XG5cbiAgdmFyIGtleXMgPSBoYXNTeW1ib2xcbiAgICA/IFJlZmxlY3Qub3duS2V5cyhmcm9tKVxuICAgIDogT2JqZWN0LmtleXMoZnJvbSk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0ga2V5c1tpXTtcbiAgICAvLyBpbiBjYXNlIHRoZSBvYmplY3QgaXMgYWxyZWFkeSBvYnNlcnZlZC4uLlxuICAgIGlmIChrZXkgPT09ICdfX29iX18nKSB7IGNvbnRpbnVlIH1cbiAgICB0b1ZhbCA9IHRvW2tleV07XG4gICAgZnJvbVZhbCA9IGZyb21ba2V5XTtcbiAgICBpZiAoIWhhc093bih0bywga2V5KSkge1xuICAgICAgc2V0KHRvLCBrZXksIGZyb21WYWwpO1xuICAgIH0gZWxzZSBpZiAoXG4gICAgICB0b1ZhbCAhPT0gZnJvbVZhbCAmJlxuICAgICAgaXNQbGFpbk9iamVjdCh0b1ZhbCkgJiZcbiAgICAgIGlzUGxhaW5PYmplY3QoZnJvbVZhbClcbiAgICApIHtcbiAgICAgIG1lcmdlRGF0YSh0b1ZhbCwgZnJvbVZhbCk7XG4gICAgfVxuICB9XG4gIHJldHVybiB0b1xufVxuXG4vKipcbiAqIERhdGFcbiAqL1xuZnVuY3Rpb24gbWVyZ2VEYXRhT3JGbiAoXG4gIHBhcmVudFZhbCxcbiAgY2hpbGRWYWwsXG4gIHZtXG4pIHtcbiAgaWYgKCF2bSkge1xuICAgIC8vIGluIGEgVnVlLmV4dGVuZCBtZXJnZSwgYm90aCBzaG91bGQgYmUgZnVuY3Rpb25zXG4gICAgaWYgKCFjaGlsZFZhbCkge1xuICAgICAgcmV0dXJuIHBhcmVudFZhbFxuICAgIH1cbiAgICBpZiAoIXBhcmVudFZhbCkge1xuICAgICAgcmV0dXJuIGNoaWxkVmFsXG4gICAgfVxuICAgIC8vIHdoZW4gcGFyZW50VmFsICYgY2hpbGRWYWwgYXJlIGJvdGggcHJlc2VudCxcbiAgICAvLyB3ZSBuZWVkIHRvIHJldHVybiBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGVcbiAgICAvLyBtZXJnZWQgcmVzdWx0IG9mIGJvdGggZnVuY3Rpb25zLi4uIG5vIG5lZWQgdG9cbiAgICAvLyBjaGVjayBpZiBwYXJlbnRWYWwgaXMgYSBmdW5jdGlvbiBoZXJlIGJlY2F1c2VcbiAgICAvLyBpdCBoYXMgdG8gYmUgYSBmdW5jdGlvbiB0byBwYXNzIHByZXZpb3VzIG1lcmdlcy5cbiAgICByZXR1cm4gZnVuY3Rpb24gbWVyZ2VkRGF0YUZuICgpIHtcbiAgICAgIHJldHVybiBtZXJnZURhdGEoXG4gICAgICAgIHR5cGVvZiBjaGlsZFZhbCA9PT0gJ2Z1bmN0aW9uJyA/IGNoaWxkVmFsLmNhbGwodGhpcywgdGhpcykgOiBjaGlsZFZhbCxcbiAgICAgICAgdHlwZW9mIHBhcmVudFZhbCA9PT0gJ2Z1bmN0aW9uJyA/IHBhcmVudFZhbC5jYWxsKHRoaXMsIHRoaXMpIDogcGFyZW50VmFsXG4gICAgICApXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBmdW5jdGlvbiBtZXJnZWRJbnN0YW5jZURhdGFGbiAoKSB7XG4gICAgICAvLyBpbnN0YW5jZSBtZXJnZVxuICAgICAgdmFyIGluc3RhbmNlRGF0YSA9IHR5cGVvZiBjaGlsZFZhbCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICA/IGNoaWxkVmFsLmNhbGwodm0sIHZtKVxuICAgICAgICA6IGNoaWxkVmFsO1xuICAgICAgdmFyIGRlZmF1bHREYXRhID0gdHlwZW9mIHBhcmVudFZhbCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICA/IHBhcmVudFZhbC5jYWxsKHZtLCB2bSlcbiAgICAgICAgOiBwYXJlbnRWYWw7XG4gICAgICBpZiAoaW5zdGFuY2VEYXRhKSB7XG4gICAgICAgIHJldHVybiBtZXJnZURhdGEoaW5zdGFuY2VEYXRhLCBkZWZhdWx0RGF0YSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBkZWZhdWx0RGF0YVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5zdHJhdHMuZGF0YSA9IGZ1bmN0aW9uIChcbiAgcGFyZW50VmFsLFxuICBjaGlsZFZhbCxcbiAgdm1cbikge1xuICBpZiAoIXZtKSB7XG4gICAgaWYgKGNoaWxkVmFsICYmIHR5cGVvZiBjaGlsZFZhbCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICAnVGhlIFwiZGF0YVwiIG9wdGlvbiBzaG91bGQgYmUgYSBmdW5jdGlvbiAnICtcbiAgICAgICAgJ3RoYXQgcmV0dXJucyBhIHBlci1pbnN0YW5jZSB2YWx1ZSBpbiBjb21wb25lbnQgJyArXG4gICAgICAgICdkZWZpbml0aW9ucy4nLFxuICAgICAgICB2bVxuICAgICAgKTtcblxuICAgICAgcmV0dXJuIHBhcmVudFZhbFxuICAgIH1cbiAgICByZXR1cm4gbWVyZ2VEYXRhT3JGbihwYXJlbnRWYWwsIGNoaWxkVmFsKVxuICB9XG5cbiAgcmV0dXJuIG1lcmdlRGF0YU9yRm4ocGFyZW50VmFsLCBjaGlsZFZhbCwgdm0pXG59O1xuXG4vKipcbiAqIEhvb2tzIGFuZCBwcm9wcyBhcmUgbWVyZ2VkIGFzIGFycmF5cy5cbiAqL1xuZnVuY3Rpb24gbWVyZ2VIb29rIChcbiAgcGFyZW50VmFsLFxuICBjaGlsZFZhbFxuKSB7XG4gIHZhciByZXMgPSBjaGlsZFZhbFxuICAgID8gcGFyZW50VmFsXG4gICAgICA/IHBhcmVudFZhbC5jb25jYXQoY2hpbGRWYWwpXG4gICAgICA6IEFycmF5LmlzQXJyYXkoY2hpbGRWYWwpXG4gICAgICAgID8gY2hpbGRWYWxcbiAgICAgICAgOiBbY2hpbGRWYWxdXG4gICAgOiBwYXJlbnRWYWw7XG4gIHJldHVybiByZXNcbiAgICA/IGRlZHVwZUhvb2tzKHJlcylcbiAgICA6IHJlc1xufVxuXG5mdW5jdGlvbiBkZWR1cGVIb29rcyAoaG9va3MpIHtcbiAgdmFyIHJlcyA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGhvb2tzLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHJlcy5pbmRleE9mKGhvb2tzW2ldKSA9PT0gLTEpIHtcbiAgICAgIHJlcy5wdXNoKGhvb2tzW2ldKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5MSUZFQ1lDTEVfSE9PS1MuZm9yRWFjaChmdW5jdGlvbiAoaG9vaykge1xuICBzdHJhdHNbaG9va10gPSBtZXJnZUhvb2s7XG59KTtcblxuLyoqXG4gKiBBc3NldHNcbiAqXG4gKiBXaGVuIGEgdm0gaXMgcHJlc2VudCAoaW5zdGFuY2UgY3JlYXRpb24pLCB3ZSBuZWVkIHRvIGRvXG4gKiBhIHRocmVlLXdheSBtZXJnZSBiZXR3ZWVuIGNvbnN0cnVjdG9yIG9wdGlvbnMsIGluc3RhbmNlXG4gKiBvcHRpb25zIGFuZCBwYXJlbnQgb3B0aW9ucy5cbiAqL1xuZnVuY3Rpb24gbWVyZ2VBc3NldHMgKFxuICBwYXJlbnRWYWwsXG4gIGNoaWxkVmFsLFxuICB2bSxcbiAga2V5XG4pIHtcbiAgdmFyIHJlcyA9IE9iamVjdC5jcmVhdGUocGFyZW50VmFsIHx8IG51bGwpO1xuICBpZiAoY2hpbGRWYWwpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGFzc2VydE9iamVjdFR5cGUoa2V5LCBjaGlsZFZhbCwgdm0pO1xuICAgIHJldHVybiBleHRlbmQocmVzLCBjaGlsZFZhbClcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gcmVzXG4gIH1cbn1cblxuQVNTRVRfVFlQRVMuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICBzdHJhdHNbdHlwZSArICdzJ10gPSBtZXJnZUFzc2V0cztcbn0pO1xuXG4vKipcbiAqIFdhdGNoZXJzLlxuICpcbiAqIFdhdGNoZXJzIGhhc2hlcyBzaG91bGQgbm90IG92ZXJ3cml0ZSBvbmVcbiAqIGFub3RoZXIsIHNvIHdlIG1lcmdlIHRoZW0gYXMgYXJyYXlzLlxuICovXG5zdHJhdHMud2F0Y2ggPSBmdW5jdGlvbiAoXG4gIHBhcmVudFZhbCxcbiAgY2hpbGRWYWwsXG4gIHZtLFxuICBrZXlcbikge1xuICAvLyB3b3JrIGFyb3VuZCBGaXJlZm94J3MgT2JqZWN0LnByb3RvdHlwZS53YXRjaC4uLlxuICBpZiAocGFyZW50VmFsID09PSBuYXRpdmVXYXRjaCkgeyBwYXJlbnRWYWwgPSB1bmRlZmluZWQ7IH1cbiAgaWYgKGNoaWxkVmFsID09PSBuYXRpdmVXYXRjaCkgeyBjaGlsZFZhbCA9IHVuZGVmaW5lZDsgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKCFjaGlsZFZhbCkgeyByZXR1cm4gT2JqZWN0LmNyZWF0ZShwYXJlbnRWYWwgfHwgbnVsbCkgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGFzc2VydE9iamVjdFR5cGUoa2V5LCBjaGlsZFZhbCwgdm0pO1xuICB9XG4gIGlmICghcGFyZW50VmFsKSB7IHJldHVybiBjaGlsZFZhbCB9XG4gIHZhciByZXQgPSB7fTtcbiAgZXh0ZW5kKHJldCwgcGFyZW50VmFsKTtcbiAgZm9yICh2YXIga2V5JDEgaW4gY2hpbGRWYWwpIHtcbiAgICB2YXIgcGFyZW50ID0gcmV0W2tleSQxXTtcbiAgICB2YXIgY2hpbGQgPSBjaGlsZFZhbFtrZXkkMV07XG4gICAgaWYgKHBhcmVudCAmJiAhQXJyYXkuaXNBcnJheShwYXJlbnQpKSB7XG4gICAgICBwYXJlbnQgPSBbcGFyZW50XTtcbiAgICB9XG4gICAgcmV0W2tleSQxXSA9IHBhcmVudFxuICAgICAgPyBwYXJlbnQuY29uY2F0KGNoaWxkKVxuICAgICAgOiBBcnJheS5pc0FycmF5KGNoaWxkKSA/IGNoaWxkIDogW2NoaWxkXTtcbiAgfVxuICByZXR1cm4gcmV0XG59O1xuXG4vKipcbiAqIE90aGVyIG9iamVjdCBoYXNoZXMuXG4gKi9cbnN0cmF0cy5wcm9wcyA9XG5zdHJhdHMubWV0aG9kcyA9XG5zdHJhdHMuaW5qZWN0ID1cbnN0cmF0cy5jb21wdXRlZCA9IGZ1bmN0aW9uIChcbiAgcGFyZW50VmFsLFxuICBjaGlsZFZhbCxcbiAgdm0sXG4gIGtleVxuKSB7XG4gIGlmIChjaGlsZFZhbCAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgYXNzZXJ0T2JqZWN0VHlwZShrZXksIGNoaWxkVmFsLCB2bSk7XG4gIH1cbiAgaWYgKCFwYXJlbnRWYWwpIHsgcmV0dXJuIGNoaWxkVmFsIH1cbiAgdmFyIHJldCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGV4dGVuZChyZXQsIHBhcmVudFZhbCk7XG4gIGlmIChjaGlsZFZhbCkgeyBleHRlbmQocmV0LCBjaGlsZFZhbCk7IH1cbiAgcmV0dXJuIHJldFxufTtcbnN0cmF0cy5wcm92aWRlID0gbWVyZ2VEYXRhT3JGbjtcblxuLyoqXG4gKiBEZWZhdWx0IHN0cmF0ZWd5LlxuICovXG52YXIgZGVmYXVsdFN0cmF0ID0gZnVuY3Rpb24gKHBhcmVudFZhbCwgY2hpbGRWYWwpIHtcbiAgcmV0dXJuIGNoaWxkVmFsID09PSB1bmRlZmluZWRcbiAgICA/IHBhcmVudFZhbFxuICAgIDogY2hpbGRWYWxcbn07XG5cbi8qKlxuICogVmFsaWRhdGUgY29tcG9uZW50IG5hbWVzXG4gKi9cbmZ1bmN0aW9uIGNoZWNrQ29tcG9uZW50cyAob3B0aW9ucykge1xuICBmb3IgKHZhciBrZXkgaW4gb3B0aW9ucy5jb21wb25lbnRzKSB7XG4gICAgdmFsaWRhdGVDb21wb25lbnROYW1lKGtleSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVDb21wb25lbnROYW1lIChuYW1lKSB7XG4gIGlmICghbmV3IFJlZ0V4cCgoXCJeW2EtekEtWl1bXFxcXC1cXFxcLjAtOV9cIiArICh1bmljb2RlUmVnRXhwLnNvdXJjZSkgKyBcIl0qJFwiKSkudGVzdChuYW1lKSkge1xuICAgIHdhcm4oXG4gICAgICAnSW52YWxpZCBjb21wb25lbnQgbmFtZTogXCInICsgbmFtZSArICdcIi4gQ29tcG9uZW50IG5hbWVzICcgK1xuICAgICAgJ3Nob3VsZCBjb25mb3JtIHRvIHZhbGlkIGN1c3RvbSBlbGVtZW50IG5hbWUgaW4gaHRtbDUgc3BlY2lmaWNhdGlvbi4nXG4gICAgKTtcbiAgfVxuICBpZiAoaXNCdWlsdEluVGFnKG5hbWUpIHx8IGNvbmZpZy5pc1Jlc2VydmVkVGFnKG5hbWUpKSB7XG4gICAgd2FybihcbiAgICAgICdEbyBub3QgdXNlIGJ1aWx0LWluIG9yIHJlc2VydmVkIEhUTUwgZWxlbWVudHMgYXMgY29tcG9uZW50ICcgK1xuICAgICAgJ2lkOiAnICsgbmFtZVxuICAgICk7XG4gIH1cbn1cblxuLyoqXG4gKiBFbnN1cmUgYWxsIHByb3BzIG9wdGlvbiBzeW50YXggYXJlIG5vcm1hbGl6ZWQgaW50byB0aGVcbiAqIE9iamVjdC1iYXNlZCBmb3JtYXQuXG4gKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZVByb3BzIChvcHRpb25zLCB2bSkge1xuICB2YXIgcHJvcHMgPSBvcHRpb25zLnByb3BzO1xuICBpZiAoIXByb3BzKSB7IHJldHVybiB9XG4gIHZhciByZXMgPSB7fTtcbiAgdmFyIGksIHZhbCwgbmFtZTtcbiAgaWYgKEFycmF5LmlzQXJyYXkocHJvcHMpKSB7XG4gICAgaSA9IHByb3BzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICB2YWwgPSBwcm9wc1tpXTtcbiAgICAgIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgICAgICBuYW1lID0gY2FtZWxpemUodmFsKTtcbiAgICAgICAgcmVzW25hbWVdID0geyB0eXBlOiBudWxsIH07XG4gICAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgd2FybigncHJvcHMgbXVzdCBiZSBzdHJpbmdzIHdoZW4gdXNpbmcgYXJyYXkgc3ludGF4LicpO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmIChpc1BsYWluT2JqZWN0KHByb3BzKSkge1xuICAgIGZvciAodmFyIGtleSBpbiBwcm9wcykge1xuICAgICAgdmFsID0gcHJvcHNba2V5XTtcbiAgICAgIG5hbWUgPSBjYW1lbGl6ZShrZXkpO1xuICAgICAgcmVzW25hbWVdID0gaXNQbGFpbk9iamVjdCh2YWwpXG4gICAgICAgID8gdmFsXG4gICAgICAgIDogeyB0eXBlOiB2YWwgfTtcbiAgICB9XG4gIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHdhcm4oXG4gICAgICBcIkludmFsaWQgdmFsdWUgZm9yIG9wdGlvbiBcXFwicHJvcHNcXFwiOiBleHBlY3RlZCBhbiBBcnJheSBvciBhbiBPYmplY3QsIFwiICtcbiAgICAgIFwiYnV0IGdvdCBcIiArICh0b1Jhd1R5cGUocHJvcHMpKSArIFwiLlwiLFxuICAgICAgdm1cbiAgICApO1xuICB9XG4gIG9wdGlvbnMucHJvcHMgPSByZXM7XG59XG5cbi8qKlxuICogTm9ybWFsaXplIGFsbCBpbmplY3Rpb25zIGludG8gT2JqZWN0LWJhc2VkIGZvcm1hdFxuICovXG5mdW5jdGlvbiBub3JtYWxpemVJbmplY3QgKG9wdGlvbnMsIHZtKSB7XG4gIHZhciBpbmplY3QgPSBvcHRpb25zLmluamVjdDtcbiAgaWYgKCFpbmplY3QpIHsgcmV0dXJuIH1cbiAgdmFyIG5vcm1hbGl6ZWQgPSBvcHRpb25zLmluamVjdCA9IHt9O1xuICBpZiAoQXJyYXkuaXNBcnJheShpbmplY3QpKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpbmplY3QubGVuZ3RoOyBpKyspIHtcbiAgICAgIG5vcm1hbGl6ZWRbaW5qZWN0W2ldXSA9IHsgZnJvbTogaW5qZWN0W2ldIH07XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzUGxhaW5PYmplY3QoaW5qZWN0KSkge1xuICAgIGZvciAodmFyIGtleSBpbiBpbmplY3QpIHtcbiAgICAgIHZhciB2YWwgPSBpbmplY3Rba2V5XTtcbiAgICAgIG5vcm1hbGl6ZWRba2V5XSA9IGlzUGxhaW5PYmplY3QodmFsKVxuICAgICAgICA/IGV4dGVuZCh7IGZyb206IGtleSB9LCB2YWwpXG4gICAgICAgIDogeyBmcm9tOiB2YWwgfTtcbiAgICB9XG4gIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHdhcm4oXG4gICAgICBcIkludmFsaWQgdmFsdWUgZm9yIG9wdGlvbiBcXFwiaW5qZWN0XFxcIjogZXhwZWN0ZWQgYW4gQXJyYXkgb3IgYW4gT2JqZWN0LCBcIiArXG4gICAgICBcImJ1dCBnb3QgXCIgKyAodG9SYXdUeXBlKGluamVjdCkpICsgXCIuXCIsXG4gICAgICB2bVxuICAgICk7XG4gIH1cbn1cblxuLyoqXG4gKiBOb3JtYWxpemUgcmF3IGZ1bmN0aW9uIGRpcmVjdGl2ZXMgaW50byBvYmplY3QgZm9ybWF0LlxuICovXG5mdW5jdGlvbiBub3JtYWxpemVEaXJlY3RpdmVzIChvcHRpb25zKSB7XG4gIHZhciBkaXJzID0gb3B0aW9ucy5kaXJlY3RpdmVzO1xuICBpZiAoZGlycykge1xuICAgIGZvciAodmFyIGtleSBpbiBkaXJzKSB7XG4gICAgICB2YXIgZGVmJCQxID0gZGlyc1trZXldO1xuICAgICAgaWYgKHR5cGVvZiBkZWYkJDEgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgZGlyc1trZXldID0geyBiaW5kOiBkZWYkJDEsIHVwZGF0ZTogZGVmJCQxIH07XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGFzc2VydE9iamVjdFR5cGUgKG5hbWUsIHZhbHVlLCB2bSkge1xuICBpZiAoIWlzUGxhaW5PYmplY3QodmFsdWUpKSB7XG4gICAgd2FybihcbiAgICAgIFwiSW52YWxpZCB2YWx1ZSBmb3Igb3B0aW9uIFxcXCJcIiArIG5hbWUgKyBcIlxcXCI6IGV4cGVjdGVkIGFuIE9iamVjdCwgXCIgK1xuICAgICAgXCJidXQgZ290IFwiICsgKHRvUmF3VHlwZSh2YWx1ZSkpICsgXCIuXCIsXG4gICAgICB2bVxuICAgICk7XG4gIH1cbn1cblxuLyoqXG4gKiBNZXJnZSB0d28gb3B0aW9uIG9iamVjdHMgaW50byBhIG5ldyBvbmUuXG4gKiBDb3JlIHV0aWxpdHkgdXNlZCBpbiBib3RoIGluc3RhbnRpYXRpb24gYW5kIGluaGVyaXRhbmNlLlxuICovXG5mdW5jdGlvbiBtZXJnZU9wdGlvbnMgKFxuICBwYXJlbnQsXG4gIGNoaWxkLFxuICB2bVxuKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgY2hlY2tDb21wb25lbnRzKGNoaWxkKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgY2hpbGQgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjaGlsZCA9IGNoaWxkLm9wdGlvbnM7XG4gIH1cblxuICBub3JtYWxpemVQcm9wcyhjaGlsZCwgdm0pO1xuICBub3JtYWxpemVJbmplY3QoY2hpbGQsIHZtKTtcbiAgbm9ybWFsaXplRGlyZWN0aXZlcyhjaGlsZCk7XG5cbiAgLy8gQXBwbHkgZXh0ZW5kcyBhbmQgbWl4aW5zIG9uIHRoZSBjaGlsZCBvcHRpb25zLFxuICAvLyBidXQgb25seSBpZiBpdCBpcyBhIHJhdyBvcHRpb25zIG9iamVjdCB0aGF0IGlzbid0XG4gIC8vIHRoZSByZXN1bHQgb2YgYW5vdGhlciBtZXJnZU9wdGlvbnMgY2FsbC5cbiAgLy8gT25seSBtZXJnZWQgb3B0aW9ucyBoYXMgdGhlIF9iYXNlIHByb3BlcnR5LlxuICBpZiAoIWNoaWxkLl9iYXNlKSB7XG4gICAgaWYgKGNoaWxkLmV4dGVuZHMpIHtcbiAgICAgIHBhcmVudCA9IG1lcmdlT3B0aW9ucyhwYXJlbnQsIGNoaWxkLmV4dGVuZHMsIHZtKTtcbiAgICB9XG4gICAgaWYgKGNoaWxkLm1peGlucykge1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBjaGlsZC5taXhpbnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIHBhcmVudCA9IG1lcmdlT3B0aW9ucyhwYXJlbnQsIGNoaWxkLm1peGluc1tpXSwgdm0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHZhciBvcHRpb25zID0ge307XG4gIHZhciBrZXk7XG4gIGZvciAoa2V5IGluIHBhcmVudCkge1xuICAgIG1lcmdlRmllbGQoa2V5KTtcbiAgfVxuICBmb3IgKGtleSBpbiBjaGlsZCkge1xuICAgIGlmICghaGFzT3duKHBhcmVudCwga2V5KSkge1xuICAgICAgbWVyZ2VGaWVsZChrZXkpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBtZXJnZUZpZWxkIChrZXkpIHtcbiAgICB2YXIgc3RyYXQgPSBzdHJhdHNba2V5XSB8fCBkZWZhdWx0U3RyYXQ7XG4gICAgb3B0aW9uc1trZXldID0gc3RyYXQocGFyZW50W2tleV0sIGNoaWxkW2tleV0sIHZtLCBrZXkpO1xuICB9XG4gIHJldHVybiBvcHRpb25zXG59XG5cbi8qKlxuICogUmVzb2x2ZSBhbiBhc3NldC5cbiAqIFRoaXMgZnVuY3Rpb24gaXMgdXNlZCBiZWNhdXNlIGNoaWxkIGluc3RhbmNlcyBuZWVkIGFjY2Vzc1xuICogdG8gYXNzZXRzIGRlZmluZWQgaW4gaXRzIGFuY2VzdG9yIGNoYWluLlxuICovXG5mdW5jdGlvbiByZXNvbHZlQXNzZXQgKFxuICBvcHRpb25zLFxuICB0eXBlLFxuICBpZCxcbiAgd2Fybk1pc3Npbmdcbikge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKHR5cGVvZiBpZCAhPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgYXNzZXRzID0gb3B0aW9uc1t0eXBlXTtcbiAgLy8gY2hlY2sgbG9jYWwgcmVnaXN0cmF0aW9uIHZhcmlhdGlvbnMgZmlyc3RcbiAgaWYgKGhhc093bihhc3NldHMsIGlkKSkgeyByZXR1cm4gYXNzZXRzW2lkXSB9XG4gIHZhciBjYW1lbGl6ZWRJZCA9IGNhbWVsaXplKGlkKTtcbiAgaWYgKGhhc093bihhc3NldHMsIGNhbWVsaXplZElkKSkgeyByZXR1cm4gYXNzZXRzW2NhbWVsaXplZElkXSB9XG4gIHZhciBQYXNjYWxDYXNlSWQgPSBjYXBpdGFsaXplKGNhbWVsaXplZElkKTtcbiAgaWYgKGhhc093bihhc3NldHMsIFBhc2NhbENhc2VJZCkpIHsgcmV0dXJuIGFzc2V0c1tQYXNjYWxDYXNlSWRdIH1cbiAgLy8gZmFsbGJhY2sgdG8gcHJvdG90eXBlIGNoYWluXG4gIHZhciByZXMgPSBhc3NldHNbaWRdIHx8IGFzc2V0c1tjYW1lbGl6ZWRJZF0gfHwgYXNzZXRzW1Bhc2NhbENhc2VJZF07XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm5NaXNzaW5nICYmICFyZXMpIHtcbiAgICB3YXJuKFxuICAgICAgJ0ZhaWxlZCB0byByZXNvbHZlICcgKyB0eXBlLnNsaWNlKDAsIC0xKSArICc6ICcgKyBpZCxcbiAgICAgIG9wdGlvbnNcbiAgICApO1xuICB9XG4gIHJldHVybiByZXNcbn1cblxuLyogICovXG5cblxuXG5mdW5jdGlvbiB2YWxpZGF0ZVByb3AgKFxuICBrZXksXG4gIHByb3BPcHRpb25zLFxuICBwcm9wc0RhdGEsXG4gIHZtXG4pIHtcbiAgdmFyIHByb3AgPSBwcm9wT3B0aW9uc1trZXldO1xuICB2YXIgYWJzZW50ID0gIWhhc093bihwcm9wc0RhdGEsIGtleSk7XG4gIHZhciB2YWx1ZSA9IHByb3BzRGF0YVtrZXldO1xuICAvLyBib29sZWFuIGNhc3RpbmdcbiAgdmFyIGJvb2xlYW5JbmRleCA9IGdldFR5cGVJbmRleChCb29sZWFuLCBwcm9wLnR5cGUpO1xuICBpZiAoYm9vbGVhbkluZGV4ID4gLTEpIHtcbiAgICBpZiAoYWJzZW50ICYmICFoYXNPd24ocHJvcCwgJ2RlZmF1bHQnKSkge1xuICAgICAgdmFsdWUgPSBmYWxzZTtcbiAgICB9IGVsc2UgaWYgKHZhbHVlID09PSAnJyB8fCB2YWx1ZSA9PT0gaHlwaGVuYXRlKGtleSkpIHtcbiAgICAgIC8vIG9ubHkgY2FzdCBlbXB0eSBzdHJpbmcgLyBzYW1lIG5hbWUgdG8gYm9vbGVhbiBpZlxuICAgICAgLy8gYm9vbGVhbiBoYXMgaGlnaGVyIHByaW9yaXR5XG4gICAgICB2YXIgc3RyaW5nSW5kZXggPSBnZXRUeXBlSW5kZXgoU3RyaW5nLCBwcm9wLnR5cGUpO1xuICAgICAgaWYgKHN0cmluZ0luZGV4IDwgMCB8fCBib29sZWFuSW5kZXggPCBzdHJpbmdJbmRleCkge1xuICAgICAgICB2YWx1ZSA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8vIGNoZWNrIGRlZmF1bHQgdmFsdWVcbiAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICB2YWx1ZSA9IGdldFByb3BEZWZhdWx0VmFsdWUodm0sIHByb3AsIGtleSk7XG4gICAgLy8gc2luY2UgdGhlIGRlZmF1bHQgdmFsdWUgaXMgYSBmcmVzaCBjb3B5LFxuICAgIC8vIG1ha2Ugc3VyZSB0byBvYnNlcnZlIGl0LlxuICAgIHZhciBwcmV2U2hvdWxkT2JzZXJ2ZSA9IHNob3VsZE9ic2VydmU7XG4gICAgdG9nZ2xlT2JzZXJ2aW5nKHRydWUpO1xuICAgIG9ic2VydmUodmFsdWUpO1xuICAgIHRvZ2dsZU9ic2VydmluZyhwcmV2U2hvdWxkT2JzZXJ2ZSk7XG4gIH1cbiAgaWYgKFxuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAvLyBza2lwIHZhbGlkYXRpb24gZm9yIHdlZXggcmVjeWNsZS1saXN0IGNoaWxkIGNvbXBvbmVudCBwcm9wc1xuICAgICEoZmFsc2UpXG4gICkge1xuICAgIGFzc2VydFByb3AocHJvcCwga2V5LCB2YWx1ZSwgdm0sIGFic2VudCk7XG4gIH1cbiAgcmV0dXJuIHZhbHVlXG59XG5cbi8qKlxuICogR2V0IHRoZSBkZWZhdWx0IHZhbHVlIG9mIGEgcHJvcC5cbiAqL1xuZnVuY3Rpb24gZ2V0UHJvcERlZmF1bHRWYWx1ZSAodm0sIHByb3AsIGtleSkge1xuICAvLyBubyBkZWZhdWx0LCByZXR1cm4gdW5kZWZpbmVkXG4gIGlmICghaGFzT3duKHByb3AsICdkZWZhdWx0JykpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkXG4gIH1cbiAgdmFyIGRlZiA9IHByb3AuZGVmYXVsdDtcbiAgLy8gd2FybiBhZ2FpbnN0IG5vbi1mYWN0b3J5IGRlZmF1bHRzIGZvciBPYmplY3QgJiBBcnJheVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBpc09iamVjdChkZWYpKSB7XG4gICAgd2FybihcbiAgICAgICdJbnZhbGlkIGRlZmF1bHQgdmFsdWUgZm9yIHByb3AgXCInICsga2V5ICsgJ1wiOiAnICtcbiAgICAgICdQcm9wcyB3aXRoIHR5cGUgT2JqZWN0L0FycmF5IG11c3QgdXNlIGEgZmFjdG9yeSBmdW5jdGlvbiAnICtcbiAgICAgICd0byByZXR1cm4gdGhlIGRlZmF1bHQgdmFsdWUuJyxcbiAgICAgIHZtXG4gICAgKTtcbiAgfVxuICAvLyB0aGUgcmF3IHByb3AgdmFsdWUgd2FzIGFsc28gdW5kZWZpbmVkIGZyb20gcHJldmlvdXMgcmVuZGVyLFxuICAvLyByZXR1cm4gcHJldmlvdXMgZGVmYXVsdCB2YWx1ZSB0byBhdm9pZCB1bm5lY2Vzc2FyeSB3YXRjaGVyIHRyaWdnZXJcbiAgaWYgKHZtICYmIHZtLiRvcHRpb25zLnByb3BzRGF0YSAmJlxuICAgIHZtLiRvcHRpb25zLnByb3BzRGF0YVtrZXldID09PSB1bmRlZmluZWQgJiZcbiAgICB2bS5fcHJvcHNba2V5XSAhPT0gdW5kZWZpbmVkXG4gICkge1xuICAgIHJldHVybiB2bS5fcHJvcHNba2V5XVxuICB9XG4gIC8vIGNhbGwgZmFjdG9yeSBmdW5jdGlvbiBmb3Igbm9uLUZ1bmN0aW9uIHR5cGVzXG4gIC8vIGEgdmFsdWUgaXMgRnVuY3Rpb24gaWYgaXRzIHByb3RvdHlwZSBpcyBmdW5jdGlvbiBldmVuIGFjcm9zcyBkaWZmZXJlbnQgZXhlY3V0aW9uIGNvbnRleHRcbiAgcmV0dXJuIHR5cGVvZiBkZWYgPT09ICdmdW5jdGlvbicgJiYgZ2V0VHlwZShwcm9wLnR5cGUpICE9PSAnRnVuY3Rpb24nXG4gICAgPyBkZWYuY2FsbCh2bSlcbiAgICA6IGRlZlxufVxuXG4vKipcbiAqIEFzc2VydCB3aGV0aGVyIGEgcHJvcCBpcyB2YWxpZC5cbiAqL1xuZnVuY3Rpb24gYXNzZXJ0UHJvcCAoXG4gIHByb3AsXG4gIG5hbWUsXG4gIHZhbHVlLFxuICB2bSxcbiAgYWJzZW50XG4pIHtcbiAgaWYgKHByb3AucmVxdWlyZWQgJiYgYWJzZW50KSB7XG4gICAgd2FybihcbiAgICAgICdNaXNzaW5nIHJlcXVpcmVkIHByb3A6IFwiJyArIG5hbWUgKyAnXCInLFxuICAgICAgdm1cbiAgICApO1xuICAgIHJldHVyblxuICB9XG4gIGlmICh2YWx1ZSA9PSBudWxsICYmICFwcm9wLnJlcXVpcmVkKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIHR5cGUgPSBwcm9wLnR5cGU7XG4gIHZhciB2YWxpZCA9ICF0eXBlIHx8IHR5cGUgPT09IHRydWU7XG4gIHZhciBleHBlY3RlZFR5cGVzID0gW107XG4gIGlmICh0eXBlKSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KHR5cGUpKSB7XG4gICAgICB0eXBlID0gW3R5cGVdO1xuICAgIH1cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHR5cGUubGVuZ3RoICYmICF2YWxpZDsgaSsrKSB7XG4gICAgICB2YXIgYXNzZXJ0ZWRUeXBlID0gYXNzZXJ0VHlwZSh2YWx1ZSwgdHlwZVtpXSwgdm0pO1xuICAgICAgZXhwZWN0ZWRUeXBlcy5wdXNoKGFzc2VydGVkVHlwZS5leHBlY3RlZFR5cGUgfHwgJycpO1xuICAgICAgdmFsaWQgPSBhc3NlcnRlZFR5cGUudmFsaWQ7XG4gICAgfVxuICB9XG5cbiAgdmFyIGhhdmVFeHBlY3RlZFR5cGVzID0gZXhwZWN0ZWRUeXBlcy5zb21lKGZ1bmN0aW9uICh0KSB7IHJldHVybiB0OyB9KTtcbiAgaWYgKCF2YWxpZCAmJiBoYXZlRXhwZWN0ZWRUeXBlcykge1xuICAgIHdhcm4oXG4gICAgICBnZXRJbnZhbGlkVHlwZU1lc3NhZ2UobmFtZSwgdmFsdWUsIGV4cGVjdGVkVHlwZXMpLFxuICAgICAgdm1cbiAgICApO1xuICAgIHJldHVyblxuICB9XG4gIHZhciB2YWxpZGF0b3IgPSBwcm9wLnZhbGlkYXRvcjtcbiAgaWYgKHZhbGlkYXRvcikge1xuICAgIGlmICghdmFsaWRhdG9yKHZhbHVlKSkge1xuICAgICAgd2FybihcbiAgICAgICAgJ0ludmFsaWQgcHJvcDogY3VzdG9tIHZhbGlkYXRvciBjaGVjayBmYWlsZWQgZm9yIHByb3AgXCInICsgbmFtZSArICdcIi4nLFxuICAgICAgICB2bVxuICAgICAgKTtcbiAgICB9XG4gIH1cbn1cblxudmFyIHNpbXBsZUNoZWNrUkUgPSAvXihTdHJpbmd8TnVtYmVyfEJvb2xlYW58RnVuY3Rpb258U3ltYm9sfEJpZ0ludCkkLztcblxuZnVuY3Rpb24gYXNzZXJ0VHlwZSAodmFsdWUsIHR5cGUsIHZtKSB7XG4gIHZhciB2YWxpZDtcbiAgdmFyIGV4cGVjdGVkVHlwZSA9IGdldFR5cGUodHlwZSk7XG4gIGlmIChzaW1wbGVDaGVja1JFLnRlc3QoZXhwZWN0ZWRUeXBlKSkge1xuICAgIHZhciB0ID0gdHlwZW9mIHZhbHVlO1xuICAgIHZhbGlkID0gdCA9PT0gZXhwZWN0ZWRUeXBlLnRvTG93ZXJDYXNlKCk7XG4gICAgLy8gZm9yIHByaW1pdGl2ZSB3cmFwcGVyIG9iamVjdHNcbiAgICBpZiAoIXZhbGlkICYmIHQgPT09ICdvYmplY3QnKSB7XG4gICAgICB2YWxpZCA9IHZhbHVlIGluc3RhbmNlb2YgdHlwZTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoZXhwZWN0ZWRUeXBlID09PSAnT2JqZWN0Jykge1xuICAgIHZhbGlkID0gaXNQbGFpbk9iamVjdCh2YWx1ZSk7XG4gIH0gZWxzZSBpZiAoZXhwZWN0ZWRUeXBlID09PSAnQXJyYXknKSB7XG4gICAgdmFsaWQgPSBBcnJheS5pc0FycmF5KHZhbHVlKTtcbiAgfSBlbHNlIHtcbiAgICB0cnkge1xuICAgICAgdmFsaWQgPSB2YWx1ZSBpbnN0YW5jZW9mIHR5cGU7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgd2FybignSW52YWxpZCBwcm9wIHR5cGU6IFwiJyArIFN0cmluZyh0eXBlKSArICdcIiBpcyBub3QgYSBjb25zdHJ1Y3RvcicsIHZtKTtcbiAgICAgIHZhbGlkID0gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiB7XG4gICAgdmFsaWQ6IHZhbGlkLFxuICAgIGV4cGVjdGVkVHlwZTogZXhwZWN0ZWRUeXBlXG4gIH1cbn1cblxudmFyIGZ1bmN0aW9uVHlwZUNoZWNrUkUgPSAvXlxccypmdW5jdGlvbiAoXFx3KykvO1xuXG4vKipcbiAqIFVzZSBmdW5jdGlvbiBzdHJpbmcgbmFtZSB0byBjaGVjayBidWlsdC1pbiB0eXBlcyxcbiAqIGJlY2F1c2UgYSBzaW1wbGUgZXF1YWxpdHkgY2hlY2sgd2lsbCBmYWlsIHdoZW4gcnVubmluZ1xuICogYWNyb3NzIGRpZmZlcmVudCB2bXMgLyBpZnJhbWVzLlxuICovXG5mdW5jdGlvbiBnZXRUeXBlIChmbikge1xuICB2YXIgbWF0Y2ggPSBmbiAmJiBmbi50b1N0cmluZygpLm1hdGNoKGZ1bmN0aW9uVHlwZUNoZWNrUkUpO1xuICByZXR1cm4gbWF0Y2ggPyBtYXRjaFsxXSA6ICcnXG59XG5cbmZ1bmN0aW9uIGlzU2FtZVR5cGUgKGEsIGIpIHtcbiAgcmV0dXJuIGdldFR5cGUoYSkgPT09IGdldFR5cGUoYilcbn1cblxuZnVuY3Rpb24gZ2V0VHlwZUluZGV4ICh0eXBlLCBleHBlY3RlZFR5cGVzKSB7XG4gIGlmICghQXJyYXkuaXNBcnJheShleHBlY3RlZFR5cGVzKSkge1xuICAgIHJldHVybiBpc1NhbWVUeXBlKGV4cGVjdGVkVHlwZXMsIHR5cGUpID8gMCA6IC0xXG4gIH1cbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGV4cGVjdGVkVHlwZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBpZiAoaXNTYW1lVHlwZShleHBlY3RlZFR5cGVzW2ldLCB0eXBlKSkge1xuICAgICAgcmV0dXJuIGlcbiAgICB9XG4gIH1cbiAgcmV0dXJuIC0xXG59XG5cbmZ1bmN0aW9uIGdldEludmFsaWRUeXBlTWVzc2FnZSAobmFtZSwgdmFsdWUsIGV4cGVjdGVkVHlwZXMpIHtcbiAgdmFyIG1lc3NhZ2UgPSBcIkludmFsaWQgcHJvcDogdHlwZSBjaGVjayBmYWlsZWQgZm9yIHByb3AgXFxcIlwiICsgbmFtZSArIFwiXFxcIi5cIiArXG4gICAgXCIgRXhwZWN0ZWQgXCIgKyAoZXhwZWN0ZWRUeXBlcy5tYXAoY2FwaXRhbGl6ZSkuam9pbignLCAnKSk7XG4gIHZhciBleHBlY3RlZFR5cGUgPSBleHBlY3RlZFR5cGVzWzBdO1xuICB2YXIgcmVjZWl2ZWRUeXBlID0gdG9SYXdUeXBlKHZhbHVlKTtcbiAgLy8gY2hlY2sgaWYgd2UgbmVlZCB0byBzcGVjaWZ5IGV4cGVjdGVkIHZhbHVlXG4gIGlmIChcbiAgICBleHBlY3RlZFR5cGVzLmxlbmd0aCA9PT0gMSAmJlxuICAgIGlzRXhwbGljYWJsZShleHBlY3RlZFR5cGUpICYmXG4gICAgaXNFeHBsaWNhYmxlKHR5cGVvZiB2YWx1ZSkgJiZcbiAgICAhaXNCb29sZWFuKGV4cGVjdGVkVHlwZSwgcmVjZWl2ZWRUeXBlKVxuICApIHtcbiAgICBtZXNzYWdlICs9IFwiIHdpdGggdmFsdWUgXCIgKyAoc3R5bGVWYWx1ZSh2YWx1ZSwgZXhwZWN0ZWRUeXBlKSk7XG4gIH1cbiAgbWVzc2FnZSArPSBcIiwgZ290IFwiICsgcmVjZWl2ZWRUeXBlICsgXCIgXCI7XG4gIC8vIGNoZWNrIGlmIHdlIG5lZWQgdG8gc3BlY2lmeSByZWNlaXZlZCB2YWx1ZVxuICBpZiAoaXNFeHBsaWNhYmxlKHJlY2VpdmVkVHlwZSkpIHtcbiAgICBtZXNzYWdlICs9IFwid2l0aCB2YWx1ZSBcIiArIChzdHlsZVZhbHVlKHZhbHVlLCByZWNlaXZlZFR5cGUpKSArIFwiLlwiO1xuICB9XG4gIHJldHVybiBtZXNzYWdlXG59XG5cbmZ1bmN0aW9uIHN0eWxlVmFsdWUgKHZhbHVlLCB0eXBlKSB7XG4gIGlmICh0eXBlID09PSAnU3RyaW5nJykge1xuICAgIHJldHVybiAoXCJcXFwiXCIgKyB2YWx1ZSArIFwiXFxcIlwiKVxuICB9IGVsc2UgaWYgKHR5cGUgPT09ICdOdW1iZXInKSB7XG4gICAgcmV0dXJuIChcIlwiICsgKE51bWJlcih2YWx1ZSkpKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiAoXCJcIiArIHZhbHVlKVxuICB9XG59XG5cbnZhciBFWFBMSUNBQkxFX1RZUEVTID0gWydzdHJpbmcnLCAnbnVtYmVyJywgJ2Jvb2xlYW4nXTtcbmZ1bmN0aW9uIGlzRXhwbGljYWJsZSAodmFsdWUpIHtcbiAgcmV0dXJuIEVYUExJQ0FCTEVfVFlQRVMuc29tZShmdW5jdGlvbiAoZWxlbSkgeyByZXR1cm4gdmFsdWUudG9Mb3dlckNhc2UoKSA9PT0gZWxlbTsgfSlcbn1cblxuZnVuY3Rpb24gaXNCb29sZWFuICgpIHtcbiAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICByZXR1cm4gYXJncy5zb21lKGZ1bmN0aW9uIChlbGVtKSB7IHJldHVybiBlbGVtLnRvTG93ZXJDYXNlKCkgPT09ICdib29sZWFuJzsgfSlcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGhhbmRsZUVycm9yIChlcnIsIHZtLCBpbmZvKSB7XG4gIC8vIERlYWN0aXZhdGUgZGVwcyB0cmFja2luZyB3aGlsZSBwcm9jZXNzaW5nIGVycm9yIGhhbmRsZXIgdG8gYXZvaWQgcG9zc2libGUgaW5maW5pdGUgcmVuZGVyaW5nLlxuICAvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS92dWVqcy92dWV4L2lzc3Vlcy8xNTA1XG4gIHB1c2hUYXJnZXQoKTtcbiAgdHJ5IHtcbiAgICBpZiAodm0pIHtcbiAgICAgIHZhciBjdXIgPSB2bTtcbiAgICAgIHdoaWxlICgoY3VyID0gY3VyLiRwYXJlbnQpKSB7XG4gICAgICAgIHZhciBob29rcyA9IGN1ci4kb3B0aW9ucy5lcnJvckNhcHR1cmVkO1xuICAgICAgICBpZiAoaG9va3MpIHtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGhvb2tzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICB2YXIgY2FwdHVyZSA9IGhvb2tzW2ldLmNhbGwoY3VyLCBlcnIsIHZtLCBpbmZvKSA9PT0gZmFsc2U7XG4gICAgICAgICAgICAgIGlmIChjYXB0dXJlKSB7IHJldHVybiB9XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgIGdsb2JhbEhhbmRsZUVycm9yKGUsIGN1ciwgJ2Vycm9yQ2FwdHVyZWQgaG9vaycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBnbG9iYWxIYW5kbGVFcnJvcihlcnIsIHZtLCBpbmZvKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBwb3BUYXJnZXQoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbnZva2VXaXRoRXJyb3JIYW5kbGluZyAoXG4gIGhhbmRsZXIsXG4gIGNvbnRleHQsXG4gIGFyZ3MsXG4gIHZtLFxuICBpbmZvXG4pIHtcbiAgdmFyIHJlcztcbiAgdHJ5IHtcbiAgICByZXMgPSBhcmdzID8gaGFuZGxlci5hcHBseShjb250ZXh0LCBhcmdzKSA6IGhhbmRsZXIuY2FsbChjb250ZXh0KTtcbiAgICBpZiAocmVzICYmICFyZXMuX2lzVnVlICYmIGlzUHJvbWlzZShyZXMpICYmICFyZXMuX2hhbmRsZWQpIHtcbiAgICAgIHJlcy5jYXRjaChmdW5jdGlvbiAoZSkgeyByZXR1cm4gaGFuZGxlRXJyb3IoZSwgdm0sIGluZm8gKyBcIiAoUHJvbWlzZS9hc3luYylcIik7IH0pO1xuICAgICAgLy8gaXNzdWUgIzk1MTFcbiAgICAgIC8vIGF2b2lkIGNhdGNoIHRyaWdnZXJpbmcgbXVsdGlwbGUgdGltZXMgd2hlbiBuZXN0ZWQgY2FsbHNcbiAgICAgIHJlcy5faGFuZGxlZCA9IHRydWU7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgaGFuZGxlRXJyb3IoZSwgdm0sIGluZm8pO1xuICB9XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gZ2xvYmFsSGFuZGxlRXJyb3IgKGVyciwgdm0sIGluZm8pIHtcbiAgaWYgKGNvbmZpZy5lcnJvckhhbmRsZXIpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGNvbmZpZy5lcnJvckhhbmRsZXIuY2FsbChudWxsLCBlcnIsIHZtLCBpbmZvKVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIGlmIHRoZSB1c2VyIGludGVudGlvbmFsbHkgdGhyb3dzIHRoZSBvcmlnaW5hbCBlcnJvciBpbiB0aGUgaGFuZGxlcixcbiAgICAgIC8vIGRvIG5vdCBsb2cgaXQgdHdpY2VcbiAgICAgIGlmIChlICE9PSBlcnIpIHtcbiAgICAgICAgbG9nRXJyb3IoZSwgbnVsbCwgJ2NvbmZpZy5lcnJvckhhbmRsZXInKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgbG9nRXJyb3IoZXJyLCB2bSwgaW5mbyk7XG59XG5cbmZ1bmN0aW9uIGxvZ0Vycm9yIChlcnIsIHZtLCBpbmZvKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgd2FybigoXCJFcnJvciBpbiBcIiArIGluZm8gKyBcIjogXFxcIlwiICsgKGVyci50b1N0cmluZygpKSArIFwiXFxcIlwiKSwgdm0pO1xuICB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmICgoaW5Ccm93c2VyIHx8IGluV2VleCkgJiYgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgY29uc29sZS5lcnJvcihlcnIpO1xuICB9IGVsc2Uge1xuICAgIHRocm93IGVyclxuICB9XG59XG5cbi8qICAqL1xuXG52YXIgaXNVc2luZ01pY3JvVGFzayA9IGZhbHNlO1xuXG52YXIgY2FsbGJhY2tzID0gW107XG52YXIgcGVuZGluZyA9IGZhbHNlO1xuXG5mdW5jdGlvbiBmbHVzaENhbGxiYWNrcyAoKSB7XG4gIHBlbmRpbmcgPSBmYWxzZTtcbiAgdmFyIGNvcGllcyA9IGNhbGxiYWNrcy5zbGljZSgwKTtcbiAgY2FsbGJhY2tzLmxlbmd0aCA9IDA7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY29waWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29waWVzW2ldKCk7XG4gIH1cbn1cblxuLy8gSGVyZSB3ZSBoYXZlIGFzeW5jIGRlZmVycmluZyB3cmFwcGVycyB1c2luZyBtaWNyb3Rhc2tzLlxuLy8gSW4gMi41IHdlIHVzZWQgKG1hY3JvKSB0YXNrcyAoaW4gY29tYmluYXRpb24gd2l0aCBtaWNyb3Rhc2tzKS5cbi8vIEhvd2V2ZXIsIGl0IGhhcyBzdWJ0bGUgcHJvYmxlbXMgd2hlbiBzdGF0ZSBpcyBjaGFuZ2VkIHJpZ2h0IGJlZm9yZSByZXBhaW50XG4vLyAoZS5nLiAjNjgxMywgb3V0LWluIHRyYW5zaXRpb25zKS5cbi8vIEFsc28sIHVzaW5nIChtYWNybykgdGFza3MgaW4gZXZlbnQgaGFuZGxlciB3b3VsZCBjYXVzZSBzb21lIHdlaXJkIGJlaGF2aW9yc1xuLy8gdGhhdCBjYW5ub3QgYmUgY2lyY3VtdmVudGVkIChlLmcuICM3MTA5LCAjNzE1MywgIzc1NDYsICM3ODM0LCAjODEwOSkuXG4vLyBTbyB3ZSBub3cgdXNlIG1pY3JvdGFza3MgZXZlcnl3aGVyZSwgYWdhaW4uXG4vLyBBIG1ham9yIGRyYXdiYWNrIG9mIHRoaXMgdHJhZGVvZmYgaXMgdGhhdCB0aGVyZSBhcmUgc29tZSBzY2VuYXJpb3Ncbi8vIHdoZXJlIG1pY3JvdGFza3MgaGF2ZSB0b28gaGlnaCBhIHByaW9yaXR5IGFuZCBmaXJlIGluIGJldHdlZW4gc3VwcG9zZWRseVxuLy8gc2VxdWVudGlhbCBldmVudHMgKGUuZy4gIzQ1MjEsICM2NjkwLCB3aGljaCBoYXZlIHdvcmthcm91bmRzKVxuLy8gb3IgZXZlbiBiZXR3ZWVuIGJ1YmJsaW5nIG9mIHRoZSBzYW1lIGV2ZW50ICgjNjU2NikuXG52YXIgdGltZXJGdW5jO1xuXG4vLyBUaGUgbmV4dFRpY2sgYmVoYXZpb3IgbGV2ZXJhZ2VzIHRoZSBtaWNyb3Rhc2sgcXVldWUsIHdoaWNoIGNhbiBiZSBhY2Nlc3NlZFxuLy8gdmlhIGVpdGhlciBuYXRpdmUgUHJvbWlzZS50aGVuIG9yIE11dGF0aW9uT2JzZXJ2ZXIuXG4vLyBNdXRhdGlvbk9ic2VydmVyIGhhcyB3aWRlciBzdXBwb3J0LCBob3dldmVyIGl0IGlzIHNlcmlvdXNseSBidWdnZWQgaW5cbi8vIFVJV2ViVmlldyBpbiBpT1MgPj0gOS4zLjMgd2hlbiB0cmlnZ2VyZWQgaW4gdG91Y2ggZXZlbnQgaGFuZGxlcnMuIEl0XG4vLyBjb21wbGV0ZWx5IHN0b3BzIHdvcmtpbmcgYWZ0ZXIgdHJpZ2dlcmluZyBhIGZldyB0aW1lcy4uLiBzbywgaWYgbmF0aXZlXG4vLyBQcm9taXNlIGlzIGF2YWlsYWJsZSwgd2Ugd2lsbCB1c2UgaXQ6XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCwgJGZsb3ctZGlzYWJsZS1saW5lICovXG5pZiAodHlwZW9mIFByb21pc2UgIT09ICd1bmRlZmluZWQnICYmIGlzTmF0aXZlKFByb21pc2UpKSB7XG4gIHZhciBwID0gUHJvbWlzZS5yZXNvbHZlKCk7XG4gIHRpbWVyRnVuYyA9IGZ1bmN0aW9uICgpIHtcbiAgICBwLnRoZW4oZmx1c2hDYWxsYmFja3MpO1xuICAgIC8vIEluIHByb2JsZW1hdGljIFVJV2ViVmlld3MsIFByb21pc2UudGhlbiBkb2Vzbid0IGNvbXBsZXRlbHkgYnJlYWssIGJ1dFxuICAgIC8vIGl0IGNhbiBnZXQgc3R1Y2sgaW4gYSB3ZWlyZCBzdGF0ZSB3aGVyZSBjYWxsYmFja3MgYXJlIHB1c2hlZCBpbnRvIHRoZVxuICAgIC8vIG1pY3JvdGFzayBxdWV1ZSBidXQgdGhlIHF1ZXVlIGlzbid0IGJlaW5nIGZsdXNoZWQsIHVudGlsIHRoZSBicm93c2VyXG4gICAgLy8gbmVlZHMgdG8gZG8gc29tZSBvdGhlciB3b3JrLCBlLmcuIGhhbmRsZSBhIHRpbWVyLiBUaGVyZWZvcmUgd2UgY2FuXG4gICAgLy8gXCJmb3JjZVwiIHRoZSBtaWNyb3Rhc2sgcXVldWUgdG8gYmUgZmx1c2hlZCBieSBhZGRpbmcgYW4gZW1wdHkgdGltZXIuXG4gICAgaWYgKGlzSU9TKSB7IHNldFRpbWVvdXQobm9vcCk7IH1cbiAgfTtcbiAgaXNVc2luZ01pY3JvVGFzayA9IHRydWU7XG59IGVsc2UgaWYgKCFpc0lFICYmIHR5cGVvZiBNdXRhdGlvbk9ic2VydmVyICE9PSAndW5kZWZpbmVkJyAmJiAoXG4gIGlzTmF0aXZlKE11dGF0aW9uT2JzZXJ2ZXIpIHx8XG4gIC8vIFBoYW50b21KUyBhbmQgaU9TIDcueFxuICBNdXRhdGlvbk9ic2VydmVyLnRvU3RyaW5nKCkgPT09ICdbb2JqZWN0IE11dGF0aW9uT2JzZXJ2ZXJDb25zdHJ1Y3Rvcl0nXG4pKSB7XG4gIC8vIFVzZSBNdXRhdGlvbk9ic2VydmVyIHdoZXJlIG5hdGl2ZSBQcm9taXNlIGlzIG5vdCBhdmFpbGFibGUsXG4gIC8vIGUuZy4gUGhhbnRvbUpTLCBpT1M3LCBBbmRyb2lkIDQuNFxuICAvLyAoIzY0NjYgTXV0YXRpb25PYnNlcnZlciBpcyB1bnJlbGlhYmxlIGluIElFMTEpXG4gIHZhciBjb3VudGVyID0gMTtcbiAgdmFyIG9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoZmx1c2hDYWxsYmFja3MpO1xuICB2YXIgdGV4dE5vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShTdHJpbmcoY291bnRlcikpO1xuICBvYnNlcnZlci5vYnNlcnZlKHRleHROb2RlLCB7XG4gICAgY2hhcmFjdGVyRGF0YTogdHJ1ZVxuICB9KTtcbiAgdGltZXJGdW5jID0gZnVuY3Rpb24gKCkge1xuICAgIGNvdW50ZXIgPSAoY291bnRlciArIDEpICUgMjtcbiAgICB0ZXh0Tm9kZS5kYXRhID0gU3RyaW5nKGNvdW50ZXIpO1xuICB9O1xuICBpc1VzaW5nTWljcm9UYXNrID0gdHJ1ZTtcbn0gZWxzZSBpZiAodHlwZW9mIHNldEltbWVkaWF0ZSAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoc2V0SW1tZWRpYXRlKSkge1xuICAvLyBGYWxsYmFjayB0byBzZXRJbW1lZGlhdGUuXG4gIC8vIFRlY2huaWNhbGx5IGl0IGxldmVyYWdlcyB0aGUgKG1hY3JvKSB0YXNrIHF1ZXVlLFxuICAvLyBidXQgaXQgaXMgc3RpbGwgYSBiZXR0ZXIgY2hvaWNlIHRoYW4gc2V0VGltZW91dC5cbiAgdGltZXJGdW5jID0gZnVuY3Rpb24gKCkge1xuICAgIHNldEltbWVkaWF0ZShmbHVzaENhbGxiYWNrcyk7XG4gIH07XG59IGVsc2Uge1xuICAvLyBGYWxsYmFjayB0byBzZXRUaW1lb3V0LlxuICB0aW1lckZ1bmMgPSBmdW5jdGlvbiAoKSB7XG4gICAgc2V0VGltZW91dChmbHVzaENhbGxiYWNrcywgMCk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIG5leHRUaWNrIChjYiwgY3R4KSB7XG4gIHZhciBfcmVzb2x2ZTtcbiAgY2FsbGJhY2tzLnB1c2goZnVuY3Rpb24gKCkge1xuICAgIGlmIChjYikge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY2IuY2FsbChjdHgpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBoYW5kbGVFcnJvcihlLCBjdHgsICduZXh0VGljaycpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoX3Jlc29sdmUpIHtcbiAgICAgIF9yZXNvbHZlKGN0eCk7XG4gICAgfVxuICB9KTtcbiAgaWYgKCFwZW5kaW5nKSB7XG4gICAgcGVuZGluZyA9IHRydWU7XG4gICAgdGltZXJGdW5jKCk7XG4gIH1cbiAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gIGlmICghY2IgJiYgdHlwZW9mIFByb21pc2UgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICBfcmVzb2x2ZSA9IHJlc29sdmU7XG4gICAgfSlcbiAgfVxufVxuXG4vKiAgKi9cblxuLyogbm90IHR5cGUgY2hlY2tpbmcgdGhpcyBmaWxlIGJlY2F1c2UgZmxvdyBkb2Vzbid0IHBsYXkgd2VsbCB3aXRoIFByb3h5ICovXG5cbnZhciBpbml0UHJveHk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBhbGxvd2VkR2xvYmFscyA9IG1ha2VNYXAoXG4gICAgJ0luZmluaXR5LHVuZGVmaW5lZCxOYU4saXNGaW5pdGUsaXNOYU4sJyArXG4gICAgJ3BhcnNlRmxvYXQscGFyc2VJbnQsZGVjb2RlVVJJLGRlY29kZVVSSUNvbXBvbmVudCxlbmNvZGVVUkksZW5jb2RlVVJJQ29tcG9uZW50LCcgK1xuICAgICdNYXRoLE51bWJlcixEYXRlLEFycmF5LE9iamVjdCxCb29sZWFuLFN0cmluZyxSZWdFeHAsTWFwLFNldCxKU09OLEludGwsQmlnSW50LCcgK1xuICAgICdyZXF1aXJlJyAvLyBmb3IgV2VicGFjay9Ccm93c2VyaWZ5XG4gICk7XG5cbiAgdmFyIHdhcm5Ob25QcmVzZW50ID0gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7XG4gICAgd2FybihcbiAgICAgIFwiUHJvcGVydHkgb3IgbWV0aG9kIFxcXCJcIiArIGtleSArIFwiXFxcIiBpcyBub3QgZGVmaW5lZCBvbiB0aGUgaW5zdGFuY2UgYnV0IFwiICtcbiAgICAgICdyZWZlcmVuY2VkIGR1cmluZyByZW5kZXIuIE1ha2Ugc3VyZSB0aGF0IHRoaXMgcHJvcGVydHkgaXMgcmVhY3RpdmUsICcgK1xuICAgICAgJ2VpdGhlciBpbiB0aGUgZGF0YSBvcHRpb24sIG9yIGZvciBjbGFzcy1iYXNlZCBjb21wb25lbnRzLCBieSAnICtcbiAgICAgICdpbml0aWFsaXppbmcgdGhlIHByb3BlcnR5LiAnICtcbiAgICAgICdTZWU6IGh0dHBzOi8vdnVlanMub3JnL3YyL2d1aWRlL3JlYWN0aXZpdHkuaHRtbCNEZWNsYXJpbmctUmVhY3RpdmUtUHJvcGVydGllcy4nLFxuICAgICAgdGFyZ2V0XG4gICAgKTtcbiAgfTtcblxuICB2YXIgd2FyblJlc2VydmVkUHJlZml4ID0gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7XG4gICAgd2FybihcbiAgICAgIFwiUHJvcGVydHkgXFxcIlwiICsga2V5ICsgXCJcXFwiIG11c3QgYmUgYWNjZXNzZWQgd2l0aCBcXFwiJGRhdGEuXCIgKyBrZXkgKyBcIlxcXCIgYmVjYXVzZSBcIiArXG4gICAgICAncHJvcGVydGllcyBzdGFydGluZyB3aXRoIFwiJFwiIG9yIFwiX1wiIGFyZSBub3QgcHJveGllZCBpbiB0aGUgVnVlIGluc3RhbmNlIHRvICcgK1xuICAgICAgJ3ByZXZlbnQgY29uZmxpY3RzIHdpdGggVnVlIGludGVybmFscy4gJyArXG4gICAgICAnU2VlOiBodHRwczovL3Z1ZWpzLm9yZy92Mi9hcGkvI2RhdGEnLFxuICAgICAgdGFyZ2V0XG4gICAgKTtcbiAgfTtcblxuICB2YXIgaGFzUHJveHkgPVxuICAgIHR5cGVvZiBQcm94eSAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoUHJveHkpO1xuXG4gIGlmIChoYXNQcm94eSkge1xuICAgIHZhciBpc0J1aWx0SW5Nb2RpZmllciA9IG1ha2VNYXAoJ3N0b3AscHJldmVudCxzZWxmLGN0cmwsc2hpZnQsYWx0LG1ldGEsZXhhY3QnKTtcbiAgICBjb25maWcua2V5Q29kZXMgPSBuZXcgUHJveHkoY29uZmlnLmtleUNvZGVzLCB7XG4gICAgICBzZXQ6IGZ1bmN0aW9uIHNldCAodGFyZ2V0LCBrZXksIHZhbHVlKSB7XG4gICAgICAgIGlmIChpc0J1aWx0SW5Nb2RpZmllcihrZXkpKSB7XG4gICAgICAgICAgd2FybigoXCJBdm9pZCBvdmVyd3JpdGluZyBidWlsdC1pbiBtb2RpZmllciBpbiBjb25maWcua2V5Q29kZXM6IC5cIiArIGtleSkpO1xuICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gdmFsdWU7XG4gICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgdmFyIGhhc0hhbmRsZXIgPSB7XG4gICAgaGFzOiBmdW5jdGlvbiBoYXMgKHRhcmdldCwga2V5KSB7XG4gICAgICB2YXIgaGFzID0ga2V5IGluIHRhcmdldDtcbiAgICAgIHZhciBpc0FsbG93ZWQgPSBhbGxvd2VkR2xvYmFscyhrZXkpIHx8XG4gICAgICAgICh0eXBlb2Yga2V5ID09PSAnc3RyaW5nJyAmJiBrZXkuY2hhckF0KDApID09PSAnXycgJiYgIShrZXkgaW4gdGFyZ2V0LiRkYXRhKSk7XG4gICAgICBpZiAoIWhhcyAmJiAhaXNBbGxvd2VkKSB7XG4gICAgICAgIGlmIChrZXkgaW4gdGFyZ2V0LiRkYXRhKSB7IHdhcm5SZXNlcnZlZFByZWZpeCh0YXJnZXQsIGtleSk7IH1cbiAgICAgICAgZWxzZSB7IHdhcm5Ob25QcmVzZW50KHRhcmdldCwga2V5KTsgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGhhcyB8fCAhaXNBbGxvd2VkXG4gICAgfVxuICB9O1xuXG4gIHZhciBnZXRIYW5kbGVyID0ge1xuICAgIGdldDogZnVuY3Rpb24gZ2V0ICh0YXJnZXQsIGtleSkge1xuICAgICAgaWYgKHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnICYmICEoa2V5IGluIHRhcmdldCkpIHtcbiAgICAgICAgaWYgKGtleSBpbiB0YXJnZXQuJGRhdGEpIHsgd2FyblJlc2VydmVkUHJlZml4KHRhcmdldCwga2V5KTsgfVxuICAgICAgICBlbHNlIHsgd2Fybk5vblByZXNlbnQodGFyZ2V0LCBrZXkpOyB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdGFyZ2V0W2tleV1cbiAgICB9XG4gIH07XG5cbiAgaW5pdFByb3h5ID0gZnVuY3Rpb24gaW5pdFByb3h5ICh2bSkge1xuICAgIGlmIChoYXNQcm94eSkge1xuICAgICAgLy8gZGV0ZXJtaW5lIHdoaWNoIHByb3h5IGhhbmRsZXIgdG8gdXNlXG4gICAgICB2YXIgb3B0aW9ucyA9IHZtLiRvcHRpb25zO1xuICAgICAgdmFyIGhhbmRsZXJzID0gb3B0aW9ucy5yZW5kZXIgJiYgb3B0aW9ucy5yZW5kZXIuX3dpdGhTdHJpcHBlZFxuICAgICAgICA/IGdldEhhbmRsZXJcbiAgICAgICAgOiBoYXNIYW5kbGVyO1xuICAgICAgdm0uX3JlbmRlclByb3h5ID0gbmV3IFByb3h5KHZtLCBoYW5kbGVycyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZtLl9yZW5kZXJQcm94eSA9IHZtO1xuICAgIH1cbiAgfTtcbn1cblxuLyogICovXG5cbnZhciBzZWVuT2JqZWN0cyA9IG5ldyBfU2V0KCk7XG5cbi8qKlxuICogUmVjdXJzaXZlbHkgdHJhdmVyc2UgYW4gb2JqZWN0IHRvIGV2b2tlIGFsbCBjb252ZXJ0ZWRcbiAqIGdldHRlcnMsIHNvIHRoYXQgZXZlcnkgbmVzdGVkIHByb3BlcnR5IGluc2lkZSB0aGUgb2JqZWN0XG4gKiBpcyBjb2xsZWN0ZWQgYXMgYSBcImRlZXBcIiBkZXBlbmRlbmN5LlxuICovXG5mdW5jdGlvbiB0cmF2ZXJzZSAodmFsKSB7XG4gIF90cmF2ZXJzZSh2YWwsIHNlZW5PYmplY3RzKTtcbiAgc2Vlbk9iamVjdHMuY2xlYXIoKTtcbn1cblxuZnVuY3Rpb24gX3RyYXZlcnNlICh2YWwsIHNlZW4pIHtcbiAgdmFyIGksIGtleXM7XG4gIHZhciBpc0EgPSBBcnJheS5pc0FycmF5KHZhbCk7XG4gIGlmICgoIWlzQSAmJiAhaXNPYmplY3QodmFsKSkgfHwgT2JqZWN0LmlzRnJvemVuKHZhbCkgfHwgdmFsIGluc3RhbmNlb2YgVk5vZGUpIHtcbiAgICByZXR1cm5cbiAgfVxuICBpZiAodmFsLl9fb2JfXykge1xuICAgIHZhciBkZXBJZCA9IHZhbC5fX29iX18uZGVwLmlkO1xuICAgIGlmIChzZWVuLmhhcyhkZXBJZCkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBzZWVuLmFkZChkZXBJZCk7XG4gIH1cbiAgaWYgKGlzQSkge1xuICAgIGkgPSB2YWwubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHsgX3RyYXZlcnNlKHZhbFtpXSwgc2Vlbik7IH1cbiAgfSBlbHNlIHtcbiAgICBrZXlzID0gT2JqZWN0LmtleXModmFsKTtcbiAgICBpID0ga2V5cy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkgeyBfdHJhdmVyc2UodmFsW2tleXNbaV1dLCBzZWVuKTsgfVxuICB9XG59XG5cbnZhciBtYXJrO1xudmFyIG1lYXN1cmU7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBwZXJmID0gaW5Ccm93c2VyICYmIHdpbmRvdy5wZXJmb3JtYW5jZTtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChcbiAgICBwZXJmICYmXG4gICAgcGVyZi5tYXJrICYmXG4gICAgcGVyZi5tZWFzdXJlICYmXG4gICAgcGVyZi5jbGVhck1hcmtzICYmXG4gICAgcGVyZi5jbGVhck1lYXN1cmVzXG4gICkge1xuICAgIG1hcmsgPSBmdW5jdGlvbiAodGFnKSB7IHJldHVybiBwZXJmLm1hcmsodGFnKTsgfTtcbiAgICBtZWFzdXJlID0gZnVuY3Rpb24gKG5hbWUsIHN0YXJ0VGFnLCBlbmRUYWcpIHtcbiAgICAgIHBlcmYubWVhc3VyZShuYW1lLCBzdGFydFRhZywgZW5kVGFnKTtcbiAgICAgIHBlcmYuY2xlYXJNYXJrcyhzdGFydFRhZyk7XG4gICAgICBwZXJmLmNsZWFyTWFya3MoZW5kVGFnKTtcbiAgICAgIC8vIHBlcmYuY2xlYXJNZWFzdXJlcyhuYW1lKVxuICAgIH07XG4gIH1cbn1cblxuLyogICovXG5cbnZhciBub3JtYWxpemVFdmVudCA9IGNhY2hlZChmdW5jdGlvbiAobmFtZSkge1xuICB2YXIgcGFzc2l2ZSA9IG5hbWUuY2hhckF0KDApID09PSAnJic7XG4gIG5hbWUgPSBwYXNzaXZlID8gbmFtZS5zbGljZSgxKSA6IG5hbWU7XG4gIHZhciBvbmNlJCQxID0gbmFtZS5jaGFyQXQoMCkgPT09ICd+JzsgLy8gUHJlZml4ZWQgbGFzdCwgY2hlY2tlZCBmaXJzdFxuICBuYW1lID0gb25jZSQkMSA/IG5hbWUuc2xpY2UoMSkgOiBuYW1lO1xuICB2YXIgY2FwdHVyZSA9IG5hbWUuY2hhckF0KDApID09PSAnISc7XG4gIG5hbWUgPSBjYXB0dXJlID8gbmFtZS5zbGljZSgxKSA6IG5hbWU7XG4gIHJldHVybiB7XG4gICAgbmFtZTogbmFtZSxcbiAgICBvbmNlOiBvbmNlJCQxLFxuICAgIGNhcHR1cmU6IGNhcHR1cmUsXG4gICAgcGFzc2l2ZTogcGFzc2l2ZVxuICB9XG59KTtcblxuZnVuY3Rpb24gY3JlYXRlRm5JbnZva2VyIChmbnMsIHZtKSB7XG4gIGZ1bmN0aW9uIGludm9rZXIgKCkge1xuICAgIHZhciBhcmd1bWVudHMkMSA9IGFyZ3VtZW50cztcblxuICAgIHZhciBmbnMgPSBpbnZva2VyLmZucztcbiAgICBpZiAoQXJyYXkuaXNBcnJheShmbnMpKSB7XG4gICAgICB2YXIgY2xvbmVkID0gZm5zLnNsaWNlKCk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNsb25lZC5sZW5ndGg7IGkrKykge1xuICAgICAgICBpbnZva2VXaXRoRXJyb3JIYW5kbGluZyhjbG9uZWRbaV0sIG51bGwsIGFyZ3VtZW50cyQxLCB2bSwgXCJ2LW9uIGhhbmRsZXJcIik7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHJldHVybiBoYW5kbGVyIHJldHVybiB2YWx1ZSBmb3Igc2luZ2xlIGhhbmRsZXJzXG4gICAgICByZXR1cm4gaW52b2tlV2l0aEVycm9ySGFuZGxpbmcoZm5zLCBudWxsLCBhcmd1bWVudHMsIHZtLCBcInYtb24gaGFuZGxlclwiKVxuICAgIH1cbiAgfVxuICBpbnZva2VyLmZucyA9IGZucztcbiAgcmV0dXJuIGludm9rZXJcbn1cblxuZnVuY3Rpb24gdXBkYXRlTGlzdGVuZXJzIChcbiAgb24sXG4gIG9sZE9uLFxuICBhZGQsXG4gIHJlbW92ZSQkMSxcbiAgY3JlYXRlT25jZUhhbmRsZXIsXG4gIHZtXG4pIHtcbiAgdmFyIG5hbWUsIGRlZiQkMSwgY3VyLCBvbGQsIGV2ZW50O1xuICBmb3IgKG5hbWUgaW4gb24pIHtcbiAgICBkZWYkJDEgPSBjdXIgPSBvbltuYW1lXTtcbiAgICBvbGQgPSBvbGRPbltuYW1lXTtcbiAgICBldmVudCA9IG5vcm1hbGl6ZUV2ZW50KG5hbWUpO1xuICAgIGlmIChpc1VuZGVmKGN1cikpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgXCJJbnZhbGlkIGhhbmRsZXIgZm9yIGV2ZW50IFxcXCJcIiArIChldmVudC5uYW1lKSArIFwiXFxcIjogZ290IFwiICsgU3RyaW5nKGN1ciksXG4gICAgICAgIHZtXG4gICAgICApO1xuICAgIH0gZWxzZSBpZiAoaXNVbmRlZihvbGQpKSB7XG4gICAgICBpZiAoaXNVbmRlZihjdXIuZm5zKSkge1xuICAgICAgICBjdXIgPSBvbltuYW1lXSA9IGNyZWF0ZUZuSW52b2tlcihjdXIsIHZtKTtcbiAgICAgIH1cbiAgICAgIGlmIChpc1RydWUoZXZlbnQub25jZSkpIHtcbiAgICAgICAgY3VyID0gb25bbmFtZV0gPSBjcmVhdGVPbmNlSGFuZGxlcihldmVudC5uYW1lLCBjdXIsIGV2ZW50LmNhcHR1cmUpO1xuICAgICAgfVxuICAgICAgYWRkKGV2ZW50Lm5hbWUsIGN1ciwgZXZlbnQuY2FwdHVyZSwgZXZlbnQucGFzc2l2ZSwgZXZlbnQucGFyYW1zKTtcbiAgICB9IGVsc2UgaWYgKGN1ciAhPT0gb2xkKSB7XG4gICAgICBvbGQuZm5zID0gY3VyO1xuICAgICAgb25bbmFtZV0gPSBvbGQ7XG4gICAgfVxuICB9XG4gIGZvciAobmFtZSBpbiBvbGRPbikge1xuICAgIGlmIChpc1VuZGVmKG9uW25hbWVdKSkge1xuICAgICAgZXZlbnQgPSBub3JtYWxpemVFdmVudChuYW1lKTtcbiAgICAgIHJlbW92ZSQkMShldmVudC5uYW1lLCBvbGRPbltuYW1lXSwgZXZlbnQuY2FwdHVyZSk7XG4gICAgfVxuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBtZXJnZVZOb2RlSG9vayAoZGVmLCBob29rS2V5LCBob29rKSB7XG4gIGlmIChkZWYgaW5zdGFuY2VvZiBWTm9kZSkge1xuICAgIGRlZiA9IGRlZi5kYXRhLmhvb2sgfHwgKGRlZi5kYXRhLmhvb2sgPSB7fSk7XG4gIH1cbiAgdmFyIGludm9rZXI7XG4gIHZhciBvbGRIb29rID0gZGVmW2hvb2tLZXldO1xuXG4gIGZ1bmN0aW9uIHdyYXBwZWRIb29rICgpIHtcbiAgICBob29rLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgLy8gaW1wb3J0YW50OiByZW1vdmUgbWVyZ2VkIGhvb2sgdG8gZW5zdXJlIGl0J3MgY2FsbGVkIG9ubHkgb25jZVxuICAgIC8vIGFuZCBwcmV2ZW50IG1lbW9yeSBsZWFrXG4gICAgcmVtb3ZlKGludm9rZXIuZm5zLCB3cmFwcGVkSG9vayk7XG4gIH1cblxuICBpZiAoaXNVbmRlZihvbGRIb29rKSkge1xuICAgIC8vIG5vIGV4aXN0aW5nIGhvb2tcbiAgICBpbnZva2VyID0gY3JlYXRlRm5JbnZva2VyKFt3cmFwcGVkSG9va10pO1xuICB9IGVsc2Uge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChpc0RlZihvbGRIb29rLmZucykgJiYgaXNUcnVlKG9sZEhvb2subWVyZ2VkKSkge1xuICAgICAgLy8gYWxyZWFkeSBhIG1lcmdlZCBpbnZva2VyXG4gICAgICBpbnZva2VyID0gb2xkSG9vaztcbiAgICAgIGludm9rZXIuZm5zLnB1c2god3JhcHBlZEhvb2spO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBleGlzdGluZyBwbGFpbiBob29rXG4gICAgICBpbnZva2VyID0gY3JlYXRlRm5JbnZva2VyKFtvbGRIb29rLCB3cmFwcGVkSG9va10pO1xuICAgIH1cbiAgfVxuXG4gIGludm9rZXIubWVyZ2VkID0gdHJ1ZTtcbiAgZGVmW2hvb2tLZXldID0gaW52b2tlcjtcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGV4dHJhY3RQcm9wc0Zyb21WTm9kZURhdGEgKFxuICBkYXRhLFxuICBDdG9yLFxuICB0YWdcbikge1xuICAvLyB3ZSBhcmUgb25seSBleHRyYWN0aW5nIHJhdyB2YWx1ZXMgaGVyZS5cbiAgLy8gdmFsaWRhdGlvbiBhbmQgZGVmYXVsdCB2YWx1ZXMgYXJlIGhhbmRsZWQgaW4gdGhlIGNoaWxkXG4gIC8vIGNvbXBvbmVudCBpdHNlbGYuXG4gIHZhciBwcm9wT3B0aW9ucyA9IEN0b3Iub3B0aW9ucy5wcm9wcztcbiAgaWYgKGlzVW5kZWYocHJvcE9wdGlvbnMpKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIHJlcyA9IHt9O1xuICB2YXIgYXR0cnMgPSBkYXRhLmF0dHJzO1xuICB2YXIgcHJvcHMgPSBkYXRhLnByb3BzO1xuICBpZiAoaXNEZWYoYXR0cnMpIHx8IGlzRGVmKHByb3BzKSkge1xuICAgIGZvciAodmFyIGtleSBpbiBwcm9wT3B0aW9ucykge1xuICAgICAgdmFyIGFsdEtleSA9IGh5cGhlbmF0ZShrZXkpO1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgdmFyIGtleUluTG93ZXJDYXNlID0ga2V5LnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBrZXkgIT09IGtleUluTG93ZXJDYXNlICYmXG4gICAgICAgICAgYXR0cnMgJiYgaGFzT3duKGF0dHJzLCBrZXlJbkxvd2VyQ2FzZSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgdGlwKFxuICAgICAgICAgICAgXCJQcm9wIFxcXCJcIiArIGtleUluTG93ZXJDYXNlICsgXCJcXFwiIGlzIHBhc3NlZCB0byBjb21wb25lbnQgXCIgK1xuICAgICAgICAgICAgKGZvcm1hdENvbXBvbmVudE5hbWUodGFnIHx8IEN0b3IpKSArIFwiLCBidXQgdGhlIGRlY2xhcmVkIHByb3AgbmFtZSBpc1wiICtcbiAgICAgICAgICAgIFwiIFxcXCJcIiArIGtleSArIFwiXFxcIi4gXCIgK1xuICAgICAgICAgICAgXCJOb3RlIHRoYXQgSFRNTCBhdHRyaWJ1dGVzIGFyZSBjYXNlLWluc2Vuc2l0aXZlIGFuZCBjYW1lbENhc2VkIFwiICtcbiAgICAgICAgICAgIFwicHJvcHMgbmVlZCB0byB1c2UgdGhlaXIga2ViYWItY2FzZSBlcXVpdmFsZW50cyB3aGVuIHVzaW5nIGluLURPTSBcIiArXG4gICAgICAgICAgICBcInRlbXBsYXRlcy4gWW91IHNob3VsZCBwcm9iYWJseSB1c2UgXFxcIlwiICsgYWx0S2V5ICsgXCJcXFwiIGluc3RlYWQgb2YgXFxcIlwiICsga2V5ICsgXCJcXFwiLlwiXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY2hlY2tQcm9wKHJlcywgcHJvcHMsIGtleSwgYWx0S2V5LCB0cnVlKSB8fFxuICAgICAgY2hlY2tQcm9wKHJlcywgYXR0cnMsIGtleSwgYWx0S2V5LCBmYWxzZSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gY2hlY2tQcm9wIChcbiAgcmVzLFxuICBoYXNoLFxuICBrZXksXG4gIGFsdEtleSxcbiAgcHJlc2VydmVcbikge1xuICBpZiAoaXNEZWYoaGFzaCkpIHtcbiAgICBpZiAoaGFzT3duKGhhc2gsIGtleSkpIHtcbiAgICAgIHJlc1trZXldID0gaGFzaFtrZXldO1xuICAgICAgaWYgKCFwcmVzZXJ2ZSkge1xuICAgICAgICBkZWxldGUgaGFzaFtrZXldO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWVcbiAgICB9IGVsc2UgaWYgKGhhc093bihoYXNoLCBhbHRLZXkpKSB7XG4gICAgICByZXNba2V5XSA9IGhhc2hbYWx0S2V5XTtcbiAgICAgIGlmICghcHJlc2VydmUpIHtcbiAgICAgICAgZGVsZXRlIGhhc2hbYWx0S2V5XTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZVxufVxuXG4vKiAgKi9cblxuLy8gVGhlIHRlbXBsYXRlIGNvbXBpbGVyIGF0dGVtcHRzIHRvIG1pbmltaXplIHRoZSBuZWVkIGZvciBub3JtYWxpemF0aW9uIGJ5XG4vLyBzdGF0aWNhbGx5IGFuYWx5emluZyB0aGUgdGVtcGxhdGUgYXQgY29tcGlsZSB0aW1lLlxuLy9cbi8vIEZvciBwbGFpbiBIVE1MIG1hcmt1cCwgbm9ybWFsaXphdGlvbiBjYW4gYmUgY29tcGxldGVseSBza2lwcGVkIGJlY2F1c2UgdGhlXG4vLyBnZW5lcmF0ZWQgcmVuZGVyIGZ1bmN0aW9uIGlzIGd1YXJhbnRlZWQgdG8gcmV0dXJuIEFycmF5PFZOb2RlPi4gVGhlcmUgYXJlXG4vLyB0d28gY2FzZXMgd2hlcmUgZXh0cmEgbm9ybWFsaXphdGlvbiBpcyBuZWVkZWQ6XG5cbi8vIDEuIFdoZW4gdGhlIGNoaWxkcmVuIGNvbnRhaW5zIGNvbXBvbmVudHMgLSBiZWNhdXNlIGEgZnVuY3Rpb25hbCBjb21wb25lbnRcbi8vIG1heSByZXR1cm4gYW4gQXJyYXkgaW5zdGVhZCBvZiBhIHNpbmdsZSByb290LiBJbiB0aGlzIGNhc2UsIGp1c3QgYSBzaW1wbGVcbi8vIG5vcm1hbGl6YXRpb24gaXMgbmVlZGVkIC0gaWYgYW55IGNoaWxkIGlzIGFuIEFycmF5LCB3ZSBmbGF0dGVuIHRoZSB3aG9sZVxuLy8gdGhpbmcgd2l0aCBBcnJheS5wcm90b3R5cGUuY29uY2F0LiBJdCBpcyBndWFyYW50ZWVkIHRvIGJlIG9ubHkgMS1sZXZlbCBkZWVwXG4vLyBiZWNhdXNlIGZ1bmN0aW9uYWwgY29tcG9uZW50cyBhbHJlYWR5IG5vcm1hbGl6ZSB0aGVpciBvd24gY2hpbGRyZW4uXG5mdW5jdGlvbiBzaW1wbGVOb3JtYWxpemVDaGlsZHJlbiAoY2hpbGRyZW4pIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgIGlmIChBcnJheS5pc0FycmF5KGNoaWxkcmVuW2ldKSkge1xuICAgICAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5jb25jYXQuYXBwbHkoW10sIGNoaWxkcmVuKVxuICAgIH1cbiAgfVxuICByZXR1cm4gY2hpbGRyZW5cbn1cblxuLy8gMi4gV2hlbiB0aGUgY2hpbGRyZW4gY29udGFpbnMgY29uc3RydWN0cyB0aGF0IGFsd2F5cyBnZW5lcmF0ZWQgbmVzdGVkIEFycmF5cyxcbi8vIGUuZy4gPHRlbXBsYXRlPiwgPHNsb3Q+LCB2LWZvciwgb3Igd2hlbiB0aGUgY2hpbGRyZW4gaXMgcHJvdmlkZWQgYnkgdXNlclxuLy8gd2l0aCBoYW5kLXdyaXR0ZW4gcmVuZGVyIGZ1bmN0aW9ucyAvIEpTWC4gSW4gc3VjaCBjYXNlcyBhIGZ1bGwgbm9ybWFsaXphdGlvblxuLy8gaXMgbmVlZGVkIHRvIGNhdGVyIHRvIGFsbCBwb3NzaWJsZSB0eXBlcyBvZiBjaGlsZHJlbiB2YWx1ZXMuXG5mdW5jdGlvbiBub3JtYWxpemVDaGlsZHJlbiAoY2hpbGRyZW4pIHtcbiAgcmV0dXJuIGlzUHJpbWl0aXZlKGNoaWxkcmVuKVxuICAgID8gW2NyZWF0ZVRleHRWTm9kZShjaGlsZHJlbildXG4gICAgOiBBcnJheS5pc0FycmF5KGNoaWxkcmVuKVxuICAgICAgPyBub3JtYWxpemVBcnJheUNoaWxkcmVuKGNoaWxkcmVuKVxuICAgICAgOiB1bmRlZmluZWRcbn1cblxuZnVuY3Rpb24gaXNUZXh0Tm9kZSAobm9kZSkge1xuICByZXR1cm4gaXNEZWYobm9kZSkgJiYgaXNEZWYobm9kZS50ZXh0KSAmJiBpc0ZhbHNlKG5vZGUuaXNDb21tZW50KVxufVxuXG5mdW5jdGlvbiBub3JtYWxpemVBcnJheUNoaWxkcmVuIChjaGlsZHJlbiwgbmVzdGVkSW5kZXgpIHtcbiAgdmFyIHJlcyA9IFtdO1xuICB2YXIgaSwgYywgbGFzdEluZGV4LCBsYXN0O1xuICBmb3IgKGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICBjID0gY2hpbGRyZW5baV07XG4gICAgaWYgKGlzVW5kZWYoYykgfHwgdHlwZW9mIGMgPT09ICdib29sZWFuJykgeyBjb250aW51ZSB9XG4gICAgbGFzdEluZGV4ID0gcmVzLmxlbmd0aCAtIDE7XG4gICAgbGFzdCA9IHJlc1tsYXN0SW5kZXhdO1xuICAgIC8vICBuZXN0ZWRcbiAgICBpZiAoQXJyYXkuaXNBcnJheShjKSkge1xuICAgICAgaWYgKGMubGVuZ3RoID4gMCkge1xuICAgICAgICBjID0gbm9ybWFsaXplQXJyYXlDaGlsZHJlbihjLCAoKG5lc3RlZEluZGV4IHx8ICcnKSArIFwiX1wiICsgaSkpO1xuICAgICAgICAvLyBtZXJnZSBhZGphY2VudCB0ZXh0IG5vZGVzXG4gICAgICAgIGlmIChpc1RleHROb2RlKGNbMF0pICYmIGlzVGV4dE5vZGUobGFzdCkpIHtcbiAgICAgICAgICByZXNbbGFzdEluZGV4XSA9IGNyZWF0ZVRleHRWTm9kZShsYXN0LnRleHQgKyAoY1swXSkudGV4dCk7XG4gICAgICAgICAgYy5zaGlmdCgpO1xuICAgICAgICB9XG4gICAgICAgIHJlcy5wdXNoLmFwcGx5KHJlcywgYyk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpc1ByaW1pdGl2ZShjKSkge1xuICAgICAgaWYgKGlzVGV4dE5vZGUobGFzdCkpIHtcbiAgICAgICAgLy8gbWVyZ2UgYWRqYWNlbnQgdGV4dCBub2Rlc1xuICAgICAgICAvLyB0aGlzIGlzIG5lY2Vzc2FyeSBmb3IgU1NSIGh5ZHJhdGlvbiBiZWNhdXNlIHRleHQgbm9kZXMgYXJlXG4gICAgICAgIC8vIGVzc2VudGlhbGx5IG1lcmdlZCB3aGVuIHJlbmRlcmVkIHRvIEhUTUwgc3RyaW5nc1xuICAgICAgICByZXNbbGFzdEluZGV4XSA9IGNyZWF0ZVRleHRWTm9kZShsYXN0LnRleHQgKyBjKTtcbiAgICAgIH0gZWxzZSBpZiAoYyAhPT0gJycpIHtcbiAgICAgICAgLy8gY29udmVydCBwcmltaXRpdmUgdG8gdm5vZGVcbiAgICAgICAgcmVzLnB1c2goY3JlYXRlVGV4dFZOb2RlKGMpKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGlzVGV4dE5vZGUoYykgJiYgaXNUZXh0Tm9kZShsYXN0KSkge1xuICAgICAgICAvLyBtZXJnZSBhZGphY2VudCB0ZXh0IG5vZGVzXG4gICAgICAgIHJlc1tsYXN0SW5kZXhdID0gY3JlYXRlVGV4dFZOb2RlKGxhc3QudGV4dCArIGMudGV4dCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBkZWZhdWx0IGtleSBmb3IgbmVzdGVkIGFycmF5IGNoaWxkcmVuIChsaWtlbHkgZ2VuZXJhdGVkIGJ5IHYtZm9yKVxuICAgICAgICBpZiAoaXNUcnVlKGNoaWxkcmVuLl9pc1ZMaXN0KSAmJlxuICAgICAgICAgIGlzRGVmKGMudGFnKSAmJlxuICAgICAgICAgIGlzVW5kZWYoYy5rZXkpICYmXG4gICAgICAgICAgaXNEZWYobmVzdGVkSW5kZXgpKSB7XG4gICAgICAgICAgYy5rZXkgPSBcIl9fdmxpc3RcIiArIG5lc3RlZEluZGV4ICsgXCJfXCIgKyBpICsgXCJfX1wiO1xuICAgICAgICB9XG4gICAgICAgIHJlcy5wdXNoKGMpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0UHJvdmlkZSAodm0pIHtcbiAgdmFyIHByb3ZpZGUgPSB2bS4kb3B0aW9ucy5wcm92aWRlO1xuICBpZiAocHJvdmlkZSkge1xuICAgIHZtLl9wcm92aWRlZCA9IHR5cGVvZiBwcm92aWRlID09PSAnZnVuY3Rpb24nXG4gICAgICA/IHByb3ZpZGUuY2FsbCh2bSlcbiAgICAgIDogcHJvdmlkZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbml0SW5qZWN0aW9ucyAodm0pIHtcbiAgdmFyIHJlc3VsdCA9IHJlc29sdmVJbmplY3Qodm0uJG9wdGlvbnMuaW5qZWN0LCB2bSk7XG4gIGlmIChyZXN1bHQpIHtcbiAgICB0b2dnbGVPYnNlcnZpbmcoZmFsc2UpO1xuICAgIE9iamVjdC5rZXlzKHJlc3VsdCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgZGVmaW5lUmVhY3RpdmUkJDEodm0sIGtleSwgcmVzdWx0W2tleV0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgXCJBdm9pZCBtdXRhdGluZyBhbiBpbmplY3RlZCB2YWx1ZSBkaXJlY3RseSBzaW5jZSB0aGUgY2hhbmdlcyB3aWxsIGJlIFwiICtcbiAgICAgICAgICAgIFwib3ZlcndyaXR0ZW4gd2hlbmV2ZXIgdGhlIHByb3ZpZGVkIGNvbXBvbmVudCByZS1yZW5kZXJzLiBcIiArXG4gICAgICAgICAgICBcImluamVjdGlvbiBiZWluZyBtdXRhdGVkOiBcXFwiXCIgKyBrZXkgKyBcIlxcXCJcIixcbiAgICAgICAgICAgIHZtXG4gICAgICAgICAgKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkZWZpbmVSZWFjdGl2ZSQkMSh2bSwga2V5LCByZXN1bHRba2V5XSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgdG9nZ2xlT2JzZXJ2aW5nKHRydWUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlc29sdmVJbmplY3QgKGluamVjdCwgdm0pIHtcbiAgaWYgKGluamVjdCkge1xuICAgIC8vIGluamVjdCBpcyA6YW55IGJlY2F1c2UgZmxvdyBpcyBub3Qgc21hcnQgZW5vdWdoIHRvIGZpZ3VyZSBvdXQgY2FjaGVkXG4gICAgdmFyIHJlc3VsdCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdmFyIGtleXMgPSBoYXNTeW1ib2xcbiAgICAgID8gUmVmbGVjdC5vd25LZXlzKGluamVjdClcbiAgICAgIDogT2JqZWN0LmtleXMoaW5qZWN0KTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgICAvLyAjNjU3NCBpbiBjYXNlIHRoZSBpbmplY3Qgb2JqZWN0IGlzIG9ic2VydmVkLi4uXG4gICAgICBpZiAoa2V5ID09PSAnX19vYl9fJykgeyBjb250aW51ZSB9XG4gICAgICB2YXIgcHJvdmlkZUtleSA9IGluamVjdFtrZXldLmZyb207XG4gICAgICB2YXIgc291cmNlID0gdm07XG4gICAgICB3aGlsZSAoc291cmNlKSB7XG4gICAgICAgIGlmIChzb3VyY2UuX3Byb3ZpZGVkICYmIGhhc093bihzb3VyY2UuX3Byb3ZpZGVkLCBwcm92aWRlS2V5KSkge1xuICAgICAgICAgIHJlc3VsdFtrZXldID0gc291cmNlLl9wcm92aWRlZFtwcm92aWRlS2V5XTtcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICAgIHNvdXJjZSA9IHNvdXJjZS4kcGFyZW50O1xuICAgICAgfVxuICAgICAgaWYgKCFzb3VyY2UpIHtcbiAgICAgICAgaWYgKCdkZWZhdWx0JyBpbiBpbmplY3Rba2V5XSkge1xuICAgICAgICAgIHZhciBwcm92aWRlRGVmYXVsdCA9IGluamVjdFtrZXldLmRlZmF1bHQ7XG4gICAgICAgICAgcmVzdWx0W2tleV0gPSB0eXBlb2YgcHJvdmlkZURlZmF1bHQgPT09ICdmdW5jdGlvbidcbiAgICAgICAgICAgID8gcHJvdmlkZURlZmF1bHQuY2FsbCh2bSlcbiAgICAgICAgICAgIDogcHJvdmlkZURlZmF1bHQ7XG4gICAgICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIHdhcm4oKFwiSW5qZWN0aW9uIFxcXCJcIiArIGtleSArIFwiXFxcIiBub3QgZm91bmRcIiksIHZtKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0XG4gIH1cbn1cblxuLyogICovXG5cblxuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciByZXNvbHZpbmcgcmF3IGNoaWxkcmVuIFZOb2RlcyBpbnRvIGEgc2xvdCBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIHJlc29sdmVTbG90cyAoXG4gIGNoaWxkcmVuLFxuICBjb250ZXh0XG4pIHtcbiAgaWYgKCFjaGlsZHJlbiB8fCAhY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgcmV0dXJuIHt9XG4gIH1cbiAgdmFyIHNsb3RzID0ge307XG4gIGZvciAodmFyIGkgPSAwLCBsID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgdmFyIGNoaWxkID0gY2hpbGRyZW5baV07XG4gICAgdmFyIGRhdGEgPSBjaGlsZC5kYXRhO1xuICAgIC8vIHJlbW92ZSBzbG90IGF0dHJpYnV0ZSBpZiB0aGUgbm9kZSBpcyByZXNvbHZlZCBhcyBhIFZ1ZSBzbG90IG5vZGVcbiAgICBpZiAoZGF0YSAmJiBkYXRhLmF0dHJzICYmIGRhdGEuYXR0cnMuc2xvdCkge1xuICAgICAgZGVsZXRlIGRhdGEuYXR0cnMuc2xvdDtcbiAgICB9XG4gICAgLy8gbmFtZWQgc2xvdHMgc2hvdWxkIG9ubHkgYmUgcmVzcGVjdGVkIGlmIHRoZSB2bm9kZSB3YXMgcmVuZGVyZWQgaW4gdGhlXG4gICAgLy8gc2FtZSBjb250ZXh0LlxuICAgIGlmICgoY2hpbGQuY29udGV4dCA9PT0gY29udGV4dCB8fCBjaGlsZC5mbkNvbnRleHQgPT09IGNvbnRleHQpICYmXG4gICAgICBkYXRhICYmIGRhdGEuc2xvdCAhPSBudWxsXG4gICAgKSB7XG4gICAgICB2YXIgbmFtZSA9IGRhdGEuc2xvdDtcbiAgICAgIHZhciBzbG90ID0gKHNsb3RzW25hbWVdIHx8IChzbG90c1tuYW1lXSA9IFtdKSk7XG4gICAgICBpZiAoY2hpbGQudGFnID09PSAndGVtcGxhdGUnKSB7XG4gICAgICAgIHNsb3QucHVzaC5hcHBseShzbG90LCBjaGlsZC5jaGlsZHJlbiB8fCBbXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzbG90LnB1c2goY2hpbGQpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAoc2xvdHMuZGVmYXVsdCB8fCAoc2xvdHMuZGVmYXVsdCA9IFtdKSkucHVzaChjaGlsZCk7XG4gICAgfVxuICB9XG4gIC8vIGlnbm9yZSBzbG90cyB0aGF0IGNvbnRhaW5zIG9ubHkgd2hpdGVzcGFjZVxuICBmb3IgKHZhciBuYW1lJDEgaW4gc2xvdHMpIHtcbiAgICBpZiAoc2xvdHNbbmFtZSQxXS5ldmVyeShpc1doaXRlc3BhY2UpKSB7XG4gICAgICBkZWxldGUgc2xvdHNbbmFtZSQxXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHNsb3RzXG59XG5cbmZ1bmN0aW9uIGlzV2hpdGVzcGFjZSAobm9kZSkge1xuICByZXR1cm4gKG5vZGUuaXNDb21tZW50ICYmICFub2RlLmFzeW5jRmFjdG9yeSkgfHwgbm9kZS50ZXh0ID09PSAnICdcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGlzQXN5bmNQbGFjZWhvbGRlciAobm9kZSkge1xuICByZXR1cm4gbm9kZS5pc0NvbW1lbnQgJiYgbm9kZS5hc3luY0ZhY3Rvcnlcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZVNjb3BlZFNsb3RzIChcbiAgc2xvdHMsXG4gIG5vcm1hbFNsb3RzLFxuICBwcmV2U2xvdHNcbikge1xuICB2YXIgcmVzO1xuICB2YXIgaGFzTm9ybWFsU2xvdHMgPSBPYmplY3Qua2V5cyhub3JtYWxTbG90cykubGVuZ3RoID4gMDtcbiAgdmFyIGlzU3RhYmxlID0gc2xvdHMgPyAhIXNsb3RzLiRzdGFibGUgOiAhaGFzTm9ybWFsU2xvdHM7XG4gIHZhciBrZXkgPSBzbG90cyAmJiBzbG90cy4ka2V5O1xuICBpZiAoIXNsb3RzKSB7XG4gICAgcmVzID0ge307XG4gIH0gZWxzZSBpZiAoc2xvdHMuX25vcm1hbGl6ZWQpIHtcbiAgICAvLyBmYXN0IHBhdGggMTogY2hpbGQgY29tcG9uZW50IHJlLXJlbmRlciBvbmx5LCBwYXJlbnQgZGlkIG5vdCBjaGFuZ2VcbiAgICByZXR1cm4gc2xvdHMuX25vcm1hbGl6ZWRcbiAgfSBlbHNlIGlmIChcbiAgICBpc1N0YWJsZSAmJlxuICAgIHByZXZTbG90cyAmJlxuICAgIHByZXZTbG90cyAhPT0gZW1wdHlPYmplY3QgJiZcbiAgICBrZXkgPT09IHByZXZTbG90cy4ka2V5ICYmXG4gICAgIWhhc05vcm1hbFNsb3RzICYmXG4gICAgIXByZXZTbG90cy4kaGFzTm9ybWFsXG4gICkge1xuICAgIC8vIGZhc3QgcGF0aCAyOiBzdGFibGUgc2NvcGVkIHNsb3RzIHcvIG5vIG5vcm1hbCBzbG90cyB0byBwcm94eSxcbiAgICAvLyBvbmx5IG5lZWQgdG8gbm9ybWFsaXplIG9uY2VcbiAgICByZXR1cm4gcHJldlNsb3RzXG4gIH0gZWxzZSB7XG4gICAgcmVzID0ge307XG4gICAgZm9yICh2YXIga2V5JDEgaW4gc2xvdHMpIHtcbiAgICAgIGlmIChzbG90c1trZXkkMV0gJiYga2V5JDFbMF0gIT09ICckJykge1xuICAgICAgICByZXNba2V5JDFdID0gbm9ybWFsaXplU2NvcGVkU2xvdChub3JtYWxTbG90cywga2V5JDEsIHNsb3RzW2tleSQxXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8vIGV4cG9zZSBub3JtYWwgc2xvdHMgb24gc2NvcGVkU2xvdHNcbiAgZm9yICh2YXIga2V5JDIgaW4gbm9ybWFsU2xvdHMpIHtcbiAgICBpZiAoIShrZXkkMiBpbiByZXMpKSB7XG4gICAgICByZXNba2V5JDJdID0gcHJveHlOb3JtYWxTbG90KG5vcm1hbFNsb3RzLCBrZXkkMik7XG4gICAgfVxuICB9XG4gIC8vIGF2b3JpYXogc2VlbXMgdG8gbW9jayBhIG5vbi1leHRlbnNpYmxlICRzY29wZWRTbG90cyBvYmplY3RcbiAgLy8gYW5kIHdoZW4gdGhhdCBpcyBwYXNzZWQgZG93biB0aGlzIHdvdWxkIGNhdXNlIGFuIGVycm9yXG4gIGlmIChzbG90cyAmJiBPYmplY3QuaXNFeHRlbnNpYmxlKHNsb3RzKSkge1xuICAgIChzbG90cykuX25vcm1hbGl6ZWQgPSByZXM7XG4gIH1cbiAgZGVmKHJlcywgJyRzdGFibGUnLCBpc1N0YWJsZSk7XG4gIGRlZihyZXMsICcka2V5Jywga2V5KTtcbiAgZGVmKHJlcywgJyRoYXNOb3JtYWwnLCBoYXNOb3JtYWxTbG90cyk7XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplU2NvcGVkU2xvdChub3JtYWxTbG90cywga2V5LCBmbikge1xuICB2YXIgbm9ybWFsaXplZCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcmVzID0gYXJndW1lbnRzLmxlbmd0aCA/IGZuLmFwcGx5KG51bGwsIGFyZ3VtZW50cykgOiBmbih7fSk7XG4gICAgcmVzID0gcmVzICYmIHR5cGVvZiByZXMgPT09ICdvYmplY3QnICYmICFBcnJheS5pc0FycmF5KHJlcylcbiAgICAgID8gW3Jlc10gLy8gc2luZ2xlIHZub2RlXG4gICAgICA6IG5vcm1hbGl6ZUNoaWxkcmVuKHJlcyk7XG4gICAgdmFyIHZub2RlID0gcmVzICYmIHJlc1swXTtcbiAgICByZXR1cm4gcmVzICYmIChcbiAgICAgICF2bm9kZSB8fFxuICAgICAgKHJlcy5sZW5ndGggPT09IDEgJiYgdm5vZGUuaXNDb21tZW50ICYmICFpc0FzeW5jUGxhY2Vob2xkZXIodm5vZGUpKSAvLyAjOTY1OCwgIzEwMzkxXG4gICAgKSA/IHVuZGVmaW5lZFxuICAgICAgOiByZXNcbiAgfTtcbiAgLy8gdGhpcyBpcyBhIHNsb3QgdXNpbmcgdGhlIG5ldyB2LXNsb3Qgc3ludGF4IHdpdGhvdXQgc2NvcGUuIGFsdGhvdWdoIGl0IGlzXG4gIC8vIGNvbXBpbGVkIGFzIGEgc2NvcGVkIHNsb3QsIHJlbmRlciBmbiB1c2VycyB3b3VsZCBleHBlY3QgaXQgdG8gYmUgcHJlc2VudFxuICAvLyBvbiB0aGlzLiRzbG90cyBiZWNhdXNlIHRoZSB1c2FnZSBpcyBzZW1hbnRpY2FsbHkgYSBub3JtYWwgc2xvdC5cbiAgaWYgKGZuLnByb3h5KSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5vcm1hbFNsb3RzLCBrZXksIHtcbiAgICAgIGdldDogbm9ybWFsaXplZCxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gbm9ybWFsaXplZFxufVxuXG5mdW5jdGlvbiBwcm94eU5vcm1hbFNsb3Qoc2xvdHMsIGtleSkge1xuICByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gc2xvdHNba2V5XTsgfVxufVxuXG4vKiAgKi9cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgcmVuZGVyaW5nIHYtZm9yIGxpc3RzLlxuICovXG5mdW5jdGlvbiByZW5kZXJMaXN0IChcbiAgdmFsLFxuICByZW5kZXJcbikge1xuICB2YXIgcmV0LCBpLCBsLCBrZXlzLCBrZXk7XG4gIGlmIChBcnJheS5pc0FycmF5KHZhbCkgfHwgdHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHtcbiAgICByZXQgPSBuZXcgQXJyYXkodmFsLmxlbmd0aCk7XG4gICAgZm9yIChpID0gMCwgbCA9IHZhbC5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHJldFtpXSA9IHJlbmRlcih2YWxbaV0sIGkpO1xuICAgIH1cbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIHJldCA9IG5ldyBBcnJheSh2YWwpO1xuICAgIGZvciAoaSA9IDA7IGkgPCB2YWw7IGkrKykge1xuICAgICAgcmV0W2ldID0gcmVuZGVyKGkgKyAxLCBpKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNPYmplY3QodmFsKSkge1xuICAgIGlmIChoYXNTeW1ib2wgJiYgdmFsW1N5bWJvbC5pdGVyYXRvcl0pIHtcbiAgICAgIHJldCA9IFtdO1xuICAgICAgdmFyIGl0ZXJhdG9yID0gdmFsW1N5bWJvbC5pdGVyYXRvcl0oKTtcbiAgICAgIHZhciByZXN1bHQgPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgICB3aGlsZSAoIXJlc3VsdC5kb25lKSB7XG4gICAgICAgIHJldC5wdXNoKHJlbmRlcihyZXN1bHQudmFsdWUsIHJldC5sZW5ndGgpKTtcbiAgICAgICAgcmVzdWx0ID0gaXRlcmF0b3IubmV4dCgpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBrZXlzID0gT2JqZWN0LmtleXModmFsKTtcbiAgICAgIHJldCA9IG5ldyBBcnJheShrZXlzLmxlbmd0aCk7XG4gICAgICBmb3IgKGkgPSAwLCBsID0ga2V5cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgcmV0W2ldID0gcmVuZGVyKHZhbFtrZXldLCBrZXksIGkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAoIWlzRGVmKHJldCkpIHtcbiAgICByZXQgPSBbXTtcbiAgfVxuICAocmV0KS5faXNWTGlzdCA9IHRydWU7XG4gIHJldHVybiByZXRcbn1cblxuLyogICovXG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIHJlbmRlcmluZyA8c2xvdD5cbiAqL1xuZnVuY3Rpb24gcmVuZGVyU2xvdCAoXG4gIG5hbWUsXG4gIGZhbGxiYWNrUmVuZGVyLFxuICBwcm9wcyxcbiAgYmluZE9iamVjdFxuKSB7XG4gIHZhciBzY29wZWRTbG90Rm4gPSB0aGlzLiRzY29wZWRTbG90c1tuYW1lXTtcbiAgdmFyIG5vZGVzO1xuICBpZiAoc2NvcGVkU2xvdEZuKSB7XG4gICAgLy8gc2NvcGVkIHNsb3RcbiAgICBwcm9wcyA9IHByb3BzIHx8IHt9O1xuICAgIGlmIChiaW5kT2JqZWN0KSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhaXNPYmplY3QoYmluZE9iamVjdCkpIHtcbiAgICAgICAgd2Fybignc2xvdCB2LWJpbmQgd2l0aG91dCBhcmd1bWVudCBleHBlY3RzIGFuIE9iamVjdCcsIHRoaXMpO1xuICAgICAgfVxuICAgICAgcHJvcHMgPSBleHRlbmQoZXh0ZW5kKHt9LCBiaW5kT2JqZWN0KSwgcHJvcHMpO1xuICAgIH1cbiAgICBub2RlcyA9XG4gICAgICBzY29wZWRTbG90Rm4ocHJvcHMpIHx8XG4gICAgICAodHlwZW9mIGZhbGxiYWNrUmVuZGVyID09PSAnZnVuY3Rpb24nID8gZmFsbGJhY2tSZW5kZXIoKSA6IGZhbGxiYWNrUmVuZGVyKTtcbiAgfSBlbHNlIHtcbiAgICBub2RlcyA9XG4gICAgICB0aGlzLiRzbG90c1tuYW1lXSB8fFxuICAgICAgKHR5cGVvZiBmYWxsYmFja1JlbmRlciA9PT0gJ2Z1bmN0aW9uJyA/IGZhbGxiYWNrUmVuZGVyKCkgOiBmYWxsYmFja1JlbmRlcik7XG4gIH1cblxuICB2YXIgdGFyZ2V0ID0gcHJvcHMgJiYgcHJvcHMuc2xvdDtcbiAgaWYgKHRhcmdldCkge1xuICAgIHJldHVybiB0aGlzLiRjcmVhdGVFbGVtZW50KCd0ZW1wbGF0ZScsIHsgc2xvdDogdGFyZ2V0IH0sIG5vZGVzKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBub2Rlc1xuICB9XG59XG5cbi8qICAqL1xuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciByZXNvbHZpbmcgZmlsdGVyc1xuICovXG5mdW5jdGlvbiByZXNvbHZlRmlsdGVyIChpZCkge1xuICByZXR1cm4gcmVzb2x2ZUFzc2V0KHRoaXMuJG9wdGlvbnMsICdmaWx0ZXJzJywgaWQsIHRydWUpIHx8IGlkZW50aXR5XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpc0tleU5vdE1hdGNoIChleHBlY3QsIGFjdHVhbCkge1xuICBpZiAoQXJyYXkuaXNBcnJheShleHBlY3QpKSB7XG4gICAgcmV0dXJuIGV4cGVjdC5pbmRleE9mKGFjdHVhbCkgPT09IC0xXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGV4cGVjdCAhPT0gYWN0dWFsXG4gIH1cbn1cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgY2hlY2tpbmcga2V5Q29kZXMgZnJvbSBjb25maWcuXG4gKiBleHBvc2VkIGFzIFZ1ZS5wcm90b3R5cGUuX2tcbiAqIHBhc3NpbmcgaW4gZXZlbnRLZXlOYW1lIGFzIGxhc3QgYXJndW1lbnQgc2VwYXJhdGVseSBmb3IgYmFja3dhcmRzIGNvbXBhdFxuICovXG5mdW5jdGlvbiBjaGVja0tleUNvZGVzIChcbiAgZXZlbnRLZXlDb2RlLFxuICBrZXksXG4gIGJ1aWx0SW5LZXlDb2RlLFxuICBldmVudEtleU5hbWUsXG4gIGJ1aWx0SW5LZXlOYW1lXG4pIHtcbiAgdmFyIG1hcHBlZEtleUNvZGUgPSBjb25maWcua2V5Q29kZXNba2V5XSB8fCBidWlsdEluS2V5Q29kZTtcbiAgaWYgKGJ1aWx0SW5LZXlOYW1lICYmIGV2ZW50S2V5TmFtZSAmJiAhY29uZmlnLmtleUNvZGVzW2tleV0pIHtcbiAgICByZXR1cm4gaXNLZXlOb3RNYXRjaChidWlsdEluS2V5TmFtZSwgZXZlbnRLZXlOYW1lKVxuICB9IGVsc2UgaWYgKG1hcHBlZEtleUNvZGUpIHtcbiAgICByZXR1cm4gaXNLZXlOb3RNYXRjaChtYXBwZWRLZXlDb2RlLCBldmVudEtleUNvZGUpXG4gIH0gZWxzZSBpZiAoZXZlbnRLZXlOYW1lKSB7XG4gICAgcmV0dXJuIGh5cGhlbmF0ZShldmVudEtleU5hbWUpICE9PSBrZXlcbiAgfVxuICByZXR1cm4gZXZlbnRLZXlDb2RlID09PSB1bmRlZmluZWRcbn1cblxuLyogICovXG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIG1lcmdpbmcgdi1iaW5kPVwib2JqZWN0XCIgaW50byBhIFZOb2RlJ3MgZGF0YS5cbiAqL1xuZnVuY3Rpb24gYmluZE9iamVjdFByb3BzIChcbiAgZGF0YSxcbiAgdGFnLFxuICB2YWx1ZSxcbiAgYXNQcm9wLFxuICBpc1N5bmNcbikge1xuICBpZiAodmFsdWUpIHtcbiAgICBpZiAoIWlzT2JqZWN0KHZhbHVlKSkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICAndi1iaW5kIHdpdGhvdXQgYXJndW1lbnQgZXhwZWN0cyBhbiBPYmplY3Qgb3IgQXJyYXkgdmFsdWUnLFxuICAgICAgICB0aGlzXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgdmFsdWUgPSB0b09iamVjdCh2YWx1ZSk7XG4gICAgICB9XG4gICAgICB2YXIgaGFzaDtcbiAgICAgIHZhciBsb29wID0gZnVuY3Rpb24gKCBrZXkgKSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBrZXkgPT09ICdjbGFzcycgfHxcbiAgICAgICAgICBrZXkgPT09ICdzdHlsZScgfHxcbiAgICAgICAgICBpc1Jlc2VydmVkQXR0cmlidXRlKGtleSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgaGFzaCA9IGRhdGE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHR5cGUgPSBkYXRhLmF0dHJzICYmIGRhdGEuYXR0cnMudHlwZTtcbiAgICAgICAgICBoYXNoID0gYXNQcm9wIHx8IGNvbmZpZy5tdXN0VXNlUHJvcCh0YWcsIHR5cGUsIGtleSlcbiAgICAgICAgICAgID8gZGF0YS5kb21Qcm9wcyB8fCAoZGF0YS5kb21Qcm9wcyA9IHt9KVxuICAgICAgICAgICAgOiBkYXRhLmF0dHJzIHx8IChkYXRhLmF0dHJzID0ge30pO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjYW1lbGl6ZWRLZXkgPSBjYW1lbGl6ZShrZXkpO1xuICAgICAgICB2YXIgaHlwaGVuYXRlZEtleSA9IGh5cGhlbmF0ZShrZXkpO1xuICAgICAgICBpZiAoIShjYW1lbGl6ZWRLZXkgaW4gaGFzaCkgJiYgIShoeXBoZW5hdGVkS2V5IGluIGhhc2gpKSB7XG4gICAgICAgICAgaGFzaFtrZXldID0gdmFsdWVba2V5XTtcblxuICAgICAgICAgIGlmIChpc1N5bmMpIHtcbiAgICAgICAgICAgIHZhciBvbiA9IGRhdGEub24gfHwgKGRhdGEub24gPSB7fSk7XG4gICAgICAgICAgICBvblsoXCJ1cGRhdGU6XCIgKyBrZXkpXSA9IGZ1bmN0aW9uICgkZXZlbnQpIHtcbiAgICAgICAgICAgICAgdmFsdWVba2V5XSA9ICRldmVudDtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIGxvb3AoIGtleSApO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZGF0YVxufVxuXG4vKiAgKi9cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgcmVuZGVyaW5nIHN0YXRpYyB0cmVlcy5cbiAqL1xuZnVuY3Rpb24gcmVuZGVyU3RhdGljIChcbiAgaW5kZXgsXG4gIGlzSW5Gb3Jcbikge1xuICB2YXIgY2FjaGVkID0gdGhpcy5fc3RhdGljVHJlZXMgfHwgKHRoaXMuX3N0YXRpY1RyZWVzID0gW10pO1xuICB2YXIgdHJlZSA9IGNhY2hlZFtpbmRleF07XG4gIC8vIGlmIGhhcyBhbHJlYWR5LXJlbmRlcmVkIHN0YXRpYyB0cmVlIGFuZCBub3QgaW5zaWRlIHYtZm9yLFxuICAvLyB3ZSBjYW4gcmV1c2UgdGhlIHNhbWUgdHJlZS5cbiAgaWYgKHRyZWUgJiYgIWlzSW5Gb3IpIHtcbiAgICByZXR1cm4gdHJlZVxuICB9XG4gIC8vIG90aGVyd2lzZSwgcmVuZGVyIGEgZnJlc2ggdHJlZS5cbiAgdHJlZSA9IGNhY2hlZFtpbmRleF0gPSB0aGlzLiRvcHRpb25zLnN0YXRpY1JlbmRlckZuc1tpbmRleF0uY2FsbChcbiAgICB0aGlzLl9yZW5kZXJQcm94eSxcbiAgICBudWxsLFxuICAgIHRoaXMgLy8gZm9yIHJlbmRlciBmbnMgZ2VuZXJhdGVkIGZvciBmdW5jdGlvbmFsIGNvbXBvbmVudCB0ZW1wbGF0ZXNcbiAgKTtcbiAgbWFya1N0YXRpYyh0cmVlLCAoXCJfX3N0YXRpY19fXCIgKyBpbmRleCksIGZhbHNlKTtcbiAgcmV0dXJuIHRyZWVcbn1cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3Igdi1vbmNlLlxuICogRWZmZWN0aXZlbHkgaXQgbWVhbnMgbWFya2luZyB0aGUgbm9kZSBhcyBzdGF0aWMgd2l0aCBhIHVuaXF1ZSBrZXkuXG4gKi9cbmZ1bmN0aW9uIG1hcmtPbmNlIChcbiAgdHJlZSxcbiAgaW5kZXgsXG4gIGtleVxuKSB7XG4gIG1hcmtTdGF0aWModHJlZSwgKFwiX19vbmNlX19cIiArIGluZGV4ICsgKGtleSA/IChcIl9cIiArIGtleSkgOiBcIlwiKSksIHRydWUpO1xuICByZXR1cm4gdHJlZVxufVxuXG5mdW5jdGlvbiBtYXJrU3RhdGljIChcbiAgdHJlZSxcbiAga2V5LFxuICBpc09uY2Vcbikge1xuICBpZiAoQXJyYXkuaXNBcnJheSh0cmVlKSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdHJlZS5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHRyZWVbaV0gJiYgdHlwZW9mIHRyZWVbaV0gIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIG1hcmtTdGF0aWNOb2RlKHRyZWVbaV0sIChrZXkgKyBcIl9cIiArIGkpLCBpc09uY2UpO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBtYXJrU3RhdGljTm9kZSh0cmVlLCBrZXksIGlzT25jZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gbWFya1N0YXRpY05vZGUgKG5vZGUsIGtleSwgaXNPbmNlKSB7XG4gIG5vZGUuaXNTdGF0aWMgPSB0cnVlO1xuICBub2RlLmtleSA9IGtleTtcbiAgbm9kZS5pc09uY2UgPSBpc09uY2U7XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBiaW5kT2JqZWN0TGlzdGVuZXJzIChkYXRhLCB2YWx1ZSkge1xuICBpZiAodmFsdWUpIHtcbiAgICBpZiAoIWlzUGxhaW5PYmplY3QodmFsdWUpKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAgICd2LW9uIHdpdGhvdXQgYXJndW1lbnQgZXhwZWN0cyBhbiBPYmplY3QgdmFsdWUnLFxuICAgICAgICB0aGlzXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgb24gPSBkYXRhLm9uID0gZGF0YS5vbiA/IGV4dGVuZCh7fSwgZGF0YS5vbikgOiB7fTtcbiAgICAgIGZvciAodmFyIGtleSBpbiB2YWx1ZSkge1xuICAgICAgICB2YXIgZXhpc3RpbmcgPSBvbltrZXldO1xuICAgICAgICB2YXIgb3VycyA9IHZhbHVlW2tleV07XG4gICAgICAgIG9uW2tleV0gPSBleGlzdGluZyA/IFtdLmNvbmNhdChleGlzdGluZywgb3VycykgOiBvdXJzO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gZGF0YVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gcmVzb2x2ZVNjb3BlZFNsb3RzIChcbiAgZm5zLCAvLyBzZWUgZmxvdy92bm9kZVxuICByZXMsXG4gIC8vIHRoZSBmb2xsb3dpbmcgYXJlIGFkZGVkIGluIDIuNlxuICBoYXNEeW5hbWljS2V5cyxcbiAgY29udGVudEhhc2hLZXlcbikge1xuICByZXMgPSByZXMgfHwgeyAkc3RhYmxlOiAhaGFzRHluYW1pY0tleXMgfTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBmbnMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc2xvdCA9IGZuc1tpXTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShzbG90KSkge1xuICAgICAgcmVzb2x2ZVNjb3BlZFNsb3RzKHNsb3QsIHJlcywgaGFzRHluYW1pY0tleXMpO1xuICAgIH0gZWxzZSBpZiAoc2xvdCkge1xuICAgICAgLy8gbWFya2VyIGZvciByZXZlcnNlIHByb3h5aW5nIHYtc2xvdCB3aXRob3V0IHNjb3BlIG9uIHRoaXMuJHNsb3RzXG4gICAgICBpZiAoc2xvdC5wcm94eSkge1xuICAgICAgICBzbG90LmZuLnByb3h5ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJlc1tzbG90LmtleV0gPSBzbG90LmZuO1xuICAgIH1cbiAgfVxuICBpZiAoY29udGVudEhhc2hLZXkpIHtcbiAgICAocmVzKS4ka2V5ID0gY29udGVudEhhc2hLZXk7XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gYmluZER5bmFtaWNLZXlzIChiYXNlT2JqLCB2YWx1ZXMpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB2YWx1ZXMubGVuZ3RoOyBpICs9IDIpIHtcbiAgICB2YXIga2V5ID0gdmFsdWVzW2ldO1xuICAgIGlmICh0eXBlb2Yga2V5ID09PSAnc3RyaW5nJyAmJiBrZXkpIHtcbiAgICAgIGJhc2VPYmpbdmFsdWVzW2ldXSA9IHZhbHVlc1tpICsgMV07XG4gICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGtleSAhPT0gJycgJiYga2V5ICE9PSBudWxsKSB7XG4gICAgICAvLyBudWxsIGlzIGEgc3BlY2lhbCB2YWx1ZSBmb3IgZXhwbGljaXRseSByZW1vdmluZyBhIGJpbmRpbmdcbiAgICAgIHdhcm4oXG4gICAgICAgIChcIkludmFsaWQgdmFsdWUgZm9yIGR5bmFtaWMgZGlyZWN0aXZlIGFyZ3VtZW50IChleHBlY3RlZCBzdHJpbmcgb3IgbnVsbCk6IFwiICsga2V5KSxcbiAgICAgICAgdGhpc1xuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGJhc2VPYmpcbn1cblxuLy8gaGVscGVyIHRvIGR5bmFtaWNhbGx5IGFwcGVuZCBtb2RpZmllciBydW50aW1lIG1hcmtlcnMgdG8gZXZlbnQgbmFtZXMuXG4vLyBlbnN1cmUgb25seSBhcHBlbmQgd2hlbiB2YWx1ZSBpcyBhbHJlYWR5IHN0cmluZywgb3RoZXJ3aXNlIGl0IHdpbGwgYmUgY2FzdFxuLy8gdG8gc3RyaW5nIGFuZCBjYXVzZSB0aGUgdHlwZSBjaGVjayB0byBtaXNzLlxuZnVuY3Rpb24gcHJlcGVuZE1vZGlmaWVyICh2YWx1ZSwgc3ltYm9sKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnID8gc3ltYm9sICsgdmFsdWUgOiB2YWx1ZVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5zdGFsbFJlbmRlckhlbHBlcnMgKHRhcmdldCkge1xuICB0YXJnZXQuX28gPSBtYXJrT25jZTtcbiAgdGFyZ2V0Ll9uID0gdG9OdW1iZXI7XG4gIHRhcmdldC5fcyA9IHRvU3RyaW5nO1xuICB0YXJnZXQuX2wgPSByZW5kZXJMaXN0O1xuICB0YXJnZXQuX3QgPSByZW5kZXJTbG90O1xuICB0YXJnZXQuX3EgPSBsb29zZUVxdWFsO1xuICB0YXJnZXQuX2kgPSBsb29zZUluZGV4T2Y7XG4gIHRhcmdldC5fbSA9IHJlbmRlclN0YXRpYztcbiAgdGFyZ2V0Ll9mID0gcmVzb2x2ZUZpbHRlcjtcbiAgdGFyZ2V0Ll9rID0gY2hlY2tLZXlDb2RlcztcbiAgdGFyZ2V0Ll9iID0gYmluZE9iamVjdFByb3BzO1xuICB0YXJnZXQuX3YgPSBjcmVhdGVUZXh0Vk5vZGU7XG4gIHRhcmdldC5fZSA9IGNyZWF0ZUVtcHR5Vk5vZGU7XG4gIHRhcmdldC5fdSA9IHJlc29sdmVTY29wZWRTbG90cztcbiAgdGFyZ2V0Ll9nID0gYmluZE9iamVjdExpc3RlbmVycztcbiAgdGFyZ2V0Ll9kID0gYmluZER5bmFtaWNLZXlzO1xuICB0YXJnZXQuX3AgPSBwcmVwZW5kTW9kaWZpZXI7XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBGdW5jdGlvbmFsUmVuZGVyQ29udGV4dCAoXG4gIGRhdGEsXG4gIHByb3BzLFxuICBjaGlsZHJlbixcbiAgcGFyZW50LFxuICBDdG9yXG4pIHtcbiAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgdmFyIG9wdGlvbnMgPSBDdG9yLm9wdGlvbnM7XG4gIC8vIGVuc3VyZSB0aGUgY3JlYXRlRWxlbWVudCBmdW5jdGlvbiBpbiBmdW5jdGlvbmFsIGNvbXBvbmVudHNcbiAgLy8gZ2V0cyBhIHVuaXF1ZSBjb250ZXh0IC0gdGhpcyBpcyBuZWNlc3NhcnkgZm9yIGNvcnJlY3QgbmFtZWQgc2xvdCBjaGVja1xuICB2YXIgY29udGV4dFZtO1xuICBpZiAoaGFzT3duKHBhcmVudCwgJ191aWQnKSkge1xuICAgIGNvbnRleHRWbSA9IE9iamVjdC5jcmVhdGUocGFyZW50KTtcbiAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICBjb250ZXh0Vm0uX29yaWdpbmFsID0gcGFyZW50O1xuICB9IGVsc2Uge1xuICAgIC8vIHRoZSBjb250ZXh0IHZtIHBhc3NlZCBpbiBpcyBhIGZ1bmN0aW9uYWwgY29udGV4dCBhcyB3ZWxsLlxuICAgIC8vIGluIHRoaXMgY2FzZSB3ZSB3YW50IHRvIG1ha2Ugc3VyZSB3ZSBhcmUgYWJsZSB0byBnZXQgYSBob2xkIHRvIHRoZVxuICAgIC8vIHJlYWwgY29udGV4dCBpbnN0YW5jZS5cbiAgICBjb250ZXh0Vm0gPSBwYXJlbnQ7XG4gICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgcGFyZW50ID0gcGFyZW50Ll9vcmlnaW5hbDtcbiAgfVxuICB2YXIgaXNDb21waWxlZCA9IGlzVHJ1ZShvcHRpb25zLl9jb21waWxlZCk7XG4gIHZhciBuZWVkTm9ybWFsaXphdGlvbiA9ICFpc0NvbXBpbGVkO1xuXG4gIHRoaXMuZGF0YSA9IGRhdGE7XG4gIHRoaXMucHJvcHMgPSBwcm9wcztcbiAgdGhpcy5jaGlsZHJlbiA9IGNoaWxkcmVuO1xuICB0aGlzLnBhcmVudCA9IHBhcmVudDtcbiAgdGhpcy5saXN0ZW5lcnMgPSBkYXRhLm9uIHx8IGVtcHR5T2JqZWN0O1xuICB0aGlzLmluamVjdGlvbnMgPSByZXNvbHZlSW5qZWN0KG9wdGlvbnMuaW5qZWN0LCBwYXJlbnQpO1xuICB0aGlzLnNsb3RzID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICghdGhpcyQxLiRzbG90cykge1xuICAgICAgbm9ybWFsaXplU2NvcGVkU2xvdHMoXG4gICAgICAgIGRhdGEuc2NvcGVkU2xvdHMsXG4gICAgICAgIHRoaXMkMS4kc2xvdHMgPSByZXNvbHZlU2xvdHMoY2hpbGRyZW4sIHBhcmVudClcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzJDEuJHNsb3RzXG4gIH07XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdzY29wZWRTbG90cycsICh7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCAoKSB7XG4gICAgICByZXR1cm4gbm9ybWFsaXplU2NvcGVkU2xvdHMoZGF0YS5zY29wZWRTbG90cywgdGhpcy5zbG90cygpKVxuICAgIH1cbiAgfSkpO1xuXG4gIC8vIHN1cHBvcnQgZm9yIGNvbXBpbGVkIGZ1bmN0aW9uYWwgdGVtcGxhdGVcbiAgaWYgKGlzQ29tcGlsZWQpIHtcbiAgICAvLyBleHBvc2luZyAkb3B0aW9ucyBmb3IgcmVuZGVyU3RhdGljKClcbiAgICB0aGlzLiRvcHRpb25zID0gb3B0aW9ucztcbiAgICAvLyBwcmUtcmVzb2x2ZSBzbG90cyBmb3IgcmVuZGVyU2xvdCgpXG4gICAgdGhpcy4kc2xvdHMgPSB0aGlzLnNsb3RzKCk7XG4gICAgdGhpcy4kc2NvcGVkU2xvdHMgPSBub3JtYWxpemVTY29wZWRTbG90cyhkYXRhLnNjb3BlZFNsb3RzLCB0aGlzLiRzbG90cyk7XG4gIH1cblxuICBpZiAob3B0aW9ucy5fc2NvcGVJZCkge1xuICAgIHRoaXMuX2MgPSBmdW5jdGlvbiAoYSwgYiwgYywgZCkge1xuICAgICAgdmFyIHZub2RlID0gY3JlYXRlRWxlbWVudChjb250ZXh0Vm0sIGEsIGIsIGMsIGQsIG5lZWROb3JtYWxpemF0aW9uKTtcbiAgICAgIGlmICh2bm9kZSAmJiAhQXJyYXkuaXNBcnJheSh2bm9kZSkpIHtcbiAgICAgICAgdm5vZGUuZm5TY29wZUlkID0gb3B0aW9ucy5fc2NvcGVJZDtcbiAgICAgICAgdm5vZGUuZm5Db250ZXh0ID0gcGFyZW50O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZub2RlXG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLl9jID0gZnVuY3Rpb24gKGEsIGIsIGMsIGQpIHsgcmV0dXJuIGNyZWF0ZUVsZW1lbnQoY29udGV4dFZtLCBhLCBiLCBjLCBkLCBuZWVkTm9ybWFsaXphdGlvbik7IH07XG4gIH1cbn1cblxuaW5zdGFsbFJlbmRlckhlbHBlcnMoRnVuY3Rpb25hbFJlbmRlckNvbnRleHQucHJvdG90eXBlKTtcblxuZnVuY3Rpb24gY3JlYXRlRnVuY3Rpb25hbENvbXBvbmVudCAoXG4gIEN0b3IsXG4gIHByb3BzRGF0YSxcbiAgZGF0YSxcbiAgY29udGV4dFZtLFxuICBjaGlsZHJlblxuKSB7XG4gIHZhciBvcHRpb25zID0gQ3Rvci5vcHRpb25zO1xuICB2YXIgcHJvcHMgPSB7fTtcbiAgdmFyIHByb3BPcHRpb25zID0gb3B0aW9ucy5wcm9wcztcbiAgaWYgKGlzRGVmKHByb3BPcHRpb25zKSkge1xuICAgIGZvciAodmFyIGtleSBpbiBwcm9wT3B0aW9ucykge1xuICAgICAgcHJvcHNba2V5XSA9IHZhbGlkYXRlUHJvcChrZXksIHByb3BPcHRpb25zLCBwcm9wc0RhdGEgfHwgZW1wdHlPYmplY3QpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoaXNEZWYoZGF0YS5hdHRycykpIHsgbWVyZ2VQcm9wcyhwcm9wcywgZGF0YS5hdHRycyk7IH1cbiAgICBpZiAoaXNEZWYoZGF0YS5wcm9wcykpIHsgbWVyZ2VQcm9wcyhwcm9wcywgZGF0YS5wcm9wcyk7IH1cbiAgfVxuXG4gIHZhciByZW5kZXJDb250ZXh0ID0gbmV3IEZ1bmN0aW9uYWxSZW5kZXJDb250ZXh0KFxuICAgIGRhdGEsXG4gICAgcHJvcHMsXG4gICAgY2hpbGRyZW4sXG4gICAgY29udGV4dFZtLFxuICAgIEN0b3JcbiAgKTtcblxuICB2YXIgdm5vZGUgPSBvcHRpb25zLnJlbmRlci5jYWxsKG51bGwsIHJlbmRlckNvbnRleHQuX2MsIHJlbmRlckNvbnRleHQpO1xuXG4gIGlmICh2bm9kZSBpbnN0YW5jZW9mIFZOb2RlKSB7XG4gICAgcmV0dXJuIGNsb25lQW5kTWFya0Z1bmN0aW9uYWxSZXN1bHQodm5vZGUsIGRhdGEsIHJlbmRlckNvbnRleHQucGFyZW50LCBvcHRpb25zLCByZW5kZXJDb250ZXh0KVxuICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkodm5vZGUpKSB7XG4gICAgdmFyIHZub2RlcyA9IG5vcm1hbGl6ZUNoaWxkcmVuKHZub2RlKSB8fCBbXTtcbiAgICB2YXIgcmVzID0gbmV3IEFycmF5KHZub2Rlcy5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdm5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICByZXNbaV0gPSBjbG9uZUFuZE1hcmtGdW5jdGlvbmFsUmVzdWx0KHZub2Rlc1tpXSwgZGF0YSwgcmVuZGVyQ29udGV4dC5wYXJlbnQsIG9wdGlvbnMsIHJlbmRlckNvbnRleHQpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzXG4gIH1cbn1cblxuZnVuY3Rpb24gY2xvbmVBbmRNYXJrRnVuY3Rpb25hbFJlc3VsdCAodm5vZGUsIGRhdGEsIGNvbnRleHRWbSwgb3B0aW9ucywgcmVuZGVyQ29udGV4dCkge1xuICAvLyAjNzgxNyBjbG9uZSBub2RlIGJlZm9yZSBzZXR0aW5nIGZuQ29udGV4dCwgb3RoZXJ3aXNlIGlmIHRoZSBub2RlIGlzIHJldXNlZFxuICAvLyAoZS5nLiBpdCB3YXMgZnJvbSBhIGNhY2hlZCBub3JtYWwgc2xvdCkgdGhlIGZuQ29udGV4dCBjYXVzZXMgbmFtZWQgc2xvdHNcbiAgLy8gdGhhdCBzaG91bGQgbm90IGJlIG1hdGNoZWQgdG8gbWF0Y2guXG4gIHZhciBjbG9uZSA9IGNsb25lVk5vZGUodm5vZGUpO1xuICBjbG9uZS5mbkNvbnRleHQgPSBjb250ZXh0Vm07XG4gIGNsb25lLmZuT3B0aW9ucyA9IG9wdGlvbnM7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgKGNsb25lLmRldnRvb2xzTWV0YSA9IGNsb25lLmRldnRvb2xzTWV0YSB8fCB7fSkucmVuZGVyQ29udGV4dCA9IHJlbmRlckNvbnRleHQ7XG4gIH1cbiAgaWYgKGRhdGEuc2xvdCkge1xuICAgIChjbG9uZS5kYXRhIHx8IChjbG9uZS5kYXRhID0ge30pKS5zbG90ID0gZGF0YS5zbG90O1xuICB9XG4gIHJldHVybiBjbG9uZVxufVxuXG5mdW5jdGlvbiBtZXJnZVByb3BzICh0bywgZnJvbSkge1xuICBmb3IgKHZhciBrZXkgaW4gZnJvbSkge1xuICAgIHRvW2NhbWVsaXplKGtleSldID0gZnJvbVtrZXldO1xuICB9XG59XG5cbi8qICAqL1xuXG4vKiAgKi9cblxuLyogICovXG5cbi8qICAqL1xuXG4vLyBpbmxpbmUgaG9va3MgdG8gYmUgaW52b2tlZCBvbiBjb21wb25lbnQgVk5vZGVzIGR1cmluZyBwYXRjaFxudmFyIGNvbXBvbmVudFZOb2RlSG9va3MgPSB7XG4gIGluaXQ6IGZ1bmN0aW9uIGluaXQgKHZub2RlLCBoeWRyYXRpbmcpIHtcbiAgICBpZiAoXG4gICAgICB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSAmJlxuICAgICAgIXZub2RlLmNvbXBvbmVudEluc3RhbmNlLl9pc0Rlc3Ryb3llZCAmJlxuICAgICAgdm5vZGUuZGF0YS5rZWVwQWxpdmVcbiAgICApIHtcbiAgICAgIC8vIGtlcHQtYWxpdmUgY29tcG9uZW50cywgdHJlYXQgYXMgYSBwYXRjaFxuICAgICAgdmFyIG1vdW50ZWROb2RlID0gdm5vZGU7IC8vIHdvcmsgYXJvdW5kIGZsb3dcbiAgICAgIGNvbXBvbmVudFZOb2RlSG9va3MucHJlcGF0Y2gobW91bnRlZE5vZGUsIG1vdW50ZWROb2RlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGNoaWxkID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgPSBjcmVhdGVDb21wb25lbnRJbnN0YW5jZUZvclZub2RlKFxuICAgICAgICB2bm9kZSxcbiAgICAgICAgYWN0aXZlSW5zdGFuY2VcbiAgICAgICk7XG4gICAgICBjaGlsZC4kbW91bnQoaHlkcmF0aW5nID8gdm5vZGUuZWxtIDogdW5kZWZpbmVkLCBoeWRyYXRpbmcpO1xuICAgIH1cbiAgfSxcblxuICBwcmVwYXRjaDogZnVuY3Rpb24gcHJlcGF0Y2ggKG9sZFZub2RlLCB2bm9kZSkge1xuICAgIHZhciBvcHRpb25zID0gdm5vZGUuY29tcG9uZW50T3B0aW9ucztcbiAgICB2YXIgY2hpbGQgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSA9IG9sZFZub2RlLmNvbXBvbmVudEluc3RhbmNlO1xuICAgIHVwZGF0ZUNoaWxkQ29tcG9uZW50KFxuICAgICAgY2hpbGQsXG4gICAgICBvcHRpb25zLnByb3BzRGF0YSwgLy8gdXBkYXRlZCBwcm9wc1xuICAgICAgb3B0aW9ucy5saXN0ZW5lcnMsIC8vIHVwZGF0ZWQgbGlzdGVuZXJzXG4gICAgICB2bm9kZSwgLy8gbmV3IHBhcmVudCB2bm9kZVxuICAgICAgb3B0aW9ucy5jaGlsZHJlbiAvLyBuZXcgY2hpbGRyZW5cbiAgICApO1xuICB9LFxuXG4gIGluc2VydDogZnVuY3Rpb24gaW5zZXJ0ICh2bm9kZSkge1xuICAgIHZhciBjb250ZXh0ID0gdm5vZGUuY29udGV4dDtcbiAgICB2YXIgY29tcG9uZW50SW5zdGFuY2UgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZTtcbiAgICBpZiAoIWNvbXBvbmVudEluc3RhbmNlLl9pc01vdW50ZWQpIHtcbiAgICAgIGNvbXBvbmVudEluc3RhbmNlLl9pc01vdW50ZWQgPSB0cnVlO1xuICAgICAgY2FsbEhvb2soY29tcG9uZW50SW5zdGFuY2UsICdtb3VudGVkJyk7XG4gICAgfVxuICAgIGlmICh2bm9kZS5kYXRhLmtlZXBBbGl2ZSkge1xuICAgICAgaWYgKGNvbnRleHQuX2lzTW91bnRlZCkge1xuICAgICAgICAvLyB2dWUtcm91dGVyIzEyMTJcbiAgICAgICAgLy8gRHVyaW5nIHVwZGF0ZXMsIGEga2VwdC1hbGl2ZSBjb21wb25lbnQncyBjaGlsZCBjb21wb25lbnRzIG1heVxuICAgICAgICAvLyBjaGFuZ2UsIHNvIGRpcmVjdGx5IHdhbGtpbmcgdGhlIHRyZWUgaGVyZSBtYXkgY2FsbCBhY3RpdmF0ZWQgaG9va3NcbiAgICAgICAgLy8gb24gaW5jb3JyZWN0IGNoaWxkcmVuLiBJbnN0ZWFkIHdlIHB1c2ggdGhlbSBpbnRvIGEgcXVldWUgd2hpY2ggd2lsbFxuICAgICAgICAvLyBiZSBwcm9jZXNzZWQgYWZ0ZXIgdGhlIHdob2xlIHBhdGNoIHByb2Nlc3MgZW5kZWQuXG4gICAgICAgIHF1ZXVlQWN0aXZhdGVkQ29tcG9uZW50KGNvbXBvbmVudEluc3RhbmNlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFjdGl2YXRlQ2hpbGRDb21wb25lbnQoY29tcG9uZW50SW5zdGFuY2UsIHRydWUgLyogZGlyZWN0ICovKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSAodm5vZGUpIHtcbiAgICB2YXIgY29tcG9uZW50SW5zdGFuY2UgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZTtcbiAgICBpZiAoIWNvbXBvbmVudEluc3RhbmNlLl9pc0Rlc3Ryb3llZCkge1xuICAgICAgaWYgKCF2bm9kZS5kYXRhLmtlZXBBbGl2ZSkge1xuICAgICAgICBjb21wb25lbnRJbnN0YW5jZS4kZGVzdHJveSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVhY3RpdmF0ZUNoaWxkQ29tcG9uZW50KGNvbXBvbmVudEluc3RhbmNlLCB0cnVlIC8qIGRpcmVjdCAqLyk7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG52YXIgaG9va3NUb01lcmdlID0gT2JqZWN0LmtleXMoY29tcG9uZW50Vk5vZGVIb29rcyk7XG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbXBvbmVudCAoXG4gIEN0b3IsXG4gIGRhdGEsXG4gIGNvbnRleHQsXG4gIGNoaWxkcmVuLFxuICB0YWdcbikge1xuICBpZiAoaXNVbmRlZihDdG9yKSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIGJhc2VDdG9yID0gY29udGV4dC4kb3B0aW9ucy5fYmFzZTtcblxuICAvLyBwbGFpbiBvcHRpb25zIG9iamVjdDogdHVybiBpdCBpbnRvIGEgY29uc3RydWN0b3JcbiAgaWYgKGlzT2JqZWN0KEN0b3IpKSB7XG4gICAgQ3RvciA9IGJhc2VDdG9yLmV4dGVuZChDdG9yKTtcbiAgfVxuXG4gIC8vIGlmIGF0IHRoaXMgc3RhZ2UgaXQncyBub3QgYSBjb25zdHJ1Y3RvciBvciBhbiBhc3luYyBjb21wb25lbnQgZmFjdG9yeSxcbiAgLy8gcmVqZWN0LlxuICBpZiAodHlwZW9mIEN0b3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgd2FybigoXCJJbnZhbGlkIENvbXBvbmVudCBkZWZpbml0aW9uOiBcIiArIChTdHJpbmcoQ3RvcikpKSwgY29udGV4dCk7XG4gICAgfVxuICAgIHJldHVyblxuICB9XG5cbiAgLy8gYXN5bmMgY29tcG9uZW50XG4gIHZhciBhc3luY0ZhY3Rvcnk7XG4gIGlmIChpc1VuZGVmKEN0b3IuY2lkKSkge1xuICAgIGFzeW5jRmFjdG9yeSA9IEN0b3I7XG4gICAgQ3RvciA9IHJlc29sdmVBc3luY0NvbXBvbmVudChhc3luY0ZhY3RvcnksIGJhc2VDdG9yKTtcbiAgICBpZiAoQ3RvciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyByZXR1cm4gYSBwbGFjZWhvbGRlciBub2RlIGZvciBhc3luYyBjb21wb25lbnQsIHdoaWNoIGlzIHJlbmRlcmVkXG4gICAgICAvLyBhcyBhIGNvbW1lbnQgbm9kZSBidXQgcHJlc2VydmVzIGFsbCB0aGUgcmF3IGluZm9ybWF0aW9uIGZvciB0aGUgbm9kZS5cbiAgICAgIC8vIHRoZSBpbmZvcm1hdGlvbiB3aWxsIGJlIHVzZWQgZm9yIGFzeW5jIHNlcnZlci1yZW5kZXJpbmcgYW5kIGh5ZHJhdGlvbi5cbiAgICAgIHJldHVybiBjcmVhdGVBc3luY1BsYWNlaG9sZGVyKFxuICAgICAgICBhc3luY0ZhY3RvcnksXG4gICAgICAgIGRhdGEsXG4gICAgICAgIGNvbnRleHQsXG4gICAgICAgIGNoaWxkcmVuLFxuICAgICAgICB0YWdcbiAgICAgIClcbiAgICB9XG4gIH1cblxuICBkYXRhID0gZGF0YSB8fCB7fTtcblxuICAvLyByZXNvbHZlIGNvbnN0cnVjdG9yIG9wdGlvbnMgaW4gY2FzZSBnbG9iYWwgbWl4aW5zIGFyZSBhcHBsaWVkIGFmdGVyXG4gIC8vIGNvbXBvbmVudCBjb25zdHJ1Y3RvciBjcmVhdGlvblxuICByZXNvbHZlQ29uc3RydWN0b3JPcHRpb25zKEN0b3IpO1xuXG4gIC8vIHRyYW5zZm9ybSBjb21wb25lbnQgdi1tb2RlbCBkYXRhIGludG8gcHJvcHMgJiBldmVudHNcbiAgaWYgKGlzRGVmKGRhdGEubW9kZWwpKSB7XG4gICAgdHJhbnNmb3JtTW9kZWwoQ3Rvci5vcHRpb25zLCBkYXRhKTtcbiAgfVxuXG4gIC8vIGV4dHJhY3QgcHJvcHNcbiAgdmFyIHByb3BzRGF0YSA9IGV4dHJhY3RQcm9wc0Zyb21WTm9kZURhdGEoZGF0YSwgQ3RvciwgdGFnKTtcblxuICAvLyBmdW5jdGlvbmFsIGNvbXBvbmVudFxuICBpZiAoaXNUcnVlKEN0b3Iub3B0aW9ucy5mdW5jdGlvbmFsKSkge1xuICAgIHJldHVybiBjcmVhdGVGdW5jdGlvbmFsQ29tcG9uZW50KEN0b3IsIHByb3BzRGF0YSwgZGF0YSwgY29udGV4dCwgY2hpbGRyZW4pXG4gIH1cblxuICAvLyBleHRyYWN0IGxpc3RlbmVycywgc2luY2UgdGhlc2UgbmVlZHMgdG8gYmUgdHJlYXRlZCBhc1xuICAvLyBjaGlsZCBjb21wb25lbnQgbGlzdGVuZXJzIGluc3RlYWQgb2YgRE9NIGxpc3RlbmVyc1xuICB2YXIgbGlzdGVuZXJzID0gZGF0YS5vbjtcbiAgLy8gcmVwbGFjZSB3aXRoIGxpc3RlbmVycyB3aXRoIC5uYXRpdmUgbW9kaWZpZXJcbiAgLy8gc28gaXQgZ2V0cyBwcm9jZXNzZWQgZHVyaW5nIHBhcmVudCBjb21wb25lbnQgcGF0Y2guXG4gIGRhdGEub24gPSBkYXRhLm5hdGl2ZU9uO1xuXG4gIGlmIChpc1RydWUoQ3Rvci5vcHRpb25zLmFic3RyYWN0KSkge1xuICAgIC8vIGFic3RyYWN0IGNvbXBvbmVudHMgZG8gbm90IGtlZXAgYW55dGhpbmdcbiAgICAvLyBvdGhlciB0aGFuIHByb3BzICYgbGlzdGVuZXJzICYgc2xvdFxuXG4gICAgLy8gd29yayBhcm91bmQgZmxvd1xuICAgIHZhciBzbG90ID0gZGF0YS5zbG90O1xuICAgIGRhdGEgPSB7fTtcbiAgICBpZiAoc2xvdCkge1xuICAgICAgZGF0YS5zbG90ID0gc2xvdDtcbiAgICB9XG4gIH1cblxuICAvLyBpbnN0YWxsIGNvbXBvbmVudCBtYW5hZ2VtZW50IGhvb2tzIG9udG8gdGhlIHBsYWNlaG9sZGVyIG5vZGVcbiAgaW5zdGFsbENvbXBvbmVudEhvb2tzKGRhdGEpO1xuXG4gIC8vIHJldHVybiBhIHBsYWNlaG9sZGVyIHZub2RlXG4gIHZhciBuYW1lID0gQ3Rvci5vcHRpb25zLm5hbWUgfHwgdGFnO1xuICB2YXIgdm5vZGUgPSBuZXcgVk5vZGUoXG4gICAgKFwidnVlLWNvbXBvbmVudC1cIiArIChDdG9yLmNpZCkgKyAobmFtZSA/IChcIi1cIiArIG5hbWUpIDogJycpKSxcbiAgICBkYXRhLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBjb250ZXh0LFxuICAgIHsgQ3RvcjogQ3RvciwgcHJvcHNEYXRhOiBwcm9wc0RhdGEsIGxpc3RlbmVyczogbGlzdGVuZXJzLCB0YWc6IHRhZywgY2hpbGRyZW46IGNoaWxkcmVuIH0sXG4gICAgYXN5bmNGYWN0b3J5XG4gICk7XG5cbiAgcmV0dXJuIHZub2RlXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbXBvbmVudEluc3RhbmNlRm9yVm5vZGUgKFxuICAvLyB3ZSBrbm93IGl0J3MgTW91bnRlZENvbXBvbmVudFZOb2RlIGJ1dCBmbG93IGRvZXNuJ3RcbiAgdm5vZGUsXG4gIC8vIGFjdGl2ZUluc3RhbmNlIGluIGxpZmVjeWNsZSBzdGF0ZVxuICBwYXJlbnRcbikge1xuICB2YXIgb3B0aW9ucyA9IHtcbiAgICBfaXNDb21wb25lbnQ6IHRydWUsXG4gICAgX3BhcmVudFZub2RlOiB2bm9kZSxcbiAgICBwYXJlbnQ6IHBhcmVudFxuICB9O1xuICAvLyBjaGVjayBpbmxpbmUtdGVtcGxhdGUgcmVuZGVyIGZ1bmN0aW9uc1xuICB2YXIgaW5saW5lVGVtcGxhdGUgPSB2bm9kZS5kYXRhLmlubGluZVRlbXBsYXRlO1xuICBpZiAoaXNEZWYoaW5saW5lVGVtcGxhdGUpKSB7XG4gICAgb3B0aW9ucy5yZW5kZXIgPSBpbmxpbmVUZW1wbGF0ZS5yZW5kZXI7XG4gICAgb3B0aW9ucy5zdGF0aWNSZW5kZXJGbnMgPSBpbmxpbmVUZW1wbGF0ZS5zdGF0aWNSZW5kZXJGbnM7XG4gIH1cbiAgcmV0dXJuIG5ldyB2bm9kZS5jb21wb25lbnRPcHRpb25zLkN0b3Iob3B0aW9ucylcbn1cblxuZnVuY3Rpb24gaW5zdGFsbENvbXBvbmVudEhvb2tzIChkYXRhKSB7XG4gIHZhciBob29rcyA9IGRhdGEuaG9vayB8fCAoZGF0YS5ob29rID0ge30pO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGhvb2tzVG9NZXJnZS5sZW5ndGg7IGkrKykge1xuICAgIHZhciBrZXkgPSBob29rc1RvTWVyZ2VbaV07XG4gICAgdmFyIGV4aXN0aW5nID0gaG9va3Nba2V5XTtcbiAgICB2YXIgdG9NZXJnZSA9IGNvbXBvbmVudFZOb2RlSG9va3Nba2V5XTtcbiAgICBpZiAoZXhpc3RpbmcgIT09IHRvTWVyZ2UgJiYgIShleGlzdGluZyAmJiBleGlzdGluZy5fbWVyZ2VkKSkge1xuICAgICAgaG9va3Nba2V5XSA9IGV4aXN0aW5nID8gbWVyZ2VIb29rJDEodG9NZXJnZSwgZXhpc3RpbmcpIDogdG9NZXJnZTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gbWVyZ2VIb29rJDEgKGYxLCBmMikge1xuICB2YXIgbWVyZ2VkID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAvLyBmbG93IGNvbXBsYWlucyBhYm91dCBleHRyYSBhcmdzIHdoaWNoIGlzIHdoeSB3ZSB1c2UgYW55XG4gICAgZjEoYSwgYik7XG4gICAgZjIoYSwgYik7XG4gIH07XG4gIG1lcmdlZC5fbWVyZ2VkID0gdHJ1ZTtcbiAgcmV0dXJuIG1lcmdlZFxufVxuXG4vLyB0cmFuc2Zvcm0gY29tcG9uZW50IHYtbW9kZWwgaW5mbyAodmFsdWUgYW5kIGNhbGxiYWNrKSBpbnRvXG4vLyBwcm9wIGFuZCBldmVudCBoYW5kbGVyIHJlc3BlY3RpdmVseS5cbmZ1bmN0aW9uIHRyYW5zZm9ybU1vZGVsIChvcHRpb25zLCBkYXRhKSB7XG4gIHZhciBwcm9wID0gKG9wdGlvbnMubW9kZWwgJiYgb3B0aW9ucy5tb2RlbC5wcm9wKSB8fCAndmFsdWUnO1xuICB2YXIgZXZlbnQgPSAob3B0aW9ucy5tb2RlbCAmJiBvcHRpb25zLm1vZGVsLmV2ZW50KSB8fCAnaW5wdXQnXG4gIDsoZGF0YS5hdHRycyB8fCAoZGF0YS5hdHRycyA9IHt9KSlbcHJvcF0gPSBkYXRhLm1vZGVsLnZhbHVlO1xuICB2YXIgb24gPSBkYXRhLm9uIHx8IChkYXRhLm9uID0ge30pO1xuICB2YXIgZXhpc3RpbmcgPSBvbltldmVudF07XG4gIHZhciBjYWxsYmFjayA9IGRhdGEubW9kZWwuY2FsbGJhY2s7XG4gIGlmIChpc0RlZihleGlzdGluZykpIHtcbiAgICBpZiAoXG4gICAgICBBcnJheS5pc0FycmF5KGV4aXN0aW5nKVxuICAgICAgICA/IGV4aXN0aW5nLmluZGV4T2YoY2FsbGJhY2spID09PSAtMVxuICAgICAgICA6IGV4aXN0aW5nICE9PSBjYWxsYmFja1xuICAgICkge1xuICAgICAgb25bZXZlbnRdID0gW2NhbGxiYWNrXS5jb25jYXQoZXhpc3RpbmcpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBvbltldmVudF0gPSBjYWxsYmFjaztcbiAgfVxufVxuXG4vKiAgKi9cblxudmFyIFNJTVBMRV9OT1JNQUxJWkUgPSAxO1xudmFyIEFMV0FZU19OT1JNQUxJWkUgPSAyO1xuXG4vLyB3cmFwcGVyIGZ1bmN0aW9uIGZvciBwcm92aWRpbmcgYSBtb3JlIGZsZXhpYmxlIGludGVyZmFjZVxuLy8gd2l0aG91dCBnZXR0aW5nIHllbGxlZCBhdCBieSBmbG93XG5mdW5jdGlvbiBjcmVhdGVFbGVtZW50IChcbiAgY29udGV4dCxcbiAgdGFnLFxuICBkYXRhLFxuICBjaGlsZHJlbixcbiAgbm9ybWFsaXphdGlvblR5cGUsXG4gIGFsd2F5c05vcm1hbGl6ZVxuKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGRhdGEpIHx8IGlzUHJpbWl0aXZlKGRhdGEpKSB7XG4gICAgbm9ybWFsaXphdGlvblR5cGUgPSBjaGlsZHJlbjtcbiAgICBjaGlsZHJlbiA9IGRhdGE7XG4gICAgZGF0YSA9IHVuZGVmaW5lZDtcbiAgfVxuICBpZiAoaXNUcnVlKGFsd2F5c05vcm1hbGl6ZSkpIHtcbiAgICBub3JtYWxpemF0aW9uVHlwZSA9IEFMV0FZU19OT1JNQUxJWkU7XG4gIH1cbiAgcmV0dXJuIF9jcmVhdGVFbGVtZW50KGNvbnRleHQsIHRhZywgZGF0YSwgY2hpbGRyZW4sIG5vcm1hbGl6YXRpb25UeXBlKVxufVxuXG5mdW5jdGlvbiBfY3JlYXRlRWxlbWVudCAoXG4gIGNvbnRleHQsXG4gIHRhZyxcbiAgZGF0YSxcbiAgY2hpbGRyZW4sXG4gIG5vcm1hbGl6YXRpb25UeXBlXG4pIHtcbiAgaWYgKGlzRGVmKGRhdGEpICYmIGlzRGVmKChkYXRhKS5fX29iX18pKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgXCJBdm9pZCB1c2luZyBvYnNlcnZlZCBkYXRhIG9iamVjdCBhcyB2bm9kZSBkYXRhOiBcIiArIChKU09OLnN0cmluZ2lmeShkYXRhKSkgKyBcIlxcblwiICtcbiAgICAgICdBbHdheXMgY3JlYXRlIGZyZXNoIHZub2RlIGRhdGEgb2JqZWN0cyBpbiBlYWNoIHJlbmRlciEnLFxuICAgICAgY29udGV4dFxuICAgICk7XG4gICAgcmV0dXJuIGNyZWF0ZUVtcHR5Vk5vZGUoKVxuICB9XG4gIC8vIG9iamVjdCBzeW50YXggaW4gdi1iaW5kXG4gIGlmIChpc0RlZihkYXRhKSAmJiBpc0RlZihkYXRhLmlzKSkge1xuICAgIHRhZyA9IGRhdGEuaXM7XG4gIH1cbiAgaWYgKCF0YWcpIHtcbiAgICAvLyBpbiBjYXNlIG9mIGNvbXBvbmVudCA6aXMgc2V0IHRvIGZhbHN5IHZhbHVlXG4gICAgcmV0dXJuIGNyZWF0ZUVtcHR5Vk5vZGUoKVxuICB9XG4gIC8vIHdhcm4gYWdhaW5zdCBub24tcHJpbWl0aXZlIGtleVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgIGlzRGVmKGRhdGEpICYmIGlzRGVmKGRhdGEua2V5KSAmJiAhaXNQcmltaXRpdmUoZGF0YS5rZXkpXG4gICkge1xuICAgIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICdBdm9pZCB1c2luZyBub24tcHJpbWl0aXZlIHZhbHVlIGFzIGtleSwgJyArXG4gICAgICAgICd1c2Ugc3RyaW5nL251bWJlciB2YWx1ZSBpbnN0ZWFkLicsXG4gICAgICAgIGNvbnRleHRcbiAgICAgICk7XG4gICAgfVxuICB9XG4gIC8vIHN1cHBvcnQgc2luZ2xlIGZ1bmN0aW9uIGNoaWxkcmVuIGFzIGRlZmF1bHQgc2NvcGVkIHNsb3RcbiAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pICYmXG4gICAgdHlwZW9mIGNoaWxkcmVuWzBdID09PSAnZnVuY3Rpb24nXG4gICkge1xuICAgIGRhdGEgPSBkYXRhIHx8IHt9O1xuICAgIGRhdGEuc2NvcGVkU2xvdHMgPSB7IGRlZmF1bHQ6IGNoaWxkcmVuWzBdIH07XG4gICAgY2hpbGRyZW4ubGVuZ3RoID0gMDtcbiAgfVxuICBpZiAobm9ybWFsaXphdGlvblR5cGUgPT09IEFMV0FZU19OT1JNQUxJWkUpIHtcbiAgICBjaGlsZHJlbiA9IG5vcm1hbGl6ZUNoaWxkcmVuKGNoaWxkcmVuKTtcbiAgfSBlbHNlIGlmIChub3JtYWxpemF0aW9uVHlwZSA9PT0gU0lNUExFX05PUk1BTElaRSkge1xuICAgIGNoaWxkcmVuID0gc2ltcGxlTm9ybWFsaXplQ2hpbGRyZW4oY2hpbGRyZW4pO1xuICB9XG4gIHZhciB2bm9kZSwgbnM7XG4gIGlmICh0eXBlb2YgdGFnID09PSAnc3RyaW5nJykge1xuICAgIHZhciBDdG9yO1xuICAgIG5zID0gKGNvbnRleHQuJHZub2RlICYmIGNvbnRleHQuJHZub2RlLm5zKSB8fCBjb25maWcuZ2V0VGFnTmFtZXNwYWNlKHRhZyk7XG4gICAgaWYgKGNvbmZpZy5pc1Jlc2VydmVkVGFnKHRhZykpIHtcbiAgICAgIC8vIHBsYXRmb3JtIGJ1aWx0LWluIGVsZW1lbnRzXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBpc0RlZihkYXRhKSAmJiBpc0RlZihkYXRhLm5hdGl2ZU9uKSAmJiBkYXRhLnRhZyAhPT0gJ2NvbXBvbmVudCcpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAoXCJUaGUgLm5hdGl2ZSBtb2RpZmllciBmb3Igdi1vbiBpcyBvbmx5IHZhbGlkIG9uIGNvbXBvbmVudHMgYnV0IGl0IHdhcyB1c2VkIG9uIDxcIiArIHRhZyArIFwiPi5cIiksXG4gICAgICAgICAgY29udGV4dFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgdm5vZGUgPSBuZXcgVk5vZGUoXG4gICAgICAgIGNvbmZpZy5wYXJzZVBsYXRmb3JtVGFnTmFtZSh0YWcpLCBkYXRhLCBjaGlsZHJlbixcbiAgICAgICAgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGNvbnRleHRcbiAgICAgICk7XG4gICAgfSBlbHNlIGlmICgoIWRhdGEgfHwgIWRhdGEucHJlKSAmJiBpc0RlZihDdG9yID0gcmVzb2x2ZUFzc2V0KGNvbnRleHQuJG9wdGlvbnMsICdjb21wb25lbnRzJywgdGFnKSkpIHtcbiAgICAgIC8vIGNvbXBvbmVudFxuICAgICAgdm5vZGUgPSBjcmVhdGVDb21wb25lbnQoQ3RvciwgZGF0YSwgY29udGV4dCwgY2hpbGRyZW4sIHRhZyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHVua25vd24gb3IgdW5saXN0ZWQgbmFtZXNwYWNlZCBlbGVtZW50c1xuICAgICAgLy8gY2hlY2sgYXQgcnVudGltZSBiZWNhdXNlIGl0IG1heSBnZXQgYXNzaWduZWQgYSBuYW1lc3BhY2Ugd2hlbiBpdHNcbiAgICAgIC8vIHBhcmVudCBub3JtYWxpemVzIGNoaWxkcmVuXG4gICAgICB2bm9kZSA9IG5ldyBWTm9kZShcbiAgICAgICAgdGFnLCBkYXRhLCBjaGlsZHJlbixcbiAgICAgICAgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGNvbnRleHRcbiAgICAgICk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIGRpcmVjdCBjb21wb25lbnQgb3B0aW9ucyAvIGNvbnN0cnVjdG9yXG4gICAgdm5vZGUgPSBjcmVhdGVDb21wb25lbnQodGFnLCBkYXRhLCBjb250ZXh0LCBjaGlsZHJlbik7XG4gIH1cbiAgaWYgKEFycmF5LmlzQXJyYXkodm5vZGUpKSB7XG4gICAgcmV0dXJuIHZub2RlXG4gIH0gZWxzZSBpZiAoaXNEZWYodm5vZGUpKSB7XG4gICAgaWYgKGlzRGVmKG5zKSkgeyBhcHBseU5TKHZub2RlLCBucyk7IH1cbiAgICBpZiAoaXNEZWYoZGF0YSkpIHsgcmVnaXN0ZXJEZWVwQmluZGluZ3MoZGF0YSk7IH1cbiAgICByZXR1cm4gdm5vZGVcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gY3JlYXRlRW1wdHlWTm9kZSgpXG4gIH1cbn1cblxuZnVuY3Rpb24gYXBwbHlOUyAodm5vZGUsIG5zLCBmb3JjZSkge1xuICB2bm9kZS5ucyA9IG5zO1xuICBpZiAodm5vZGUudGFnID09PSAnZm9yZWlnbk9iamVjdCcpIHtcbiAgICAvLyB1c2UgZGVmYXVsdCBuYW1lc3BhY2UgaW5zaWRlIGZvcmVpZ25PYmplY3RcbiAgICBucyA9IHVuZGVmaW5lZDtcbiAgICBmb3JjZSA9IHRydWU7XG4gIH1cbiAgaWYgKGlzRGVmKHZub2RlLmNoaWxkcmVuKSkge1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gdm5vZGUuY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICB2YXIgY2hpbGQgPSB2bm9kZS5jaGlsZHJlbltpXTtcbiAgICAgIGlmIChpc0RlZihjaGlsZC50YWcpICYmIChcbiAgICAgICAgaXNVbmRlZihjaGlsZC5ucykgfHwgKGlzVHJ1ZShmb3JjZSkgJiYgY2hpbGQudGFnICE9PSAnc3ZnJykpKSB7XG4gICAgICAgIGFwcGx5TlMoY2hpbGQsIG5zLCBmb3JjZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8vIHJlZiAjNTMxOFxuLy8gbmVjZXNzYXJ5IHRvIGVuc3VyZSBwYXJlbnQgcmUtcmVuZGVyIHdoZW4gZGVlcCBiaW5kaW5ncyBsaWtlIDpzdHlsZSBhbmRcbi8vIDpjbGFzcyBhcmUgdXNlZCBvbiBzbG90IG5vZGVzXG5mdW5jdGlvbiByZWdpc3RlckRlZXBCaW5kaW5ncyAoZGF0YSkge1xuICBpZiAoaXNPYmplY3QoZGF0YS5zdHlsZSkpIHtcbiAgICB0cmF2ZXJzZShkYXRhLnN0eWxlKTtcbiAgfVxuICBpZiAoaXNPYmplY3QoZGF0YS5jbGFzcykpIHtcbiAgICB0cmF2ZXJzZShkYXRhLmNsYXNzKTtcbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdFJlbmRlciAodm0pIHtcbiAgdm0uX3Zub2RlID0gbnVsbDsgLy8gdGhlIHJvb3Qgb2YgdGhlIGNoaWxkIHRyZWVcbiAgdm0uX3N0YXRpY1RyZWVzID0gbnVsbDsgLy8gdi1vbmNlIGNhY2hlZCB0cmVlc1xuICB2YXIgb3B0aW9ucyA9IHZtLiRvcHRpb25zO1xuICB2YXIgcGFyZW50Vm5vZGUgPSB2bS4kdm5vZGUgPSBvcHRpb25zLl9wYXJlbnRWbm9kZTsgLy8gdGhlIHBsYWNlaG9sZGVyIG5vZGUgaW4gcGFyZW50IHRyZWVcbiAgdmFyIHJlbmRlckNvbnRleHQgPSBwYXJlbnRWbm9kZSAmJiBwYXJlbnRWbm9kZS5jb250ZXh0O1xuICB2bS4kc2xvdHMgPSByZXNvbHZlU2xvdHMob3B0aW9ucy5fcmVuZGVyQ2hpbGRyZW4sIHJlbmRlckNvbnRleHQpO1xuICB2bS4kc2NvcGVkU2xvdHMgPSBlbXB0eU9iamVjdDtcbiAgLy8gYmluZCB0aGUgY3JlYXRlRWxlbWVudCBmbiB0byB0aGlzIGluc3RhbmNlXG4gIC8vIHNvIHRoYXQgd2UgZ2V0IHByb3BlciByZW5kZXIgY29udGV4dCBpbnNpZGUgaXQuXG4gIC8vIGFyZ3Mgb3JkZXI6IHRhZywgZGF0YSwgY2hpbGRyZW4sIG5vcm1hbGl6YXRpb25UeXBlLCBhbHdheXNOb3JtYWxpemVcbiAgLy8gaW50ZXJuYWwgdmVyc2lvbiBpcyB1c2VkIGJ5IHJlbmRlciBmdW5jdGlvbnMgY29tcGlsZWQgZnJvbSB0ZW1wbGF0ZXNcbiAgdm0uX2MgPSBmdW5jdGlvbiAoYSwgYiwgYywgZCkgeyByZXR1cm4gY3JlYXRlRWxlbWVudCh2bSwgYSwgYiwgYywgZCwgZmFsc2UpOyB9O1xuICAvLyBub3JtYWxpemF0aW9uIGlzIGFsd2F5cyBhcHBsaWVkIGZvciB0aGUgcHVibGljIHZlcnNpb24sIHVzZWQgaW5cbiAgLy8gdXNlci13cml0dGVuIHJlbmRlciBmdW5jdGlvbnMuXG4gIHZtLiRjcmVhdGVFbGVtZW50ID0gZnVuY3Rpb24gKGEsIGIsIGMsIGQpIHsgcmV0dXJuIGNyZWF0ZUVsZW1lbnQodm0sIGEsIGIsIGMsIGQsIHRydWUpOyB9O1xuXG4gIC8vICRhdHRycyAmICRsaXN0ZW5lcnMgYXJlIGV4cG9zZWQgZm9yIGVhc2llciBIT0MgY3JlYXRpb24uXG4gIC8vIHRoZXkgbmVlZCB0byBiZSByZWFjdGl2ZSBzbyB0aGF0IEhPQ3MgdXNpbmcgdGhlbSBhcmUgYWx3YXlzIHVwZGF0ZWRcbiAgdmFyIHBhcmVudERhdGEgPSBwYXJlbnRWbm9kZSAmJiBwYXJlbnRWbm9kZS5kYXRhO1xuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgZGVmaW5lUmVhY3RpdmUkJDEodm0sICckYXR0cnMnLCBwYXJlbnREYXRhICYmIHBhcmVudERhdGEuYXR0cnMgfHwgZW1wdHlPYmplY3QsIGZ1bmN0aW9uICgpIHtcbiAgICAgICFpc1VwZGF0aW5nQ2hpbGRDb21wb25lbnQgJiYgd2FybihcIiRhdHRycyBpcyByZWFkb25seS5cIiwgdm0pO1xuICAgIH0sIHRydWUpO1xuICAgIGRlZmluZVJlYWN0aXZlJCQxKHZtLCAnJGxpc3RlbmVycycsIG9wdGlvbnMuX3BhcmVudExpc3RlbmVycyB8fCBlbXB0eU9iamVjdCwgZnVuY3Rpb24gKCkge1xuICAgICAgIWlzVXBkYXRpbmdDaGlsZENvbXBvbmVudCAmJiB3YXJuKFwiJGxpc3RlbmVycyBpcyByZWFkb25seS5cIiwgdm0pO1xuICAgIH0sIHRydWUpO1xuICB9IGVsc2Uge1xuICAgIGRlZmluZVJlYWN0aXZlJCQxKHZtLCAnJGF0dHJzJywgcGFyZW50RGF0YSAmJiBwYXJlbnREYXRhLmF0dHJzIHx8IGVtcHR5T2JqZWN0LCBudWxsLCB0cnVlKTtcbiAgICBkZWZpbmVSZWFjdGl2ZSQkMSh2bSwgJyRsaXN0ZW5lcnMnLCBvcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnMgfHwgZW1wdHlPYmplY3QsIG51bGwsIHRydWUpO1xuICB9XG59XG5cbnZhciBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UgPSBudWxsO1xuXG5mdW5jdGlvbiByZW5kZXJNaXhpbiAoVnVlKSB7XG4gIC8vIGluc3RhbGwgcnVudGltZSBjb252ZW5pZW5jZSBoZWxwZXJzXG4gIGluc3RhbGxSZW5kZXJIZWxwZXJzKFZ1ZS5wcm90b3R5cGUpO1xuXG4gIFZ1ZS5wcm90b3R5cGUuJG5leHRUaWNrID0gZnVuY3Rpb24gKGZuKSB7XG4gICAgcmV0dXJuIG5leHRUaWNrKGZuLCB0aGlzKVxuICB9O1xuXG4gIFZ1ZS5wcm90b3R5cGUuX3JlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIHZhciByZWYgPSB2bS4kb3B0aW9ucztcbiAgICB2YXIgcmVuZGVyID0gcmVmLnJlbmRlcjtcbiAgICB2YXIgX3BhcmVudFZub2RlID0gcmVmLl9wYXJlbnRWbm9kZTtcblxuICAgIGlmIChfcGFyZW50Vm5vZGUpIHtcbiAgICAgIHZtLiRzY29wZWRTbG90cyA9IG5vcm1hbGl6ZVNjb3BlZFNsb3RzKFxuICAgICAgICBfcGFyZW50Vm5vZGUuZGF0YS5zY29wZWRTbG90cyxcbiAgICAgICAgdm0uJHNsb3RzLFxuICAgICAgICB2bS4kc2NvcGVkU2xvdHNcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLy8gc2V0IHBhcmVudCB2bm9kZS4gdGhpcyBhbGxvd3MgcmVuZGVyIGZ1bmN0aW9ucyB0byBoYXZlIGFjY2Vzc1xuICAgIC8vIHRvIHRoZSBkYXRhIG9uIHRoZSBwbGFjZWhvbGRlciBub2RlLlxuICAgIHZtLiR2bm9kZSA9IF9wYXJlbnRWbm9kZTtcbiAgICAvLyByZW5kZXIgc2VsZlxuICAgIHZhciB2bm9kZTtcbiAgICB0cnkge1xuICAgICAgLy8gVGhlcmUncyBubyBuZWVkIHRvIG1haW50YWluIGEgc3RhY2sgYmVjYXVzZSBhbGwgcmVuZGVyIGZucyBhcmUgY2FsbGVkXG4gICAgICAvLyBzZXBhcmF0ZWx5IGZyb20gb25lIGFub3RoZXIuIE5lc3RlZCBjb21wb25lbnQncyByZW5kZXIgZm5zIGFyZSBjYWxsZWRcbiAgICAgIC8vIHdoZW4gcGFyZW50IGNvbXBvbmVudCBpcyBwYXRjaGVkLlxuICAgICAgY3VycmVudFJlbmRlcmluZ0luc3RhbmNlID0gdm07XG4gICAgICB2bm9kZSA9IHJlbmRlci5jYWxsKHZtLl9yZW5kZXJQcm94eSwgdm0uJGNyZWF0ZUVsZW1lbnQpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGhhbmRsZUVycm9yKGUsIHZtLCBcInJlbmRlclwiKTtcbiAgICAgIC8vIHJldHVybiBlcnJvciByZW5kZXIgcmVzdWx0LFxuICAgICAgLy8gb3IgcHJldmlvdXMgdm5vZGUgdG8gcHJldmVudCByZW5kZXIgZXJyb3IgY2F1c2luZyBibGFuayBjb21wb25lbnRcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB2bS4kb3B0aW9ucy5yZW5kZXJFcnJvcikge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHZub2RlID0gdm0uJG9wdGlvbnMucmVuZGVyRXJyb3IuY2FsbCh2bS5fcmVuZGVyUHJveHksIHZtLiRjcmVhdGVFbGVtZW50LCBlKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIGhhbmRsZUVycm9yKGUsIHZtLCBcInJlbmRlckVycm9yXCIpO1xuICAgICAgICAgIHZub2RlID0gdm0uX3Zub2RlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2bm9kZSA9IHZtLl92bm9kZTtcbiAgICAgIH1cbiAgICB9IGZpbmFsbHkge1xuICAgICAgY3VycmVudFJlbmRlcmluZ0luc3RhbmNlID0gbnVsbDtcbiAgICB9XG4gICAgLy8gaWYgdGhlIHJldHVybmVkIGFycmF5IGNvbnRhaW5zIG9ubHkgYSBzaW5nbGUgbm9kZSwgYWxsb3cgaXRcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2bm9kZSkgJiYgdm5vZGUubGVuZ3RoID09PSAxKSB7XG4gICAgICB2bm9kZSA9IHZub2RlWzBdO1xuICAgIH1cbiAgICAvLyByZXR1cm4gZW1wdHkgdm5vZGUgaW4gY2FzZSB0aGUgcmVuZGVyIGZ1bmN0aW9uIGVycm9yZWQgb3V0XG4gICAgaWYgKCEodm5vZGUgaW5zdGFuY2VvZiBWTm9kZSkpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIEFycmF5LmlzQXJyYXkodm5vZGUpKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgJ011bHRpcGxlIHJvb3Qgbm9kZXMgcmV0dXJuZWQgZnJvbSByZW5kZXIgZnVuY3Rpb24uIFJlbmRlciBmdW5jdGlvbiAnICtcbiAgICAgICAgICAnc2hvdWxkIHJldHVybiBhIHNpbmdsZSByb290IG5vZGUuJyxcbiAgICAgICAgICB2bVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgdm5vZGUgPSBjcmVhdGVFbXB0eVZOb2RlKCk7XG4gICAgfVxuICAgIC8vIHNldCBwYXJlbnRcbiAgICB2bm9kZS5wYXJlbnQgPSBfcGFyZW50Vm5vZGU7XG4gICAgcmV0dXJuIHZub2RlXG4gIH07XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBlbnN1cmVDdG9yIChjb21wLCBiYXNlKSB7XG4gIGlmIChcbiAgICBjb21wLl9fZXNNb2R1bGUgfHxcbiAgICAoaGFzU3ltYm9sICYmIGNvbXBbU3ltYm9sLnRvU3RyaW5nVGFnXSA9PT0gJ01vZHVsZScpXG4gICkge1xuICAgIGNvbXAgPSBjb21wLmRlZmF1bHQ7XG4gIH1cbiAgcmV0dXJuIGlzT2JqZWN0KGNvbXApXG4gICAgPyBiYXNlLmV4dGVuZChjb21wKVxuICAgIDogY29tcFxufVxuXG5mdW5jdGlvbiBjcmVhdGVBc3luY1BsYWNlaG9sZGVyIChcbiAgZmFjdG9yeSxcbiAgZGF0YSxcbiAgY29udGV4dCxcbiAgY2hpbGRyZW4sXG4gIHRhZ1xuKSB7XG4gIHZhciBub2RlID0gY3JlYXRlRW1wdHlWTm9kZSgpO1xuICBub2RlLmFzeW5jRmFjdG9yeSA9IGZhY3Rvcnk7XG4gIG5vZGUuYXN5bmNNZXRhID0geyBkYXRhOiBkYXRhLCBjb250ZXh0OiBjb250ZXh0LCBjaGlsZHJlbjogY2hpbGRyZW4sIHRhZzogdGFnIH07XG4gIHJldHVybiBub2RlXG59XG5cbmZ1bmN0aW9uIHJlc29sdmVBc3luY0NvbXBvbmVudCAoXG4gIGZhY3RvcnksXG4gIGJhc2VDdG9yXG4pIHtcbiAgaWYgKGlzVHJ1ZShmYWN0b3J5LmVycm9yKSAmJiBpc0RlZihmYWN0b3J5LmVycm9yQ29tcCkpIHtcbiAgICByZXR1cm4gZmFjdG9yeS5lcnJvckNvbXBcbiAgfVxuXG4gIGlmIChpc0RlZihmYWN0b3J5LnJlc29sdmVkKSkge1xuICAgIHJldHVybiBmYWN0b3J5LnJlc29sdmVkXG4gIH1cblxuICB2YXIgb3duZXIgPSBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2U7XG4gIGlmIChvd25lciAmJiBpc0RlZihmYWN0b3J5Lm93bmVycykgJiYgZmFjdG9yeS5vd25lcnMuaW5kZXhPZihvd25lcikgPT09IC0xKSB7XG4gICAgLy8gYWxyZWFkeSBwZW5kaW5nXG4gICAgZmFjdG9yeS5vd25lcnMucHVzaChvd25lcik7XG4gIH1cblxuICBpZiAoaXNUcnVlKGZhY3RvcnkubG9hZGluZykgJiYgaXNEZWYoZmFjdG9yeS5sb2FkaW5nQ29tcCkpIHtcbiAgICByZXR1cm4gZmFjdG9yeS5sb2FkaW5nQ29tcFxuICB9XG5cbiAgaWYgKG93bmVyICYmICFpc0RlZihmYWN0b3J5Lm93bmVycykpIHtcbiAgICB2YXIgb3duZXJzID0gZmFjdG9yeS5vd25lcnMgPSBbb3duZXJdO1xuICAgIHZhciBzeW5jID0gdHJ1ZTtcbiAgICB2YXIgdGltZXJMb2FkaW5nID0gbnVsbDtcbiAgICB2YXIgdGltZXJUaW1lb3V0ID0gbnVsbFxuXG4gICAgOyhvd25lcikuJG9uKCdob29rOmRlc3Ryb3llZCcsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlbW92ZShvd25lcnMsIG93bmVyKTsgfSk7XG5cbiAgICB2YXIgZm9yY2VSZW5kZXIgPSBmdW5jdGlvbiAocmVuZGVyQ29tcGxldGVkKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbCA9IG93bmVycy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgKG93bmVyc1tpXSkuJGZvcmNlVXBkYXRlKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZW5kZXJDb21wbGV0ZWQpIHtcbiAgICAgICAgb3duZXJzLmxlbmd0aCA9IDA7XG4gICAgICAgIGlmICh0aW1lckxvYWRpbmcgIT09IG51bGwpIHtcbiAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXJMb2FkaW5nKTtcbiAgICAgICAgICB0aW1lckxvYWRpbmcgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aW1lclRpbWVvdXQgIT09IG51bGwpIHtcbiAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXJUaW1lb3V0KTtcbiAgICAgICAgICB0aW1lclRpbWVvdXQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIHZhciByZXNvbHZlID0gb25jZShmdW5jdGlvbiAocmVzKSB7XG4gICAgICAvLyBjYWNoZSByZXNvbHZlZFxuICAgICAgZmFjdG9yeS5yZXNvbHZlZCA9IGVuc3VyZUN0b3IocmVzLCBiYXNlQ3Rvcik7XG4gICAgICAvLyBpbnZva2UgY2FsbGJhY2tzIG9ubHkgaWYgdGhpcyBpcyBub3QgYSBzeW5jaHJvbm91cyByZXNvbHZlXG4gICAgICAvLyAoYXN5bmMgcmVzb2x2ZXMgYXJlIHNoaW1tZWQgYXMgc3luY2hyb25vdXMgZHVyaW5nIFNTUilcbiAgICAgIGlmICghc3luYykge1xuICAgICAgICBmb3JjZVJlbmRlcih0cnVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG93bmVycy5sZW5ndGggPSAwO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdmFyIHJlamVjdCA9IG9uY2UoZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICBcIkZhaWxlZCB0byByZXNvbHZlIGFzeW5jIGNvbXBvbmVudDogXCIgKyAoU3RyaW5nKGZhY3RvcnkpKSArXG4gICAgICAgIChyZWFzb24gPyAoXCJcXG5SZWFzb246IFwiICsgcmVhc29uKSA6ICcnKVxuICAgICAgKTtcbiAgICAgIGlmIChpc0RlZihmYWN0b3J5LmVycm9yQ29tcCkpIHtcbiAgICAgICAgZmFjdG9yeS5lcnJvciA9IHRydWU7XG4gICAgICAgIGZvcmNlUmVuZGVyKHRydWUpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdmFyIHJlcyA9IGZhY3RvcnkocmVzb2x2ZSwgcmVqZWN0KTtcblxuICAgIGlmIChpc09iamVjdChyZXMpKSB7XG4gICAgICBpZiAoaXNQcm9taXNlKHJlcykpIHtcbiAgICAgICAgLy8gKCkgPT4gUHJvbWlzZVxuICAgICAgICBpZiAoaXNVbmRlZihmYWN0b3J5LnJlc29sdmVkKSkge1xuICAgICAgICAgIHJlcy50aGVuKHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaXNQcm9taXNlKHJlcy5jb21wb25lbnQpKSB7XG4gICAgICAgIHJlcy5jb21wb25lbnQudGhlbihyZXNvbHZlLCByZWplY3QpO1xuXG4gICAgICAgIGlmIChpc0RlZihyZXMuZXJyb3IpKSB7XG4gICAgICAgICAgZmFjdG9yeS5lcnJvckNvbXAgPSBlbnN1cmVDdG9yKHJlcy5lcnJvciwgYmFzZUN0b3IpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzRGVmKHJlcy5sb2FkaW5nKSkge1xuICAgICAgICAgIGZhY3RvcnkubG9hZGluZ0NvbXAgPSBlbnN1cmVDdG9yKHJlcy5sb2FkaW5nLCBiYXNlQ3Rvcik7XG4gICAgICAgICAgaWYgKHJlcy5kZWxheSA9PT0gMCkge1xuICAgICAgICAgICAgZmFjdG9yeS5sb2FkaW5nID0gdHJ1ZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGltZXJMb2FkaW5nID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHRpbWVyTG9hZGluZyA9IG51bGw7XG4gICAgICAgICAgICAgIGlmIChpc1VuZGVmKGZhY3RvcnkucmVzb2x2ZWQpICYmIGlzVW5kZWYoZmFjdG9yeS5lcnJvcikpIHtcbiAgICAgICAgICAgICAgICBmYWN0b3J5LmxvYWRpbmcgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGZvcmNlUmVuZGVyKGZhbHNlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgcmVzLmRlbGF5IHx8IDIwMCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzRGVmKHJlcy50aW1lb3V0KSkge1xuICAgICAgICAgIHRpbWVyVGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGltZXJUaW1lb3V0ID0gbnVsbDtcbiAgICAgICAgICAgIGlmIChpc1VuZGVmKGZhY3RvcnkucmVzb2x2ZWQpKSB7XG4gICAgICAgICAgICAgIHJlamVjdChcbiAgICAgICAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nXG4gICAgICAgICAgICAgICAgICA/IChcInRpbWVvdXQgKFwiICsgKHJlcy50aW1lb3V0KSArIFwibXMpXCIpXG4gICAgICAgICAgICAgICAgICA6IG51bGxcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LCByZXMudGltZW91dCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBzeW5jID0gZmFsc2U7XG4gICAgLy8gcmV0dXJuIGluIGNhc2UgcmVzb2x2ZWQgc3luY2hyb25vdXNseVxuICAgIHJldHVybiBmYWN0b3J5LmxvYWRpbmdcbiAgICAgID8gZmFjdG9yeS5sb2FkaW5nQ29tcFxuICAgICAgOiBmYWN0b3J5LnJlc29sdmVkXG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGdldEZpcnN0Q29tcG9uZW50Q2hpbGQgKGNoaWxkcmVuKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGNoaWxkcmVuKSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBjID0gY2hpbGRyZW5baV07XG4gICAgICBpZiAoaXNEZWYoYykgJiYgKGlzRGVmKGMuY29tcG9uZW50T3B0aW9ucykgfHwgaXNBc3luY1BsYWNlaG9sZGVyKGMpKSkge1xuICAgICAgICByZXR1cm4gY1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRFdmVudHMgKHZtKSB7XG4gIHZtLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB2bS5faGFzSG9va0V2ZW50ID0gZmFsc2U7XG4gIC8vIGluaXQgcGFyZW50IGF0dGFjaGVkIGV2ZW50c1xuICB2YXIgbGlzdGVuZXJzID0gdm0uJG9wdGlvbnMuX3BhcmVudExpc3RlbmVycztcbiAgaWYgKGxpc3RlbmVycykge1xuICAgIHVwZGF0ZUNvbXBvbmVudExpc3RlbmVycyh2bSwgbGlzdGVuZXJzKTtcbiAgfVxufVxuXG52YXIgdGFyZ2V0O1xuXG5mdW5jdGlvbiBhZGQgKGV2ZW50LCBmbikge1xuICB0YXJnZXQuJG9uKGV2ZW50LCBmbik7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZSQxIChldmVudCwgZm4pIHtcbiAgdGFyZ2V0LiRvZmYoZXZlbnQsIGZuKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlT25jZUhhbmRsZXIgKGV2ZW50LCBmbikge1xuICB2YXIgX3RhcmdldCA9IHRhcmdldDtcbiAgcmV0dXJuIGZ1bmN0aW9uIG9uY2VIYW5kbGVyICgpIHtcbiAgICB2YXIgcmVzID0gZm4uYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICBpZiAocmVzICE9PSBudWxsKSB7XG4gICAgICBfdGFyZ2V0LiRvZmYoZXZlbnQsIG9uY2VIYW5kbGVyKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gdXBkYXRlQ29tcG9uZW50TGlzdGVuZXJzIChcbiAgdm0sXG4gIGxpc3RlbmVycyxcbiAgb2xkTGlzdGVuZXJzXG4pIHtcbiAgdGFyZ2V0ID0gdm07XG4gIHVwZGF0ZUxpc3RlbmVycyhsaXN0ZW5lcnMsIG9sZExpc3RlbmVycyB8fCB7fSwgYWRkLCByZW1vdmUkMSwgY3JlYXRlT25jZUhhbmRsZXIsIHZtKTtcbiAgdGFyZ2V0ID0gdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiBldmVudHNNaXhpbiAoVnVlKSB7XG4gIHZhciBob29rUkUgPSAvXmhvb2s6LztcbiAgVnVlLnByb3RvdHlwZS4kb24gPSBmdW5jdGlvbiAoZXZlbnQsIGZuKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICBpZiAoQXJyYXkuaXNBcnJheShldmVudCkpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gZXZlbnQubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIHZtLiRvbihldmVudFtpXSwgZm4pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAodm0uX2V2ZW50c1tldmVudF0gfHwgKHZtLl9ldmVudHNbZXZlbnRdID0gW10pKS5wdXNoKGZuKTtcbiAgICAgIC8vIG9wdGltaXplIGhvb2s6ZXZlbnQgY29zdCBieSB1c2luZyBhIGJvb2xlYW4gZmxhZyBtYXJrZWQgYXQgcmVnaXN0cmF0aW9uXG4gICAgICAvLyBpbnN0ZWFkIG9mIGEgaGFzaCBsb29rdXBcbiAgICAgIGlmIChob29rUkUudGVzdChldmVudCkpIHtcbiAgICAgICAgdm0uX2hhc0hvb2tFdmVudCA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB2bVxuICB9O1xuXG4gIFZ1ZS5wcm90b3R5cGUuJG9uY2UgPSBmdW5jdGlvbiAoZXZlbnQsIGZuKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICBmdW5jdGlvbiBvbiAoKSB7XG4gICAgICB2bS4kb2ZmKGV2ZW50LCBvbik7XG4gICAgICBmbi5hcHBseSh2bSwgYXJndW1lbnRzKTtcbiAgICB9XG4gICAgb24uZm4gPSBmbjtcbiAgICB2bS4kb24oZXZlbnQsIG9uKTtcbiAgICByZXR1cm4gdm1cbiAgfTtcblxuICBWdWUucHJvdG90eXBlLiRvZmYgPSBmdW5jdGlvbiAoZXZlbnQsIGZuKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICAvLyBhbGxcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIHZtLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgcmV0dXJuIHZtXG4gICAgfVxuICAgIC8vIGFycmF5IG9mIGV2ZW50c1xuICAgIGlmIChBcnJheS5pc0FycmF5KGV2ZW50KSkge1xuICAgICAgZm9yICh2YXIgaSQxID0gMCwgbCA9IGV2ZW50Lmxlbmd0aDsgaSQxIDwgbDsgaSQxKyspIHtcbiAgICAgICAgdm0uJG9mZihldmVudFtpJDFdLCBmbik7XG4gICAgICB9XG4gICAgICByZXR1cm4gdm1cbiAgICB9XG4gICAgLy8gc3BlY2lmaWMgZXZlbnRcbiAgICB2YXIgY2JzID0gdm0uX2V2ZW50c1tldmVudF07XG4gICAgaWYgKCFjYnMpIHtcbiAgICAgIHJldHVybiB2bVxuICAgIH1cbiAgICBpZiAoIWZuKSB7XG4gICAgICB2bS5fZXZlbnRzW2V2ZW50XSA9IG51bGw7XG4gICAgICByZXR1cm4gdm1cbiAgICB9XG4gICAgLy8gc3BlY2lmaWMgaGFuZGxlclxuICAgIHZhciBjYjtcbiAgICB2YXIgaSA9IGNicy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgY2IgPSBjYnNbaV07XG4gICAgICBpZiAoY2IgPT09IGZuIHx8IGNiLmZuID09PSBmbikge1xuICAgICAgICBjYnMuc3BsaWNlKGksIDEpO1xuICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdm1cbiAgfTtcblxuICBWdWUucHJvdG90eXBlLiRlbWl0ID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdmFyIGxvd2VyQ2FzZUV2ZW50ID0gZXZlbnQudG9Mb3dlckNhc2UoKTtcbiAgICAgIGlmIChsb3dlckNhc2VFdmVudCAhPT0gZXZlbnQgJiYgdm0uX2V2ZW50c1tsb3dlckNhc2VFdmVudF0pIHtcbiAgICAgICAgdGlwKFxuICAgICAgICAgIFwiRXZlbnQgXFxcIlwiICsgbG93ZXJDYXNlRXZlbnQgKyBcIlxcXCIgaXMgZW1pdHRlZCBpbiBjb21wb25lbnQgXCIgK1xuICAgICAgICAgIChmb3JtYXRDb21wb25lbnROYW1lKHZtKSkgKyBcIiBidXQgdGhlIGhhbmRsZXIgaXMgcmVnaXN0ZXJlZCBmb3IgXFxcIlwiICsgZXZlbnQgKyBcIlxcXCIuIFwiICtcbiAgICAgICAgICBcIk5vdGUgdGhhdCBIVE1MIGF0dHJpYnV0ZXMgYXJlIGNhc2UtaW5zZW5zaXRpdmUgYW5kIHlvdSBjYW5ub3QgdXNlIFwiICtcbiAgICAgICAgICBcInYtb24gdG8gbGlzdGVuIHRvIGNhbWVsQ2FzZSBldmVudHMgd2hlbiB1c2luZyBpbi1ET00gdGVtcGxhdGVzLiBcIiArXG4gICAgICAgICAgXCJZb3Ugc2hvdWxkIHByb2JhYmx5IHVzZSBcXFwiXCIgKyAoaHlwaGVuYXRlKGV2ZW50KSkgKyBcIlxcXCIgaW5zdGVhZCBvZiBcXFwiXCIgKyBldmVudCArIFwiXFxcIi5cIlxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICB2YXIgY2JzID0gdm0uX2V2ZW50c1tldmVudF07XG4gICAgaWYgKGNicykge1xuICAgICAgY2JzID0gY2JzLmxlbmd0aCA+IDEgPyB0b0FycmF5KGNicykgOiBjYnM7XG4gICAgICB2YXIgYXJncyA9IHRvQXJyYXkoYXJndW1lbnRzLCAxKTtcbiAgICAgIHZhciBpbmZvID0gXCJldmVudCBoYW5kbGVyIGZvciBcXFwiXCIgKyBldmVudCArIFwiXFxcIlwiO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBjYnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGludm9rZVdpdGhFcnJvckhhbmRsaW5nKGNic1tpXSwgdm0sIGFyZ3MsIHZtLCBpbmZvKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZtXG4gIH07XG59XG5cbi8qICAqL1xuXG52YXIgYWN0aXZlSW5zdGFuY2UgPSBudWxsO1xudmFyIGlzVXBkYXRpbmdDaGlsZENvbXBvbmVudCA9IGZhbHNlO1xuXG5mdW5jdGlvbiBzZXRBY3RpdmVJbnN0YW5jZSh2bSkge1xuICB2YXIgcHJldkFjdGl2ZUluc3RhbmNlID0gYWN0aXZlSW5zdGFuY2U7XG4gIGFjdGl2ZUluc3RhbmNlID0gdm07XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgYWN0aXZlSW5zdGFuY2UgPSBwcmV2QWN0aXZlSW5zdGFuY2U7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdExpZmVjeWNsZSAodm0pIHtcbiAgdmFyIG9wdGlvbnMgPSB2bS4kb3B0aW9ucztcblxuICAvLyBsb2NhdGUgZmlyc3Qgbm9uLWFic3RyYWN0IHBhcmVudFxuICB2YXIgcGFyZW50ID0gb3B0aW9ucy5wYXJlbnQ7XG4gIGlmIChwYXJlbnQgJiYgIW9wdGlvbnMuYWJzdHJhY3QpIHtcbiAgICB3aGlsZSAocGFyZW50LiRvcHRpb25zLmFic3RyYWN0ICYmIHBhcmVudC4kcGFyZW50KSB7XG4gICAgICBwYXJlbnQgPSBwYXJlbnQuJHBhcmVudDtcbiAgICB9XG4gICAgcGFyZW50LiRjaGlsZHJlbi5wdXNoKHZtKTtcbiAgfVxuXG4gIHZtLiRwYXJlbnQgPSBwYXJlbnQ7XG4gIHZtLiRyb290ID0gcGFyZW50ID8gcGFyZW50LiRyb290IDogdm07XG5cbiAgdm0uJGNoaWxkcmVuID0gW107XG4gIHZtLiRyZWZzID0ge307XG5cbiAgdm0uX3dhdGNoZXIgPSBudWxsO1xuICB2bS5faW5hY3RpdmUgPSBudWxsO1xuICB2bS5fZGlyZWN0SW5hY3RpdmUgPSBmYWxzZTtcbiAgdm0uX2lzTW91bnRlZCA9IGZhbHNlO1xuICB2bS5faXNEZXN0cm95ZWQgPSBmYWxzZTtcbiAgdm0uX2lzQmVpbmdEZXN0cm95ZWQgPSBmYWxzZTtcbn1cblxuZnVuY3Rpb24gbGlmZWN5Y2xlTWl4aW4gKFZ1ZSkge1xuICBWdWUucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAodm5vZGUsIGh5ZHJhdGluZykge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgdmFyIHByZXZFbCA9IHZtLiRlbDtcbiAgICB2YXIgcHJldlZub2RlID0gdm0uX3Zub2RlO1xuICAgIHZhciByZXN0b3JlQWN0aXZlSW5zdGFuY2UgPSBzZXRBY3RpdmVJbnN0YW5jZSh2bSk7XG4gICAgdm0uX3Zub2RlID0gdm5vZGU7XG4gICAgLy8gVnVlLnByb3RvdHlwZS5fX3BhdGNoX18gaXMgaW5qZWN0ZWQgaW4gZW50cnkgcG9pbnRzXG4gICAgLy8gYmFzZWQgb24gdGhlIHJlbmRlcmluZyBiYWNrZW5kIHVzZWQuXG4gICAgaWYgKCFwcmV2Vm5vZGUpIHtcbiAgICAgIC8vIGluaXRpYWwgcmVuZGVyXG4gICAgICB2bS4kZWwgPSB2bS5fX3BhdGNoX18odm0uJGVsLCB2bm9kZSwgaHlkcmF0aW5nLCBmYWxzZSAvKiByZW1vdmVPbmx5ICovKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gdXBkYXRlc1xuICAgICAgdm0uJGVsID0gdm0uX19wYXRjaF9fKHByZXZWbm9kZSwgdm5vZGUpO1xuICAgIH1cbiAgICByZXN0b3JlQWN0aXZlSW5zdGFuY2UoKTtcbiAgICAvLyB1cGRhdGUgX192dWVfXyByZWZlcmVuY2VcbiAgICBpZiAocHJldkVsKSB7XG4gICAgICBwcmV2RWwuX192dWVfXyA9IG51bGw7XG4gICAgfVxuICAgIGlmICh2bS4kZWwpIHtcbiAgICAgIHZtLiRlbC5fX3Z1ZV9fID0gdm07XG4gICAgfVxuICAgIC8vIGlmIHBhcmVudCBpcyBhbiBIT0MsIHVwZGF0ZSBpdHMgJGVsIGFzIHdlbGxcbiAgICBpZiAodm0uJHZub2RlICYmIHZtLiRwYXJlbnQgJiYgdm0uJHZub2RlID09PSB2bS4kcGFyZW50Ll92bm9kZSkge1xuICAgICAgdm0uJHBhcmVudC4kZWwgPSB2bS4kZWw7XG4gICAgfVxuICAgIC8vIHVwZGF0ZWQgaG9vayBpcyBjYWxsZWQgYnkgdGhlIHNjaGVkdWxlciB0byBlbnN1cmUgdGhhdCBjaGlsZHJlbiBhcmVcbiAgICAvLyB1cGRhdGVkIGluIGEgcGFyZW50J3MgdXBkYXRlZCBob29rLlxuICB9O1xuXG4gIFZ1ZS5wcm90b3R5cGUuJGZvcmNlVXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgaWYgKHZtLl93YXRjaGVyKSB7XG4gICAgICB2bS5fd2F0Y2hlci51cGRhdGUoKTtcbiAgICB9XG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS4kZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIGlmICh2bS5faXNCZWluZ0Rlc3Ryb3llZCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGNhbGxIb29rKHZtLCAnYmVmb3JlRGVzdHJveScpO1xuICAgIHZtLl9pc0JlaW5nRGVzdHJveWVkID0gdHJ1ZTtcbiAgICAvLyByZW1vdmUgc2VsZiBmcm9tIHBhcmVudFxuICAgIHZhciBwYXJlbnQgPSB2bS4kcGFyZW50O1xuICAgIGlmIChwYXJlbnQgJiYgIXBhcmVudC5faXNCZWluZ0Rlc3Ryb3llZCAmJiAhdm0uJG9wdGlvbnMuYWJzdHJhY3QpIHtcbiAgICAgIHJlbW92ZShwYXJlbnQuJGNoaWxkcmVuLCB2bSk7XG4gICAgfVxuICAgIC8vIHRlYXJkb3duIHdhdGNoZXJzXG4gICAgaWYgKHZtLl93YXRjaGVyKSB7XG4gICAgICB2bS5fd2F0Y2hlci50ZWFyZG93bigpO1xuICAgIH1cbiAgICB2YXIgaSA9IHZtLl93YXRjaGVycy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgdm0uX3dhdGNoZXJzW2ldLnRlYXJkb3duKCk7XG4gICAgfVxuICAgIC8vIHJlbW92ZSByZWZlcmVuY2UgZnJvbSBkYXRhIG9iXG4gICAgLy8gZnJvemVuIG9iamVjdCBtYXkgbm90IGhhdmUgb2JzZXJ2ZXIuXG4gICAgaWYgKHZtLl9kYXRhLl9fb2JfXykge1xuICAgICAgdm0uX2RhdGEuX19vYl9fLnZtQ291bnQtLTtcbiAgICB9XG4gICAgLy8gY2FsbCB0aGUgbGFzdCBob29rLi4uXG4gICAgdm0uX2lzRGVzdHJveWVkID0gdHJ1ZTtcbiAgICAvLyBpbnZva2UgZGVzdHJveSBob29rcyBvbiBjdXJyZW50IHJlbmRlcmVkIHRyZWVcbiAgICB2bS5fX3BhdGNoX18odm0uX3Zub2RlLCBudWxsKTtcbiAgICAvLyBmaXJlIGRlc3Ryb3llZCBob29rXG4gICAgY2FsbEhvb2sodm0sICdkZXN0cm95ZWQnKTtcbiAgICAvLyB0dXJuIG9mZiBhbGwgaW5zdGFuY2UgbGlzdGVuZXJzLlxuICAgIHZtLiRvZmYoKTtcbiAgICAvLyByZW1vdmUgX192dWVfXyByZWZlcmVuY2VcbiAgICBpZiAodm0uJGVsKSB7XG4gICAgICB2bS4kZWwuX192dWVfXyA9IG51bGw7XG4gICAgfVxuICAgIC8vIHJlbGVhc2UgY2lyY3VsYXIgcmVmZXJlbmNlICgjNjc1OSlcbiAgICBpZiAodm0uJHZub2RlKSB7XG4gICAgICB2bS4kdm5vZGUucGFyZW50ID0gbnVsbDtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIG1vdW50Q29tcG9uZW50IChcbiAgdm0sXG4gIGVsLFxuICBoeWRyYXRpbmdcbikge1xuICB2bS4kZWwgPSBlbDtcbiAgaWYgKCF2bS4kb3B0aW9ucy5yZW5kZXIpIHtcbiAgICB2bS4kb3B0aW9ucy5yZW5kZXIgPSBjcmVhdGVFbXB0eVZOb2RlO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIGlmICgodm0uJG9wdGlvbnMudGVtcGxhdGUgJiYgdm0uJG9wdGlvbnMudGVtcGxhdGUuY2hhckF0KDApICE9PSAnIycpIHx8XG4gICAgICAgIHZtLiRvcHRpb25zLmVsIHx8IGVsKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgJ1lvdSBhcmUgdXNpbmcgdGhlIHJ1bnRpbWUtb25seSBidWlsZCBvZiBWdWUgd2hlcmUgdGhlIHRlbXBsYXRlICcgK1xuICAgICAgICAgICdjb21waWxlciBpcyBub3QgYXZhaWxhYmxlLiBFaXRoZXIgcHJlLWNvbXBpbGUgdGhlIHRlbXBsYXRlcyBpbnRvICcgK1xuICAgICAgICAgICdyZW5kZXIgZnVuY3Rpb25zLCBvciB1c2UgdGhlIGNvbXBpbGVyLWluY2x1ZGVkIGJ1aWxkLicsXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgJ0ZhaWxlZCB0byBtb3VudCBjb21wb25lbnQ6IHRlbXBsYXRlIG9yIHJlbmRlciBmdW5jdGlvbiBub3QgZGVmaW5lZC4nLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGNhbGxIb29rKHZtLCAnYmVmb3JlTW91bnQnKTtcblxuICB2YXIgdXBkYXRlQ29tcG9uZW50O1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgY29uZmlnLnBlcmZvcm1hbmNlICYmIG1hcmspIHtcbiAgICB1cGRhdGVDb21wb25lbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgbmFtZSA9IHZtLl9uYW1lO1xuICAgICAgdmFyIGlkID0gdm0uX3VpZDtcbiAgICAgIHZhciBzdGFydFRhZyA9IFwidnVlLXBlcmYtc3RhcnQ6XCIgKyBpZDtcbiAgICAgIHZhciBlbmRUYWcgPSBcInZ1ZS1wZXJmLWVuZDpcIiArIGlkO1xuXG4gICAgICBtYXJrKHN0YXJ0VGFnKTtcbiAgICAgIHZhciB2bm9kZSA9IHZtLl9yZW5kZXIoKTtcbiAgICAgIG1hcmsoZW5kVGFnKTtcbiAgICAgIG1lYXN1cmUoKFwidnVlIFwiICsgbmFtZSArIFwiIHJlbmRlclwiKSwgc3RhcnRUYWcsIGVuZFRhZyk7XG5cbiAgICAgIG1hcmsoc3RhcnRUYWcpO1xuICAgICAgdm0uX3VwZGF0ZSh2bm9kZSwgaHlkcmF0aW5nKTtcbiAgICAgIG1hcmsoZW5kVGFnKTtcbiAgICAgIG1lYXN1cmUoKFwidnVlIFwiICsgbmFtZSArIFwiIHBhdGNoXCIpLCBzdGFydFRhZywgZW5kVGFnKTtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIHVwZGF0ZUNvbXBvbmVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZtLl91cGRhdGUodm0uX3JlbmRlcigpLCBoeWRyYXRpbmcpO1xuICAgIH07XG4gIH1cblxuICAvLyB3ZSBzZXQgdGhpcyB0byB2bS5fd2F0Y2hlciBpbnNpZGUgdGhlIHdhdGNoZXIncyBjb25zdHJ1Y3RvclxuICAvLyBzaW5jZSB0aGUgd2F0Y2hlcidzIGluaXRpYWwgcGF0Y2ggbWF5IGNhbGwgJGZvcmNlVXBkYXRlIChlLmcuIGluc2lkZSBjaGlsZFxuICAvLyBjb21wb25lbnQncyBtb3VudGVkIGhvb2spLCB3aGljaCByZWxpZXMgb24gdm0uX3dhdGNoZXIgYmVpbmcgYWxyZWFkeSBkZWZpbmVkXG4gIG5ldyBXYXRjaGVyKHZtLCB1cGRhdGVDb21wb25lbnQsIG5vb3AsIHtcbiAgICBiZWZvcmU6IGZ1bmN0aW9uIGJlZm9yZSAoKSB7XG4gICAgICBpZiAodm0uX2lzTW91bnRlZCAmJiAhdm0uX2lzRGVzdHJveWVkKSB7XG4gICAgICAgIGNhbGxIb29rKHZtLCAnYmVmb3JlVXBkYXRlJyk7XG4gICAgICB9XG4gICAgfVxuICB9LCB0cnVlIC8qIGlzUmVuZGVyV2F0Y2hlciAqLyk7XG4gIGh5ZHJhdGluZyA9IGZhbHNlO1xuXG4gIC8vIG1hbnVhbGx5IG1vdW50ZWQgaW5zdGFuY2UsIGNhbGwgbW91bnRlZCBvbiBzZWxmXG4gIC8vIG1vdW50ZWQgaXMgY2FsbGVkIGZvciByZW5kZXItY3JlYXRlZCBjaGlsZCBjb21wb25lbnRzIGluIGl0cyBpbnNlcnRlZCBob29rXG4gIGlmICh2bS4kdm5vZGUgPT0gbnVsbCkge1xuICAgIHZtLl9pc01vdW50ZWQgPSB0cnVlO1xuICAgIGNhbGxIb29rKHZtLCAnbW91bnRlZCcpO1xuICB9XG4gIHJldHVybiB2bVxufVxuXG5mdW5jdGlvbiB1cGRhdGVDaGlsZENvbXBvbmVudCAoXG4gIHZtLFxuICBwcm9wc0RhdGEsXG4gIGxpc3RlbmVycyxcbiAgcGFyZW50Vm5vZGUsXG4gIHJlbmRlckNoaWxkcmVuXG4pIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpc1VwZGF0aW5nQ2hpbGRDb21wb25lbnQgPSB0cnVlO1xuICB9XG5cbiAgLy8gZGV0ZXJtaW5lIHdoZXRoZXIgY29tcG9uZW50IGhhcyBzbG90IGNoaWxkcmVuXG4gIC8vIHdlIG5lZWQgdG8gZG8gdGhpcyBiZWZvcmUgb3ZlcndyaXRpbmcgJG9wdGlvbnMuX3JlbmRlckNoaWxkcmVuLlxuXG4gIC8vIGNoZWNrIGlmIHRoZXJlIGFyZSBkeW5hbWljIHNjb3BlZFNsb3RzIChoYW5kLXdyaXR0ZW4gb3IgY29tcGlsZWQgYnV0IHdpdGhcbiAgLy8gZHluYW1pYyBzbG90IG5hbWVzKS4gU3RhdGljIHNjb3BlZCBzbG90cyBjb21waWxlZCBmcm9tIHRlbXBsYXRlIGhhcyB0aGVcbiAgLy8gXCIkc3RhYmxlXCIgbWFya2VyLlxuICB2YXIgbmV3U2NvcGVkU2xvdHMgPSBwYXJlbnRWbm9kZS5kYXRhLnNjb3BlZFNsb3RzO1xuICB2YXIgb2xkU2NvcGVkU2xvdHMgPSB2bS4kc2NvcGVkU2xvdHM7XG4gIHZhciBoYXNEeW5hbWljU2NvcGVkU2xvdCA9ICEhKFxuICAgIChuZXdTY29wZWRTbG90cyAmJiAhbmV3U2NvcGVkU2xvdHMuJHN0YWJsZSkgfHxcbiAgICAob2xkU2NvcGVkU2xvdHMgIT09IGVtcHR5T2JqZWN0ICYmICFvbGRTY29wZWRTbG90cy4kc3RhYmxlKSB8fFxuICAgIChuZXdTY29wZWRTbG90cyAmJiB2bS4kc2NvcGVkU2xvdHMuJGtleSAhPT0gbmV3U2NvcGVkU2xvdHMuJGtleSkgfHxcbiAgICAoIW5ld1Njb3BlZFNsb3RzICYmIHZtLiRzY29wZWRTbG90cy4ka2V5KVxuICApO1xuXG4gIC8vIEFueSBzdGF0aWMgc2xvdCBjaGlsZHJlbiBmcm9tIHRoZSBwYXJlbnQgbWF5IGhhdmUgY2hhbmdlZCBkdXJpbmcgcGFyZW50J3NcbiAgLy8gdXBkYXRlLiBEeW5hbWljIHNjb3BlZCBzbG90cyBtYXkgYWxzbyBoYXZlIGNoYW5nZWQuIEluIHN1Y2ggY2FzZXMsIGEgZm9yY2VkXG4gIC8vIHVwZGF0ZSBpcyBuZWNlc3NhcnkgdG8gZW5zdXJlIGNvcnJlY3RuZXNzLlxuICB2YXIgbmVlZHNGb3JjZVVwZGF0ZSA9ICEhKFxuICAgIHJlbmRlckNoaWxkcmVuIHx8ICAgICAgICAgICAgICAgLy8gaGFzIG5ldyBzdGF0aWMgc2xvdHNcbiAgICB2bS4kb3B0aW9ucy5fcmVuZGVyQ2hpbGRyZW4gfHwgIC8vIGhhcyBvbGQgc3RhdGljIHNsb3RzXG4gICAgaGFzRHluYW1pY1Njb3BlZFNsb3RcbiAgKTtcblxuICB2bS4kb3B0aW9ucy5fcGFyZW50Vm5vZGUgPSBwYXJlbnRWbm9kZTtcbiAgdm0uJHZub2RlID0gcGFyZW50Vm5vZGU7IC8vIHVwZGF0ZSB2bSdzIHBsYWNlaG9sZGVyIG5vZGUgd2l0aG91dCByZS1yZW5kZXJcblxuICBpZiAodm0uX3Zub2RlKSB7IC8vIHVwZGF0ZSBjaGlsZCB0cmVlJ3MgcGFyZW50XG4gICAgdm0uX3Zub2RlLnBhcmVudCA9IHBhcmVudFZub2RlO1xuICB9XG4gIHZtLiRvcHRpb25zLl9yZW5kZXJDaGlsZHJlbiA9IHJlbmRlckNoaWxkcmVuO1xuXG4gIC8vIHVwZGF0ZSAkYXR0cnMgYW5kICRsaXN0ZW5lcnMgaGFzaFxuICAvLyB0aGVzZSBhcmUgYWxzbyByZWFjdGl2ZSBzbyB0aGV5IG1heSB0cmlnZ2VyIGNoaWxkIHVwZGF0ZSBpZiB0aGUgY2hpbGRcbiAgLy8gdXNlZCB0aGVtIGR1cmluZyByZW5kZXJcbiAgdm0uJGF0dHJzID0gcGFyZW50Vm5vZGUuZGF0YS5hdHRycyB8fCBlbXB0eU9iamVjdDtcbiAgdm0uJGxpc3RlbmVycyA9IGxpc3RlbmVycyB8fCBlbXB0eU9iamVjdDtcblxuICAvLyB1cGRhdGUgcHJvcHNcbiAgaWYgKHByb3BzRGF0YSAmJiB2bS4kb3B0aW9ucy5wcm9wcykge1xuICAgIHRvZ2dsZU9ic2VydmluZyhmYWxzZSk7XG4gICAgdmFyIHByb3BzID0gdm0uX3Byb3BzO1xuICAgIHZhciBwcm9wS2V5cyA9IHZtLiRvcHRpb25zLl9wcm9wS2V5cyB8fCBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIga2V5ID0gcHJvcEtleXNbaV07XG4gICAgICB2YXIgcHJvcE9wdGlvbnMgPSB2bS4kb3B0aW9ucy5wcm9wczsgLy8gd3RmIGZsb3c/XG4gICAgICBwcm9wc1trZXldID0gdmFsaWRhdGVQcm9wKGtleSwgcHJvcE9wdGlvbnMsIHByb3BzRGF0YSwgdm0pO1xuICAgIH1cbiAgICB0b2dnbGVPYnNlcnZpbmcodHJ1ZSk7XG4gICAgLy8ga2VlcCBhIGNvcHkgb2YgcmF3IHByb3BzRGF0YVxuICAgIHZtLiRvcHRpb25zLnByb3BzRGF0YSA9IHByb3BzRGF0YTtcbiAgfVxuXG4gIC8vIHVwZGF0ZSBsaXN0ZW5lcnNcbiAgbGlzdGVuZXJzID0gbGlzdGVuZXJzIHx8IGVtcHR5T2JqZWN0O1xuICB2YXIgb2xkTGlzdGVuZXJzID0gdm0uJG9wdGlvbnMuX3BhcmVudExpc3RlbmVycztcbiAgdm0uJG9wdGlvbnMuX3BhcmVudExpc3RlbmVycyA9IGxpc3RlbmVycztcbiAgdXBkYXRlQ29tcG9uZW50TGlzdGVuZXJzKHZtLCBsaXN0ZW5lcnMsIG9sZExpc3RlbmVycyk7XG5cbiAgLy8gcmVzb2x2ZSBzbG90cyArIGZvcmNlIHVwZGF0ZSBpZiBoYXMgY2hpbGRyZW5cbiAgaWYgKG5lZWRzRm9yY2VVcGRhdGUpIHtcbiAgICB2bS4kc2xvdHMgPSByZXNvbHZlU2xvdHMocmVuZGVyQ2hpbGRyZW4sIHBhcmVudFZub2RlLmNvbnRleHQpO1xuICAgIHZtLiRmb3JjZVVwZGF0ZSgpO1xuICB9XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpc1VwZGF0aW5nQ2hpbGRDb21wb25lbnQgPSBmYWxzZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpc0luSW5hY3RpdmVUcmVlICh2bSkge1xuICB3aGlsZSAodm0gJiYgKHZtID0gdm0uJHBhcmVudCkpIHtcbiAgICBpZiAodm0uX2luYWN0aXZlKSB7IHJldHVybiB0cnVlIH1cbiAgfVxuICByZXR1cm4gZmFsc2Vcbn1cblxuZnVuY3Rpb24gYWN0aXZhdGVDaGlsZENvbXBvbmVudCAodm0sIGRpcmVjdCkge1xuICBpZiAoZGlyZWN0KSB7XG4gICAgdm0uX2RpcmVjdEluYWN0aXZlID0gZmFsc2U7XG4gICAgaWYgKGlzSW5JbmFjdGl2ZVRyZWUodm0pKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gIH0gZWxzZSBpZiAodm0uX2RpcmVjdEluYWN0aXZlKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgaWYgKHZtLl9pbmFjdGl2ZSB8fCB2bS5faW5hY3RpdmUgPT09IG51bGwpIHtcbiAgICB2bS5faW5hY3RpdmUgPSBmYWxzZTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZtLiRjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgYWN0aXZhdGVDaGlsZENvbXBvbmVudCh2bS4kY2hpbGRyZW5baV0pO1xuICAgIH1cbiAgICBjYWxsSG9vayh2bSwgJ2FjdGl2YXRlZCcpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGRlYWN0aXZhdGVDaGlsZENvbXBvbmVudCAodm0sIGRpcmVjdCkge1xuICBpZiAoZGlyZWN0KSB7XG4gICAgdm0uX2RpcmVjdEluYWN0aXZlID0gdHJ1ZTtcbiAgICBpZiAoaXNJbkluYWN0aXZlVHJlZSh2bSkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgfVxuICBpZiAoIXZtLl9pbmFjdGl2ZSkge1xuICAgIHZtLl9pbmFjdGl2ZSA9IHRydWU7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2bS4kY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIGRlYWN0aXZhdGVDaGlsZENvbXBvbmVudCh2bS4kY2hpbGRyZW5baV0pO1xuICAgIH1cbiAgICBjYWxsSG9vayh2bSwgJ2RlYWN0aXZhdGVkJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2FsbEhvb2sgKHZtLCBob29rKSB7XG4gIC8vICM3NTczIGRpc2FibGUgZGVwIGNvbGxlY3Rpb24gd2hlbiBpbnZva2luZyBsaWZlY3ljbGUgaG9va3NcbiAgcHVzaFRhcmdldCgpO1xuICB2YXIgaGFuZGxlcnMgPSB2bS4kb3B0aW9uc1tob29rXTtcbiAgdmFyIGluZm8gPSBob29rICsgXCIgaG9va1wiO1xuICBpZiAoaGFuZGxlcnMpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgaiA9IGhhbmRsZXJzLmxlbmd0aDsgaSA8IGo7IGkrKykge1xuICAgICAgaW52b2tlV2l0aEVycm9ySGFuZGxpbmcoaGFuZGxlcnNbaV0sIHZtLCBudWxsLCB2bSwgaW5mbyk7XG4gICAgfVxuICB9XG4gIGlmICh2bS5faGFzSG9va0V2ZW50KSB7XG4gICAgdm0uJGVtaXQoJ2hvb2s6JyArIGhvb2spO1xuICB9XG4gIHBvcFRhcmdldCgpO1xufVxuXG4vKiAgKi9cblxudmFyIE1BWF9VUERBVEVfQ09VTlQgPSAxMDA7XG5cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGFjdGl2YXRlZENoaWxkcmVuID0gW107XG52YXIgaGFzID0ge307XG52YXIgY2lyY3VsYXIgPSB7fTtcbnZhciB3YWl0aW5nID0gZmFsc2U7XG52YXIgZmx1c2hpbmcgPSBmYWxzZTtcbnZhciBpbmRleCA9IDA7XG5cbi8qKlxuICogUmVzZXQgdGhlIHNjaGVkdWxlcidzIHN0YXRlLlxuICovXG5mdW5jdGlvbiByZXNldFNjaGVkdWxlclN0YXRlICgpIHtcbiAgaW5kZXggPSBxdWV1ZS5sZW5ndGggPSBhY3RpdmF0ZWRDaGlsZHJlbi5sZW5ndGggPSAwO1xuICBoYXMgPSB7fTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBjaXJjdWxhciA9IHt9O1xuICB9XG4gIHdhaXRpbmcgPSBmbHVzaGluZyA9IGZhbHNlO1xufVxuXG4vLyBBc3luYyBlZGdlIGNhc2UgIzY1NjYgcmVxdWlyZXMgc2F2aW5nIHRoZSB0aW1lc3RhbXAgd2hlbiBldmVudCBsaXN0ZW5lcnMgYXJlXG4vLyBhdHRhY2hlZC4gSG93ZXZlciwgY2FsbGluZyBwZXJmb3JtYW5jZS5ub3coKSBoYXMgYSBwZXJmIG92ZXJoZWFkIGVzcGVjaWFsbHlcbi8vIGlmIHRoZSBwYWdlIGhhcyB0aG91c2FuZHMgb2YgZXZlbnQgbGlzdGVuZXJzLiBJbnN0ZWFkLCB3ZSB0YWtlIGEgdGltZXN0YW1wXG4vLyBldmVyeSB0aW1lIHRoZSBzY2hlZHVsZXIgZmx1c2hlcyBhbmQgdXNlIHRoYXQgZm9yIGFsbCBldmVudCBsaXN0ZW5lcnNcbi8vIGF0dGFjaGVkIGR1cmluZyB0aGF0IGZsdXNoLlxudmFyIGN1cnJlbnRGbHVzaFRpbWVzdGFtcCA9IDA7XG5cbi8vIEFzeW5jIGVkZ2UgY2FzZSBmaXggcmVxdWlyZXMgc3RvcmluZyBhbiBldmVudCBsaXN0ZW5lcidzIGF0dGFjaCB0aW1lc3RhbXAuXG52YXIgZ2V0Tm93ID0gRGF0ZS5ub3c7XG5cbi8vIERldGVybWluZSB3aGF0IGV2ZW50IHRpbWVzdGFtcCB0aGUgYnJvd3NlciBpcyB1c2luZy4gQW5ub3lpbmdseSwgdGhlXG4vLyB0aW1lc3RhbXAgY2FuIGVpdGhlciBiZSBoaS1yZXMgKHJlbGF0aXZlIHRvIHBhZ2UgbG9hZCkgb3IgbG93LXJlc1xuLy8gKHJlbGF0aXZlIHRvIFVOSVggZXBvY2gpLCBzbyBpbiBvcmRlciB0byBjb21wYXJlIHRpbWUgd2UgaGF2ZSB0byB1c2UgdGhlXG4vLyBzYW1lIHRpbWVzdGFtcCB0eXBlIHdoZW4gc2F2aW5nIHRoZSBmbHVzaCB0aW1lc3RhbXAuXG4vLyBBbGwgSUUgdmVyc2lvbnMgdXNlIGxvdy1yZXMgZXZlbnQgdGltZXN0YW1wcywgYW5kIGhhdmUgcHJvYmxlbWF0aWMgY2xvY2tcbi8vIGltcGxlbWVudGF0aW9ucyAoIzk2MzIpXG5pZiAoaW5Ccm93c2VyICYmICFpc0lFKSB7XG4gIHZhciBwZXJmb3JtYW5jZSA9IHdpbmRvdy5wZXJmb3JtYW5jZTtcbiAgaWYgKFxuICAgIHBlcmZvcm1hbmNlICYmXG4gICAgdHlwZW9mIHBlcmZvcm1hbmNlLm5vdyA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgIGdldE5vdygpID4gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0V2ZW50JykudGltZVN0YW1wXG4gICkge1xuICAgIC8vIGlmIHRoZSBldmVudCB0aW1lc3RhbXAsIGFsdGhvdWdoIGV2YWx1YXRlZCBBRlRFUiB0aGUgRGF0ZS5ub3coKSwgaXNcbiAgICAvLyBzbWFsbGVyIHRoYW4gaXQsIGl0IG1lYW5zIHRoZSBldmVudCBpcyB1c2luZyBhIGhpLXJlcyB0aW1lc3RhbXAsXG4gICAgLy8gYW5kIHdlIG5lZWQgdG8gdXNlIHRoZSBoaS1yZXMgdmVyc2lvbiBmb3IgZXZlbnQgbGlzdGVuZXIgdGltZXN0YW1wcyBhc1xuICAgIC8vIHdlbGwuXG4gICAgZ2V0Tm93ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gcGVyZm9ybWFuY2Uubm93KCk7IH07XG4gIH1cbn1cblxuLyoqXG4gKiBGbHVzaCBib3RoIHF1ZXVlcyBhbmQgcnVuIHRoZSB3YXRjaGVycy5cbiAqL1xuZnVuY3Rpb24gZmx1c2hTY2hlZHVsZXJRdWV1ZSAoKSB7XG4gIGN1cnJlbnRGbHVzaFRpbWVzdGFtcCA9IGdldE5vdygpO1xuICBmbHVzaGluZyA9IHRydWU7XG4gIHZhciB3YXRjaGVyLCBpZDtcblxuICAvLyBTb3J0IHF1ZXVlIGJlZm9yZSBmbHVzaC5cbiAgLy8gVGhpcyBlbnN1cmVzIHRoYXQ6XG4gIC8vIDEuIENvbXBvbmVudHMgYXJlIHVwZGF0ZWQgZnJvbSBwYXJlbnQgdG8gY2hpbGQuIChiZWNhdXNlIHBhcmVudCBpcyBhbHdheXNcbiAgLy8gICAgY3JlYXRlZCBiZWZvcmUgdGhlIGNoaWxkKVxuICAvLyAyLiBBIGNvbXBvbmVudCdzIHVzZXIgd2F0Y2hlcnMgYXJlIHJ1biBiZWZvcmUgaXRzIHJlbmRlciB3YXRjaGVyIChiZWNhdXNlXG4gIC8vICAgIHVzZXIgd2F0Y2hlcnMgYXJlIGNyZWF0ZWQgYmVmb3JlIHRoZSByZW5kZXIgd2F0Y2hlcilcbiAgLy8gMy4gSWYgYSBjb21wb25lbnQgaXMgZGVzdHJveWVkIGR1cmluZyBhIHBhcmVudCBjb21wb25lbnQncyB3YXRjaGVyIHJ1bixcbiAgLy8gICAgaXRzIHdhdGNoZXJzIGNhbiBiZSBza2lwcGVkLlxuICBxdWV1ZS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7IHJldHVybiBhLmlkIC0gYi5pZDsgfSk7XG5cbiAgLy8gZG8gbm90IGNhY2hlIGxlbmd0aCBiZWNhdXNlIG1vcmUgd2F0Y2hlcnMgbWlnaHQgYmUgcHVzaGVkXG4gIC8vIGFzIHdlIHJ1biBleGlzdGluZyB3YXRjaGVyc1xuICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCBxdWV1ZS5sZW5ndGg7IGluZGV4KyspIHtcbiAgICB3YXRjaGVyID0gcXVldWVbaW5kZXhdO1xuICAgIGlmICh3YXRjaGVyLmJlZm9yZSkge1xuICAgICAgd2F0Y2hlci5iZWZvcmUoKTtcbiAgICB9XG4gICAgaWQgPSB3YXRjaGVyLmlkO1xuICAgIGhhc1tpZF0gPSBudWxsO1xuICAgIHdhdGNoZXIucnVuKCk7XG4gICAgLy8gaW4gZGV2IGJ1aWxkLCBjaGVjayBhbmQgc3RvcCBjaXJjdWxhciB1cGRhdGVzLlxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGhhc1tpZF0gIT0gbnVsbCkge1xuICAgICAgY2lyY3VsYXJbaWRdID0gKGNpcmN1bGFyW2lkXSB8fCAwKSArIDE7XG4gICAgICBpZiAoY2lyY3VsYXJbaWRdID4gTUFYX1VQREFURV9DT1VOVCkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgICdZb3UgbWF5IGhhdmUgYW4gaW5maW5pdGUgdXBkYXRlIGxvb3AgJyArIChcbiAgICAgICAgICAgIHdhdGNoZXIudXNlclxuICAgICAgICAgICAgICA/IChcImluIHdhdGNoZXIgd2l0aCBleHByZXNzaW9uIFxcXCJcIiArICh3YXRjaGVyLmV4cHJlc3Npb24pICsgXCJcXFwiXCIpXG4gICAgICAgICAgICAgIDogXCJpbiBhIGNvbXBvbmVudCByZW5kZXIgZnVuY3Rpb24uXCJcbiAgICAgICAgICApLFxuICAgICAgICAgIHdhdGNoZXIudm1cbiAgICAgICAgKTtcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBrZWVwIGNvcGllcyBvZiBwb3N0IHF1ZXVlcyBiZWZvcmUgcmVzZXR0aW5nIHN0YXRlXG4gIHZhciBhY3RpdmF0ZWRRdWV1ZSA9IGFjdGl2YXRlZENoaWxkcmVuLnNsaWNlKCk7XG4gIHZhciB1cGRhdGVkUXVldWUgPSBxdWV1ZS5zbGljZSgpO1xuXG4gIHJlc2V0U2NoZWR1bGVyU3RhdGUoKTtcblxuICAvLyBjYWxsIGNvbXBvbmVudCB1cGRhdGVkIGFuZCBhY3RpdmF0ZWQgaG9va3NcbiAgY2FsbEFjdGl2YXRlZEhvb2tzKGFjdGl2YXRlZFF1ZXVlKTtcbiAgY2FsbFVwZGF0ZWRIb29rcyh1cGRhdGVkUXVldWUpO1xuXG4gIC8vIGRldnRvb2wgaG9va1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGRldnRvb2xzICYmIGNvbmZpZy5kZXZ0b29scykge1xuICAgIGRldnRvb2xzLmVtaXQoJ2ZsdXNoJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2FsbFVwZGF0ZWRIb29rcyAocXVldWUpIHtcbiAgdmFyIGkgPSBxdWV1ZS5sZW5ndGg7XG4gIHdoaWxlIChpLS0pIHtcbiAgICB2YXIgd2F0Y2hlciA9IHF1ZXVlW2ldO1xuICAgIHZhciB2bSA9IHdhdGNoZXIudm07XG4gICAgaWYgKHZtLl93YXRjaGVyID09PSB3YXRjaGVyICYmIHZtLl9pc01vdW50ZWQgJiYgIXZtLl9pc0Rlc3Ryb3llZCkge1xuICAgICAgY2FsbEhvb2sodm0sICd1cGRhdGVkJyk7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogUXVldWUgYSBrZXB0LWFsaXZlIGNvbXBvbmVudCB0aGF0IHdhcyBhY3RpdmF0ZWQgZHVyaW5nIHBhdGNoLlxuICogVGhlIHF1ZXVlIHdpbGwgYmUgcHJvY2Vzc2VkIGFmdGVyIHRoZSBlbnRpcmUgdHJlZSBoYXMgYmVlbiBwYXRjaGVkLlxuICovXG5mdW5jdGlvbiBxdWV1ZUFjdGl2YXRlZENvbXBvbmVudCAodm0pIHtcbiAgLy8gc2V0dGluZyBfaW5hY3RpdmUgdG8gZmFsc2UgaGVyZSBzbyB0aGF0IGEgcmVuZGVyIGZ1bmN0aW9uIGNhblxuICAvLyByZWx5IG9uIGNoZWNraW5nIHdoZXRoZXIgaXQncyBpbiBhbiBpbmFjdGl2ZSB0cmVlIChlLmcuIHJvdXRlci12aWV3KVxuICB2bS5faW5hY3RpdmUgPSBmYWxzZTtcbiAgYWN0aXZhdGVkQ2hpbGRyZW4ucHVzaCh2bSk7XG59XG5cbmZ1bmN0aW9uIGNhbGxBY3RpdmF0ZWRIb29rcyAocXVldWUpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBxdWV1ZS5sZW5ndGg7IGkrKykge1xuICAgIHF1ZXVlW2ldLl9pbmFjdGl2ZSA9IHRydWU7XG4gICAgYWN0aXZhdGVDaGlsZENvbXBvbmVudChxdWV1ZVtpXSwgdHJ1ZSAvKiB0cnVlICovKTtcbiAgfVxufVxuXG4vKipcbiAqIFB1c2ggYSB3YXRjaGVyIGludG8gdGhlIHdhdGNoZXIgcXVldWUuXG4gKiBKb2JzIHdpdGggZHVwbGljYXRlIElEcyB3aWxsIGJlIHNraXBwZWQgdW5sZXNzIGl0J3NcbiAqIHB1c2hlZCB3aGVuIHRoZSBxdWV1ZSBpcyBiZWluZyBmbHVzaGVkLlxuICovXG5mdW5jdGlvbiBxdWV1ZVdhdGNoZXIgKHdhdGNoZXIpIHtcbiAgdmFyIGlkID0gd2F0Y2hlci5pZDtcbiAgaWYgKGhhc1tpZF0gPT0gbnVsbCkge1xuICAgIGhhc1tpZF0gPSB0cnVlO1xuICAgIGlmICghZmx1c2hpbmcpIHtcbiAgICAgIHF1ZXVlLnB1c2god2F0Y2hlcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGlmIGFscmVhZHkgZmx1c2hpbmcsIHNwbGljZSB0aGUgd2F0Y2hlciBiYXNlZCBvbiBpdHMgaWRcbiAgICAgIC8vIGlmIGFscmVhZHkgcGFzdCBpdHMgaWQsIGl0IHdpbGwgYmUgcnVuIG5leHQgaW1tZWRpYXRlbHkuXG4gICAgICB2YXIgaSA9IHF1ZXVlLmxlbmd0aCAtIDE7XG4gICAgICB3aGlsZSAoaSA+IGluZGV4ICYmIHF1ZXVlW2ldLmlkID4gd2F0Y2hlci5pZCkge1xuICAgICAgICBpLS07XG4gICAgICB9XG4gICAgICBxdWV1ZS5zcGxpY2UoaSArIDEsIDAsIHdhdGNoZXIpO1xuICAgIH1cbiAgICAvLyBxdWV1ZSB0aGUgZmx1c2hcbiAgICBpZiAoIXdhaXRpbmcpIHtcbiAgICAgIHdhaXRpbmcgPSB0cnVlO1xuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhY29uZmlnLmFzeW5jKSB7XG4gICAgICAgIGZsdXNoU2NoZWR1bGVyUXVldWUoKTtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICBuZXh0VGljayhmbHVzaFNjaGVkdWxlclF1ZXVlKTtcbiAgICB9XG4gIH1cbn1cblxuLyogICovXG5cblxuXG52YXIgdWlkJDIgPSAwO1xuXG4vKipcbiAqIEEgd2F0Y2hlciBwYXJzZXMgYW4gZXhwcmVzc2lvbiwgY29sbGVjdHMgZGVwZW5kZW5jaWVzLFxuICogYW5kIGZpcmVzIGNhbGxiYWNrIHdoZW4gdGhlIGV4cHJlc3Npb24gdmFsdWUgY2hhbmdlcy5cbiAqIFRoaXMgaXMgdXNlZCBmb3IgYm90aCB0aGUgJHdhdGNoKCkgYXBpIGFuZCBkaXJlY3RpdmVzLlxuICovXG52YXIgV2F0Y2hlciA9IGZ1bmN0aW9uIFdhdGNoZXIgKFxuICB2bSxcbiAgZXhwT3JGbixcbiAgY2IsXG4gIG9wdGlvbnMsXG4gIGlzUmVuZGVyV2F0Y2hlclxuKSB7XG4gIHRoaXMudm0gPSB2bTtcbiAgaWYgKGlzUmVuZGVyV2F0Y2hlcikge1xuICAgIHZtLl93YXRjaGVyID0gdGhpcztcbiAgfVxuICB2bS5fd2F0Y2hlcnMucHVzaCh0aGlzKTtcbiAgLy8gb3B0aW9uc1xuICBpZiAob3B0aW9ucykge1xuICAgIHRoaXMuZGVlcCA9ICEhb3B0aW9ucy5kZWVwO1xuICAgIHRoaXMudXNlciA9ICEhb3B0aW9ucy51c2VyO1xuICAgIHRoaXMubGF6eSA9ICEhb3B0aW9ucy5sYXp5O1xuICAgIHRoaXMuc3luYyA9ICEhb3B0aW9ucy5zeW5jO1xuICAgIHRoaXMuYmVmb3JlID0gb3B0aW9ucy5iZWZvcmU7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5kZWVwID0gdGhpcy51c2VyID0gdGhpcy5sYXp5ID0gdGhpcy5zeW5jID0gZmFsc2U7XG4gIH1cbiAgdGhpcy5jYiA9IGNiO1xuICB0aGlzLmlkID0gKyt1aWQkMjsgLy8gdWlkIGZvciBiYXRjaGluZ1xuICB0aGlzLmFjdGl2ZSA9IHRydWU7XG4gIHRoaXMuZGlydHkgPSB0aGlzLmxhenk7IC8vIGZvciBsYXp5IHdhdGNoZXJzXG4gIHRoaXMuZGVwcyA9IFtdO1xuICB0aGlzLm5ld0RlcHMgPSBbXTtcbiAgdGhpcy5kZXBJZHMgPSBuZXcgX1NldCgpO1xuICB0aGlzLm5ld0RlcElkcyA9IG5ldyBfU2V0KCk7XG4gIHRoaXMuZXhwcmVzc2lvbiA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbidcbiAgICA/IGV4cE9yRm4udG9TdHJpbmcoKVxuICAgIDogJyc7XG4gIC8vIHBhcnNlIGV4cHJlc3Npb24gZm9yIGdldHRlclxuICBpZiAodHlwZW9mIGV4cE9yRm4gPT09ICdmdW5jdGlvbicpIHtcbiAgICB0aGlzLmdldHRlciA9IGV4cE9yRm47XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5nZXR0ZXIgPSBwYXJzZVBhdGgoZXhwT3JGbik7XG4gICAgaWYgKCF0aGlzLmdldHRlcikge1xuICAgICAgdGhpcy5nZXR0ZXIgPSBub29wO1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICBcIkZhaWxlZCB3YXRjaGluZyBwYXRoOiBcXFwiXCIgKyBleHBPckZuICsgXCJcXFwiIFwiICtcbiAgICAgICAgJ1dhdGNoZXIgb25seSBhY2NlcHRzIHNpbXBsZSBkb3QtZGVsaW1pdGVkIHBhdGhzLiAnICtcbiAgICAgICAgJ0ZvciBmdWxsIGNvbnRyb2wsIHVzZSBhIGZ1bmN0aW9uIGluc3RlYWQuJyxcbiAgICAgICAgdm1cbiAgICAgICk7XG4gICAgfVxuICB9XG4gIHRoaXMudmFsdWUgPSB0aGlzLmxhenlcbiAgICA/IHVuZGVmaW5lZFxuICAgIDogdGhpcy5nZXQoKTtcbn07XG5cbi8qKlxuICogRXZhbHVhdGUgdGhlIGdldHRlciwgYW5kIHJlLWNvbGxlY3QgZGVwZW5kZW5jaWVzLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiBnZXQgKCkge1xuICBwdXNoVGFyZ2V0KHRoaXMpO1xuICB2YXIgdmFsdWU7XG4gIHZhciB2bSA9IHRoaXMudm07XG4gIHRyeSB7XG4gICAgdmFsdWUgPSB0aGlzLmdldHRlci5jYWxsKHZtLCB2bSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAodGhpcy51c2VyKSB7XG4gICAgICBoYW5kbGVFcnJvcihlLCB2bSwgKFwiZ2V0dGVyIGZvciB3YXRjaGVyIFxcXCJcIiArICh0aGlzLmV4cHJlc3Npb24pICsgXCJcXFwiXCIpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgZVxuICAgIH1cbiAgfSBmaW5hbGx5IHtcbiAgICAvLyBcInRvdWNoXCIgZXZlcnkgcHJvcGVydHkgc28gdGhleSBhcmUgYWxsIHRyYWNrZWQgYXNcbiAgICAvLyBkZXBlbmRlbmNpZXMgZm9yIGRlZXAgd2F0Y2hpbmdcbiAgICBpZiAodGhpcy5kZWVwKSB7XG4gICAgICB0cmF2ZXJzZSh2YWx1ZSk7XG4gICAgfVxuICAgIHBvcFRhcmdldCgpO1xuICAgIHRoaXMuY2xlYW51cERlcHMoKTtcbiAgfVxuICByZXR1cm4gdmFsdWVcbn07XG5cbi8qKlxuICogQWRkIGEgZGVwZW5kZW5jeSB0byB0aGlzIGRpcmVjdGl2ZS5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUuYWRkRGVwID0gZnVuY3Rpb24gYWRkRGVwIChkZXApIHtcbiAgdmFyIGlkID0gZGVwLmlkO1xuICBpZiAoIXRoaXMubmV3RGVwSWRzLmhhcyhpZCkpIHtcbiAgICB0aGlzLm5ld0RlcElkcy5hZGQoaWQpO1xuICAgIHRoaXMubmV3RGVwcy5wdXNoKGRlcCk7XG4gICAgaWYgKCF0aGlzLmRlcElkcy5oYXMoaWQpKSB7XG4gICAgICBkZXAuYWRkU3ViKHRoaXMpO1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBDbGVhbiB1cCBmb3IgZGVwZW5kZW5jeSBjb2xsZWN0aW9uLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS5jbGVhbnVwRGVwcyA9IGZ1bmN0aW9uIGNsZWFudXBEZXBzICgpIHtcbiAgdmFyIGkgPSB0aGlzLmRlcHMubGVuZ3RoO1xuICB3aGlsZSAoaS0tKSB7XG4gICAgdmFyIGRlcCA9IHRoaXMuZGVwc1tpXTtcbiAgICBpZiAoIXRoaXMubmV3RGVwSWRzLmhhcyhkZXAuaWQpKSB7XG4gICAgICBkZXAucmVtb3ZlU3ViKHRoaXMpO1xuICAgIH1cbiAgfVxuICB2YXIgdG1wID0gdGhpcy5kZXBJZHM7XG4gIHRoaXMuZGVwSWRzID0gdGhpcy5uZXdEZXBJZHM7XG4gIHRoaXMubmV3RGVwSWRzID0gdG1wO1xuICB0aGlzLm5ld0RlcElkcy5jbGVhcigpO1xuICB0bXAgPSB0aGlzLmRlcHM7XG4gIHRoaXMuZGVwcyA9IHRoaXMubmV3RGVwcztcbiAgdGhpcy5uZXdEZXBzID0gdG1wO1xuICB0aGlzLm5ld0RlcHMubGVuZ3RoID0gMDtcbn07XG5cbi8qKlxuICogU3Vic2NyaWJlciBpbnRlcmZhY2UuXG4gKiBXaWxsIGJlIGNhbGxlZCB3aGVuIGEgZGVwZW5kZW5jeSBjaGFuZ2VzLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUgKCkge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAodGhpcy5sYXp5KSB7XG4gICAgdGhpcy5kaXJ0eSA9IHRydWU7XG4gIH0gZWxzZSBpZiAodGhpcy5zeW5jKSB7XG4gICAgdGhpcy5ydW4oKTtcbiAgfSBlbHNlIHtcbiAgICBxdWV1ZVdhdGNoZXIodGhpcyk7XG4gIH1cbn07XG5cbi8qKlxuICogU2NoZWR1bGVyIGpvYiBpbnRlcmZhY2UuXG4gKiBXaWxsIGJlIGNhbGxlZCBieSB0aGUgc2NoZWR1bGVyLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiBydW4gKCkge1xuICBpZiAodGhpcy5hY3RpdmUpIHtcbiAgICB2YXIgdmFsdWUgPSB0aGlzLmdldCgpO1xuICAgIGlmIChcbiAgICAgIHZhbHVlICE9PSB0aGlzLnZhbHVlIHx8XG4gICAgICAvLyBEZWVwIHdhdGNoZXJzIGFuZCB3YXRjaGVycyBvbiBPYmplY3QvQXJyYXlzIHNob3VsZCBmaXJlIGV2ZW5cbiAgICAgIC8vIHdoZW4gdGhlIHZhbHVlIGlzIHRoZSBzYW1lLCBiZWNhdXNlIHRoZSB2YWx1ZSBtYXlcbiAgICAgIC8vIGhhdmUgbXV0YXRlZC5cbiAgICAgIGlzT2JqZWN0KHZhbHVlKSB8fFxuICAgICAgdGhpcy5kZWVwXG4gICAgKSB7XG4gICAgICAvLyBzZXQgbmV3IHZhbHVlXG4gICAgICB2YXIgb2xkVmFsdWUgPSB0aGlzLnZhbHVlO1xuICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgICAgaWYgKHRoaXMudXNlcikge1xuICAgICAgICB2YXIgaW5mbyA9IFwiY2FsbGJhY2sgZm9yIHdhdGNoZXIgXFxcIlwiICsgKHRoaXMuZXhwcmVzc2lvbikgKyBcIlxcXCJcIjtcbiAgICAgICAgaW52b2tlV2l0aEVycm9ySGFuZGxpbmcodGhpcy5jYiwgdGhpcy52bSwgW3ZhbHVlLCBvbGRWYWx1ZV0sIHRoaXMudm0sIGluZm8pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5jYi5jYWxsKHRoaXMudm0sIHZhbHVlLCBvbGRWYWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIEV2YWx1YXRlIHRoZSB2YWx1ZSBvZiB0aGUgd2F0Y2hlci5cbiAqIFRoaXMgb25seSBnZXRzIGNhbGxlZCBmb3IgbGF6eSB3YXRjaGVycy5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUuZXZhbHVhdGUgPSBmdW5jdGlvbiBldmFsdWF0ZSAoKSB7XG4gIHRoaXMudmFsdWUgPSB0aGlzLmdldCgpO1xuICB0aGlzLmRpcnR5ID0gZmFsc2U7XG59O1xuXG4vKipcbiAqIERlcGVuZCBvbiBhbGwgZGVwcyBjb2xsZWN0ZWQgYnkgdGhpcyB3YXRjaGVyLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS5kZXBlbmQgPSBmdW5jdGlvbiBkZXBlbmQgKCkge1xuICB2YXIgaSA9IHRoaXMuZGVwcy5sZW5ndGg7XG4gIHdoaWxlIChpLS0pIHtcbiAgICB0aGlzLmRlcHNbaV0uZGVwZW5kKCk7XG4gIH1cbn07XG5cbi8qKlxuICogUmVtb3ZlIHNlbGYgZnJvbSBhbGwgZGVwZW5kZW5jaWVzJyBzdWJzY3JpYmVyIGxpc3QuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLnRlYXJkb3duID0gZnVuY3Rpb24gdGVhcmRvd24gKCkge1xuICBpZiAodGhpcy5hY3RpdmUpIHtcbiAgICAvLyByZW1vdmUgc2VsZiBmcm9tIHZtJ3Mgd2F0Y2hlciBsaXN0XG4gICAgLy8gdGhpcyBpcyBhIHNvbWV3aGF0IGV4cGVuc2l2ZSBvcGVyYXRpb24gc28gd2Ugc2tpcCBpdFxuICAgIC8vIGlmIHRoZSB2bSBpcyBiZWluZyBkZXN0cm95ZWQuXG4gICAgaWYgKCF0aGlzLnZtLl9pc0JlaW5nRGVzdHJveWVkKSB7XG4gICAgICByZW1vdmUodGhpcy52bS5fd2F0Y2hlcnMsIHRoaXMpO1xuICAgIH1cbiAgICB2YXIgaSA9IHRoaXMuZGVwcy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgdGhpcy5kZXBzW2ldLnJlbW92ZVN1Yih0aGlzKTtcbiAgICB9XG4gICAgdGhpcy5hY3RpdmUgPSBmYWxzZTtcbiAgfVxufTtcblxuLyogICovXG5cbnZhciBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24gPSB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBub29wLFxuICBzZXQ6IG5vb3Bcbn07XG5cbmZ1bmN0aW9uIHByb3h5ICh0YXJnZXQsIHNvdXJjZUtleSwga2V5KSB7XG4gIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5nZXQgPSBmdW5jdGlvbiBwcm94eUdldHRlciAoKSB7XG4gICAgcmV0dXJuIHRoaXNbc291cmNlS2V5XVtrZXldXG4gIH07XG4gIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5zZXQgPSBmdW5jdGlvbiBwcm94eVNldHRlciAodmFsKSB7XG4gICAgdGhpc1tzb3VyY2VLZXldW2tleV0gPSB2YWw7XG4gIH07XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uKTtcbn1cblxuZnVuY3Rpb24gaW5pdFN0YXRlICh2bSkge1xuICB2bS5fd2F0Y2hlcnMgPSBbXTtcbiAgdmFyIG9wdHMgPSB2bS4kb3B0aW9ucztcbiAgaWYgKG9wdHMucHJvcHMpIHsgaW5pdFByb3BzKHZtLCBvcHRzLnByb3BzKTsgfVxuICBpZiAob3B0cy5tZXRob2RzKSB7IGluaXRNZXRob2RzKHZtLCBvcHRzLm1ldGhvZHMpOyB9XG4gIGlmIChvcHRzLmRhdGEpIHtcbiAgICBpbml0RGF0YSh2bSk7XG4gIH0gZWxzZSB7XG4gICAgb2JzZXJ2ZSh2bS5fZGF0YSA9IHt9LCB0cnVlIC8qIGFzUm9vdERhdGEgKi8pO1xuICB9XG4gIGlmIChvcHRzLmNvbXB1dGVkKSB7IGluaXRDb21wdXRlZCh2bSwgb3B0cy5jb21wdXRlZCk7IH1cbiAgaWYgKG9wdHMud2F0Y2ggJiYgb3B0cy53YXRjaCAhPT0gbmF0aXZlV2F0Y2gpIHtcbiAgICBpbml0V2F0Y2godm0sIG9wdHMud2F0Y2gpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluaXRQcm9wcyAodm0sIHByb3BzT3B0aW9ucykge1xuICB2YXIgcHJvcHNEYXRhID0gdm0uJG9wdGlvbnMucHJvcHNEYXRhIHx8IHt9O1xuICB2YXIgcHJvcHMgPSB2bS5fcHJvcHMgPSB7fTtcbiAgLy8gY2FjaGUgcHJvcCBrZXlzIHNvIHRoYXQgZnV0dXJlIHByb3BzIHVwZGF0ZXMgY2FuIGl0ZXJhdGUgdXNpbmcgQXJyYXlcbiAgLy8gaW5zdGVhZCBvZiBkeW5hbWljIG9iamVjdCBrZXkgZW51bWVyYXRpb24uXG4gIHZhciBrZXlzID0gdm0uJG9wdGlvbnMuX3Byb3BLZXlzID0gW107XG4gIHZhciBpc1Jvb3QgPSAhdm0uJHBhcmVudDtcbiAgLy8gcm9vdCBpbnN0YW5jZSBwcm9wcyBzaG91bGQgYmUgY29udmVydGVkXG4gIGlmICghaXNSb290KSB7XG4gICAgdG9nZ2xlT2JzZXJ2aW5nKGZhbHNlKTtcbiAgfVxuICB2YXIgbG9vcCA9IGZ1bmN0aW9uICgga2V5ICkge1xuICAgIGtleXMucHVzaChrZXkpO1xuICAgIHZhciB2YWx1ZSA9IHZhbGlkYXRlUHJvcChrZXksIHByb3BzT3B0aW9ucywgcHJvcHNEYXRhLCB2bSk7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdmFyIGh5cGhlbmF0ZWRLZXkgPSBoeXBoZW5hdGUoa2V5KTtcbiAgICAgIGlmIChpc1Jlc2VydmVkQXR0cmlidXRlKGh5cGhlbmF0ZWRLZXkpIHx8XG4gICAgICAgICAgY29uZmlnLmlzUmVzZXJ2ZWRBdHRyKGh5cGhlbmF0ZWRLZXkpKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgKFwiXFxcIlwiICsgaHlwaGVuYXRlZEtleSArIFwiXFxcIiBpcyBhIHJlc2VydmVkIGF0dHJpYnV0ZSBhbmQgY2Fubm90IGJlIHVzZWQgYXMgY29tcG9uZW50IHByb3AuXCIpLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBkZWZpbmVSZWFjdGl2ZSQkMShwcm9wcywga2V5LCB2YWx1ZSwgZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIWlzUm9vdCAmJiAhaXNVcGRhdGluZ0NoaWxkQ29tcG9uZW50KSB7XG4gICAgICAgICAgd2FybihcbiAgICAgICAgICAgIFwiQXZvaWQgbXV0YXRpbmcgYSBwcm9wIGRpcmVjdGx5IHNpbmNlIHRoZSB2YWx1ZSB3aWxsIGJlIFwiICtcbiAgICAgICAgICAgIFwib3ZlcndyaXR0ZW4gd2hlbmV2ZXIgdGhlIHBhcmVudCBjb21wb25lbnQgcmUtcmVuZGVycy4gXCIgK1xuICAgICAgICAgICAgXCJJbnN0ZWFkLCB1c2UgYSBkYXRhIG9yIGNvbXB1dGVkIHByb3BlcnR5IGJhc2VkIG9uIHRoZSBwcm9wJ3MgXCIgK1xuICAgICAgICAgICAgXCJ2YWx1ZS4gUHJvcCBiZWluZyBtdXRhdGVkOiBcXFwiXCIgKyBrZXkgKyBcIlxcXCJcIixcbiAgICAgICAgICAgIHZtXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlZmluZVJlYWN0aXZlJCQxKHByb3BzLCBrZXksIHZhbHVlKTtcbiAgICB9XG4gICAgLy8gc3RhdGljIHByb3BzIGFyZSBhbHJlYWR5IHByb3hpZWQgb24gdGhlIGNvbXBvbmVudCdzIHByb3RvdHlwZVxuICAgIC8vIGR1cmluZyBWdWUuZXh0ZW5kKCkuIFdlIG9ubHkgbmVlZCB0byBwcm94eSBwcm9wcyBkZWZpbmVkIGF0XG4gICAgLy8gaW5zdGFudGlhdGlvbiBoZXJlLlxuICAgIGlmICghKGtleSBpbiB2bSkpIHtcbiAgICAgIHByb3h5KHZtLCBcIl9wcm9wc1wiLCBrZXkpO1xuICAgIH1cbiAgfTtcblxuICBmb3IgKHZhciBrZXkgaW4gcHJvcHNPcHRpb25zKSBsb29wKCBrZXkgKTtcbiAgdG9nZ2xlT2JzZXJ2aW5nKHRydWUpO1xufVxuXG5mdW5jdGlvbiBpbml0RGF0YSAodm0pIHtcbiAgdmFyIGRhdGEgPSB2bS4kb3B0aW9ucy5kYXRhO1xuICBkYXRhID0gdm0uX2RhdGEgPSB0eXBlb2YgZGF0YSA9PT0gJ2Z1bmN0aW9uJ1xuICAgID8gZ2V0RGF0YShkYXRhLCB2bSlcbiAgICA6IGRhdGEgfHwge307XG4gIGlmICghaXNQbGFpbk9iamVjdChkYXRhKSkge1xuICAgIGRhdGEgPSB7fTtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAnZGF0YSBmdW5jdGlvbnMgc2hvdWxkIHJldHVybiBhbiBvYmplY3Q6XFxuJyArXG4gICAgICAnaHR0cHM6Ly92dWVqcy5vcmcvdjIvZ3VpZGUvY29tcG9uZW50cy5odG1sI2RhdGEtTXVzdC1CZS1hLUZ1bmN0aW9uJyxcbiAgICAgIHZtXG4gICAgKTtcbiAgfVxuICAvLyBwcm94eSBkYXRhIG9uIGluc3RhbmNlXG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMoZGF0YSk7XG4gIHZhciBwcm9wcyA9IHZtLiRvcHRpb25zLnByb3BzO1xuICB2YXIgbWV0aG9kcyA9IHZtLiRvcHRpb25zLm1ldGhvZHM7XG4gIHZhciBpID0ga2V5cy5sZW5ndGg7XG4gIHdoaWxlIChpLS0pIHtcbiAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKG1ldGhvZHMgJiYgaGFzT3duKG1ldGhvZHMsIGtleSkpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAoXCJNZXRob2QgXFxcIlwiICsga2V5ICsgXCJcXFwiIGhhcyBhbHJlYWR5IGJlZW4gZGVmaW5lZCBhcyBhIGRhdGEgcHJvcGVydHkuXCIpLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChwcm9wcyAmJiBoYXNPd24ocHJvcHMsIGtleSkpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgXCJUaGUgZGF0YSBwcm9wZXJ0eSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaXMgYWxyZWFkeSBkZWNsYXJlZCBhcyBhIHByb3AuIFwiICtcbiAgICAgICAgXCJVc2UgcHJvcCBkZWZhdWx0IHZhbHVlIGluc3RlYWQuXCIsXG4gICAgICAgIHZtXG4gICAgICApO1xuICAgIH0gZWxzZSBpZiAoIWlzUmVzZXJ2ZWQoa2V5KSkge1xuICAgICAgcHJveHkodm0sIFwiX2RhdGFcIiwga2V5KTtcbiAgICB9XG4gIH1cbiAgLy8gb2JzZXJ2ZSBkYXRhXG4gIG9ic2VydmUoZGF0YSwgdHJ1ZSAvKiBhc1Jvb3REYXRhICovKTtcbn1cblxuZnVuY3Rpb24gZ2V0RGF0YSAoZGF0YSwgdm0pIHtcbiAgLy8gIzc1NzMgZGlzYWJsZSBkZXAgY29sbGVjdGlvbiB3aGVuIGludm9raW5nIGRhdGEgZ2V0dGVyc1xuICBwdXNoVGFyZ2V0KCk7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGRhdGEuY2FsbCh2bSwgdm0pXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBoYW5kbGVFcnJvcihlLCB2bSwgXCJkYXRhKClcIik7XG4gICAgcmV0dXJuIHt9XG4gIH0gZmluYWxseSB7XG4gICAgcG9wVGFyZ2V0KCk7XG4gIH1cbn1cblxudmFyIGNvbXB1dGVkV2F0Y2hlck9wdGlvbnMgPSB7IGxhenk6IHRydWUgfTtcblxuZnVuY3Rpb24gaW5pdENvbXB1dGVkICh2bSwgY29tcHV0ZWQpIHtcbiAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gIHZhciB3YXRjaGVycyA9IHZtLl9jb21wdXRlZFdhdGNoZXJzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgLy8gY29tcHV0ZWQgcHJvcGVydGllcyBhcmUganVzdCBnZXR0ZXJzIGR1cmluZyBTU1JcbiAgdmFyIGlzU1NSID0gaXNTZXJ2ZXJSZW5kZXJpbmcoKTtcblxuICBmb3IgKHZhciBrZXkgaW4gY29tcHV0ZWQpIHtcbiAgICB2YXIgdXNlckRlZiA9IGNvbXB1dGVkW2tleV07XG4gICAgdmFyIGdldHRlciA9IHR5cGVvZiB1c2VyRGVmID09PSAnZnVuY3Rpb24nID8gdXNlckRlZiA6IHVzZXJEZWYuZ2V0O1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGdldHRlciA9PSBudWxsKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAoXCJHZXR0ZXIgaXMgbWlzc2luZyBmb3IgY29tcHV0ZWQgcHJvcGVydHkgXFxcIlwiICsga2V5ICsgXCJcXFwiLlwiKSxcbiAgICAgICAgdm1cbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKCFpc1NTUikge1xuICAgICAgLy8gY3JlYXRlIGludGVybmFsIHdhdGNoZXIgZm9yIHRoZSBjb21wdXRlZCBwcm9wZXJ0eS5cbiAgICAgIHdhdGNoZXJzW2tleV0gPSBuZXcgV2F0Y2hlcihcbiAgICAgICAgdm0sXG4gICAgICAgIGdldHRlciB8fCBub29wLFxuICAgICAgICBub29wLFxuICAgICAgICBjb21wdXRlZFdhdGNoZXJPcHRpb25zXG4gICAgICApO1xuICAgIH1cblxuICAgIC8vIGNvbXBvbmVudC1kZWZpbmVkIGNvbXB1dGVkIHByb3BlcnRpZXMgYXJlIGFscmVhZHkgZGVmaW5lZCBvbiB0aGVcbiAgICAvLyBjb21wb25lbnQgcHJvdG90eXBlLiBXZSBvbmx5IG5lZWQgdG8gZGVmaW5lIGNvbXB1dGVkIHByb3BlcnRpZXMgZGVmaW5lZFxuICAgIC8vIGF0IGluc3RhbnRpYXRpb24gaGVyZS5cbiAgICBpZiAoIShrZXkgaW4gdm0pKSB7XG4gICAgICBkZWZpbmVDb21wdXRlZCh2bSwga2V5LCB1c2VyRGVmKTtcbiAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmIChrZXkgaW4gdm0uJGRhdGEpIHtcbiAgICAgICAgd2FybigoXCJUaGUgY29tcHV0ZWQgcHJvcGVydHkgXFxcIlwiICsga2V5ICsgXCJcXFwiIGlzIGFscmVhZHkgZGVmaW5lZCBpbiBkYXRhLlwiKSwgdm0pO1xuICAgICAgfSBlbHNlIGlmICh2bS4kb3B0aW9ucy5wcm9wcyAmJiBrZXkgaW4gdm0uJG9wdGlvbnMucHJvcHMpIHtcbiAgICAgICAgd2FybigoXCJUaGUgY29tcHV0ZWQgcHJvcGVydHkgXFxcIlwiICsga2V5ICsgXCJcXFwiIGlzIGFscmVhZHkgZGVmaW5lZCBhcyBhIHByb3AuXCIpLCB2bSk7XG4gICAgICB9IGVsc2UgaWYgKHZtLiRvcHRpb25zLm1ldGhvZHMgJiYga2V5IGluIHZtLiRvcHRpb25zLm1ldGhvZHMpIHtcbiAgICAgICAgd2FybigoXCJUaGUgY29tcHV0ZWQgcHJvcGVydHkgXFxcIlwiICsga2V5ICsgXCJcXFwiIGlzIGFscmVhZHkgZGVmaW5lZCBhcyBhIG1ldGhvZC5cIiksIHZtKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZGVmaW5lQ29tcHV0ZWQgKFxuICB0YXJnZXQsXG4gIGtleSxcbiAgdXNlckRlZlxuKSB7XG4gIHZhciBzaG91bGRDYWNoZSA9ICFpc1NlcnZlclJlbmRlcmluZygpO1xuICBpZiAodHlwZW9mIHVzZXJEZWYgPT09ICdmdW5jdGlvbicpIHtcbiAgICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uZ2V0ID0gc2hvdWxkQ2FjaGVcbiAgICAgID8gY3JlYXRlQ29tcHV0ZWRHZXR0ZXIoa2V5KVxuICAgICAgOiBjcmVhdGVHZXR0ZXJJbnZva2VyKHVzZXJEZWYpO1xuICAgIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5zZXQgPSBub29wO1xuICB9IGVsc2Uge1xuICAgIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5nZXQgPSB1c2VyRGVmLmdldFxuICAgICAgPyBzaG91bGRDYWNoZSAmJiB1c2VyRGVmLmNhY2hlICE9PSBmYWxzZVxuICAgICAgICA/IGNyZWF0ZUNvbXB1dGVkR2V0dGVyKGtleSlcbiAgICAgICAgOiBjcmVhdGVHZXR0ZXJJbnZva2VyKHVzZXJEZWYuZ2V0KVxuICAgICAgOiBub29wO1xuICAgIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5zZXQgPSB1c2VyRGVmLnNldCB8fCBub29wO1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uc2V0ID09PSBub29wKSB7XG4gICAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLnNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgIChcIkNvbXB1dGVkIHByb3BlcnR5IFxcXCJcIiArIGtleSArIFwiXFxcIiB3YXMgYXNzaWduZWQgdG8gYnV0IGl0IGhhcyBubyBzZXR0ZXIuXCIpLFxuICAgICAgICB0aGlzXG4gICAgICApO1xuICAgIH07XG4gIH1cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24pO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVDb21wdXRlZEdldHRlciAoa2V5KSB7XG4gIHJldHVybiBmdW5jdGlvbiBjb21wdXRlZEdldHRlciAoKSB7XG4gICAgdmFyIHdhdGNoZXIgPSB0aGlzLl9jb21wdXRlZFdhdGNoZXJzICYmIHRoaXMuX2NvbXB1dGVkV2F0Y2hlcnNba2V5XTtcbiAgICBpZiAod2F0Y2hlcikge1xuICAgICAgaWYgKHdhdGNoZXIuZGlydHkpIHtcbiAgICAgICAgd2F0Y2hlci5ldmFsdWF0ZSgpO1xuICAgICAgfVxuICAgICAgaWYgKERlcC50YXJnZXQpIHtcbiAgICAgICAgd2F0Y2hlci5kZXBlbmQoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB3YXRjaGVyLnZhbHVlXG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUdldHRlckludm9rZXIoZm4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGNvbXB1dGVkR2V0dGVyICgpIHtcbiAgICByZXR1cm4gZm4uY2FsbCh0aGlzLCB0aGlzKVxuICB9XG59XG5cbmZ1bmN0aW9uIGluaXRNZXRob2RzICh2bSwgbWV0aG9kcykge1xuICB2YXIgcHJvcHMgPSB2bS4kb3B0aW9ucy5wcm9wcztcbiAgZm9yICh2YXIga2V5IGluIG1ldGhvZHMpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKHR5cGVvZiBtZXRob2RzW2tleV0gIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICBcIk1ldGhvZCBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaGFzIHR5cGUgXFxcIlwiICsgKHR5cGVvZiBtZXRob2RzW2tleV0pICsgXCJcXFwiIGluIHRoZSBjb21wb25lbnQgZGVmaW5pdGlvbi4gXCIgK1xuICAgICAgICAgIFwiRGlkIHlvdSByZWZlcmVuY2UgdGhlIGZ1bmN0aW9uIGNvcnJlY3RseT9cIixcbiAgICAgICAgICB2bVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKHByb3BzICYmIGhhc093bihwcm9wcywga2V5KSkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIChcIk1ldGhvZCBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaGFzIGFscmVhZHkgYmVlbiBkZWZpbmVkIGFzIGEgcHJvcC5cIiksXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmICgoa2V5IGluIHZtKSAmJiBpc1Jlc2VydmVkKGtleSkpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICBcIk1ldGhvZCBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgY29uZmxpY3RzIHdpdGggYW4gZXhpc3RpbmcgVnVlIGluc3RhbmNlIG1ldGhvZC4gXCIgK1xuICAgICAgICAgIFwiQXZvaWQgZGVmaW5pbmcgY29tcG9uZW50IG1ldGhvZHMgdGhhdCBzdGFydCB3aXRoIF8gb3IgJC5cIlxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICB2bVtrZXldID0gdHlwZW9mIG1ldGhvZHNba2V5XSAhPT0gJ2Z1bmN0aW9uJyA/IG5vb3AgOiBiaW5kKG1ldGhvZHNba2V5XSwgdm0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluaXRXYXRjaCAodm0sIHdhdGNoKSB7XG4gIGZvciAodmFyIGtleSBpbiB3YXRjaCkge1xuICAgIHZhciBoYW5kbGVyID0gd2F0Y2hba2V5XTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShoYW5kbGVyKSkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBoYW5kbGVyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNyZWF0ZVdhdGNoZXIodm0sIGtleSwgaGFuZGxlcltpXSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNyZWF0ZVdhdGNoZXIodm0sIGtleSwgaGFuZGxlcik7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVdhdGNoZXIgKFxuICB2bSxcbiAgZXhwT3JGbixcbiAgaGFuZGxlcixcbiAgb3B0aW9uc1xuKSB7XG4gIGlmIChpc1BsYWluT2JqZWN0KGhhbmRsZXIpKSB7XG4gICAgb3B0aW9ucyA9IGhhbmRsZXI7XG4gICAgaGFuZGxlciA9IGhhbmRsZXIuaGFuZGxlcjtcbiAgfVxuICBpZiAodHlwZW9mIGhhbmRsZXIgPT09ICdzdHJpbmcnKSB7XG4gICAgaGFuZGxlciA9IHZtW2hhbmRsZXJdO1xuICB9XG4gIHJldHVybiB2bS4kd2F0Y2goZXhwT3JGbiwgaGFuZGxlciwgb3B0aW9ucylcbn1cblxuZnVuY3Rpb24gc3RhdGVNaXhpbiAoVnVlKSB7XG4gIC8vIGZsb3cgc29tZWhvdyBoYXMgcHJvYmxlbXMgd2l0aCBkaXJlY3RseSBkZWNsYXJlZCBkZWZpbml0aW9uIG9iamVjdFxuICAvLyB3aGVuIHVzaW5nIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSwgc28gd2UgaGF2ZSB0byBwcm9jZWR1cmFsbHkgYnVpbGQgdXBcbiAgLy8gdGhlIG9iamVjdCBoZXJlLlxuICB2YXIgZGF0YURlZiA9IHt9O1xuICBkYXRhRGVmLmdldCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2RhdGEgfTtcbiAgdmFyIHByb3BzRGVmID0ge307XG4gIHByb3BzRGVmLmdldCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX3Byb3BzIH07XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgZGF0YURlZi5zZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAnQXZvaWQgcmVwbGFjaW5nIGluc3RhbmNlIHJvb3QgJGRhdGEuICcgK1xuICAgICAgICAnVXNlIG5lc3RlZCBkYXRhIHByb3BlcnRpZXMgaW5zdGVhZC4nLFxuICAgICAgICB0aGlzXG4gICAgICApO1xuICAgIH07XG4gICAgcHJvcHNEZWYuc2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgd2FybihcIiRwcm9wcyBpcyByZWFkb25seS5cIiwgdGhpcyk7XG4gICAgfTtcbiAgfVxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLnByb3RvdHlwZSwgJyRkYXRhJywgZGF0YURlZik7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUucHJvdG90eXBlLCAnJHByb3BzJywgcHJvcHNEZWYpO1xuXG4gIFZ1ZS5wcm90b3R5cGUuJHNldCA9IHNldDtcbiAgVnVlLnByb3RvdHlwZS4kZGVsZXRlID0gZGVsO1xuXG4gIFZ1ZS5wcm90b3R5cGUuJHdhdGNoID0gZnVuY3Rpb24gKFxuICAgIGV4cE9yRm4sXG4gICAgY2IsXG4gICAgb3B0aW9uc1xuICApIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIGlmIChpc1BsYWluT2JqZWN0KGNiKSkge1xuICAgICAgcmV0dXJuIGNyZWF0ZVdhdGNoZXIodm0sIGV4cE9yRm4sIGNiLCBvcHRpb25zKVxuICAgIH1cbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICBvcHRpb25zLnVzZXIgPSB0cnVlO1xuICAgIHZhciB3YXRjaGVyID0gbmV3IFdhdGNoZXIodm0sIGV4cE9yRm4sIGNiLCBvcHRpb25zKTtcbiAgICBpZiAob3B0aW9ucy5pbW1lZGlhdGUpIHtcbiAgICAgIHZhciBpbmZvID0gXCJjYWxsYmFjayBmb3IgaW1tZWRpYXRlIHdhdGNoZXIgXFxcIlwiICsgKHdhdGNoZXIuZXhwcmVzc2lvbikgKyBcIlxcXCJcIjtcbiAgICAgIHB1c2hUYXJnZXQoKTtcbiAgICAgIGludm9rZVdpdGhFcnJvckhhbmRsaW5nKGNiLCB2bSwgW3dhdGNoZXIudmFsdWVdLCB2bSwgaW5mbyk7XG4gICAgICBwb3BUYXJnZXQoKTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHVud2F0Y2hGbiAoKSB7XG4gICAgICB3YXRjaGVyLnRlYXJkb3duKCk7XG4gICAgfVxuICB9O1xufVxuXG4vKiAgKi9cblxudmFyIHVpZCQzID0gMDtcblxuZnVuY3Rpb24gaW5pdE1peGluIChWdWUpIHtcbiAgVnVlLnByb3RvdHlwZS5faW5pdCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICAvLyBhIHVpZFxuICAgIHZtLl91aWQgPSB1aWQkMysrO1xuXG4gICAgdmFyIHN0YXJ0VGFnLCBlbmRUYWc7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgY29uZmlnLnBlcmZvcm1hbmNlICYmIG1hcmspIHtcbiAgICAgIHN0YXJ0VGFnID0gXCJ2dWUtcGVyZi1zdGFydDpcIiArICh2bS5fdWlkKTtcbiAgICAgIGVuZFRhZyA9IFwidnVlLXBlcmYtZW5kOlwiICsgKHZtLl91aWQpO1xuICAgICAgbWFyayhzdGFydFRhZyk7XG4gICAgfVxuXG4gICAgLy8gYSBmbGFnIHRvIGF2b2lkIHRoaXMgYmVpbmcgb2JzZXJ2ZWRcbiAgICB2bS5faXNWdWUgPSB0cnVlO1xuICAgIC8vIG1lcmdlIG9wdGlvbnNcbiAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLl9pc0NvbXBvbmVudCkge1xuICAgICAgLy8gb3B0aW1pemUgaW50ZXJuYWwgY29tcG9uZW50IGluc3RhbnRpYXRpb25cbiAgICAgIC8vIHNpbmNlIGR5bmFtaWMgb3B0aW9ucyBtZXJnaW5nIGlzIHByZXR0eSBzbG93LCBhbmQgbm9uZSBvZiB0aGVcbiAgICAgIC8vIGludGVybmFsIGNvbXBvbmVudCBvcHRpb25zIG5lZWRzIHNwZWNpYWwgdHJlYXRtZW50LlxuICAgICAgaW5pdEludGVybmFsQ29tcG9uZW50KHZtLCBvcHRpb25zKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdm0uJG9wdGlvbnMgPSBtZXJnZU9wdGlvbnMoXG4gICAgICAgIHJlc29sdmVDb25zdHJ1Y3Rvck9wdGlvbnModm0uY29uc3RydWN0b3IpLFxuICAgICAgICBvcHRpb25zIHx8IHt9LFxuICAgICAgICB2bVxuICAgICAgKTtcbiAgICB9XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaW5pdFByb3h5KHZtKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdm0uX3JlbmRlclByb3h5ID0gdm07XG4gICAgfVxuICAgIC8vIGV4cG9zZSByZWFsIHNlbGZcbiAgICB2bS5fc2VsZiA9IHZtO1xuICAgIGluaXRMaWZlY3ljbGUodm0pO1xuICAgIGluaXRFdmVudHModm0pO1xuICAgIGluaXRSZW5kZXIodm0pO1xuICAgIGNhbGxIb29rKHZtLCAnYmVmb3JlQ3JlYXRlJyk7XG4gICAgaW5pdEluamVjdGlvbnModm0pOyAvLyByZXNvbHZlIGluamVjdGlvbnMgYmVmb3JlIGRhdGEvcHJvcHNcbiAgICBpbml0U3RhdGUodm0pO1xuICAgIGluaXRQcm92aWRlKHZtKTsgLy8gcmVzb2x2ZSBwcm92aWRlIGFmdGVyIGRhdGEvcHJvcHNcbiAgICBjYWxsSG9vayh2bSwgJ2NyZWF0ZWQnKTtcblxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGNvbmZpZy5wZXJmb3JtYW5jZSAmJiBtYXJrKSB7XG4gICAgICB2bS5fbmFtZSA9IGZvcm1hdENvbXBvbmVudE5hbWUodm0sIGZhbHNlKTtcbiAgICAgIG1hcmsoZW5kVGFnKTtcbiAgICAgIG1lYXN1cmUoKFwidnVlIFwiICsgKHZtLl9uYW1lKSArIFwiIGluaXRcIiksIHN0YXJ0VGFnLCBlbmRUYWcpO1xuICAgIH1cblxuICAgIGlmICh2bS4kb3B0aW9ucy5lbCkge1xuICAgICAgdm0uJG1vdW50KHZtLiRvcHRpb25zLmVsKTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGluaXRJbnRlcm5hbENvbXBvbmVudCAodm0sIG9wdGlvbnMpIHtcbiAgdmFyIG9wdHMgPSB2bS4kb3B0aW9ucyA9IE9iamVjdC5jcmVhdGUodm0uY29uc3RydWN0b3Iub3B0aW9ucyk7XG4gIC8vIGRvaW5nIHRoaXMgYmVjYXVzZSBpdCdzIGZhc3RlciB0aGFuIGR5bmFtaWMgZW51bWVyYXRpb24uXG4gIHZhciBwYXJlbnRWbm9kZSA9IG9wdGlvbnMuX3BhcmVudFZub2RlO1xuICBvcHRzLnBhcmVudCA9IG9wdGlvbnMucGFyZW50O1xuICBvcHRzLl9wYXJlbnRWbm9kZSA9IHBhcmVudFZub2RlO1xuXG4gIHZhciB2bm9kZUNvbXBvbmVudE9wdGlvbnMgPSBwYXJlbnRWbm9kZS5jb21wb25lbnRPcHRpb25zO1xuICBvcHRzLnByb3BzRGF0YSA9IHZub2RlQ29tcG9uZW50T3B0aW9ucy5wcm9wc0RhdGE7XG4gIG9wdHMuX3BhcmVudExpc3RlbmVycyA9IHZub2RlQ29tcG9uZW50T3B0aW9ucy5saXN0ZW5lcnM7XG4gIG9wdHMuX3JlbmRlckNoaWxkcmVuID0gdm5vZGVDb21wb25lbnRPcHRpb25zLmNoaWxkcmVuO1xuICBvcHRzLl9jb21wb25lbnRUYWcgPSB2bm9kZUNvbXBvbmVudE9wdGlvbnMudGFnO1xuXG4gIGlmIChvcHRpb25zLnJlbmRlcikge1xuICAgIG9wdHMucmVuZGVyID0gb3B0aW9ucy5yZW5kZXI7XG4gICAgb3B0cy5zdGF0aWNSZW5kZXJGbnMgPSBvcHRpb25zLnN0YXRpY1JlbmRlckZucztcbiAgfVxufVxuXG5mdW5jdGlvbiByZXNvbHZlQ29uc3RydWN0b3JPcHRpb25zIChDdG9yKSB7XG4gIHZhciBvcHRpb25zID0gQ3Rvci5vcHRpb25zO1xuICBpZiAoQ3Rvci5zdXBlcikge1xuICAgIHZhciBzdXBlck9wdGlvbnMgPSByZXNvbHZlQ29uc3RydWN0b3JPcHRpb25zKEN0b3Iuc3VwZXIpO1xuICAgIHZhciBjYWNoZWRTdXBlck9wdGlvbnMgPSBDdG9yLnN1cGVyT3B0aW9ucztcbiAgICBpZiAoc3VwZXJPcHRpb25zICE9PSBjYWNoZWRTdXBlck9wdGlvbnMpIHtcbiAgICAgIC8vIHN1cGVyIG9wdGlvbiBjaGFuZ2VkLFxuICAgICAgLy8gbmVlZCB0byByZXNvbHZlIG5ldyBvcHRpb25zLlxuICAgICAgQ3Rvci5zdXBlck9wdGlvbnMgPSBzdXBlck9wdGlvbnM7XG4gICAgICAvLyBjaGVjayBpZiB0aGVyZSBhcmUgYW55IGxhdGUtbW9kaWZpZWQvYXR0YWNoZWQgb3B0aW9ucyAoIzQ5NzYpXG4gICAgICB2YXIgbW9kaWZpZWRPcHRpb25zID0gcmVzb2x2ZU1vZGlmaWVkT3B0aW9ucyhDdG9yKTtcbiAgICAgIC8vIHVwZGF0ZSBiYXNlIGV4dGVuZCBvcHRpb25zXG4gICAgICBpZiAobW9kaWZpZWRPcHRpb25zKSB7XG4gICAgICAgIGV4dGVuZChDdG9yLmV4dGVuZE9wdGlvbnMsIG1vZGlmaWVkT3B0aW9ucyk7XG4gICAgICB9XG4gICAgICBvcHRpb25zID0gQ3Rvci5vcHRpb25zID0gbWVyZ2VPcHRpb25zKHN1cGVyT3B0aW9ucywgQ3Rvci5leHRlbmRPcHRpb25zKTtcbiAgICAgIGlmIChvcHRpb25zLm5hbWUpIHtcbiAgICAgICAgb3B0aW9ucy5jb21wb25lbnRzW29wdGlvbnMubmFtZV0gPSBDdG9yO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gb3B0aW9uc1xufVxuXG5mdW5jdGlvbiByZXNvbHZlTW9kaWZpZWRPcHRpb25zIChDdG9yKSB7XG4gIHZhciBtb2RpZmllZDtcbiAgdmFyIGxhdGVzdCA9IEN0b3Iub3B0aW9ucztcbiAgdmFyIHNlYWxlZCA9IEN0b3Iuc2VhbGVkT3B0aW9ucztcbiAgZm9yICh2YXIga2V5IGluIGxhdGVzdCkge1xuICAgIGlmIChsYXRlc3Rba2V5XSAhPT0gc2VhbGVkW2tleV0pIHtcbiAgICAgIGlmICghbW9kaWZpZWQpIHsgbW9kaWZpZWQgPSB7fTsgfVxuICAgICAgbW9kaWZpZWRba2V5XSA9IGxhdGVzdFtrZXldO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbW9kaWZpZWRcbn1cblxuZnVuY3Rpb24gVnVlIChvcHRpb25zKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgISh0aGlzIGluc3RhbmNlb2YgVnVlKVxuICApIHtcbiAgICB3YXJuKCdWdWUgaXMgYSBjb25zdHJ1Y3RvciBhbmQgc2hvdWxkIGJlIGNhbGxlZCB3aXRoIHRoZSBgbmV3YCBrZXl3b3JkJyk7XG4gIH1cbiAgdGhpcy5faW5pdChvcHRpb25zKTtcbn1cblxuaW5pdE1peGluKFZ1ZSk7XG5zdGF0ZU1peGluKFZ1ZSk7XG5ldmVudHNNaXhpbihWdWUpO1xubGlmZWN5Y2xlTWl4aW4oVnVlKTtcbnJlbmRlck1peGluKFZ1ZSk7XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0VXNlIChWdWUpIHtcbiAgVnVlLnVzZSA9IGZ1bmN0aW9uIChwbHVnaW4pIHtcbiAgICB2YXIgaW5zdGFsbGVkUGx1Z2lucyA9ICh0aGlzLl9pbnN0YWxsZWRQbHVnaW5zIHx8ICh0aGlzLl9pbnN0YWxsZWRQbHVnaW5zID0gW10pKTtcbiAgICBpZiAoaW5zdGFsbGVkUGx1Z2lucy5pbmRleE9mKHBsdWdpbikgPiAtMSkge1xuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG5cbiAgICAvLyBhZGRpdGlvbmFsIHBhcmFtZXRlcnNcbiAgICB2YXIgYXJncyA9IHRvQXJyYXkoYXJndW1lbnRzLCAxKTtcbiAgICBhcmdzLnVuc2hpZnQodGhpcyk7XG4gICAgaWYgKHR5cGVvZiBwbHVnaW4uaW5zdGFsbCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcGx1Z2luLmluc3RhbGwuYXBwbHkocGx1Z2luLCBhcmdzKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBwbHVnaW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHBsdWdpbi5hcHBseShudWxsLCBhcmdzKTtcbiAgICB9XG4gICAgaW5zdGFsbGVkUGx1Z2lucy5wdXNoKHBsdWdpbik7XG4gICAgcmV0dXJuIHRoaXNcbiAgfTtcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRNaXhpbiQxIChWdWUpIHtcbiAgVnVlLm1peGluID0gZnVuY3Rpb24gKG1peGluKSB7XG4gICAgdGhpcy5vcHRpb25zID0gbWVyZ2VPcHRpb25zKHRoaXMub3B0aW9ucywgbWl4aW4pO1xuICAgIHJldHVybiB0aGlzXG4gIH07XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0RXh0ZW5kIChWdWUpIHtcbiAgLyoqXG4gICAqIEVhY2ggaW5zdGFuY2UgY29uc3RydWN0b3IsIGluY2x1ZGluZyBWdWUsIGhhcyBhIHVuaXF1ZVxuICAgKiBjaWQuIFRoaXMgZW5hYmxlcyB1cyB0byBjcmVhdGUgd3JhcHBlZCBcImNoaWxkXG4gICAqIGNvbnN0cnVjdG9yc1wiIGZvciBwcm90b3R5cGFsIGluaGVyaXRhbmNlIGFuZCBjYWNoZSB0aGVtLlxuICAgKi9cbiAgVnVlLmNpZCA9IDA7XG4gIHZhciBjaWQgPSAxO1xuXG4gIC8qKlxuICAgKiBDbGFzcyBpbmhlcml0YW5jZVxuICAgKi9cbiAgVnVlLmV4dGVuZCA9IGZ1bmN0aW9uIChleHRlbmRPcHRpb25zKSB7XG4gICAgZXh0ZW5kT3B0aW9ucyA9IGV4dGVuZE9wdGlvbnMgfHwge307XG4gICAgdmFyIFN1cGVyID0gdGhpcztcbiAgICB2YXIgU3VwZXJJZCA9IFN1cGVyLmNpZDtcbiAgICB2YXIgY2FjaGVkQ3RvcnMgPSBleHRlbmRPcHRpb25zLl9DdG9yIHx8IChleHRlbmRPcHRpb25zLl9DdG9yID0ge30pO1xuICAgIGlmIChjYWNoZWRDdG9yc1tTdXBlcklkXSkge1xuICAgICAgcmV0dXJuIGNhY2hlZEN0b3JzW1N1cGVySWRdXG4gICAgfVxuXG4gICAgdmFyIG5hbWUgPSBleHRlbmRPcHRpb25zLm5hbWUgfHwgU3VwZXIub3B0aW9ucy5uYW1lO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIG5hbWUpIHtcbiAgICAgIHZhbGlkYXRlQ29tcG9uZW50TmFtZShuYW1lKTtcbiAgICB9XG5cbiAgICB2YXIgU3ViID0gZnVuY3Rpb24gVnVlQ29tcG9uZW50IChvcHRpb25zKSB7XG4gICAgICB0aGlzLl9pbml0KG9wdGlvbnMpO1xuICAgIH07XG4gICAgU3ViLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoU3VwZXIucHJvdG90eXBlKTtcbiAgICBTdWIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gU3ViO1xuICAgIFN1Yi5jaWQgPSBjaWQrKztcbiAgICBTdWIub3B0aW9ucyA9IG1lcmdlT3B0aW9ucyhcbiAgICAgIFN1cGVyLm9wdGlvbnMsXG4gICAgICBleHRlbmRPcHRpb25zXG4gICAgKTtcbiAgICBTdWJbJ3N1cGVyJ10gPSBTdXBlcjtcblxuICAgIC8vIEZvciBwcm9wcyBhbmQgY29tcHV0ZWQgcHJvcGVydGllcywgd2UgZGVmaW5lIHRoZSBwcm94eSBnZXR0ZXJzIG9uXG4gICAgLy8gdGhlIFZ1ZSBpbnN0YW5jZXMgYXQgZXh0ZW5zaW9uIHRpbWUsIG9uIHRoZSBleHRlbmRlZCBwcm90b3R5cGUuIFRoaXNcbiAgICAvLyBhdm9pZHMgT2JqZWN0LmRlZmluZVByb3BlcnR5IGNhbGxzIGZvciBlYWNoIGluc3RhbmNlIGNyZWF0ZWQuXG4gICAgaWYgKFN1Yi5vcHRpb25zLnByb3BzKSB7XG4gICAgICBpbml0UHJvcHMkMShTdWIpO1xuICAgIH1cbiAgICBpZiAoU3ViLm9wdGlvbnMuY29tcHV0ZWQpIHtcbiAgICAgIGluaXRDb21wdXRlZCQxKFN1Yik7XG4gICAgfVxuXG4gICAgLy8gYWxsb3cgZnVydGhlciBleHRlbnNpb24vbWl4aW4vcGx1Z2luIHVzYWdlXG4gICAgU3ViLmV4dGVuZCA9IFN1cGVyLmV4dGVuZDtcbiAgICBTdWIubWl4aW4gPSBTdXBlci5taXhpbjtcbiAgICBTdWIudXNlID0gU3VwZXIudXNlO1xuXG4gICAgLy8gY3JlYXRlIGFzc2V0IHJlZ2lzdGVycywgc28gZXh0ZW5kZWQgY2xhc3Nlc1xuICAgIC8vIGNhbiBoYXZlIHRoZWlyIHByaXZhdGUgYXNzZXRzIHRvby5cbiAgICBBU1NFVF9UWVBFUy5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgICBTdWJbdHlwZV0gPSBTdXBlclt0eXBlXTtcbiAgICB9KTtcbiAgICAvLyBlbmFibGUgcmVjdXJzaXZlIHNlbGYtbG9va3VwXG4gICAgaWYgKG5hbWUpIHtcbiAgICAgIFN1Yi5vcHRpb25zLmNvbXBvbmVudHNbbmFtZV0gPSBTdWI7XG4gICAgfVxuXG4gICAgLy8ga2VlcCBhIHJlZmVyZW5jZSB0byB0aGUgc3VwZXIgb3B0aW9ucyBhdCBleHRlbnNpb24gdGltZS5cbiAgICAvLyBsYXRlciBhdCBpbnN0YW50aWF0aW9uIHdlIGNhbiBjaGVjayBpZiBTdXBlcidzIG9wdGlvbnMgaGF2ZVxuICAgIC8vIGJlZW4gdXBkYXRlZC5cbiAgICBTdWIuc3VwZXJPcHRpb25zID0gU3VwZXIub3B0aW9ucztcbiAgICBTdWIuZXh0ZW5kT3B0aW9ucyA9IGV4dGVuZE9wdGlvbnM7XG4gICAgU3ViLnNlYWxlZE9wdGlvbnMgPSBleHRlbmQoe30sIFN1Yi5vcHRpb25zKTtcblxuICAgIC8vIGNhY2hlIGNvbnN0cnVjdG9yXG4gICAgY2FjaGVkQ3RvcnNbU3VwZXJJZF0gPSBTdWI7XG4gICAgcmV0dXJuIFN1YlxuICB9O1xufVxuXG5mdW5jdGlvbiBpbml0UHJvcHMkMSAoQ29tcCkge1xuICB2YXIgcHJvcHMgPSBDb21wLm9wdGlvbnMucHJvcHM7XG4gIGZvciAodmFyIGtleSBpbiBwcm9wcykge1xuICAgIHByb3h5KENvbXAucHJvdG90eXBlLCBcIl9wcm9wc1wiLCBrZXkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluaXRDb21wdXRlZCQxIChDb21wKSB7XG4gIHZhciBjb21wdXRlZCA9IENvbXAub3B0aW9ucy5jb21wdXRlZDtcbiAgZm9yICh2YXIga2V5IGluIGNvbXB1dGVkKSB7XG4gICAgZGVmaW5lQ29tcHV0ZWQoQ29tcC5wcm90b3R5cGUsIGtleSwgY29tcHV0ZWRba2V5XSk7XG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRBc3NldFJlZ2lzdGVycyAoVnVlKSB7XG4gIC8qKlxuICAgKiBDcmVhdGUgYXNzZXQgcmVnaXN0cmF0aW9uIG1ldGhvZHMuXG4gICAqL1xuICBBU1NFVF9UWVBFUy5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgVnVlW3R5cGVdID0gZnVuY3Rpb24gKFxuICAgICAgaWQsXG4gICAgICBkZWZpbml0aW9uXG4gICAgKSB7XG4gICAgICBpZiAoIWRlZmluaXRpb24pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9uc1t0eXBlICsgJ3MnXVtpZF1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB0eXBlID09PSAnY29tcG9uZW50Jykge1xuICAgICAgICAgIHZhbGlkYXRlQ29tcG9uZW50TmFtZShpZCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGUgPT09ICdjb21wb25lbnQnICYmIGlzUGxhaW5PYmplY3QoZGVmaW5pdGlvbikpIHtcbiAgICAgICAgICBkZWZpbml0aW9uLm5hbWUgPSBkZWZpbml0aW9uLm5hbWUgfHwgaWQ7XG4gICAgICAgICAgZGVmaW5pdGlvbiA9IHRoaXMub3B0aW9ucy5fYmFzZS5leHRlbmQoZGVmaW5pdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGUgPT09ICdkaXJlY3RpdmUnICYmIHR5cGVvZiBkZWZpbml0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgZGVmaW5pdGlvbiA9IHsgYmluZDogZGVmaW5pdGlvbiwgdXBkYXRlOiBkZWZpbml0aW9uIH07XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vcHRpb25zW3R5cGUgKyAncyddW2lkXSA9IGRlZmluaXRpb247XG4gICAgICAgIHJldHVybiBkZWZpbml0aW9uXG4gICAgICB9XG4gICAgfTtcbiAgfSk7XG59XG5cbi8qICAqL1xuXG5cblxuXG5cbmZ1bmN0aW9uIGdldENvbXBvbmVudE5hbWUgKG9wdHMpIHtcbiAgcmV0dXJuIG9wdHMgJiYgKG9wdHMuQ3Rvci5vcHRpb25zLm5hbWUgfHwgb3B0cy50YWcpXG59XG5cbmZ1bmN0aW9uIG1hdGNoZXMgKHBhdHRlcm4sIG5hbWUpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkocGF0dGVybikpIHtcbiAgICByZXR1cm4gcGF0dGVybi5pbmRleE9mKG5hbWUpID4gLTFcbiAgfSBlbHNlIGlmICh0eXBlb2YgcGF0dGVybiA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gcGF0dGVybi5zcGxpdCgnLCcpLmluZGV4T2YobmFtZSkgPiAtMVxuICB9IGVsc2UgaWYgKGlzUmVnRXhwKHBhdHRlcm4pKSB7XG4gICAgcmV0dXJuIHBhdHRlcm4udGVzdChuYW1lKVxuICB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIHJldHVybiBmYWxzZVxufVxuXG5mdW5jdGlvbiBwcnVuZUNhY2hlIChrZWVwQWxpdmVJbnN0YW5jZSwgZmlsdGVyKSB7XG4gIHZhciBjYWNoZSA9IGtlZXBBbGl2ZUluc3RhbmNlLmNhY2hlO1xuICB2YXIga2V5cyA9IGtlZXBBbGl2ZUluc3RhbmNlLmtleXM7XG4gIHZhciBfdm5vZGUgPSBrZWVwQWxpdmVJbnN0YW5jZS5fdm5vZGU7XG4gIGZvciAodmFyIGtleSBpbiBjYWNoZSkge1xuICAgIHZhciBlbnRyeSA9IGNhY2hlW2tleV07XG4gICAgaWYgKGVudHJ5KSB7XG4gICAgICB2YXIgbmFtZSA9IGVudHJ5Lm5hbWU7XG4gICAgICBpZiAobmFtZSAmJiAhZmlsdGVyKG5hbWUpKSB7XG4gICAgICAgIHBydW5lQ2FjaGVFbnRyeShjYWNoZSwga2V5LCBrZXlzLCBfdm5vZGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBwcnVuZUNhY2hlRW50cnkgKFxuICBjYWNoZSxcbiAga2V5LFxuICBrZXlzLFxuICBjdXJyZW50XG4pIHtcbiAgdmFyIGVudHJ5ID0gY2FjaGVba2V5XTtcbiAgaWYgKGVudHJ5ICYmICghY3VycmVudCB8fCBlbnRyeS50YWcgIT09IGN1cnJlbnQudGFnKSkge1xuICAgIGVudHJ5LmNvbXBvbmVudEluc3RhbmNlLiRkZXN0cm95KCk7XG4gIH1cbiAgY2FjaGVba2V5XSA9IG51bGw7XG4gIHJlbW92ZShrZXlzLCBrZXkpO1xufVxuXG52YXIgcGF0dGVyblR5cGVzID0gW1N0cmluZywgUmVnRXhwLCBBcnJheV07XG5cbnZhciBLZWVwQWxpdmUgPSB7XG4gIG5hbWU6ICdrZWVwLWFsaXZlJyxcbiAgYWJzdHJhY3Q6IHRydWUsXG5cbiAgcHJvcHM6IHtcbiAgICBpbmNsdWRlOiBwYXR0ZXJuVHlwZXMsXG4gICAgZXhjbHVkZTogcGF0dGVyblR5cGVzLFxuICAgIG1heDogW1N0cmluZywgTnVtYmVyXVxuICB9LFxuXG4gIG1ldGhvZHM6IHtcbiAgICBjYWNoZVZOb2RlOiBmdW5jdGlvbiBjYWNoZVZOb2RlKCkge1xuICAgICAgdmFyIHJlZiA9IHRoaXM7XG4gICAgICB2YXIgY2FjaGUgPSByZWYuY2FjaGU7XG4gICAgICB2YXIga2V5cyA9IHJlZi5rZXlzO1xuICAgICAgdmFyIHZub2RlVG9DYWNoZSA9IHJlZi52bm9kZVRvQ2FjaGU7XG4gICAgICB2YXIga2V5VG9DYWNoZSA9IHJlZi5rZXlUb0NhY2hlO1xuICAgICAgaWYgKHZub2RlVG9DYWNoZSkge1xuICAgICAgICB2YXIgdGFnID0gdm5vZGVUb0NhY2hlLnRhZztcbiAgICAgICAgdmFyIGNvbXBvbmVudEluc3RhbmNlID0gdm5vZGVUb0NhY2hlLmNvbXBvbmVudEluc3RhbmNlO1xuICAgICAgICB2YXIgY29tcG9uZW50T3B0aW9ucyA9IHZub2RlVG9DYWNoZS5jb21wb25lbnRPcHRpb25zO1xuICAgICAgICBjYWNoZVtrZXlUb0NhY2hlXSA9IHtcbiAgICAgICAgICBuYW1lOiBnZXRDb21wb25lbnROYW1lKGNvbXBvbmVudE9wdGlvbnMpLFxuICAgICAgICAgIHRhZzogdGFnLFxuICAgICAgICAgIGNvbXBvbmVudEluc3RhbmNlOiBjb21wb25lbnRJbnN0YW5jZSxcbiAgICAgICAgfTtcbiAgICAgICAga2V5cy5wdXNoKGtleVRvQ2FjaGUpO1xuICAgICAgICAvLyBwcnVuZSBvbGRlc3QgZW50cnlcbiAgICAgICAgaWYgKHRoaXMubWF4ICYmIGtleXMubGVuZ3RoID4gcGFyc2VJbnQodGhpcy5tYXgpKSB7XG4gICAgICAgICAgcHJ1bmVDYWNoZUVudHJ5KGNhY2hlLCBrZXlzWzBdLCBrZXlzLCB0aGlzLl92bm9kZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy52bm9kZVRvQ2FjaGUgPSBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICBjcmVhdGVkOiBmdW5jdGlvbiBjcmVhdGVkICgpIHtcbiAgICB0aGlzLmNhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB0aGlzLmtleXMgPSBbXTtcbiAgfSxcblxuICBkZXN0cm95ZWQ6IGZ1bmN0aW9uIGRlc3Ryb3llZCAoKSB7XG4gICAgZm9yICh2YXIga2V5IGluIHRoaXMuY2FjaGUpIHtcbiAgICAgIHBydW5lQ2FjaGVFbnRyeSh0aGlzLmNhY2hlLCBrZXksIHRoaXMua2V5cyk7XG4gICAgfVxuICB9LFxuXG4gIG1vdW50ZWQ6IGZ1bmN0aW9uIG1vdW50ZWQgKCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgdGhpcy5jYWNoZVZOb2RlKCk7XG4gICAgdGhpcy4kd2F0Y2goJ2luY2x1ZGUnLCBmdW5jdGlvbiAodmFsKSB7XG4gICAgICBwcnVuZUNhY2hlKHRoaXMkMSwgZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIG1hdGNoZXModmFsLCBuYW1lKTsgfSk7XG4gICAgfSk7XG4gICAgdGhpcy4kd2F0Y2goJ2V4Y2x1ZGUnLCBmdW5jdGlvbiAodmFsKSB7XG4gICAgICBwcnVuZUNhY2hlKHRoaXMkMSwgZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuICFtYXRjaGVzKHZhbCwgbmFtZSk7IH0pO1xuICAgIH0pO1xuICB9LFxuXG4gIHVwZGF0ZWQ6IGZ1bmN0aW9uIHVwZGF0ZWQgKCkge1xuICAgIHRoaXMuY2FjaGVWTm9kZSgpO1xuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyICgpIHtcbiAgICB2YXIgc2xvdCA9IHRoaXMuJHNsb3RzLmRlZmF1bHQ7XG4gICAgdmFyIHZub2RlID0gZ2V0Rmlyc3RDb21wb25lbnRDaGlsZChzbG90KTtcbiAgICB2YXIgY29tcG9uZW50T3B0aW9ucyA9IHZub2RlICYmIHZub2RlLmNvbXBvbmVudE9wdGlvbnM7XG4gICAgaWYgKGNvbXBvbmVudE9wdGlvbnMpIHtcbiAgICAgIC8vIGNoZWNrIHBhdHRlcm5cbiAgICAgIHZhciBuYW1lID0gZ2V0Q29tcG9uZW50TmFtZShjb21wb25lbnRPcHRpb25zKTtcbiAgICAgIHZhciByZWYgPSB0aGlzO1xuICAgICAgdmFyIGluY2x1ZGUgPSByZWYuaW5jbHVkZTtcbiAgICAgIHZhciBleGNsdWRlID0gcmVmLmV4Y2x1ZGU7XG4gICAgICBpZiAoXG4gICAgICAgIC8vIG5vdCBpbmNsdWRlZFxuICAgICAgICAoaW5jbHVkZSAmJiAoIW5hbWUgfHwgIW1hdGNoZXMoaW5jbHVkZSwgbmFtZSkpKSB8fFxuICAgICAgICAvLyBleGNsdWRlZFxuICAgICAgICAoZXhjbHVkZSAmJiBuYW1lICYmIG1hdGNoZXMoZXhjbHVkZSwgbmFtZSkpXG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuIHZub2RlXG4gICAgICB9XG5cbiAgICAgIHZhciByZWYkMSA9IHRoaXM7XG4gICAgICB2YXIgY2FjaGUgPSByZWYkMS5jYWNoZTtcbiAgICAgIHZhciBrZXlzID0gcmVmJDEua2V5cztcbiAgICAgIHZhciBrZXkgPSB2bm9kZS5rZXkgPT0gbnVsbFxuICAgICAgICAvLyBzYW1lIGNvbnN0cnVjdG9yIG1heSBnZXQgcmVnaXN0ZXJlZCBhcyBkaWZmZXJlbnQgbG9jYWwgY29tcG9uZW50c1xuICAgICAgICAvLyBzbyBjaWQgYWxvbmUgaXMgbm90IGVub3VnaCAoIzMyNjkpXG4gICAgICAgID8gY29tcG9uZW50T3B0aW9ucy5DdG9yLmNpZCArIChjb21wb25lbnRPcHRpb25zLnRhZyA/IChcIjo6XCIgKyAoY29tcG9uZW50T3B0aW9ucy50YWcpKSA6ICcnKVxuICAgICAgICA6IHZub2RlLmtleTtcbiAgICAgIGlmIChjYWNoZVtrZXldKSB7XG4gICAgICAgIHZub2RlLmNvbXBvbmVudEluc3RhbmNlID0gY2FjaGVba2V5XS5jb21wb25lbnRJbnN0YW5jZTtcbiAgICAgICAgLy8gbWFrZSBjdXJyZW50IGtleSBmcmVzaGVzdFxuICAgICAgICByZW1vdmUoa2V5cywga2V5KTtcbiAgICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBkZWxheSBzZXR0aW5nIHRoZSBjYWNoZSB1bnRpbCB1cGRhdGVcbiAgICAgICAgdGhpcy52bm9kZVRvQ2FjaGUgPSB2bm9kZTtcbiAgICAgICAgdGhpcy5rZXlUb0NhY2hlID0ga2V5O1xuICAgICAgfVxuXG4gICAgICB2bm9kZS5kYXRhLmtlZXBBbGl2ZSA9IHRydWU7XG4gICAgfVxuICAgIHJldHVybiB2bm9kZSB8fCAoc2xvdCAmJiBzbG90WzBdKVxuICB9XG59O1xuXG52YXIgYnVpbHRJbkNvbXBvbmVudHMgPSB7XG4gIEtlZXBBbGl2ZTogS2VlcEFsaXZlXG59O1xuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdEdsb2JhbEFQSSAoVnVlKSB7XG4gIC8vIGNvbmZpZ1xuICB2YXIgY29uZmlnRGVmID0ge307XG4gIGNvbmZpZ0RlZi5nZXQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBjb25maWc7IH07XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgY29uZmlnRGVmLnNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICdEbyBub3QgcmVwbGFjZSB0aGUgVnVlLmNvbmZpZyBvYmplY3QsIHNldCBpbmRpdmlkdWFsIGZpZWxkcyBpbnN0ZWFkLidcbiAgICAgICk7XG4gICAgfTtcbiAgfVxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLCAnY29uZmlnJywgY29uZmlnRGVmKTtcblxuICAvLyBleHBvc2VkIHV0aWwgbWV0aG9kcy5cbiAgLy8gTk9URTogdGhlc2UgYXJlIG5vdCBjb25zaWRlcmVkIHBhcnQgb2YgdGhlIHB1YmxpYyBBUEkgLSBhdm9pZCByZWx5aW5nIG9uXG4gIC8vIHRoZW0gdW5sZXNzIHlvdSBhcmUgYXdhcmUgb2YgdGhlIHJpc2suXG4gIFZ1ZS51dGlsID0ge1xuICAgIHdhcm46IHdhcm4sXG4gICAgZXh0ZW5kOiBleHRlbmQsXG4gICAgbWVyZ2VPcHRpb25zOiBtZXJnZU9wdGlvbnMsXG4gICAgZGVmaW5lUmVhY3RpdmU6IGRlZmluZVJlYWN0aXZlJCQxXG4gIH07XG5cbiAgVnVlLnNldCA9IHNldDtcbiAgVnVlLmRlbGV0ZSA9IGRlbDtcbiAgVnVlLm5leHRUaWNrID0gbmV4dFRpY2s7XG5cbiAgLy8gMi42IGV4cGxpY2l0IG9ic2VydmFibGUgQVBJXG4gIFZ1ZS5vYnNlcnZhYmxlID0gZnVuY3Rpb24gKG9iaikge1xuICAgIG9ic2VydmUob2JqKTtcbiAgICByZXR1cm4gb2JqXG4gIH07XG5cbiAgVnVlLm9wdGlvbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBBU1NFVF9UWVBFUy5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgVnVlLm9wdGlvbnNbdHlwZSArICdzJ10gPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB9KTtcblxuICAvLyB0aGlzIGlzIHVzZWQgdG8gaWRlbnRpZnkgdGhlIFwiYmFzZVwiIGNvbnN0cnVjdG9yIHRvIGV4dGVuZCBhbGwgcGxhaW4tb2JqZWN0XG4gIC8vIGNvbXBvbmVudHMgd2l0aCBpbiBXZWV4J3MgbXVsdGktaW5zdGFuY2Ugc2NlbmFyaW9zLlxuICBWdWUub3B0aW9ucy5fYmFzZSA9IFZ1ZTtcblxuICBleHRlbmQoVnVlLm9wdGlvbnMuY29tcG9uZW50cywgYnVpbHRJbkNvbXBvbmVudHMpO1xuXG4gIGluaXRVc2UoVnVlKTtcbiAgaW5pdE1peGluJDEoVnVlKTtcbiAgaW5pdEV4dGVuZChWdWUpO1xuICBpbml0QXNzZXRSZWdpc3RlcnMoVnVlKTtcbn1cblxuaW5pdEdsb2JhbEFQSShWdWUpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLnByb3RvdHlwZSwgJyRpc1NlcnZlcicsIHtcbiAgZ2V0OiBpc1NlcnZlclJlbmRlcmluZ1xufSk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUucHJvdG90eXBlLCAnJHNzckNvbnRleHQnLCB7XG4gIGdldDogZnVuY3Rpb24gZ2V0ICgpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHJldHVybiB0aGlzLiR2bm9kZSAmJiB0aGlzLiR2bm9kZS5zc3JDb250ZXh0XG4gIH1cbn0pO1xuXG4vLyBleHBvc2UgRnVuY3Rpb25hbFJlbmRlckNvbnRleHQgZm9yIHNzciBydW50aW1lIGhlbHBlciBpbnN0YWxsYXRpb25cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUsICdGdW5jdGlvbmFsUmVuZGVyQ29udGV4dCcsIHtcbiAgdmFsdWU6IEZ1bmN0aW9uYWxSZW5kZXJDb250ZXh0XG59KTtcblxuVnVlLnZlcnNpb24gPSAnMi42LjE0JztcblxuLyogICovXG5cbi8vIHRoZXNlIGFyZSByZXNlcnZlZCBmb3Igd2ViIGJlY2F1c2UgdGhleSBhcmUgZGlyZWN0bHkgY29tcGlsZWQgYXdheVxuLy8gZHVyaW5nIHRlbXBsYXRlIGNvbXBpbGF0aW9uXG52YXIgaXNSZXNlcnZlZEF0dHIgPSBtYWtlTWFwKCdzdHlsZSxjbGFzcycpO1xuXG4vLyBhdHRyaWJ1dGVzIHRoYXQgc2hvdWxkIGJlIHVzaW5nIHByb3BzIGZvciBiaW5kaW5nXG52YXIgYWNjZXB0VmFsdWUgPSBtYWtlTWFwKCdpbnB1dCx0ZXh0YXJlYSxvcHRpb24sc2VsZWN0LHByb2dyZXNzJyk7XG52YXIgbXVzdFVzZVByb3AgPSBmdW5jdGlvbiAodGFnLCB0eXBlLCBhdHRyKSB7XG4gIHJldHVybiAoXG4gICAgKGF0dHIgPT09ICd2YWx1ZScgJiYgYWNjZXB0VmFsdWUodGFnKSkgJiYgdHlwZSAhPT0gJ2J1dHRvbicgfHxcbiAgICAoYXR0ciA9PT0gJ3NlbGVjdGVkJyAmJiB0YWcgPT09ICdvcHRpb24nKSB8fFxuICAgIChhdHRyID09PSAnY2hlY2tlZCcgJiYgdGFnID09PSAnaW5wdXQnKSB8fFxuICAgIChhdHRyID09PSAnbXV0ZWQnICYmIHRhZyA9PT0gJ3ZpZGVvJylcbiAgKVxufTtcblxudmFyIGlzRW51bWVyYXRlZEF0dHIgPSBtYWtlTWFwKCdjb250ZW50ZWRpdGFibGUsZHJhZ2dhYmxlLHNwZWxsY2hlY2snKTtcblxudmFyIGlzVmFsaWRDb250ZW50RWRpdGFibGVWYWx1ZSA9IG1ha2VNYXAoJ2V2ZW50cyxjYXJldCx0eXBpbmcscGxhaW50ZXh0LW9ubHknKTtcblxudmFyIGNvbnZlcnRFbnVtZXJhdGVkVmFsdWUgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICByZXR1cm4gaXNGYWxzeUF0dHJWYWx1ZSh2YWx1ZSkgfHwgdmFsdWUgPT09ICdmYWxzZSdcbiAgICA/ICdmYWxzZSdcbiAgICAvLyBhbGxvdyBhcmJpdHJhcnkgc3RyaW5nIHZhbHVlIGZvciBjb250ZW50ZWRpdGFibGVcbiAgICA6IGtleSA9PT0gJ2NvbnRlbnRlZGl0YWJsZScgJiYgaXNWYWxpZENvbnRlbnRFZGl0YWJsZVZhbHVlKHZhbHVlKVxuICAgICAgPyB2YWx1ZVxuICAgICAgOiAndHJ1ZSdcbn07XG5cbnZhciBpc0Jvb2xlYW5BdHRyID0gbWFrZU1hcChcbiAgJ2FsbG93ZnVsbHNjcmVlbixhc3luYyxhdXRvZm9jdXMsYXV0b3BsYXksY2hlY2tlZCxjb21wYWN0LGNvbnRyb2xzLGRlY2xhcmUsJyArXG4gICdkZWZhdWx0LGRlZmF1bHRjaGVja2VkLGRlZmF1bHRtdXRlZCxkZWZhdWx0c2VsZWN0ZWQsZGVmZXIsZGlzYWJsZWQsJyArXG4gICdlbmFibGVkLGZvcm1ub3ZhbGlkYXRlLGhpZGRlbixpbmRldGVybWluYXRlLGluZXJ0LGlzbWFwLGl0ZW1zY29wZSxsb29wLG11bHRpcGxlLCcgK1xuICAnbXV0ZWQsbm9ocmVmLG5vcmVzaXplLG5vc2hhZGUsbm92YWxpZGF0ZSxub3dyYXAsb3BlbixwYXVzZW9uZXhpdCxyZWFkb25seSwnICtcbiAgJ3JlcXVpcmVkLHJldmVyc2VkLHNjb3BlZCxzZWFtbGVzcyxzZWxlY3RlZCxzb3J0YWJsZSwnICtcbiAgJ3RydWVzcGVlZCx0eXBlbXVzdG1hdGNoLHZpc2libGUnXG4pO1xuXG52YXIgeGxpbmtOUyA9ICdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rJztcblxudmFyIGlzWGxpbmsgPSBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gbmFtZS5jaGFyQXQoNSkgPT09ICc6JyAmJiBuYW1lLnNsaWNlKDAsIDUpID09PSAneGxpbmsnXG59O1xuXG52YXIgZ2V0WGxpbmtQcm9wID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIGlzWGxpbmsobmFtZSkgPyBuYW1lLnNsaWNlKDYsIG5hbWUubGVuZ3RoKSA6ICcnXG59O1xuXG52YXIgaXNGYWxzeUF0dHJWYWx1ZSA9IGZ1bmN0aW9uICh2YWwpIHtcbiAgcmV0dXJuIHZhbCA9PSBudWxsIHx8IHZhbCA9PT0gZmFsc2Vcbn07XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBnZW5DbGFzc0ZvclZub2RlICh2bm9kZSkge1xuICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7XG4gIHZhciBwYXJlbnROb2RlID0gdm5vZGU7XG4gIHZhciBjaGlsZE5vZGUgPSB2bm9kZTtcbiAgd2hpbGUgKGlzRGVmKGNoaWxkTm9kZS5jb21wb25lbnRJbnN0YW5jZSkpIHtcbiAgICBjaGlsZE5vZGUgPSBjaGlsZE5vZGUuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlO1xuICAgIGlmIChjaGlsZE5vZGUgJiYgY2hpbGROb2RlLmRhdGEpIHtcbiAgICAgIGRhdGEgPSBtZXJnZUNsYXNzRGF0YShjaGlsZE5vZGUuZGF0YSwgZGF0YSk7XG4gICAgfVxuICB9XG4gIHdoaWxlIChpc0RlZihwYXJlbnROb2RlID0gcGFyZW50Tm9kZS5wYXJlbnQpKSB7XG4gICAgaWYgKHBhcmVudE5vZGUgJiYgcGFyZW50Tm9kZS5kYXRhKSB7XG4gICAgICBkYXRhID0gbWVyZ2VDbGFzc0RhdGEoZGF0YSwgcGFyZW50Tm9kZS5kYXRhKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlbmRlckNsYXNzKGRhdGEuc3RhdGljQ2xhc3MsIGRhdGEuY2xhc3MpXG59XG5cbmZ1bmN0aW9uIG1lcmdlQ2xhc3NEYXRhIChjaGlsZCwgcGFyZW50KSB7XG4gIHJldHVybiB7XG4gICAgc3RhdGljQ2xhc3M6IGNvbmNhdChjaGlsZC5zdGF0aWNDbGFzcywgcGFyZW50LnN0YXRpY0NsYXNzKSxcbiAgICBjbGFzczogaXNEZWYoY2hpbGQuY2xhc3MpXG4gICAgICA/IFtjaGlsZC5jbGFzcywgcGFyZW50LmNsYXNzXVxuICAgICAgOiBwYXJlbnQuY2xhc3NcbiAgfVxufVxuXG5mdW5jdGlvbiByZW5kZXJDbGFzcyAoXG4gIHN0YXRpY0NsYXNzLFxuICBkeW5hbWljQ2xhc3Ncbikge1xuICBpZiAoaXNEZWYoc3RhdGljQ2xhc3MpIHx8IGlzRGVmKGR5bmFtaWNDbGFzcykpIHtcbiAgICByZXR1cm4gY29uY2F0KHN0YXRpY0NsYXNzLCBzdHJpbmdpZnlDbGFzcyhkeW5hbWljQ2xhc3MpKVxuICB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIHJldHVybiAnJ1xufVxuXG5mdW5jdGlvbiBjb25jYXQgKGEsIGIpIHtcbiAgcmV0dXJuIGEgPyBiID8gKGEgKyAnICcgKyBiKSA6IGEgOiAoYiB8fCAnJylcbn1cblxuZnVuY3Rpb24gc3RyaW5naWZ5Q2xhc3MgKHZhbHVlKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIHJldHVybiBzdHJpbmdpZnlBcnJheSh2YWx1ZSlcbiAgfVxuICBpZiAoaXNPYmplY3QodmFsdWUpKSB7XG4gICAgcmV0dXJuIHN0cmluZ2lmeU9iamVjdCh2YWx1ZSlcbiAgfVxuICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiB2YWx1ZVxuICB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIHJldHVybiAnJ1xufVxuXG5mdW5jdGlvbiBzdHJpbmdpZnlBcnJheSAodmFsdWUpIHtcbiAgdmFyIHJlcyA9ICcnO1xuICB2YXIgc3RyaW5naWZpZWQ7XG4gIGZvciAodmFyIGkgPSAwLCBsID0gdmFsdWUubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgaWYgKGlzRGVmKHN0cmluZ2lmaWVkID0gc3RyaW5naWZ5Q2xhc3ModmFsdWVbaV0pKSAmJiBzdHJpbmdpZmllZCAhPT0gJycpIHtcbiAgICAgIGlmIChyZXMpIHsgcmVzICs9ICcgJzsgfVxuICAgICAgcmVzICs9IHN0cmluZ2lmaWVkO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeU9iamVjdCAodmFsdWUpIHtcbiAgdmFyIHJlcyA9ICcnO1xuICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcbiAgICBpZiAodmFsdWVba2V5XSkge1xuICAgICAgaWYgKHJlcykgeyByZXMgKz0gJyAnOyB9XG4gICAgICByZXMgKz0ga2V5O1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbi8qICAqL1xuXG52YXIgbmFtZXNwYWNlTWFwID0ge1xuICBzdmc6ICdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsXG4gIG1hdGg6ICdodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MJ1xufTtcblxudmFyIGlzSFRNTFRhZyA9IG1ha2VNYXAoXG4gICdodG1sLGJvZHksYmFzZSxoZWFkLGxpbmssbWV0YSxzdHlsZSx0aXRsZSwnICtcbiAgJ2FkZHJlc3MsYXJ0aWNsZSxhc2lkZSxmb290ZXIsaGVhZGVyLGgxLGgyLGgzLGg0LGg1LGg2LGhncm91cCxuYXYsc2VjdGlvbiwnICtcbiAgJ2RpdixkZCxkbCxkdCxmaWdjYXB0aW9uLGZpZ3VyZSxwaWN0dXJlLGhyLGltZyxsaSxtYWluLG9sLHAscHJlLHVsLCcgK1xuICAnYSxiLGFiYnIsYmRpLGJkbyxicixjaXRlLGNvZGUsZGF0YSxkZm4sZW0saSxrYmQsbWFyayxxLHJwLHJ0LHJ0YyxydWJ5LCcgK1xuICAncyxzYW1wLHNtYWxsLHNwYW4sc3Ryb25nLHN1YixzdXAsdGltZSx1LHZhcix3YnIsYXJlYSxhdWRpbyxtYXAsdHJhY2ssdmlkZW8sJyArXG4gICdlbWJlZCxvYmplY3QscGFyYW0sc291cmNlLGNhbnZhcyxzY3JpcHQsbm9zY3JpcHQsZGVsLGlucywnICtcbiAgJ2NhcHRpb24sY29sLGNvbGdyb3VwLHRhYmxlLHRoZWFkLHRib2R5LHRkLHRoLHRyLCcgK1xuICAnYnV0dG9uLGRhdGFsaXN0LGZpZWxkc2V0LGZvcm0saW5wdXQsbGFiZWwsbGVnZW5kLG1ldGVyLG9wdGdyb3VwLG9wdGlvbiwnICtcbiAgJ291dHB1dCxwcm9ncmVzcyxzZWxlY3QsdGV4dGFyZWEsJyArXG4gICdkZXRhaWxzLGRpYWxvZyxtZW51LG1lbnVpdGVtLHN1bW1hcnksJyArXG4gICdjb250ZW50LGVsZW1lbnQsc2hhZG93LHRlbXBsYXRlLGJsb2NrcXVvdGUsaWZyYW1lLHRmb290J1xuKTtcblxuLy8gdGhpcyBtYXAgaXMgaW50ZW50aW9uYWxseSBzZWxlY3RpdmUsIG9ubHkgY292ZXJpbmcgU1ZHIGVsZW1lbnRzIHRoYXQgbWF5XG4vLyBjb250YWluIGNoaWxkIGVsZW1lbnRzLlxudmFyIGlzU1ZHID0gbWFrZU1hcChcbiAgJ3N2ZyxhbmltYXRlLGNpcmNsZSxjbGlwcGF0aCxjdXJzb3IsZGVmcyxkZXNjLGVsbGlwc2UsZmlsdGVyLGZvbnQtZmFjZSwnICtcbiAgJ2ZvcmVpZ25vYmplY3QsZyxnbHlwaCxpbWFnZSxsaW5lLG1hcmtlcixtYXNrLG1pc3NpbmctZ2x5cGgscGF0aCxwYXR0ZXJuLCcgK1xuICAncG9seWdvbixwb2x5bGluZSxyZWN0LHN3aXRjaCxzeW1ib2wsdGV4dCx0ZXh0cGF0aCx0c3Bhbix1c2UsdmlldycsXG4gIHRydWVcbik7XG5cbnZhciBpc1Jlc2VydmVkVGFnID0gZnVuY3Rpb24gKHRhZykge1xuICByZXR1cm4gaXNIVE1MVGFnKHRhZykgfHwgaXNTVkcodGFnKVxufTtcblxuZnVuY3Rpb24gZ2V0VGFnTmFtZXNwYWNlICh0YWcpIHtcbiAgaWYgKGlzU1ZHKHRhZykpIHtcbiAgICByZXR1cm4gJ3N2ZydcbiAgfVxuICAvLyBiYXNpYyBzdXBwb3J0IGZvciBNYXRoTUxcbiAgLy8gbm90ZSBpdCBkb2Vzbid0IHN1cHBvcnQgb3RoZXIgTWF0aE1MIGVsZW1lbnRzIGJlaW5nIGNvbXBvbmVudCByb290c1xuICBpZiAodGFnID09PSAnbWF0aCcpIHtcbiAgICByZXR1cm4gJ21hdGgnXG4gIH1cbn1cblxudmFyIHVua25vd25FbGVtZW50Q2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuZnVuY3Rpb24gaXNVbmtub3duRWxlbWVudCAodGFnKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoIWluQnJvd3Nlcikge1xuICAgIHJldHVybiB0cnVlXG4gIH1cbiAgaWYgKGlzUmVzZXJ2ZWRUYWcodGFnKSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG4gIHRhZyA9IHRhZy50b0xvd2VyQ2FzZSgpO1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKHVua25vd25FbGVtZW50Q2FjaGVbdGFnXSAhPSBudWxsKSB7XG4gICAgcmV0dXJuIHVua25vd25FbGVtZW50Q2FjaGVbdGFnXVxuICB9XG4gIHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGFnKTtcbiAgaWYgKHRhZy5pbmRleE9mKCctJykgPiAtMSkge1xuICAgIC8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzI4MjEwMzY0LzEwNzAyNDRcbiAgICByZXR1cm4gKHVua25vd25FbGVtZW50Q2FjaGVbdGFnXSA9IChcbiAgICAgIGVsLmNvbnN0cnVjdG9yID09PSB3aW5kb3cuSFRNTFVua25vd25FbGVtZW50IHx8XG4gICAgICBlbC5jb25zdHJ1Y3RvciA9PT0gd2luZG93LkhUTUxFbGVtZW50XG4gICAgKSlcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gKHVua25vd25FbGVtZW50Q2FjaGVbdGFnXSA9IC9IVE1MVW5rbm93bkVsZW1lbnQvLnRlc3QoZWwudG9TdHJpbmcoKSkpXG4gIH1cbn1cblxudmFyIGlzVGV4dElucHV0VHlwZSA9IG1ha2VNYXAoJ3RleHQsbnVtYmVyLHBhc3N3b3JkLHNlYXJjaCxlbWFpbCx0ZWwsdXJsJyk7XG5cbi8qICAqL1xuXG4vKipcbiAqIFF1ZXJ5IGFuIGVsZW1lbnQgc2VsZWN0b3IgaWYgaXQncyBub3QgYW4gZWxlbWVudCBhbHJlYWR5LlxuICovXG5mdW5jdGlvbiBxdWVyeSAoZWwpIHtcbiAgaWYgKHR5cGVvZiBlbCA9PT0gJ3N0cmluZycpIHtcbiAgICB2YXIgc2VsZWN0ZWQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGVsKTtcbiAgICBpZiAoIXNlbGVjdGVkKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAgICdDYW5ub3QgZmluZCBlbGVtZW50OiAnICsgZWxcbiAgICAgICk7XG4gICAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcbiAgICB9XG4gICAgcmV0dXJuIHNlbGVjdGVkXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGVsXG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnQkMSAodGFnTmFtZSwgdm5vZGUpIHtcbiAgdmFyIGVsbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGFnTmFtZSk7XG4gIGlmICh0YWdOYW1lICE9PSAnc2VsZWN0Jykge1xuICAgIHJldHVybiBlbG1cbiAgfVxuICAvLyBmYWxzZSBvciBudWxsIHdpbGwgcmVtb3ZlIHRoZSBhdHRyaWJ1dGUgYnV0IHVuZGVmaW5lZCB3aWxsIG5vdFxuICBpZiAodm5vZGUuZGF0YSAmJiB2bm9kZS5kYXRhLmF0dHJzICYmIHZub2RlLmRhdGEuYXR0cnMubXVsdGlwbGUgIT09IHVuZGVmaW5lZCkge1xuICAgIGVsbS5zZXRBdHRyaWJ1dGUoJ211bHRpcGxlJywgJ211bHRpcGxlJyk7XG4gIH1cbiAgcmV0dXJuIGVsbVxufVxuXG5mdW5jdGlvbiBjcmVhdGVFbGVtZW50TlMgKG5hbWVzcGFjZSwgdGFnTmFtZSkge1xuICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKG5hbWVzcGFjZU1hcFtuYW1lc3BhY2VdLCB0YWdOYW1lKVxufVxuXG5mdW5jdGlvbiBjcmVhdGVUZXh0Tm9kZSAodGV4dCkge1xuICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUodGV4dClcbn1cblxuZnVuY3Rpb24gY3JlYXRlQ29tbWVudCAodGV4dCkge1xuICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlQ29tbWVudCh0ZXh0KVxufVxuXG5mdW5jdGlvbiBpbnNlcnRCZWZvcmUgKHBhcmVudE5vZGUsIG5ld05vZGUsIHJlZmVyZW5jZU5vZGUpIHtcbiAgcGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobmV3Tm9kZSwgcmVmZXJlbmNlTm9kZSk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUNoaWxkIChub2RlLCBjaGlsZCkge1xuICBub2RlLnJlbW92ZUNoaWxkKGNoaWxkKTtcbn1cblxuZnVuY3Rpb24gYXBwZW5kQ2hpbGQgKG5vZGUsIGNoaWxkKSB7XG4gIG5vZGUuYXBwZW5kQ2hpbGQoY2hpbGQpO1xufVxuXG5mdW5jdGlvbiBwYXJlbnROb2RlIChub2RlKSB7XG4gIHJldHVybiBub2RlLnBhcmVudE5vZGVcbn1cblxuZnVuY3Rpb24gbmV4dFNpYmxpbmcgKG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUubmV4dFNpYmxpbmdcbn1cblxuZnVuY3Rpb24gdGFnTmFtZSAobm9kZSkge1xuICByZXR1cm4gbm9kZS50YWdOYW1lXG59XG5cbmZ1bmN0aW9uIHNldFRleHRDb250ZW50IChub2RlLCB0ZXh0KSB7XG4gIG5vZGUudGV4dENvbnRlbnQgPSB0ZXh0O1xufVxuXG5mdW5jdGlvbiBzZXRTdHlsZVNjb3BlIChub2RlLCBzY29wZUlkKSB7XG4gIG5vZGUuc2V0QXR0cmlidXRlKHNjb3BlSWQsICcnKTtcbn1cblxudmFyIG5vZGVPcHMgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7XG4gIGNyZWF0ZUVsZW1lbnQ6IGNyZWF0ZUVsZW1lbnQkMSxcbiAgY3JlYXRlRWxlbWVudE5TOiBjcmVhdGVFbGVtZW50TlMsXG4gIGNyZWF0ZVRleHROb2RlOiBjcmVhdGVUZXh0Tm9kZSxcbiAgY3JlYXRlQ29tbWVudDogY3JlYXRlQ29tbWVudCxcbiAgaW5zZXJ0QmVmb3JlOiBpbnNlcnRCZWZvcmUsXG4gIHJlbW92ZUNoaWxkOiByZW1vdmVDaGlsZCxcbiAgYXBwZW5kQ2hpbGQ6IGFwcGVuZENoaWxkLFxuICBwYXJlbnROb2RlOiBwYXJlbnROb2RlLFxuICBuZXh0U2libGluZzogbmV4dFNpYmxpbmcsXG4gIHRhZ05hbWU6IHRhZ05hbWUsXG4gIHNldFRleHRDb250ZW50OiBzZXRUZXh0Q29udGVudCxcbiAgc2V0U3R5bGVTY29wZTogc2V0U3R5bGVTY29wZVxufSk7XG5cbi8qICAqL1xuXG52YXIgcmVmID0ge1xuICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZSAoXywgdm5vZGUpIHtcbiAgICByZWdpc3RlclJlZih2bm9kZSk7XG4gIH0sXG4gIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgICBpZiAob2xkVm5vZGUuZGF0YS5yZWYgIT09IHZub2RlLmRhdGEucmVmKSB7XG4gICAgICByZWdpc3RlclJlZihvbGRWbm9kZSwgdHJ1ZSk7XG4gICAgICByZWdpc3RlclJlZih2bm9kZSk7XG4gICAgfVxuICB9LFxuICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95ICh2bm9kZSkge1xuICAgIHJlZ2lzdGVyUmVmKHZub2RlLCB0cnVlKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gcmVnaXN0ZXJSZWYgKHZub2RlLCBpc1JlbW92YWwpIHtcbiAgdmFyIGtleSA9IHZub2RlLmRhdGEucmVmO1xuICBpZiAoIWlzRGVmKGtleSkpIHsgcmV0dXJuIH1cblxuICB2YXIgdm0gPSB2bm9kZS5jb250ZXh0O1xuICB2YXIgcmVmID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgfHwgdm5vZGUuZWxtO1xuICB2YXIgcmVmcyA9IHZtLiRyZWZzO1xuICBpZiAoaXNSZW1vdmFsKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkocmVmc1trZXldKSkge1xuICAgICAgcmVtb3ZlKHJlZnNba2V5XSwgcmVmKTtcbiAgICB9IGVsc2UgaWYgKHJlZnNba2V5XSA9PT0gcmVmKSB7XG4gICAgICByZWZzW2tleV0gPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmICh2bm9kZS5kYXRhLnJlZkluRm9yKSB7XG4gICAgICBpZiAoIUFycmF5LmlzQXJyYXkocmVmc1trZXldKSkge1xuICAgICAgICByZWZzW2tleV0gPSBbcmVmXTtcbiAgICAgIH0gZWxzZSBpZiAocmVmc1trZXldLmluZGV4T2YocmVmKSA8IDApIHtcbiAgICAgICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgICAgIHJlZnNba2V5XS5wdXNoKHJlZik7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlZnNba2V5XSA9IHJlZjtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBWaXJ0dWFsIERPTSBwYXRjaGluZyBhbGdvcml0aG0gYmFzZWQgb24gU25hYmJkb20gYnlcbiAqIFNpbW9uIEZyaWlzIFZpbmR1bSAoQHBhbGRlcGluZClcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZVxuICogaHR0cHM6Ly9naXRodWIuY29tL3BhbGRlcGluZC9zbmFiYmRvbS9ibG9iL21hc3Rlci9MSUNFTlNFXG4gKlxuICogbW9kaWZpZWQgYnkgRXZhbiBZb3UgKEB5eXg5OTA4MDMpXG4gKlxuICogTm90IHR5cGUtY2hlY2tpbmcgdGhpcyBiZWNhdXNlIHRoaXMgZmlsZSBpcyBwZXJmLWNyaXRpY2FsIGFuZCB0aGUgY29zdFxuICogb2YgbWFraW5nIGZsb3cgdW5kZXJzdGFuZCBpdCBpcyBub3Qgd29ydGggaXQuXG4gKi9cblxudmFyIGVtcHR5Tm9kZSA9IG5ldyBWTm9kZSgnJywge30sIFtdKTtcblxudmFyIGhvb2tzID0gWydjcmVhdGUnLCAnYWN0aXZhdGUnLCAndXBkYXRlJywgJ3JlbW92ZScsICdkZXN0cm95J107XG5cbmZ1bmN0aW9uIHNhbWVWbm9kZSAoYSwgYikge1xuICByZXR1cm4gKFxuICAgIGEua2V5ID09PSBiLmtleSAmJlxuICAgIGEuYXN5bmNGYWN0b3J5ID09PSBiLmFzeW5jRmFjdG9yeSAmJiAoXG4gICAgICAoXG4gICAgICAgIGEudGFnID09PSBiLnRhZyAmJlxuICAgICAgICBhLmlzQ29tbWVudCA9PT0gYi5pc0NvbW1lbnQgJiZcbiAgICAgICAgaXNEZWYoYS5kYXRhKSA9PT0gaXNEZWYoYi5kYXRhKSAmJlxuICAgICAgICBzYW1lSW5wdXRUeXBlKGEsIGIpXG4gICAgICApIHx8IChcbiAgICAgICAgaXNUcnVlKGEuaXNBc3luY1BsYWNlaG9sZGVyKSAmJlxuICAgICAgICBpc1VuZGVmKGIuYXN5bmNGYWN0b3J5LmVycm9yKVxuICAgICAgKVxuICAgIClcbiAgKVxufVxuXG5mdW5jdGlvbiBzYW1lSW5wdXRUeXBlIChhLCBiKSB7XG4gIGlmIChhLnRhZyAhPT0gJ2lucHV0JykgeyByZXR1cm4gdHJ1ZSB9XG4gIHZhciBpO1xuICB2YXIgdHlwZUEgPSBpc0RlZihpID0gYS5kYXRhKSAmJiBpc0RlZihpID0gaS5hdHRycykgJiYgaS50eXBlO1xuICB2YXIgdHlwZUIgPSBpc0RlZihpID0gYi5kYXRhKSAmJiBpc0RlZihpID0gaS5hdHRycykgJiYgaS50eXBlO1xuICByZXR1cm4gdHlwZUEgPT09IHR5cGVCIHx8IGlzVGV4dElucHV0VHlwZSh0eXBlQSkgJiYgaXNUZXh0SW5wdXRUeXBlKHR5cGVCKVxufVxuXG5mdW5jdGlvbiBjcmVhdGVLZXlUb09sZElkeCAoY2hpbGRyZW4sIGJlZ2luSWR4LCBlbmRJZHgpIHtcbiAgdmFyIGksIGtleTtcbiAgdmFyIG1hcCA9IHt9O1xuICBmb3IgKGkgPSBiZWdpbklkeDsgaSA8PSBlbmRJZHg7ICsraSkge1xuICAgIGtleSA9IGNoaWxkcmVuW2ldLmtleTtcbiAgICBpZiAoaXNEZWYoa2V5KSkgeyBtYXBba2V5XSA9IGk7IH1cbiAgfVxuICByZXR1cm4gbWFwXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVBhdGNoRnVuY3Rpb24gKGJhY2tlbmQpIHtcbiAgdmFyIGksIGo7XG4gIHZhciBjYnMgPSB7fTtcblxuICB2YXIgbW9kdWxlcyA9IGJhY2tlbmQubW9kdWxlcztcbiAgdmFyIG5vZGVPcHMgPSBiYWNrZW5kLm5vZGVPcHM7XG5cbiAgZm9yIChpID0gMDsgaSA8IGhvb2tzLmxlbmd0aDsgKytpKSB7XG4gICAgY2JzW2hvb2tzW2ldXSA9IFtdO1xuICAgIGZvciAoaiA9IDA7IGogPCBtb2R1bGVzLmxlbmd0aDsgKytqKSB7XG4gICAgICBpZiAoaXNEZWYobW9kdWxlc1tqXVtob29rc1tpXV0pKSB7XG4gICAgICAgIGNic1tob29rc1tpXV0ucHVzaChtb2R1bGVzW2pdW2hvb2tzW2ldXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZW1wdHlOb2RlQXQgKGVsbSkge1xuICAgIHJldHVybiBuZXcgVk5vZGUobm9kZU9wcy50YWdOYW1lKGVsbSkudG9Mb3dlckNhc2UoKSwge30sIFtdLCB1bmRlZmluZWQsIGVsbSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZVJtQ2IgKGNoaWxkRWxtLCBsaXN0ZW5lcnMpIHtcbiAgICBmdW5jdGlvbiByZW1vdmUkJDEgKCkge1xuICAgICAgaWYgKC0tcmVtb3ZlJCQxLmxpc3RlbmVycyA9PT0gMCkge1xuICAgICAgICByZW1vdmVOb2RlKGNoaWxkRWxtKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmVtb3ZlJCQxLmxpc3RlbmVycyA9IGxpc3RlbmVycztcbiAgICByZXR1cm4gcmVtb3ZlJCQxXG4gIH1cblxuICBmdW5jdGlvbiByZW1vdmVOb2RlIChlbCkge1xuICAgIHZhciBwYXJlbnQgPSBub2RlT3BzLnBhcmVudE5vZGUoZWwpO1xuICAgIC8vIGVsZW1lbnQgbWF5IGhhdmUgYWxyZWFkeSBiZWVuIHJlbW92ZWQgZHVlIHRvIHYtaHRtbCAvIHYtdGV4dFxuICAgIGlmIChpc0RlZihwYXJlbnQpKSB7XG4gICAgICBub2RlT3BzLnJlbW92ZUNoaWxkKHBhcmVudCwgZWwpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGlzVW5rbm93bkVsZW1lbnQkJDEgKHZub2RlLCBpblZQcmUpIHtcbiAgICByZXR1cm4gKFxuICAgICAgIWluVlByZSAmJlxuICAgICAgIXZub2RlLm5zICYmXG4gICAgICAhKFxuICAgICAgICBjb25maWcuaWdub3JlZEVsZW1lbnRzLmxlbmd0aCAmJlxuICAgICAgICBjb25maWcuaWdub3JlZEVsZW1lbnRzLnNvbWUoZnVuY3Rpb24gKGlnbm9yZSkge1xuICAgICAgICAgIHJldHVybiBpc1JlZ0V4cChpZ25vcmUpXG4gICAgICAgICAgICA/IGlnbm9yZS50ZXN0KHZub2RlLnRhZylcbiAgICAgICAgICAgIDogaWdub3JlID09PSB2bm9kZS50YWdcbiAgICAgICAgfSlcbiAgICAgICkgJiZcbiAgICAgIGNvbmZpZy5pc1Vua25vd25FbGVtZW50KHZub2RlLnRhZylcbiAgICApXG4gIH1cblxuICB2YXIgY3JlYXRpbmdFbG1JblZQcmUgPSAwO1xuXG4gIGZ1bmN0aW9uIGNyZWF0ZUVsbSAoXG4gICAgdm5vZGUsXG4gICAgaW5zZXJ0ZWRWbm9kZVF1ZXVlLFxuICAgIHBhcmVudEVsbSxcbiAgICByZWZFbG0sXG4gICAgbmVzdGVkLFxuICAgIG93bmVyQXJyYXksXG4gICAgaW5kZXhcbiAgKSB7XG4gICAgaWYgKGlzRGVmKHZub2RlLmVsbSkgJiYgaXNEZWYob3duZXJBcnJheSkpIHtcbiAgICAgIC8vIFRoaXMgdm5vZGUgd2FzIHVzZWQgaW4gYSBwcmV2aW91cyByZW5kZXIhXG4gICAgICAvLyBub3cgaXQncyB1c2VkIGFzIGEgbmV3IG5vZGUsIG92ZXJ3cml0aW5nIGl0cyBlbG0gd291bGQgY2F1c2VcbiAgICAgIC8vIHBvdGVudGlhbCBwYXRjaCBlcnJvcnMgZG93biB0aGUgcm9hZCB3aGVuIGl0J3MgdXNlZCBhcyBhbiBpbnNlcnRpb25cbiAgICAgIC8vIHJlZmVyZW5jZSBub2RlLiBJbnN0ZWFkLCB3ZSBjbG9uZSB0aGUgbm9kZSBvbi1kZW1hbmQgYmVmb3JlIGNyZWF0aW5nXG4gICAgICAvLyBhc3NvY2lhdGVkIERPTSBlbGVtZW50IGZvciBpdC5cbiAgICAgIHZub2RlID0gb3duZXJBcnJheVtpbmRleF0gPSBjbG9uZVZOb2RlKHZub2RlKTtcbiAgICB9XG5cbiAgICB2bm9kZS5pc1Jvb3RJbnNlcnQgPSAhbmVzdGVkOyAvLyBmb3IgdHJhbnNpdGlvbiBlbnRlciBjaGVja1xuICAgIGlmIChjcmVhdGVDb21wb25lbnQodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCByZWZFbG0pKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7XG4gICAgdmFyIGNoaWxkcmVuID0gdm5vZGUuY2hpbGRyZW47XG4gICAgdmFyIHRhZyA9IHZub2RlLnRhZztcbiAgICBpZiAoaXNEZWYodGFnKSkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgaWYgKGRhdGEgJiYgZGF0YS5wcmUpIHtcbiAgICAgICAgICBjcmVhdGluZ0VsbUluVlByZSsrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1Vua25vd25FbGVtZW50JCQxKHZub2RlLCBjcmVhdGluZ0VsbUluVlByZSkpIHtcbiAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgJ1Vua25vd24gY3VzdG9tIGVsZW1lbnQ6IDwnICsgdGFnICsgJz4gLSBkaWQgeW91ICcgK1xuICAgICAgICAgICAgJ3JlZ2lzdGVyIHRoZSBjb21wb25lbnQgY29ycmVjdGx5PyBGb3IgcmVjdXJzaXZlIGNvbXBvbmVudHMsICcgK1xuICAgICAgICAgICAgJ21ha2Ugc3VyZSB0byBwcm92aWRlIHRoZSBcIm5hbWVcIiBvcHRpb24uJyxcbiAgICAgICAgICAgIHZub2RlLmNvbnRleHRcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZub2RlLmVsbSA9IHZub2RlLm5zXG4gICAgICAgID8gbm9kZU9wcy5jcmVhdGVFbGVtZW50TlModm5vZGUubnMsIHRhZylcbiAgICAgICAgOiBub2RlT3BzLmNyZWF0ZUVsZW1lbnQodGFnLCB2bm9kZSk7XG4gICAgICBzZXRTY29wZSh2bm9kZSk7XG5cbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAge1xuICAgICAgICBjcmVhdGVDaGlsZHJlbih2bm9kZSwgY2hpbGRyZW4sIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgIGlmIChpc0RlZihkYXRhKSkge1xuICAgICAgICAgIGludm9rZUNyZWF0ZUhvb2tzKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICB9XG4gICAgICAgIGluc2VydChwYXJlbnRFbG0sIHZub2RlLmVsbSwgcmVmRWxtKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgZGF0YSAmJiBkYXRhLnByZSkge1xuICAgICAgICBjcmVhdGluZ0VsbUluVlByZS0tO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXNUcnVlKHZub2RlLmlzQ29tbWVudCkpIHtcbiAgICAgIHZub2RlLmVsbSA9IG5vZGVPcHMuY3JlYXRlQ29tbWVudCh2bm9kZS50ZXh0KTtcbiAgICAgIGluc2VydChwYXJlbnRFbG0sIHZub2RlLmVsbSwgcmVmRWxtKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdm5vZGUuZWxtID0gbm9kZU9wcy5jcmVhdGVUZXh0Tm9kZSh2bm9kZS50ZXh0KTtcbiAgICAgIGluc2VydChwYXJlbnRFbG0sIHZub2RlLmVsbSwgcmVmRWxtKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVDb21wb25lbnQgKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgcmVmRWxtKSB7XG4gICAgdmFyIGkgPSB2bm9kZS5kYXRhO1xuICAgIGlmIChpc0RlZihpKSkge1xuICAgICAgdmFyIGlzUmVhY3RpdmF0ZWQgPSBpc0RlZih2bm9kZS5jb21wb25lbnRJbnN0YW5jZSkgJiYgaS5rZWVwQWxpdmU7XG4gICAgICBpZiAoaXNEZWYoaSA9IGkuaG9vaykgJiYgaXNEZWYoaSA9IGkuaW5pdCkpIHtcbiAgICAgICAgaSh2bm9kZSwgZmFsc2UgLyogaHlkcmF0aW5nICovKTtcbiAgICAgIH1cbiAgICAgIC8vIGFmdGVyIGNhbGxpbmcgdGhlIGluaXQgaG9vaywgaWYgdGhlIHZub2RlIGlzIGEgY2hpbGQgY29tcG9uZW50XG4gICAgICAvLyBpdCBzaG91bGQndmUgY3JlYXRlZCBhIGNoaWxkIGluc3RhbmNlIGFuZCBtb3VudGVkIGl0LiB0aGUgY2hpbGRcbiAgICAgIC8vIGNvbXBvbmVudCBhbHNvIGhhcyBzZXQgdGhlIHBsYWNlaG9sZGVyIHZub2RlJ3MgZWxtLlxuICAgICAgLy8gaW4gdGhhdCBjYXNlIHdlIGNhbiBqdXN0IHJldHVybiB0aGUgZWxlbWVudCBhbmQgYmUgZG9uZS5cbiAgICAgIGlmIChpc0RlZih2bm9kZS5jb21wb25lbnRJbnN0YW5jZSkpIHtcbiAgICAgICAgaW5pdENvbXBvbmVudCh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgaW5zZXJ0KHBhcmVudEVsbSwgdm5vZGUuZWxtLCByZWZFbG0pO1xuICAgICAgICBpZiAoaXNUcnVlKGlzUmVhY3RpdmF0ZWQpKSB7XG4gICAgICAgICAgcmVhY3RpdmF0ZUNvbXBvbmVudCh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIHJlZkVsbSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpbml0Q29tcG9uZW50ICh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKSB7XG4gICAgaWYgKGlzRGVmKHZub2RlLmRhdGEucGVuZGluZ0luc2VydCkpIHtcbiAgICAgIGluc2VydGVkVm5vZGVRdWV1ZS5wdXNoLmFwcGx5KGluc2VydGVkVm5vZGVRdWV1ZSwgdm5vZGUuZGF0YS5wZW5kaW5nSW5zZXJ0KTtcbiAgICAgIHZub2RlLmRhdGEucGVuZGluZ0luc2VydCA9IG51bGw7XG4gICAgfVxuICAgIHZub2RlLmVsbSA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlLiRlbDtcbiAgICBpZiAoaXNQYXRjaGFibGUodm5vZGUpKSB7XG4gICAgICBpbnZva2VDcmVhdGVIb29rcyh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgIHNldFNjb3BlKHZub2RlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZW1wdHkgY29tcG9uZW50IHJvb3QuXG4gICAgICAvLyBza2lwIGFsbCBlbGVtZW50LXJlbGF0ZWQgbW9kdWxlcyBleGNlcHQgZm9yIHJlZiAoIzM0NTUpXG4gICAgICByZWdpc3RlclJlZih2bm9kZSk7XG4gICAgICAvLyBtYWtlIHN1cmUgdG8gaW52b2tlIHRoZSBpbnNlcnQgaG9va1xuICAgICAgaW5zZXJ0ZWRWbm9kZVF1ZXVlLnB1c2godm5vZGUpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlYWN0aXZhdGVDb21wb25lbnQgKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgcmVmRWxtKSB7XG4gICAgdmFyIGk7XG4gICAgLy8gaGFjayBmb3IgIzQzMzk6IGEgcmVhY3RpdmF0ZWQgY29tcG9uZW50IHdpdGggaW5uZXIgdHJhbnNpdGlvblxuICAgIC8vIGRvZXMgbm90IHRyaWdnZXIgYmVjYXVzZSB0aGUgaW5uZXIgbm9kZSdzIGNyZWF0ZWQgaG9va3MgYXJlIG5vdCBjYWxsZWRcbiAgICAvLyBhZ2Fpbi4gSXQncyBub3QgaWRlYWwgdG8gaW52b2x2ZSBtb2R1bGUtc3BlY2lmaWMgbG9naWMgaW4gaGVyZSBidXRcbiAgICAvLyB0aGVyZSBkb2Vzbid0IHNlZW0gdG8gYmUgYSBiZXR0ZXIgd2F5IHRvIGRvIGl0LlxuICAgIHZhciBpbm5lck5vZGUgPSB2bm9kZTtcbiAgICB3aGlsZSAoaW5uZXJOb2RlLmNvbXBvbmVudEluc3RhbmNlKSB7XG4gICAgICBpbm5lck5vZGUgPSBpbm5lck5vZGUuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlO1xuICAgICAgaWYgKGlzRGVmKGkgPSBpbm5lck5vZGUuZGF0YSkgJiYgaXNEZWYoaSA9IGkudHJhbnNpdGlvbikpIHtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGNicy5hY3RpdmF0ZS5sZW5ndGg7ICsraSkge1xuICAgICAgICAgIGNicy5hY3RpdmF0ZVtpXShlbXB0eU5vZGUsIGlubmVyTm9kZSk7XG4gICAgICAgIH1cbiAgICAgICAgaW5zZXJ0ZWRWbm9kZVF1ZXVlLnB1c2goaW5uZXJOb2RlKTtcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gdW5saWtlIGEgbmV3bHkgY3JlYXRlZCBjb21wb25lbnQsXG4gICAgLy8gYSByZWFjdGl2YXRlZCBrZWVwLWFsaXZlIGNvbXBvbmVudCBkb2Vzbid0IGluc2VydCBpdHNlbGZcbiAgICBpbnNlcnQocGFyZW50RWxtLCB2bm9kZS5lbG0sIHJlZkVsbSk7XG4gIH1cblxuICBmdW5jdGlvbiBpbnNlcnQgKHBhcmVudCwgZWxtLCByZWYkJDEpIHtcbiAgICBpZiAoaXNEZWYocGFyZW50KSkge1xuICAgICAgaWYgKGlzRGVmKHJlZiQkMSkpIHtcbiAgICAgICAgaWYgKG5vZGVPcHMucGFyZW50Tm9kZShyZWYkJDEpID09PSBwYXJlbnQpIHtcbiAgICAgICAgICBub2RlT3BzLmluc2VydEJlZm9yZShwYXJlbnQsIGVsbSwgcmVmJCQxKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbm9kZU9wcy5hcHBlbmRDaGlsZChwYXJlbnQsIGVsbSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlQ2hpbGRyZW4gKHZub2RlLCBjaGlsZHJlbiwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBjaGVja0R1cGxpY2F0ZUtleXMoY2hpbGRyZW4pO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7ICsraSkge1xuICAgICAgICBjcmVhdGVFbG0oY2hpbGRyZW5baV0sIGluc2VydGVkVm5vZGVRdWV1ZSwgdm5vZGUuZWxtLCBudWxsLCB0cnVlLCBjaGlsZHJlbiwgaSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpc1ByaW1pdGl2ZSh2bm9kZS50ZXh0KSkge1xuICAgICAgbm9kZU9wcy5hcHBlbmRDaGlsZCh2bm9kZS5lbG0sIG5vZGVPcHMuY3JlYXRlVGV4dE5vZGUoU3RyaW5nKHZub2RlLnRleHQpKSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaXNQYXRjaGFibGUgKHZub2RlKSB7XG4gICAgd2hpbGUgKHZub2RlLmNvbXBvbmVudEluc3RhbmNlKSB7XG4gICAgICB2bm9kZSA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlLl92bm9kZTtcbiAgICB9XG4gICAgcmV0dXJuIGlzRGVmKHZub2RlLnRhZylcbiAgfVxuXG4gIGZ1bmN0aW9uIGludm9rZUNyZWF0ZUhvb2tzICh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKSB7XG4gICAgZm9yICh2YXIgaSQxID0gMDsgaSQxIDwgY2JzLmNyZWF0ZS5sZW5ndGg7ICsraSQxKSB7XG4gICAgICBjYnMuY3JlYXRlW2kkMV0oZW1wdHlOb2RlLCB2bm9kZSk7XG4gICAgfVxuICAgIGkgPSB2bm9kZS5kYXRhLmhvb2s7IC8vIFJldXNlIHZhcmlhYmxlXG4gICAgaWYgKGlzRGVmKGkpKSB7XG4gICAgICBpZiAoaXNEZWYoaS5jcmVhdGUpKSB7IGkuY3JlYXRlKGVtcHR5Tm9kZSwgdm5vZGUpOyB9XG4gICAgICBpZiAoaXNEZWYoaS5pbnNlcnQpKSB7IGluc2VydGVkVm5vZGVRdWV1ZS5wdXNoKHZub2RlKTsgfVxuICAgIH1cbiAgfVxuXG4gIC8vIHNldCBzY29wZSBpZCBhdHRyaWJ1dGUgZm9yIHNjb3BlZCBDU1MuXG4gIC8vIHRoaXMgaXMgaW1wbGVtZW50ZWQgYXMgYSBzcGVjaWFsIGNhc2UgdG8gYXZvaWQgdGhlIG92ZXJoZWFkXG4gIC8vIG9mIGdvaW5nIHRocm91Z2ggdGhlIG5vcm1hbCBhdHRyaWJ1dGUgcGF0Y2hpbmcgcHJvY2Vzcy5cbiAgZnVuY3Rpb24gc2V0U2NvcGUgKHZub2RlKSB7XG4gICAgdmFyIGk7XG4gICAgaWYgKGlzRGVmKGkgPSB2bm9kZS5mblNjb3BlSWQpKSB7XG4gICAgICBub2RlT3BzLnNldFN0eWxlU2NvcGUodm5vZGUuZWxtLCBpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFuY2VzdG9yID0gdm5vZGU7XG4gICAgICB3aGlsZSAoYW5jZXN0b3IpIHtcbiAgICAgICAgaWYgKGlzRGVmKGkgPSBhbmNlc3Rvci5jb250ZXh0KSAmJiBpc0RlZihpID0gaS4kb3B0aW9ucy5fc2NvcGVJZCkpIHtcbiAgICAgICAgICBub2RlT3BzLnNldFN0eWxlU2NvcGUodm5vZGUuZWxtLCBpKTtcbiAgICAgICAgfVxuICAgICAgICBhbmNlc3RvciA9IGFuY2VzdG9yLnBhcmVudDtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gZm9yIHNsb3QgY29udGVudCB0aGV5IHNob3VsZCBhbHNvIGdldCB0aGUgc2NvcGVJZCBmcm9tIHRoZSBob3N0IGluc3RhbmNlLlxuICAgIGlmIChpc0RlZihpID0gYWN0aXZlSW5zdGFuY2UpICYmXG4gICAgICBpICE9PSB2bm9kZS5jb250ZXh0ICYmXG4gICAgICBpICE9PSB2bm9kZS5mbkNvbnRleHQgJiZcbiAgICAgIGlzRGVmKGkgPSBpLiRvcHRpb25zLl9zY29wZUlkKVxuICAgICkge1xuICAgICAgbm9kZU9wcy5zZXRTdHlsZVNjb3BlKHZub2RlLmVsbSwgaSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gYWRkVm5vZGVzIChwYXJlbnRFbG0sIHJlZkVsbSwgdm5vZGVzLCBzdGFydElkeCwgZW5kSWR4LCBpbnNlcnRlZFZub2RlUXVldWUpIHtcbiAgICBmb3IgKDsgc3RhcnRJZHggPD0gZW5kSWR4OyArK3N0YXJ0SWR4KSB7XG4gICAgICBjcmVhdGVFbG0odm5vZGVzW3N0YXJ0SWR4XSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIHJlZkVsbSwgZmFsc2UsIHZub2Rlcywgc3RhcnRJZHgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGludm9rZURlc3Ryb3lIb29rICh2bm9kZSkge1xuICAgIHZhciBpLCBqO1xuICAgIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgICBpZiAoaXNEZWYoZGF0YSkpIHtcbiAgICAgIGlmIChpc0RlZihpID0gZGF0YS5ob29rKSAmJiBpc0RlZihpID0gaS5kZXN0cm95KSkgeyBpKHZub2RlKTsgfVxuICAgICAgZm9yIChpID0gMDsgaSA8IGNicy5kZXN0cm95Lmxlbmd0aDsgKytpKSB7IGNicy5kZXN0cm95W2ldKHZub2RlKTsgfVxuICAgIH1cbiAgICBpZiAoaXNEZWYoaSA9IHZub2RlLmNoaWxkcmVuKSkge1xuICAgICAgZm9yIChqID0gMDsgaiA8IHZub2RlLmNoaWxkcmVuLmxlbmd0aDsgKytqKSB7XG4gICAgICAgIGludm9rZURlc3Ryb3lIb29rKHZub2RlLmNoaWxkcmVuW2pdKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZW1vdmVWbm9kZXMgKHZub2Rlcywgc3RhcnRJZHgsIGVuZElkeCkge1xuICAgIGZvciAoOyBzdGFydElkeCA8PSBlbmRJZHg7ICsrc3RhcnRJZHgpIHtcbiAgICAgIHZhciBjaCA9IHZub2Rlc1tzdGFydElkeF07XG4gICAgICBpZiAoaXNEZWYoY2gpKSB7XG4gICAgICAgIGlmIChpc0RlZihjaC50YWcpKSB7XG4gICAgICAgICAgcmVtb3ZlQW5kSW52b2tlUmVtb3ZlSG9vayhjaCk7XG4gICAgICAgICAgaW52b2tlRGVzdHJveUhvb2soY2gpO1xuICAgICAgICB9IGVsc2UgeyAvLyBUZXh0IG5vZGVcbiAgICAgICAgICByZW1vdmVOb2RlKGNoLmVsbSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZW1vdmVBbmRJbnZva2VSZW1vdmVIb29rICh2bm9kZSwgcm0pIHtcbiAgICBpZiAoaXNEZWYocm0pIHx8IGlzRGVmKHZub2RlLmRhdGEpKSB7XG4gICAgICB2YXIgaTtcbiAgICAgIHZhciBsaXN0ZW5lcnMgPSBjYnMucmVtb3ZlLmxlbmd0aCArIDE7XG4gICAgICBpZiAoaXNEZWYocm0pKSB7XG4gICAgICAgIC8vIHdlIGhhdmUgYSByZWN1cnNpdmVseSBwYXNzZWQgZG93biBybSBjYWxsYmFja1xuICAgICAgICAvLyBpbmNyZWFzZSB0aGUgbGlzdGVuZXJzIGNvdW50XG4gICAgICAgIHJtLmxpc3RlbmVycyArPSBsaXN0ZW5lcnM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBkaXJlY3RseSByZW1vdmluZ1xuICAgICAgICBybSA9IGNyZWF0ZVJtQ2Iodm5vZGUuZWxtLCBsaXN0ZW5lcnMpO1xuICAgICAgfVxuICAgICAgLy8gcmVjdXJzaXZlbHkgaW52b2tlIGhvb2tzIG9uIGNoaWxkIGNvbXBvbmVudCByb290IG5vZGVcbiAgICAgIGlmIChpc0RlZihpID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UpICYmIGlzRGVmKGkgPSBpLl92bm9kZSkgJiYgaXNEZWYoaS5kYXRhKSkge1xuICAgICAgICByZW1vdmVBbmRJbnZva2VSZW1vdmVIb29rKGksIHJtKTtcbiAgICAgIH1cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBjYnMucmVtb3ZlLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGNicy5yZW1vdmVbaV0odm5vZGUsIHJtKTtcbiAgICAgIH1cbiAgICAgIGlmIChpc0RlZihpID0gdm5vZGUuZGF0YS5ob29rKSAmJiBpc0RlZihpID0gaS5yZW1vdmUpKSB7XG4gICAgICAgIGkodm5vZGUsIHJtKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJtKCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlbW92ZU5vZGUodm5vZGUuZWxtKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVDaGlsZHJlbiAocGFyZW50RWxtLCBvbGRDaCwgbmV3Q2gsIGluc2VydGVkVm5vZGVRdWV1ZSwgcmVtb3ZlT25seSkge1xuICAgIHZhciBvbGRTdGFydElkeCA9IDA7XG4gICAgdmFyIG5ld1N0YXJ0SWR4ID0gMDtcbiAgICB2YXIgb2xkRW5kSWR4ID0gb2xkQ2gubGVuZ3RoIC0gMTtcbiAgICB2YXIgb2xkU3RhcnRWbm9kZSA9IG9sZENoWzBdO1xuICAgIHZhciBvbGRFbmRWbm9kZSA9IG9sZENoW29sZEVuZElkeF07XG4gICAgdmFyIG5ld0VuZElkeCA9IG5ld0NoLmxlbmd0aCAtIDE7XG4gICAgdmFyIG5ld1N0YXJ0Vm5vZGUgPSBuZXdDaFswXTtcbiAgICB2YXIgbmV3RW5kVm5vZGUgPSBuZXdDaFtuZXdFbmRJZHhdO1xuICAgIHZhciBvbGRLZXlUb0lkeCwgaWR4SW5PbGQsIHZub2RlVG9Nb3ZlLCByZWZFbG07XG5cbiAgICAvLyByZW1vdmVPbmx5IGlzIGEgc3BlY2lhbCBmbGFnIHVzZWQgb25seSBieSA8dHJhbnNpdGlvbi1ncm91cD5cbiAgICAvLyB0byBlbnN1cmUgcmVtb3ZlZCBlbGVtZW50cyBzdGF5IGluIGNvcnJlY3QgcmVsYXRpdmUgcG9zaXRpb25zXG4gICAgLy8gZHVyaW5nIGxlYXZpbmcgdHJhbnNpdGlvbnNcbiAgICB2YXIgY2FuTW92ZSA9ICFyZW1vdmVPbmx5O1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGNoZWNrRHVwbGljYXRlS2V5cyhuZXdDaCk7XG4gICAgfVxuXG4gICAgd2hpbGUgKG9sZFN0YXJ0SWR4IDw9IG9sZEVuZElkeCAmJiBuZXdTdGFydElkeCA8PSBuZXdFbmRJZHgpIHtcbiAgICAgIGlmIChpc1VuZGVmKG9sZFN0YXJ0Vm5vZGUpKSB7XG4gICAgICAgIG9sZFN0YXJ0Vm5vZGUgPSBvbGRDaFsrK29sZFN0YXJ0SWR4XTsgLy8gVm5vZGUgaGFzIGJlZW4gbW92ZWQgbGVmdFxuICAgICAgfSBlbHNlIGlmIChpc1VuZGVmKG9sZEVuZFZub2RlKSkge1xuICAgICAgICBvbGRFbmRWbm9kZSA9IG9sZENoWy0tb2xkRW5kSWR4XTtcbiAgICAgIH0gZWxzZSBpZiAoc2FtZVZub2RlKG9sZFN0YXJ0Vm5vZGUsIG5ld1N0YXJ0Vm5vZGUpKSB7XG4gICAgICAgIHBhdGNoVm5vZGUob2xkU3RhcnRWbm9kZSwgbmV3U3RhcnRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBuZXdDaCwgbmV3U3RhcnRJZHgpO1xuICAgICAgICBvbGRTdGFydFZub2RlID0gb2xkQ2hbKytvbGRTdGFydElkeF07XG4gICAgICAgIG5ld1N0YXJ0Vm5vZGUgPSBuZXdDaFsrK25ld1N0YXJ0SWR4XTtcbiAgICAgIH0gZWxzZSBpZiAoc2FtZVZub2RlKG9sZEVuZFZub2RlLCBuZXdFbmRWbm9kZSkpIHtcbiAgICAgICAgcGF0Y2hWbm9kZShvbGRFbmRWbm9kZSwgbmV3RW5kVm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgbmV3Q2gsIG5ld0VuZElkeCk7XG4gICAgICAgIG9sZEVuZFZub2RlID0gb2xkQ2hbLS1vbGRFbmRJZHhdO1xuICAgICAgICBuZXdFbmRWbm9kZSA9IG5ld0NoWy0tbmV3RW5kSWR4XTtcbiAgICAgIH0gZWxzZSBpZiAoc2FtZVZub2RlKG9sZFN0YXJ0Vm5vZGUsIG5ld0VuZFZub2RlKSkgeyAvLyBWbm9kZSBtb3ZlZCByaWdodFxuICAgICAgICBwYXRjaFZub2RlKG9sZFN0YXJ0Vm5vZGUsIG5ld0VuZFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIG5ld0NoLCBuZXdFbmRJZHgpO1xuICAgICAgICBjYW5Nb3ZlICYmIG5vZGVPcHMuaW5zZXJ0QmVmb3JlKHBhcmVudEVsbSwgb2xkU3RhcnRWbm9kZS5lbG0sIG5vZGVPcHMubmV4dFNpYmxpbmcob2xkRW5kVm5vZGUuZWxtKSk7XG4gICAgICAgIG9sZFN0YXJ0Vm5vZGUgPSBvbGRDaFsrK29sZFN0YXJ0SWR4XTtcbiAgICAgICAgbmV3RW5kVm5vZGUgPSBuZXdDaFstLW5ld0VuZElkeF07XG4gICAgICB9IGVsc2UgaWYgKHNhbWVWbm9kZShvbGRFbmRWbm9kZSwgbmV3U3RhcnRWbm9kZSkpIHsgLy8gVm5vZGUgbW92ZWQgbGVmdFxuICAgICAgICBwYXRjaFZub2RlKG9sZEVuZFZub2RlLCBuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIG5ld0NoLCBuZXdTdGFydElkeCk7XG4gICAgICAgIGNhbk1vdmUgJiYgbm9kZU9wcy5pbnNlcnRCZWZvcmUocGFyZW50RWxtLCBvbGRFbmRWbm9kZS5lbG0sIG9sZFN0YXJ0Vm5vZGUuZWxtKTtcbiAgICAgICAgb2xkRW5kVm5vZGUgPSBvbGRDaFstLW9sZEVuZElkeF07XG4gICAgICAgIG5ld1N0YXJ0Vm5vZGUgPSBuZXdDaFsrK25ld1N0YXJ0SWR4XTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChpc1VuZGVmKG9sZEtleVRvSWR4KSkgeyBvbGRLZXlUb0lkeCA9IGNyZWF0ZUtleVRvT2xkSWR4KG9sZENoLCBvbGRTdGFydElkeCwgb2xkRW5kSWR4KTsgfVxuICAgICAgICBpZHhJbk9sZCA9IGlzRGVmKG5ld1N0YXJ0Vm5vZGUua2V5KVxuICAgICAgICAgID8gb2xkS2V5VG9JZHhbbmV3U3RhcnRWbm9kZS5rZXldXG4gICAgICAgICAgOiBmaW5kSWR4SW5PbGQobmV3U3RhcnRWbm9kZSwgb2xkQ2gsIG9sZFN0YXJ0SWR4LCBvbGRFbmRJZHgpO1xuICAgICAgICBpZiAoaXNVbmRlZihpZHhJbk9sZCkpIHsgLy8gTmV3IGVsZW1lbnRcbiAgICAgICAgICBjcmVhdGVFbG0obmV3U3RhcnRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIG9sZFN0YXJ0Vm5vZGUuZWxtLCBmYWxzZSwgbmV3Q2gsIG5ld1N0YXJ0SWR4KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2bm9kZVRvTW92ZSA9IG9sZENoW2lkeEluT2xkXTtcbiAgICAgICAgICBpZiAoc2FtZVZub2RlKHZub2RlVG9Nb3ZlLCBuZXdTdGFydFZub2RlKSkge1xuICAgICAgICAgICAgcGF0Y2hWbm9kZSh2bm9kZVRvTW92ZSwgbmV3U3RhcnRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBuZXdDaCwgbmV3U3RhcnRJZHgpO1xuICAgICAgICAgICAgb2xkQ2hbaWR4SW5PbGRdID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgY2FuTW92ZSAmJiBub2RlT3BzLmluc2VydEJlZm9yZShwYXJlbnRFbG0sIHZub2RlVG9Nb3ZlLmVsbSwgb2xkU3RhcnRWbm9kZS5lbG0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBzYW1lIGtleSBidXQgZGlmZmVyZW50IGVsZW1lbnQuIHRyZWF0IGFzIG5ldyBlbGVtZW50XG4gICAgICAgICAgICBjcmVhdGVFbG0obmV3U3RhcnRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIG9sZFN0YXJ0Vm5vZGUuZWxtLCBmYWxzZSwgbmV3Q2gsIG5ld1N0YXJ0SWR4KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbmV3U3RhcnRWbm9kZSA9IG5ld0NoWysrbmV3U3RhcnRJZHhdO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAob2xkU3RhcnRJZHggPiBvbGRFbmRJZHgpIHtcbiAgICAgIHJlZkVsbSA9IGlzVW5kZWYobmV3Q2hbbmV3RW5kSWR4ICsgMV0pID8gbnVsbCA6IG5ld0NoW25ld0VuZElkeCArIDFdLmVsbTtcbiAgICAgIGFkZFZub2RlcyhwYXJlbnRFbG0sIHJlZkVsbSwgbmV3Q2gsIG5ld1N0YXJ0SWR4LCBuZXdFbmRJZHgsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgfSBlbHNlIGlmIChuZXdTdGFydElkeCA+IG5ld0VuZElkeCkge1xuICAgICAgcmVtb3ZlVm5vZGVzKG9sZENoLCBvbGRTdGFydElkeCwgb2xkRW5kSWR4KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjaGVja0R1cGxpY2F0ZUtleXMgKGNoaWxkcmVuKSB7XG4gICAgdmFyIHNlZW5LZXlzID0ge307XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHZub2RlID0gY2hpbGRyZW5baV07XG4gICAgICB2YXIga2V5ID0gdm5vZGUua2V5O1xuICAgICAgaWYgKGlzRGVmKGtleSkpIHtcbiAgICAgICAgaWYgKHNlZW5LZXlzW2tleV0pIHtcbiAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgKFwiRHVwbGljYXRlIGtleXMgZGV0ZWN0ZWQ6ICdcIiArIGtleSArIFwiJy4gVGhpcyBtYXkgY2F1c2UgYW4gdXBkYXRlIGVycm9yLlwiKSxcbiAgICAgICAgICAgIHZub2RlLmNvbnRleHRcbiAgICAgICAgICApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNlZW5LZXlzW2tleV0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZmluZElkeEluT2xkIChub2RlLCBvbGRDaCwgc3RhcnQsIGVuZCkge1xuICAgIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgaSsrKSB7XG4gICAgICB2YXIgYyA9IG9sZENoW2ldO1xuICAgICAgaWYgKGlzRGVmKGMpICYmIHNhbWVWbm9kZShub2RlLCBjKSkgeyByZXR1cm4gaSB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcGF0Y2hWbm9kZSAoXG4gICAgb2xkVm5vZGUsXG4gICAgdm5vZGUsXG4gICAgaW5zZXJ0ZWRWbm9kZVF1ZXVlLFxuICAgIG93bmVyQXJyYXksXG4gICAgaW5kZXgsXG4gICAgcmVtb3ZlT25seVxuICApIHtcbiAgICBpZiAob2xkVm5vZGUgPT09IHZub2RlKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBpZiAoaXNEZWYodm5vZGUuZWxtKSAmJiBpc0RlZihvd25lckFycmF5KSkge1xuICAgICAgLy8gY2xvbmUgcmV1c2VkIHZub2RlXG4gICAgICB2bm9kZSA9IG93bmVyQXJyYXlbaW5kZXhdID0gY2xvbmVWTm9kZSh2bm9kZSk7XG4gICAgfVxuXG4gICAgdmFyIGVsbSA9IHZub2RlLmVsbSA9IG9sZFZub2RlLmVsbTtcblxuICAgIGlmIChpc1RydWUob2xkVm5vZGUuaXNBc3luY1BsYWNlaG9sZGVyKSkge1xuICAgICAgaWYgKGlzRGVmKHZub2RlLmFzeW5jRmFjdG9yeS5yZXNvbHZlZCkpIHtcbiAgICAgICAgaHlkcmF0ZShvbGRWbm9kZS5lbG0sIHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdm5vZGUuaXNBc3luY1BsYWNlaG9sZGVyID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vIHJldXNlIGVsZW1lbnQgZm9yIHN0YXRpYyB0cmVlcy5cbiAgICAvLyBub3RlIHdlIG9ubHkgZG8gdGhpcyBpZiB0aGUgdm5vZGUgaXMgY2xvbmVkIC1cbiAgICAvLyBpZiB0aGUgbmV3IG5vZGUgaXMgbm90IGNsb25lZCBpdCBtZWFucyB0aGUgcmVuZGVyIGZ1bmN0aW9ucyBoYXZlIGJlZW5cbiAgICAvLyByZXNldCBieSB0aGUgaG90LXJlbG9hZC1hcGkgYW5kIHdlIG5lZWQgdG8gZG8gYSBwcm9wZXIgcmUtcmVuZGVyLlxuICAgIGlmIChpc1RydWUodm5vZGUuaXNTdGF0aWMpICYmXG4gICAgICBpc1RydWUob2xkVm5vZGUuaXNTdGF0aWMpICYmXG4gICAgICB2bm9kZS5rZXkgPT09IG9sZFZub2RlLmtleSAmJlxuICAgICAgKGlzVHJ1ZSh2bm9kZS5pc0Nsb25lZCkgfHwgaXNUcnVlKHZub2RlLmlzT25jZSkpXG4gICAgKSB7XG4gICAgICB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSA9IG9sZFZub2RlLmNvbXBvbmVudEluc3RhbmNlO1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdmFyIGk7XG4gICAgdmFyIGRhdGEgPSB2bm9kZS5kYXRhO1xuICAgIGlmIChpc0RlZihkYXRhKSAmJiBpc0RlZihpID0gZGF0YS5ob29rKSAmJiBpc0RlZihpID0gaS5wcmVwYXRjaCkpIHtcbiAgICAgIGkob2xkVm5vZGUsIHZub2RlKTtcbiAgICB9XG5cbiAgICB2YXIgb2xkQ2ggPSBvbGRWbm9kZS5jaGlsZHJlbjtcbiAgICB2YXIgY2ggPSB2bm9kZS5jaGlsZHJlbjtcbiAgICBpZiAoaXNEZWYoZGF0YSkgJiYgaXNQYXRjaGFibGUodm5vZGUpKSB7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgY2JzLnVwZGF0ZS5sZW5ndGg7ICsraSkgeyBjYnMudXBkYXRlW2ldKG9sZFZub2RlLCB2bm9kZSk7IH1cbiAgICAgIGlmIChpc0RlZihpID0gZGF0YS5ob29rKSAmJiBpc0RlZihpID0gaS51cGRhdGUpKSB7IGkob2xkVm5vZGUsIHZub2RlKTsgfVxuICAgIH1cbiAgICBpZiAoaXNVbmRlZih2bm9kZS50ZXh0KSkge1xuICAgICAgaWYgKGlzRGVmKG9sZENoKSAmJiBpc0RlZihjaCkpIHtcbiAgICAgICAgaWYgKG9sZENoICE9PSBjaCkgeyB1cGRhdGVDaGlsZHJlbihlbG0sIG9sZENoLCBjaCwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCByZW1vdmVPbmx5KTsgfVxuICAgICAgfSBlbHNlIGlmIChpc0RlZihjaCkpIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICBjaGVja0R1cGxpY2F0ZUtleXMoY2gpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0RlZihvbGRWbm9kZS50ZXh0KSkgeyBub2RlT3BzLnNldFRleHRDb250ZW50KGVsbSwgJycpOyB9XG4gICAgICAgIGFkZFZub2RlcyhlbG0sIG51bGwsIGNoLCAwLCBjaC5sZW5ndGggLSAxLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgfSBlbHNlIGlmIChpc0RlZihvbGRDaCkpIHtcbiAgICAgICAgcmVtb3ZlVm5vZGVzKG9sZENoLCAwLCBvbGRDaC5sZW5ndGggLSAxKTtcbiAgICAgIH0gZWxzZSBpZiAoaXNEZWYob2xkVm5vZGUudGV4dCkpIHtcbiAgICAgICAgbm9kZU9wcy5zZXRUZXh0Q29udGVudChlbG0sICcnKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG9sZFZub2RlLnRleHQgIT09IHZub2RlLnRleHQpIHtcbiAgICAgIG5vZGVPcHMuc2V0VGV4dENvbnRlbnQoZWxtLCB2bm9kZS50ZXh0KTtcbiAgICB9XG4gICAgaWYgKGlzRGVmKGRhdGEpKSB7XG4gICAgICBpZiAoaXNEZWYoaSA9IGRhdGEuaG9vaykgJiYgaXNEZWYoaSA9IGkucG9zdHBhdGNoKSkgeyBpKG9sZFZub2RlLCB2bm9kZSk7IH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpbnZva2VJbnNlcnRIb29rICh2bm9kZSwgcXVldWUsIGluaXRpYWwpIHtcbiAgICAvLyBkZWxheSBpbnNlcnQgaG9va3MgZm9yIGNvbXBvbmVudCByb290IG5vZGVzLCBpbnZva2UgdGhlbSBhZnRlciB0aGVcbiAgICAvLyBlbGVtZW50IGlzIHJlYWxseSBpbnNlcnRlZFxuICAgIGlmIChpc1RydWUoaW5pdGlhbCkgJiYgaXNEZWYodm5vZGUucGFyZW50KSkge1xuICAgICAgdm5vZGUucGFyZW50LmRhdGEucGVuZGluZ0luc2VydCA9IHF1ZXVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHF1ZXVlLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIHF1ZXVlW2ldLmRhdGEuaG9vay5pbnNlcnQocXVldWVbaV0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHZhciBoeWRyYXRpb25CYWlsZWQgPSBmYWxzZTtcbiAgLy8gbGlzdCBvZiBtb2R1bGVzIHRoYXQgY2FuIHNraXAgY3JlYXRlIGhvb2sgZHVyaW5nIGh5ZHJhdGlvbiBiZWNhdXNlIHRoZXlcbiAgLy8gYXJlIGFscmVhZHkgcmVuZGVyZWQgb24gdGhlIGNsaWVudCBvciBoYXMgbm8gbmVlZCBmb3IgaW5pdGlhbGl6YXRpb25cbiAgLy8gTm90ZTogc3R5bGUgaXMgZXhjbHVkZWQgYmVjYXVzZSBpdCByZWxpZXMgb24gaW5pdGlhbCBjbG9uZSBmb3IgZnV0dXJlXG4gIC8vIGRlZXAgdXBkYXRlcyAoIzcwNjMpLlxuICB2YXIgaXNSZW5kZXJlZE1vZHVsZSA9IG1ha2VNYXAoJ2F0dHJzLGNsYXNzLHN0YXRpY0NsYXNzLHN0YXRpY1N0eWxlLGtleScpO1xuXG4gIC8vIE5vdGU6IHRoaXMgaXMgYSBicm93c2VyLW9ubHkgZnVuY3Rpb24gc28gd2UgY2FuIGFzc3VtZSBlbG1zIGFyZSBET00gbm9kZXMuXG4gIGZ1bmN0aW9uIGh5ZHJhdGUgKGVsbSwgdm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgaW5WUHJlKSB7XG4gICAgdmFyIGk7XG4gICAgdmFyIHRhZyA9IHZub2RlLnRhZztcbiAgICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7XG4gICAgdmFyIGNoaWxkcmVuID0gdm5vZGUuY2hpbGRyZW47XG4gICAgaW5WUHJlID0gaW5WUHJlIHx8IChkYXRhICYmIGRhdGEucHJlKTtcbiAgICB2bm9kZS5lbG0gPSBlbG07XG5cbiAgICBpZiAoaXNUcnVlKHZub2RlLmlzQ29tbWVudCkgJiYgaXNEZWYodm5vZGUuYXN5bmNGYWN0b3J5KSkge1xuICAgICAgdm5vZGUuaXNBc3luY1BsYWNlaG9sZGVyID0gdHJ1ZTtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICAgIC8vIGFzc2VydCBub2RlIG1hdGNoXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmICghYXNzZXJ0Tm9kZU1hdGNoKGVsbSwgdm5vZGUsIGluVlByZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgfVxuICAgIGlmIChpc0RlZihkYXRhKSkge1xuICAgICAgaWYgKGlzRGVmKGkgPSBkYXRhLmhvb2spICYmIGlzRGVmKGkgPSBpLmluaXQpKSB7IGkodm5vZGUsIHRydWUgLyogaHlkcmF0aW5nICovKTsgfVxuICAgICAgaWYgKGlzRGVmKGkgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSkpIHtcbiAgICAgICAgLy8gY2hpbGQgY29tcG9uZW50LiBpdCBzaG91bGQgaGF2ZSBoeWRyYXRlZCBpdHMgb3duIHRyZWUuXG4gICAgICAgIGluaXRDb21wb25lbnQodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9XG4gICAgfVxuICAgIGlmIChpc0RlZih0YWcpKSB7XG4gICAgICBpZiAoaXNEZWYoY2hpbGRyZW4pKSB7XG4gICAgICAgIC8vIGVtcHR5IGVsZW1lbnQsIGFsbG93IGNsaWVudCB0byBwaWNrIHVwIGFuZCBwb3B1bGF0ZSBjaGlsZHJlblxuICAgICAgICBpZiAoIWVsbS5oYXNDaGlsZE5vZGVzKCkpIHtcbiAgICAgICAgICBjcmVhdGVDaGlsZHJlbih2bm9kZSwgY2hpbGRyZW4sIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gdi1odG1sIGFuZCBkb21Qcm9wczogaW5uZXJIVE1MXG4gICAgICAgICAgaWYgKGlzRGVmKGkgPSBkYXRhKSAmJiBpc0RlZihpID0gaS5kb21Qcm9wcykgJiYgaXNEZWYoaSA9IGkuaW5uZXJIVE1MKSkge1xuICAgICAgICAgICAgaWYgKGkgIT09IGVsbS5pbm5lckhUTUwpIHtcbiAgICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgICAgICAgICAgICAgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgICAgICAgICAgIWh5ZHJhdGlvbkJhaWxlZFxuICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBoeWRyYXRpb25CYWlsZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignUGFyZW50OiAnLCBlbG0pO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2Fybignc2VydmVyIGlubmVySFRNTDogJywgaSk7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdjbGllbnQgaW5uZXJIVE1MOiAnLCBlbG0uaW5uZXJIVE1MKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gaXRlcmF0ZSBhbmQgY29tcGFyZSBjaGlsZHJlbiBsaXN0c1xuICAgICAgICAgICAgdmFyIGNoaWxkcmVuTWF0Y2ggPSB0cnVlO1xuICAgICAgICAgICAgdmFyIGNoaWxkTm9kZSA9IGVsbS5maXJzdENoaWxkO1xuICAgICAgICAgICAgZm9yICh2YXIgaSQxID0gMDsgaSQxIDwgY2hpbGRyZW4ubGVuZ3RoOyBpJDErKykge1xuICAgICAgICAgICAgICBpZiAoIWNoaWxkTm9kZSB8fCAhaHlkcmF0ZShjaGlsZE5vZGUsIGNoaWxkcmVuW2kkMV0sIGluc2VydGVkVm5vZGVRdWV1ZSwgaW5WUHJlKSkge1xuICAgICAgICAgICAgICAgIGNoaWxkcmVuTWF0Y2ggPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGNoaWxkTm9kZSA9IGNoaWxkTm9kZS5uZXh0U2libGluZztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGlmIGNoaWxkTm9kZSBpcyBub3QgbnVsbCwgaXQgbWVhbnMgdGhlIGFjdHVhbCBjaGlsZE5vZGVzIGxpc3QgaXNcbiAgICAgICAgICAgIC8vIGxvbmdlciB0aGFuIHRoZSB2aXJ0dWFsIGNoaWxkcmVuIGxpc3QuXG4gICAgICAgICAgICBpZiAoIWNoaWxkcmVuTWF0Y2ggfHwgY2hpbGROb2RlKSB7XG4gICAgICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgICAgICAgICAgICAgIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICAgICAgICAgICFoeWRyYXRpb25CYWlsZWRcbiAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgaHlkcmF0aW9uQmFpbGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ1BhcmVudDogJywgZWxtKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ01pc21hdGNoaW5nIGNoaWxkTm9kZXMgdnMuIFZOb2RlczogJywgZWxtLmNoaWxkTm9kZXMsIGNoaWxkcmVuKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChpc0RlZihkYXRhKSkge1xuICAgICAgICB2YXIgZnVsbEludm9rZSA9IGZhbHNlO1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gZGF0YSkge1xuICAgICAgICAgIGlmICghaXNSZW5kZXJlZE1vZHVsZShrZXkpKSB7XG4gICAgICAgICAgICBmdWxsSW52b2tlID0gdHJ1ZTtcbiAgICAgICAgICAgIGludm9rZUNyZWF0ZUhvb2tzKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFmdWxsSW52b2tlICYmIGRhdGFbJ2NsYXNzJ10pIHtcbiAgICAgICAgICAvLyBlbnN1cmUgY29sbGVjdGluZyBkZXBzIGZvciBkZWVwIGNsYXNzIGJpbmRpbmdzIGZvciBmdXR1cmUgdXBkYXRlc1xuICAgICAgICAgIHRyYXZlcnNlKGRhdGFbJ2NsYXNzJ10pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChlbG0uZGF0YSAhPT0gdm5vZGUudGV4dCkge1xuICAgICAgZWxtLmRhdGEgPSB2bm9kZS50ZXh0O1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgZnVuY3Rpb24gYXNzZXJ0Tm9kZU1hdGNoIChub2RlLCB2bm9kZSwgaW5WUHJlKSB7XG4gICAgaWYgKGlzRGVmKHZub2RlLnRhZykpIHtcbiAgICAgIHJldHVybiB2bm9kZS50YWcuaW5kZXhPZigndnVlLWNvbXBvbmVudCcpID09PSAwIHx8IChcbiAgICAgICAgIWlzVW5rbm93bkVsZW1lbnQkJDEodm5vZGUsIGluVlByZSkgJiZcbiAgICAgICAgdm5vZGUudGFnLnRvTG93ZXJDYXNlKCkgPT09IChub2RlLnRhZ05hbWUgJiYgbm9kZS50YWdOYW1lLnRvTG93ZXJDYXNlKCkpXG4gICAgICApXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBub2RlLm5vZGVUeXBlID09PSAodm5vZGUuaXNDb21tZW50ID8gOCA6IDMpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIHBhdGNoIChvbGRWbm9kZSwgdm5vZGUsIGh5ZHJhdGluZywgcmVtb3ZlT25seSkge1xuICAgIGlmIChpc1VuZGVmKHZub2RlKSkge1xuICAgICAgaWYgKGlzRGVmKG9sZFZub2RlKSkgeyBpbnZva2VEZXN0cm95SG9vayhvbGRWbm9kZSk7IH1cbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHZhciBpc0luaXRpYWxQYXRjaCA9IGZhbHNlO1xuICAgIHZhciBpbnNlcnRlZFZub2RlUXVldWUgPSBbXTtcblxuICAgIGlmIChpc1VuZGVmKG9sZFZub2RlKSkge1xuICAgICAgLy8gZW1wdHkgbW91bnQgKGxpa2VseSBhcyBjb21wb25lbnQpLCBjcmVhdGUgbmV3IHJvb3QgZWxlbWVudFxuICAgICAgaXNJbml0aWFsUGF0Y2ggPSB0cnVlO1xuICAgICAgY3JlYXRlRWxtKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgaXNSZWFsRWxlbWVudCA9IGlzRGVmKG9sZFZub2RlLm5vZGVUeXBlKTtcbiAgICAgIGlmICghaXNSZWFsRWxlbWVudCAmJiBzYW1lVm5vZGUob2xkVm5vZGUsIHZub2RlKSkge1xuICAgICAgICAvLyBwYXRjaCBleGlzdGluZyByb290IG5vZGVcbiAgICAgICAgcGF0Y2hWbm9kZShvbGRWbm9kZSwgdm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgbnVsbCwgbnVsbCwgcmVtb3ZlT25seSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoaXNSZWFsRWxlbWVudCkge1xuICAgICAgICAgIC8vIG1vdW50aW5nIHRvIGEgcmVhbCBlbGVtZW50XG4gICAgICAgICAgLy8gY2hlY2sgaWYgdGhpcyBpcyBzZXJ2ZXItcmVuZGVyZWQgY29udGVudCBhbmQgaWYgd2UgY2FuIHBlcmZvcm1cbiAgICAgICAgICAvLyBhIHN1Y2Nlc3NmdWwgaHlkcmF0aW9uLlxuICAgICAgICAgIGlmIChvbGRWbm9kZS5ub2RlVHlwZSA9PT0gMSAmJiBvbGRWbm9kZS5oYXNBdHRyaWJ1dGUoU1NSX0FUVFIpKSB7XG4gICAgICAgICAgICBvbGRWbm9kZS5yZW1vdmVBdHRyaWJ1dGUoU1NSX0FUVFIpO1xuICAgICAgICAgICAgaHlkcmF0aW5nID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGlzVHJ1ZShoeWRyYXRpbmcpKSB7XG4gICAgICAgICAgICBpZiAoaHlkcmF0ZShvbGRWbm9kZSwgdm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSkpIHtcbiAgICAgICAgICAgICAgaW52b2tlSW5zZXJ0SG9vayh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCB0cnVlKTtcbiAgICAgICAgICAgICAgcmV0dXJuIG9sZFZub2RlXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICAgICAgd2FybihcbiAgICAgICAgICAgICAgICAnVGhlIGNsaWVudC1zaWRlIHJlbmRlcmVkIHZpcnR1YWwgRE9NIHRyZWUgaXMgbm90IG1hdGNoaW5nICcgK1xuICAgICAgICAgICAgICAgICdzZXJ2ZXItcmVuZGVyZWQgY29udGVudC4gVGhpcyBpcyBsaWtlbHkgY2F1c2VkIGJ5IGluY29ycmVjdCAnICtcbiAgICAgICAgICAgICAgICAnSFRNTCBtYXJrdXAsIGZvciBleGFtcGxlIG5lc3RpbmcgYmxvY2stbGV2ZWwgZWxlbWVudHMgaW5zaWRlICcgK1xuICAgICAgICAgICAgICAgICc8cD4sIG9yIG1pc3NpbmcgPHRib2R5Pi4gQmFpbGluZyBoeWRyYXRpb24gYW5kIHBlcmZvcm1pbmcgJyArXG4gICAgICAgICAgICAgICAgJ2Z1bGwgY2xpZW50LXNpZGUgcmVuZGVyLidcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gZWl0aGVyIG5vdCBzZXJ2ZXItcmVuZGVyZWQsIG9yIGh5ZHJhdGlvbiBmYWlsZWQuXG4gICAgICAgICAgLy8gY3JlYXRlIGFuIGVtcHR5IG5vZGUgYW5kIHJlcGxhY2UgaXRcbiAgICAgICAgICBvbGRWbm9kZSA9IGVtcHR5Tm9kZUF0KG9sZFZub2RlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHJlcGxhY2luZyBleGlzdGluZyBlbGVtZW50XG4gICAgICAgIHZhciBvbGRFbG0gPSBvbGRWbm9kZS5lbG07XG4gICAgICAgIHZhciBwYXJlbnRFbG0gPSBub2RlT3BzLnBhcmVudE5vZGUob2xkRWxtKTtcblxuICAgICAgICAvLyBjcmVhdGUgbmV3IG5vZGVcbiAgICAgICAgY3JlYXRlRWxtKFxuICAgICAgICAgIHZub2RlLFxuICAgICAgICAgIGluc2VydGVkVm5vZGVRdWV1ZSxcbiAgICAgICAgICAvLyBleHRyZW1lbHkgcmFyZSBlZGdlIGNhc2U6IGRvIG5vdCBpbnNlcnQgaWYgb2xkIGVsZW1lbnQgaXMgaW4gYVxuICAgICAgICAgIC8vIGxlYXZpbmcgdHJhbnNpdGlvbi4gT25seSBoYXBwZW5zIHdoZW4gY29tYmluaW5nIHRyYW5zaXRpb24gK1xuICAgICAgICAgIC8vIGtlZXAtYWxpdmUgKyBIT0NzLiAoIzQ1OTApXG4gICAgICAgICAgb2xkRWxtLl9sZWF2ZUNiID8gbnVsbCA6IHBhcmVudEVsbSxcbiAgICAgICAgICBub2RlT3BzLm5leHRTaWJsaW5nKG9sZEVsbSlcbiAgICAgICAgKTtcblxuICAgICAgICAvLyB1cGRhdGUgcGFyZW50IHBsYWNlaG9sZGVyIG5vZGUgZWxlbWVudCwgcmVjdXJzaXZlbHlcbiAgICAgICAgaWYgKGlzRGVmKHZub2RlLnBhcmVudCkpIHtcbiAgICAgICAgICB2YXIgYW5jZXN0b3IgPSB2bm9kZS5wYXJlbnQ7XG4gICAgICAgICAgdmFyIHBhdGNoYWJsZSA9IGlzUGF0Y2hhYmxlKHZub2RlKTtcbiAgICAgICAgICB3aGlsZSAoYW5jZXN0b3IpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2JzLmRlc3Ryb3kubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgY2JzLmRlc3Ryb3lbaV0oYW5jZXN0b3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYW5jZXN0b3IuZWxtID0gdm5vZGUuZWxtO1xuICAgICAgICAgICAgaWYgKHBhdGNoYWJsZSkge1xuICAgICAgICAgICAgICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCBjYnMuY3JlYXRlLmxlbmd0aDsgKytpJDEpIHtcbiAgICAgICAgICAgICAgICBjYnMuY3JlYXRlW2kkMV0oZW1wdHlOb2RlLCBhbmNlc3Rvcik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgLy8gIzY1MTNcbiAgICAgICAgICAgICAgLy8gaW52b2tlIGluc2VydCBob29rcyB0aGF0IG1heSBoYXZlIGJlZW4gbWVyZ2VkIGJ5IGNyZWF0ZSBob29rcy5cbiAgICAgICAgICAgICAgLy8gZS5nLiBmb3IgZGlyZWN0aXZlcyB0aGF0IHVzZXMgdGhlIFwiaW5zZXJ0ZWRcIiBob29rLlxuICAgICAgICAgICAgICB2YXIgaW5zZXJ0ID0gYW5jZXN0b3IuZGF0YS5ob29rLmluc2VydDtcbiAgICAgICAgICAgICAgaWYgKGluc2VydC5tZXJnZWQpIHtcbiAgICAgICAgICAgICAgICAvLyBzdGFydCBhdCBpbmRleCAxIHRvIGF2b2lkIHJlLWludm9raW5nIGNvbXBvbmVudCBtb3VudGVkIGhvb2tcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpJDIgPSAxOyBpJDIgPCBpbnNlcnQuZm5zLmxlbmd0aDsgaSQyKyspIHtcbiAgICAgICAgICAgICAgICAgIGluc2VydC5mbnNbaSQyXSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmVnaXN0ZXJSZWYoYW5jZXN0b3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYW5jZXN0b3IgPSBhbmNlc3Rvci5wYXJlbnQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gZGVzdHJveSBvbGQgbm9kZVxuICAgICAgICBpZiAoaXNEZWYocGFyZW50RWxtKSkge1xuICAgICAgICAgIHJlbW92ZVZub2Rlcyhbb2xkVm5vZGVdLCAwLCAwKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc0RlZihvbGRWbm9kZS50YWcpKSB7XG4gICAgICAgICAgaW52b2tlRGVzdHJveUhvb2sob2xkVm5vZGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaW52b2tlSW5zZXJ0SG9vayh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBpc0luaXRpYWxQYXRjaCk7XG4gICAgcmV0dXJuIHZub2RlLmVsbVxuICB9XG59XG5cbi8qICAqL1xuXG52YXIgZGlyZWN0aXZlcyA9IHtcbiAgY3JlYXRlOiB1cGRhdGVEaXJlY3RpdmVzLFxuICB1cGRhdGU6IHVwZGF0ZURpcmVjdGl2ZXMsXG4gIGRlc3Ryb3k6IGZ1bmN0aW9uIHVuYmluZERpcmVjdGl2ZXMgKHZub2RlKSB7XG4gICAgdXBkYXRlRGlyZWN0aXZlcyh2bm9kZSwgZW1wdHlOb2RlKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gdXBkYXRlRGlyZWN0aXZlcyAob2xkVm5vZGUsIHZub2RlKSB7XG4gIGlmIChvbGRWbm9kZS5kYXRhLmRpcmVjdGl2ZXMgfHwgdm5vZGUuZGF0YS5kaXJlY3RpdmVzKSB7XG4gICAgX3VwZGF0ZShvbGRWbm9kZSwgdm5vZGUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF91cGRhdGUgKG9sZFZub2RlLCB2bm9kZSkge1xuICB2YXIgaXNDcmVhdGUgPSBvbGRWbm9kZSA9PT0gZW1wdHlOb2RlO1xuICB2YXIgaXNEZXN0cm95ID0gdm5vZGUgPT09IGVtcHR5Tm9kZTtcbiAgdmFyIG9sZERpcnMgPSBub3JtYWxpemVEaXJlY3RpdmVzJDEob2xkVm5vZGUuZGF0YS5kaXJlY3RpdmVzLCBvbGRWbm9kZS5jb250ZXh0KTtcbiAgdmFyIG5ld0RpcnMgPSBub3JtYWxpemVEaXJlY3RpdmVzJDEodm5vZGUuZGF0YS5kaXJlY3RpdmVzLCB2bm9kZS5jb250ZXh0KTtcblxuICB2YXIgZGlyc1dpdGhJbnNlcnQgPSBbXTtcbiAgdmFyIGRpcnNXaXRoUG9zdHBhdGNoID0gW107XG5cbiAgdmFyIGtleSwgb2xkRGlyLCBkaXI7XG4gIGZvciAoa2V5IGluIG5ld0RpcnMpIHtcbiAgICBvbGREaXIgPSBvbGREaXJzW2tleV07XG4gICAgZGlyID0gbmV3RGlyc1trZXldO1xuICAgIGlmICghb2xkRGlyKSB7XG4gICAgICAvLyBuZXcgZGlyZWN0aXZlLCBiaW5kXG4gICAgICBjYWxsSG9vayQxKGRpciwgJ2JpbmQnLCB2bm9kZSwgb2xkVm5vZGUpO1xuICAgICAgaWYgKGRpci5kZWYgJiYgZGlyLmRlZi5pbnNlcnRlZCkge1xuICAgICAgICBkaXJzV2l0aEluc2VydC5wdXNoKGRpcik7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGV4aXN0aW5nIGRpcmVjdGl2ZSwgdXBkYXRlXG4gICAgICBkaXIub2xkVmFsdWUgPSBvbGREaXIudmFsdWU7XG4gICAgICBkaXIub2xkQXJnID0gb2xkRGlyLmFyZztcbiAgICAgIGNhbGxIb29rJDEoZGlyLCAndXBkYXRlJywgdm5vZGUsIG9sZFZub2RlKTtcbiAgICAgIGlmIChkaXIuZGVmICYmIGRpci5kZWYuY29tcG9uZW50VXBkYXRlZCkge1xuICAgICAgICBkaXJzV2l0aFBvc3RwYXRjaC5wdXNoKGRpcik7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKGRpcnNXaXRoSW5zZXJ0Lmxlbmd0aCkge1xuICAgIHZhciBjYWxsSW5zZXJ0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkaXJzV2l0aEluc2VydC5sZW5ndGg7IGkrKykge1xuICAgICAgICBjYWxsSG9vayQxKGRpcnNXaXRoSW5zZXJ0W2ldLCAnaW5zZXJ0ZWQnLCB2bm9kZSwgb2xkVm5vZGUpO1xuICAgICAgfVxuICAgIH07XG4gICAgaWYgKGlzQ3JlYXRlKSB7XG4gICAgICBtZXJnZVZOb2RlSG9vayh2bm9kZSwgJ2luc2VydCcsIGNhbGxJbnNlcnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjYWxsSW5zZXJ0KCk7XG4gICAgfVxuICB9XG5cbiAgaWYgKGRpcnNXaXRoUG9zdHBhdGNoLmxlbmd0aCkge1xuICAgIG1lcmdlVk5vZGVIb29rKHZub2RlLCAncG9zdHBhdGNoJywgZnVuY3Rpb24gKCkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkaXJzV2l0aFBvc3RwYXRjaC5sZW5ndGg7IGkrKykge1xuICAgICAgICBjYWxsSG9vayQxKGRpcnNXaXRoUG9zdHBhdGNoW2ldLCAnY29tcG9uZW50VXBkYXRlZCcsIHZub2RlLCBvbGRWbm9kZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBpZiAoIWlzQ3JlYXRlKSB7XG4gICAgZm9yIChrZXkgaW4gb2xkRGlycykge1xuICAgICAgaWYgKCFuZXdEaXJzW2tleV0pIHtcbiAgICAgICAgLy8gbm8gbG9uZ2VyIHByZXNlbnQsIHVuYmluZFxuICAgICAgICBjYWxsSG9vayQxKG9sZERpcnNba2V5XSwgJ3VuYmluZCcsIG9sZFZub2RlLCBvbGRWbm9kZSwgaXNEZXN0cm95KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxudmFyIGVtcHR5TW9kaWZpZXJzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuZnVuY3Rpb24gbm9ybWFsaXplRGlyZWN0aXZlcyQxIChcbiAgZGlycyxcbiAgdm1cbikge1xuICB2YXIgcmVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgaWYgKCFkaXJzKSB7XG4gICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgcmV0dXJuIHJlc1xuICB9XG4gIHZhciBpLCBkaXI7XG4gIGZvciAoaSA9IDA7IGkgPCBkaXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgZGlyID0gZGlyc1tpXTtcbiAgICBpZiAoIWRpci5tb2RpZmllcnMpIHtcbiAgICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgICAgZGlyLm1vZGlmaWVycyA9IGVtcHR5TW9kaWZpZXJzO1xuICAgIH1cbiAgICByZXNbZ2V0UmF3RGlyTmFtZShkaXIpXSA9IGRpcjtcbiAgICBkaXIuZGVmID0gcmVzb2x2ZUFzc2V0KHZtLiRvcHRpb25zLCAnZGlyZWN0aXZlcycsIGRpci5uYW1lLCB0cnVlKTtcbiAgfVxuICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBnZXRSYXdEaXJOYW1lIChkaXIpIHtcbiAgcmV0dXJuIGRpci5yYXdOYW1lIHx8ICgoZGlyLm5hbWUpICsgXCIuXCIgKyAoT2JqZWN0LmtleXMoZGlyLm1vZGlmaWVycyB8fCB7fSkuam9pbignLicpKSlcbn1cblxuZnVuY3Rpb24gY2FsbEhvb2skMSAoZGlyLCBob29rLCB2bm9kZSwgb2xkVm5vZGUsIGlzRGVzdHJveSkge1xuICB2YXIgZm4gPSBkaXIuZGVmICYmIGRpci5kZWZbaG9va107XG4gIGlmIChmbikge1xuICAgIHRyeSB7XG4gICAgICBmbih2bm9kZS5lbG0sIGRpciwgdm5vZGUsIG9sZFZub2RlLCBpc0Rlc3Ryb3kpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGhhbmRsZUVycm9yKGUsIHZub2RlLmNvbnRleHQsIChcImRpcmVjdGl2ZSBcIiArIChkaXIubmFtZSkgKyBcIiBcIiArIGhvb2sgKyBcIiBob29rXCIpKTtcbiAgICB9XG4gIH1cbn1cblxudmFyIGJhc2VNb2R1bGVzID0gW1xuICByZWYsXG4gIGRpcmVjdGl2ZXNcbl07XG5cbi8qICAqL1xuXG5mdW5jdGlvbiB1cGRhdGVBdHRycyAob2xkVm5vZGUsIHZub2RlKSB7XG4gIHZhciBvcHRzID0gdm5vZGUuY29tcG9uZW50T3B0aW9ucztcbiAgaWYgKGlzRGVmKG9wdHMpICYmIG9wdHMuQ3Rvci5vcHRpb25zLmluaGVyaXRBdHRycyA9PT0gZmFsc2UpIHtcbiAgICByZXR1cm5cbiAgfVxuICBpZiAoaXNVbmRlZihvbGRWbm9kZS5kYXRhLmF0dHJzKSAmJiBpc1VuZGVmKHZub2RlLmRhdGEuYXR0cnMpKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIGtleSwgY3VyLCBvbGQ7XG4gIHZhciBlbG0gPSB2bm9kZS5lbG07XG4gIHZhciBvbGRBdHRycyA9IG9sZFZub2RlLmRhdGEuYXR0cnMgfHwge307XG4gIHZhciBhdHRycyA9IHZub2RlLmRhdGEuYXR0cnMgfHwge307XG4gIC8vIGNsb25lIG9ic2VydmVkIG9iamVjdHMsIGFzIHRoZSB1c2VyIHByb2JhYmx5IHdhbnRzIHRvIG11dGF0ZSBpdFxuICBpZiAoaXNEZWYoYXR0cnMuX19vYl9fKSkge1xuICAgIGF0dHJzID0gdm5vZGUuZGF0YS5hdHRycyA9IGV4dGVuZCh7fSwgYXR0cnMpO1xuICB9XG5cbiAgZm9yIChrZXkgaW4gYXR0cnMpIHtcbiAgICBjdXIgPSBhdHRyc1trZXldO1xuICAgIG9sZCA9IG9sZEF0dHJzW2tleV07XG4gICAgaWYgKG9sZCAhPT0gY3VyKSB7XG4gICAgICBzZXRBdHRyKGVsbSwga2V5LCBjdXIsIHZub2RlLmRhdGEucHJlKTtcbiAgICB9XG4gIH1cbiAgLy8gIzQzOTE6IGluIElFOSwgc2V0dGluZyB0eXBlIGNhbiByZXNldCB2YWx1ZSBmb3IgaW5wdXRbdHlwZT1yYWRpb11cbiAgLy8gIzY2NjY6IElFL0VkZ2UgZm9yY2VzIHByb2dyZXNzIHZhbHVlIGRvd24gdG8gMSBiZWZvcmUgc2V0dGluZyBhIG1heFxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKChpc0lFIHx8IGlzRWRnZSkgJiYgYXR0cnMudmFsdWUgIT09IG9sZEF0dHJzLnZhbHVlKSB7XG4gICAgc2V0QXR0cihlbG0sICd2YWx1ZScsIGF0dHJzLnZhbHVlKTtcbiAgfVxuICBmb3IgKGtleSBpbiBvbGRBdHRycykge1xuICAgIGlmIChpc1VuZGVmKGF0dHJzW2tleV0pKSB7XG4gICAgICBpZiAoaXNYbGluayhrZXkpKSB7XG4gICAgICAgIGVsbS5yZW1vdmVBdHRyaWJ1dGVOUyh4bGlua05TLCBnZXRYbGlua1Byb3Aoa2V5KSk7XG4gICAgICB9IGVsc2UgaWYgKCFpc0VudW1lcmF0ZWRBdHRyKGtleSkpIHtcbiAgICAgICAgZWxtLnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBzZXRBdHRyIChlbCwga2V5LCB2YWx1ZSwgaXNJblByZSkge1xuICBpZiAoaXNJblByZSB8fCBlbC50YWdOYW1lLmluZGV4T2YoJy0nKSA+IC0xKSB7XG4gICAgYmFzZVNldEF0dHIoZWwsIGtleSwgdmFsdWUpO1xuICB9IGVsc2UgaWYgKGlzQm9vbGVhbkF0dHIoa2V5KSkge1xuICAgIC8vIHNldCBhdHRyaWJ1dGUgZm9yIGJsYW5rIHZhbHVlXG4gICAgLy8gZS5nLiA8b3B0aW9uIGRpc2FibGVkPlNlbGVjdCBvbmU8L29wdGlvbj5cbiAgICBpZiAoaXNGYWxzeUF0dHJWYWx1ZSh2YWx1ZSkpIHtcbiAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyB0ZWNobmljYWxseSBhbGxvd2Z1bGxzY3JlZW4gaXMgYSBib29sZWFuIGF0dHJpYnV0ZSBmb3IgPGlmcmFtZT4sXG4gICAgICAvLyBidXQgRmxhc2ggZXhwZWN0cyBhIHZhbHVlIG9mIFwidHJ1ZVwiIHdoZW4gdXNlZCBvbiA8ZW1iZWQ+IHRhZ1xuICAgICAgdmFsdWUgPSBrZXkgPT09ICdhbGxvd2Z1bGxzY3JlZW4nICYmIGVsLnRhZ05hbWUgPT09ICdFTUJFRCdcbiAgICAgICAgPyAndHJ1ZSdcbiAgICAgICAgOiBrZXk7XG4gICAgICBlbC5zZXRBdHRyaWJ1dGUoa2V5LCB2YWx1ZSk7XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzRW51bWVyYXRlZEF0dHIoa2V5KSkge1xuICAgIGVsLnNldEF0dHJpYnV0ZShrZXksIGNvbnZlcnRFbnVtZXJhdGVkVmFsdWUoa2V5LCB2YWx1ZSkpO1xuICB9IGVsc2UgaWYgKGlzWGxpbmsoa2V5KSkge1xuICAgIGlmIChpc0ZhbHN5QXR0clZhbHVlKHZhbHVlKSkge1xuICAgICAgZWwucmVtb3ZlQXR0cmlidXRlTlMoeGxpbmtOUywgZ2V0WGxpbmtQcm9wKGtleSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbC5zZXRBdHRyaWJ1dGVOUyh4bGlua05TLCBrZXksIHZhbHVlKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgYmFzZVNldEF0dHIoZWwsIGtleSwgdmFsdWUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGJhc2VTZXRBdHRyIChlbCwga2V5LCB2YWx1ZSkge1xuICBpZiAoaXNGYWxzeUF0dHJWYWx1ZSh2YWx1ZSkpIHtcbiAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoa2V5KTtcbiAgfSBlbHNlIHtcbiAgICAvLyAjNzEzODogSUUxMCAmIDExIGZpcmVzIGlucHV0IGV2ZW50IHdoZW4gc2V0dGluZyBwbGFjZWhvbGRlciBvblxuICAgIC8vIDx0ZXh0YXJlYT4uLi4gYmxvY2sgdGhlIGZpcnN0IGlucHV0IGV2ZW50IGFuZCByZW1vdmUgdGhlIGJsb2NrZXJcbiAgICAvLyBpbW1lZGlhdGVseS5cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoXG4gICAgICBpc0lFICYmICFpc0lFOSAmJlxuICAgICAgZWwudGFnTmFtZSA9PT0gJ1RFWFRBUkVBJyAmJlxuICAgICAga2V5ID09PSAncGxhY2Vob2xkZXInICYmIHZhbHVlICE9PSAnJyAmJiAhZWwuX19pZXBoXG4gICAgKSB7XG4gICAgICB2YXIgYmxvY2tlciA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2lucHV0JywgYmxvY2tlcik7XG4gICAgICB9O1xuICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCBibG9ja2VyKTtcbiAgICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgICAgZWwuX19pZXBoID0gdHJ1ZTsgLyogSUUgcGxhY2Vob2xkZXIgcGF0Y2hlZCAqL1xuICAgIH1cbiAgICBlbC5zZXRBdHRyaWJ1dGUoa2V5LCB2YWx1ZSk7XG4gIH1cbn1cblxudmFyIGF0dHJzID0ge1xuICBjcmVhdGU6IHVwZGF0ZUF0dHJzLFxuICB1cGRhdGU6IHVwZGF0ZUF0dHJzXG59O1xuXG4vKiAgKi9cblxuZnVuY3Rpb24gdXBkYXRlQ2xhc3MgKG9sZFZub2RlLCB2bm9kZSkge1xuICB2YXIgZWwgPSB2bm9kZS5lbG07XG4gIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgdmFyIG9sZERhdGEgPSBvbGRWbm9kZS5kYXRhO1xuICBpZiAoXG4gICAgaXNVbmRlZihkYXRhLnN0YXRpY0NsYXNzKSAmJlxuICAgIGlzVW5kZWYoZGF0YS5jbGFzcykgJiYgKFxuICAgICAgaXNVbmRlZihvbGREYXRhKSB8fCAoXG4gICAgICAgIGlzVW5kZWYob2xkRGF0YS5zdGF0aWNDbGFzcykgJiZcbiAgICAgICAgaXNVbmRlZihvbGREYXRhLmNsYXNzKVxuICAgICAgKVxuICAgIClcbiAgKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgY2xzID0gZ2VuQ2xhc3NGb3JWbm9kZSh2bm9kZSk7XG5cbiAgLy8gaGFuZGxlIHRyYW5zaXRpb24gY2xhc3Nlc1xuICB2YXIgdHJhbnNpdGlvbkNsYXNzID0gZWwuX3RyYW5zaXRpb25DbGFzc2VzO1xuICBpZiAoaXNEZWYodHJhbnNpdGlvbkNsYXNzKSkge1xuICAgIGNscyA9IGNvbmNhdChjbHMsIHN0cmluZ2lmeUNsYXNzKHRyYW5zaXRpb25DbGFzcykpO1xuICB9XG5cbiAgLy8gc2V0IHRoZSBjbGFzc1xuICBpZiAoY2xzICE9PSBlbC5fcHJldkNsYXNzKSB7XG4gICAgZWwuc2V0QXR0cmlidXRlKCdjbGFzcycsIGNscyk7XG4gICAgZWwuX3ByZXZDbGFzcyA9IGNscztcbiAgfVxufVxuXG52YXIga2xhc3MgPSB7XG4gIGNyZWF0ZTogdXBkYXRlQ2xhc3MsXG4gIHVwZGF0ZTogdXBkYXRlQ2xhc3Ncbn07XG5cbi8qICAqL1xuXG4vKiAgKi9cblxuLyogICovXG5cbi8qICAqL1xuXG4vLyBpbiBzb21lIGNhc2VzLCB0aGUgZXZlbnQgdXNlZCBoYXMgdG8gYmUgZGV0ZXJtaW5lZCBhdCBydW50aW1lXG4vLyBzbyB3ZSB1c2VkIHNvbWUgcmVzZXJ2ZWQgdG9rZW5zIGR1cmluZyBjb21waWxlLlxudmFyIFJBTkdFX1RPS0VOID0gJ19fcic7XG52YXIgQ0hFQ0tCT1hfUkFESU9fVE9LRU4gPSAnX19jJztcblxuLyogICovXG5cbi8vIG5vcm1hbGl6ZSB2LW1vZGVsIGV2ZW50IHRva2VucyB0aGF0IGNhbiBvbmx5IGJlIGRldGVybWluZWQgYXQgcnVudGltZS5cbi8vIGl0J3MgaW1wb3J0YW50IHRvIHBsYWNlIHRoZSBldmVudCBhcyB0aGUgZmlyc3QgaW4gdGhlIGFycmF5IGJlY2F1c2Vcbi8vIHRoZSB3aG9sZSBwb2ludCBpcyBlbnN1cmluZyB0aGUgdi1tb2RlbCBjYWxsYmFjayBnZXRzIGNhbGxlZCBiZWZvcmVcbi8vIHVzZXItYXR0YWNoZWQgaGFuZGxlcnMuXG5mdW5jdGlvbiBub3JtYWxpemVFdmVudHMgKG9uKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoaXNEZWYob25bUkFOR0VfVE9LRU5dKSkge1xuICAgIC8vIElFIGlucHV0W3R5cGU9cmFuZ2VdIG9ubHkgc3VwcG9ydHMgYGNoYW5nZWAgZXZlbnRcbiAgICB2YXIgZXZlbnQgPSBpc0lFID8gJ2NoYW5nZScgOiAnaW5wdXQnO1xuICAgIG9uW2V2ZW50XSA9IFtdLmNvbmNhdChvbltSQU5HRV9UT0tFTl0sIG9uW2V2ZW50XSB8fCBbXSk7XG4gICAgZGVsZXRlIG9uW1JBTkdFX1RPS0VOXTtcbiAgfVxuICAvLyBUaGlzIHdhcyBvcmlnaW5hbGx5IGludGVuZGVkIHRvIGZpeCAjNDUyMSBidXQgbm8gbG9uZ2VyIG5lY2Vzc2FyeVxuICAvLyBhZnRlciAyLjUuIEtlZXBpbmcgaXQgZm9yIGJhY2t3YXJkcyBjb21wYXQgd2l0aCBnZW5lcmF0ZWQgY29kZSBmcm9tIDwgMi40XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoaXNEZWYob25bQ0hFQ0tCT1hfUkFESU9fVE9LRU5dKSkge1xuICAgIG9uLmNoYW5nZSA9IFtdLmNvbmNhdChvbltDSEVDS0JPWF9SQURJT19UT0tFTl0sIG9uLmNoYW5nZSB8fCBbXSk7XG4gICAgZGVsZXRlIG9uW0NIRUNLQk9YX1JBRElPX1RPS0VOXTtcbiAgfVxufVxuXG52YXIgdGFyZ2V0JDE7XG5cbmZ1bmN0aW9uIGNyZWF0ZU9uY2VIYW5kbGVyJDEgKGV2ZW50LCBoYW5kbGVyLCBjYXB0dXJlKSB7XG4gIHZhciBfdGFyZ2V0ID0gdGFyZ2V0JDE7IC8vIHNhdmUgY3VycmVudCB0YXJnZXQgZWxlbWVudCBpbiBjbG9zdXJlXG4gIHJldHVybiBmdW5jdGlvbiBvbmNlSGFuZGxlciAoKSB7XG4gICAgdmFyIHJlcyA9IGhhbmRsZXIuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICBpZiAocmVzICE9PSBudWxsKSB7XG4gICAgICByZW1vdmUkMihldmVudCwgb25jZUhhbmRsZXIsIGNhcHR1cmUsIF90YXJnZXQpO1xuICAgIH1cbiAgfVxufVxuXG4vLyAjOTQ0NjogRmlyZWZveCA8PSA1MyAoaW4gcGFydGljdWxhciwgRVNSIDUyKSBoYXMgaW5jb3JyZWN0IEV2ZW50LnRpbWVTdGFtcFxuLy8gaW1wbGVtZW50YXRpb24gYW5kIGRvZXMgbm90IGZpcmUgbWljcm90YXNrcyBpbiBiZXR3ZWVuIGV2ZW50IHByb3BhZ2F0aW9uLCBzb1xuLy8gc2FmZSB0byBleGNsdWRlLlxudmFyIHVzZU1pY3JvdGFza0ZpeCA9IGlzVXNpbmdNaWNyb1Rhc2sgJiYgIShpc0ZGICYmIE51bWJlcihpc0ZGWzFdKSA8PSA1Myk7XG5cbmZ1bmN0aW9uIGFkZCQxIChcbiAgbmFtZSxcbiAgaGFuZGxlcixcbiAgY2FwdHVyZSxcbiAgcGFzc2l2ZVxuKSB7XG4gIC8vIGFzeW5jIGVkZ2UgY2FzZSAjNjU2NjogaW5uZXIgY2xpY2sgZXZlbnQgdHJpZ2dlcnMgcGF0Y2gsIGV2ZW50IGhhbmRsZXJcbiAgLy8gYXR0YWNoZWQgdG8gb3V0ZXIgZWxlbWVudCBkdXJpbmcgcGF0Y2gsIGFuZCB0cmlnZ2VyZWQgYWdhaW4uIFRoaXNcbiAgLy8gaGFwcGVucyBiZWNhdXNlIGJyb3dzZXJzIGZpcmUgbWljcm90YXNrIHRpY2tzIGJldHdlZW4gZXZlbnQgcHJvcGFnYXRpb24uXG4gIC8vIHRoZSBzb2x1dGlvbiBpcyBzaW1wbGU6IHdlIHNhdmUgdGhlIHRpbWVzdGFtcCB3aGVuIGEgaGFuZGxlciBpcyBhdHRhY2hlZCxcbiAgLy8gYW5kIHRoZSBoYW5kbGVyIHdvdWxkIG9ubHkgZmlyZSBpZiB0aGUgZXZlbnQgcGFzc2VkIHRvIGl0IHdhcyBmaXJlZFxuICAvLyBBRlRFUiBpdCB3YXMgYXR0YWNoZWQuXG4gIGlmICh1c2VNaWNyb3Rhc2tGaXgpIHtcbiAgICB2YXIgYXR0YWNoZWRUaW1lc3RhbXAgPSBjdXJyZW50Rmx1c2hUaW1lc3RhbXA7XG4gICAgdmFyIG9yaWdpbmFsID0gaGFuZGxlcjtcbiAgICBoYW5kbGVyID0gb3JpZ2luYWwuX3dyYXBwZXIgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgaWYgKFxuICAgICAgICAvLyBubyBidWJibGluZywgc2hvdWxkIGFsd2F5cyBmaXJlLlxuICAgICAgICAvLyB0aGlzIGlzIGp1c3QgYSBzYWZldHkgbmV0IGluIGNhc2UgZXZlbnQudGltZVN0YW1wIGlzIHVucmVsaWFibGUgaW5cbiAgICAgICAgLy8gY2VydGFpbiB3ZWlyZCBlbnZpcm9ubWVudHMuLi5cbiAgICAgICAgZS50YXJnZXQgPT09IGUuY3VycmVudFRhcmdldCB8fFxuICAgICAgICAvLyBldmVudCBpcyBmaXJlZCBhZnRlciBoYW5kbGVyIGF0dGFjaG1lbnRcbiAgICAgICAgZS50aW1lU3RhbXAgPj0gYXR0YWNoZWRUaW1lc3RhbXAgfHxcbiAgICAgICAgLy8gYmFpbCBmb3IgZW52aXJvbm1lbnRzIHRoYXQgaGF2ZSBidWdneSBldmVudC50aW1lU3RhbXAgaW1wbGVtZW50YXRpb25zXG4gICAgICAgIC8vICM5NDYyIGlPUyA5IGJ1ZzogZXZlbnQudGltZVN0YW1wIGlzIDAgYWZ0ZXIgaGlzdG9yeS5wdXNoU3RhdGVcbiAgICAgICAgLy8gIzk2ODEgUXRXZWJFbmdpbmUgZXZlbnQudGltZVN0YW1wIGlzIG5lZ2F0aXZlIHZhbHVlXG4gICAgICAgIGUudGltZVN0YW1wIDw9IDAgfHxcbiAgICAgICAgLy8gIzk0NDggYmFpbCBpZiBldmVudCBpcyBmaXJlZCBpbiBhbm90aGVyIGRvY3VtZW50IGluIGEgbXVsdGktcGFnZVxuICAgICAgICAvLyBlbGVjdHJvbi9udy5qcyBhcHAsIHNpbmNlIGV2ZW50LnRpbWVTdGFtcCB3aWxsIGJlIHVzaW5nIGEgZGlmZmVyZW50XG4gICAgICAgIC8vIHN0YXJ0aW5nIHJlZmVyZW5jZVxuICAgICAgICBlLnRhcmdldC5vd25lckRvY3VtZW50ICE9PSBkb2N1bWVudFxuICAgICAgKSB7XG4gICAgICAgIHJldHVybiBvcmlnaW5hbC5hcHBseSh0aGlzLCBhcmd1bWVudHMpXG4gICAgICB9XG4gICAgfTtcbiAgfVxuICB0YXJnZXQkMS5hZGRFdmVudExpc3RlbmVyKFxuICAgIG5hbWUsXG4gICAgaGFuZGxlcixcbiAgICBzdXBwb3J0c1Bhc3NpdmVcbiAgICAgID8geyBjYXB0dXJlOiBjYXB0dXJlLCBwYXNzaXZlOiBwYXNzaXZlIH1cbiAgICAgIDogY2FwdHVyZVxuICApO1xufVxuXG5mdW5jdGlvbiByZW1vdmUkMiAoXG4gIG5hbWUsXG4gIGhhbmRsZXIsXG4gIGNhcHR1cmUsXG4gIF90YXJnZXRcbikge1xuICAoX3RhcmdldCB8fCB0YXJnZXQkMSkucmVtb3ZlRXZlbnRMaXN0ZW5lcihcbiAgICBuYW1lLFxuICAgIGhhbmRsZXIuX3dyYXBwZXIgfHwgaGFuZGxlcixcbiAgICBjYXB0dXJlXG4gICk7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZURPTUxpc3RlbmVycyAob2xkVm5vZGUsIHZub2RlKSB7XG4gIGlmIChpc1VuZGVmKG9sZFZub2RlLmRhdGEub24pICYmIGlzVW5kZWYodm5vZGUuZGF0YS5vbikpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgb24gPSB2bm9kZS5kYXRhLm9uIHx8IHt9O1xuICB2YXIgb2xkT24gPSBvbGRWbm9kZS5kYXRhLm9uIHx8IHt9O1xuICB0YXJnZXQkMSA9IHZub2RlLmVsbTtcbiAgbm9ybWFsaXplRXZlbnRzKG9uKTtcbiAgdXBkYXRlTGlzdGVuZXJzKG9uLCBvbGRPbiwgYWRkJDEsIHJlbW92ZSQyLCBjcmVhdGVPbmNlSGFuZGxlciQxLCB2bm9kZS5jb250ZXh0KTtcbiAgdGFyZ2V0JDEgPSB1bmRlZmluZWQ7XG59XG5cbnZhciBldmVudHMgPSB7XG4gIGNyZWF0ZTogdXBkYXRlRE9NTGlzdGVuZXJzLFxuICB1cGRhdGU6IHVwZGF0ZURPTUxpc3RlbmVyc1xufTtcblxuLyogICovXG5cbnZhciBzdmdDb250YWluZXI7XG5cbmZ1bmN0aW9uIHVwZGF0ZURPTVByb3BzIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgaWYgKGlzVW5kZWYob2xkVm5vZGUuZGF0YS5kb21Qcm9wcykgJiYgaXNVbmRlZih2bm9kZS5kYXRhLmRvbVByb3BzKSkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciBrZXksIGN1cjtcbiAgdmFyIGVsbSA9IHZub2RlLmVsbTtcbiAgdmFyIG9sZFByb3BzID0gb2xkVm5vZGUuZGF0YS5kb21Qcm9wcyB8fCB7fTtcbiAgdmFyIHByb3BzID0gdm5vZGUuZGF0YS5kb21Qcm9wcyB8fCB7fTtcbiAgLy8gY2xvbmUgb2JzZXJ2ZWQgb2JqZWN0cywgYXMgdGhlIHVzZXIgcHJvYmFibHkgd2FudHMgdG8gbXV0YXRlIGl0XG4gIGlmIChpc0RlZihwcm9wcy5fX29iX18pKSB7XG4gICAgcHJvcHMgPSB2bm9kZS5kYXRhLmRvbVByb3BzID0gZXh0ZW5kKHt9LCBwcm9wcyk7XG4gIH1cblxuICBmb3IgKGtleSBpbiBvbGRQcm9wcykge1xuICAgIGlmICghKGtleSBpbiBwcm9wcykpIHtcbiAgICAgIGVsbVtrZXldID0gJyc7XG4gICAgfVxuICB9XG5cbiAgZm9yIChrZXkgaW4gcHJvcHMpIHtcbiAgICBjdXIgPSBwcm9wc1trZXldO1xuICAgIC8vIGlnbm9yZSBjaGlsZHJlbiBpZiB0aGUgbm9kZSBoYXMgdGV4dENvbnRlbnQgb3IgaW5uZXJIVE1MLFxuICAgIC8vIGFzIHRoZXNlIHdpbGwgdGhyb3cgYXdheSBleGlzdGluZyBET00gbm9kZXMgYW5kIGNhdXNlIHJlbW92YWwgZXJyb3JzXG4gICAgLy8gb24gc3Vic2VxdWVudCBwYXRjaGVzICgjMzM2MClcbiAgICBpZiAoa2V5ID09PSAndGV4dENvbnRlbnQnIHx8IGtleSA9PT0gJ2lubmVySFRNTCcpIHtcbiAgICAgIGlmICh2bm9kZS5jaGlsZHJlbikgeyB2bm9kZS5jaGlsZHJlbi5sZW5ndGggPSAwOyB9XG4gICAgICBpZiAoY3VyID09PSBvbGRQcm9wc1trZXldKSB7IGNvbnRpbnVlIH1cbiAgICAgIC8vICM2NjAxIHdvcmsgYXJvdW5kIENocm9tZSB2ZXJzaW9uIDw9IDU1IGJ1ZyB3aGVyZSBzaW5nbGUgdGV4dE5vZGVcbiAgICAgIC8vIHJlcGxhY2VkIGJ5IGlubmVySFRNTC90ZXh0Q29udGVudCByZXRhaW5zIGl0cyBwYXJlbnROb2RlIHByb3BlcnR5XG4gICAgICBpZiAoZWxtLmNoaWxkTm9kZXMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIGVsbS5yZW1vdmVDaGlsZChlbG0uY2hpbGROb2Rlc1swXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGtleSA9PT0gJ3ZhbHVlJyAmJiBlbG0udGFnTmFtZSAhPT0gJ1BST0dSRVNTJykge1xuICAgICAgLy8gc3RvcmUgdmFsdWUgYXMgX3ZhbHVlIGFzIHdlbGwgc2luY2VcbiAgICAgIC8vIG5vbi1zdHJpbmcgdmFsdWVzIHdpbGwgYmUgc3RyaW5naWZpZWRcbiAgICAgIGVsbS5fdmFsdWUgPSBjdXI7XG4gICAgICAvLyBhdm9pZCByZXNldHRpbmcgY3Vyc29yIHBvc2l0aW9uIHdoZW4gdmFsdWUgaXMgdGhlIHNhbWVcbiAgICAgIHZhciBzdHJDdXIgPSBpc1VuZGVmKGN1cikgPyAnJyA6IFN0cmluZyhjdXIpO1xuICAgICAgaWYgKHNob3VsZFVwZGF0ZVZhbHVlKGVsbSwgc3RyQ3VyKSkge1xuICAgICAgICBlbG0udmFsdWUgPSBzdHJDdXI7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChrZXkgPT09ICdpbm5lckhUTUwnICYmIGlzU1ZHKGVsbS50YWdOYW1lKSAmJiBpc1VuZGVmKGVsbS5pbm5lckhUTUwpKSB7XG4gICAgICAvLyBJRSBkb2Vzbid0IHN1cHBvcnQgaW5uZXJIVE1MIGZvciBTVkcgZWxlbWVudHNcbiAgICAgIHN2Z0NvbnRhaW5lciA9IHN2Z0NvbnRhaW5lciB8fCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIHN2Z0NvbnRhaW5lci5pbm5lckhUTUwgPSBcIjxzdmc+XCIgKyBjdXIgKyBcIjwvc3ZnPlwiO1xuICAgICAgdmFyIHN2ZyA9IHN2Z0NvbnRhaW5lci5maXJzdENoaWxkO1xuICAgICAgd2hpbGUgKGVsbS5maXJzdENoaWxkKSB7XG4gICAgICAgIGVsbS5yZW1vdmVDaGlsZChlbG0uZmlyc3RDaGlsZCk7XG4gICAgICB9XG4gICAgICB3aGlsZSAoc3ZnLmZpcnN0Q2hpbGQpIHtcbiAgICAgICAgZWxtLmFwcGVuZENoaWxkKHN2Zy5maXJzdENoaWxkKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKFxuICAgICAgLy8gc2tpcCB0aGUgdXBkYXRlIGlmIG9sZCBhbmQgbmV3IFZET00gc3RhdGUgaXMgdGhlIHNhbWUuXG4gICAgICAvLyBgdmFsdWVgIGlzIGhhbmRsZWQgc2VwYXJhdGVseSBiZWNhdXNlIHRoZSBET00gdmFsdWUgbWF5IGJlIHRlbXBvcmFyaWx5XG4gICAgICAvLyBvdXQgb2Ygc3luYyB3aXRoIFZET00gc3RhdGUgZHVlIHRvIGZvY3VzLCBjb21wb3NpdGlvbiBhbmQgbW9kaWZpZXJzLlxuICAgICAgLy8gVGhpcyAgIzQ1MjEgYnkgc2tpcHBpbmcgdGhlIHVubmVjZXNzYXJ5IGBjaGVja2VkYCB1cGRhdGUuXG4gICAgICBjdXIgIT09IG9sZFByb3BzW2tleV1cbiAgICApIHtcbiAgICAgIC8vIHNvbWUgcHJvcGVydHkgdXBkYXRlcyBjYW4gdGhyb3dcbiAgICAgIC8vIGUuZy4gYHZhbHVlYCBvbiA8cHJvZ3Jlc3M+IHcvIG5vbi1maW5pdGUgdmFsdWVcbiAgICAgIHRyeSB7XG4gICAgICAgIGVsbVtrZXldID0gY3VyO1xuICAgICAgfSBjYXRjaCAoZSkge31cbiAgICB9XG4gIH1cbn1cblxuLy8gY2hlY2sgcGxhdGZvcm1zL3dlYi91dGlsL2F0dHJzLmpzIGFjY2VwdFZhbHVlXG5cblxuZnVuY3Rpb24gc2hvdWxkVXBkYXRlVmFsdWUgKGVsbSwgY2hlY2tWYWwpIHtcbiAgcmV0dXJuICghZWxtLmNvbXBvc2luZyAmJiAoXG4gICAgZWxtLnRhZ05hbWUgPT09ICdPUFRJT04nIHx8XG4gICAgaXNOb3RJbkZvY3VzQW5kRGlydHkoZWxtLCBjaGVja1ZhbCkgfHxcbiAgICBpc0RpcnR5V2l0aE1vZGlmaWVycyhlbG0sIGNoZWNrVmFsKVxuICApKVxufVxuXG5mdW5jdGlvbiBpc05vdEluRm9jdXNBbmREaXJ0eSAoZWxtLCBjaGVja1ZhbCkge1xuICAvLyByZXR1cm4gdHJ1ZSB3aGVuIHRleHRib3ggKC5udW1iZXIgYW5kIC50cmltKSBsb3NlcyBmb2N1cyBhbmQgaXRzIHZhbHVlIGlzXG4gIC8vIG5vdCBlcXVhbCB0byB0aGUgdXBkYXRlZCB2YWx1ZVxuICB2YXIgbm90SW5Gb2N1cyA9IHRydWU7XG4gIC8vICM2MTU3XG4gIC8vIHdvcmsgYXJvdW5kIElFIGJ1ZyB3aGVuIGFjY2Vzc2luZyBkb2N1bWVudC5hY3RpdmVFbGVtZW50IGluIGFuIGlmcmFtZVxuICB0cnkgeyBub3RJbkZvY3VzID0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAhPT0gZWxtOyB9IGNhdGNoIChlKSB7fVxuICByZXR1cm4gbm90SW5Gb2N1cyAmJiBlbG0udmFsdWUgIT09IGNoZWNrVmFsXG59XG5cbmZ1bmN0aW9uIGlzRGlydHlXaXRoTW9kaWZpZXJzIChlbG0sIG5ld1ZhbCkge1xuICB2YXIgdmFsdWUgPSBlbG0udmFsdWU7XG4gIHZhciBtb2RpZmllcnMgPSBlbG0uX3ZNb2RpZmllcnM7IC8vIGluamVjdGVkIGJ5IHYtbW9kZWwgcnVudGltZVxuICBpZiAoaXNEZWYobW9kaWZpZXJzKSkge1xuICAgIGlmIChtb2RpZmllcnMubnVtYmVyKSB7XG4gICAgICByZXR1cm4gdG9OdW1iZXIodmFsdWUpICE9PSB0b051bWJlcihuZXdWYWwpXG4gICAgfVxuICAgIGlmIChtb2RpZmllcnMudHJpbSkge1xuICAgICAgcmV0dXJuIHZhbHVlLnRyaW0oKSAhPT0gbmV3VmFsLnRyaW0oKVxuICAgIH1cbiAgfVxuICByZXR1cm4gdmFsdWUgIT09IG5ld1ZhbFxufVxuXG52YXIgZG9tUHJvcHMgPSB7XG4gIGNyZWF0ZTogdXBkYXRlRE9NUHJvcHMsXG4gIHVwZGF0ZTogdXBkYXRlRE9NUHJvcHNcbn07XG5cbi8qICAqL1xuXG52YXIgcGFyc2VTdHlsZVRleHQgPSBjYWNoZWQoZnVuY3Rpb24gKGNzc1RleHQpIHtcbiAgdmFyIHJlcyA9IHt9O1xuICB2YXIgbGlzdERlbGltaXRlciA9IC87KD8hW14oXSpcXCkpL2c7XG4gIHZhciBwcm9wZXJ0eURlbGltaXRlciA9IC86KC4rKS87XG4gIGNzc1RleHQuc3BsaXQobGlzdERlbGltaXRlcikuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xuICAgIGlmIChpdGVtKSB7XG4gICAgICB2YXIgdG1wID0gaXRlbS5zcGxpdChwcm9wZXJ0eURlbGltaXRlcik7XG4gICAgICB0bXAubGVuZ3RoID4gMSAmJiAocmVzW3RtcFswXS50cmltKCldID0gdG1wWzFdLnRyaW0oKSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJlc1xufSk7XG5cbi8vIG1lcmdlIHN0YXRpYyBhbmQgZHluYW1pYyBzdHlsZSBkYXRhIG9uIHRoZSBzYW1lIHZub2RlXG5mdW5jdGlvbiBub3JtYWxpemVTdHlsZURhdGEgKGRhdGEpIHtcbiAgdmFyIHN0eWxlID0gbm9ybWFsaXplU3R5bGVCaW5kaW5nKGRhdGEuc3R5bGUpO1xuICAvLyBzdGF0aWMgc3R5bGUgaXMgcHJlLXByb2Nlc3NlZCBpbnRvIGFuIG9iamVjdCBkdXJpbmcgY29tcGlsYXRpb25cbiAgLy8gYW5kIGlzIGFsd2F5cyBhIGZyZXNoIG9iamVjdCwgc28gaXQncyBzYWZlIHRvIG1lcmdlIGludG8gaXRcbiAgcmV0dXJuIGRhdGEuc3RhdGljU3R5bGVcbiAgICA/IGV4dGVuZChkYXRhLnN0YXRpY1N0eWxlLCBzdHlsZSlcbiAgICA6IHN0eWxlXG59XG5cbi8vIG5vcm1hbGl6ZSBwb3NzaWJsZSBhcnJheSAvIHN0cmluZyB2YWx1ZXMgaW50byBPYmplY3RcbmZ1bmN0aW9uIG5vcm1hbGl6ZVN0eWxlQmluZGluZyAoYmluZGluZ1N0eWxlKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGJpbmRpbmdTdHlsZSkpIHtcbiAgICByZXR1cm4gdG9PYmplY3QoYmluZGluZ1N0eWxlKVxuICB9XG4gIGlmICh0eXBlb2YgYmluZGluZ1N0eWxlID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBwYXJzZVN0eWxlVGV4dChiaW5kaW5nU3R5bGUpXG4gIH1cbiAgcmV0dXJuIGJpbmRpbmdTdHlsZVxufVxuXG4vKipcbiAqIHBhcmVudCBjb21wb25lbnQgc3R5bGUgc2hvdWxkIGJlIGFmdGVyIGNoaWxkJ3NcbiAqIHNvIHRoYXQgcGFyZW50IGNvbXBvbmVudCdzIHN0eWxlIGNvdWxkIG92ZXJyaWRlIGl0XG4gKi9cbmZ1bmN0aW9uIGdldFN0eWxlICh2bm9kZSwgY2hlY2tDaGlsZCkge1xuICB2YXIgcmVzID0ge307XG4gIHZhciBzdHlsZURhdGE7XG5cbiAgaWYgKGNoZWNrQ2hpbGQpIHtcbiAgICB2YXIgY2hpbGROb2RlID0gdm5vZGU7XG4gICAgd2hpbGUgKGNoaWxkTm9kZS5jb21wb25lbnRJbnN0YW5jZSkge1xuICAgICAgY2hpbGROb2RlID0gY2hpbGROb2RlLmNvbXBvbmVudEluc3RhbmNlLl92bm9kZTtcbiAgICAgIGlmIChcbiAgICAgICAgY2hpbGROb2RlICYmIGNoaWxkTm9kZS5kYXRhICYmXG4gICAgICAgIChzdHlsZURhdGEgPSBub3JtYWxpemVTdHlsZURhdGEoY2hpbGROb2RlLmRhdGEpKVxuICAgICAgKSB7XG4gICAgICAgIGV4dGVuZChyZXMsIHN0eWxlRGF0YSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKChzdHlsZURhdGEgPSBub3JtYWxpemVTdHlsZURhdGEodm5vZGUuZGF0YSkpKSB7XG4gICAgZXh0ZW5kKHJlcywgc3R5bGVEYXRhKTtcbiAgfVxuXG4gIHZhciBwYXJlbnROb2RlID0gdm5vZGU7XG4gIHdoaWxlICgocGFyZW50Tm9kZSA9IHBhcmVudE5vZGUucGFyZW50KSkge1xuICAgIGlmIChwYXJlbnROb2RlLmRhdGEgJiYgKHN0eWxlRGF0YSA9IG5vcm1hbGl6ZVN0eWxlRGF0YShwYXJlbnROb2RlLmRhdGEpKSkge1xuICAgICAgZXh0ZW5kKHJlcywgc3R5bGVEYXRhKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG4vKiAgKi9cblxudmFyIGNzc1ZhclJFID0gL14tLS87XG52YXIgaW1wb3J0YW50UkUgPSAvXFxzKiFpbXBvcnRhbnQkLztcbnZhciBzZXRQcm9wID0gZnVuY3Rpb24gKGVsLCBuYW1lLCB2YWwpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChjc3NWYXJSRS50ZXN0KG5hbWUpKSB7XG4gICAgZWwuc3R5bGUuc2V0UHJvcGVydHkobmFtZSwgdmFsKTtcbiAgfSBlbHNlIGlmIChpbXBvcnRhbnRSRS50ZXN0KHZhbCkpIHtcbiAgICBlbC5zdHlsZS5zZXRQcm9wZXJ0eShoeXBoZW5hdGUobmFtZSksIHZhbC5yZXBsYWNlKGltcG9ydGFudFJFLCAnJyksICdpbXBvcnRhbnQnKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgbm9ybWFsaXplZE5hbWUgPSBub3JtYWxpemUobmFtZSk7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsKSkge1xuICAgICAgLy8gU3VwcG9ydCB2YWx1ZXMgYXJyYXkgY3JlYXRlZCBieSBhdXRvcHJlZml4ZXIsIGUuZy5cbiAgICAgIC8vIHtkaXNwbGF5OiBbXCItd2Via2l0LWJveFwiLCBcIi1tcy1mbGV4Ym94XCIsIFwiZmxleFwiXX1cbiAgICAgIC8vIFNldCB0aGVtIG9uZSBieSBvbmUsIGFuZCB0aGUgYnJvd3NlciB3aWxsIG9ubHkgc2V0IHRob3NlIGl0IGNhbiByZWNvZ25pemVcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSB2YWwubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgZWwuc3R5bGVbbm9ybWFsaXplZE5hbWVdID0gdmFsW2ldO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBlbC5zdHlsZVtub3JtYWxpemVkTmFtZV0gPSB2YWw7XG4gICAgfVxuICB9XG59O1xuXG52YXIgdmVuZG9yTmFtZXMgPSBbJ1dlYmtpdCcsICdNb3onLCAnbXMnXTtcblxudmFyIGVtcHR5U3R5bGU7XG52YXIgbm9ybWFsaXplID0gY2FjaGVkKGZ1bmN0aW9uIChwcm9wKSB7XG4gIGVtcHR5U3R5bGUgPSBlbXB0eVN0eWxlIHx8IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLnN0eWxlO1xuICBwcm9wID0gY2FtZWxpemUocHJvcCk7XG4gIGlmIChwcm9wICE9PSAnZmlsdGVyJyAmJiAocHJvcCBpbiBlbXB0eVN0eWxlKSkge1xuICAgIHJldHVybiBwcm9wXG4gIH1cbiAgdmFyIGNhcE5hbWUgPSBwcm9wLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgcHJvcC5zbGljZSgxKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB2ZW5kb3JOYW1lcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBuYW1lID0gdmVuZG9yTmFtZXNbaV0gKyBjYXBOYW1lO1xuICAgIGlmIChuYW1lIGluIGVtcHR5U3R5bGUpIHtcbiAgICAgIHJldHVybiBuYW1lXG4gICAgfVxuICB9XG59KTtcblxuZnVuY3Rpb24gdXBkYXRlU3R5bGUgKG9sZFZub2RlLCB2bm9kZSkge1xuICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7XG4gIHZhciBvbGREYXRhID0gb2xkVm5vZGUuZGF0YTtcblxuICBpZiAoaXNVbmRlZihkYXRhLnN0YXRpY1N0eWxlKSAmJiBpc1VuZGVmKGRhdGEuc3R5bGUpICYmXG4gICAgaXNVbmRlZihvbGREYXRhLnN0YXRpY1N0eWxlKSAmJiBpc1VuZGVmKG9sZERhdGEuc3R5bGUpXG4gICkge1xuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIGN1ciwgbmFtZTtcbiAgdmFyIGVsID0gdm5vZGUuZWxtO1xuICB2YXIgb2xkU3RhdGljU3R5bGUgPSBvbGREYXRhLnN0YXRpY1N0eWxlO1xuICB2YXIgb2xkU3R5bGVCaW5kaW5nID0gb2xkRGF0YS5ub3JtYWxpemVkU3R5bGUgfHwgb2xkRGF0YS5zdHlsZSB8fCB7fTtcblxuICAvLyBpZiBzdGF0aWMgc3R5bGUgZXhpc3RzLCBzdHlsZWJpbmRpbmcgYWxyZWFkeSBtZXJnZWQgaW50byBpdCB3aGVuIGRvaW5nIG5vcm1hbGl6ZVN0eWxlRGF0YVxuICB2YXIgb2xkU3R5bGUgPSBvbGRTdGF0aWNTdHlsZSB8fCBvbGRTdHlsZUJpbmRpbmc7XG5cbiAgdmFyIHN0eWxlID0gbm9ybWFsaXplU3R5bGVCaW5kaW5nKHZub2RlLmRhdGEuc3R5bGUpIHx8IHt9O1xuXG4gIC8vIHN0b3JlIG5vcm1hbGl6ZWQgc3R5bGUgdW5kZXIgYSBkaWZmZXJlbnQga2V5IGZvciBuZXh0IGRpZmZcbiAgLy8gbWFrZSBzdXJlIHRvIGNsb25lIGl0IGlmIGl0J3MgcmVhY3RpdmUsIHNpbmNlIHRoZSB1c2VyIGxpa2VseSB3YW50c1xuICAvLyB0byBtdXRhdGUgaXQuXG4gIHZub2RlLmRhdGEubm9ybWFsaXplZFN0eWxlID0gaXNEZWYoc3R5bGUuX19vYl9fKVxuICAgID8gZXh0ZW5kKHt9LCBzdHlsZSlcbiAgICA6IHN0eWxlO1xuXG4gIHZhciBuZXdTdHlsZSA9IGdldFN0eWxlKHZub2RlLCB0cnVlKTtcblxuICBmb3IgKG5hbWUgaW4gb2xkU3R5bGUpIHtcbiAgICBpZiAoaXNVbmRlZihuZXdTdHlsZVtuYW1lXSkpIHtcbiAgICAgIHNldFByb3AoZWwsIG5hbWUsICcnKTtcbiAgICB9XG4gIH1cbiAgZm9yIChuYW1lIGluIG5ld1N0eWxlKSB7XG4gICAgY3VyID0gbmV3U3R5bGVbbmFtZV07XG4gICAgaWYgKGN1ciAhPT0gb2xkU3R5bGVbbmFtZV0pIHtcbiAgICAgIC8vIGllOSBzZXR0aW5nIHRvIG51bGwgaGFzIG5vIGVmZmVjdCwgbXVzdCB1c2UgZW1wdHkgc3RyaW5nXG4gICAgICBzZXRQcm9wKGVsLCBuYW1lLCBjdXIgPT0gbnVsbCA/ICcnIDogY3VyKTtcbiAgICB9XG4gIH1cbn1cblxudmFyIHN0eWxlID0ge1xuICBjcmVhdGU6IHVwZGF0ZVN0eWxlLFxuICB1cGRhdGU6IHVwZGF0ZVN0eWxlXG59O1xuXG4vKiAgKi9cblxudmFyIHdoaXRlc3BhY2VSRSA9IC9cXHMrLztcblxuLyoqXG4gKiBBZGQgY2xhc3Mgd2l0aCBjb21wYXRpYmlsaXR5IGZvciBTVkcgc2luY2UgY2xhc3NMaXN0IGlzIG5vdCBzdXBwb3J0ZWQgb25cbiAqIFNWRyBlbGVtZW50cyBpbiBJRVxuICovXG5mdW5jdGlvbiBhZGRDbGFzcyAoZWwsIGNscykge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKCFjbHMgfHwgIShjbHMgPSBjbHMudHJpbSgpKSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKGVsLmNsYXNzTGlzdCkge1xuICAgIGlmIChjbHMuaW5kZXhPZignICcpID4gLTEpIHtcbiAgICAgIGNscy5zcGxpdCh3aGl0ZXNwYWNlUkUpLmZvckVhY2goZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGVsLmNsYXNzTGlzdC5hZGQoYyk7IH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbC5jbGFzc0xpc3QuYWRkKGNscyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciBjdXIgPSBcIiBcIiArIChlbC5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykgfHwgJycpICsgXCIgXCI7XG4gICAgaWYgKGN1ci5pbmRleE9mKCcgJyArIGNscyArICcgJykgPCAwKSB7XG4gICAgICBlbC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgKGN1ciArIGNscykudHJpbSgpKTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBSZW1vdmUgY2xhc3Mgd2l0aCBjb21wYXRpYmlsaXR5IGZvciBTVkcgc2luY2UgY2xhc3NMaXN0IGlzIG5vdCBzdXBwb3J0ZWQgb25cbiAqIFNWRyBlbGVtZW50cyBpbiBJRVxuICovXG5mdW5jdGlvbiByZW1vdmVDbGFzcyAoZWwsIGNscykge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKCFjbHMgfHwgIShjbHMgPSBjbHMudHJpbSgpKSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKGVsLmNsYXNzTGlzdCkge1xuICAgIGlmIChjbHMuaW5kZXhPZignICcpID4gLTEpIHtcbiAgICAgIGNscy5zcGxpdCh3aGl0ZXNwYWNlUkUpLmZvckVhY2goZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGVsLmNsYXNzTGlzdC5yZW1vdmUoYyk7IH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbC5jbGFzc0xpc3QucmVtb3ZlKGNscyk7XG4gICAgfVxuICAgIGlmICghZWwuY2xhc3NMaXN0Lmxlbmd0aCkge1xuICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKCdjbGFzcycpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgY3VyID0gXCIgXCIgKyAoZWwuZ2V0QXR0cmlidXRlKCdjbGFzcycpIHx8ICcnKSArIFwiIFwiO1xuICAgIHZhciB0YXIgPSAnICcgKyBjbHMgKyAnICc7XG4gICAgd2hpbGUgKGN1ci5pbmRleE9mKHRhcikgPj0gMCkge1xuICAgICAgY3VyID0gY3VyLnJlcGxhY2UodGFyLCAnICcpO1xuICAgIH1cbiAgICBjdXIgPSBjdXIudHJpbSgpO1xuICAgIGlmIChjdXIpIHtcbiAgICAgIGVsLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCBjdXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoJ2NsYXNzJyk7XG4gICAgfVxuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiByZXNvbHZlVHJhbnNpdGlvbiAoZGVmJCQxKSB7XG4gIGlmICghZGVmJCQxKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKHR5cGVvZiBkZWYkJDEgPT09ICdvYmplY3QnKSB7XG4gICAgdmFyIHJlcyA9IHt9O1xuICAgIGlmIChkZWYkJDEuY3NzICE9PSBmYWxzZSkge1xuICAgICAgZXh0ZW5kKHJlcywgYXV0b0Nzc1RyYW5zaXRpb24oZGVmJCQxLm5hbWUgfHwgJ3YnKSk7XG4gICAgfVxuICAgIGV4dGVuZChyZXMsIGRlZiQkMSk7XG4gICAgcmV0dXJuIHJlc1xuICB9IGVsc2UgaWYgKHR5cGVvZiBkZWYkJDEgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGF1dG9Dc3NUcmFuc2l0aW9uKGRlZiQkMSlcbiAgfVxufVxuXG52YXIgYXV0b0Nzc1RyYW5zaXRpb24gPSBjYWNoZWQoZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIHtcbiAgICBlbnRlckNsYXNzOiAobmFtZSArIFwiLWVudGVyXCIpLFxuICAgIGVudGVyVG9DbGFzczogKG5hbWUgKyBcIi1lbnRlci10b1wiKSxcbiAgICBlbnRlckFjdGl2ZUNsYXNzOiAobmFtZSArIFwiLWVudGVyLWFjdGl2ZVwiKSxcbiAgICBsZWF2ZUNsYXNzOiAobmFtZSArIFwiLWxlYXZlXCIpLFxuICAgIGxlYXZlVG9DbGFzczogKG5hbWUgKyBcIi1sZWF2ZS10b1wiKSxcbiAgICBsZWF2ZUFjdGl2ZUNsYXNzOiAobmFtZSArIFwiLWxlYXZlLWFjdGl2ZVwiKVxuICB9XG59KTtcblxudmFyIGhhc1RyYW5zaXRpb24gPSBpbkJyb3dzZXIgJiYgIWlzSUU5O1xudmFyIFRSQU5TSVRJT04gPSAndHJhbnNpdGlvbic7XG52YXIgQU5JTUFUSU9OID0gJ2FuaW1hdGlvbic7XG5cbi8vIFRyYW5zaXRpb24gcHJvcGVydHkvZXZlbnQgc25pZmZpbmdcbnZhciB0cmFuc2l0aW9uUHJvcCA9ICd0cmFuc2l0aW9uJztcbnZhciB0cmFuc2l0aW9uRW5kRXZlbnQgPSAndHJhbnNpdGlvbmVuZCc7XG52YXIgYW5pbWF0aW9uUHJvcCA9ICdhbmltYXRpb24nO1xudmFyIGFuaW1hdGlvbkVuZEV2ZW50ID0gJ2FuaW1hdGlvbmVuZCc7XG5pZiAoaGFzVHJhbnNpdGlvbikge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKHdpbmRvdy5vbnRyYW5zaXRpb25lbmQgPT09IHVuZGVmaW5lZCAmJlxuICAgIHdpbmRvdy5vbndlYmtpdHRyYW5zaXRpb25lbmQgIT09IHVuZGVmaW5lZFxuICApIHtcbiAgICB0cmFuc2l0aW9uUHJvcCA9ICdXZWJraXRUcmFuc2l0aW9uJztcbiAgICB0cmFuc2l0aW9uRW5kRXZlbnQgPSAnd2Via2l0VHJhbnNpdGlvbkVuZCc7XG4gIH1cbiAgaWYgKHdpbmRvdy5vbmFuaW1hdGlvbmVuZCA9PT0gdW5kZWZpbmVkICYmXG4gICAgd2luZG93Lm9ud2Via2l0YW5pbWF0aW9uZW5kICE9PSB1bmRlZmluZWRcbiAgKSB7XG4gICAgYW5pbWF0aW9uUHJvcCA9ICdXZWJraXRBbmltYXRpb24nO1xuICAgIGFuaW1hdGlvbkVuZEV2ZW50ID0gJ3dlYmtpdEFuaW1hdGlvbkVuZCc7XG4gIH1cbn1cblxuLy8gYmluZGluZyB0byB3aW5kb3cgaXMgbmVjZXNzYXJ5IHRvIG1ha2UgaG90IHJlbG9hZCB3b3JrIGluIElFIGluIHN0cmljdCBtb2RlXG52YXIgcmFmID0gaW5Ccm93c2VyXG4gID8gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZVxuICAgID8gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZS5iaW5kKHdpbmRvdylcbiAgICA6IHNldFRpbWVvdXRcbiAgOiAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLyBmdW5jdGlvbiAoZm4pIHsgcmV0dXJuIGZuKCk7IH07XG5cbmZ1bmN0aW9uIG5leHRGcmFtZSAoZm4pIHtcbiAgcmFmKGZ1bmN0aW9uICgpIHtcbiAgICByYWYoZm4pO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gYWRkVHJhbnNpdGlvbkNsYXNzIChlbCwgY2xzKSB7XG4gIHZhciB0cmFuc2l0aW9uQ2xhc3NlcyA9IGVsLl90cmFuc2l0aW9uQ2xhc3NlcyB8fCAoZWwuX3RyYW5zaXRpb25DbGFzc2VzID0gW10pO1xuICBpZiAodHJhbnNpdGlvbkNsYXNzZXMuaW5kZXhPZihjbHMpIDwgMCkge1xuICAgIHRyYW5zaXRpb25DbGFzc2VzLnB1c2goY2xzKTtcbiAgICBhZGRDbGFzcyhlbCwgY2xzKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZW1vdmVUcmFuc2l0aW9uQ2xhc3MgKGVsLCBjbHMpIHtcbiAgaWYgKGVsLl90cmFuc2l0aW9uQ2xhc3Nlcykge1xuICAgIHJlbW92ZShlbC5fdHJhbnNpdGlvbkNsYXNzZXMsIGNscyk7XG4gIH1cbiAgcmVtb3ZlQ2xhc3MoZWwsIGNscyk7XG59XG5cbmZ1bmN0aW9uIHdoZW5UcmFuc2l0aW9uRW5kcyAoXG4gIGVsLFxuICBleHBlY3RlZFR5cGUsXG4gIGNiXG4pIHtcbiAgdmFyIHJlZiA9IGdldFRyYW5zaXRpb25JbmZvKGVsLCBleHBlY3RlZFR5cGUpO1xuICB2YXIgdHlwZSA9IHJlZi50eXBlO1xuICB2YXIgdGltZW91dCA9IHJlZi50aW1lb3V0O1xuICB2YXIgcHJvcENvdW50ID0gcmVmLnByb3BDb3VudDtcbiAgaWYgKCF0eXBlKSB7IHJldHVybiBjYigpIH1cbiAgdmFyIGV2ZW50ID0gdHlwZSA9PT0gVFJBTlNJVElPTiA/IHRyYW5zaXRpb25FbmRFdmVudCA6IGFuaW1hdGlvbkVuZEV2ZW50O1xuICB2YXIgZW5kZWQgPSAwO1xuICB2YXIgZW5kID0gZnVuY3Rpb24gKCkge1xuICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIG9uRW5kKTtcbiAgICBjYigpO1xuICB9O1xuICB2YXIgb25FbmQgPSBmdW5jdGlvbiAoZSkge1xuICAgIGlmIChlLnRhcmdldCA9PT0gZWwpIHtcbiAgICAgIGlmICgrK2VuZGVkID49IHByb3BDb3VudCkge1xuICAgICAgICBlbmQoKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgIGlmIChlbmRlZCA8IHByb3BDb3VudCkge1xuICAgICAgZW5kKCk7XG4gICAgfVxuICB9LCB0aW1lb3V0ICsgMSk7XG4gIGVsLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIG9uRW5kKTtcbn1cblxudmFyIHRyYW5zZm9ybVJFID0gL1xcYih0cmFuc2Zvcm18YWxsKSgsfCQpLztcblxuZnVuY3Rpb24gZ2V0VHJhbnNpdGlvbkluZm8gKGVsLCBleHBlY3RlZFR5cGUpIHtcbiAgdmFyIHN0eWxlcyA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsKTtcbiAgLy8gSlNET00gbWF5IHJldHVybiB1bmRlZmluZWQgZm9yIHRyYW5zaXRpb24gcHJvcGVydGllc1xuICB2YXIgdHJhbnNpdGlvbkRlbGF5cyA9IChzdHlsZXNbdHJhbnNpdGlvblByb3AgKyAnRGVsYXknXSB8fCAnJykuc3BsaXQoJywgJyk7XG4gIHZhciB0cmFuc2l0aW9uRHVyYXRpb25zID0gKHN0eWxlc1t0cmFuc2l0aW9uUHJvcCArICdEdXJhdGlvbiddIHx8ICcnKS5zcGxpdCgnLCAnKTtcbiAgdmFyIHRyYW5zaXRpb25UaW1lb3V0ID0gZ2V0VGltZW91dCh0cmFuc2l0aW9uRGVsYXlzLCB0cmFuc2l0aW9uRHVyYXRpb25zKTtcbiAgdmFyIGFuaW1hdGlvbkRlbGF5cyA9IChzdHlsZXNbYW5pbWF0aW9uUHJvcCArICdEZWxheSddIHx8ICcnKS5zcGxpdCgnLCAnKTtcbiAgdmFyIGFuaW1hdGlvbkR1cmF0aW9ucyA9IChzdHlsZXNbYW5pbWF0aW9uUHJvcCArICdEdXJhdGlvbiddIHx8ICcnKS5zcGxpdCgnLCAnKTtcbiAgdmFyIGFuaW1hdGlvblRpbWVvdXQgPSBnZXRUaW1lb3V0KGFuaW1hdGlvbkRlbGF5cywgYW5pbWF0aW9uRHVyYXRpb25zKTtcblxuICB2YXIgdHlwZTtcbiAgdmFyIHRpbWVvdXQgPSAwO1xuICB2YXIgcHJvcENvdW50ID0gMDtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChleHBlY3RlZFR5cGUgPT09IFRSQU5TSVRJT04pIHtcbiAgICBpZiAodHJhbnNpdGlvblRpbWVvdXQgPiAwKSB7XG4gICAgICB0eXBlID0gVFJBTlNJVElPTjtcbiAgICAgIHRpbWVvdXQgPSB0cmFuc2l0aW9uVGltZW91dDtcbiAgICAgIHByb3BDb3VudCA9IHRyYW5zaXRpb25EdXJhdGlvbnMubGVuZ3RoO1xuICAgIH1cbiAgfSBlbHNlIGlmIChleHBlY3RlZFR5cGUgPT09IEFOSU1BVElPTikge1xuICAgIGlmIChhbmltYXRpb25UaW1lb3V0ID4gMCkge1xuICAgICAgdHlwZSA9IEFOSU1BVElPTjtcbiAgICAgIHRpbWVvdXQgPSBhbmltYXRpb25UaW1lb3V0O1xuICAgICAgcHJvcENvdW50ID0gYW5pbWF0aW9uRHVyYXRpb25zLmxlbmd0aDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdGltZW91dCA9IE1hdGgubWF4KHRyYW5zaXRpb25UaW1lb3V0LCBhbmltYXRpb25UaW1lb3V0KTtcbiAgICB0eXBlID0gdGltZW91dCA+IDBcbiAgICAgID8gdHJhbnNpdGlvblRpbWVvdXQgPiBhbmltYXRpb25UaW1lb3V0XG4gICAgICAgID8gVFJBTlNJVElPTlxuICAgICAgICA6IEFOSU1BVElPTlxuICAgICAgOiBudWxsO1xuICAgIHByb3BDb3VudCA9IHR5cGVcbiAgICAgID8gdHlwZSA9PT0gVFJBTlNJVElPTlxuICAgICAgICA/IHRyYW5zaXRpb25EdXJhdGlvbnMubGVuZ3RoXG4gICAgICAgIDogYW5pbWF0aW9uRHVyYXRpb25zLmxlbmd0aFxuICAgICAgOiAwO1xuICB9XG4gIHZhciBoYXNUcmFuc2Zvcm0gPVxuICAgIHR5cGUgPT09IFRSQU5TSVRJT04gJiZcbiAgICB0cmFuc2Zvcm1SRS50ZXN0KHN0eWxlc1t0cmFuc2l0aW9uUHJvcCArICdQcm9wZXJ0eSddKTtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiB0eXBlLFxuICAgIHRpbWVvdXQ6IHRpbWVvdXQsXG4gICAgcHJvcENvdW50OiBwcm9wQ291bnQsXG4gICAgaGFzVHJhbnNmb3JtOiBoYXNUcmFuc2Zvcm1cbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRUaW1lb3V0IChkZWxheXMsIGR1cmF0aW9ucykge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICB3aGlsZSAoZGVsYXlzLmxlbmd0aCA8IGR1cmF0aW9ucy5sZW5ndGgpIHtcbiAgICBkZWxheXMgPSBkZWxheXMuY29uY2F0KGRlbGF5cyk7XG4gIH1cblxuICByZXR1cm4gTWF0aC5tYXguYXBwbHkobnVsbCwgZHVyYXRpb25zLm1hcChmdW5jdGlvbiAoZCwgaSkge1xuICAgIHJldHVybiB0b01zKGQpICsgdG9NcyhkZWxheXNbaV0pXG4gIH0pKVxufVxuXG4vLyBPbGQgdmVyc2lvbnMgb2YgQ2hyb21pdW0gKGJlbG93IDYxLjAuMzE2My4xMDApIGZvcm1hdHMgZmxvYXRpbmcgcG9pbnRlciBudW1iZXJzXG4vLyBpbiBhIGxvY2FsZS1kZXBlbmRlbnQgd2F5LCB1c2luZyBhIGNvbW1hIGluc3RlYWQgb2YgYSBkb3QuXG4vLyBJZiBjb21tYSBpcyBub3QgcmVwbGFjZWQgd2l0aCBhIGRvdCwgdGhlIGlucHV0IHdpbGwgYmUgcm91bmRlZCBkb3duIChpLmUuIGFjdGluZ1xuLy8gYXMgYSBmbG9vciBmdW5jdGlvbikgY2F1c2luZyB1bmV4cGVjdGVkIGJlaGF2aW9yc1xuZnVuY3Rpb24gdG9NcyAocykge1xuICByZXR1cm4gTnVtYmVyKHMuc2xpY2UoMCwgLTEpLnJlcGxhY2UoJywnLCAnLicpKSAqIDEwMDBcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGVudGVyICh2bm9kZSwgdG9nZ2xlRGlzcGxheSkge1xuICB2YXIgZWwgPSB2bm9kZS5lbG07XG5cbiAgLy8gY2FsbCBsZWF2ZSBjYWxsYmFjayBub3dcbiAgaWYgKGlzRGVmKGVsLl9sZWF2ZUNiKSkge1xuICAgIGVsLl9sZWF2ZUNiLmNhbmNlbGxlZCA9IHRydWU7XG4gICAgZWwuX2xlYXZlQ2IoKTtcbiAgfVxuXG4gIHZhciBkYXRhID0gcmVzb2x2ZVRyYW5zaXRpb24odm5vZGUuZGF0YS50cmFuc2l0aW9uKTtcbiAgaWYgKGlzVW5kZWYoZGF0YSkpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoaXNEZWYoZWwuX2VudGVyQ2IpIHx8IGVsLm5vZGVUeXBlICE9PSAxKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgY3NzID0gZGF0YS5jc3M7XG4gIHZhciB0eXBlID0gZGF0YS50eXBlO1xuICB2YXIgZW50ZXJDbGFzcyA9IGRhdGEuZW50ZXJDbGFzcztcbiAgdmFyIGVudGVyVG9DbGFzcyA9IGRhdGEuZW50ZXJUb0NsYXNzO1xuICB2YXIgZW50ZXJBY3RpdmVDbGFzcyA9IGRhdGEuZW50ZXJBY3RpdmVDbGFzcztcbiAgdmFyIGFwcGVhckNsYXNzID0gZGF0YS5hcHBlYXJDbGFzcztcbiAgdmFyIGFwcGVhclRvQ2xhc3MgPSBkYXRhLmFwcGVhclRvQ2xhc3M7XG4gIHZhciBhcHBlYXJBY3RpdmVDbGFzcyA9IGRhdGEuYXBwZWFyQWN0aXZlQ2xhc3M7XG4gIHZhciBiZWZvcmVFbnRlciA9IGRhdGEuYmVmb3JlRW50ZXI7XG4gIHZhciBlbnRlciA9IGRhdGEuZW50ZXI7XG4gIHZhciBhZnRlckVudGVyID0gZGF0YS5hZnRlckVudGVyO1xuICB2YXIgZW50ZXJDYW5jZWxsZWQgPSBkYXRhLmVudGVyQ2FuY2VsbGVkO1xuICB2YXIgYmVmb3JlQXBwZWFyID0gZGF0YS5iZWZvcmVBcHBlYXI7XG4gIHZhciBhcHBlYXIgPSBkYXRhLmFwcGVhcjtcbiAgdmFyIGFmdGVyQXBwZWFyID0gZGF0YS5hZnRlckFwcGVhcjtcbiAgdmFyIGFwcGVhckNhbmNlbGxlZCA9IGRhdGEuYXBwZWFyQ2FuY2VsbGVkO1xuICB2YXIgZHVyYXRpb24gPSBkYXRhLmR1cmF0aW9uO1xuXG4gIC8vIGFjdGl2ZUluc3RhbmNlIHdpbGwgYWx3YXlzIGJlIHRoZSA8dHJhbnNpdGlvbj4gY29tcG9uZW50IG1hbmFnaW5nIHRoaXNcbiAgLy8gdHJhbnNpdGlvbi4gT25lIGVkZ2UgY2FzZSB0byBjaGVjayBpcyB3aGVuIHRoZSA8dHJhbnNpdGlvbj4gaXMgcGxhY2VkXG4gIC8vIGFzIHRoZSByb290IG5vZGUgb2YgYSBjaGlsZCBjb21wb25lbnQuIEluIHRoYXQgY2FzZSB3ZSBuZWVkIHRvIGNoZWNrXG4gIC8vIDx0cmFuc2l0aW9uPidzIHBhcmVudCBmb3IgYXBwZWFyIGNoZWNrLlxuICB2YXIgY29udGV4dCA9IGFjdGl2ZUluc3RhbmNlO1xuICB2YXIgdHJhbnNpdGlvbk5vZGUgPSBhY3RpdmVJbnN0YW5jZS4kdm5vZGU7XG4gIHdoaWxlICh0cmFuc2l0aW9uTm9kZSAmJiB0cmFuc2l0aW9uTm9kZS5wYXJlbnQpIHtcbiAgICBjb250ZXh0ID0gdHJhbnNpdGlvbk5vZGUuY29udGV4dDtcbiAgICB0cmFuc2l0aW9uTm9kZSA9IHRyYW5zaXRpb25Ob2RlLnBhcmVudDtcbiAgfVxuXG4gIHZhciBpc0FwcGVhciA9ICFjb250ZXh0Ll9pc01vdW50ZWQgfHwgIXZub2RlLmlzUm9vdEluc2VydDtcblxuICBpZiAoaXNBcHBlYXIgJiYgIWFwcGVhciAmJiBhcHBlYXIgIT09ICcnKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgc3RhcnRDbGFzcyA9IGlzQXBwZWFyICYmIGFwcGVhckNsYXNzXG4gICAgPyBhcHBlYXJDbGFzc1xuICAgIDogZW50ZXJDbGFzcztcbiAgdmFyIGFjdGl2ZUNsYXNzID0gaXNBcHBlYXIgJiYgYXBwZWFyQWN0aXZlQ2xhc3NcbiAgICA/IGFwcGVhckFjdGl2ZUNsYXNzXG4gICAgOiBlbnRlckFjdGl2ZUNsYXNzO1xuICB2YXIgdG9DbGFzcyA9IGlzQXBwZWFyICYmIGFwcGVhclRvQ2xhc3NcbiAgICA/IGFwcGVhclRvQ2xhc3NcbiAgICA6IGVudGVyVG9DbGFzcztcblxuICB2YXIgYmVmb3JlRW50ZXJIb29rID0gaXNBcHBlYXJcbiAgICA/IChiZWZvcmVBcHBlYXIgfHwgYmVmb3JlRW50ZXIpXG4gICAgOiBiZWZvcmVFbnRlcjtcbiAgdmFyIGVudGVySG9vayA9IGlzQXBwZWFyXG4gICAgPyAodHlwZW9mIGFwcGVhciA9PT0gJ2Z1bmN0aW9uJyA/IGFwcGVhciA6IGVudGVyKVxuICAgIDogZW50ZXI7XG4gIHZhciBhZnRlckVudGVySG9vayA9IGlzQXBwZWFyXG4gICAgPyAoYWZ0ZXJBcHBlYXIgfHwgYWZ0ZXJFbnRlcilcbiAgICA6IGFmdGVyRW50ZXI7XG4gIHZhciBlbnRlckNhbmNlbGxlZEhvb2sgPSBpc0FwcGVhclxuICAgID8gKGFwcGVhckNhbmNlbGxlZCB8fCBlbnRlckNhbmNlbGxlZClcbiAgICA6IGVudGVyQ2FuY2VsbGVkO1xuXG4gIHZhciBleHBsaWNpdEVudGVyRHVyYXRpb24gPSB0b051bWJlcihcbiAgICBpc09iamVjdChkdXJhdGlvbilcbiAgICAgID8gZHVyYXRpb24uZW50ZXJcbiAgICAgIDogZHVyYXRpb25cbiAgKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBleHBsaWNpdEVudGVyRHVyYXRpb24gIT0gbnVsbCkge1xuICAgIGNoZWNrRHVyYXRpb24oZXhwbGljaXRFbnRlckR1cmF0aW9uLCAnZW50ZXInLCB2bm9kZSk7XG4gIH1cblxuICB2YXIgZXhwZWN0c0NTUyA9IGNzcyAhPT0gZmFsc2UgJiYgIWlzSUU5O1xuICB2YXIgdXNlcldhbnRzQ29udHJvbCA9IGdldEhvb2tBcmd1bWVudHNMZW5ndGgoZW50ZXJIb29rKTtcblxuICB2YXIgY2IgPSBlbC5fZW50ZXJDYiA9IG9uY2UoZnVuY3Rpb24gKCkge1xuICAgIGlmIChleHBlY3RzQ1NTKSB7XG4gICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIHRvQ2xhc3MpO1xuICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBhY3RpdmVDbGFzcyk7XG4gICAgfVxuICAgIGlmIChjYi5jYW5jZWxsZWQpIHtcbiAgICAgIGlmIChleHBlY3RzQ1NTKSB7XG4gICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgc3RhcnRDbGFzcyk7XG4gICAgICB9XG4gICAgICBlbnRlckNhbmNlbGxlZEhvb2sgJiYgZW50ZXJDYW5jZWxsZWRIb29rKGVsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYWZ0ZXJFbnRlckhvb2sgJiYgYWZ0ZXJFbnRlckhvb2soZWwpO1xuICAgIH1cbiAgICBlbC5fZW50ZXJDYiA9IG51bGw7XG4gIH0pO1xuXG4gIGlmICghdm5vZGUuZGF0YS5zaG93KSB7XG4gICAgLy8gcmVtb3ZlIHBlbmRpbmcgbGVhdmUgZWxlbWVudCBvbiBlbnRlciBieSBpbmplY3RpbmcgYW4gaW5zZXJ0IGhvb2tcbiAgICBtZXJnZVZOb2RlSG9vayh2bm9kZSwgJ2luc2VydCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBwYXJlbnQgPSBlbC5wYXJlbnROb2RlO1xuICAgICAgdmFyIHBlbmRpbmdOb2RlID0gcGFyZW50ICYmIHBhcmVudC5fcGVuZGluZyAmJiBwYXJlbnQuX3BlbmRpbmdbdm5vZGUua2V5XTtcbiAgICAgIGlmIChwZW5kaW5nTm9kZSAmJlxuICAgICAgICBwZW5kaW5nTm9kZS50YWcgPT09IHZub2RlLnRhZyAmJlxuICAgICAgICBwZW5kaW5nTm9kZS5lbG0uX2xlYXZlQ2JcbiAgICAgICkge1xuICAgICAgICBwZW5kaW5nTm9kZS5lbG0uX2xlYXZlQ2IoKTtcbiAgICAgIH1cbiAgICAgIGVudGVySG9vayAmJiBlbnRlckhvb2soZWwsIGNiKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8vIHN0YXJ0IGVudGVyIHRyYW5zaXRpb25cbiAgYmVmb3JlRW50ZXJIb29rICYmIGJlZm9yZUVudGVySG9vayhlbCk7XG4gIGlmIChleHBlY3RzQ1NTKSB7XG4gICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBzdGFydENsYXNzKTtcbiAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGFjdGl2ZUNsYXNzKTtcbiAgICBuZXh0RnJhbWUoZnVuY3Rpb24gKCkge1xuICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBzdGFydENsYXNzKTtcbiAgICAgIGlmICghY2IuY2FuY2VsbGVkKSB7XG4gICAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgdG9DbGFzcyk7XG4gICAgICAgIGlmICghdXNlcldhbnRzQ29udHJvbCkge1xuICAgICAgICAgIGlmIChpc1ZhbGlkRHVyYXRpb24oZXhwbGljaXRFbnRlckR1cmF0aW9uKSkge1xuICAgICAgICAgICAgc2V0VGltZW91dChjYiwgZXhwbGljaXRFbnRlckR1cmF0aW9uKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgd2hlblRyYW5zaXRpb25FbmRzKGVsLCB0eXBlLCBjYik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBpZiAodm5vZGUuZGF0YS5zaG93KSB7XG4gICAgdG9nZ2xlRGlzcGxheSAmJiB0b2dnbGVEaXNwbGF5KCk7XG4gICAgZW50ZXJIb29rICYmIGVudGVySG9vayhlbCwgY2IpO1xuICB9XG5cbiAgaWYgKCFleHBlY3RzQ1NTICYmICF1c2VyV2FudHNDb250cm9sKSB7XG4gICAgY2IoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBsZWF2ZSAodm5vZGUsIHJtKSB7XG4gIHZhciBlbCA9IHZub2RlLmVsbTtcblxuICAvLyBjYWxsIGVudGVyIGNhbGxiYWNrIG5vd1xuICBpZiAoaXNEZWYoZWwuX2VudGVyQ2IpKSB7XG4gICAgZWwuX2VudGVyQ2IuY2FuY2VsbGVkID0gdHJ1ZTtcbiAgICBlbC5fZW50ZXJDYigpO1xuICB9XG5cbiAgdmFyIGRhdGEgPSByZXNvbHZlVHJhbnNpdGlvbih2bm9kZS5kYXRhLnRyYW5zaXRpb24pO1xuICBpZiAoaXNVbmRlZihkYXRhKSB8fCBlbC5ub2RlVHlwZSAhPT0gMSkge1xuICAgIHJldHVybiBybSgpXG4gIH1cblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGlzRGVmKGVsLl9sZWF2ZUNiKSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIGNzcyA9IGRhdGEuY3NzO1xuICB2YXIgdHlwZSA9IGRhdGEudHlwZTtcbiAgdmFyIGxlYXZlQ2xhc3MgPSBkYXRhLmxlYXZlQ2xhc3M7XG4gIHZhciBsZWF2ZVRvQ2xhc3MgPSBkYXRhLmxlYXZlVG9DbGFzcztcbiAgdmFyIGxlYXZlQWN0aXZlQ2xhc3MgPSBkYXRhLmxlYXZlQWN0aXZlQ2xhc3M7XG4gIHZhciBiZWZvcmVMZWF2ZSA9IGRhdGEuYmVmb3JlTGVhdmU7XG4gIHZhciBsZWF2ZSA9IGRhdGEubGVhdmU7XG4gIHZhciBhZnRlckxlYXZlID0gZGF0YS5hZnRlckxlYXZlO1xuICB2YXIgbGVhdmVDYW5jZWxsZWQgPSBkYXRhLmxlYXZlQ2FuY2VsbGVkO1xuICB2YXIgZGVsYXlMZWF2ZSA9IGRhdGEuZGVsYXlMZWF2ZTtcbiAgdmFyIGR1cmF0aW9uID0gZGF0YS5kdXJhdGlvbjtcblxuICB2YXIgZXhwZWN0c0NTUyA9IGNzcyAhPT0gZmFsc2UgJiYgIWlzSUU5O1xuICB2YXIgdXNlcldhbnRzQ29udHJvbCA9IGdldEhvb2tBcmd1bWVudHNMZW5ndGgobGVhdmUpO1xuXG4gIHZhciBleHBsaWNpdExlYXZlRHVyYXRpb24gPSB0b051bWJlcihcbiAgICBpc09iamVjdChkdXJhdGlvbilcbiAgICAgID8gZHVyYXRpb24ubGVhdmVcbiAgICAgIDogZHVyYXRpb25cbiAgKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBpc0RlZihleHBsaWNpdExlYXZlRHVyYXRpb24pKSB7XG4gICAgY2hlY2tEdXJhdGlvbihleHBsaWNpdExlYXZlRHVyYXRpb24sICdsZWF2ZScsIHZub2RlKTtcbiAgfVxuXG4gIHZhciBjYiA9IGVsLl9sZWF2ZUNiID0gb25jZShmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGVsLnBhcmVudE5vZGUgJiYgZWwucGFyZW50Tm9kZS5fcGVuZGluZykge1xuICAgICAgZWwucGFyZW50Tm9kZS5fcGVuZGluZ1t2bm9kZS5rZXldID0gbnVsbDtcbiAgICB9XG4gICAgaWYgKGV4cGVjdHNDU1MpIHtcbiAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVUb0NsYXNzKTtcbiAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVBY3RpdmVDbGFzcyk7XG4gICAgfVxuICAgIGlmIChjYi5jYW5jZWxsZWQpIHtcbiAgICAgIGlmIChleHBlY3RzQ1NTKSB7XG4gICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVDbGFzcyk7XG4gICAgICB9XG4gICAgICBsZWF2ZUNhbmNlbGxlZCAmJiBsZWF2ZUNhbmNlbGxlZChlbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJtKCk7XG4gICAgICBhZnRlckxlYXZlICYmIGFmdGVyTGVhdmUoZWwpO1xuICAgIH1cbiAgICBlbC5fbGVhdmVDYiA9IG51bGw7XG4gIH0pO1xuXG4gIGlmIChkZWxheUxlYXZlKSB7XG4gICAgZGVsYXlMZWF2ZShwZXJmb3JtTGVhdmUpO1xuICB9IGVsc2Uge1xuICAgIHBlcmZvcm1MZWF2ZSgpO1xuICB9XG5cbiAgZnVuY3Rpb24gcGVyZm9ybUxlYXZlICgpIHtcbiAgICAvLyB0aGUgZGVsYXllZCBsZWF2ZSBtYXkgaGF2ZSBhbHJlYWR5IGJlZW4gY2FuY2VsbGVkXG4gICAgaWYgKGNiLmNhbmNlbGxlZCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIC8vIHJlY29yZCBsZWF2aW5nIGVsZW1lbnRcbiAgICBpZiAoIXZub2RlLmRhdGEuc2hvdyAmJiBlbC5wYXJlbnROb2RlKSB7XG4gICAgICAoZWwucGFyZW50Tm9kZS5fcGVuZGluZyB8fCAoZWwucGFyZW50Tm9kZS5fcGVuZGluZyA9IHt9KSlbKHZub2RlLmtleSldID0gdm5vZGU7XG4gICAgfVxuICAgIGJlZm9yZUxlYXZlICYmIGJlZm9yZUxlYXZlKGVsKTtcbiAgICBpZiAoZXhwZWN0c0NTUykge1xuICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUNsYXNzKTtcbiAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVBY3RpdmVDbGFzcyk7XG4gICAgICBuZXh0RnJhbWUoZnVuY3Rpb24gKCkge1xuICAgICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlQ2xhc3MpO1xuICAgICAgICBpZiAoIWNiLmNhbmNlbGxlZCkge1xuICAgICAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVUb0NsYXNzKTtcbiAgICAgICAgICBpZiAoIXVzZXJXYW50c0NvbnRyb2wpIHtcbiAgICAgICAgICAgIGlmIChpc1ZhbGlkRHVyYXRpb24oZXhwbGljaXRMZWF2ZUR1cmF0aW9uKSkge1xuICAgICAgICAgICAgICBzZXRUaW1lb3V0KGNiLCBleHBsaWNpdExlYXZlRHVyYXRpb24pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgd2hlblRyYW5zaXRpb25FbmRzKGVsLCB0eXBlLCBjYik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgbGVhdmUgJiYgbGVhdmUoZWwsIGNiKTtcbiAgICBpZiAoIWV4cGVjdHNDU1MgJiYgIXVzZXJXYW50c0NvbnRyb2wpIHtcbiAgICAgIGNiKCk7XG4gICAgfVxuICB9XG59XG5cbi8vIG9ubHkgdXNlZCBpbiBkZXYgbW9kZVxuZnVuY3Rpb24gY2hlY2tEdXJhdGlvbiAodmFsLCBuYW1lLCB2bm9kZSkge1xuICBpZiAodHlwZW9mIHZhbCAhPT0gJ251bWJlcicpIHtcbiAgICB3YXJuKFxuICAgICAgXCI8dHJhbnNpdGlvbj4gZXhwbGljaXQgXCIgKyBuYW1lICsgXCIgZHVyYXRpb24gaXMgbm90IGEgdmFsaWQgbnVtYmVyIC0gXCIgK1xuICAgICAgXCJnb3QgXCIgKyAoSlNPTi5zdHJpbmdpZnkodmFsKSkgKyBcIi5cIixcbiAgICAgIHZub2RlLmNvbnRleHRcbiAgICApO1xuICB9IGVsc2UgaWYgKGlzTmFOKHZhbCkpIHtcbiAgICB3YXJuKFxuICAgICAgXCI8dHJhbnNpdGlvbj4gZXhwbGljaXQgXCIgKyBuYW1lICsgXCIgZHVyYXRpb24gaXMgTmFOIC0gXCIgK1xuICAgICAgJ3RoZSBkdXJhdGlvbiBleHByZXNzaW9uIG1pZ2h0IGJlIGluY29ycmVjdC4nLFxuICAgICAgdm5vZGUuY29udGV4dFxuICAgICk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNWYWxpZER1cmF0aW9uICh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdudW1iZXInICYmICFpc05hTih2YWwpXG59XG5cbi8qKlxuICogTm9ybWFsaXplIGEgdHJhbnNpdGlvbiBob29rJ3MgYXJndW1lbnQgbGVuZ3RoLiBUaGUgaG9vayBtYXkgYmU6XG4gKiAtIGEgbWVyZ2VkIGhvb2sgKGludm9rZXIpIHdpdGggdGhlIG9yaWdpbmFsIGluIC5mbnNcbiAqIC0gYSB3cmFwcGVkIGNvbXBvbmVudCBtZXRob2QgKGNoZWNrIC5fbGVuZ3RoKVxuICogLSBhIHBsYWluIGZ1bmN0aW9uICgubGVuZ3RoKVxuICovXG5mdW5jdGlvbiBnZXRIb29rQXJndW1lbnRzTGVuZ3RoIChmbikge1xuICBpZiAoaXNVbmRlZihmbikpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuICB2YXIgaW52b2tlckZucyA9IGZuLmZucztcbiAgaWYgKGlzRGVmKGludm9rZXJGbnMpKSB7XG4gICAgLy8gaW52b2tlclxuICAgIHJldHVybiBnZXRIb29rQXJndW1lbnRzTGVuZ3RoKFxuICAgICAgQXJyYXkuaXNBcnJheShpbnZva2VyRm5zKVxuICAgICAgICA/IGludm9rZXJGbnNbMF1cbiAgICAgICAgOiBpbnZva2VyRm5zXG4gICAgKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiAoZm4uX2xlbmd0aCB8fCBmbi5sZW5ndGgpID4gMVxuICB9XG59XG5cbmZ1bmN0aW9uIF9lbnRlciAoXywgdm5vZGUpIHtcbiAgaWYgKHZub2RlLmRhdGEuc2hvdyAhPT0gdHJ1ZSkge1xuICAgIGVudGVyKHZub2RlKTtcbiAgfVxufVxuXG52YXIgdHJhbnNpdGlvbiA9IGluQnJvd3NlciA/IHtcbiAgY3JlYXRlOiBfZW50ZXIsXG4gIGFjdGl2YXRlOiBfZW50ZXIsXG4gIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlJCQxICh2bm9kZSwgcm0pIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgIGlmICh2bm9kZS5kYXRhLnNob3cgIT09IHRydWUpIHtcbiAgICAgIGxlYXZlKHZub2RlLCBybSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJtKCk7XG4gICAgfVxuICB9XG59IDoge307XG5cbnZhciBwbGF0Zm9ybU1vZHVsZXMgPSBbXG4gIGF0dHJzLFxuICBrbGFzcyxcbiAgZXZlbnRzLFxuICBkb21Qcm9wcyxcbiAgc3R5bGUsXG4gIHRyYW5zaXRpb25cbl07XG5cbi8qICAqL1xuXG4vLyB0aGUgZGlyZWN0aXZlIG1vZHVsZSBzaG91bGQgYmUgYXBwbGllZCBsYXN0LCBhZnRlciBhbGxcbi8vIGJ1aWx0LWluIG1vZHVsZXMgaGF2ZSBiZWVuIGFwcGxpZWQuXG52YXIgbW9kdWxlcyA9IHBsYXRmb3JtTW9kdWxlcy5jb25jYXQoYmFzZU1vZHVsZXMpO1xuXG52YXIgcGF0Y2ggPSBjcmVhdGVQYXRjaEZ1bmN0aW9uKHsgbm9kZU9wczogbm9kZU9wcywgbW9kdWxlczogbW9kdWxlcyB9KTtcblxuLyoqXG4gKiBOb3QgdHlwZSBjaGVja2luZyB0aGlzIGZpbGUgYmVjYXVzZSBmbG93IGRvZXNuJ3QgbGlrZSBhdHRhY2hpbmdcbiAqIHByb3BlcnRpZXMgdG8gRWxlbWVudHMuXG4gKi9cblxuLyogaXN0YW5idWwgaWdub3JlIGlmICovXG5pZiAoaXNJRTkpIHtcbiAgLy8gaHR0cDovL3d3dy5tYXR0czQxMS5jb20vcG9zdC9pbnRlcm5ldC1leHBsb3Jlci05LW9uaW5wdXQvXG4gIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3NlbGVjdGlvbmNoYW5nZScsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZWwgPSBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuICAgIGlmIChlbCAmJiBlbC52bW9kZWwpIHtcbiAgICAgIHRyaWdnZXIoZWwsICdpbnB1dCcpO1xuICAgIH1cbiAgfSk7XG59XG5cbnZhciBkaXJlY3RpdmUgPSB7XG4gIGluc2VydGVkOiBmdW5jdGlvbiBpbnNlcnRlZCAoZWwsIGJpbmRpbmcsIHZub2RlLCBvbGRWbm9kZSkge1xuICAgIGlmICh2bm9kZS50YWcgPT09ICdzZWxlY3QnKSB7XG4gICAgICAvLyAjNjkwM1xuICAgICAgaWYgKG9sZFZub2RlLmVsbSAmJiAhb2xkVm5vZGUuZWxtLl92T3B0aW9ucykge1xuICAgICAgICBtZXJnZVZOb2RlSG9vayh2bm9kZSwgJ3Bvc3RwYXRjaCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBkaXJlY3RpdmUuY29tcG9uZW50VXBkYXRlZChlbCwgYmluZGluZywgdm5vZGUpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNldFNlbGVjdGVkKGVsLCBiaW5kaW5nLCB2bm9kZS5jb250ZXh0KTtcbiAgICAgIH1cbiAgICAgIGVsLl92T3B0aW9ucyA9IFtdLm1hcC5jYWxsKGVsLm9wdGlvbnMsIGdldFZhbHVlKTtcbiAgICB9IGVsc2UgaWYgKHZub2RlLnRhZyA9PT0gJ3RleHRhcmVhJyB8fCBpc1RleHRJbnB1dFR5cGUoZWwudHlwZSkpIHtcbiAgICAgIGVsLl92TW9kaWZpZXJzID0gYmluZGluZy5tb2RpZmllcnM7XG4gICAgICBpZiAoIWJpbmRpbmcubW9kaWZpZXJzLmxhenkpIHtcbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignY29tcG9zaXRpb25zdGFydCcsIG9uQ29tcG9zaXRpb25TdGFydCk7XG4gICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NvbXBvc2l0aW9uZW5kJywgb25Db21wb3NpdGlvbkVuZCk7XG4gICAgICAgIC8vIFNhZmFyaSA8IDEwLjIgJiBVSVdlYlZpZXcgZG9lc24ndCBmaXJlIGNvbXBvc2l0aW9uZW5kIHdoZW5cbiAgICAgICAgLy8gc3dpdGNoaW5nIGZvY3VzIGJlZm9yZSBjb25maXJtaW5nIGNvbXBvc2l0aW9uIGNob2ljZVxuICAgICAgICAvLyB0aGlzIGFsc28gZml4ZXMgdGhlIGlzc3VlIHdoZXJlIHNvbWUgYnJvd3NlcnMgZS5nLiBpT1MgQ2hyb21lXG4gICAgICAgIC8vIGZpcmVzIFwiY2hhbmdlXCIgaW5zdGVhZCBvZiBcImlucHV0XCIgb24gYXV0b2NvbXBsZXRlLlxuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBvbkNvbXBvc2l0aW9uRW5kKTtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgIGlmIChpc0lFOSkge1xuICAgICAgICAgIGVsLnZtb2RlbCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgY29tcG9uZW50VXBkYXRlZDogZnVuY3Rpb24gY29tcG9uZW50VXBkYXRlZCAoZWwsIGJpbmRpbmcsIHZub2RlKSB7XG4gICAgaWYgKHZub2RlLnRhZyA9PT0gJ3NlbGVjdCcpIHtcbiAgICAgIHNldFNlbGVjdGVkKGVsLCBiaW5kaW5nLCB2bm9kZS5jb250ZXh0KTtcbiAgICAgIC8vIGluIGNhc2UgdGhlIG9wdGlvbnMgcmVuZGVyZWQgYnkgdi1mb3IgaGF2ZSBjaGFuZ2VkLFxuICAgICAgLy8gaXQncyBwb3NzaWJsZSB0aGF0IHRoZSB2YWx1ZSBpcyBvdXQtb2Ytc3luYyB3aXRoIHRoZSByZW5kZXJlZCBvcHRpb25zLlxuICAgICAgLy8gZGV0ZWN0IHN1Y2ggY2FzZXMgYW5kIGZpbHRlciBvdXQgdmFsdWVzIHRoYXQgbm8gbG9uZ2VyIGhhcyBhIG1hdGNoaW5nXG4gICAgICAvLyBvcHRpb24gaW4gdGhlIERPTS5cbiAgICAgIHZhciBwcmV2T3B0aW9ucyA9IGVsLl92T3B0aW9ucztcbiAgICAgIHZhciBjdXJPcHRpb25zID0gZWwuX3ZPcHRpb25zID0gW10ubWFwLmNhbGwoZWwub3B0aW9ucywgZ2V0VmFsdWUpO1xuICAgICAgaWYgKGN1ck9wdGlvbnMuc29tZShmdW5jdGlvbiAobywgaSkgeyByZXR1cm4gIWxvb3NlRXF1YWwobywgcHJldk9wdGlvbnNbaV0pOyB9KSkge1xuICAgICAgICAvLyB0cmlnZ2VyIGNoYW5nZSBldmVudCBpZlxuICAgICAgICAvLyBubyBtYXRjaGluZyBvcHRpb24gZm91bmQgZm9yIGF0IGxlYXN0IG9uZSB2YWx1ZVxuICAgICAgICB2YXIgbmVlZFJlc2V0ID0gZWwubXVsdGlwbGVcbiAgICAgICAgICA/IGJpbmRpbmcudmFsdWUuc29tZShmdW5jdGlvbiAodikgeyByZXR1cm4gaGFzTm9NYXRjaGluZ09wdGlvbih2LCBjdXJPcHRpb25zKTsgfSlcbiAgICAgICAgICA6IGJpbmRpbmcudmFsdWUgIT09IGJpbmRpbmcub2xkVmFsdWUgJiYgaGFzTm9NYXRjaGluZ09wdGlvbihiaW5kaW5nLnZhbHVlLCBjdXJPcHRpb25zKTtcbiAgICAgICAgaWYgKG5lZWRSZXNldCkge1xuICAgICAgICAgIHRyaWdnZXIoZWwsICdjaGFuZ2UnKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuZnVuY3Rpb24gc2V0U2VsZWN0ZWQgKGVsLCBiaW5kaW5nLCB2bSkge1xuICBhY3R1YWxseVNldFNlbGVjdGVkKGVsLCBiaW5kaW5nLCB2bSk7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoaXNJRSB8fCBpc0VkZ2UpIHtcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIGFjdHVhbGx5U2V0U2VsZWN0ZWQoZWwsIGJpbmRpbmcsIHZtKTtcbiAgICB9LCAwKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBhY3R1YWxseVNldFNlbGVjdGVkIChlbCwgYmluZGluZywgdm0pIHtcbiAgdmFyIHZhbHVlID0gYmluZGluZy52YWx1ZTtcbiAgdmFyIGlzTXVsdGlwbGUgPSBlbC5tdWx0aXBsZTtcbiAgaWYgKGlzTXVsdGlwbGUgJiYgIUFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgXCI8c2VsZWN0IG11bHRpcGxlIHYtbW9kZWw9XFxcIlwiICsgKGJpbmRpbmcuZXhwcmVzc2lvbikgKyBcIlxcXCI+IFwiICtcbiAgICAgIFwiZXhwZWN0cyBhbiBBcnJheSB2YWx1ZSBmb3IgaXRzIGJpbmRpbmcsIGJ1dCBnb3QgXCIgKyAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKS5zbGljZSg4LCAtMSkpLFxuICAgICAgdm1cbiAgICApO1xuICAgIHJldHVyblxuICB9XG4gIHZhciBzZWxlY3RlZCwgb3B0aW9uO1xuICBmb3IgKHZhciBpID0gMCwgbCA9IGVsLm9wdGlvbnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgb3B0aW9uID0gZWwub3B0aW9uc1tpXTtcbiAgICBpZiAoaXNNdWx0aXBsZSkge1xuICAgICAgc2VsZWN0ZWQgPSBsb29zZUluZGV4T2YodmFsdWUsIGdldFZhbHVlKG9wdGlvbikpID4gLTE7XG4gICAgICBpZiAob3B0aW9uLnNlbGVjdGVkICE9PSBzZWxlY3RlZCkge1xuICAgICAgICBvcHRpb24uc2VsZWN0ZWQgPSBzZWxlY3RlZDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGxvb3NlRXF1YWwoZ2V0VmFsdWUob3B0aW9uKSwgdmFsdWUpKSB7XG4gICAgICAgIGlmIChlbC5zZWxlY3RlZEluZGV4ICE9PSBpKSB7XG4gICAgICAgICAgZWwuc2VsZWN0ZWRJbmRleCA9IGk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmICghaXNNdWx0aXBsZSkge1xuICAgIGVsLnNlbGVjdGVkSW5kZXggPSAtMTtcbiAgfVxufVxuXG5mdW5jdGlvbiBoYXNOb01hdGNoaW5nT3B0aW9uICh2YWx1ZSwgb3B0aW9ucykge1xuICByZXR1cm4gb3B0aW9ucy5ldmVyeShmdW5jdGlvbiAobykgeyByZXR1cm4gIWxvb3NlRXF1YWwobywgdmFsdWUpOyB9KVxufVxuXG5mdW5jdGlvbiBnZXRWYWx1ZSAob3B0aW9uKSB7XG4gIHJldHVybiAnX3ZhbHVlJyBpbiBvcHRpb25cbiAgICA/IG9wdGlvbi5fdmFsdWVcbiAgICA6IG9wdGlvbi52YWx1ZVxufVxuXG5mdW5jdGlvbiBvbkNvbXBvc2l0aW9uU3RhcnQgKGUpIHtcbiAgZS50YXJnZXQuY29tcG9zaW5nID0gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gb25Db21wb3NpdGlvbkVuZCAoZSkge1xuICAvLyBwcmV2ZW50IHRyaWdnZXJpbmcgYW4gaW5wdXQgZXZlbnQgZm9yIG5vIHJlYXNvblxuICBpZiAoIWUudGFyZ2V0LmNvbXBvc2luZykgeyByZXR1cm4gfVxuICBlLnRhcmdldC5jb21wb3NpbmcgPSBmYWxzZTtcbiAgdHJpZ2dlcihlLnRhcmdldCwgJ2lucHV0Jyk7XG59XG5cbmZ1bmN0aW9uIHRyaWdnZXIgKGVsLCB0eXBlKSB7XG4gIHZhciBlID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0hUTUxFdmVudHMnKTtcbiAgZS5pbml0RXZlbnQodHlwZSwgdHJ1ZSwgdHJ1ZSk7XG4gIGVsLmRpc3BhdGNoRXZlbnQoZSk7XG59XG5cbi8qICAqL1xuXG4vLyByZWN1cnNpdmVseSBzZWFyY2ggZm9yIHBvc3NpYmxlIHRyYW5zaXRpb24gZGVmaW5lZCBpbnNpZGUgdGhlIGNvbXBvbmVudCByb290XG5mdW5jdGlvbiBsb2NhdGVOb2RlICh2bm9kZSkge1xuICByZXR1cm4gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgJiYgKCF2bm9kZS5kYXRhIHx8ICF2bm9kZS5kYXRhLnRyYW5zaXRpb24pXG4gICAgPyBsb2NhdGVOb2RlKHZub2RlLmNvbXBvbmVudEluc3RhbmNlLl92bm9kZSlcbiAgICA6IHZub2RlXG59XG5cbnZhciBzaG93ID0ge1xuICBiaW5kOiBmdW5jdGlvbiBiaW5kIChlbCwgcmVmLCB2bm9kZSkge1xuICAgIHZhciB2YWx1ZSA9IHJlZi52YWx1ZTtcblxuICAgIHZub2RlID0gbG9jYXRlTm9kZSh2bm9kZSk7XG4gICAgdmFyIHRyYW5zaXRpb24kJDEgPSB2bm9kZS5kYXRhICYmIHZub2RlLmRhdGEudHJhbnNpdGlvbjtcbiAgICB2YXIgb3JpZ2luYWxEaXNwbGF5ID0gZWwuX192T3JpZ2luYWxEaXNwbGF5ID1cbiAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPT09ICdub25lJyA/ICcnIDogZWwuc3R5bGUuZGlzcGxheTtcbiAgICBpZiAodmFsdWUgJiYgdHJhbnNpdGlvbiQkMSkge1xuICAgICAgdm5vZGUuZGF0YS5zaG93ID0gdHJ1ZTtcbiAgICAgIGVudGVyKHZub2RlLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSBvcmlnaW5hbERpc3BsYXk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWwuc3R5bGUuZGlzcGxheSA9IHZhbHVlID8gb3JpZ2luYWxEaXNwbGF5IDogJ25vbmUnO1xuICAgIH1cbiAgfSxcblxuICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZSAoZWwsIHJlZiwgdm5vZGUpIHtcbiAgICB2YXIgdmFsdWUgPSByZWYudmFsdWU7XG4gICAgdmFyIG9sZFZhbHVlID0gcmVmLm9sZFZhbHVlO1xuXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKCF2YWx1ZSA9PT0gIW9sZFZhbHVlKSB7IHJldHVybiB9XG4gICAgdm5vZGUgPSBsb2NhdGVOb2RlKHZub2RlKTtcbiAgICB2YXIgdHJhbnNpdGlvbiQkMSA9IHZub2RlLmRhdGEgJiYgdm5vZGUuZGF0YS50cmFuc2l0aW9uO1xuICAgIGlmICh0cmFuc2l0aW9uJCQxKSB7XG4gICAgICB2bm9kZS5kYXRhLnNob3cgPSB0cnVlO1xuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIGVudGVyKHZub2RlLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZWwuc3R5bGUuZGlzcGxheSA9IGVsLl9fdk9yaWdpbmFsRGlzcGxheTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZWF2ZSh2bm9kZSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gdmFsdWUgPyBlbC5fX3ZPcmlnaW5hbERpc3BsYXkgOiAnbm9uZSc7XG4gICAgfVxuICB9LFxuXG4gIHVuYmluZDogZnVuY3Rpb24gdW5iaW5kIChcbiAgICBlbCxcbiAgICBiaW5kaW5nLFxuICAgIHZub2RlLFxuICAgIG9sZFZub2RlLFxuICAgIGlzRGVzdHJveVxuICApIHtcbiAgICBpZiAoIWlzRGVzdHJveSkge1xuICAgICAgZWwuc3R5bGUuZGlzcGxheSA9IGVsLl9fdk9yaWdpbmFsRGlzcGxheTtcbiAgICB9XG4gIH1cbn07XG5cbnZhciBwbGF0Zm9ybURpcmVjdGl2ZXMgPSB7XG4gIG1vZGVsOiBkaXJlY3RpdmUsXG4gIHNob3c6IHNob3dcbn07XG5cbi8qICAqL1xuXG52YXIgdHJhbnNpdGlvblByb3BzID0ge1xuICBuYW1lOiBTdHJpbmcsXG4gIGFwcGVhcjogQm9vbGVhbixcbiAgY3NzOiBCb29sZWFuLFxuICBtb2RlOiBTdHJpbmcsXG4gIHR5cGU6IFN0cmluZyxcbiAgZW50ZXJDbGFzczogU3RyaW5nLFxuICBsZWF2ZUNsYXNzOiBTdHJpbmcsXG4gIGVudGVyVG9DbGFzczogU3RyaW5nLFxuICBsZWF2ZVRvQ2xhc3M6IFN0cmluZyxcbiAgZW50ZXJBY3RpdmVDbGFzczogU3RyaW5nLFxuICBsZWF2ZUFjdGl2ZUNsYXNzOiBTdHJpbmcsXG4gIGFwcGVhckNsYXNzOiBTdHJpbmcsXG4gIGFwcGVhckFjdGl2ZUNsYXNzOiBTdHJpbmcsXG4gIGFwcGVhclRvQ2xhc3M6IFN0cmluZyxcbiAgZHVyYXRpb246IFtOdW1iZXIsIFN0cmluZywgT2JqZWN0XVxufTtcblxuLy8gaW4gY2FzZSB0aGUgY2hpbGQgaXMgYWxzbyBhbiBhYnN0cmFjdCBjb21wb25lbnQsIGUuZy4gPGtlZXAtYWxpdmU+XG4vLyB3ZSB3YW50IHRvIHJlY3Vyc2l2ZWx5IHJldHJpZXZlIHRoZSByZWFsIGNvbXBvbmVudCB0byBiZSByZW5kZXJlZFxuZnVuY3Rpb24gZ2V0UmVhbENoaWxkICh2bm9kZSkge1xuICB2YXIgY29tcE9wdGlvbnMgPSB2bm9kZSAmJiB2bm9kZS5jb21wb25lbnRPcHRpb25zO1xuICBpZiAoY29tcE9wdGlvbnMgJiYgY29tcE9wdGlvbnMuQ3Rvci5vcHRpb25zLmFic3RyYWN0KSB7XG4gICAgcmV0dXJuIGdldFJlYWxDaGlsZChnZXRGaXJzdENvbXBvbmVudENoaWxkKGNvbXBPcHRpb25zLmNoaWxkcmVuKSlcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdm5vZGVcbiAgfVxufVxuXG5mdW5jdGlvbiBleHRyYWN0VHJhbnNpdGlvbkRhdGEgKGNvbXApIHtcbiAgdmFyIGRhdGEgPSB7fTtcbiAgdmFyIG9wdGlvbnMgPSBjb21wLiRvcHRpb25zO1xuICAvLyBwcm9wc1xuICBmb3IgKHZhciBrZXkgaW4gb3B0aW9ucy5wcm9wc0RhdGEpIHtcbiAgICBkYXRhW2tleV0gPSBjb21wW2tleV07XG4gIH1cbiAgLy8gZXZlbnRzLlxuICAvLyBleHRyYWN0IGxpc3RlbmVycyBhbmQgcGFzcyB0aGVtIGRpcmVjdGx5IHRvIHRoZSB0cmFuc2l0aW9uIG1ldGhvZHNcbiAgdmFyIGxpc3RlbmVycyA9IG9wdGlvbnMuX3BhcmVudExpc3RlbmVycztcbiAgZm9yICh2YXIga2V5JDEgaW4gbGlzdGVuZXJzKSB7XG4gICAgZGF0YVtjYW1lbGl6ZShrZXkkMSldID0gbGlzdGVuZXJzW2tleSQxXTtcbiAgfVxuICByZXR1cm4gZGF0YVxufVxuXG5mdW5jdGlvbiBwbGFjZWhvbGRlciAoaCwgcmF3Q2hpbGQpIHtcbiAgaWYgKC9cXGQta2VlcC1hbGl2ZSQvLnRlc3QocmF3Q2hpbGQudGFnKSkge1xuICAgIHJldHVybiBoKCdrZWVwLWFsaXZlJywge1xuICAgICAgcHJvcHM6IHJhd0NoaWxkLmNvbXBvbmVudE9wdGlvbnMucHJvcHNEYXRhXG4gICAgfSlcbiAgfVxufVxuXG5mdW5jdGlvbiBoYXNQYXJlbnRUcmFuc2l0aW9uICh2bm9kZSkge1xuICB3aGlsZSAoKHZub2RlID0gdm5vZGUucGFyZW50KSkge1xuICAgIGlmICh2bm9kZS5kYXRhLnRyYW5zaXRpb24pIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGlzU2FtZUNoaWxkIChjaGlsZCwgb2xkQ2hpbGQpIHtcbiAgcmV0dXJuIG9sZENoaWxkLmtleSA9PT0gY2hpbGQua2V5ICYmIG9sZENoaWxkLnRhZyA9PT0gY2hpbGQudGFnXG59XG5cbnZhciBpc05vdFRleHROb2RlID0gZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGMudGFnIHx8IGlzQXN5bmNQbGFjZWhvbGRlcihjKTsgfTtcblxudmFyIGlzVlNob3dEaXJlY3RpdmUgPSBmdW5jdGlvbiAoZCkgeyByZXR1cm4gZC5uYW1lID09PSAnc2hvdyc7IH07XG5cbnZhciBUcmFuc2l0aW9uID0ge1xuICBuYW1lOiAndHJhbnNpdGlvbicsXG4gIHByb3BzOiB0cmFuc2l0aW9uUHJvcHMsXG4gIGFic3RyYWN0OiB0cnVlLFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyIChoKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLiRzbG90cy5kZWZhdWx0O1xuICAgIGlmICghY2hpbGRyZW4pIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vIGZpbHRlciBvdXQgdGV4dCBub2RlcyAocG9zc2libGUgd2hpdGVzcGFjZXMpXG4gICAgY2hpbGRyZW4gPSBjaGlsZHJlbi5maWx0ZXIoaXNOb3RUZXh0Tm9kZSk7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKCFjaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vIHdhcm4gbXVsdGlwbGUgZWxlbWVudHNcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBjaGlsZHJlbi5sZW5ndGggPiAxKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAnPHRyYW5zaXRpb24+IGNhbiBvbmx5IGJlIHVzZWQgb24gYSBzaW5nbGUgZWxlbWVudC4gVXNlICcgK1xuICAgICAgICAnPHRyYW5zaXRpb24tZ3JvdXA+IGZvciBsaXN0cy4nLFxuICAgICAgICB0aGlzLiRwYXJlbnRcbiAgICAgICk7XG4gICAgfVxuXG4gICAgdmFyIG1vZGUgPSB0aGlzLm1vZGU7XG5cbiAgICAvLyB3YXJuIGludmFsaWQgbW9kZVxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgICBtb2RlICYmIG1vZGUgIT09ICdpbi1vdXQnICYmIG1vZGUgIT09ICdvdXQtaW4nXG4gICAgKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAnaW52YWxpZCA8dHJhbnNpdGlvbj4gbW9kZTogJyArIG1vZGUsXG4gICAgICAgIHRoaXMuJHBhcmVudFxuICAgICAgKTtcbiAgICB9XG5cbiAgICB2YXIgcmF3Q2hpbGQgPSBjaGlsZHJlblswXTtcblxuICAgIC8vIGlmIHRoaXMgaXMgYSBjb21wb25lbnQgcm9vdCBub2RlIGFuZCB0aGUgY29tcG9uZW50J3NcbiAgICAvLyBwYXJlbnQgY29udGFpbmVyIG5vZGUgYWxzbyBoYXMgdHJhbnNpdGlvbiwgc2tpcC5cbiAgICBpZiAoaGFzUGFyZW50VHJhbnNpdGlvbih0aGlzLiR2bm9kZSkpIHtcbiAgICAgIHJldHVybiByYXdDaGlsZFxuICAgIH1cblxuICAgIC8vIGFwcGx5IHRyYW5zaXRpb24gZGF0YSB0byBjaGlsZFxuICAgIC8vIHVzZSBnZXRSZWFsQ2hpbGQoKSB0byBpZ25vcmUgYWJzdHJhY3QgY29tcG9uZW50cyBlLmcuIGtlZXAtYWxpdmVcbiAgICB2YXIgY2hpbGQgPSBnZXRSZWFsQ2hpbGQocmF3Q2hpbGQpO1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmICghY2hpbGQpIHtcbiAgICAgIHJldHVybiByYXdDaGlsZFxuICAgIH1cblxuICAgIGlmICh0aGlzLl9sZWF2aW5nKSB7XG4gICAgICByZXR1cm4gcGxhY2Vob2xkZXIoaCwgcmF3Q2hpbGQpXG4gICAgfVxuXG4gICAgLy8gZW5zdXJlIGEga2V5IHRoYXQgaXMgdW5pcXVlIHRvIHRoZSB2bm9kZSB0eXBlIGFuZCB0byB0aGlzIHRyYW5zaXRpb25cbiAgICAvLyBjb21wb25lbnQgaW5zdGFuY2UuIFRoaXMga2V5IHdpbGwgYmUgdXNlZCB0byByZW1vdmUgcGVuZGluZyBsZWF2aW5nIG5vZGVzXG4gICAgLy8gZHVyaW5nIGVudGVyaW5nLlxuICAgIHZhciBpZCA9IFwiX190cmFuc2l0aW9uLVwiICsgKHRoaXMuX3VpZCkgKyBcIi1cIjtcbiAgICBjaGlsZC5rZXkgPSBjaGlsZC5rZXkgPT0gbnVsbFxuICAgICAgPyBjaGlsZC5pc0NvbW1lbnRcbiAgICAgICAgPyBpZCArICdjb21tZW50J1xuICAgICAgICA6IGlkICsgY2hpbGQudGFnXG4gICAgICA6IGlzUHJpbWl0aXZlKGNoaWxkLmtleSlcbiAgICAgICAgPyAoU3RyaW5nKGNoaWxkLmtleSkuaW5kZXhPZihpZCkgPT09IDAgPyBjaGlsZC5rZXkgOiBpZCArIGNoaWxkLmtleSlcbiAgICAgICAgOiBjaGlsZC5rZXk7XG5cbiAgICB2YXIgZGF0YSA9IChjaGlsZC5kYXRhIHx8IChjaGlsZC5kYXRhID0ge30pKS50cmFuc2l0aW9uID0gZXh0cmFjdFRyYW5zaXRpb25EYXRhKHRoaXMpO1xuICAgIHZhciBvbGRSYXdDaGlsZCA9IHRoaXMuX3Zub2RlO1xuICAgIHZhciBvbGRDaGlsZCA9IGdldFJlYWxDaGlsZChvbGRSYXdDaGlsZCk7XG5cbiAgICAvLyBtYXJrIHYtc2hvd1xuICAgIC8vIHNvIHRoYXQgdGhlIHRyYW5zaXRpb24gbW9kdWxlIGNhbiBoYW5kIG92ZXIgdGhlIGNvbnRyb2wgdG8gdGhlIGRpcmVjdGl2ZVxuICAgIGlmIChjaGlsZC5kYXRhLmRpcmVjdGl2ZXMgJiYgY2hpbGQuZGF0YS5kaXJlY3RpdmVzLnNvbWUoaXNWU2hvd0RpcmVjdGl2ZSkpIHtcbiAgICAgIGNoaWxkLmRhdGEuc2hvdyA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKFxuICAgICAgb2xkQ2hpbGQgJiZcbiAgICAgIG9sZENoaWxkLmRhdGEgJiZcbiAgICAgICFpc1NhbWVDaGlsZChjaGlsZCwgb2xkQ2hpbGQpICYmXG4gICAgICAhaXNBc3luY1BsYWNlaG9sZGVyKG9sZENoaWxkKSAmJlxuICAgICAgLy8gIzY2ODcgY29tcG9uZW50IHJvb3QgaXMgYSBjb21tZW50IG5vZGVcbiAgICAgICEob2xkQ2hpbGQuY29tcG9uZW50SW5zdGFuY2UgJiYgb2xkQ2hpbGQuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlLmlzQ29tbWVudClcbiAgICApIHtcbiAgICAgIC8vIHJlcGxhY2Ugb2xkIGNoaWxkIHRyYW5zaXRpb24gZGF0YSB3aXRoIGZyZXNoIG9uZVxuICAgICAgLy8gaW1wb3J0YW50IGZvciBkeW5hbWljIHRyYW5zaXRpb25zIVxuICAgICAgdmFyIG9sZERhdGEgPSBvbGRDaGlsZC5kYXRhLnRyYW5zaXRpb24gPSBleHRlbmQoe30sIGRhdGEpO1xuICAgICAgLy8gaGFuZGxlIHRyYW5zaXRpb24gbW9kZVxuICAgICAgaWYgKG1vZGUgPT09ICdvdXQtaW4nKSB7XG4gICAgICAgIC8vIHJldHVybiBwbGFjZWhvbGRlciBub2RlIGFuZCBxdWV1ZSB1cGRhdGUgd2hlbiBsZWF2ZSBmaW5pc2hlc1xuICAgICAgICB0aGlzLl9sZWF2aW5nID0gdHJ1ZTtcbiAgICAgICAgbWVyZ2VWTm9kZUhvb2sob2xkRGF0YSwgJ2FmdGVyTGVhdmUnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdGhpcyQxLl9sZWF2aW5nID0gZmFsc2U7XG4gICAgICAgICAgdGhpcyQxLiRmb3JjZVVwZGF0ZSgpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHBsYWNlaG9sZGVyKGgsIHJhd0NoaWxkKVxuICAgICAgfSBlbHNlIGlmIChtb2RlID09PSAnaW4tb3V0Jykge1xuICAgICAgICBpZiAoaXNBc3luY1BsYWNlaG9sZGVyKGNoaWxkKSkge1xuICAgICAgICAgIHJldHVybiBvbGRSYXdDaGlsZFxuICAgICAgICB9XG4gICAgICAgIHZhciBkZWxheWVkTGVhdmU7XG4gICAgICAgIHZhciBwZXJmb3JtTGVhdmUgPSBmdW5jdGlvbiAoKSB7IGRlbGF5ZWRMZWF2ZSgpOyB9O1xuICAgICAgICBtZXJnZVZOb2RlSG9vayhkYXRhLCAnYWZ0ZXJFbnRlcicsIHBlcmZvcm1MZWF2ZSk7XG4gICAgICAgIG1lcmdlVk5vZGVIb29rKGRhdGEsICdlbnRlckNhbmNlbGxlZCcsIHBlcmZvcm1MZWF2ZSk7XG4gICAgICAgIG1lcmdlVk5vZGVIb29rKG9sZERhdGEsICdkZWxheUxlYXZlJywgZnVuY3Rpb24gKGxlYXZlKSB7IGRlbGF5ZWRMZWF2ZSA9IGxlYXZlOyB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmF3Q2hpbGRcbiAgfVxufTtcblxuLyogICovXG5cbnZhciBwcm9wcyA9IGV4dGVuZCh7XG4gIHRhZzogU3RyaW5nLFxuICBtb3ZlQ2xhc3M6IFN0cmluZ1xufSwgdHJhbnNpdGlvblByb3BzKTtcblxuZGVsZXRlIHByb3BzLm1vZGU7XG5cbnZhciBUcmFuc2l0aW9uR3JvdXAgPSB7XG4gIHByb3BzOiBwcm9wcyxcblxuICBiZWZvcmVNb3VudDogZnVuY3Rpb24gYmVmb3JlTW91bnQgKCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgdmFyIHVwZGF0ZSA9IHRoaXMuX3VwZGF0ZTtcbiAgICB0aGlzLl91cGRhdGUgPSBmdW5jdGlvbiAodm5vZGUsIGh5ZHJhdGluZykge1xuICAgICAgdmFyIHJlc3RvcmVBY3RpdmVJbnN0YW5jZSA9IHNldEFjdGl2ZUluc3RhbmNlKHRoaXMkMSk7XG4gICAgICAvLyBmb3JjZSByZW1vdmluZyBwYXNzXG4gICAgICB0aGlzJDEuX19wYXRjaF9fKFxuICAgICAgICB0aGlzJDEuX3Zub2RlLFxuICAgICAgICB0aGlzJDEua2VwdCxcbiAgICAgICAgZmFsc2UsIC8vIGh5ZHJhdGluZ1xuICAgICAgICB0cnVlIC8vIHJlbW92ZU9ubHkgKCFpbXBvcnRhbnQsIGF2b2lkcyB1bm5lY2Vzc2FyeSBtb3ZlcylcbiAgICAgICk7XG4gICAgICB0aGlzJDEuX3Zub2RlID0gdGhpcyQxLmtlcHQ7XG4gICAgICByZXN0b3JlQWN0aXZlSW5zdGFuY2UoKTtcbiAgICAgIHVwZGF0ZS5jYWxsKHRoaXMkMSwgdm5vZGUsIGh5ZHJhdGluZyk7XG4gICAgfTtcbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlciAoaCkge1xuICAgIHZhciB0YWcgPSB0aGlzLnRhZyB8fCB0aGlzLiR2bm9kZS5kYXRhLnRhZyB8fCAnc3Bhbic7XG4gICAgdmFyIG1hcCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdmFyIHByZXZDaGlsZHJlbiA9IHRoaXMucHJldkNoaWxkcmVuID0gdGhpcy5jaGlsZHJlbjtcbiAgICB2YXIgcmF3Q2hpbGRyZW4gPSB0aGlzLiRzbG90cy5kZWZhdWx0IHx8IFtdO1xuICAgIHZhciBjaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW4gPSBbXTtcbiAgICB2YXIgdHJhbnNpdGlvbkRhdGEgPSBleHRyYWN0VHJhbnNpdGlvbkRhdGEodGhpcyk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJhd0NoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgYyA9IHJhd0NoaWxkcmVuW2ldO1xuICAgICAgaWYgKGMudGFnKSB7XG4gICAgICAgIGlmIChjLmtleSAhPSBudWxsICYmIFN0cmluZyhjLmtleSkuaW5kZXhPZignX192bGlzdCcpICE9PSAwKSB7XG4gICAgICAgICAgY2hpbGRyZW4ucHVzaChjKTtcbiAgICAgICAgICBtYXBbYy5rZXldID0gY1xuICAgICAgICAgIDsoYy5kYXRhIHx8IChjLmRhdGEgPSB7fSkpLnRyYW5zaXRpb24gPSB0cmFuc2l0aW9uRGF0YTtcbiAgICAgICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgdmFyIG9wdHMgPSBjLmNvbXBvbmVudE9wdGlvbnM7XG4gICAgICAgICAgdmFyIG5hbWUgPSBvcHRzID8gKG9wdHMuQ3Rvci5vcHRpb25zLm5hbWUgfHwgb3B0cy50YWcgfHwgJycpIDogYy50YWc7XG4gICAgICAgICAgd2FybigoXCI8dHJhbnNpdGlvbi1ncm91cD4gY2hpbGRyZW4gbXVzdCBiZSBrZXllZDogPFwiICsgbmFtZSArIFwiPlwiKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocHJldkNoaWxkcmVuKSB7XG4gICAgICB2YXIga2VwdCA9IFtdO1xuICAgICAgdmFyIHJlbW92ZWQgPSBbXTtcbiAgICAgIGZvciAodmFyIGkkMSA9IDA7IGkkMSA8IHByZXZDaGlsZHJlbi5sZW5ndGg7IGkkMSsrKSB7XG4gICAgICAgIHZhciBjJDEgPSBwcmV2Q2hpbGRyZW5baSQxXTtcbiAgICAgICAgYyQxLmRhdGEudHJhbnNpdGlvbiA9IHRyYW5zaXRpb25EYXRhO1xuICAgICAgICBjJDEuZGF0YS5wb3MgPSBjJDEuZWxtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICBpZiAobWFwW2MkMS5rZXldKSB7XG4gICAgICAgICAga2VwdC5wdXNoKGMkMSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVtb3ZlZC5wdXNoKGMkMSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMua2VwdCA9IGgodGFnLCBudWxsLCBrZXB0KTtcbiAgICAgIHRoaXMucmVtb3ZlZCA9IHJlbW92ZWQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIGgodGFnLCBudWxsLCBjaGlsZHJlbilcbiAgfSxcblxuICB1cGRhdGVkOiBmdW5jdGlvbiB1cGRhdGVkICgpIHtcbiAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLnByZXZDaGlsZHJlbjtcbiAgICB2YXIgbW92ZUNsYXNzID0gdGhpcy5tb3ZlQ2xhc3MgfHwgKCh0aGlzLm5hbWUgfHwgJ3YnKSArICctbW92ZScpO1xuICAgIGlmICghY2hpbGRyZW4ubGVuZ3RoIHx8ICF0aGlzLmhhc01vdmUoY2hpbGRyZW5bMF0uZWxtLCBtb3ZlQ2xhc3MpKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvLyB3ZSBkaXZpZGUgdGhlIHdvcmsgaW50byB0aHJlZSBsb29wcyB0byBhdm9pZCBtaXhpbmcgRE9NIHJlYWRzIGFuZCB3cml0ZXNcbiAgICAvLyBpbiBlYWNoIGl0ZXJhdGlvbiAtIHdoaWNoIGhlbHBzIHByZXZlbnQgbGF5b3V0IHRocmFzaGluZy5cbiAgICBjaGlsZHJlbi5mb3JFYWNoKGNhbGxQZW5kaW5nQ2JzKTtcbiAgICBjaGlsZHJlbi5mb3JFYWNoKHJlY29yZFBvc2l0aW9uKTtcbiAgICBjaGlsZHJlbi5mb3JFYWNoKGFwcGx5VHJhbnNsYXRpb24pO1xuXG4gICAgLy8gZm9yY2UgcmVmbG93IHRvIHB1dCBldmVyeXRoaW5nIGluIHBvc2l0aW9uXG4gICAgLy8gYXNzaWduIHRvIHRoaXMgdG8gYXZvaWQgYmVpbmcgcmVtb3ZlZCBpbiB0cmVlLXNoYWtpbmdcbiAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICB0aGlzLl9yZWZsb3cgPSBkb2N1bWVudC5ib2R5Lm9mZnNldEhlaWdodDtcblxuICAgIGNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24gKGMpIHtcbiAgICAgIGlmIChjLmRhdGEubW92ZWQpIHtcbiAgICAgICAgdmFyIGVsID0gYy5lbG07XG4gICAgICAgIHZhciBzID0gZWwuc3R5bGU7XG4gICAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgbW92ZUNsYXNzKTtcbiAgICAgICAgcy50cmFuc2Zvcm0gPSBzLldlYmtpdFRyYW5zZm9ybSA9IHMudHJhbnNpdGlvbkR1cmF0aW9uID0gJyc7XG4gICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIodHJhbnNpdGlvbkVuZEV2ZW50LCBlbC5fbW92ZUNiID0gZnVuY3Rpb24gY2IgKGUpIHtcbiAgICAgICAgICBpZiAoZSAmJiBlLnRhcmdldCAhPT0gZWwpIHtcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIWUgfHwgL3RyYW5zZm9ybSQvLnRlc3QoZS5wcm9wZXJ0eU5hbWUpKSB7XG4gICAgICAgICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKHRyYW5zaXRpb25FbmRFdmVudCwgY2IpO1xuICAgICAgICAgICAgZWwuX21vdmVDYiA9IG51bGw7XG4gICAgICAgICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIG1vdmVDbGFzcyk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcblxuICBtZXRob2RzOiB7XG4gICAgaGFzTW92ZTogZnVuY3Rpb24gaGFzTW92ZSAoZWwsIG1vdmVDbGFzcykge1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICBpZiAoIWhhc1RyYW5zaXRpb24pIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIGlmICh0aGlzLl9oYXNNb3ZlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9oYXNNb3ZlXG4gICAgICB9XG4gICAgICAvLyBEZXRlY3Qgd2hldGhlciBhbiBlbGVtZW50IHdpdGggdGhlIG1vdmUgY2xhc3MgYXBwbGllZCBoYXNcbiAgICAgIC8vIENTUyB0cmFuc2l0aW9ucy4gU2luY2UgdGhlIGVsZW1lbnQgbWF5IGJlIGluc2lkZSBhbiBlbnRlcmluZ1xuICAgICAgLy8gdHJhbnNpdGlvbiBhdCB0aGlzIHZlcnkgbW9tZW50LCB3ZSBtYWtlIGEgY2xvbmUgb2YgaXQgYW5kIHJlbW92ZVxuICAgICAgLy8gYWxsIG90aGVyIHRyYW5zaXRpb24gY2xhc3NlcyBhcHBsaWVkIHRvIGVuc3VyZSBvbmx5IHRoZSBtb3ZlIGNsYXNzXG4gICAgICAvLyBpcyBhcHBsaWVkLlxuICAgICAgdmFyIGNsb25lID0gZWwuY2xvbmVOb2RlKCk7XG4gICAgICBpZiAoZWwuX3RyYW5zaXRpb25DbGFzc2VzKSB7XG4gICAgICAgIGVsLl90cmFuc2l0aW9uQ2xhc3Nlcy5mb3JFYWNoKGZ1bmN0aW9uIChjbHMpIHsgcmVtb3ZlQ2xhc3MoY2xvbmUsIGNscyk7IH0pO1xuICAgICAgfVxuICAgICAgYWRkQ2xhc3MoY2xvbmUsIG1vdmVDbGFzcyk7XG4gICAgICBjbG9uZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgdGhpcy4kZWwuYXBwZW5kQ2hpbGQoY2xvbmUpO1xuICAgICAgdmFyIGluZm8gPSBnZXRUcmFuc2l0aW9uSW5mbyhjbG9uZSk7XG4gICAgICB0aGlzLiRlbC5yZW1vdmVDaGlsZChjbG9uZSk7XG4gICAgICByZXR1cm4gKHRoaXMuX2hhc01vdmUgPSBpbmZvLmhhc1RyYW5zZm9ybSlcbiAgICB9XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGNhbGxQZW5kaW5nQ2JzIChjKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoYy5lbG0uX21vdmVDYikge1xuICAgIGMuZWxtLl9tb3ZlQ2IoKTtcbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGMuZWxtLl9lbnRlckNiKSB7XG4gICAgYy5lbG0uX2VudGVyQ2IoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZWNvcmRQb3NpdGlvbiAoYykge1xuICBjLmRhdGEubmV3UG9zID0gYy5lbG0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG59XG5cbmZ1bmN0aW9uIGFwcGx5VHJhbnNsYXRpb24gKGMpIHtcbiAgdmFyIG9sZFBvcyA9IGMuZGF0YS5wb3M7XG4gIHZhciBuZXdQb3MgPSBjLmRhdGEubmV3UG9zO1xuICB2YXIgZHggPSBvbGRQb3MubGVmdCAtIG5ld1Bvcy5sZWZ0O1xuICB2YXIgZHkgPSBvbGRQb3MudG9wIC0gbmV3UG9zLnRvcDtcbiAgaWYgKGR4IHx8IGR5KSB7XG4gICAgYy5kYXRhLm1vdmVkID0gdHJ1ZTtcbiAgICB2YXIgcyA9IGMuZWxtLnN0eWxlO1xuICAgIHMudHJhbnNmb3JtID0gcy5XZWJraXRUcmFuc2Zvcm0gPSBcInRyYW5zbGF0ZShcIiArIGR4ICsgXCJweCxcIiArIGR5ICsgXCJweClcIjtcbiAgICBzLnRyYW5zaXRpb25EdXJhdGlvbiA9ICcwcyc7XG4gIH1cbn1cblxudmFyIHBsYXRmb3JtQ29tcG9uZW50cyA9IHtcbiAgVHJhbnNpdGlvbjogVHJhbnNpdGlvbixcbiAgVHJhbnNpdGlvbkdyb3VwOiBUcmFuc2l0aW9uR3JvdXBcbn07XG5cbi8qICAqL1xuXG4vLyBpbnN0YWxsIHBsYXRmb3JtIHNwZWNpZmljIHV0aWxzXG5WdWUuY29uZmlnLm11c3RVc2VQcm9wID0gbXVzdFVzZVByb3A7XG5WdWUuY29uZmlnLmlzUmVzZXJ2ZWRUYWcgPSBpc1Jlc2VydmVkVGFnO1xuVnVlLmNvbmZpZy5pc1Jlc2VydmVkQXR0ciA9IGlzUmVzZXJ2ZWRBdHRyO1xuVnVlLmNvbmZpZy5nZXRUYWdOYW1lc3BhY2UgPSBnZXRUYWdOYW1lc3BhY2U7XG5WdWUuY29uZmlnLmlzVW5rbm93bkVsZW1lbnQgPSBpc1Vua25vd25FbGVtZW50O1xuXG4vLyBpbnN0YWxsIHBsYXRmb3JtIHJ1bnRpbWUgZGlyZWN0aXZlcyAmIGNvbXBvbmVudHNcbmV4dGVuZChWdWUub3B0aW9ucy5kaXJlY3RpdmVzLCBwbGF0Zm9ybURpcmVjdGl2ZXMpO1xuZXh0ZW5kKFZ1ZS5vcHRpb25zLmNvbXBvbmVudHMsIHBsYXRmb3JtQ29tcG9uZW50cyk7XG5cbi8vIGluc3RhbGwgcGxhdGZvcm0gcGF0Y2ggZnVuY3Rpb25cblZ1ZS5wcm90b3R5cGUuX19wYXRjaF9fID0gaW5Ccm93c2VyID8gcGF0Y2ggOiBub29wO1xuXG4vLyBwdWJsaWMgbW91bnQgbWV0aG9kXG5WdWUucHJvdG90eXBlLiRtb3VudCA9IGZ1bmN0aW9uIChcbiAgZWwsXG4gIGh5ZHJhdGluZ1xuKSB7XG4gIGVsID0gZWwgJiYgaW5Ccm93c2VyID8gcXVlcnkoZWwpIDogdW5kZWZpbmVkO1xuICByZXR1cm4gbW91bnRDb21wb25lbnQodGhpcywgZWwsIGh5ZHJhdGluZylcbn07XG5cbi8vIGRldnRvb2xzIGdsb2JhbCBob29rXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuaWYgKGluQnJvd3Nlcikge1xuICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoY29uZmlnLmRldnRvb2xzKSB7XG4gICAgICBpZiAoZGV2dG9vbHMpIHtcbiAgICAgICAgZGV2dG9vbHMuZW1pdCgnaW5pdCcsIFZ1ZSk7XG4gICAgICB9IGVsc2UgaWYgKFxuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAndGVzdCdcbiAgICAgICkge1xuICAgICAgICBjb25zb2xlW2NvbnNvbGUuaW5mbyA/ICdpbmZvJyA6ICdsb2cnXShcbiAgICAgICAgICAnRG93bmxvYWQgdGhlIFZ1ZSBEZXZ0b29scyBleHRlbnNpb24gZm9yIGEgYmV0dGVyIGRldmVsb3BtZW50IGV4cGVyaWVuY2U6XFxuJyArXG4gICAgICAgICAgJ2h0dHBzOi8vZ2l0aHViLmNvbS92dWVqcy92dWUtZGV2dG9vbHMnXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Rlc3QnICYmXG4gICAgICBjb25maWcucHJvZHVjdGlvblRpcCAhPT0gZmFsc2UgJiZcbiAgICAgIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJ1xuICAgICkge1xuICAgICAgY29uc29sZVtjb25zb2xlLmluZm8gPyAnaW5mbycgOiAnbG9nJ10oXG4gICAgICAgIFwiWW91IGFyZSBydW5uaW5nIFZ1ZSBpbiBkZXZlbG9wbWVudCBtb2RlLlxcblwiICtcbiAgICAgICAgXCJNYWtlIHN1cmUgdG8gdHVybiBvbiBwcm9kdWN0aW9uIG1vZGUgd2hlbiBkZXBsb3lpbmcgZm9yIHByb2R1Y3Rpb24uXFxuXCIgK1xuICAgICAgICBcIlNlZSBtb3JlIHRpcHMgYXQgaHR0cHM6Ly92dWVqcy5vcmcvZ3VpZGUvZGVwbG95bWVudC5odG1sXCJcbiAgICAgICk7XG4gICAgfVxuICB9LCAwKTtcbn1cblxuLyogICovXG5cbmV4cG9ydCBkZWZhdWx0IFZ1ZTtcbiIsImZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29uc3RydWN0b3IsIFwicHJvdG90eXBlXCIsIHsgd3JpdGFibGU6IGZhbHNlIH0pOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxuaW1wb3J0IHsgbG9nIH0gZnJvbSBcIi4uL3V0aWxzL2xvZy5qc1wiO1xuXG52YXIgV2ViU29ja2V0Q2xpZW50ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB1cmxcbiAgICovXG4gIGZ1bmN0aW9uIFdlYlNvY2tldENsaWVudCh1cmwpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgV2ViU29ja2V0Q2xpZW50KTtcblxuICAgIHRoaXMuY2xpZW50ID0gbmV3IFdlYlNvY2tldCh1cmwpO1xuXG4gICAgdGhpcy5jbGllbnQub25lcnJvciA9IGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgbG9nLmVycm9yKGVycm9yKTtcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBAcGFyYW0geyguLi5hcmdzOiBhbnlbXSkgPT4gdm9pZH0gZlxuICAgKi9cblxuXG4gIF9jcmVhdGVDbGFzcyhXZWJTb2NrZXRDbGllbnQsIFt7XG4gICAga2V5OiBcIm9uT3BlblwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBvbk9wZW4oZikge1xuICAgICAgdGhpcy5jbGllbnQub25vcGVuID0gZjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHsoLi4uYXJnczogYW55W10pID0+IHZvaWR9IGZcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcIm9uQ2xvc2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gb25DbG9zZShmKSB7XG4gICAgICB0aGlzLmNsaWVudC5vbmNsb3NlID0gZjtcbiAgICB9IC8vIGNhbGwgZiB3aXRoIHRoZSBtZXNzYWdlIHN0cmluZyBhcyB0aGUgZmlyc3QgYXJndW1lbnRcblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7KC4uLmFyZ3M6IGFueVtdKSA9PiB2b2lkfSBmXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJvbk1lc3NhZ2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gb25NZXNzYWdlKGYpIHtcbiAgICAgIHRoaXMuY2xpZW50Lm9ubWVzc2FnZSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGYoZS5kYXRhKTtcbiAgICAgIH07XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFdlYlNvY2tldENsaWVudDtcbn0oKTtcblxuZXhwb3J0IHsgV2ViU29ja2V0Q2xpZW50IGFzIGRlZmF1bHQgfTsiLCIvKioqKioqLyAoZnVuY3Rpb24oKSB7IC8vIHdlYnBhY2tCb290c3RyYXBcbi8qKioqKiovIFx0XCJ1c2Ugc3RyaWN0XCI7XG4vKioqKioqLyBcdHZhciBfX3dlYnBhY2tfbW9kdWxlc19fID0gKHtcblxuLyoqKi8gXCIuL2NsaWVudC1zcmMvbW9kdWxlcy9sb2dnZXIvU3luY0JhaWxIb29rRmFrZS5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL2NsaWVudC1zcmMvbW9kdWxlcy9sb2dnZXIvU3luY0JhaWxIb29rRmFrZS5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUpIHtcblxuXG4vKipcbiAqIENsaWVudCBzdHViIGZvciB0YXBhYmxlIFN5bmNCYWlsSG9va1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY2xpZW50VGFwYWJsZVN5bmNCYWlsSG9vaygpIHtcbiAgcmV0dXJuIHtcbiAgICBjYWxsOiBmdW5jdGlvbiBjYWxsKCkge31cbiAgfTtcbn07XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vbm9kZV9tb2R1bGVzL3dlYnBhY2svbGliL2xvZ2dpbmcvTG9nZ2VyLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vbm9kZV9tb2R1bGVzL3dlYnBhY2svbGliL2xvZ2dpbmcvTG9nZ2VyLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKGZ1bmN0aW9uKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBleHBvcnRzKSB7XG5cbi8qXG5cdE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG5cdEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5cblxuZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikge1xuICByZXR1cm4gX2FycmF5V2l0aG91dEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheShhcnIpIHx8IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIpIHx8IF9ub25JdGVyYWJsZVNwcmVhZCgpO1xufVxuXG5mdW5jdGlvbiBfbm9uSXRlcmFibGVTcHJlYWQoKSB7XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpO1xufVxuXG5mdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7XG4gIGlmICghbykgcmV0dXJuO1xuICBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pO1xuICB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7XG4gIGlmIChuID09PSBcIk9iamVjdFwiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7XG4gIGlmIChuID09PSBcIk1hcFwiIHx8IG4gPT09IFwiU2V0XCIpIHJldHVybiBBcnJheS5mcm9tKG8pO1xuICBpZiAobiA9PT0gXCJBcmd1bWVudHNcIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7XG59XG5cbmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXkoaXRlcikge1xuICBpZiAodHlwZW9mICh0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiID8gU3ltYm9sIDogZnVuY3Rpb24gKGkpIHsgcmV0dXJuIGk7IH0pICE9PSBcInVuZGVmaW5lZFwiICYmIGl0ZXJbKHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgPyBTeW1ib2wgOiBmdW5jdGlvbiAoaSkgeyByZXR1cm4gaTsgfSkuaXRlcmF0b3JdICE9IG51bGwgfHwgaXRlcltcIkBAaXRlcmF0b3JcIl0gIT0gbnVsbCkgcmV0dXJuIEFycmF5LmZyb20oaXRlcik7XG59XG5cbmZ1bmN0aW9uIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KGFycik7XG59XG5cbmZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7XG4gIGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoO1xuXG4gIGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykge1xuICAgIGFycjJbaV0gPSBhcnJbaV07XG4gIH1cblxuICByZXR1cm4gYXJyMjtcbn1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gIH1cbn1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gIGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KENvbnN0cnVjdG9yLCBcInByb3RvdHlwZVwiLCB7XG4gICAgd3JpdGFibGU6IGZhbHNlXG4gIH0pO1xuICByZXR1cm4gQ29uc3RydWN0b3I7XG59XG5cbnZhciBMb2dUeXBlID0gT2JqZWN0LmZyZWV6ZSh7XG4gIGVycm9yOlxuICAvKiogQHR5cGUge1wiZXJyb3JcIn0gKi9cbiAgXCJlcnJvclwiLFxuICAvLyBtZXNzYWdlLCBjIHN0eWxlIGFyZ3VtZW50c1xuICB3YXJuOlxuICAvKiogQHR5cGUge1wid2FyblwifSAqL1xuICBcIndhcm5cIixcbiAgLy8gbWVzc2FnZSwgYyBzdHlsZSBhcmd1bWVudHNcbiAgaW5mbzpcbiAgLyoqIEB0eXBlIHtcImluZm9cIn0gKi9cbiAgXCJpbmZvXCIsXG4gIC8vIG1lc3NhZ2UsIGMgc3R5bGUgYXJndW1lbnRzXG4gIGxvZzpcbiAgLyoqIEB0eXBlIHtcImxvZ1wifSAqL1xuICBcImxvZ1wiLFxuICAvLyBtZXNzYWdlLCBjIHN0eWxlIGFyZ3VtZW50c1xuICBkZWJ1ZzpcbiAgLyoqIEB0eXBlIHtcImRlYnVnXCJ9ICovXG4gIFwiZGVidWdcIixcbiAgLy8gbWVzc2FnZSwgYyBzdHlsZSBhcmd1bWVudHNcbiAgdHJhY2U6XG4gIC8qKiBAdHlwZSB7XCJ0cmFjZVwifSAqL1xuICBcInRyYWNlXCIsXG4gIC8vIG5vIGFyZ3VtZW50c1xuICBncm91cDpcbiAgLyoqIEB0eXBlIHtcImdyb3VwXCJ9ICovXG4gIFwiZ3JvdXBcIixcbiAgLy8gW2xhYmVsXVxuICBncm91cENvbGxhcHNlZDpcbiAgLyoqIEB0eXBlIHtcImdyb3VwQ29sbGFwc2VkXCJ9ICovXG4gIFwiZ3JvdXBDb2xsYXBzZWRcIixcbiAgLy8gW2xhYmVsXVxuICBncm91cEVuZDpcbiAgLyoqIEB0eXBlIHtcImdyb3VwRW5kXCJ9ICovXG4gIFwiZ3JvdXBFbmRcIixcbiAgLy8gW2xhYmVsXVxuICBwcm9maWxlOlxuICAvKiogQHR5cGUge1wicHJvZmlsZVwifSAqL1xuICBcInByb2ZpbGVcIixcbiAgLy8gW3Byb2ZpbGVOYW1lXVxuICBwcm9maWxlRW5kOlxuICAvKiogQHR5cGUge1wicHJvZmlsZUVuZFwifSAqL1xuICBcInByb2ZpbGVFbmRcIixcbiAgLy8gW3Byb2ZpbGVOYW1lXVxuICB0aW1lOlxuICAvKiogQHR5cGUge1widGltZVwifSAqL1xuICBcInRpbWVcIixcbiAgLy8gbmFtZSwgdGltZSBhcyBbc2Vjb25kcywgbmFub3NlY29uZHNdXG4gIGNsZWFyOlxuICAvKiogQHR5cGUge1wiY2xlYXJcIn0gKi9cbiAgXCJjbGVhclwiLFxuICAvLyBubyBhcmd1bWVudHNcbiAgc3RhdHVzOlxuICAvKiogQHR5cGUge1wic3RhdHVzXCJ9ICovXG4gIFwic3RhdHVzXCIgLy8gbWVzc2FnZSwgYXJndW1lbnRzXG5cbn0pO1xuZXhwb3J0cy5Mb2dUeXBlID0gTG9nVHlwZTtcbi8qKiBAdHlwZWRlZiB7dHlwZW9mIExvZ1R5cGVba2V5b2YgdHlwZW9mIExvZ1R5cGVdfSBMb2dUeXBlRW51bSAqL1xuXG52YXIgTE9HX1NZTUJPTCA9ICh0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiID8gU3ltYm9sIDogZnVuY3Rpb24gKGkpIHsgcmV0dXJuIGk7IH0pKFwid2VicGFjayBsb2dnZXIgcmF3IGxvZyBtZXRob2RcIik7XG52YXIgVElNRVJTX1NZTUJPTCA9ICh0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiID8gU3ltYm9sIDogZnVuY3Rpb24gKGkpIHsgcmV0dXJuIGk7IH0pKFwid2VicGFjayBsb2dnZXIgdGltZXNcIik7XG52YXIgVElNRVJTX0FHR1JFR0FURVNfU1lNQk9MID0gKHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgPyBTeW1ib2wgOiBmdW5jdGlvbiAoaSkgeyByZXR1cm4gaTsgfSkoXCJ3ZWJwYWNrIGxvZ2dlciBhZ2dyZWdhdGVkIHRpbWVzXCIpO1xuXG52YXIgV2VicGFja0xvZ2dlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9uKExvZ1R5cGVFbnVtLCBhbnlbXT0pOiB2b2lkfSBsb2cgbG9nIGZ1bmN0aW9uXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb24oc3RyaW5nIHwgZnVuY3Rpb24oKTogc3RyaW5nKTogV2VicGFja0xvZ2dlcn0gZ2V0Q2hpbGRMb2dnZXIgZnVuY3Rpb24gdG8gY3JlYXRlIGNoaWxkIGxvZ2dlclxuICAgKi9cbiAgZnVuY3Rpb24gV2VicGFja0xvZ2dlcihsb2csIGdldENoaWxkTG9nZ2VyKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFdlYnBhY2tMb2dnZXIpO1xuXG4gICAgdGhpc1tMT0dfU1lNQk9MXSA9IGxvZztcbiAgICB0aGlzLmdldENoaWxkTG9nZ2VyID0gZ2V0Q2hpbGRMb2dnZXI7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoV2VicGFja0xvZ2dlciwgW3tcbiAgICBrZXk6IFwiZXJyb3JcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZXJyb3IoKSB7XG4gICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgIH1cblxuICAgICAgdGhpc1tMT0dfU1lNQk9MXShMb2dUeXBlLmVycm9yLCBhcmdzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwid2FyblwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB3YXJuKCkge1xuICAgICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4yKSwgX2tleTIgPSAwOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICAgIGFyZ3NbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICAgIH1cblxuICAgICAgdGhpc1tMT0dfU1lNQk9MXShMb2dUeXBlLndhcm4sIGFyZ3MpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJpbmZvXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGluZm8oKSB7XG4gICAgICBmb3IgKHZhciBfbGVuMyA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjMpLCBfa2V5MyA9IDA7IF9rZXkzIDwgX2xlbjM7IF9rZXkzKyspIHtcbiAgICAgICAgYXJnc1tfa2V5M10gPSBhcmd1bWVudHNbX2tleTNdO1xuICAgICAgfVxuXG4gICAgICB0aGlzW0xPR19TWU1CT0xdKExvZ1R5cGUuaW5mbywgYXJncyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImxvZ1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBsb2coKSB7XG4gICAgICBmb3IgKHZhciBfbGVuNCA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjQpLCBfa2V5NCA9IDA7IF9rZXk0IDwgX2xlbjQ7IF9rZXk0KyspIHtcbiAgICAgICAgYXJnc1tfa2V5NF0gPSBhcmd1bWVudHNbX2tleTRdO1xuICAgICAgfVxuXG4gICAgICB0aGlzW0xPR19TWU1CT0xdKExvZ1R5cGUubG9nLCBhcmdzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZGVidWdcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGVidWcoKSB7XG4gICAgICBmb3IgKHZhciBfbGVuNSA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjUpLCBfa2V5NSA9IDA7IF9rZXk1IDwgX2xlbjU7IF9rZXk1KyspIHtcbiAgICAgICAgYXJnc1tfa2V5NV0gPSBhcmd1bWVudHNbX2tleTVdO1xuICAgICAgfVxuXG4gICAgICB0aGlzW0xPR19TWU1CT0xdKExvZ1R5cGUuZGVidWcsIGFyZ3MpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJhc3NlcnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gYXNzZXJ0KGFzc2VydGlvbikge1xuICAgICAgaWYgKCFhc3NlcnRpb24pIHtcbiAgICAgICAgZm9yICh2YXIgX2xlbjYgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW42ID4gMSA/IF9sZW42IC0gMSA6IDApLCBfa2V5NiA9IDE7IF9rZXk2IDwgX2xlbjY7IF9rZXk2KyspIHtcbiAgICAgICAgICBhcmdzW19rZXk2IC0gMV0gPSBhcmd1bWVudHNbX2tleTZdO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpc1tMT0dfU1lNQk9MXShMb2dUeXBlLmVycm9yLCBhcmdzKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwidHJhY2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdHJhY2UoKSB7XG4gICAgICB0aGlzW0xPR19TWU1CT0xdKExvZ1R5cGUudHJhY2UsIFtcIlRyYWNlXCJdKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY2xlYXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2xlYXIoKSB7XG4gICAgICB0aGlzW0xPR19TWU1CT0xdKExvZ1R5cGUuY2xlYXIpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzdGF0dXNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc3RhdHVzKCkge1xuICAgICAgZm9yICh2YXIgX2xlbjcgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW43KSwgX2tleTcgPSAwOyBfa2V5NyA8IF9sZW43OyBfa2V5NysrKSB7XG4gICAgICAgIGFyZ3NbX2tleTddID0gYXJndW1lbnRzW19rZXk3XTtcbiAgICAgIH1cblxuICAgICAgdGhpc1tMT0dfU1lNQk9MXShMb2dUeXBlLnN0YXR1cywgYXJncyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdyb3VwXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdyb3VwKCkge1xuICAgICAgZm9yICh2YXIgX2xlbjggPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW44KSwgX2tleTggPSAwOyBfa2V5OCA8IF9sZW44OyBfa2V5OCsrKSB7XG4gICAgICAgIGFyZ3NbX2tleThdID0gYXJndW1lbnRzW19rZXk4XTtcbiAgICAgIH1cblxuICAgICAgdGhpc1tMT0dfU1lNQk9MXShMb2dUeXBlLmdyb3VwLCBhcmdzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ3JvdXBDb2xsYXBzZWRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ3JvdXBDb2xsYXBzZWQoKSB7XG4gICAgICBmb3IgKHZhciBfbGVuOSA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjkpLCBfa2V5OSA9IDA7IF9rZXk5IDwgX2xlbjk7IF9rZXk5KyspIHtcbiAgICAgICAgYXJnc1tfa2V5OV0gPSBhcmd1bWVudHNbX2tleTldO1xuICAgICAgfVxuXG4gICAgICB0aGlzW0xPR19TWU1CT0xdKExvZ1R5cGUuZ3JvdXBDb2xsYXBzZWQsIGFyZ3MpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJncm91cEVuZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBncm91cEVuZCgpIHtcbiAgICAgIGZvciAodmFyIF9sZW4xMCA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjEwKSwgX2tleTEwID0gMDsgX2tleTEwIDwgX2xlbjEwOyBfa2V5MTArKykge1xuICAgICAgICBhcmdzW19rZXkxMF0gPSBhcmd1bWVudHNbX2tleTEwXTtcbiAgICAgIH1cblxuICAgICAgdGhpc1tMT0dfU1lNQk9MXShMb2dUeXBlLmdyb3VwRW5kLCBhcmdzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicHJvZmlsZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwcm9maWxlKGxhYmVsKSB7XG4gICAgICB0aGlzW0xPR19TWU1CT0xdKExvZ1R5cGUucHJvZmlsZSwgW2xhYmVsXSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInByb2ZpbGVFbmRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcHJvZmlsZUVuZChsYWJlbCkge1xuICAgICAgdGhpc1tMT0dfU1lNQk9MXShMb2dUeXBlLnByb2ZpbGVFbmQsIFtsYWJlbF0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJ0aW1lXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRpbWUobGFiZWwpIHtcbiAgICAgIHRoaXNbVElNRVJTX1NZTUJPTF0gPSB0aGlzW1RJTUVSU19TWU1CT0xdIHx8IG5ldyBNYXAoKTtcbiAgICAgIHRoaXNbVElNRVJTX1NZTUJPTF0uc2V0KGxhYmVsLCBwcm9jZXNzLmhydGltZSgpKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwidGltZUxvZ1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0aW1lTG9nKGxhYmVsKSB7XG4gICAgICB2YXIgcHJldiA9IHRoaXNbVElNRVJTX1NZTUJPTF0gJiYgdGhpc1tUSU1FUlNfU1lNQk9MXS5nZXQobGFiZWwpO1xuXG4gICAgICBpZiAoIXByZXYpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gc3VjaCBsYWJlbCAnXCIuY29uY2F0KGxhYmVsLCBcIicgZm9yIFdlYnBhY2tMb2dnZXIudGltZUxvZygpXCIpKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHRpbWUgPSBwcm9jZXNzLmhydGltZShwcmV2KTtcbiAgICAgIHRoaXNbTE9HX1NZTUJPTF0oTG9nVHlwZS50aW1lLCBbbGFiZWxdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkodGltZSkpKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwidGltZUVuZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0aW1lRW5kKGxhYmVsKSB7XG4gICAgICB2YXIgcHJldiA9IHRoaXNbVElNRVJTX1NZTUJPTF0gJiYgdGhpc1tUSU1FUlNfU1lNQk9MXS5nZXQobGFiZWwpO1xuXG4gICAgICBpZiAoIXByZXYpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gc3VjaCBsYWJlbCAnXCIuY29uY2F0KGxhYmVsLCBcIicgZm9yIFdlYnBhY2tMb2dnZXIudGltZUVuZCgpXCIpKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHRpbWUgPSBwcm9jZXNzLmhydGltZShwcmV2KTtcbiAgICAgIHRoaXNbVElNRVJTX1NZTUJPTF0uZGVsZXRlKGxhYmVsKTtcbiAgICAgIHRoaXNbTE9HX1NZTUJPTF0oTG9nVHlwZS50aW1lLCBbbGFiZWxdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkodGltZSkpKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwidGltZUFnZ3JlZ2F0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0aW1lQWdncmVnYXRlKGxhYmVsKSB7XG4gICAgICB2YXIgcHJldiA9IHRoaXNbVElNRVJTX1NZTUJPTF0gJiYgdGhpc1tUSU1FUlNfU1lNQk9MXS5nZXQobGFiZWwpO1xuXG4gICAgICBpZiAoIXByZXYpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gc3VjaCBsYWJlbCAnXCIuY29uY2F0KGxhYmVsLCBcIicgZm9yIFdlYnBhY2tMb2dnZXIudGltZUFnZ3JlZ2F0ZSgpXCIpKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHRpbWUgPSBwcm9jZXNzLmhydGltZShwcmV2KTtcbiAgICAgIHRoaXNbVElNRVJTX1NZTUJPTF0uZGVsZXRlKGxhYmVsKTtcbiAgICAgIHRoaXNbVElNRVJTX0FHR1JFR0FURVNfU1lNQk9MXSA9IHRoaXNbVElNRVJTX0FHR1JFR0FURVNfU1lNQk9MXSB8fCBuZXcgTWFwKCk7XG4gICAgICB2YXIgY3VycmVudCA9IHRoaXNbVElNRVJTX0FHR1JFR0FURVNfU1lNQk9MXS5nZXQobGFiZWwpO1xuXG4gICAgICBpZiAoY3VycmVudCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmICh0aW1lWzFdICsgY3VycmVudFsxXSA+IDFlOSkge1xuICAgICAgICAgIHRpbWVbMF0gKz0gY3VycmVudFswXSArIDE7XG4gICAgICAgICAgdGltZVsxXSA9IHRpbWVbMV0gLSAxZTkgKyBjdXJyZW50WzFdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRpbWVbMF0gKz0gY3VycmVudFswXTtcbiAgICAgICAgICB0aW1lWzFdICs9IGN1cnJlbnRbMV07XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpc1tUSU1FUlNfQUdHUkVHQVRFU19TWU1CT0xdLnNldChsYWJlbCwgdGltZSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInRpbWVBZ2dyZWdhdGVFbmRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdGltZUFnZ3JlZ2F0ZUVuZChsYWJlbCkge1xuICAgICAgaWYgKHRoaXNbVElNRVJTX0FHR1JFR0FURVNfU1lNQk9MXSA9PT0gdW5kZWZpbmVkKSByZXR1cm47XG4gICAgICB2YXIgdGltZSA9IHRoaXNbVElNRVJTX0FHR1JFR0FURVNfU1lNQk9MXS5nZXQobGFiZWwpO1xuICAgICAgaWYgKHRpbWUgPT09IHVuZGVmaW5lZCkgcmV0dXJuO1xuICAgICAgdGhpc1tUSU1FUlNfQUdHUkVHQVRFU19TWU1CT0xdLmRlbGV0ZShsYWJlbCk7XG4gICAgICB0aGlzW0xPR19TWU1CT0xdKExvZ1R5cGUudGltZSwgW2xhYmVsXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KHRpbWUpKSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFdlYnBhY2tMb2dnZXI7XG59KCk7XG5cbmV4cG9ydHMuTG9nZ2VyID0gV2VicGFja0xvZ2dlcjtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9ub2RlX21vZHVsZXMvd2VicGFjay9saWIvbG9nZ2luZy9jcmVhdGVDb25zb2xlTG9nZ2VyLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL25vZGVfbW9kdWxlcy93ZWJwYWNrL2xpYi9sb2dnaW5nL2NyZWF0ZUNvbnNvbGVMb2dnZXIuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbi8qXG5cdE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG5cdEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5cblxuZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikge1xuICByZXR1cm4gX2FycmF5V2l0aG91dEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheShhcnIpIHx8IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIpIHx8IF9ub25JdGVyYWJsZVNwcmVhZCgpO1xufVxuXG5mdW5jdGlvbiBfbm9uSXRlcmFibGVTcHJlYWQoKSB7XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpO1xufVxuXG5mdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7XG4gIGlmICghbykgcmV0dXJuO1xuICBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pO1xuICB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7XG4gIGlmIChuID09PSBcIk9iamVjdFwiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7XG4gIGlmIChuID09PSBcIk1hcFwiIHx8IG4gPT09IFwiU2V0XCIpIHJldHVybiBBcnJheS5mcm9tKG8pO1xuICBpZiAobiA9PT0gXCJBcmd1bWVudHNcIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7XG59XG5cbmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXkoaXRlcikge1xuICBpZiAodHlwZW9mICh0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiID8gU3ltYm9sIDogZnVuY3Rpb24gKGkpIHsgcmV0dXJuIGk7IH0pICE9PSBcInVuZGVmaW5lZFwiICYmIGl0ZXJbKHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgPyBTeW1ib2wgOiBmdW5jdGlvbiAoaSkgeyByZXR1cm4gaTsgfSkuaXRlcmF0b3JdICE9IG51bGwgfHwgaXRlcltcIkBAaXRlcmF0b3JcIl0gIT0gbnVsbCkgcmV0dXJuIEFycmF5LmZyb20oaXRlcik7XG59XG5cbmZ1bmN0aW9uIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KGFycik7XG59XG5cbmZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7XG4gIGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoO1xuXG4gIGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykge1xuICAgIGFycjJbaV0gPSBhcnJbaV07XG4gIH1cblxuICByZXR1cm4gYXJyMjtcbn1cblxudmFyIF9yZXF1aXJlID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9Mb2dnZXIgKi8gXCIuL25vZGVfbW9kdWxlcy93ZWJwYWNrL2xpYi9sb2dnaW5nL0xvZ2dlci5qc1wiKSxcbiAgICBMb2dUeXBlID0gX3JlcXVpcmUuTG9nVHlwZTtcbi8qKiBAdHlwZWRlZiB7aW1wb3J0KFwiLi4vLi4vZGVjbGFyYXRpb25zL1dlYnBhY2tPcHRpb25zXCIpLkZpbHRlckl0ZW1UeXBlc30gRmlsdGVySXRlbVR5cGVzICovXG5cbi8qKiBAdHlwZWRlZiB7aW1wb3J0KFwiLi4vLi4vZGVjbGFyYXRpb25zL1dlYnBhY2tPcHRpb25zXCIpLkZpbHRlclR5cGVzfSBGaWx0ZXJUeXBlcyAqL1xuXG4vKiogQHR5cGVkZWYge2ltcG9ydChcIi4vTG9nZ2VyXCIpLkxvZ1R5cGVFbnVtfSBMb2dUeXBlRW51bSAqL1xuXG4vKiogQHR5cGVkZWYge2Z1bmN0aW9uKHN0cmluZyk6IGJvb2xlYW59IEZpbHRlckZ1bmN0aW9uICovXG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gTG9nZ2VyQ29uc29sZVxuICogQHByb3BlcnR5IHtmdW5jdGlvbigpOiB2b2lkfSBjbGVhclxuICogQHByb3BlcnR5IHtmdW5jdGlvbigpOiB2b2lkfSB0cmFjZVxuICogQHByb3BlcnR5IHsoLi4uYXJnczogYW55W10pID0+IHZvaWR9IGluZm9cbiAqIEBwcm9wZXJ0eSB7KC4uLmFyZ3M6IGFueVtdKSA9PiB2b2lkfSBsb2dcbiAqIEBwcm9wZXJ0eSB7KC4uLmFyZ3M6IGFueVtdKSA9PiB2b2lkfSB3YXJuXG4gKiBAcHJvcGVydHkgeyguLi5hcmdzOiBhbnlbXSkgPT4gdm9pZH0gZXJyb3JcbiAqIEBwcm9wZXJ0eSB7KC4uLmFyZ3M6IGFueVtdKSA9PiB2b2lkPX0gZGVidWdcbiAqIEBwcm9wZXJ0eSB7KC4uLmFyZ3M6IGFueVtdKSA9PiB2b2lkPX0gZ3JvdXBcbiAqIEBwcm9wZXJ0eSB7KC4uLmFyZ3M6IGFueVtdKSA9PiB2b2lkPX0gZ3JvdXBDb2xsYXBzZWRcbiAqIEBwcm9wZXJ0eSB7KC4uLmFyZ3M6IGFueVtdKSA9PiB2b2lkPX0gZ3JvdXBFbmRcbiAqIEBwcm9wZXJ0eSB7KC4uLmFyZ3M6IGFueVtdKSA9PiB2b2lkPX0gc3RhdHVzXG4gKiBAcHJvcGVydHkgeyguLi5hcmdzOiBhbnlbXSkgPT4gdm9pZD19IHByb2ZpbGVcbiAqIEBwcm9wZXJ0eSB7KC4uLmFyZ3M6IGFueVtdKSA9PiB2b2lkPX0gcHJvZmlsZUVuZFxuICogQHByb3BlcnR5IHsoLi4uYXJnczogYW55W10pID0+IHZvaWQ9fSBsb2dUaW1lXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBMb2dnZXJPcHRpb25zXG4gKiBAcHJvcGVydHkge2ZhbHNlfHRydWV8XCJub25lXCJ8XCJlcnJvclwifFwid2FyblwifFwiaW5mb1wifFwibG9nXCJ8XCJ2ZXJib3NlXCJ9IGxldmVsIGxvZ2xldmVsXG4gKiBAcHJvcGVydHkge0ZpbHRlclR5cGVzfGJvb2xlYW59IGRlYnVnIGZpbHRlciBmb3IgZGVidWcgbG9nZ2luZ1xuICogQHByb3BlcnR5IHtMb2dnZXJDb25zb2xlfSBjb25zb2xlIHRoZSBjb25zb2xlIHRvIGxvZyB0b1xuICovXG5cbi8qKlxuICogQHBhcmFtIHtGaWx0ZXJJdGVtVHlwZXN9IGl0ZW0gYW4gaW5wdXQgaXRlbVxuICogQHJldHVybnMge0ZpbHRlckZ1bmN0aW9ufSBmaWx0ZXIgZnVuY3Rpb25cbiAqL1xuXG5cbnZhciBmaWx0ZXJUb0Z1bmN0aW9uID0gZnVuY3Rpb24gZmlsdGVyVG9GdW5jdGlvbihpdGVtKSB7XG4gIGlmICh0eXBlb2YgaXRlbSA9PT0gXCJzdHJpbmdcIikge1xuICAgIHZhciByZWdFeHAgPSBuZXcgUmVnRXhwKFwiW1xcXFxcXFxcL11cIi5jb25jYXQoaXRlbS5yZXBsYWNlKCAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlbGVzcy1lc2NhcGVcbiAgICAvWy1bXFxde30oKSorPy5cXFxcXiR8XS9nLCBcIlxcXFwkJlwiKSwgXCIoW1xcXFxcXFxcL118JHwhfFxcXFw/KVwiKSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChpZGVudCkge1xuICAgICAgcmV0dXJuIHJlZ0V4cC50ZXN0KGlkZW50KTtcbiAgICB9O1xuICB9XG5cbiAgaWYgKGl0ZW0gJiYgdHlwZW9mIGl0ZW0gPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIGl0ZW0udGVzdCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChpZGVudCkge1xuICAgICAgcmV0dXJuIGl0ZW0udGVzdChpZGVudCk7XG4gICAgfTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgaXRlbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgcmV0dXJuIGl0ZW07XG4gIH1cblxuICBpZiAodHlwZW9mIGl0ZW0gPT09IFwiYm9vbGVhblwiKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBpdGVtO1xuICAgIH07XG4gIH1cbn07XG4vKipcbiAqIEBlbnVtIHtudW1iZXJ9XG4gKi9cblxuXG52YXIgTG9nTGV2ZWwgPSB7XG4gIG5vbmU6IDYsXG4gIGZhbHNlOiA2LFxuICBlcnJvcjogNSxcbiAgd2FybjogNCxcbiAgaW5mbzogMyxcbiAgbG9nOiAyLFxuICB0cnVlOiAyLFxuICB2ZXJib3NlOiAxXG59O1xuLyoqXG4gKiBAcGFyYW0ge0xvZ2dlck9wdGlvbnN9IG9wdGlvbnMgb3B0aW9ucyBvYmplY3RcbiAqIEByZXR1cm5zIHtmdW5jdGlvbihzdHJpbmcsIExvZ1R5cGVFbnVtLCBhbnlbXSk6IHZvaWR9IGxvZ2dpbmcgZnVuY3Rpb25cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciBfcmVmJGxldmVsID0gX3JlZi5sZXZlbCxcbiAgICAgIGxldmVsID0gX3JlZiRsZXZlbCA9PT0gdm9pZCAwID8gXCJpbmZvXCIgOiBfcmVmJGxldmVsLFxuICAgICAgX3JlZiRkZWJ1ZyA9IF9yZWYuZGVidWcsXG4gICAgICBkZWJ1ZyA9IF9yZWYkZGVidWcgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZiRkZWJ1ZyxcbiAgICAgIGNvbnNvbGUgPSBfcmVmLmNvbnNvbGU7XG4gIHZhciBkZWJ1Z0ZpbHRlcnMgPSB0eXBlb2YgZGVidWcgPT09IFwiYm9vbGVhblwiID8gW2Z1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZGVidWc7XG4gIH1dIDpcbiAgLyoqIEB0eXBlIHtGaWx0ZXJJdGVtVHlwZXNbXX0gKi9cbiAgW10uY29uY2F0KGRlYnVnKS5tYXAoZmlsdGVyVG9GdW5jdGlvbik7XG4gIC8qKiBAdHlwZSB7bnVtYmVyfSAqL1xuXG4gIHZhciBsb2dsZXZlbCA9IExvZ0xldmVsW1wiXCIuY29uY2F0KGxldmVsKV0gfHwgMDtcbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIG5hbWUgb2YgdGhlIGxvZ2dlclxuICAgKiBAcGFyYW0ge0xvZ1R5cGVFbnVtfSB0eXBlIHR5cGUgb2YgdGhlIGxvZyBlbnRyeVxuICAgKiBAcGFyYW0ge2FueVtdfSBhcmdzIGFyZ3VtZW50cyBvZiB0aGUgbG9nIGVudHJ5XG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cblxuICB2YXIgbG9nZ2VyID0gZnVuY3Rpb24gbG9nZ2VyKG5hbWUsIHR5cGUsIGFyZ3MpIHtcbiAgICB2YXIgbGFiZWxlZEFyZ3MgPSBmdW5jdGlvbiBsYWJlbGVkQXJncygpIHtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KGFyZ3MpKSB7XG4gICAgICAgIGlmIChhcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIGFyZ3NbMF0gPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICByZXR1cm4gW1wiW1wiLmNvbmNhdChuYW1lLCBcIl0gXCIpLmNvbmNhdChhcmdzWzBdKV0uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShhcmdzLnNsaWNlKDEpKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIFtcIltcIi5jb25jYXQobmFtZSwgXCJdXCIpXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KGFyZ3MpKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgIH07XG5cbiAgICB2YXIgZGVidWcgPSBkZWJ1Z0ZpbHRlcnMuc29tZShmdW5jdGlvbiAoZikge1xuICAgICAgcmV0dXJuIGYobmFtZSk7XG4gICAgfSk7XG5cbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgTG9nVHlwZS5kZWJ1ZzpcbiAgICAgICAgaWYgKCFkZWJ1ZykgcmV0dXJuOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm9kZS9uby11bnN1cHBvcnRlZC1mZWF0dXJlcy9ub2RlLWJ1aWx0aW5zXG5cbiAgICAgICAgaWYgKHR5cGVvZiBjb25zb2xlLmRlYnVnID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm9kZS9uby11bnN1cHBvcnRlZC1mZWF0dXJlcy9ub2RlLWJ1aWx0aW5zXG4gICAgICAgICAgY29uc29sZS5kZWJ1Zy5hcHBseShjb25zb2xlLCBfdG9Db25zdW1hYmxlQXJyYXkobGFiZWxlZEFyZ3MoKSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnNvbGUubG9nLmFwcGx5KGNvbnNvbGUsIF90b0NvbnN1bWFibGVBcnJheShsYWJlbGVkQXJncygpKSk7XG4gICAgICAgIH1cblxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBMb2dUeXBlLmxvZzpcbiAgICAgICAgaWYgKCFkZWJ1ZyAmJiBsb2dsZXZlbCA+IExvZ0xldmVsLmxvZykgcmV0dXJuO1xuICAgICAgICBjb25zb2xlLmxvZy5hcHBseShjb25zb2xlLCBfdG9Db25zdW1hYmxlQXJyYXkobGFiZWxlZEFyZ3MoKSkpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBMb2dUeXBlLmluZm86XG4gICAgICAgIGlmICghZGVidWcgJiYgbG9nbGV2ZWwgPiBMb2dMZXZlbC5pbmZvKSByZXR1cm47XG4gICAgICAgIGNvbnNvbGUuaW5mby5hcHBseShjb25zb2xlLCBfdG9Db25zdW1hYmxlQXJyYXkobGFiZWxlZEFyZ3MoKSkpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBMb2dUeXBlLndhcm46XG4gICAgICAgIGlmICghZGVidWcgJiYgbG9nbGV2ZWwgPiBMb2dMZXZlbC53YXJuKSByZXR1cm47XG4gICAgICAgIGNvbnNvbGUud2Fybi5hcHBseShjb25zb2xlLCBfdG9Db25zdW1hYmxlQXJyYXkobGFiZWxlZEFyZ3MoKSkpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBMb2dUeXBlLmVycm9yOlxuICAgICAgICBpZiAoIWRlYnVnICYmIGxvZ2xldmVsID4gTG9nTGV2ZWwuZXJyb3IpIHJldHVybjtcbiAgICAgICAgY29uc29sZS5lcnJvci5hcHBseShjb25zb2xlLCBfdG9Db25zdW1hYmxlQXJyYXkobGFiZWxlZEFyZ3MoKSkpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBMb2dUeXBlLnRyYWNlOlxuICAgICAgICBpZiAoIWRlYnVnKSByZXR1cm47XG4gICAgICAgIGNvbnNvbGUudHJhY2UoKTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgTG9nVHlwZS5ncm91cENvbGxhcHNlZDpcbiAgICAgICAgaWYgKCFkZWJ1ZyAmJiBsb2dsZXZlbCA+IExvZ0xldmVsLmxvZykgcmV0dXJuO1xuXG4gICAgICAgIGlmICghZGVidWcgJiYgbG9nbGV2ZWwgPiBMb2dMZXZlbC52ZXJib3NlKSB7XG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vZGUvbm8tdW5zdXBwb3J0ZWQtZmVhdHVyZXMvbm9kZS1idWlsdGluc1xuICAgICAgICAgIGlmICh0eXBlb2YgY29uc29sZS5ncm91cENvbGxhcHNlZCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm9kZS9uby11bnN1cHBvcnRlZC1mZWF0dXJlcy9ub2RlLWJ1aWx0aW5zXG4gICAgICAgICAgICBjb25zb2xlLmdyb3VwQ29sbGFwc2VkLmFwcGx5KGNvbnNvbGUsIF90b0NvbnN1bWFibGVBcnJheShsYWJlbGVkQXJncygpKSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nLmFwcGx5KGNvbnNvbGUsIF90b0NvbnN1bWFibGVBcnJheShsYWJlbGVkQXJncygpKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgLy8gZmFsbHMgdGhyb3VnaFxuXG4gICAgICBjYXNlIExvZ1R5cGUuZ3JvdXA6XG4gICAgICAgIGlmICghZGVidWcgJiYgbG9nbGV2ZWwgPiBMb2dMZXZlbC5sb2cpIHJldHVybjsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vZGUvbm8tdW5zdXBwb3J0ZWQtZmVhdHVyZXMvbm9kZS1idWlsdGluc1xuXG4gICAgICAgIGlmICh0eXBlb2YgY29uc29sZS5ncm91cCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vZGUvbm8tdW5zdXBwb3J0ZWQtZmVhdHVyZXMvbm9kZS1idWlsdGluc1xuICAgICAgICAgIGNvbnNvbGUuZ3JvdXAuYXBwbHkoY29uc29sZSwgX3RvQ29uc3VtYWJsZUFycmF5KGxhYmVsZWRBcmdzKCkpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zb2xlLmxvZy5hcHBseShjb25zb2xlLCBfdG9Db25zdW1hYmxlQXJyYXkobGFiZWxlZEFyZ3MoKSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgTG9nVHlwZS5ncm91cEVuZDpcbiAgICAgICAgaWYgKCFkZWJ1ZyAmJiBsb2dsZXZlbCA+IExvZ0xldmVsLmxvZykgcmV0dXJuOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm9kZS9uby11bnN1cHBvcnRlZC1mZWF0dXJlcy9ub2RlLWJ1aWx0aW5zXG5cbiAgICAgICAgaWYgKHR5cGVvZiBjb25zb2xlLmdyb3VwRW5kID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm9kZS9uby11bnN1cHBvcnRlZC1mZWF0dXJlcy9ub2RlLWJ1aWx0aW5zXG4gICAgICAgICAgY29uc29sZS5ncm91cEVuZCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgTG9nVHlwZS50aW1lOlxuICAgICAgICB7XG4gICAgICAgICAgaWYgKCFkZWJ1ZyAmJiBsb2dsZXZlbCA+IExvZ0xldmVsLmxvZykgcmV0dXJuO1xuICAgICAgICAgIHZhciBtcyA9IGFyZ3NbMV0gKiAxMDAwICsgYXJnc1syXSAvIDEwMDAwMDA7XG4gICAgICAgICAgdmFyIG1zZyA9IFwiW1wiLmNvbmNhdChuYW1lLCBcIl0gXCIpLmNvbmNhdChhcmdzWzBdLCBcIjogXCIpLmNvbmNhdChtcywgXCIgbXNcIik7XG5cbiAgICAgICAgICBpZiAodHlwZW9mIGNvbnNvbGUubG9nVGltZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZ1RpbWUobXNnKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS5sb2cobXNnKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICBjYXNlIExvZ1R5cGUucHJvZmlsZTpcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vZGUvbm8tdW5zdXBwb3J0ZWQtZmVhdHVyZXMvbm9kZS1idWlsdGluc1xuICAgICAgICBpZiAodHlwZW9mIGNvbnNvbGUucHJvZmlsZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vZGUvbm8tdW5zdXBwb3J0ZWQtZmVhdHVyZXMvbm9kZS1idWlsdGluc1xuICAgICAgICAgIGNvbnNvbGUucHJvZmlsZS5hcHBseShjb25zb2xlLCBfdG9Db25zdW1hYmxlQXJyYXkobGFiZWxlZEFyZ3MoKSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgTG9nVHlwZS5wcm9maWxlRW5kOlxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm9kZS9uby11bnN1cHBvcnRlZC1mZWF0dXJlcy9ub2RlLWJ1aWx0aW5zXG4gICAgICAgIGlmICh0eXBlb2YgY29uc29sZS5wcm9maWxlRW5kID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm9kZS9uby11bnN1cHBvcnRlZC1mZWF0dXJlcy9ub2RlLWJ1aWx0aW5zXG4gICAgICAgICAgY29uc29sZS5wcm9maWxlRW5kLmFwcGx5KGNvbnNvbGUsIF90b0NvbnN1bWFibGVBcnJheShsYWJlbGVkQXJncygpKSk7XG4gICAgICAgIH1cblxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBMb2dUeXBlLmNsZWFyOlxuICAgICAgICBpZiAoIWRlYnVnICYmIGxvZ2xldmVsID4gTG9nTGV2ZWwubG9nKSByZXR1cm47IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBub2RlL25vLXVuc3VwcG9ydGVkLWZlYXR1cmVzL25vZGUtYnVpbHRpbnNcblxuICAgICAgICBpZiAodHlwZW9mIGNvbnNvbGUuY2xlYXIgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBub2RlL25vLXVuc3VwcG9ydGVkLWZlYXR1cmVzL25vZGUtYnVpbHRpbnNcbiAgICAgICAgICBjb25zb2xlLmNsZWFyKCk7XG4gICAgICAgIH1cblxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBMb2dUeXBlLnN0YXR1czpcbiAgICAgICAgaWYgKCFkZWJ1ZyAmJiBsb2dsZXZlbCA+IExvZ0xldmVsLmluZm8pIHJldHVybjtcblxuICAgICAgICBpZiAodHlwZW9mIGNvbnNvbGUuc3RhdHVzID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICBpZiAoYXJncy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGNvbnNvbGUuc3RhdHVzKCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUuc3RhdHVzLmFwcGx5KGNvbnNvbGUsIF90b0NvbnN1bWFibGVBcnJheShsYWJlbGVkQXJncygpKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChhcmdzLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgICAgY29uc29sZS5pbmZvLmFwcGx5KGNvbnNvbGUsIF90b0NvbnN1bWFibGVBcnJheShsYWJlbGVkQXJncygpKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlVuZXhwZWN0ZWQgTG9nVHlwZSBcIi5jb25jYXQodHlwZSkpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gbG9nZ2VyO1xufTtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9ub2RlX21vZHVsZXMvd2VicGFjay9saWIvbG9nZ2luZy9ydW50aW1lLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL25vZGVfbW9kdWxlcy93ZWJwYWNrL2xpYi9sb2dnaW5nL3J1bnRpbWUuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKGZ1bmN0aW9uKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbi8qXG5cdE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG5cdEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5cblxuZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcblxuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxudmFyIFN5bmNCYWlsSG9vayA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIHRhcGFibGUvbGliL1N5bmNCYWlsSG9vayAqLyBcIi4vY2xpZW50LXNyYy9tb2R1bGVzL2xvZ2dlci9TeW5jQmFpbEhvb2tGYWtlLmpzXCIpO1xuXG52YXIgX3JlcXVpcmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL0xvZ2dlciAqLyBcIi4vbm9kZV9tb2R1bGVzL3dlYnBhY2svbGliL2xvZ2dpbmcvTG9nZ2VyLmpzXCIpLFxuICAgIExvZ2dlciA9IF9yZXF1aXJlLkxvZ2dlcjtcblxudmFyIGNyZWF0ZUNvbnNvbGVMb2dnZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL2NyZWF0ZUNvbnNvbGVMb2dnZXIgKi8gXCIuL25vZGVfbW9kdWxlcy93ZWJwYWNrL2xpYi9sb2dnaW5nL2NyZWF0ZUNvbnNvbGVMb2dnZXIuanNcIik7XG4vKiogQHR5cGUge2NyZWF0ZUNvbnNvbGVMb2dnZXIuTG9nZ2VyT3B0aW9uc30gKi9cblxuXG52YXIgY3VycmVudERlZmF1bHRMb2dnZXJPcHRpb25zID0ge1xuICBsZXZlbDogXCJpbmZvXCIsXG4gIGRlYnVnOiBmYWxzZSxcbiAgY29uc29sZTogY29uc29sZVxufTtcbnZhciBjdXJyZW50RGVmYXVsdExvZ2dlciA9IGNyZWF0ZUNvbnNvbGVMb2dnZXIoY3VycmVudERlZmF1bHRMb2dnZXJPcHRpb25zKTtcbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgbmFtZSBvZiB0aGUgbG9nZ2VyXG4gKiBAcmV0dXJucyB7TG9nZ2VyfSBhIGxvZ2dlclxuICovXG5cbmV4cG9ydHMuZ2V0TG9nZ2VyID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIG5ldyBMb2dnZXIoZnVuY3Rpb24gKHR5cGUsIGFyZ3MpIHtcbiAgICBpZiAoZXhwb3J0cy5ob29rcy5sb2cuY2FsbChuYW1lLCB0eXBlLCBhcmdzKSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBjdXJyZW50RGVmYXVsdExvZ2dlcihuYW1lLCB0eXBlLCBhcmdzKTtcbiAgICB9XG4gIH0sIGZ1bmN0aW9uIChjaGlsZE5hbWUpIHtcbiAgICByZXR1cm4gZXhwb3J0cy5nZXRMb2dnZXIoXCJcIi5jb25jYXQobmFtZSwgXCIvXCIpLmNvbmNhdChjaGlsZE5hbWUpKTtcbiAgfSk7XG59O1xuLyoqXG4gKiBAcGFyYW0ge2NyZWF0ZUNvbnNvbGVMb2dnZXIuTG9nZ2VyT3B0aW9uc30gb3B0aW9ucyBuZXcgb3B0aW9ucywgbWVyZ2Ugd2l0aCBvbGQgb3B0aW9uc1xuICogQHJldHVybnMge3ZvaWR9XG4gKi9cblxuXG5leHBvcnRzLmNvbmZpZ3VyZURlZmF1bHRMb2dnZXIgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICBfZXh0ZW5kcyhjdXJyZW50RGVmYXVsdExvZ2dlck9wdGlvbnMsIG9wdGlvbnMpO1xuXG4gIGN1cnJlbnREZWZhdWx0TG9nZ2VyID0gY3JlYXRlQ29uc29sZUxvZ2dlcihjdXJyZW50RGVmYXVsdExvZ2dlck9wdGlvbnMpO1xufTtcblxuZXhwb3J0cy5ob29rcyA9IHtcbiAgbG9nOiBuZXcgU3luY0JhaWxIb29rKFtcIm9yaWdpblwiLCBcInR5cGVcIiwgXCJhcmdzXCJdKVxufTtcblxuLyoqKi8gfSlcblxuLyoqKioqKi8gXHR9KTtcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqKioqLyBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0dmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuLyoqKioqKi8gXHRcbi8qKioqKiovIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbi8qKioqKiovIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuLyoqKioqKi8gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuLyoqKioqKi8gXHRcdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuLyoqKioqKi8gXHRcdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuLyoqKioqKi8gXHRcdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuLyoqKioqKi8gXHRcdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuLyoqKioqKi8gXHRcdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuLyoqKioqKi8gXHRcdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcbi8qKioqKiovIFx0XHRcdGV4cG9ydHM6IHt9XG4vKioqKioqLyBcdFx0fTtcbi8qKioqKiovIFx0XG4vKioqKioqLyBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4vKioqKioqLyBcdFx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG4vKioqKioqLyBcdFxuLyoqKioqKi8gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4vKioqKioqLyBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuLyoqKioqKi8gXHR9XG4vKioqKioqLyBcdFxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKiovIFx0Lyogd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzICovXG4vKioqKioqLyBcdCFmdW5jdGlvbigpIHtcbi8qKioqKiovIFx0XHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG4vKioqKioqLyBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgZGVmaW5pdGlvbikge1xuLyoqKioqKi8gXHRcdFx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuLyoqKioqKi8gXHRcdFx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcbi8qKioqKiovIFx0XHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuLyoqKioqKi8gXHRcdFx0XHR9XG4vKioqKioqLyBcdFx0XHR9XG4vKioqKioqLyBcdFx0fTtcbi8qKioqKiovIFx0fSgpO1xuLyoqKioqKi8gXHRcbi8qKioqKiovIFx0Lyogd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCAqL1xuLyoqKioqKi8gXHQhZnVuY3Rpb24oKSB7XG4vKioqKioqLyBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqLCBwcm9wKSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKTsgfVxuLyoqKioqKi8gXHR9KCk7XG4vKioqKioqLyBcdFxuLyoqKioqKi8gXHQvKiB3ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0ICovXG4vKioqKioqLyBcdCFmdW5jdGlvbigpIHtcbi8qKioqKiovIFx0XHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4vKioqKioqLyBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuLyoqKioqKi8gXHRcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4vKioqKioqLyBcdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuLyoqKioqKi8gXHRcdFx0fVxuLyoqKioqKi8gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi8gXHR9KCk7XG4vKioqKioqLyBcdFxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fID0ge307XG4vLyBUaGlzIGVudHJ5IG5lZWQgdG8gYmUgd3JhcHBlZCBpbiBhbiBJSUZFIGJlY2F1c2UgaXQgbmVlZCB0byBiZSBpc29sYXRlZCBhZ2FpbnN0IG90aGVyIG1vZHVsZXMgaW4gdGhlIGNodW5rLlxuIWZ1bmN0aW9uKCkge1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9jbGllbnQtc3JjL21vZHVsZXMvbG9nZ2VyL2luZGV4LmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcbi8qIGhhcm1vbnkgZXhwb3J0ICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCB7XG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiZGVmYXVsdFwiOiBmdW5jdGlvbigpIHsgcmV0dXJuIC8qIHJlZXhwb3J0IGRlZmF1bHQgZXhwb3J0IGZyb20gbmFtZWQgbW9kdWxlICovIHdlYnBhY2tfbGliX2xvZ2dpbmdfcnVudGltZV9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fOyB9XG4vKiBoYXJtb255IGV4cG9ydCAqLyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciB3ZWJwYWNrX2xpYl9sb2dnaW5nX3J1bnRpbWVfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIHdlYnBhY2svbGliL2xvZ2dpbmcvcnVudGltZS5qcyAqLyBcIi4vbm9kZV9tb2R1bGVzL3dlYnBhY2svbGliL2xvZ2dpbmcvcnVudGltZS5qc1wiKTtcblxufSgpO1xudmFyIF9fd2VicGFja19leHBvcnRfdGFyZ2V0X18gPSBleHBvcnRzO1xuZm9yKHZhciBpIGluIF9fd2VicGFja19leHBvcnRzX18pIF9fd2VicGFja19leHBvcnRfdGFyZ2V0X19baV0gPSBfX3dlYnBhY2tfZXhwb3J0c19fW2ldO1xuaWYoX193ZWJwYWNrX2V4cG9ydHNfXy5fX2VzTW9kdWxlKSBPYmplY3QuZGVmaW5lUHJvcGVydHkoX193ZWJwYWNrX2V4cG9ydF90YXJnZXRfXywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vKioqKioqLyB9KSgpXG47IiwiLyoqKioqKi8gKGZ1bmN0aW9uKCkgeyAvLyB3ZWJwYWNrQm9vdHN0cmFwXG4vKioqKioqLyBcdFwidXNlIHN0cmljdFwiO1xuLyoqKioqKi8gXHR2YXIgX193ZWJwYWNrX21vZHVsZXNfXyA9ICh7XG5cbi8qKiovIFwiLi9ub2RlX21vZHVsZXMvc3RyaXAtYW5zaS9pbmRleC5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vbm9kZV9tb2R1bGVzL3N0cmlwLWFuc2kvaW5kZXguanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovIChmdW5jdGlvbihfX3VudXNlZF93ZWJwYWNrX19fd2VicGFja19tb2R1bGVfXywgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XG4vKiBoYXJtb255IGV4cG9ydCAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywge1xuLyogaGFybW9ueSBleHBvcnQgKi8gICBcImRlZmF1bHRcIjogZnVuY3Rpb24oKSB7IHJldHVybiAvKiBiaW5kaW5nICovIHN0cmlwQW5zaTsgfVxuLyogaGFybW9ueSBleHBvcnQgKi8gfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgYW5zaV9yZWdleF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgYW5zaS1yZWdleCAqLyBcIi4vbm9kZV9tb2R1bGVzL3N0cmlwLWFuc2kvbm9kZV9tb2R1bGVzL2Fuc2ktcmVnZXgvaW5kZXguanNcIik7XG5cbmZ1bmN0aW9uIHN0cmlwQW5zaShzdHJpbmcpIHtcbiAgaWYgKHR5cGVvZiBzdHJpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkV4cGVjdGVkIGEgYHN0cmluZ2AsIGdvdCBgXCIuY29uY2F0KHR5cGVvZiBzdHJpbmcsIFwiYFwiKSk7XG4gIH1cblxuICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoKDAsYW5zaV9yZWdleF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fW1wiZGVmYXVsdFwiXSkoKSwgJycpO1xufVxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL25vZGVfbW9kdWxlcy9zdHJpcC1hbnNpL25vZGVfbW9kdWxlcy9hbnNpLXJlZ2V4L2luZGV4LmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9ub2RlX21vZHVsZXMvc3RyaXAtYW5zaS9ub2RlX21vZHVsZXMvYW5zaS1yZWdleC9pbmRleC5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKGZ1bmN0aW9uKF9fdW51c2VkX3dlYnBhY2tfX193ZWJwYWNrX21vZHVsZV9fLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcbi8qIGhhcm1vbnkgZXhwb3J0ICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCB7XG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiZGVmYXVsdFwiOiBmdW5jdGlvbigpIHsgcmV0dXJuIC8qIGJpbmRpbmcgKi8gYW5zaVJlZ2V4OyB9XG4vKiBoYXJtb255IGV4cG9ydCAqLyB9KTtcbmZ1bmN0aW9uIGFuc2lSZWdleCgpIHtcbiAgdmFyIF9yZWYgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9LFxuICAgICAgX3JlZiRvbmx5Rmlyc3QgPSBfcmVmLm9ubHlGaXJzdCxcbiAgICAgIG9ubHlGaXJzdCA9IF9yZWYkb25seUZpcnN0ID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYkb25seUZpcnN0O1xuXG4gIHZhciBwYXR0ZXJuID0gW1wiW1xcXFx1MDAxQlxcXFx1MDA5Ql1bW1xcXFxdKCkjOz9dKig/Oig/Oig/Oig/OjtbLWEtekEtWlxcXFxkXFxcXC8jJi46PT8lQH5fXSspKnxbYS16QS1aXFxcXGRdKyg/OjtbLWEtekEtWlxcXFxkXFxcXC8jJi46PT8lQH5fXSopKik/XFxcXHUwMDA3KVwiLCAnKD86KD86XFxcXGR7MSw0fSg/OjtcXFxcZHswLDR9KSopP1tcXFxcZEEtUFItVFpjZi1udHFyeT0+PH5dKSknXS5qb2luKCd8Jyk7XG4gIHJldHVybiBuZXcgUmVnRXhwKHBhdHRlcm4sIG9ubHlGaXJzdCA/IHVuZGVmaW5lZCA6ICdnJyk7XG59XG5cbi8qKiovIH0pXG5cbi8qKioqKiovIFx0fSk7XG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKioqKi8gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdHZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcbi8qKioqKiovIFx0XG4vKioqKioqLyBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4vKioqKioqLyBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcbi8qKioqKiovIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbi8qKioqKiovIFx0XHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcbi8qKioqKiovIFx0XHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcbi8qKioqKiovIFx0XHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbi8qKioqKiovIFx0XHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcbi8qKioqKiovIFx0XHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcbi8qKioqKiovIFx0XHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG4vKioqKioqLyBcdFx0XHRleHBvcnRzOiB7fVxuLyoqKioqKi8gXHRcdH07XG4vKioqKioqLyBcdFxuLyoqKioqKi8gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuLyoqKioqKi8gXHRcdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuLyoqKioqKi8gXHRcbi8qKioqKiovIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuLyoqKioqKi8gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbi8qKioqKiovIFx0fVxuLyoqKioqKi8gXHRcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqKioqLyBcdC8qIHdlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyAqL1xuLyoqKioqKi8gXHQhZnVuY3Rpb24oKSB7XG4vKioqKioqLyBcdFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuLyoqKioqKi8gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIGRlZmluaXRpb24pIHtcbi8qKioqKiovIFx0XHRcdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcbi8qKioqKiovIFx0XHRcdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG4vKioqKioqLyBcdFx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcbi8qKioqKiovIFx0XHRcdFx0fVxuLyoqKioqKi8gXHRcdFx0fVxuLyoqKioqKi8gXHRcdH07XG4vKioqKioqLyBcdH0oKTtcbi8qKioqKiovIFx0XG4vKioqKioqLyBcdC8qIHdlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQgKi9cbi8qKioqKiovIFx0IWZ1bmN0aW9uKCkge1xuLyoqKioqKi8gXHRcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iaiwgcHJvcCkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCk7IH1cbi8qKioqKiovIFx0fSgpO1xuLyoqKioqKi8gXHRcbi8qKioqKiovIFx0Lyogd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCAqL1xuLyoqKioqKi8gXHQhZnVuY3Rpb24oKSB7XG4vKioqKioqLyBcdFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuLyoqKioqKi8gXHRcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbi8qKioqKiovIFx0XHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuLyoqKioqKi8gXHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbi8qKioqKiovIFx0XHRcdH1cbi8qKioqKiovIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4vKioqKioqLyBcdFx0fTtcbi8qKioqKiovIFx0fSgpO1xuLyoqKioqKi8gXHRcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG52YXIgX193ZWJwYWNrX2V4cG9ydHNfXyA9IHt9O1xuLy8gVGhpcyBlbnRyeSBuZWVkIHRvIGJlIHdyYXBwZWQgaW4gYW4gSUlGRSBiZWNhdXNlIGl0IG5lZWQgdG8gYmUgaXNvbGF0ZWQgYWdhaW5zdCBvdGhlciBtb2R1bGVzIGluIHRoZSBjaHVuay5cbiFmdW5jdGlvbigpIHtcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL2NsaWVudC1zcmMvbW9kdWxlcy9zdHJpcC1hbnNpL2luZGV4LmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgc3RyaXBfYW5zaV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgc3RyaXAtYW5zaSAqLyBcIi4vbm9kZV9tb2R1bGVzL3N0cmlwLWFuc2kvaW5kZXguanNcIik7XG5cbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gX193ZWJwYWNrX2V4cG9ydHNfX1tcImRlZmF1bHRcIl0gPSAoc3RyaXBfYW5zaV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fW1wiZGVmYXVsdFwiXSk7XG59KCk7XG52YXIgX193ZWJwYWNrX2V4cG9ydF90YXJnZXRfXyA9IGV4cG9ydHM7XG5mb3IodmFyIGkgaW4gX193ZWJwYWNrX2V4cG9ydHNfXykgX193ZWJwYWNrX2V4cG9ydF90YXJnZXRfX1tpXSA9IF9fd2VicGFja19leHBvcnRzX19baV07XG5pZihfX3dlYnBhY2tfZXhwb3J0c19fLl9fZXNNb2R1bGUpIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShfX3dlYnBhY2tfZXhwb3J0X3RhcmdldF9fLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qKioqKiovIH0pKClcbjsiLCIvLyBUaGUgZXJyb3Igb3ZlcmxheSBpcyBpbnNwaXJlZCAoYW5kIG1vc3RseSBjb3BpZWQpIGZyb20gQ3JlYXRlIFJlYWN0IEFwcCAoaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29raW5jdWJhdG9yL2NyZWF0ZS1yZWFjdC1hcHApXG4vLyBUaGV5LCBpbiB0dXJuLCBnb3QgaW5zcGlyZWQgYnkgd2VicGFjay1ob3QtbWlkZGxld2FyZSAoaHR0cHM6Ly9naXRodWIuY29tL2dsZW5qYW1pbi93ZWJwYWNrLWhvdC1taWRkbGV3YXJlKS5cbmltcG9ydCBhbnNpSFRNTCBmcm9tIFwiYW5zaS1odG1sLWNvbW11bml0eVwiO1xuaW1wb3J0IHsgZW5jb2RlIH0gZnJvbSBcImh0bWwtZW50aXRpZXNcIjtcbnZhciBjb2xvcnMgPSB7XG4gIHJlc2V0OiBbXCJ0cmFuc3BhcmVudFwiLCBcInRyYW5zcGFyZW50XCJdLFxuICBibGFjazogXCIxODE4MThcIixcbiAgcmVkOiBcIkUzNjA0OVwiLFxuICBncmVlbjogXCJCM0NCNzRcIixcbiAgeWVsbG93OiBcIkZGRDA4MFwiLFxuICBibHVlOiBcIjdDQUZDMlwiLFxuICBtYWdlbnRhOiBcIjdGQUNDQVwiLFxuICBjeWFuOiBcIkMzQzJFRlwiLFxuICBsaWdodGdyZXk6IFwiRUJFN0UzXCIsXG4gIGRhcmtncmV5OiBcIjZENzg5MVwiXG59O1xuLyoqIEB0eXBlIHtIVE1MSUZyYW1lRWxlbWVudCB8IG51bGwgfCB1bmRlZmluZWR9ICovXG5cbnZhciBpZnJhbWVDb250YWluZXJFbGVtZW50O1xuLyoqIEB0eXBlIHtIVE1MRGl2RWxlbWVudCB8IG51bGwgfCB1bmRlZmluZWR9ICovXG5cbnZhciBjb250YWluZXJFbGVtZW50O1xuLyoqIEB0eXBlIHtBcnJheTwoZWxlbWVudDogSFRNTERpdkVsZW1lbnQpID0+IHZvaWQ+fSAqL1xuXG52YXIgb25Mb2FkUXVldWUgPSBbXTtcbmFuc2lIVE1MLnNldENvbG9ycyhjb2xvcnMpO1xuXG5mdW5jdGlvbiBjcmVhdGVDb250YWluZXIoKSB7XG4gIGlmcmFtZUNvbnRhaW5lckVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaWZyYW1lXCIpO1xuICBpZnJhbWVDb250YWluZXJFbGVtZW50LmlkID0gXCJ3ZWJwYWNrLWRldi1zZXJ2ZXItY2xpZW50LW92ZXJsYXlcIjtcbiAgaWZyYW1lQ29udGFpbmVyRWxlbWVudC5zcmMgPSBcImFib3V0OmJsYW5rXCI7XG4gIGlmcmFtZUNvbnRhaW5lckVsZW1lbnQuc3R5bGUucG9zaXRpb24gPSBcImZpeGVkXCI7XG4gIGlmcmFtZUNvbnRhaW5lckVsZW1lbnQuc3R5bGUubGVmdCA9IDA7XG4gIGlmcmFtZUNvbnRhaW5lckVsZW1lbnQuc3R5bGUudG9wID0gMDtcbiAgaWZyYW1lQ29udGFpbmVyRWxlbWVudC5zdHlsZS5yaWdodCA9IDA7XG4gIGlmcmFtZUNvbnRhaW5lckVsZW1lbnQuc3R5bGUuYm90dG9tID0gMDtcbiAgaWZyYW1lQ29udGFpbmVyRWxlbWVudC5zdHlsZS53aWR0aCA9IFwiMTAwdndcIjtcbiAgaWZyYW1lQ29udGFpbmVyRWxlbWVudC5zdHlsZS5oZWlnaHQgPSBcIjEwMHZoXCI7XG4gIGlmcmFtZUNvbnRhaW5lckVsZW1lbnQuc3R5bGUuYm9yZGVyID0gXCJub25lXCI7XG4gIGlmcmFtZUNvbnRhaW5lckVsZW1lbnQuc3R5bGUuekluZGV4ID0gOTk5OTk5OTk5OTtcblxuICBpZnJhbWVDb250YWluZXJFbGVtZW50Lm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICBjb250YWluZXJFbGVtZW50ID1cbiAgICAvKiogQHR5cGUge0RvY3VtZW50fSAqL1xuXG4gICAgLyoqIEB0eXBlIHtIVE1MSUZyYW1lRWxlbWVudH0gKi9cbiAgICBpZnJhbWVDb250YWluZXJFbGVtZW50LmNvbnRlbnREb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIGNvbnRhaW5lckVsZW1lbnQuaWQgPSBcIndlYnBhY2stZGV2LXNlcnZlci1jbGllbnQtb3ZlcmxheS1kaXZcIjtcbiAgICBjb250YWluZXJFbGVtZW50LnN0eWxlLnBvc2l0aW9uID0gXCJmaXhlZFwiO1xuICAgIGNvbnRhaW5lckVsZW1lbnQuc3R5bGUuYm94U2l6aW5nID0gXCJib3JkZXItYm94XCI7XG4gICAgY29udGFpbmVyRWxlbWVudC5zdHlsZS5sZWZ0ID0gMDtcbiAgICBjb250YWluZXJFbGVtZW50LnN0eWxlLnRvcCA9IDA7XG4gICAgY29udGFpbmVyRWxlbWVudC5zdHlsZS5yaWdodCA9IDA7XG4gICAgY29udGFpbmVyRWxlbWVudC5zdHlsZS5ib3R0b20gPSAwO1xuICAgIGNvbnRhaW5lckVsZW1lbnQuc3R5bGUud2lkdGggPSBcIjEwMHZ3XCI7XG4gICAgY29udGFpbmVyRWxlbWVudC5zdHlsZS5oZWlnaHQgPSBcIjEwMHZoXCI7XG4gICAgY29udGFpbmVyRWxlbWVudC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcInJnYmEoMCwgMCwgMCwgMC44NSlcIjtcbiAgICBjb250YWluZXJFbGVtZW50LnN0eWxlLmNvbG9yID0gXCIjRThFOEU4XCI7XG4gICAgY29udGFpbmVyRWxlbWVudC5zdHlsZS5mb250RmFtaWx5ID0gXCJNZW5sbywgQ29uc29sYXMsIG1vbm9zcGFjZVwiO1xuICAgIGNvbnRhaW5lckVsZW1lbnQuc3R5bGUuZm9udFNpemUgPSBcImxhcmdlXCI7XG4gICAgY29udGFpbmVyRWxlbWVudC5zdHlsZS5wYWRkaW5nID0gXCIycmVtXCI7XG4gICAgY29udGFpbmVyRWxlbWVudC5zdHlsZS5saW5lSGVpZ2h0ID0gXCIxLjJcIjtcbiAgICBjb250YWluZXJFbGVtZW50LnN0eWxlLndoaXRlU3BhY2UgPSBcInByZS13cmFwXCI7XG4gICAgY29udGFpbmVyRWxlbWVudC5zdHlsZS5vdmVyZmxvdyA9IFwiYXV0b1wiO1xuICAgIHZhciBoZWFkZXJFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG4gICAgaGVhZGVyRWxlbWVudC5pbm5lclRleHQgPSBcIkNvbXBpbGVkIHdpdGggcHJvYmxlbXM6XCI7XG4gICAgdmFyIGNsb3NlQnV0dG9uRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XG4gICAgY2xvc2VCdXR0b25FbGVtZW50LmlubmVyVGV4dCA9IFwiWFwiO1xuICAgIGNsb3NlQnV0dG9uRWxlbWVudC5zdHlsZS5iYWNrZ3JvdW5kID0gXCJ0cmFuc3BhcmVudFwiO1xuICAgIGNsb3NlQnV0dG9uRWxlbWVudC5zdHlsZS5ib3JkZXIgPSBcIm5vbmVcIjtcbiAgICBjbG9zZUJ1dHRvbkVsZW1lbnQuc3R5bGUuZm9udFNpemUgPSBcIjIwcHhcIjtcbiAgICBjbG9zZUJ1dHRvbkVsZW1lbnQuc3R5bGUuZm9udFdlaWdodCA9IFwiYm9sZFwiO1xuICAgIGNsb3NlQnV0dG9uRWxlbWVudC5zdHlsZS5jb2xvciA9IFwid2hpdGVcIjtcbiAgICBjbG9zZUJ1dHRvbkVsZW1lbnQuc3R5bGUuY3Vyc29yID0gXCJwb2ludGVyXCI7XG4gICAgY2xvc2VCdXR0b25FbGVtZW50LnN0eWxlLmNzc0Zsb2F0ID0gXCJyaWdodFwiOyAvLyBAdHMtaWdub3JlXG5cbiAgICBjbG9zZUJ1dHRvbkVsZW1lbnQuc3R5bGUuc3R5bGVGbG9hdCA9IFwicmlnaHRcIjtcbiAgICBjbG9zZUJ1dHRvbkVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGhpZGUoKTtcbiAgICB9KTtcbiAgICBjb250YWluZXJFbGVtZW50LmFwcGVuZENoaWxkKGhlYWRlckVsZW1lbnQpO1xuICAgIGNvbnRhaW5lckVsZW1lbnQuYXBwZW5kQ2hpbGQoY2xvc2VCdXR0b25FbGVtZW50KTtcbiAgICBjb250YWluZXJFbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJiclwiKSk7XG4gICAgY29udGFpbmVyRWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnJcIikpO1xuICAgIC8qKiBAdHlwZSB7RG9jdW1lbnR9ICovXG5cbiAgICAvKiogQHR5cGUge0hUTUxJRnJhbWVFbGVtZW50fSAqL1xuICAgIGlmcmFtZUNvbnRhaW5lckVsZW1lbnQuY29udGVudERvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoY29udGFpbmVyRWxlbWVudCk7XG4gICAgb25Mb2FkUXVldWUuZm9yRWFjaChmdW5jdGlvbiAob25Mb2FkKSB7XG4gICAgICBvbkxvYWQoXG4gICAgICAvKiogQHR5cGUge0hUTUxEaXZFbGVtZW50fSAqL1xuICAgICAgY29udGFpbmVyRWxlbWVudCk7XG4gICAgfSk7XG4gICAgb25Mb2FkUXVldWUgPSBbXTtcbiAgICAvKiogQHR5cGUge0hUTUxJRnJhbWVFbGVtZW50fSAqL1xuXG4gICAgaWZyYW1lQ29udGFpbmVyRWxlbWVudC5vbmxvYWQgPSBudWxsO1xuICB9O1xuXG4gIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoaWZyYW1lQ29udGFpbmVyRWxlbWVudCk7XG59XG4vKipcbiAqIEBwYXJhbSB7KGVsZW1lbnQ6IEhUTUxEaXZFbGVtZW50KSA9PiB2b2lkfSBjYWxsYmFja1xuICovXG5cblxuZnVuY3Rpb24gZW5zdXJlT3ZlcmxheUV4aXN0cyhjYWxsYmFjaykge1xuICBpZiAoY29udGFpbmVyRWxlbWVudCkge1xuICAgIC8vIEV2ZXJ5dGhpbmcgaXMgcmVhZHksIGNhbGwgdGhlIGNhbGxiYWNrIHJpZ2h0IGF3YXkuXG4gICAgY2FsbGJhY2soY29udGFpbmVyRWxlbWVudCk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgb25Mb2FkUXVldWUucHVzaChjYWxsYmFjayk7XG5cbiAgaWYgKGlmcmFtZUNvbnRhaW5lckVsZW1lbnQpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjcmVhdGVDb250YWluZXIoKTtcbn0gLy8gU3VjY2Vzc2Z1bCBjb21waWxhdGlvbi5cblxuXG5mdW5jdGlvbiBoaWRlKCkge1xuICBpZiAoIWlmcmFtZUNvbnRhaW5lckVsZW1lbnQpIHtcbiAgICByZXR1cm47XG4gIH0gLy8gQ2xlYW4gdXAgYW5kIHJlc2V0IGludGVybmFsIHN0YXRlLlxuXG5cbiAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChpZnJhbWVDb250YWluZXJFbGVtZW50KTtcbiAgaWZyYW1lQ29udGFpbmVyRWxlbWVudCA9IG51bGw7XG4gIGNvbnRhaW5lckVsZW1lbnQgPSBudWxsO1xufVxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdHlwZVxuICogQHBhcmFtIHtzdHJpbmcgIHwgeyBmaWxlPzogc3RyaW5nLCBtb2R1bGVOYW1lPzogc3RyaW5nLCBsb2M/OiBzdHJpbmcsIG1lc3NhZ2U/OiBzdHJpbmcgfX0gaXRlbVxuICogQHJldHVybnMge3sgaGVhZGVyOiBzdHJpbmcsIGJvZHk6IHN0cmluZyB9fVxuICovXG5cblxuZnVuY3Rpb24gZm9ybWF0UHJvYmxlbSh0eXBlLCBpdGVtKSB7XG4gIHZhciBoZWFkZXIgPSB0eXBlID09PSBcIndhcm5pbmdcIiA/IFwiV0FSTklOR1wiIDogXCJFUlJPUlwiO1xuICB2YXIgYm9keSA9IFwiXCI7XG5cbiAgaWYgKHR5cGVvZiBpdGVtID09PSBcInN0cmluZ1wiKSB7XG4gICAgYm9keSArPSBpdGVtO1xuICB9IGVsc2Uge1xuICAgIHZhciBmaWxlID0gaXRlbS5maWxlIHx8IFwiXCI7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXN0ZWQtdGVybmFyeVxuXG4gICAgdmFyIG1vZHVsZU5hbWUgPSBpdGVtLm1vZHVsZU5hbWUgPyBpdGVtLm1vZHVsZU5hbWUuaW5kZXhPZihcIiFcIikgIT09IC0xID8gXCJcIi5jb25jYXQoaXRlbS5tb2R1bGVOYW1lLnJlcGxhY2UoL14oXFxzfFxcUykqIS8sIFwiXCIpLCBcIiAoXCIpLmNvbmNhdChpdGVtLm1vZHVsZU5hbWUsIFwiKVwiKSA6IFwiXCIuY29uY2F0KGl0ZW0ubW9kdWxlTmFtZSkgOiBcIlwiO1xuICAgIHZhciBsb2MgPSBpdGVtLmxvYztcbiAgICBoZWFkZXIgKz0gXCJcIi5jb25jYXQobW9kdWxlTmFtZSB8fCBmaWxlID8gXCIgaW4gXCIuY29uY2F0KG1vZHVsZU5hbWUgPyBcIlwiLmNvbmNhdChtb2R1bGVOYW1lKS5jb25jYXQoZmlsZSA/IFwiIChcIi5jb25jYXQoZmlsZSwgXCIpXCIpIDogXCJcIikgOiBmaWxlKS5jb25jYXQobG9jID8gXCIgXCIuY29uY2F0KGxvYykgOiBcIlwiKSA6IFwiXCIpO1xuICAgIGJvZHkgKz0gaXRlbS5tZXNzYWdlIHx8IFwiXCI7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGhlYWRlcjogaGVhZGVyLFxuICAgIGJvZHk6IGJvZHlcbiAgfTtcbn0gLy8gQ29tcGlsYXRpb24gd2l0aCBlcnJvcnMgKGUuZy4gc3ludGF4IGVycm9yIG9yIG1pc3NpbmcgbW9kdWxlcykuXG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHR5cGVcbiAqIEBwYXJhbSB7QXJyYXk8c3RyaW5nICB8IHsgZmlsZT86IHN0cmluZywgbW9kdWxlTmFtZT86IHN0cmluZywgbG9jPzogc3RyaW5nLCBtZXNzYWdlPzogc3RyaW5nIH0+fSBtZXNzYWdlc1xuICovXG5cblxuZnVuY3Rpb24gc2hvdyh0eXBlLCBtZXNzYWdlcykge1xuICBlbnN1cmVPdmVybGF5RXhpc3RzKGZ1bmN0aW9uICgpIHtcbiAgICBtZXNzYWdlcy5mb3JFYWNoKGZ1bmN0aW9uIChtZXNzYWdlKSB7XG4gICAgICB2YXIgZW50cnlFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgIHZhciB0eXBlRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xuXG4gICAgICB2YXIgX2Zvcm1hdFByb2JsZW0gPSBmb3JtYXRQcm9ibGVtKHR5cGUsIG1lc3NhZ2UpLFxuICAgICAgICAgIGhlYWRlciA9IF9mb3JtYXRQcm9ibGVtLmhlYWRlcixcbiAgICAgICAgICBib2R5ID0gX2Zvcm1hdFByb2JsZW0uYm9keTtcblxuICAgICAgdHlwZUVsZW1lbnQuaW5uZXJUZXh0ID0gaGVhZGVyO1xuICAgICAgdHlwZUVsZW1lbnQuc3R5bGUuY29sb3IgPSBcIiNcIi5jb25jYXQoY29sb3JzLnJlZCk7IC8vIE1ha2UgaXQgbG9vayBzaW1pbGFyIHRvIG91ciB0ZXJtaW5hbC5cblxuICAgICAgdmFyIHRleHQgPSBhbnNpSFRNTChlbmNvZGUoYm9keSkpO1xuICAgICAgdmFyIG1lc3NhZ2VUZXh0Tm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICBtZXNzYWdlVGV4dE5vZGUuaW5uZXJIVE1MID0gdGV4dDtcbiAgICAgIGVudHJ5RWxlbWVudC5hcHBlbmRDaGlsZCh0eXBlRWxlbWVudCk7XG4gICAgICBlbnRyeUVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJyXCIpKTtcbiAgICAgIGVudHJ5RWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnJcIikpO1xuICAgICAgZW50cnlFbGVtZW50LmFwcGVuZENoaWxkKG1lc3NhZ2VUZXh0Tm9kZSk7XG4gICAgICBlbnRyeUVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJyXCIpKTtcbiAgICAgIGVudHJ5RWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnJcIikpO1xuICAgICAgLyoqIEB0eXBlIHtIVE1MRGl2RWxlbWVudH0gKi9cblxuICAgICAgY29udGFpbmVyRWxlbWVudC5hcHBlbmRDaGlsZChlbnRyeUVsZW1lbnQpO1xuICAgIH0pO1xuICB9KTtcbn1cblxuZXhwb3J0IHsgZm9ybWF0UHJvYmxlbSwgc2hvdywgaGlkZSB9OyIsIi8qIGdsb2JhbCBfX3dlYnBhY2tfZGV2X3NlcnZlcl9jbGllbnRfXyAqL1xuaW1wb3J0IFdlYlNvY2tldENsaWVudCBmcm9tIFwiLi9jbGllbnRzL1dlYlNvY2tldENsaWVudC5qc1wiO1xuaW1wb3J0IHsgbG9nIH0gZnJvbSBcIi4vdXRpbHMvbG9nLmpzXCI7IC8vIHRoaXMgV2Vic29ja2V0Q2xpZW50IGlzIGhlcmUgYXMgYSBkZWZhdWx0IGZhbGxiYWNrLCBpbiBjYXNlIHRoZSBjbGllbnQgaXMgbm90IGluamVjdGVkXG5cbi8qIGVzbGludC1kaXNhYmxlIGNhbWVsY2FzZSAqL1xuXG52YXIgQ2xpZW50ID0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5lc3RlZC10ZXJuYXJ5XG50eXBlb2YgX193ZWJwYWNrX2Rldl9zZXJ2ZXJfY2xpZW50X18gIT09IFwidW5kZWZpbmVkXCIgPyB0eXBlb2YgX193ZWJwYWNrX2Rldl9zZXJ2ZXJfY2xpZW50X18uZGVmYXVsdCAhPT0gXCJ1bmRlZmluZWRcIiA/IF9fd2VicGFja19kZXZfc2VydmVyX2NsaWVudF9fLmRlZmF1bHQgOiBfX3dlYnBhY2tfZGV2X3NlcnZlcl9jbGllbnRfXyA6IFdlYlNvY2tldENsaWVudDtcbi8qIGVzbGludC1lbmFibGUgY2FtZWxjYXNlICovXG5cbnZhciByZXRyaWVzID0gMDtcbnZhciBtYXhSZXRyaWVzID0gMTA7XG52YXIgY2xpZW50ID0gbnVsbDtcbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybFxuICogQHBhcmFtIHt7IFtoYW5kbGVyOiBzdHJpbmddOiAoZGF0YT86IGFueSwgcGFyYW1zPzogYW55KSA9PiBhbnkgfX0gaGFuZGxlcnNcbiAqIEBwYXJhbSB7bnVtYmVyfSBbcmVjb25uZWN0XVxuICovXG5cbnZhciBzb2NrZXQgPSBmdW5jdGlvbiBpbml0U29ja2V0KHVybCwgaGFuZGxlcnMsIHJlY29ubmVjdCkge1xuICBjbGllbnQgPSBuZXcgQ2xpZW50KHVybCk7XG4gIGNsaWVudC5vbk9wZW4oZnVuY3Rpb24gKCkge1xuICAgIHJldHJpZXMgPSAwO1xuXG4gICAgaWYgKHR5cGVvZiByZWNvbm5lY3QgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIG1heFJldHJpZXMgPSByZWNvbm5lY3Q7XG4gICAgfVxuICB9KTtcbiAgY2xpZW50Lm9uQ2xvc2UoZnVuY3Rpb24gKCkge1xuICAgIGlmIChyZXRyaWVzID09PSAwKSB7XG4gICAgICBoYW5kbGVycy5jbG9zZSgpO1xuICAgIH0gLy8gVHJ5IHRvIHJlY29ubmVjdC5cblxuXG4gICAgY2xpZW50ID0gbnVsbDsgLy8gQWZ0ZXIgMTAgcmV0cmllcyBzdG9wIHRyeWluZywgdG8gcHJldmVudCBsb2dzcGFtLlxuXG4gICAgaWYgKHJldHJpZXMgPCBtYXhSZXRyaWVzKSB7XG4gICAgICAvLyBFeHBvbmVudGlhbGx5IGluY3JlYXNlIHRpbWVvdXQgdG8gcmVjb25uZWN0LlxuICAgICAgLy8gUmVzcGVjdGZ1bGx5IGNvcGllZCBmcm9tIHRoZSBwYWNrYWdlIGBnb3RgLlxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtcHJvcGVydGllc1xuICAgICAgdmFyIHJldHJ5SW5NcyA9IDEwMDAgKiBNYXRoLnBvdygyLCByZXRyaWVzKSArIE1hdGgucmFuZG9tKCkgKiAxMDA7XG4gICAgICByZXRyaWVzICs9IDE7XG4gICAgICBsb2cuaW5mbyhcIlRyeWluZyB0byByZWNvbm5lY3QuLi5cIik7XG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc29ja2V0KHVybCwgaGFuZGxlcnMsIHJlY29ubmVjdCk7XG4gICAgICB9LCByZXRyeUluTXMpO1xuICAgIH1cbiAgfSk7XG4gIGNsaWVudC5vbk1lc3NhZ2UoXG4gIC8qKlxuICAgKiBAcGFyYW0ge2FueX0gZGF0YVxuICAgKi9cbiAgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICB2YXIgbWVzc2FnZSA9IEpTT04ucGFyc2UoZGF0YSk7XG5cbiAgICBpZiAoaGFuZGxlcnNbbWVzc2FnZS50eXBlXSkge1xuICAgICAgaGFuZGxlcnNbbWVzc2FnZS50eXBlXShtZXNzYWdlLmRhdGEsIG1lc3NhZ2UucGFyYW1zKTtcbiAgICB9XG4gIH0pO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgc29ja2V0OyIsIi8qKlxuICogQHBhcmFtIHt7IHByb3RvY29sPzogc3RyaW5nLCBhdXRoPzogc3RyaW5nLCBob3N0bmFtZT86IHN0cmluZywgcG9ydD86IHN0cmluZywgcGF0aG5hbWU/OiBzdHJpbmcsIHNlYXJjaD86IHN0cmluZywgaGFzaD86IHN0cmluZywgc2xhc2hlcz86IGJvb2xlYW4gfX0gb2JqVVJMXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBmb3JtYXQob2JqVVJMKSB7XG4gIHZhciBwcm90b2NvbCA9IG9ialVSTC5wcm90b2NvbCB8fCBcIlwiO1xuXG4gIGlmIChwcm90b2NvbCAmJiBwcm90b2NvbC5zdWJzdHIoLTEpICE9PSBcIjpcIikge1xuICAgIHByb3RvY29sICs9IFwiOlwiO1xuICB9XG5cbiAgdmFyIGF1dGggPSBvYmpVUkwuYXV0aCB8fCBcIlwiO1xuXG4gIGlmIChhdXRoKSB7XG4gICAgYXV0aCA9IGVuY29kZVVSSUNvbXBvbmVudChhdXRoKTtcbiAgICBhdXRoID0gYXV0aC5yZXBsYWNlKC8lM0EvaSwgXCI6XCIpO1xuICAgIGF1dGggKz0gXCJAXCI7XG4gIH1cblxuICB2YXIgaG9zdCA9IFwiXCI7XG5cbiAgaWYgKG9ialVSTC5ob3N0bmFtZSkge1xuICAgIGhvc3QgPSBhdXRoICsgKG9ialVSTC5ob3N0bmFtZS5pbmRleE9mKFwiOlwiKSA9PT0gLTEgPyBvYmpVUkwuaG9zdG5hbWUgOiBcIltcIi5jb25jYXQob2JqVVJMLmhvc3RuYW1lLCBcIl1cIikpO1xuXG4gICAgaWYgKG9ialVSTC5wb3J0KSB7XG4gICAgICBob3N0ICs9IFwiOlwiLmNvbmNhdChvYmpVUkwucG9ydCk7XG4gICAgfVxuICB9XG5cbiAgdmFyIHBhdGhuYW1lID0gb2JqVVJMLnBhdGhuYW1lIHx8IFwiXCI7XG5cbiAgaWYgKG9ialVSTC5zbGFzaGVzKSB7XG4gICAgaG9zdCA9IFwiLy9cIi5jb25jYXQoaG9zdCB8fCBcIlwiKTtcblxuICAgIGlmIChwYXRobmFtZSAmJiBwYXRobmFtZS5jaGFyQXQoMCkgIT09IFwiL1wiKSB7XG4gICAgICBwYXRobmFtZSA9IFwiL1wiLmNvbmNhdChwYXRobmFtZSk7XG4gICAgfVxuICB9IGVsc2UgaWYgKCFob3N0KSB7XG4gICAgaG9zdCA9IFwiXCI7XG4gIH1cblxuICB2YXIgc2VhcmNoID0gb2JqVVJMLnNlYXJjaCB8fCBcIlwiO1xuXG4gIGlmIChzZWFyY2ggJiYgc2VhcmNoLmNoYXJBdCgwKSAhPT0gXCI/XCIpIHtcbiAgICBzZWFyY2ggPSBcIj9cIi5jb25jYXQoc2VhcmNoKTtcbiAgfVxuXG4gIHZhciBoYXNoID0gb2JqVVJMLmhhc2ggfHwgXCJcIjtcblxuICBpZiAoaGFzaCAmJiBoYXNoLmNoYXJBdCgwKSAhPT0gXCIjXCIpIHtcbiAgICBoYXNoID0gXCIjXCIuY29uY2F0KGhhc2gpO1xuICB9XG5cbiAgcGF0aG5hbWUgPSBwYXRobmFtZS5yZXBsYWNlKC9bPyNdL2csXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbWF0Y2hcbiAgICogQHJldHVybnMge3N0cmluZ31cbiAgICovXG4gIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQobWF0Y2gpO1xuICB9KTtcbiAgc2VhcmNoID0gc2VhcmNoLnJlcGxhY2UoXCIjXCIsIFwiJTIzXCIpO1xuICByZXR1cm4gXCJcIi5jb25jYXQocHJvdG9jb2wpLmNvbmNhdChob3N0KS5jb25jYXQocGF0aG5hbWUpLmNvbmNhdChzZWFyY2gpLmNvbmNhdChoYXNoKTtcbn1cbi8qKlxuICogQHBhcmFtIHtVUkwgJiB7IGZyb21DdXJyZW50U2NyaXB0PzogYm9vbGVhbiB9fSBwYXJzZWRVUkxcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cblxuXG5mdW5jdGlvbiBjcmVhdGVTb2NrZXRVUkwocGFyc2VkVVJMKSB7XG4gIHZhciBob3N0bmFtZSA9IHBhcnNlZFVSTC5ob3N0bmFtZTsgLy8gTm9kZS5qcyBtb2R1bGUgcGFyc2VzIGl0IGFzIGA6OmBcbiAgLy8gYG5ldyBVUkwodXJsU3RyaW5nLCBbYmFzZVVSTFN0cmluZ10pYCBwYXJzZXMgaXQgYXMgJ1s6Ol0nXG5cbiAgdmFyIGlzSW5BZGRyQW55ID0gaG9zdG5hbWUgPT09IFwiMC4wLjAuMFwiIHx8IGhvc3RuYW1lID09PSBcIjo6XCIgfHwgaG9zdG5hbWUgPT09IFwiWzo6XVwiOyAvLyB3aHkgZG8gd2UgbmVlZCB0aGlzIGNoZWNrP1xuICAvLyBob3N0bmFtZSBuL2EgZm9yIGZpbGUgcHJvdG9jb2wgKGV4YW1wbGUsIHdoZW4gdXNpbmcgZWxlY3Ryb24sIGlvbmljKVxuICAvLyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrL3dlYnBhY2stZGV2LXNlcnZlci9wdWxsLzM4NFxuXG4gIGlmIChpc0luQWRkckFueSAmJiBzZWxmLmxvY2F0aW9uLmhvc3RuYW1lICYmIHNlbGYubG9jYXRpb24ucHJvdG9jb2wuaW5kZXhPZihcImh0dHBcIikgPT09IDApIHtcbiAgICBob3N0bmFtZSA9IHNlbGYubG9jYXRpb24uaG9zdG5hbWU7XG4gIH1cblxuICB2YXIgc29ja2V0VVJMUHJvdG9jb2wgPSBwYXJzZWRVUkwucHJvdG9jb2wgfHwgc2VsZi5sb2NhdGlvbi5wcm90b2NvbDsgLy8gV2hlbiBodHRwcyBpcyB1c2VkIGluIHRoZSBhcHAsIHNlY3VyZSB3ZWIgc29ja2V0cyBhcmUgYWx3YXlzIG5lY2Vzc2FyeSBiZWNhdXNlIHRoZSBicm93c2VyIGRvZXNuJ3QgYWNjZXB0IG5vbi1zZWN1cmUgd2ViIHNvY2tldHMuXG5cbiAgaWYgKHNvY2tldFVSTFByb3RvY29sID09PSBcImF1dG86XCIgfHwgaG9zdG5hbWUgJiYgaXNJbkFkZHJBbnkgJiYgc2VsZi5sb2NhdGlvbi5wcm90b2NvbCA9PT0gXCJodHRwczpcIikge1xuICAgIHNvY2tldFVSTFByb3RvY29sID0gc2VsZi5sb2NhdGlvbi5wcm90b2NvbDtcbiAgfVxuXG4gIHNvY2tldFVSTFByb3RvY29sID0gc29ja2V0VVJMUHJvdG9jb2wucmVwbGFjZSgvXig/Omh0dHB8ListZXh0ZW5zaW9ufGZpbGUpL2ksIFwid3NcIik7XG4gIHZhciBzb2NrZXRVUkxBdXRoID0gXCJcIjsgLy8gYG5ldyBVUkwodXJsU3RyaW5nLCBbYmFzZVVSTHN0cmluZ10pYCBkb2Vzbid0IGhhdmUgYGF1dGhgIHByb3BlcnR5XG4gIC8vIFBhcnNlIGF1dGhlbnRpY2F0aW9uIGNyZWRlbnRpYWxzIGluIGNhc2Ugd2UgbmVlZCB0aGVtXG5cbiAgaWYgKHBhcnNlZFVSTC51c2VybmFtZSkge1xuICAgIHNvY2tldFVSTEF1dGggPSBwYXJzZWRVUkwudXNlcm5hbWU7IC8vIFNpbmNlIEhUVFAgYmFzaWMgYXV0aGVudGljYXRpb24gZG9lcyBub3QgYWxsb3cgZW1wdHkgdXNlcm5hbWUsXG4gICAgLy8gd2Ugb25seSBpbmNsdWRlIHBhc3N3b3JkIGlmIHRoZSB1c2VybmFtZSBpcyBub3QgZW1wdHkuXG5cbiAgICBpZiAocGFyc2VkVVJMLnBhc3N3b3JkKSB7XG4gICAgICAvLyBSZXN1bHQ6IDx1c2VybmFtZT46PHBhc3N3b3JkPlxuICAgICAgc29ja2V0VVJMQXV0aCA9IHNvY2tldFVSTEF1dGguY29uY2F0KFwiOlwiLCBwYXJzZWRVUkwucGFzc3dvcmQpO1xuICAgIH1cbiAgfSAvLyBJbiBjYXNlIHRoZSBob3N0IGlzIGEgcmF3IElQdjYgYWRkcmVzcywgaXQgY2FuIGJlIGVuY2xvc2VkIGluXG4gIC8vIHRoZSBicmFja2V0cyBhcyB0aGUgYnJhY2tldHMgYXJlIG5lZWRlZCBpbiB0aGUgZmluYWwgVVJMIHN0cmluZy5cbiAgLy8gTmVlZCB0byByZW1vdmUgdGhvc2UgYXMgdXJsLmZvcm1hdCBibGluZGx5IGFkZHMgaXRzIG93biBzZXQgb2YgYnJhY2tldHNcbiAgLy8gaWYgdGhlIGhvc3Qgc3RyaW5nIGNvbnRhaW5zIGNvbG9ucy4gVGhhdCB3b3VsZCBsZWFkIHRvIG5vbi13b3JraW5nXG4gIC8vIGRvdWJsZSBicmFja2V0cyAoZS5nLiBbWzo6XV0pIGhvc3RcbiAgLy9cbiAgLy8gQWxsIG9mIHRoZXNlIHdlYiBzb2NrZXQgdXJsIHBhcmFtcyBhcmUgb3B0aW9uYWxseSBwYXNzZWQgaW4gdGhyb3VnaCByZXNvdXJjZVF1ZXJ5LFxuICAvLyBzbyB3ZSBuZWVkIHRvIGZhbGwgYmFjayB0byB0aGUgZGVmYXVsdCBpZiB0aGV5IGFyZSBub3QgcHJvdmlkZWRcblxuXG4gIHZhciBzb2NrZXRVUkxIb3N0bmFtZSA9IChob3N0bmFtZSB8fCBzZWxmLmxvY2F0aW9uLmhvc3RuYW1lIHx8IFwibG9jYWxob3N0XCIpLnJlcGxhY2UoL15cXFsoLiopXFxdJC8sIFwiJDFcIik7XG4gIHZhciBzb2NrZXRVUkxQb3J0ID0gcGFyc2VkVVJMLnBvcnQ7XG5cbiAgaWYgKCFzb2NrZXRVUkxQb3J0IHx8IHNvY2tldFVSTFBvcnQgPT09IFwiMFwiKSB7XG4gICAgc29ja2V0VVJMUG9ydCA9IHNlbGYubG9jYXRpb24ucG9ydDtcbiAgfSAvLyBJZiBwYXRoIGlzIHByb3ZpZGVkIGl0J2xsIGJlIHBhc3NlZCBpbiB2aWEgdGhlIHJlc291cmNlUXVlcnkgYXMgYVxuICAvLyBxdWVyeSBwYXJhbSBzbyBpdCBoYXMgdG8gYmUgcGFyc2VkIG91dCBvZiB0aGUgcXVlcnlzdHJpbmcgaW4gb3JkZXIgZm9yIHRoZVxuICAvLyBjbGllbnQgdG8gb3BlbiB0aGUgc29ja2V0IHRvIHRoZSBjb3JyZWN0IGxvY2F0aW9uLlxuXG5cbiAgdmFyIHNvY2tldFVSTFBhdGhuYW1lID0gXCIvd3NcIjtcblxuICBpZiAocGFyc2VkVVJMLnBhdGhuYW1lICYmICFwYXJzZWRVUkwuZnJvbUN1cnJlbnRTY3JpcHQpIHtcbiAgICBzb2NrZXRVUkxQYXRobmFtZSA9IHBhcnNlZFVSTC5wYXRobmFtZTtcbiAgfVxuXG4gIHJldHVybiBmb3JtYXQoe1xuICAgIHByb3RvY29sOiBzb2NrZXRVUkxQcm90b2NvbCxcbiAgICBhdXRoOiBzb2NrZXRVUkxBdXRoLFxuICAgIGhvc3RuYW1lOiBzb2NrZXRVUkxIb3N0bmFtZSxcbiAgICBwb3J0OiBzb2NrZXRVUkxQb3J0LFxuICAgIHBhdGhuYW1lOiBzb2NrZXRVUkxQYXRobmFtZSxcbiAgICBzbGFzaGVzOiB0cnVlXG4gIH0pO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVTb2NrZXRVUkw7IiwiLyoqXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBnZXRDdXJyZW50U2NyaXB0U291cmNlKCkge1xuICAvLyBgZG9jdW1lbnQuY3VycmVudFNjcmlwdGAgaXMgdGhlIG1vc3QgYWNjdXJhdGUgd2F5IHRvIGZpbmQgdGhlIGN1cnJlbnQgc2NyaXB0LFxuICAvLyBidXQgaXMgbm90IHN1cHBvcnRlZCBpbiBhbGwgYnJvd3NlcnMuXG4gIGlmIChkb2N1bWVudC5jdXJyZW50U2NyaXB0KSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmN1cnJlbnRTY3JpcHQuZ2V0QXR0cmlidXRlKFwic3JjXCIpO1xuICB9IC8vIEZhbGxiYWNrIHRvIGdldHRpbmcgYWxsIHNjcmlwdHMgcnVubmluZyBpbiB0aGUgZG9jdW1lbnQuXG5cblxuICB2YXIgc2NyaXB0RWxlbWVudHMgPSBkb2N1bWVudC5zY3JpcHRzIHx8IFtdO1xuICB2YXIgc2NyaXB0RWxlbWVudHNXaXRoU3JjID0gQXJyYXkucHJvdG90eXBlLmZpbHRlci5jYWxsKHNjcmlwdEVsZW1lbnRzLCBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgIHJldHVybiBlbGVtZW50LmdldEF0dHJpYnV0ZShcInNyY1wiKTtcbiAgfSk7XG5cbiAgaWYgKHNjcmlwdEVsZW1lbnRzV2l0aFNyYy5sZW5ndGggPiAwKSB7XG4gICAgdmFyIGN1cnJlbnRTY3JpcHQgPSBzY3JpcHRFbGVtZW50c1dpdGhTcmNbc2NyaXB0RWxlbWVudHNXaXRoU3JjLmxlbmd0aCAtIDFdO1xuICAgIHJldHVybiBjdXJyZW50U2NyaXB0LmdldEF0dHJpYnV0ZShcInNyY1wiKTtcbiAgfSAvLyBGYWlsIGFzIHRoZXJlIHdhcyBubyBzY3JpcHQgdG8gdXNlLlxuXG5cbiAgdGhyb3cgbmV3IEVycm9yKFwiW3dlYnBhY2stZGV2LXNlcnZlcl0gRmFpbGVkIHRvIGdldCBjdXJyZW50IHNjcmlwdCBzb3VyY2UuXCIpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBnZXRDdXJyZW50U2NyaXB0U291cmNlOyIsImltcG9ydCBsb2dnZXIgZnJvbSBcIi4uL21vZHVsZXMvbG9nZ2VyL2luZGV4LmpzXCI7XG52YXIgbmFtZSA9IFwid2VicGFjay1kZXYtc2VydmVyXCI7IC8vIGRlZmF1bHQgbGV2ZWwgaXMgc2V0IG9uIHRoZSBjbGllbnQgc2lkZSwgc28gaXQgZG9lcyBub3QgbmVlZFxuLy8gdG8gYmUgc2V0IGJ5IHRoZSBDTEkgb3IgQVBJXG5cbnZhciBkZWZhdWx0TGV2ZWwgPSBcImluZm9cIjsgLy8gb3B0aW9ucyBuZXcgb3B0aW9ucywgbWVyZ2Ugd2l0aCBvbGQgb3B0aW9uc1xuXG4vKipcbiAqIEBwYXJhbSB7ZmFsc2UgfCB0cnVlIHwgXCJub25lXCIgfCBcImVycm9yXCIgfCBcIndhcm5cIiB8IFwiaW5mb1wiIHwgXCJsb2dcIiB8IFwidmVyYm9zZVwifSBsZXZlbFxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cblxuZnVuY3Rpb24gc2V0TG9nTGV2ZWwobGV2ZWwpIHtcbiAgbG9nZ2VyLmNvbmZpZ3VyZURlZmF1bHRMb2dnZXIoe1xuICAgIGxldmVsOiBsZXZlbFxuICB9KTtcbn1cblxuc2V0TG9nTGV2ZWwoZGVmYXVsdExldmVsKTtcbnZhciBsb2cgPSBsb2dnZXIuZ2V0TG9nZ2VyKG5hbWUpO1xuZXhwb3J0IHsgbG9nLCBzZXRMb2dMZXZlbCB9OyIsImltcG9ydCBnZXRDdXJyZW50U2NyaXB0U291cmNlIGZyb20gXCIuL2dldEN1cnJlbnRTY3JpcHRTb3VyY2UuanNcIjtcbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHJlc291cmNlUXVlcnlcbiAqIEByZXR1cm5zIHt7IFtrZXk6IHN0cmluZ106IHN0cmluZyB8IGJvb2xlYW4gfX1cbiAqL1xuXG5mdW5jdGlvbiBwYXJzZVVSTChyZXNvdXJjZVF1ZXJ5KSB7XG4gIC8qKiBAdHlwZSB7eyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfX0gKi9cbiAgdmFyIG9wdGlvbnMgPSB7fTtcblxuICBpZiAodHlwZW9mIHJlc291cmNlUXVlcnkgPT09IFwic3RyaW5nXCIgJiYgcmVzb3VyY2VRdWVyeSAhPT0gXCJcIikge1xuICAgIHZhciBzZWFyY2hQYXJhbXMgPSByZXNvdXJjZVF1ZXJ5LnN1YnN0cigxKS5zcGxpdChcIiZcIik7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlYXJjaFBhcmFtcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHBhaXIgPSBzZWFyY2hQYXJhbXNbaV0uc3BsaXQoXCI9XCIpO1xuICAgICAgb3B0aW9uc1twYWlyWzBdXSA9IGRlY29kZVVSSUNvbXBvbmVudChwYWlyWzFdKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gRWxzZSwgZ2V0IHRoZSB1cmwgZnJvbSB0aGUgPHNjcmlwdD4gdGhpcyBmaWxlIHdhcyBjYWxsZWQgd2l0aC5cbiAgICB2YXIgc2NyaXB0U291cmNlID0gZ2V0Q3VycmVudFNjcmlwdFNvdXJjZSgpO1xuICAgIHZhciBzY3JpcHRTb3VyY2VVUkw7XG5cbiAgICB0cnkge1xuICAgICAgLy8gVGhlIHBsYWNlaG9sZGVyIGBiYXNlVVJMYCB3aXRoIGB3aW5kb3cubG9jYXRpb24uaHJlZmAsXG4gICAgICAvLyBpcyB0byBhbGxvdyBwYXJzaW5nIG9mIHBhdGgtcmVsYXRpdmUgb3IgcHJvdG9jb2wtcmVsYXRpdmUgVVJMcyxcbiAgICAgIC8vIGFuZCB3aWxsIGhhdmUgbm8gZWZmZWN0IGlmIGBzY3JpcHRTb3VyY2VgIGlzIGEgZnVsbHkgdmFsaWQgVVJMLlxuICAgICAgc2NyaXB0U291cmNlVVJMID0gbmV3IFVSTChzY3JpcHRTb3VyY2UsIHNlbGYubG9jYXRpb24uaHJlZik7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHsvLyBVUkwgcGFyc2luZyBmYWlsZWQsIGRvIG5vdGhpbmcuXG4gICAgICAvLyBXZSB3aWxsIHN0aWxsIHByb2NlZWQgdG8gc2VlIGlmIHdlIGNhbiByZWNvdmVyIHVzaW5nIGByZXNvdXJjZVF1ZXJ5YFxuICAgIH1cblxuICAgIGlmIChzY3JpcHRTb3VyY2VVUkwpIHtcbiAgICAgIG9wdGlvbnMgPSBzY3JpcHRTb3VyY2VVUkw7XG4gICAgICBvcHRpb25zLmZyb21DdXJyZW50U2NyaXB0ID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gb3B0aW9ucztcbn1cblxuZXhwb3J0IGRlZmF1bHQgcGFyc2VVUkw7IiwiaW1wb3J0IGhvdEVtaXR0ZXIgZnJvbSBcIndlYnBhY2svaG90L2VtaXR0ZXIuanNcIjtcbmltcG9ydCB7IGxvZyB9IGZyb20gXCIuL2xvZy5qc1wiO1xuLyoqIEB0eXBlZGVmIHtpbXBvcnQoXCIuLi9pbmRleFwiKS5PcHRpb25zfSBPcHRpb25zXG4vKiogQHR5cGVkZWYge2ltcG9ydChcIi4uL2luZGV4XCIpLlN0YXR1c30gU3RhdHVzXG5cbi8qKlxuICogQHBhcmFtIHtPcHRpb25zfSBvcHRpb25zXG4gKiBAcGFyYW0ge1N0YXR1c30gc3RhdHVzXG4gKi9cblxuZnVuY3Rpb24gcmVsb2FkQXBwKF9yZWYsIHN0YXR1cykge1xuICB2YXIgaG90ID0gX3JlZi5ob3QsXG4gICAgICBsaXZlUmVsb2FkID0gX3JlZi5saXZlUmVsb2FkO1xuXG4gIGlmIChzdGF0dXMuaXNVbmxvYWRpbmcpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgY3VycmVudEhhc2ggPSBzdGF0dXMuY3VycmVudEhhc2gsXG4gICAgICBwcmV2aW91c0hhc2ggPSBzdGF0dXMucHJldmlvdXNIYXNoO1xuICB2YXIgaXNJbml0aWFsID0gY3VycmVudEhhc2guaW5kZXhPZihcbiAgLyoqIEB0eXBlIHtzdHJpbmd9ICovXG4gIHByZXZpb3VzSGFzaCkgPj0gMDtcblxuICBpZiAoaXNJbml0aWFsKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIC8qKlxuICAgKiBAcGFyYW0ge1dpbmRvd30gcm9vdFdpbmRvd1xuICAgKiBAcGFyYW0ge251bWJlcn0gaW50ZXJ2YWxJZFxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGFwcGx5UmVsb2FkKHJvb3RXaW5kb3csIGludGVydmFsSWQpIHtcbiAgICBjbGVhckludGVydmFsKGludGVydmFsSWQpO1xuICAgIGxvZy5pbmZvKFwiQXBwIHVwZGF0ZWQuIFJlbG9hZGluZy4uLlwiKTtcbiAgICByb290V2luZG93LmxvY2F0aW9uLnJlbG9hZCgpO1xuICB9XG5cbiAgdmFyIHNlYXJjaCA9IHNlbGYubG9jYXRpb24uc2VhcmNoLnRvTG93ZXJDYXNlKCk7XG4gIHZhciBhbGxvd1RvSG90ID0gc2VhcmNoLmluZGV4T2YoXCJ3ZWJwYWNrLWRldi1zZXJ2ZXItaG90PWZhbHNlXCIpID09PSAtMTtcbiAgdmFyIGFsbG93VG9MaXZlUmVsb2FkID0gc2VhcmNoLmluZGV4T2YoXCJ3ZWJwYWNrLWRldi1zZXJ2ZXItbGl2ZS1yZWxvYWQ9ZmFsc2VcIikgPT09IC0xO1xuXG4gIGlmIChob3QgJiYgYWxsb3dUb0hvdCkge1xuICAgIGxvZy5pbmZvKFwiQXBwIGhvdCB1cGRhdGUuLi5cIik7XG4gICAgaG90RW1pdHRlci5lbWl0KFwid2VicGFja0hvdFVwZGF0ZVwiLCBzdGF0dXMuY3VycmVudEhhc2gpO1xuXG4gICAgaWYgKHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiICYmIHNlbGYud2luZG93KSB7XG4gICAgICAvLyBicm9hZGNhc3QgdXBkYXRlIHRvIHdpbmRvd1xuICAgICAgc2VsZi5wb3N0TWVzc2FnZShcIndlYnBhY2tIb3RVcGRhdGVcIi5jb25jYXQoc3RhdHVzLmN1cnJlbnRIYXNoKSwgXCIqXCIpO1xuICAgIH1cbiAgfSAvLyBhbGxvdyByZWZyZXNoaW5nIHRoZSBwYWdlIG9ubHkgaWYgbGl2ZVJlbG9hZCBpc24ndCBkaXNhYmxlZFxuICBlbHNlIGlmIChsaXZlUmVsb2FkICYmIGFsbG93VG9MaXZlUmVsb2FkKSB7XG4gICAgdmFyIHJvb3RXaW5kb3cgPSBzZWxmOyAvLyB1c2UgcGFyZW50IHdpbmRvdyBmb3IgcmVsb2FkIChpbiBjYXNlIHdlJ3JlIGluIGFuIGlmcmFtZSB3aXRoIG5vIHZhbGlkIHNyYylcblxuICAgIHZhciBpbnRlcnZhbElkID0gc2VsZi5zZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAocm9vdFdpbmRvdy5sb2NhdGlvbi5wcm90b2NvbCAhPT0gXCJhYm91dDpcIikge1xuICAgICAgICAvLyByZWxvYWQgaW1tZWRpYXRlbHkgaWYgcHJvdG9jb2wgaXMgdmFsaWRcbiAgICAgICAgYXBwbHlSZWxvYWQocm9vdFdpbmRvdywgaW50ZXJ2YWxJZCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByb290V2luZG93ID0gcm9vdFdpbmRvdy5wYXJlbnQ7XG5cbiAgICAgICAgaWYgKHJvb3RXaW5kb3cucGFyZW50ID09PSByb290V2luZG93KSB7XG4gICAgICAgICAgLy8gaWYgcGFyZW50IGVxdWFscyBjdXJyZW50IHdpbmRvdyB3ZSd2ZSByZWFjaGVkIHRoZSByb290IHdoaWNoIHdvdWxkIGNvbnRpbnVlIGZvcmV2ZXIsIHNvIHRyaWdnZXIgYSByZWxvYWQgYW55d2F5c1xuICAgICAgICAgIGFwcGx5UmVsb2FkKHJvb3RXaW5kb3csIGludGVydmFsSWQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgcmVsb2FkQXBwOyIsIi8qIGdsb2JhbCBfX3Jlc291cmNlUXVlcnkgV29ya2VyR2xvYmFsU2NvcGUgKi9cbi8vIFNlbmQgbWVzc2FnZXMgdG8gdGhlIG91dHNpZGUsIHNvIHBsdWdpbnMgY2FuIGNvbnN1bWUgaXQuXG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHR5cGVcbiAqIEBwYXJhbSB7YW55fSBbZGF0YV1cbiAqL1xuZnVuY3Rpb24gc2VuZE1zZyh0eXBlLCBkYXRhKSB7XG4gIGlmICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiAmJiAodHlwZW9mIFdvcmtlckdsb2JhbFNjb3BlID09PSBcInVuZGVmaW5lZFwiIHx8ICEoc2VsZiBpbnN0YW5jZW9mIFdvcmtlckdsb2JhbFNjb3BlKSkpIHtcbiAgICBzZWxmLnBvc3RNZXNzYWdlKHtcbiAgICAgIHR5cGU6IFwid2VicGFja1wiLmNvbmNhdCh0eXBlKSxcbiAgICAgIGRhdGE6IGRhdGFcbiAgICB9LCBcIipcIik7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgc2VuZE1zZzsiLCJ2YXIgRXZlbnRFbWl0dGVyID0gcmVxdWlyZShcImV2ZW50c1wiKTtcbm1vZHVsZS5leHBvcnRzID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuIiwidmFyIGxvZ0xldmVsID0gXCJpbmZvXCI7XG5cbmZ1bmN0aW9uIGR1bW15KCkge31cblxuZnVuY3Rpb24gc2hvdWxkTG9nKGxldmVsKSB7XG5cdHZhciBzaG91bGRMb2cgPVxuXHRcdChsb2dMZXZlbCA9PT0gXCJpbmZvXCIgJiYgbGV2ZWwgPT09IFwiaW5mb1wiKSB8fFxuXHRcdChbXCJpbmZvXCIsIFwid2FybmluZ1wiXS5pbmRleE9mKGxvZ0xldmVsKSA+PSAwICYmIGxldmVsID09PSBcIndhcm5pbmdcIikgfHxcblx0XHQoW1wiaW5mb1wiLCBcIndhcm5pbmdcIiwgXCJlcnJvclwiXS5pbmRleE9mKGxvZ0xldmVsKSA+PSAwICYmIGxldmVsID09PSBcImVycm9yXCIpO1xuXHRyZXR1cm4gc2hvdWxkTG9nO1xufVxuXG5mdW5jdGlvbiBsb2dHcm91cChsb2dGbikge1xuXHRyZXR1cm4gZnVuY3Rpb24gKGxldmVsLCBtc2cpIHtcblx0XHRpZiAoc2hvdWxkTG9nKGxldmVsKSkge1xuXHRcdFx0bG9nRm4obXNnKTtcblx0XHR9XG5cdH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxldmVsLCBtc2cpIHtcblx0aWYgKHNob3VsZExvZyhsZXZlbCkpIHtcblx0XHRpZiAobGV2ZWwgPT09IFwiaW5mb1wiKSB7XG5cdFx0XHRjb25zb2xlLmxvZyhtc2cpO1xuXHRcdH0gZWxzZSBpZiAobGV2ZWwgPT09IFwid2FybmluZ1wiKSB7XG5cdFx0XHRjb25zb2xlLndhcm4obXNnKTtcblx0XHR9IGVsc2UgaWYgKGxldmVsID09PSBcImVycm9yXCIpIHtcblx0XHRcdGNvbnNvbGUuZXJyb3IobXNnKTtcblx0XHR9XG5cdH1cbn07XG5cbi8qIGVzbGludC1kaXNhYmxlIG5vZGUvbm8tdW5zdXBwb3J0ZWQtZmVhdHVyZXMvbm9kZS1idWlsdGlucyAqL1xudmFyIGdyb3VwID0gY29uc29sZS5ncm91cCB8fCBkdW1teTtcbnZhciBncm91cENvbGxhcHNlZCA9IGNvbnNvbGUuZ3JvdXBDb2xsYXBzZWQgfHwgZHVtbXk7XG52YXIgZ3JvdXBFbmQgPSBjb25zb2xlLmdyb3VwRW5kIHx8IGR1bW15O1xuLyogZXNsaW50LWVuYWJsZSBub2RlL25vLXVuc3VwcG9ydGVkLWZlYXR1cmVzL25vZGUtYnVpbHRpbnMgKi9cblxubW9kdWxlLmV4cG9ydHMuZ3JvdXAgPSBsb2dHcm91cChncm91cCk7XG5cbm1vZHVsZS5leHBvcnRzLmdyb3VwQ29sbGFwc2VkID0gbG9nR3JvdXAoZ3JvdXBDb2xsYXBzZWQpO1xuXG5tb2R1bGUuZXhwb3J0cy5ncm91cEVuZCA9IGxvZ0dyb3VwKGdyb3VwRW5kKTtcblxubW9kdWxlLmV4cG9ydHMuc2V0TG9nTGV2ZWwgPSBmdW5jdGlvbiAobGV2ZWwpIHtcblx0bG9nTGV2ZWwgPSBsZXZlbDtcbn07XG5cbm1vZHVsZS5leHBvcnRzLmZvcm1hdEVycm9yID0gZnVuY3Rpb24gKGVycikge1xuXHR2YXIgbWVzc2FnZSA9IGVyci5tZXNzYWdlO1xuXHR2YXIgc3RhY2sgPSBlcnIuc3RhY2s7XG5cdGlmICghc3RhY2spIHtcblx0XHRyZXR1cm4gbWVzc2FnZTtcblx0fSBlbHNlIGlmIChzdGFjay5pbmRleE9mKG1lc3NhZ2UpIDwgMCkge1xuXHRcdHJldHVybiBtZXNzYWdlICsgXCJcXG5cIiArIHN0YWNrO1xuXHR9IGVsc2Uge1xuXHRcdHJldHVybiBzdGFjaztcblx0fVxufTtcbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdGxvYWRlZDogZmFsc2UsXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuXHRtb2R1bGUubG9hZGVkID0gdHJ1ZTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbi8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBfX3dlYnBhY2tfbW9kdWxlc19fO1xuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdGZ1bmN0aW9uKCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuXHRcdGZ1bmN0aW9uKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgZGVmaW5pdGlvbikge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmggPSBmdW5jdGlvbigpIHsgcmV0dXJuIFwiNGZhODM4NTI4ZmM4NjdlNGFkYzVcIjsgfSIsIl9fd2VicGFja19yZXF1aXJlX18uZyA9IChmdW5jdGlvbigpIHtcblx0aWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSAnb2JqZWN0JykgcmV0dXJuIGdsb2JhbFRoaXM7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIHRoaXMgfHwgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHJldHVybiB3aW5kb3c7XG5cdH1cbn0pKCk7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5obWQgPSBmdW5jdGlvbihtb2R1bGUpIHtcblx0bW9kdWxlID0gT2JqZWN0LmNyZWF0ZShtb2R1bGUpO1xuXHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsICdleHBvcnRzJywge1xuXHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0c2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcignRVMgTW9kdWxlcyBtYXkgbm90IGFzc2lnbiBtb2R1bGUuZXhwb3J0cyBvciBleHBvcnRzLiosIFVzZSBFU00gZXhwb3J0IHN5bnRheCwgaW5zdGVhZDogJyArIG1vZHVsZS5pZCk7XG5cdFx0fVxuXHR9KTtcblx0cmV0dXJuIG1vZHVsZTtcbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqLCBwcm9wKSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKTsgfSIsIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcblx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cdH1cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5iID0gZG9jdW1lbnQuYmFzZVVSSSB8fCBzZWxmLmxvY2F0aW9uLmhyZWY7XG5cbi8vIG9iamVjdCB0byBzdG9yZSBsb2FkZWQgYW5kIGxvYWRpbmcgY2h1bmtzXG4vLyB1bmRlZmluZWQgPSBjaHVuayBub3QgbG9hZGVkLCBudWxsID0gY2h1bmsgcHJlbG9hZGVkL3ByZWZldGNoZWRcbi8vIFtyZXNvbHZlLCByZWplY3QsIFByb21pc2VdID0gY2h1bmsgbG9hZGluZywgMCA9IGNodW5rIGxvYWRlZFxudmFyIGluc3RhbGxlZENodW5rcyA9IHtcblx0XCJtYWluXCI6IDBcbn07XG5cbi8vIG5vIGNodW5rIG9uIGRlbWFuZCBsb2FkaW5nXG5cbi8vIG5vIHByZWZldGNoaW5nXG5cbi8vIG5vIHByZWxvYWRlZFxuXG4vLyBubyBITVJcblxuLy8gbm8gSE1SIG1hbmlmZXN0XG5cbi8vIG5vIG9uIGNodW5rcyBsb2FkZWRcblxuLy8gbm8ganNvbnAgZnVuY3Rpb24iLCIvKiBnbG9iYWwgX19yZXNvdXJjZVF1ZXJ5LCBfX3dlYnBhY2tfaGFzaF9fICovXG4vLy8gPHJlZmVyZW5jZSB0eXBlcz1cIndlYnBhY2svbW9kdWxlXCIgLz5cbmltcG9ydCB3ZWJwYWNrSG90TG9nIGZyb20gXCJ3ZWJwYWNrL2hvdC9sb2cuanNcIjtcbmltcG9ydCBzdHJpcEFuc2kgZnJvbSBcIi4vbW9kdWxlcy9zdHJpcC1hbnNpL2luZGV4LmpzXCI7XG5pbXBvcnQgcGFyc2VVUkwgZnJvbSBcIi4vdXRpbHMvcGFyc2VVUkwuanNcIjtcbmltcG9ydCBzb2NrZXQgZnJvbSBcIi4vc29ja2V0LmpzXCI7XG5pbXBvcnQgeyBmb3JtYXRQcm9ibGVtLCBzaG93LCBoaWRlIH0gZnJvbSBcIi4vb3ZlcmxheS5qc1wiO1xuaW1wb3J0IHsgbG9nLCBzZXRMb2dMZXZlbCB9IGZyb20gXCIuL3V0aWxzL2xvZy5qc1wiO1xuaW1wb3J0IHNlbmRNZXNzYWdlIGZyb20gXCIuL3V0aWxzL3NlbmRNZXNzYWdlLmpzXCI7XG5pbXBvcnQgcmVsb2FkQXBwIGZyb20gXCIuL3V0aWxzL3JlbG9hZEFwcC5qc1wiO1xuaW1wb3J0IGNyZWF0ZVNvY2tldFVSTCBmcm9tIFwiLi91dGlscy9jcmVhdGVTb2NrZXRVUkwuanNcIjtcbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gT3B0aW9uc1xuICogQHByb3BlcnR5IHtib29sZWFufSBob3RcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gbGl2ZVJlbG9hZFxuICogQHByb3BlcnR5IHtib29sZWFufSBwcm9ncmVzc1xuICogQHByb3BlcnR5IHtib29sZWFuIHwgeyB3YXJuaW5ncz86IGJvb2xlYW4sIGVycm9ycz86IGJvb2xlYW4gfX0gb3ZlcmxheVxuICogQHByb3BlcnR5IHtzdHJpbmd9IFtsb2dnaW5nXVxuICogQHByb3BlcnR5IHtudW1iZXJ9IFtyZWNvbm5lY3RdXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBTdGF0dXNcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gaXNVbmxvYWRpbmdcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBjdXJyZW50SGFzaFxuICogQHByb3BlcnR5IHtzdHJpbmd9IFtwcmV2aW91c0hhc2hdXG4gKi9cblxuLyoqXG4gKiBAdHlwZSB7U3RhdHVzfVxuICovXG5cbnZhciBzdGF0dXMgPSB7XG4gIGlzVW5sb2FkaW5nOiBmYWxzZSxcbiAgLy8gVE9ETyBXb3JrYXJvdW5kIGZvciB3ZWJwYWNrIHY0LCBgX193ZWJwYWNrX2hhc2hfX2AgaXMgbm90IHJlcGxhY2VkIHdpdGhvdXQgSG90TW9kdWxlUmVwbGFjZW1lbnRcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNhbWVsY2FzZVxuICBjdXJyZW50SGFzaDogdHlwZW9mIF9fd2VicGFja19oYXNoX18gIT09IFwidW5kZWZpbmVkXCIgPyBfX3dlYnBhY2tfaGFzaF9fIDogXCJcIlxufTtcbi8qKiBAdHlwZSB7T3B0aW9uc30gKi9cblxudmFyIG9wdGlvbnMgPSB7XG4gIGhvdDogZmFsc2UsXG4gIGxpdmVSZWxvYWQ6IGZhbHNlLFxuICBwcm9ncmVzczogZmFsc2UsXG4gIG92ZXJsYXk6IGZhbHNlXG59O1xudmFyIHBhcnNlZFJlc291cmNlUXVlcnkgPSBwYXJzZVVSTChfX3Jlc291cmNlUXVlcnkpO1xuXG5pZiAocGFyc2VkUmVzb3VyY2VRdWVyeS5ob3QgPT09IFwidHJ1ZVwiKSB7XG4gIG9wdGlvbnMuaG90ID0gdHJ1ZTtcbiAgbG9nLmluZm8oXCJIb3QgTW9kdWxlIFJlcGxhY2VtZW50IGVuYWJsZWQuXCIpO1xufVxuXG5pZiAocGFyc2VkUmVzb3VyY2VRdWVyeVtcImxpdmUtcmVsb2FkXCJdID09PSBcInRydWVcIikge1xuICBvcHRpb25zLmxpdmVSZWxvYWQgPSB0cnVlO1xuICBsb2cuaW5mbyhcIkxpdmUgUmVsb2FkaW5nIGVuYWJsZWQuXCIpO1xufVxuXG5pZiAocGFyc2VkUmVzb3VyY2VRdWVyeS5sb2dnaW5nKSB7XG4gIG9wdGlvbnMubG9nZ2luZyA9IHBhcnNlZFJlc291cmNlUXVlcnkubG9nZ2luZztcbn1cblxuaWYgKHR5cGVvZiBwYXJzZWRSZXNvdXJjZVF1ZXJ5LnJlY29ubmVjdCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICBvcHRpb25zLnJlY29ubmVjdCA9IE51bWJlcihwYXJzZWRSZXNvdXJjZVF1ZXJ5LnJlY29ubmVjdCk7XG59XG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBsZXZlbFxuICovXG5cblxuZnVuY3Rpb24gc2V0QWxsTG9nTGV2ZWwobGV2ZWwpIHtcbiAgLy8gVGhpcyBpcyBuZWVkZWQgYmVjYXVzZSB0aGUgSE1SIGxvZ2dlciBvcGVyYXRlIHNlcGFyYXRlbHkgZnJvbSBkZXYgc2VydmVyIGxvZ2dlclxuICB3ZWJwYWNrSG90TG9nLnNldExvZ0xldmVsKGxldmVsID09PSBcInZlcmJvc2VcIiB8fCBsZXZlbCA9PT0gXCJsb2dcIiA/IFwiaW5mb1wiIDogbGV2ZWwpO1xuICBzZXRMb2dMZXZlbChsZXZlbCk7XG59XG5cbmlmIChvcHRpb25zLmxvZ2dpbmcpIHtcbiAgc2V0QWxsTG9nTGV2ZWwob3B0aW9ucy5sb2dnaW5nKTtcbn1cblxuc2VsZi5hZGRFdmVudExpc3RlbmVyKFwiYmVmb3JldW5sb2FkXCIsIGZ1bmN0aW9uICgpIHtcbiAgc3RhdHVzLmlzVW5sb2FkaW5nID0gdHJ1ZTtcbn0pO1xudmFyIG9uU29ja2V0TWVzc2FnZSA9IHtcbiAgaG90OiBmdW5jdGlvbiBob3QoKSB7XG4gICAgaWYgKHBhcnNlZFJlc291cmNlUXVlcnkuaG90ID09PSBcImZhbHNlXCIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBvcHRpb25zLmhvdCA9IHRydWU7XG4gICAgbG9nLmluZm8oXCJIb3QgTW9kdWxlIFJlcGxhY2VtZW50IGVuYWJsZWQuXCIpO1xuICB9LFxuICBsaXZlUmVsb2FkOiBmdW5jdGlvbiBsaXZlUmVsb2FkKCkge1xuICAgIGlmIChwYXJzZWRSZXNvdXJjZVF1ZXJ5W1wibGl2ZS1yZWxvYWRcIl0gPT09IFwiZmFsc2VcIikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIG9wdGlvbnMubGl2ZVJlbG9hZCA9IHRydWU7XG4gICAgbG9nLmluZm8oXCJMaXZlIFJlbG9hZGluZyBlbmFibGVkLlwiKTtcbiAgfSxcbiAgaW52YWxpZDogZnVuY3Rpb24gaW52YWxpZCgpIHtcbiAgICBsb2cuaW5mbyhcIkFwcCB1cGRhdGVkLiBSZWNvbXBpbGluZy4uLlwiKTsgLy8gRml4ZXMgIzEwNDIuIG92ZXJsYXkgZG9lc24ndCBjbGVhciBpZiBlcnJvcnMgYXJlIGZpeGVkIGJ1dCB3YXJuaW5ncyByZW1haW4uXG5cbiAgICBpZiAob3B0aW9ucy5vdmVybGF5KSB7XG4gICAgICBoaWRlKCk7XG4gICAgfVxuXG4gICAgc2VuZE1lc3NhZ2UoXCJJbnZhbGlkXCIpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gaGFzaFxuICAgKi9cbiAgaGFzaDogZnVuY3Rpb24gaGFzaChfaGFzaCkge1xuICAgIHN0YXR1cy5wcmV2aW91c0hhc2ggPSBzdGF0dXMuY3VycmVudEhhc2g7XG4gICAgc3RhdHVzLmN1cnJlbnRIYXNoID0gX2hhc2g7XG4gIH0sXG4gIGxvZ2dpbmc6IHNldEFsbExvZ0xldmVsLFxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHZhbHVlXG4gICAqL1xuICBvdmVybGF5OiBmdW5jdGlvbiBvdmVybGF5KHZhbHVlKSB7XG4gICAgaWYgKHR5cGVvZiBkb2N1bWVudCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIG9wdGlvbnMub3ZlcmxheSA9IHZhbHVlO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0gdmFsdWVcbiAgICovXG4gIHJlY29ubmVjdDogZnVuY3Rpb24gcmVjb25uZWN0KHZhbHVlKSB7XG4gICAgaWYgKHBhcnNlZFJlc291cmNlUXVlcnkucmVjb25uZWN0ID09PSBcImZhbHNlXCIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBvcHRpb25zLnJlY29ubmVjdCA9IHZhbHVlO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHZhbHVlXG4gICAqL1xuICBwcm9ncmVzczogZnVuY3Rpb24gcHJvZ3Jlc3ModmFsdWUpIHtcbiAgICBvcHRpb25zLnByb2dyZXNzID0gdmFsdWU7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7eyBwbHVnaW5OYW1lPzogc3RyaW5nLCBwZXJjZW50OiBudW1iZXIsIG1zZzogc3RyaW5nIH19IGRhdGFcbiAgICovXG4gIFwicHJvZ3Jlc3MtdXBkYXRlXCI6IGZ1bmN0aW9uIHByb2dyZXNzVXBkYXRlKGRhdGEpIHtcbiAgICBpZiAob3B0aW9ucy5wcm9ncmVzcykge1xuICAgICAgbG9nLmluZm8oXCJcIi5jb25jYXQoZGF0YS5wbHVnaW5OYW1lID8gXCJbXCIuY29uY2F0KGRhdGEucGx1Z2luTmFtZSwgXCJdIFwiKSA6IFwiXCIpLmNvbmNhdChkYXRhLnBlcmNlbnQsIFwiJSAtIFwiKS5jb25jYXQoZGF0YS5tc2csIFwiLlwiKSk7XG4gICAgfVxuXG4gICAgc2VuZE1lc3NhZ2UoXCJQcm9ncmVzc1wiLCBkYXRhKTtcbiAgfSxcbiAgXCJzdGlsbC1va1wiOiBmdW5jdGlvbiBzdGlsbE9rKCkge1xuICAgIGxvZy5pbmZvKFwiTm90aGluZyBjaGFuZ2VkLlwiKTtcblxuICAgIGlmIChvcHRpb25zLm92ZXJsYXkpIHtcbiAgICAgIGhpZGUoKTtcbiAgICB9XG5cbiAgICBzZW5kTWVzc2FnZShcIlN0aWxsT2tcIik7XG4gIH0sXG4gIG9rOiBmdW5jdGlvbiBvaygpIHtcbiAgICBzZW5kTWVzc2FnZShcIk9rXCIpO1xuXG4gICAgaWYgKG9wdGlvbnMub3ZlcmxheSkge1xuICAgICAgaGlkZSgpO1xuICAgIH1cblxuICAgIHJlbG9hZEFwcChvcHRpb25zLCBzdGF0dXMpO1xuICB9LFxuICAvLyBUT0RPOiByZW1vdmUgaW4gdjUgaW4gZmF2b3Igb2YgJ3N0YXRpYy1jaGFuZ2VkJ1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZmlsZVxuICAgKi9cbiAgXCJjb250ZW50LWNoYW5nZWRcIjogZnVuY3Rpb24gY29udGVudENoYW5nZWQoZmlsZSkge1xuICAgIGxvZy5pbmZvKFwiXCIuY29uY2F0KGZpbGUgPyBcIlxcXCJcIi5jb25jYXQoZmlsZSwgXCJcXFwiXCIpIDogXCJDb250ZW50XCIsIFwiIGZyb20gc3RhdGljIGRpcmVjdG9yeSB3YXMgY2hhbmdlZC4gUmVsb2FkaW5nLi4uXCIpKTtcbiAgICBzZWxmLmxvY2F0aW9uLnJlbG9hZCgpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZmlsZVxuICAgKi9cbiAgXCJzdGF0aWMtY2hhbmdlZFwiOiBmdW5jdGlvbiBzdGF0aWNDaGFuZ2VkKGZpbGUpIHtcbiAgICBsb2cuaW5mbyhcIlwiLmNvbmNhdChmaWxlID8gXCJcXFwiXCIuY29uY2F0KGZpbGUsIFwiXFxcIlwiKSA6IFwiQ29udGVudFwiLCBcIiBmcm9tIHN0YXRpYyBkaXJlY3Rvcnkgd2FzIGNoYW5nZWQuIFJlbG9hZGluZy4uLlwiKSk7XG4gICAgc2VsZi5sb2NhdGlvbi5yZWxvYWQoKTtcbiAgfSxcblxuICAvKipcbiAgICogQHBhcmFtIHtFcnJvcltdfSB3YXJuaW5nc1xuICAgKiBAcGFyYW0ge2FueX0gcGFyYW1zXG4gICAqL1xuICB3YXJuaW5nczogZnVuY3Rpb24gd2FybmluZ3MoX3dhcm5pbmdzLCBwYXJhbXMpIHtcbiAgICBsb2cud2FybihcIldhcm5pbmdzIHdoaWxlIGNvbXBpbGluZy5cIik7XG5cbiAgICB2YXIgcHJpbnRhYmxlV2FybmluZ3MgPSBfd2FybmluZ3MubWFwKGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgdmFyIF9mb3JtYXRQcm9ibGVtID0gZm9ybWF0UHJvYmxlbShcIndhcm5pbmdcIiwgZXJyb3IpLFxuICAgICAgICAgIGhlYWRlciA9IF9mb3JtYXRQcm9ibGVtLmhlYWRlcixcbiAgICAgICAgICBib2R5ID0gX2Zvcm1hdFByb2JsZW0uYm9keTtcblxuICAgICAgcmV0dXJuIFwiXCIuY29uY2F0KGhlYWRlciwgXCJcXG5cIikuY29uY2F0KHN0cmlwQW5zaShib2R5KSk7XG4gICAgfSk7XG5cbiAgICBzZW5kTWVzc2FnZShcIldhcm5pbmdzXCIsIHByaW50YWJsZVdhcm5pbmdzKTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJpbnRhYmxlV2FybmluZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxvZy53YXJuKHByaW50YWJsZVdhcm5pbmdzW2ldKTtcbiAgICB9XG5cbiAgICB2YXIgbmVlZFNob3dPdmVybGF5Rm9yV2FybmluZ3MgPSB0eXBlb2Ygb3B0aW9ucy5vdmVybGF5ID09PSBcImJvb2xlYW5cIiA/IG9wdGlvbnMub3ZlcmxheSA6IG9wdGlvbnMub3ZlcmxheSAmJiBvcHRpb25zLm92ZXJsYXkud2FybmluZ3M7XG5cbiAgICBpZiAobmVlZFNob3dPdmVybGF5Rm9yV2FybmluZ3MpIHtcbiAgICAgIHNob3coXCJ3YXJuaW5nXCIsIF93YXJuaW5ncyk7XG4gICAgfVxuXG4gICAgaWYgKHBhcmFtcyAmJiBwYXJhbXMucHJldmVudFJlbG9hZGluZykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHJlbG9hZEFwcChvcHRpb25zLCBzdGF0dXMpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0Vycm9yW119IGVycm9yc1xuICAgKi9cbiAgZXJyb3JzOiBmdW5jdGlvbiBlcnJvcnMoX2Vycm9ycykge1xuICAgIGxvZy5lcnJvcihcIkVycm9ycyB3aGlsZSBjb21waWxpbmcuIFJlbG9hZCBwcmV2ZW50ZWQuXCIpO1xuXG4gICAgdmFyIHByaW50YWJsZUVycm9ycyA9IF9lcnJvcnMubWFwKGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgdmFyIF9mb3JtYXRQcm9ibGVtMiA9IGZvcm1hdFByb2JsZW0oXCJlcnJvclwiLCBlcnJvciksXG4gICAgICAgICAgaGVhZGVyID0gX2Zvcm1hdFByb2JsZW0yLmhlYWRlcixcbiAgICAgICAgICBib2R5ID0gX2Zvcm1hdFByb2JsZW0yLmJvZHk7XG5cbiAgICAgIHJldHVybiBcIlwiLmNvbmNhdChoZWFkZXIsIFwiXFxuXCIpLmNvbmNhdChzdHJpcEFuc2koYm9keSkpO1xuICAgIH0pO1xuXG4gICAgc2VuZE1lc3NhZ2UoXCJFcnJvcnNcIiwgcHJpbnRhYmxlRXJyb3JzKTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJpbnRhYmxlRXJyb3JzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBsb2cuZXJyb3IocHJpbnRhYmxlRXJyb3JzW2ldKTtcbiAgICB9XG5cbiAgICB2YXIgbmVlZFNob3dPdmVybGF5Rm9yRXJyb3JzID0gdHlwZW9mIG9wdGlvbnMub3ZlcmxheSA9PT0gXCJib29sZWFuXCIgPyBvcHRpb25zLm92ZXJsYXkgOiBvcHRpb25zLm92ZXJsYXkgJiYgb3B0aW9ucy5vdmVybGF5LmVycm9ycztcblxuICAgIGlmIChuZWVkU2hvd092ZXJsYXlGb3JFcnJvcnMpIHtcbiAgICAgIHNob3coXCJlcnJvclwiLCBfZXJyb3JzKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7RXJyb3J9IGVycm9yXG4gICAqL1xuICBlcnJvcjogZnVuY3Rpb24gZXJyb3IoX2Vycm9yKSB7XG4gICAgbG9nLmVycm9yKF9lcnJvcik7XG4gIH0sXG4gIGNsb3NlOiBmdW5jdGlvbiBjbG9zZSgpIHtcbiAgICBsb2cuaW5mbyhcIkRpc2Nvbm5lY3RlZCFcIik7XG5cbiAgICBpZiAob3B0aW9ucy5vdmVybGF5KSB7XG4gICAgICBoaWRlKCk7XG4gICAgfVxuXG4gICAgc2VuZE1lc3NhZ2UoXCJDbG9zZVwiKTtcbiAgfVxufTtcbnZhciBzb2NrZXRVUkwgPSBjcmVhdGVTb2NrZXRVUkwocGFyc2VkUmVzb3VyY2VRdWVyeSk7XG5zb2NrZXQoc29ja2V0VVJMLCBvblNvY2tldE1lc3NhZ2UsIG9wdGlvbnMucmVjb25uZWN0KTsiLCJpbXBvcnQgVnVlIGZyb20gJ3Z1ZSc7XG5pbXBvcnQgQXBwIGZyb20gJy4vQXBwLnZ1ZSc7XG5cblZ1ZS5jb25maWcucHJvZHVjdGlvblRpcCA9IGZhbHNlO1xuXG5uZXcgVnVlKHtcblx0cmVuZGVyOiAoaCkgPT4gaChBcHApLFxufSkuJG1vdW50KCcjYXBwJyk7XG4iXSwibmFtZXMiOlsicm9vdCIsImZhY3RvcnkiLCJleHBvcnRzIiwibW9kdWxlIiwiZGVmaW5lIiwiYW1kIiwic2VsZiIsImFuc2lIVE1MIiwiX3JlZ0FOU0kiLCJfZGVmQ29sb3JzIiwicmVzZXQiLCJibGFjayIsInJlZCIsImdyZWVuIiwieWVsbG93IiwiYmx1ZSIsIm1hZ2VudGEiLCJjeWFuIiwibGlnaHRncmV5IiwiZGFya2dyZXkiLCJfc3R5bGVzIiwiX29wZW5UYWdzIiwiX2Nsb3NlVGFncyIsInRleHQiLCJ0ZXN0IiwiYW5zaUNvZGVzIiwicmV0IiwicmVwbGFjZSIsIm1hdGNoIiwic2VxIiwib3QiLCJpbmRleE9mIiwicG9wIiwicHVzaCIsImN0IiwibCIsImxlbmd0aCIsIkFycmF5Iiwiam9pbiIsIl9zZXRUYWdzIiwiY29sb3JzIiwiY29kZSIsIm9yaUNvbG9yIiwicGFyc2VJbnQiLCJ0b1N0cmluZyIsImZvckVhY2giLCJuIiwic2V0Q29sb3JzIiwiRXJyb3IiLCJfZmluYWxDb2xvcnMiLCJrZXkiLCJoZXgiLCJoYXNPd25Qcm9wZXJ0eSIsImlzQXJyYXkiLCJzb21lIiwiaCIsImRlZkhleENvbG9yIiwic2xpY2UiLCJ0YWdzIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXQiLCJvcGVuIiwiY2xvc2UiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiJGJ1cyIsIm5hbWUiLCJjb21wb25lbnRzIiwiVW5pY29ybkxvZyIsImRhdGEiLCJsaW5rcyIsImdpdGh1YiIsIm5wbSIsIlZ1ZSIsIlZ1ZUNvZGVIaWdobGlnaHQiLCJtZXRob2RzIiwic2ltcGxlRXhhbXBsZSIsImFycmF5Iiwib2JqZWN0QXJyYXkiLCJmb28iLCJiYXIiLCJhcnJheVNwcmVhZE9wZXJhdG9yIiwiaXNEaXNhYmxlZCIsImRpc2FibGVkIiwicHJvcHMiLCJpc05hbWVPcHRpb24iLCJ0eXBlIiwiZGVmYXVsdCIsImxvZ1ByZWZpeCIsIndpdGhOYW1lIiwiZXhhbXBsZU5hbWUiLCJleGFtcGxlTmFtZURlZmF1bHQiLCJtYWdpY2FsIiwib2JqZWN0cyIsIm11bHRpcGxlT2JqZWN0cyIsIm9iamVjdFNwcmVhZE9wZXJhdG9yIiwiZGVmYXVsdFN0eWxlcyIsIm1hZ2ljYWxXb3JkIiwibWFnaWNhbFdvcmRzIiwiYXJyYXlFeGFtcGxlIiwic3R5bGVzIiwid29yZEV4YW1wbGUiLCJsb2dOb3RlIiwibG9nVHlwZSIsInR5cGVzIiwiY2hlY2tUeXBlIiwiQXJyYXlzRXhhbXBsZSIsIkRpc2FibGVkRXhhbXBsZSIsIkxvZ1ByZWZpeEV4YW1wbGUiLCJNYWdpY2FsRXhhbXBsZSIsIk5hdiIsIk9iamVjdHNFeGFtcGxlcyIsIlNpbXBsZUV4YW1wbGUiLCJTdHlsZXNFeGFtcGxlIiwiVGV4dEV4YW1wbGUiLCJUeXBlRXhhbXBsZSIsImNvcHkiLCJvYmplY3QiLCJvcHRpb25zIiwiYm9vbGVhbiIsInJhaW5ib3dMaW5lYXJHcmFkaWVudCIsInRlc3RBcnJheXMiLCJ0ZXN0T2JqZWN0cyIsImZvb1R3byIsImJhclR3byIsIm1vdW50ZWQiLCJ0ZXN0aW5nTG9ncyIsInRlc3RPYmoxIiwidGVzdE9iajIiLCJ0ZXN0T2JqMyIsImJhclRocmVlIiwiZm9vVGhyZWUiLCJ3ZWxjb21lTG9nIiwiaW5zdGFsbCIsIk1hZ2ljYWwiLCJwcm90b3R5cGUiLCIkdW5pY29ybkxvZyIsIiR1bmlMb2ciLCJ0aGlzIiwibG9nT3B0aW9ucyIsIlVuaWNvcm5Mb2dDb3JlIiwiZXJyb3JzIiwib3V0cHV0IiwicGx1Z2luT3B0aW9ucyIsImxvZyIsImluZm8iLCJnb051dHMiLCJtYWdpY2FsU3R5bGVOYW1lcyIsImRlZmF1bHRPcHRpb25zIiwiaW5pdCIsInZhbHVlcyIsInZhbGlkYXRlT3B0aW9ucyIsIm1hcCIsInZhbHVlIiwiY2FsbCIsImJ1aWxkIiwiY29uc29sZU91dHB1dCIsImluY2x1ZGVzIiwibG9nZ2VyIiwiTnVtYmVyIiwiaXNJbnRlZ2VyIiwiQm9vbGVhbiIsInByZWZpeCIsInJlc3VsdHMiLCJrZXlzIiwiY29uc29sZURpciIsImFzc2lnbiIsImNvbnNvbGVUYWJsZSIsImNvbnNvbGVNZXRob2ROb3RTdXBwb3J0ZWQiLCJjb25zb2xlIiwibXNnIiwibGFiZWwiLCJjaGFyQXQiLCJ0b1VwcGVyQ2FzZSIsInN0eWxlIiwiX19fQ1NTX0xPQURFUl9FWFBPUlRfX18iLCJpZCIsIl9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8wX19fIiwiVVJMIiwiX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fXyIsImkiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibGlzdCIsIml0ZW0iLCJjb250ZW50IiwibmVlZExheWVyIiwiY29uY2F0IiwibW9kdWxlcyIsIm1lZGlhIiwiZGVkdXBlIiwic3VwcG9ydHMiLCJsYXllciIsInVuZGVmaW5lZCIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJrIiwiX2siLCJ1cmwiLCJTdHJpbmciLCJfX2VzTW9kdWxlIiwiaGFzaCIsIm5lZWRRdW90ZXMiLCJjc3NNYXBwaW5nIiwiYnRvYSIsImJhc2U2NCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsInNvdXJjZU1hcHBpbmciLCJzb3VyY2VVUkxzIiwic291cmNlcyIsInNvdXJjZSIsInNvdXJjZVJvb3QiLCJSZWZsZWN0T3duS2V5cyIsIlIiLCJSZWZsZWN0IiwiUmVmbGVjdEFwcGx5IiwiYXBwbHkiLCJ0YXJnZXQiLCJyZWNlaXZlciIsImFyZ3MiLCJGdW5jdGlvbiIsIm93bktleXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiTnVtYmVySXNOYU4iLCJpc05hTiIsIkV2ZW50RW1pdHRlciIsIm9uY2UiLCJlbWl0dGVyIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJlcnJvckxpc3RlbmVyIiwiZXJyIiwicmVtb3ZlTGlzdGVuZXIiLCJyZXNvbHZlciIsImFyZ3VtZW50cyIsImV2ZW50VGFyZ2V0QWdub3N0aWNBZGRMaXN0ZW5lciIsImhhbmRsZXIiLCJmbGFncyIsIm9uIiwiYWRkRXJyb3JIYW5kbGVySWZFdmVudEVtaXR0ZXIiLCJfZXZlbnRzIiwiX2V2ZW50c0NvdW50IiwiX21heExpc3RlbmVycyIsImRlZmF1bHRNYXhMaXN0ZW5lcnMiLCJjaGVja0xpc3RlbmVyIiwibGlzdGVuZXIiLCJUeXBlRXJyb3IiLCJfZ2V0TWF4TGlzdGVuZXJzIiwidGhhdCIsIl9hZGRMaXN0ZW5lciIsInByZXBlbmQiLCJtIiwiZXZlbnRzIiwiZXhpc3RpbmciLCJ3YXJuaW5nIiwiY3JlYXRlIiwibmV3TGlzdGVuZXIiLCJlbWl0IiwidW5zaGlmdCIsIndhcm5lZCIsInciLCJjb3VudCIsIndhcm4iLCJvbmNlV3JhcHBlciIsImZpcmVkIiwid3JhcEZuIiwiX29uY2VXcmFwIiwic3RhdGUiLCJ3cmFwcGVkIiwiYmluZCIsIl9saXN0ZW5lcnMiLCJ1bndyYXAiLCJldmxpc3RlbmVyIiwiYXJyIiwidW53cmFwTGlzdGVuZXJzIiwiYXJyYXlDbG9uZSIsImxpc3RlbmVyQ291bnQiLCJhZGRFdmVudExpc3RlbmVyIiwid3JhcExpc3RlbmVyIiwiYXJnIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImVudW1lcmFibGUiLCJzZXQiLCJSYW5nZUVycm9yIiwiZ2V0UHJvdG90eXBlT2YiLCJzZXRNYXhMaXN0ZW5lcnMiLCJnZXRNYXhMaXN0ZW5lcnMiLCJkb0Vycm9yIiwiZXJyb3IiLCJlciIsIm1lc3NhZ2UiLCJjb250ZXh0IiwibGVuIiwibGlzdGVuZXJzIiwiYWRkTGlzdGVuZXIiLCJwcmVwZW5kTGlzdGVuZXIiLCJwcmVwZW5kT25jZUxpc3RlbmVyIiwicG9zaXRpb24iLCJvcmlnaW5hbExpc3RlbmVyIiwic2hpZnQiLCJpbmRleCIsInNwbGljZU9uZSIsIm9mZiIsInJlbW92ZUFsbExpc3RlbmVycyIsInJhd0xpc3RlbmVycyIsImV2ZW50TmFtZXMiLCJfX2Fzc2lnbiIsInQiLCJzIiwicCIsIm5hbWVkX3JlZmVyZW5jZXNfMSIsIm51bWVyaWNfdW5pY29kZV9tYXBfMSIsInN1cnJvZ2F0ZV9wYWlyc18xIiwiYWxsTmFtZWRSZWZlcmVuY2VzIiwibmFtZWRSZWZlcmVuY2VzIiwiYWxsIiwiaHRtbDUiLCJlbmNvZGVSZWdFeHBzIiwic3BlY2lhbENoYXJzIiwibm9uQXNjaWkiLCJub25Bc2NpaVByaW50YWJsZSIsImV4dGVuc2l2ZSIsImRlZmF1bHRFbmNvZGVPcHRpb25zIiwibW9kZSIsImxldmVsIiwibnVtZXJpYyIsImVuY29kZSIsIl9hIiwiX2MiLCJfYiIsIl9kIiwiX2UiLCJlbmNvZGVSZWdFeHAiLCJyZWZlcmVuY2VzIiwiY2hhcmFjdGVycyIsImlzSGV4IiwibGFzdEluZGV4IiwiZXhlYyIsInN1YnN0cmluZyIsInJlc3VsdF8xIiwiY29kZV8xIiwiZ2V0Q29kZVBvaW50IiwiY2hhckNvZGVBdCIsImRlZmF1bHREZWNvZGVPcHRpb25zIiwic2NvcGUiLCJzdHJpY3QiLCJhdHRyaWJ1dGUiLCJiYXNlRGVjb2RlUmVnRXhwcyIsInhtbCIsImJvZHkiLCJib2R5UmVnRXhwcyIsImh0bWw0IiwiZGVjb2RlUmVnRXhwcyIsImZyb21DaGFyQ29kZSIsIm91dE9mQm91bmRzQ2hhciIsImRlZmF1bHREZWNvZGVFbnRpdHlPcHRpb25zIiwiZGVjb2RlRW50aXR5IiwiZW50aXR5IiwiZGVjb2RlUmVzdWx0QnlSZWZlcmVuY2VfMSIsImVudGl0aWVzIiwiZGVjb2RlU2Vjb25kQ2hhcl8xIiwiZGVjb2RlQ29kZV8xIiwic3Vic3RyIiwiZnJvbUNvZGVQb2ludCIsIm51bWVyaWNVbmljb2RlTWFwIiwiZGVjb2RlIiwiZGVjb2RlUmVnRXhwIiwiaXNBdHRyaWJ1dGUiLCJpc1N0cmljdCIsInJlcGxhY2VSZXN1bHRfMSIsInJlcGxhY2VNYXRjaF8xIiwicmVwbGFjZUxhc3RJbmRleF8xIiwicmVwbGFjZUlucHV0XzEiLCJkZWNvZGVSZXN1bHRfMSIsImRlY29kZUVudGl0eUxhc3RDaGFyXzIiLCJkZWNvZGVSZXN1bHRCeVJlZmVyZW5jZV8yIiwiZGVjb2RlU2Vjb25kQ2hhcl8yIiwiZGVjb2RlQ29kZV8yIiwiXyIsIiQiLCJmaiIsImFzdHJhbENvZGVQb2ludCIsIk1hdGgiLCJmbG9vciIsImNvZGVQb2ludEF0IiwiaW5wdXQiLCJoaWdoU3Vycm9nYXRlRnJvbSIsImhpZ2hTdXJyb2dhdGVUbyIsImxhbmciLCJ1bmlxdWVJZCIsIlRva2VuIiwiX3NlbGYiLCJQcmlzbSIsIm1hbnVhbCIsImRpc2FibGVXb3JrZXJNZXNzYWdlSGFuZGxlciIsInV0aWwiLCJ0b2tlbnMiLCJhbGlhcyIsIm8iLCJvYmpJZCIsIm9iaiIsImNsb25lIiwidmlzaXRlZCIsInYiLCJsYW5ndWFnZXMiLCJleHRlbmQiLCJyZWRlZiIsImluc2VydEJlZm9yZSIsImluc2lkZSIsImJlZm9yZSIsImluc2VydCIsImdyYW1tYXIiLCJuZXdUb2tlbiIsInRva2VuIiwiREZTIiwiY2FsbGJhY2siLCJwbHVnaW5zIiwiaGlnaGxpZ2h0QWxsIiwiYXN5bmMiLCJoaWdobGlnaHRBbGxVbmRlciIsImRvY3VtZW50IiwiY29udGFpbmVyIiwiZW52Iiwic2VsZWN0b3IiLCJob29rcyIsInJ1biIsImVsZW1lbnQiLCJlbGVtZW50cyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJoaWdobGlnaHRFbGVtZW50IiwibGFuZ3VhZ2UiLCJwYXJlbnQiLCJjbGFzc05hbWUiLCJwYXJlbnROb2RlIiwidG9Mb3dlckNhc2UiLCJub2RlTmFtZSIsInRleHRDb250ZW50IiwiV29ya2VyIiwid29ya2VyIiwiZmlsZW5hbWUiLCJvbm1lc3NhZ2UiLCJldnQiLCJoaWdobGlnaHRlZENvZGUiLCJpbm5lckhUTUwiLCJwb3N0TWVzc2FnZSIsImltbWVkaWF0ZUNsb3NlIiwiaGlnaGxpZ2h0IiwidG9rZW5pemUiLCJtYXRjaEdyYW1tYXIiLCJzdHJhcnIiLCJzdGFydFBvcyIsIm9uZXNob3QiLCJwYXR0ZXJucyIsImoiLCJwYXR0ZXJuIiwibG9va2JlaGluZCIsImdyZWVkeSIsImxvb2tiZWhpbmRMZW5ndGgiLCJnbG9iYWwiLCJSZWdFeHAiLCJwb3MiLCJzdHIiLCJmcm9tIiwidG8iLCJkZWxOdW0iLCJhZnRlciIsInNwbGljZSIsInJlc3QiLCJhZGQiLCJjYWxsYmFja3MiLCJtYXRjaGVkU3RyIiwidGFnIiwiY2xhc3NlcyIsImF0dHJpYnV0ZXMiLCJhbGlhc2VzIiwicGFyc2UiLCJnIiwibWFya3VwIiwiY29tbWVudCIsInByb2xvZyIsImRvY3R5cGUiLCJjZGF0YSIsInB1bmN0dWF0aW9uIiwibmFtZXNwYWNlIiwiaHRtbCIsIm1hdGhtbCIsInN2ZyIsImNzcyIsImF0cnVsZSIsInJ1bGUiLCJzdHJpbmciLCJwcm9wZXJ0eSIsImltcG9ydGFudCIsImZ1bmN0aW9uIiwiY2xpa2UiLCJrZXl3b3JkIiwibnVtYmVyIiwib3BlcmF0b3IiLCJqYXZhc2NyaXB0IiwicmVnZXgiLCJjb25zdGFudCIsImludGVycG9sYXRpb24iLCJzY3JpcHQiLCJqcyIsImhlYWQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImNyZWF0ZUVsZW1lbnQiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImFwcGVuZENoaWxkIiwiY3JlYXRlVGV4dE5vZGUiLCJDb2RlSGlnaGxpZ2h0IiwicmVuZGVyIiwiX3ZtIiwiX2giLCIkY3JlYXRlRWxlbWVudCIsInJlZiIsImNsYXNzIiwibGFuZ3VhZ2VDbGFzcyIsIl90Iiwic3RhdGljUmVuZGVyRm5zIiwiY29tcHV0ZWQiLCIkcmVmcyIsImNvZGVCbG9jayIsImJlZm9yZVVwZGF0ZSIsIiRzbG90cyIsIm5ld1RleHQiLCIkZWwiLCJxdWVyeVNlbGVjdG9yIiwicmVnaXN0ZXJEaXJlY3RpdmUiLCJlbCIsImluc3RhbGxlZCIsImRpcmVjdGl2ZSIsInBsdWdpbiIsIkdsb2JhbFZ1ZSIsIndpbmRvdyIsInVzZSIsImNvbXBvbmVudCIsIl9fZmlsZSIsIl93aXRoU3RyaXBwZWQiLCJzdGF0aWNDbGFzcyIsImF0dHJzIiwiaHJlZiIsIl92IiwiX20iLCJyb2xlIiwiY2xpY2siLCJkaXJlY3RpdmVzIiwicmF3TmFtZSIsImV4cHJlc3Npb24iLCJjaGVja2VkIiwiZG9tUHJvcHMiLCJfaSIsImNoYW5nZSIsIiRldmVudCIsIiQkYSIsIiQkZWwiLCIkJGMiLCIkJGkiLCJfcyIsInBsYWNlaG9sZGVyIiwiY29tcG9zaW5nIiwiJCRzZWxlY3RlZFZhbCIsImZpbHRlciIsInNlbGVjdGVkIiwiX3ZhbHVlIiwibXVsdGlwbGUiLCJfbCIsIndvcmQiLCJ2YWxpZ24iLCJzdGF0aWNTdHlsZSIsImRpc3BsYXkiLCJ4bWxucyIsImZpbGwiLCJ2aWV3Qm94IiwiZCIsIndpZHRoIiwiaGVpZ2h0Iiwic3JjIiwiYWx0Iiwibm9ybWFsaXplQ29tcG9uZW50Iiwic2NyaXB0RXhwb3J0cyIsImZ1bmN0aW9uYWxUZW1wbGF0ZSIsImluamVjdFN0eWxlcyIsInNjb3BlSWQiLCJtb2R1bGVJZGVudGlmaWVyIiwic2hhZG93TW9kZSIsImhvb2siLCJfY29tcGlsZWQiLCJmdW5jdGlvbmFsIiwiX3Njb3BlSWQiLCIkdm5vZGUiLCJzc3JDb250ZXh0IiwiX19WVUVfU1NSX0NPTlRFWFRfXyIsIl9yZWdpc3RlcmVkQ29tcG9uZW50cyIsIl9zc3JSZWdpc3RlciIsIiRyb290IiwiJG9wdGlvbnMiLCJzaGFkb3dSb290IiwiX2luamVjdFN0eWxlcyIsIm9yaWdpbmFsUmVuZGVyIiwiYmVmb3JlQ3JlYXRlIiwibG9jYWxzIiwiaGFzRG9jdW1lbnQiLCJERUJVRyIsInN0eWxlc0luRG9tIiwic2luZ2xldG9uRWxlbWVudCIsInNpbmdsZXRvbkNvdW50ZXIiLCJpc1Byb2R1Y3Rpb24iLCJub29wIiwic3NySWRLZXkiLCJpc09sZElFIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwiYWRkU3R5bGVzQ2xpZW50IiwicGFyZW50SWQiLCJfaXNQcm9kdWN0aW9uIiwiX29wdGlvbnMiLCJhZGRTdHlsZXNUb0RvbSIsIm5ld0xpc3QiLCJtYXlSZW1vdmUiLCJkb21TdHlsZSIsInJlZnMiLCJwYXJ0cyIsImFkZFN0eWxlIiwiY3JlYXRlU3R5bGVFbGVtZW50Iiwic3R5bGVFbGVtZW50IiwidXBkYXRlIiwicmVtb3ZlIiwicmVtb3ZlQ2hpbGQiLCJzdHlsZUluZGV4IiwiYXBwbHlUb1NpbmdsZXRvblRhZyIsImFwcGx5VG9UYWciLCJuZXdPYmoiLCJzb3VyY2VNYXAiLCJ0ZXh0U3RvcmUiLCJyZXBsYWNlVGV4dCIsInJlcGxhY2VtZW50IiwiY3NzTm9kZSIsImNoaWxkTm9kZXMiLCJzZXRBdHRyaWJ1dGUiLCJzc3JJZCIsImZpcnN0Q2hpbGQiLCJsaXN0VG9TdHlsZXMiLCJuZXdTdHlsZXMiLCJwYXJ0IiwiZW1wdHlPYmplY3QiLCJmcmVlemUiLCJpc1VuZGVmIiwiaXNEZWYiLCJpc1RydWUiLCJpc1ByaW1pdGl2ZSIsImlzT2JqZWN0IiwiX3RvU3RyaW5nIiwidG9SYXdUeXBlIiwiaXNQbGFpbk9iamVjdCIsImlzUmVnRXhwIiwiaXNWYWxpZEFycmF5SW5kZXgiLCJ2YWwiLCJwYXJzZUZsb2F0IiwiaXNGaW5pdGUiLCJpc1Byb21pc2UiLCJ0aGVuIiwiY2F0Y2giLCJ0b051bWJlciIsIm1ha2VNYXAiLCJleHBlY3RzTG93ZXJDYXNlIiwic3BsaXQiLCJpc0J1aWx0SW5UYWciLCJpc1Jlc2VydmVkQXR0cmlidXRlIiwiaGFzT3duIiwiY2FjaGVkIiwiZm4iLCJjYWNoZSIsImNhbWVsaXplUkUiLCJjYW1lbGl6ZSIsImMiLCJjYXBpdGFsaXplIiwiaHlwaGVuYXRlUkUiLCJoeXBoZW5hdGUiLCJjdHgiLCJib3VuZEZuIiwiYSIsIl9sZW5ndGgiLCJ0b0FycmF5Iiwic3RhcnQiLCJfZnJvbSIsInRvT2JqZWN0IiwicmVzIiwiYiIsIm5vIiwiaWRlbnRpdHkiLCJsb29zZUVxdWFsIiwiaXNPYmplY3RBIiwiaXNPYmplY3RCIiwiaXNBcnJheUEiLCJpc0FycmF5QiIsImV2ZXJ5IiwiZSIsIkRhdGUiLCJnZXRUaW1lIiwia2V5c0EiLCJrZXlzQiIsImxvb3NlSW5kZXhPZiIsImNhbGxlZCIsIlNTUl9BVFRSIiwiQVNTRVRfVFlQRVMiLCJMSUZFQ1lDTEVfSE9PS1MiLCJjb25maWciLCJvcHRpb25NZXJnZVN0cmF0ZWdpZXMiLCJzaWxlbnQiLCJwcm9kdWN0aW9uVGlwIiwiZGV2dG9vbHMiLCJwZXJmb3JtYW5jZSIsImVycm9ySGFuZGxlciIsIndhcm5IYW5kbGVyIiwiaWdub3JlZEVsZW1lbnRzIiwia2V5Q29kZXMiLCJpc1Jlc2VydmVkVGFnIiwiaXNSZXNlcnZlZEF0dHIiLCJpc1Vua25vd25FbGVtZW50IiwiZ2V0VGFnTmFtZXNwYWNlIiwicGFyc2VQbGF0Zm9ybVRhZ05hbWUiLCJtdXN0VXNlUHJvcCIsIl9saWZlY3ljbGVIb29rcyIsInVuaWNvZGVSZWdFeHAiLCJpc1Jlc2VydmVkIiwiZGVmIiwid3JpdGFibGUiLCJjb25maWd1cmFibGUiLCJiYWlsUkUiLCJfaXNTZXJ2ZXIiLCJoYXNQcm90byIsImluQnJvd3NlciIsImluV2VleCIsIldYRW52aXJvbm1lbnQiLCJwbGF0Zm9ybSIsIndlZXhQbGF0Zm9ybSIsIlVBIiwiaXNJRSIsImlzSUU5IiwiaXNFZGdlIiwiaXNJT1MiLCJpc0ZGIiwibmF0aXZlV2F0Y2giLCJ3YXRjaCIsInN1cHBvcnRzUGFzc2l2ZSIsIm9wdHMiLCJpc1NlcnZlclJlbmRlcmluZyIsIlZVRV9FTlYiLCJfX1ZVRV9ERVZUT09MU19HTE9CQUxfSE9PS19fIiwiaXNOYXRpdmUiLCJDdG9yIiwiX1NldCIsImhhc1N5bWJvbCIsIlN5bWJvbCIsIlNldCIsImhhcyIsImNsZWFyIiwidGlwIiwiZ2VuZXJhdGVDb21wb25lbnRUcmFjZSIsImZvcm1hdENvbXBvbmVudE5hbWUiLCJoYXNDb25zb2xlIiwiY2xhc3NpZnlSRSIsInZtIiwidHJhY2UiLCJpbmNsdWRlRmlsZSIsImNpZCIsIl9pc1Z1ZSIsImNvbnN0cnVjdG9yIiwiX2NvbXBvbmVudFRhZyIsImZpbGUiLCIkcGFyZW50IiwidHJlZSIsImN1cnJlbnRSZWN1cnNpdmVTZXF1ZW5jZSIsImxhc3QiLCJyZXBlYXQiLCJ1aWQiLCJEZXAiLCJzdWJzIiwiYWRkU3ViIiwic3ViIiwicmVtb3ZlU3ViIiwiZGVwZW5kIiwiYWRkRGVwIiwibm90aWZ5Iiwic29ydCIsInRhcmdldFN0YWNrIiwicHVzaFRhcmdldCIsInBvcFRhcmdldCIsIlZOb2RlIiwiY2hpbGRyZW4iLCJlbG0iLCJjb21wb25lbnRPcHRpb25zIiwiYXN5bmNGYWN0b3J5IiwibnMiLCJmbkNvbnRleHQiLCJmbk9wdGlvbnMiLCJmblNjb3BlSWQiLCJjb21wb25lbnRJbnN0YW5jZSIsInJhdyIsImlzU3RhdGljIiwiaXNSb290SW5zZXJ0IiwiaXNDb21tZW50IiwiaXNDbG9uZWQiLCJpc09uY2UiLCJhc3luY01ldGEiLCJpc0FzeW5jUGxhY2Vob2xkZXIiLCJwcm90b3R5cGVBY2Nlc3NvcnMiLCJjaGlsZCIsImNyZWF0ZUVtcHR5Vk5vZGUiLCJub2RlIiwiY3JlYXRlVGV4dFZOb2RlIiwiY2xvbmVWTm9kZSIsInZub2RlIiwiY2xvbmVkIiwiYXJyYXlQcm90byIsImFycmF5TWV0aG9kcyIsIm1ldGhvZCIsIm9yaWdpbmFsIiwiaW5zZXJ0ZWQiLCJyZXN1bHQiLCJvYiIsIl9fb2JfXyIsIm9ic2VydmVBcnJheSIsImRlcCIsImFycmF5S2V5cyIsInNob3VsZE9ic2VydmUiLCJ0b2dnbGVPYnNlcnZpbmciLCJPYnNlcnZlciIsInZtQ291bnQiLCJfX3Byb3RvX18iLCJwcm90b0F1Z21lbnQiLCJjb3B5QXVnbWVudCIsIndhbGsiLCJvYnNlcnZlIiwiYXNSb290RGF0YSIsImlzRXh0ZW5zaWJsZSIsImRlZmluZVJlYWN0aXZlJCQxIiwiY3VzdG9tU2V0dGVyIiwic2hhbGxvdyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImdldHRlciIsInNldHRlciIsImNoaWxkT2IiLCJkZXBlbmRBcnJheSIsIm5ld1ZhbCIsIm1heCIsImRlbCIsIml0ZW1zIiwic3RyYXRzIiwibWVyZ2VEYXRhIiwidG9WYWwiLCJmcm9tVmFsIiwibWVyZ2VEYXRhT3JGbiIsInBhcmVudFZhbCIsImNoaWxkVmFsIiwiaW5zdGFuY2VEYXRhIiwiZGVmYXVsdERhdGEiLCJtZXJnZUhvb2siLCJkZWR1cGVIb29rcyIsIm1lcmdlQXNzZXRzIiwiYXNzZXJ0T2JqZWN0VHlwZSIsInByb3BzRGF0YSIsImRlZmF1bHRTdHJhdCIsImtleSQxIiwiaW5qZWN0IiwicHJvdmlkZSIsInZhbGlkYXRlQ29tcG9uZW50TmFtZSIsIm1lcmdlT3B0aW9ucyIsImNoZWNrQ29tcG9uZW50cyIsIm5vcm1hbGl6ZVByb3BzIiwibm9ybWFsaXplZCIsIm5vcm1hbGl6ZUluamVjdCIsImRpcnMiLCJkZWYkJDEiLCJub3JtYWxpemVEaXJlY3RpdmVzIiwiX2Jhc2UiLCJleHRlbmRzIiwibWl4aW5zIiwibWVyZ2VGaWVsZCIsInN0cmF0IiwicmVzb2x2ZUFzc2V0Iiwid2Fybk1pc3NpbmciLCJhc3NldHMiLCJjYW1lbGl6ZWRJZCIsIlBhc2NhbENhc2VJZCIsInZhbGlkYXRlUHJvcCIsInByb3BPcHRpb25zIiwicHJvcCIsImFic2VudCIsImJvb2xlYW5JbmRleCIsImdldFR5cGVJbmRleCIsInN0cmluZ0luZGV4IiwiX3Byb3BzIiwiZ2V0VHlwZSIsImdldFByb3BEZWZhdWx0VmFsdWUiLCJwcmV2U2hvdWxkT2JzZXJ2ZSIsInJlcXVpcmVkIiwidmFsaWQiLCJleHBlY3RlZFR5cGVzIiwiYXNzZXJ0ZWRUeXBlIiwiYXNzZXJ0VHlwZSIsImV4cGVjdGVkVHlwZSIsImhhdmVFeHBlY3RlZFR5cGVzIiwicmVjZWl2ZWRUeXBlIiwiaXNFeHBsaWNhYmxlIiwiZWxlbSIsImlzQm9vbGVhbiIsInN0eWxlVmFsdWUiLCJnZXRJbnZhbGlkVHlwZU1lc3NhZ2UiLCJ2YWxpZGF0b3IiLCJhc3NlcnRQcm9wIiwic2ltcGxlQ2hlY2tSRSIsImZ1bmN0aW9uVHlwZUNoZWNrUkUiLCJpc1NhbWVUeXBlIiwiRVhQTElDQUJMRV9UWVBFUyIsImhhbmRsZUVycm9yIiwiY3VyIiwiZXJyb3JDYXB0dXJlZCIsImdsb2JhbEhhbmRsZUVycm9yIiwiaW52b2tlV2l0aEVycm9ySGFuZGxpbmciLCJfaGFuZGxlZCIsImxvZ0Vycm9yIiwidGltZXJGdW5jIiwiaW5pdFByb3h5IiwiaXNVc2luZ01pY3JvVGFzayIsInBlbmRpbmciLCJmbHVzaENhbGxiYWNrcyIsImNvcGllcyIsInNldFRpbWVvdXQiLCJNdXRhdGlvbk9ic2VydmVyIiwic2V0SW1tZWRpYXRlIiwiY291bnRlciIsIm9ic2VydmVyIiwidGV4dE5vZGUiLCJjaGFyYWN0ZXJEYXRhIiwibmV4dFRpY2siLCJjYiIsIl9yZXNvbHZlIiwiYWxsb3dlZEdsb2JhbHMiLCJ3YXJuTm9uUHJlc2VudCIsIndhcm5SZXNlcnZlZFByZWZpeCIsImhhc1Byb3h5IiwiUHJveHkiLCJpc0J1aWx0SW5Nb2RpZmllciIsImhhc0hhbmRsZXIiLCJpc0FsbG93ZWQiLCIkZGF0YSIsImdldEhhbmRsZXIiLCJoYW5kbGVycyIsIl9yZW5kZXJQcm94eSIsIm1hcmsiLCJtZWFzdXJlIiwic2Vlbk9iamVjdHMiLCJ0cmF2ZXJzZSIsIl90cmF2ZXJzZSIsInNlZW4iLCJpc0EiLCJpc0Zyb3plbiIsImRlcElkIiwicGVyZiIsImNsZWFyTWFya3MiLCJjbGVhck1lYXN1cmVzIiwic3RhcnRUYWciLCJlbmRUYWciLCJub3JtYWxpemVFdmVudCIsInBhc3NpdmUiLCJvbmNlJCQxIiwiY2FwdHVyZSIsImNyZWF0ZUZuSW52b2tlciIsImZucyIsImludm9rZXIiLCJhcmd1bWVudHMkMSIsInVwZGF0ZUxpc3RlbmVycyIsIm9sZE9uIiwicmVtb3ZlJCQxIiwiY3JlYXRlT25jZUhhbmRsZXIiLCJvbGQiLCJldmVudCIsInBhcmFtcyIsIm1lcmdlVk5vZGVIb29rIiwiaG9va0tleSIsIm9sZEhvb2siLCJ3cmFwcGVkSG9vayIsIm1lcmdlZCIsImNoZWNrUHJvcCIsImFsdEtleSIsInByZXNlcnZlIiwibm9ybWFsaXplQ2hpbGRyZW4iLCJub3JtYWxpemVBcnJheUNoaWxkcmVuIiwiaXNUZXh0Tm9kZSIsIm5lc3RlZEluZGV4IiwiX2lzVkxpc3QiLCJyZXNvbHZlSW5qZWN0IiwicHJvdmlkZUtleSIsIl9wcm92aWRlZCIsInByb3ZpZGVEZWZhdWx0IiwicmVzb2x2ZVNsb3RzIiwic2xvdHMiLCJzbG90IiwibmFtZSQxIiwiaXNXaGl0ZXNwYWNlIiwibm9ybWFsaXplU2NvcGVkU2xvdHMiLCJub3JtYWxTbG90cyIsInByZXZTbG90cyIsImhhc05vcm1hbFNsb3RzIiwiaXNTdGFibGUiLCIkc3RhYmxlIiwiJGtleSIsIl9ub3JtYWxpemVkIiwiJGhhc05vcm1hbCIsIm5vcm1hbGl6ZVNjb3BlZFNsb3QiLCJrZXkkMiIsInByb3h5Tm9ybWFsU2xvdCIsInByb3h5IiwicmVuZGVyTGlzdCIsIml0ZXJhdG9yIiwibmV4dCIsImRvbmUiLCJyZW5kZXJTbG90IiwiZmFsbGJhY2tSZW5kZXIiLCJiaW5kT2JqZWN0Iiwibm9kZXMiLCJzY29wZWRTbG90Rm4iLCIkc2NvcGVkU2xvdHMiLCJyZXNvbHZlRmlsdGVyIiwiaXNLZXlOb3RNYXRjaCIsImV4cGVjdCIsImFjdHVhbCIsImNoZWNrS2V5Q29kZXMiLCJldmVudEtleUNvZGUiLCJidWlsdEluS2V5Q29kZSIsImV2ZW50S2V5TmFtZSIsImJ1aWx0SW5LZXlOYW1lIiwibWFwcGVkS2V5Q29kZSIsImJpbmRPYmplY3RQcm9wcyIsImFzUHJvcCIsImlzU3luYyIsImxvb3AiLCJjYW1lbGl6ZWRLZXkiLCJoeXBoZW5hdGVkS2V5IiwicmVuZGVyU3RhdGljIiwiaXNJbkZvciIsIl9zdGF0aWNUcmVlcyIsIm1hcmtTdGF0aWMiLCJtYXJrT25jZSIsIm1hcmtTdGF0aWNOb2RlIiwiYmluZE9iamVjdExpc3RlbmVycyIsIm91cnMiLCJyZXNvbHZlU2NvcGVkU2xvdHMiLCJoYXNEeW5hbWljS2V5cyIsImNvbnRlbnRIYXNoS2V5IiwiYmluZER5bmFtaWNLZXlzIiwiYmFzZU9iaiIsInByZXBlbmRNb2RpZmllciIsInN5bWJvbCIsImluc3RhbGxSZW5kZXJIZWxwZXJzIiwiX28iLCJfbiIsIl9xIiwiX2YiLCJfdSIsIl9nIiwiX3AiLCJGdW5jdGlvbmFsUmVuZGVyQ29udGV4dCIsImNvbnRleHRWbSIsInRoaXMkMSIsIl9vcmlnaW5hbCIsImlzQ29tcGlsZWQiLCJuZWVkTm9ybWFsaXphdGlvbiIsImluamVjdGlvbnMiLCJzY29wZWRTbG90cyIsImNsb25lQW5kTWFya0Z1bmN0aW9uYWxSZXN1bHQiLCJyZW5kZXJDb250ZXh0IiwiZGV2dG9vbHNNZXRhIiwibWVyZ2VQcm9wcyIsImNvbXBvbmVudFZOb2RlSG9va3MiLCJoeWRyYXRpbmciLCJfaXNEZXN0cm95ZWQiLCJrZWVwQWxpdmUiLCJtb3VudGVkTm9kZSIsInByZXBhdGNoIiwiX2lzQ29tcG9uZW50IiwiX3BhcmVudFZub2RlIiwiaW5saW5lVGVtcGxhdGUiLCJjcmVhdGVDb21wb25lbnRJbnN0YW5jZUZvclZub2RlIiwiYWN0aXZlSW5zdGFuY2UiLCIkbW91bnQiLCJvbGRWbm9kZSIsInBhcmVudFZub2RlIiwicmVuZGVyQ2hpbGRyZW4iLCJpc1VwZGF0aW5nQ2hpbGRDb21wb25lbnQiLCJuZXdTY29wZWRTbG90cyIsIm9sZFNjb3BlZFNsb3RzIiwiaGFzRHluYW1pY1Njb3BlZFNsb3QiLCJuZWVkc0ZvcmNlVXBkYXRlIiwiX3JlbmRlckNoaWxkcmVuIiwiX3Zub2RlIiwiJGF0dHJzIiwiJGxpc3RlbmVycyIsInByb3BLZXlzIiwiX3Byb3BLZXlzIiwib2xkTGlzdGVuZXJzIiwiX3BhcmVudExpc3RlbmVycyIsInVwZGF0ZUNvbXBvbmVudExpc3RlbmVycyIsIiRmb3JjZVVwZGF0ZSIsInVwZGF0ZUNoaWxkQ29tcG9uZW50IiwiX2lzTW91bnRlZCIsImNhbGxIb29rIiwiX2luYWN0aXZlIiwiYWN0aXZhdGVkQ2hpbGRyZW4iLCJhY3RpdmF0ZUNoaWxkQ29tcG9uZW50IiwiZGVzdHJveSIsImRlYWN0aXZhdGVDaGlsZENvbXBvbmVudCIsIiRkZXN0cm95IiwiaG9va3NUb01lcmdlIiwiY3JlYXRlQ29tcG9uZW50IiwiYmFzZUN0b3IiLCJlcnJvckNvbXAiLCJyZXNvbHZlZCIsIm93bmVyIiwiY3VycmVudFJlbmRlcmluZ0luc3RhbmNlIiwib3duZXJzIiwibG9hZGluZyIsImxvYWRpbmdDb21wIiwic3luYyIsInRpbWVyTG9hZGluZyIsInRpbWVyVGltZW91dCIsIiRvbiIsImZvcmNlUmVuZGVyIiwicmVuZGVyQ29tcGxldGVkIiwiY2xlYXJUaW1lb3V0IiwiZW5zdXJlQ3RvciIsInJlYXNvbiIsImRlbGF5IiwidGltZW91dCIsInJlc29sdmVBc3luY0NvbXBvbmVudCIsImNyZWF0ZUFzeW5jUGxhY2Vob2xkZXIiLCJyZXNvbHZlQ29uc3RydWN0b3JPcHRpb25zIiwibW9kZWwiLCJ0cmFuc2Zvcm1Nb2RlbCIsImtleUluTG93ZXJDYXNlIiwiZXh0cmFjdFByb3BzRnJvbVZOb2RlRGF0YSIsInZub2RlcyIsImNyZWF0ZUZ1bmN0aW9uYWxDb21wb25lbnQiLCJuYXRpdmVPbiIsImFic3RyYWN0IiwidG9NZXJnZSIsIl9tZXJnZWQiLCJtZXJnZUhvb2skMSIsImluc3RhbGxDb21wb25lbnRIb29rcyIsImYxIiwiZjIiLCJub3JtYWxpemF0aW9uVHlwZSIsImFsd2F5c05vcm1hbGl6ZSIsImlzIiwic2ltcGxlTm9ybWFsaXplQ2hpbGRyZW4iLCJwcmUiLCJhcHBseU5TIiwicmVnaXN0ZXJEZWVwQmluZGluZ3MiLCJfY3JlYXRlRWxlbWVudCIsImZvcmNlIiwiY29tcCIsImJhc2UiLCJ0b1N0cmluZ1RhZyIsImdldEZpcnN0Q29tcG9uZW50Q2hpbGQiLCJyZW1vdmUkMSIsIiRvZmYiLCJfdGFyZ2V0Iiwib25jZUhhbmRsZXIiLCJzZXRBY3RpdmVJbnN0YW5jZSIsInByZXZBY3RpdmVJbnN0YW5jZSIsImlzSW5JbmFjdGl2ZVRyZWUiLCJkaXJlY3QiLCJfZGlyZWN0SW5hY3RpdmUiLCIkY2hpbGRyZW4iLCJfaGFzSG9va0V2ZW50IiwiJGVtaXQiLCJxdWV1ZSIsImNpcmN1bGFyIiwid2FpdGluZyIsImZsdXNoaW5nIiwiY3VycmVudEZsdXNoVGltZXN0YW1wIiwiZ2V0Tm93Iiwibm93IiwiY3JlYXRlRXZlbnQiLCJ0aW1lU3RhbXAiLCJmbHVzaFNjaGVkdWxlclF1ZXVlIiwid2F0Y2hlciIsInVzZXIiLCJhY3RpdmF0ZWRRdWV1ZSIsInVwZGF0ZWRRdWV1ZSIsImNhbGxBY3RpdmF0ZWRIb29rcyIsIl93YXRjaGVyIiwiY2FsbFVwZGF0ZWRIb29rcyIsInVpZCQyIiwiV2F0Y2hlciIsImV4cE9yRm4iLCJpc1JlbmRlcldhdGNoZXIiLCJfd2F0Y2hlcnMiLCJkZWVwIiwibGF6eSIsImFjdGl2ZSIsImRpcnR5IiwiZGVwcyIsIm5ld0RlcHMiLCJkZXBJZHMiLCJuZXdEZXBJZHMiLCJwYXRoIiwic2VnbWVudHMiLCJwYXJzZVBhdGgiLCJjbGVhbnVwRGVwcyIsInRtcCIsInF1ZXVlV2F0Y2hlciIsIm9sZFZhbHVlIiwiZXZhbHVhdGUiLCJ0ZWFyZG93biIsIl9pc0JlaW5nRGVzdHJveWVkIiwic2hhcmVkUHJvcGVydHlEZWZpbml0aW9uIiwic291cmNlS2V5IiwiaW5pdFN0YXRlIiwicHJvcHNPcHRpb25zIiwiaXNSb290IiwiaW5pdFByb3BzIiwiaW5pdE1ldGhvZHMiLCJfZGF0YSIsImdldERhdGEiLCJpbml0RGF0YSIsIndhdGNoZXJzIiwiX2NvbXB1dGVkV2F0Y2hlcnMiLCJpc1NTUiIsInVzZXJEZWYiLCJjb21wdXRlZFdhdGNoZXJPcHRpb25zIiwiZGVmaW5lQ29tcHV0ZWQiLCJpbml0Q29tcHV0ZWQiLCJjcmVhdGVXYXRjaGVyIiwiaW5pdFdhdGNoIiwic2hvdWxkQ2FjaGUiLCJjcmVhdGVDb21wdXRlZEdldHRlciIsImNyZWF0ZUdldHRlckludm9rZXIiLCIkd2F0Y2giLCJ1aWQkMyIsInN1cGVyIiwic3VwZXJPcHRpb25zIiwibW9kaWZpZWRPcHRpb25zIiwibW9kaWZpZWQiLCJsYXRlc3QiLCJzZWFsZWQiLCJzZWFsZWRPcHRpb25zIiwicmVzb2x2ZU1vZGlmaWVkT3B0aW9ucyIsImV4dGVuZE9wdGlvbnMiLCJfaW5pdCIsImluaXRFeHRlbmQiLCJTdXBlciIsIlN1cGVySWQiLCJjYWNoZWRDdG9ycyIsIl9DdG9yIiwiU3ViIiwiQ29tcCIsImluaXRQcm9wcyQxIiwiaW5pdENvbXB1dGVkJDEiLCJtaXhpbiIsImdldENvbXBvbmVudE5hbWUiLCJtYXRjaGVzIiwicHJ1bmVDYWNoZSIsImtlZXBBbGl2ZUluc3RhbmNlIiwiZW50cnkiLCJwcnVuZUNhY2hlRW50cnkiLCJjdXJyZW50IiwiX3VpZCIsInZub2RlQ29tcG9uZW50T3B0aW9ucyIsImluaXRJbnRlcm5hbENvbXBvbmVudCIsImluaXRMaWZlY3ljbGUiLCJpbml0RXZlbnRzIiwicGFyZW50RGF0YSIsImluaXRSZW5kZXIiLCJpbml0SW5qZWN0aW9ucyIsImluaXRQcm92aWRlIiwiX25hbWUiLCJpbml0TWl4aW4iLCJkYXRhRGVmIiwicHJvcHNEZWYiLCIkc2V0IiwiJGRlbGV0ZSIsImltbWVkaWF0ZSIsInN0YXRlTWl4aW4iLCJob29rUkUiLCIkb25jZSIsImkkMSIsImNicyIsImxvd2VyQ2FzZUV2ZW50IiwiZXZlbnRzTWl4aW4iLCJfdXBkYXRlIiwicHJldkVsIiwicHJldlZub2RlIiwicmVzdG9yZUFjdGl2ZUluc3RhbmNlIiwiX19wYXRjaF9fIiwiX192dWVfXyIsImxpZmVjeWNsZU1peGluIiwiJG5leHRUaWNrIiwiX3JlbmRlciIsInJlbmRlckVycm9yIiwicmVuZGVyTWl4aW4iLCJwYXR0ZXJuVHlwZXMiLCJLZWVwQWxpdmUiLCJpbmNsdWRlIiwiZXhjbHVkZSIsImNhY2hlVk5vZGUiLCJ2bm9kZVRvQ2FjaGUiLCJrZXlUb0NhY2hlIiwiY3JlYXRlZCIsImRlc3Ryb3llZCIsInVwZGF0ZWQiLCJidWlsdEluQ29tcG9uZW50cyIsImNvbmZpZ0RlZiIsImRlZmluZVJlYWN0aXZlIiwiZGVsZXRlIiwib2JzZXJ2YWJsZSIsImluc3RhbGxlZFBsdWdpbnMiLCJfaW5zdGFsbGVkUGx1Z2lucyIsImluaXRVc2UiLCJpbml0TWl4aW4kMSIsImRlZmluaXRpb24iLCJpbml0QXNzZXRSZWdpc3RlcnMiLCJpbml0R2xvYmFsQVBJIiwidmVyc2lvbiIsImFjY2VwdFZhbHVlIiwiaXNFbnVtZXJhdGVkQXR0ciIsImlzVmFsaWRDb250ZW50RWRpdGFibGVWYWx1ZSIsImlzQm9vbGVhbkF0dHIiLCJ4bGlua05TIiwiaXNYbGluayIsImdldFhsaW5rUHJvcCIsImlzRmFsc3lBdHRyVmFsdWUiLCJnZW5DbGFzc0ZvclZub2RlIiwiY2hpbGROb2RlIiwibWVyZ2VDbGFzc0RhdGEiLCJkeW5hbWljQ2xhc3MiLCJzdHJpbmdpZnlDbGFzcyIsInJlbmRlckNsYXNzIiwic3RyaW5naWZpZWQiLCJzdHJpbmdpZnlBcnJheSIsInN0cmluZ2lmeU9iamVjdCIsIm5hbWVzcGFjZU1hcCIsIm1hdGgiLCJpc0hUTUxUYWciLCJpc1NWRyIsInVua25vd25FbGVtZW50Q2FjaGUiLCJpc1RleHRJbnB1dFR5cGUiLCJub2RlT3BzIiwidGFnTmFtZSIsImNyZWF0ZUVsZW1lbnROUyIsImNyZWF0ZUNvbW1lbnQiLCJuZXdOb2RlIiwicmVmZXJlbmNlTm9kZSIsIm5leHRTaWJsaW5nIiwic2V0VGV4dENvbnRlbnQiLCJzZXRTdHlsZVNjb3BlIiwicmVnaXN0ZXJSZWYiLCJpc1JlbW92YWwiLCJyZWZJbkZvciIsImVtcHR5Tm9kZSIsInNhbWVWbm9kZSIsInR5cGVBIiwidHlwZUIiLCJzYW1lSW5wdXRUeXBlIiwiY3JlYXRlS2V5VG9PbGRJZHgiLCJiZWdpbklkeCIsImVuZElkeCIsInVwZGF0ZURpcmVjdGl2ZXMiLCJvbGREaXIiLCJkaXIiLCJpc0NyZWF0ZSIsImlzRGVzdHJveSIsIm9sZERpcnMiLCJub3JtYWxpemVEaXJlY3RpdmVzJDEiLCJuZXdEaXJzIiwiZGlyc1dpdGhJbnNlcnQiLCJkaXJzV2l0aFBvc3RwYXRjaCIsIm9sZEFyZyIsImNhbGxIb29rJDEiLCJjb21wb25lbnRVcGRhdGVkIiwiY2FsbEluc2VydCIsImVtcHR5TW9kaWZpZXJzIiwibW9kaWZpZXJzIiwiZ2V0UmF3RGlyTmFtZSIsImJhc2VNb2R1bGVzIiwidXBkYXRlQXR0cnMiLCJpbmhlcml0QXR0cnMiLCJvbGRBdHRycyIsInNldEF0dHIiLCJyZW1vdmVBdHRyaWJ1dGVOUyIsInJlbW92ZUF0dHJpYnV0ZSIsImlzSW5QcmUiLCJiYXNlU2V0QXR0ciIsImNvbnZlcnRFbnVtZXJhdGVkVmFsdWUiLCJzZXRBdHRyaWJ1dGVOUyIsIl9faWVwaCIsImJsb2NrZXIiLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJ1cGRhdGVDbGFzcyIsIm9sZERhdGEiLCJjbHMiLCJ0cmFuc2l0aW9uQ2xhc3MiLCJfdHJhbnNpdGlvbkNsYXNzZXMiLCJfcHJldkNsYXNzIiwidGFyZ2V0JDEiLCJrbGFzcyIsImNyZWF0ZU9uY2VIYW5kbGVyJDEiLCJyZW1vdmUkMiIsInVzZU1pY3JvdGFza0ZpeCIsImFkZCQxIiwiYXR0YWNoZWRUaW1lc3RhbXAiLCJfd3JhcHBlciIsImN1cnJlbnRUYXJnZXQiLCJvd25lckRvY3VtZW50IiwidXBkYXRlRE9NTGlzdGVuZXJzIiwibm9ybWFsaXplRXZlbnRzIiwic3ZnQ29udGFpbmVyIiwidXBkYXRlRE9NUHJvcHMiLCJvbGRQcm9wcyIsInN0ckN1ciIsInNob3VsZFVwZGF0ZVZhbHVlIiwiY2hlY2tWYWwiLCJub3RJbkZvY3VzIiwiYWN0aXZlRWxlbWVudCIsImlzTm90SW5Gb2N1c0FuZERpcnR5IiwiX3ZNb2RpZmllcnMiLCJ0cmltIiwiaXNEaXJ0eVdpdGhNb2RpZmllcnMiLCJwYXJzZVN0eWxlVGV4dCIsInByb3BlcnR5RGVsaW1pdGVyIiwibm9ybWFsaXplU3R5bGVEYXRhIiwibm9ybWFsaXplU3R5bGVCaW5kaW5nIiwiYmluZGluZ1N0eWxlIiwiZW1wdHlTdHlsZSIsImNzc1ZhclJFIiwiaW1wb3J0YW50UkUiLCJzZXRQcm9wIiwic2V0UHJvcGVydHkiLCJub3JtYWxpemVkTmFtZSIsIm5vcm1hbGl6ZSIsInZlbmRvck5hbWVzIiwiY2FwTmFtZSIsInVwZGF0ZVN0eWxlIiwib2xkU3RhdGljU3R5bGUiLCJvbGRTdHlsZUJpbmRpbmciLCJub3JtYWxpemVkU3R5bGUiLCJvbGRTdHlsZSIsIm5ld1N0eWxlIiwiY2hlY2tDaGlsZCIsInN0eWxlRGF0YSIsImdldFN0eWxlIiwid2hpdGVzcGFjZVJFIiwiYWRkQ2xhc3MiLCJjbGFzc0xpc3QiLCJnZXRBdHRyaWJ1dGUiLCJyZW1vdmVDbGFzcyIsInRhciIsInJlc29sdmVUcmFuc2l0aW9uIiwiYXV0b0Nzc1RyYW5zaXRpb24iLCJlbnRlckNsYXNzIiwiZW50ZXJUb0NsYXNzIiwiZW50ZXJBY3RpdmVDbGFzcyIsImxlYXZlQ2xhc3MiLCJsZWF2ZVRvQ2xhc3MiLCJsZWF2ZUFjdGl2ZUNsYXNzIiwiaGFzVHJhbnNpdGlvbiIsIlRSQU5TSVRJT04iLCJBTklNQVRJT04iLCJ0cmFuc2l0aW9uUHJvcCIsInRyYW5zaXRpb25FbmRFdmVudCIsImFuaW1hdGlvblByb3AiLCJhbmltYXRpb25FbmRFdmVudCIsIm9udHJhbnNpdGlvbmVuZCIsIm9ud2Via2l0dHJhbnNpdGlvbmVuZCIsIm9uYW5pbWF0aW9uZW5kIiwib253ZWJraXRhbmltYXRpb25lbmQiLCJyYWYiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJuZXh0RnJhbWUiLCJhZGRUcmFuc2l0aW9uQ2xhc3MiLCJ0cmFuc2l0aW9uQ2xhc3NlcyIsInJlbW92ZVRyYW5zaXRpb25DbGFzcyIsIndoZW5UcmFuc2l0aW9uRW5kcyIsImdldFRyYW5zaXRpb25JbmZvIiwicHJvcENvdW50IiwiZW5kZWQiLCJlbmQiLCJvbkVuZCIsInRyYW5zZm9ybVJFIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsInRyYW5zaXRpb25EZWxheXMiLCJ0cmFuc2l0aW9uRHVyYXRpb25zIiwidHJhbnNpdGlvblRpbWVvdXQiLCJnZXRUaW1lb3V0IiwiYW5pbWF0aW9uRGVsYXlzIiwiYW5pbWF0aW9uRHVyYXRpb25zIiwiYW5pbWF0aW9uVGltZW91dCIsImhhc1RyYW5zZm9ybSIsImRlbGF5cyIsImR1cmF0aW9ucyIsInRvTXMiLCJlbnRlciIsInRvZ2dsZURpc3BsYXkiLCJfbGVhdmVDYiIsImNhbmNlbGxlZCIsInRyYW5zaXRpb24iLCJfZW50ZXJDYiIsIm5vZGVUeXBlIiwiYXBwZWFyQ2xhc3MiLCJhcHBlYXJUb0NsYXNzIiwiYXBwZWFyQWN0aXZlQ2xhc3MiLCJiZWZvcmVFbnRlciIsImFmdGVyRW50ZXIiLCJlbnRlckNhbmNlbGxlZCIsImJlZm9yZUFwcGVhciIsImFwcGVhciIsImFmdGVyQXBwZWFyIiwiYXBwZWFyQ2FuY2VsbGVkIiwiZHVyYXRpb24iLCJ0cmFuc2l0aW9uTm9kZSIsImlzQXBwZWFyIiwic3RhcnRDbGFzcyIsImFjdGl2ZUNsYXNzIiwidG9DbGFzcyIsImJlZm9yZUVudGVySG9vayIsImVudGVySG9vayIsImFmdGVyRW50ZXJIb29rIiwiZW50ZXJDYW5jZWxsZWRIb29rIiwiZXhwbGljaXRFbnRlckR1cmF0aW9uIiwiY2hlY2tEdXJhdGlvbiIsImV4cGVjdHNDU1MiLCJ1c2VyV2FudHNDb250cm9sIiwiZ2V0SG9va0FyZ3VtZW50c0xlbmd0aCIsInNob3ciLCJwZW5kaW5nTm9kZSIsIl9wZW5kaW5nIiwiaXNWYWxpZER1cmF0aW9uIiwibGVhdmUiLCJybSIsImJlZm9yZUxlYXZlIiwiYWZ0ZXJMZWF2ZSIsImxlYXZlQ2FuY2VsbGVkIiwiZGVsYXlMZWF2ZSIsImV4cGxpY2l0TGVhdmVEdXJhdGlvbiIsInBlcmZvcm1MZWF2ZSIsImludm9rZXJGbnMiLCJfZW50ZXIiLCJwYXRjaCIsImJhY2tlbmQiLCJyZW1vdmVOb2RlIiwiaXNVbmtub3duRWxlbWVudCQkMSIsImluVlByZSIsImlnbm9yZSIsImNyZWF0aW5nRWxtSW5WUHJlIiwiY3JlYXRlRWxtIiwiaW5zZXJ0ZWRWbm9kZVF1ZXVlIiwicGFyZW50RWxtIiwicmVmRWxtIiwibmVzdGVkIiwib3duZXJBcnJheSIsImlzUmVhY3RpdmF0ZWQiLCJpbml0Q29tcG9uZW50IiwiaW5uZXJOb2RlIiwiYWN0aXZhdGUiLCJyZWFjdGl2YXRlQ29tcG9uZW50Iiwic2V0U2NvcGUiLCJjcmVhdGVDaGlsZHJlbiIsImludm9rZUNyZWF0ZUhvb2tzIiwicGVuZGluZ0luc2VydCIsImlzUGF0Y2hhYmxlIiwicmVmJCQxIiwiY2hlY2tEdXBsaWNhdGVLZXlzIiwiYW5jZXN0b3IiLCJhZGRWbm9kZXMiLCJzdGFydElkeCIsImludm9rZURlc3Ryb3lIb29rIiwicmVtb3ZlVm5vZGVzIiwiY2giLCJyZW1vdmVBbmRJbnZva2VSZW1vdmVIb29rIiwiY2hpbGRFbG0iLCJjcmVhdGVSbUNiIiwic2VlbktleXMiLCJmaW5kSWR4SW5PbGQiLCJvbGRDaCIsInBhdGNoVm5vZGUiLCJyZW1vdmVPbmx5IiwiaHlkcmF0ZSIsIm5ld0NoIiwib2xkS2V5VG9JZHgiLCJpZHhJbk9sZCIsInZub2RlVG9Nb3ZlIiwib2xkU3RhcnRJZHgiLCJuZXdTdGFydElkeCIsIm9sZEVuZElkeCIsIm9sZFN0YXJ0Vm5vZGUiLCJvbGRFbmRWbm9kZSIsIm5ld0VuZElkeCIsIm5ld1N0YXJ0Vm5vZGUiLCJuZXdFbmRWbm9kZSIsImNhbk1vdmUiLCJ1cGRhdGVDaGlsZHJlbiIsInBvc3RwYXRjaCIsImludm9rZUluc2VydEhvb2siLCJpbml0aWFsIiwiaHlkcmF0aW9uQmFpbGVkIiwiaXNSZW5kZXJlZE1vZHVsZSIsImFzc2VydE5vZGVNYXRjaCIsImhhc0NoaWxkTm9kZXMiLCJjaGlsZHJlbk1hdGNoIiwiZnVsbEludm9rZSIsImlzSW5pdGlhbFBhdGNoIiwiaXNSZWFsRWxlbWVudCIsImhhc0F0dHJpYnV0ZSIsIm9sZEVsbSIsInBhdGNoYWJsZSIsImkkMiIsImNyZWF0ZVBhdGNoRnVuY3Rpb24iLCJ2bW9kZWwiLCJ0cmlnZ2VyIiwiYmluZGluZyIsIl92T3B0aW9ucyIsInNldFNlbGVjdGVkIiwiZ2V0VmFsdWUiLCJvbkNvbXBvc2l0aW9uU3RhcnQiLCJvbkNvbXBvc2l0aW9uRW5kIiwicHJldk9wdGlvbnMiLCJjdXJPcHRpb25zIiwiaGFzTm9NYXRjaGluZ09wdGlvbiIsImFjdHVhbGx5U2V0U2VsZWN0ZWQiLCJpc011bHRpcGxlIiwib3B0aW9uIiwic2VsZWN0ZWRJbmRleCIsImluaXRFdmVudCIsImRpc3BhdGNoRXZlbnQiLCJsb2NhdGVOb2RlIiwidHJhbnNpdGlvbiQkMSIsIm9yaWdpbmFsRGlzcGxheSIsIl9fdk9yaWdpbmFsRGlzcGxheSIsInVuYmluZCIsInBsYXRmb3JtRGlyZWN0aXZlcyIsInRyYW5zaXRpb25Qcm9wcyIsImdldFJlYWxDaGlsZCIsImNvbXBPcHRpb25zIiwiZXh0cmFjdFRyYW5zaXRpb25EYXRhIiwicmF3Q2hpbGQiLCJpc05vdFRleHROb2RlIiwiaXNWU2hvd0RpcmVjdGl2ZSIsIlRyYW5zaXRpb24iLCJoYXNQYXJlbnRUcmFuc2l0aW9uIiwiX2xlYXZpbmciLCJvbGRSYXdDaGlsZCIsIm9sZENoaWxkIiwiaXNTYW1lQ2hpbGQiLCJkZWxheWVkTGVhdmUiLCJtb3ZlQ2xhc3MiLCJUcmFuc2l0aW9uR3JvdXAiLCJiZWZvcmVNb3VudCIsImtlcHQiLCJwcmV2Q2hpbGRyZW4iLCJyYXdDaGlsZHJlbiIsInRyYW5zaXRpb25EYXRhIiwicmVtb3ZlZCIsImMkMSIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImhhc01vdmUiLCJjYWxsUGVuZGluZ0NicyIsInJlY29yZFBvc2l0aW9uIiwiYXBwbHlUcmFuc2xhdGlvbiIsIl9yZWZsb3ciLCJvZmZzZXRIZWlnaHQiLCJtb3ZlZCIsInRyYW5zZm9ybSIsIldlYmtpdFRyYW5zZm9ybSIsInRyYW5zaXRpb25EdXJhdGlvbiIsIl9tb3ZlQ2IiLCJwcm9wZXJ0eU5hbWUiLCJfaGFzTW92ZSIsImNsb25lTm9kZSIsIm5ld1BvcyIsIm9sZFBvcyIsImR4IiwibGVmdCIsImR5IiwidG9wIiwicGxhdGZvcm1Db21wb25lbnRzIiwiYXR0ciIsIkhUTUxVbmtub3duRWxlbWVudCIsIkhUTUxFbGVtZW50IiwidXBkYXRlQ29tcG9uZW50IiwidGVtcGxhdGUiLCJtb3VudENvbXBvbmVudCIsInF1ZXJ5IiwiX2RlZmluZVByb3BlcnRpZXMiLCJkZXNjcmlwdG9yIiwiV2ViU29ja2V0Q2xpZW50IiwiaW5zdGFuY2UiLCJDb25zdHJ1Y3RvciIsIl9jbGFzc0NhbGxDaGVjayIsImNsaWVudCIsIldlYlNvY2tldCIsIm9uZXJyb3IiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJmIiwib25vcGVuIiwib25jbG9zZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJfX3VudXNlZF93ZWJwYWNrX21vZHVsZSIsIl90b0NvbnN1bWFibGVBcnJheSIsIl9hcnJheUxpa2VUb0FycmF5IiwiX2FycmF5V2l0aG91dEhvbGVzIiwiaXRlciIsIl9pdGVyYWJsZVRvQXJyYXkiLCJtaW5MZW4iLCJfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkiLCJfbm9uSXRlcmFibGVTcHJlYWQiLCJhcnIyIiwiTG9nVHlwZSIsImRlYnVnIiwiZ3JvdXAiLCJncm91cENvbGxhcHNlZCIsImdyb3VwRW5kIiwicHJvZmlsZSIsInByb2ZpbGVFbmQiLCJ0aW1lIiwic3RhdHVzIiwiTE9HX1NZTUJPTCIsIlRJTUVSU19TWU1CT0wiLCJUSU1FUlNfQUdHUkVHQVRFU19TWU1CT0wiLCJXZWJwYWNrTG9nZ2VyIiwiZ2V0Q2hpbGRMb2dnZXIiLCJfbGVuIiwiX2tleSIsIl9sZW4yIiwiX2tleTIiLCJfbGVuMyIsIl9rZXkzIiwiX2xlbjQiLCJfa2V5NCIsIl9sZW41IiwiX2tleTUiLCJhc3NlcnRpb24iLCJfbGVuNiIsIl9rZXk2IiwiX2xlbjciLCJfa2V5NyIsIl9sZW44IiwiX2tleTgiLCJfbGVuOSIsIl9rZXk5IiwiX2xlbjEwIiwiX2tleTEwIiwiTWFwIiwicHJvY2VzcyIsImhydGltZSIsInByZXYiLCJMb2dnZXIiLCJfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMiLCJmaWx0ZXJUb0Z1bmN0aW9uIiwicmVnRXhwIiwiaWRlbnQiLCJMb2dMZXZlbCIsIm5vbmUiLCJmYWxzZSIsInRydWUiLCJ2ZXJib3NlIiwiX3JlZiIsIl9yZWYkbGV2ZWwiLCJfcmVmJGRlYnVnIiwiZGVidWdGaWx0ZXJzIiwibG9nbGV2ZWwiLCJsYWJlbGVkQXJncyIsIm1zIiwibG9nVGltZSIsIl9leHRlbmRzIiwiU3luY0JhaWxIb29rIiwiY3JlYXRlQ29uc29sZUxvZ2dlciIsImN1cnJlbnREZWZhdWx0TG9nZ2VyT3B0aW9ucyIsImN1cnJlbnREZWZhdWx0TG9nZ2VyIiwiZ2V0TG9nZ2VyIiwiY2hpbGROYW1lIiwiY29uZmlndXJlRGVmYXVsdExvZ2dlciIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiciIsIl9fd2VicGFja19leHBvcnRzX18iLCJ3ZWJwYWNrX2xpYl9sb2dnaW5nX3J1bnRpbWVfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsIl9fd2VicGFja19leHBvcnRfdGFyZ2V0X18iLCJfX3VudXNlZF93ZWJwYWNrX19fd2VicGFja19tb2R1bGVfXyIsInN0cmlwQW5zaSIsImFuc2lfcmVnZXhfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsImFuc2lSZWdleCIsIl9yZWYkb25seUZpcnN0Iiwib25seUZpcnN0Iiwic3RyaXBfYW5zaV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwiaWZyYW1lQ29udGFpbmVyRWxlbWVudCIsImNvbnRhaW5lckVsZW1lbnQiLCJvbkxvYWRRdWV1ZSIsImVuc3VyZU92ZXJsYXlFeGlzdHMiLCJyaWdodCIsImJvdHRvbSIsImJvcmRlciIsInpJbmRleCIsIm9ubG9hZCIsImNvbnRlbnREb2N1bWVudCIsImJveFNpemluZyIsImJhY2tncm91bmRDb2xvciIsImNvbG9yIiwiZm9udEZhbWlseSIsImZvbnRTaXplIiwicGFkZGluZyIsImxpbmVIZWlnaHQiLCJ3aGl0ZVNwYWNlIiwib3ZlcmZsb3ciLCJoZWFkZXJFbGVtZW50IiwiaW5uZXJUZXh0IiwiY2xvc2VCdXR0b25FbGVtZW50IiwiYmFja2dyb3VuZCIsImZvbnRXZWlnaHQiLCJjdXJzb3IiLCJjc3NGbG9hdCIsInN0eWxlRmxvYXQiLCJoaWRlIiwib25Mb2FkIiwiZm9ybWF0UHJvYmxlbSIsImhlYWRlciIsIm1vZHVsZU5hbWUiLCJsb2MiLCJtZXNzYWdlcyIsImVudHJ5RWxlbWVudCIsInR5cGVFbGVtZW50IiwiX2Zvcm1hdFByb2JsZW0iLCJtZXNzYWdlVGV4dE5vZGUiLCJDbGllbnQiLCJfX3dlYnBhY2tfZGV2X3NlcnZlcl9jbGllbnRfXyIsInJldHJpZXMiLCJtYXhSZXRyaWVzIiwic29ja2V0IiwicmVjb25uZWN0Iiwib25PcGVuIiwib25DbG9zZSIsInJldHJ5SW5NcyIsInBvdyIsInJhbmRvbSIsIm9uTWVzc2FnZSIsInBhcnNlZFVSTCIsImhvc3RuYW1lIiwiaXNJbkFkZHJBbnkiLCJsb2NhdGlvbiIsInByb3RvY29sIiwic29ja2V0VVJMUHJvdG9jb2wiLCJzb2NrZXRVUkxBdXRoIiwidXNlcm5hbWUiLCJwYXNzd29yZCIsInNvY2tldFVSTEhvc3RuYW1lIiwic29ja2V0VVJMUG9ydCIsInBvcnQiLCJzb2NrZXRVUkxQYXRobmFtZSIsInBhdGhuYW1lIiwiZnJvbUN1cnJlbnRTY3JpcHQiLCJvYmpVUkwiLCJhdXRoIiwiaG9zdCIsInNsYXNoZXMiLCJzZWFyY2giLCJmb3JtYXQiLCJjdXJyZW50U2NyaXB0Iiwic2NyaXB0RWxlbWVudHMiLCJzY3JpcHRzIiwic2NyaXB0RWxlbWVudHNXaXRoU3JjIiwic2V0TG9nTGV2ZWwiLCJyZXNvdXJjZVF1ZXJ5Iiwic2VhcmNoUGFyYW1zIiwicGFpciIsImRlY29kZVVSSUNvbXBvbmVudCIsInNjcmlwdFNvdXJjZVVSTCIsInNjcmlwdFNvdXJjZSIsImhvdCIsImxpdmVSZWxvYWQiLCJpc1VubG9hZGluZyIsImN1cnJlbnRIYXNoIiwicHJldmlvdXNIYXNoIiwiYWxsb3dUb0hvdCIsImFsbG93VG9MaXZlUmVsb2FkIiwicm9vdFdpbmRvdyIsImludGVydmFsSWQiLCJzZXRJbnRlcnZhbCIsImFwcGx5UmVsb2FkIiwiY2xlYXJJbnRlcnZhbCIsInJlbG9hZCIsIldvcmtlckdsb2JhbFNjb3BlIiwibG9nTGV2ZWwiLCJkdW1teSIsInNob3VsZExvZyIsImxvZ0dyb3VwIiwibG9nRm4iLCJmb3JtYXRFcnJvciIsInN0YWNrIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsImxvYWRlZCIsImdsb2JhbFRoaXMiLCJobWQiLCJiYXNlVVJJIiwicHJvZ3Jlc3MiLCJvdmVybGF5IiwicGFyc2VkUmVzb3VyY2VRdWVyeSIsInNldEFsbExvZ0xldmVsIiwibG9nZ2luZyIsIm9uU29ja2V0TWVzc2FnZSIsImludmFsaWQiLCJfaGFzaCIsInBsdWdpbk5hbWUiLCJwZXJjZW50Iiwib2siLCJ3YXJuaW5ncyIsIl93YXJuaW5ncyIsInByaW50YWJsZVdhcm5pbmdzIiwicHJldmVudFJlbG9hZGluZyIsIl9lcnJvcnMiLCJwcmludGFibGVFcnJvcnMiLCJfZm9ybWF0UHJvYmxlbTIiLCJfZXJyb3IiLCJzb2NrZXRVUkwiLCJBcHAiXSwic291cmNlUm9vdCI6IiJ9
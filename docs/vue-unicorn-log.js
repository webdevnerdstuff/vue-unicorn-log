!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports["vue-unicorn-log"]=t():e["vue-unicorn-log"]=t()}(self,(function(){return function(){var e={"../node_modules/ansi-html-community/index.js":function(e){"use strict";e.exports=i;var t=/(?:(?:\u001b\[)|\u009b)(?:(?:[0-9]{1,3})?(?:(?:;[0-9]{0,3})*)?[A-M|f-m])|\u001b[A-M]/,n={reset:["fff","000"],black:"000",red:"ff0000",green:"209805",yellow:"e8bf03",blue:"0000ff",magenta:"ff00ff",cyan:"00ffee",lightgrey:"f0f0f0",darkgrey:"888"},r={30:"black",31:"red",32:"green",33:"yellow",34:"blue",35:"magenta",36:"cyan",37:"lightgrey"},o={1:"font-weight:bold",2:"opacity:0.5",3:"<i>",4:"<u>",8:"display:none",9:"<del>"},a={23:"</i>",24:"</u>",29:"</del>"};function i(e){if(!t.test(e))return e;var n=[],r=e.replace(/\033\[(\d+)m/g,(function(e,t){var r=o[t];if(r)return~n.indexOf(t)?(n.pop(),"</span>"):(n.push(t),"<"===r[0]?r:'<span style="'+r+';">');var i=a[t];return i?(n.pop(),i):""})),i=n.length;return i>0&&(r+=Array(i+1).join("</span>")),r}function s(e){for(var t in o[0]="font-weight:normal;opacity:1;color:#"+e.reset[0]+";background:#"+e.reset[1],o[7]="color:#"+e.reset[1]+";background:#"+e.reset[0],o[90]="color:#"+e.darkgrey,r){var n=e[r[t]]||"000";o[t]="color:#"+n,t=parseInt(t),o[(t+10).toString()]="background:#"+n}}[0,21,22,27,28,39,49].forEach((function(e){a[e]="</span>"})),i.setColors=function(e){if("object"!=typeof e)throw new Error("`colors` parameter must be an Object.");var t={};for(var r in n){var o=e.hasOwnProperty(r)?e[r]:null;if(o){if("reset"===r){if("string"==typeof o&&(o=[o]),!Array.isArray(o)||0===o.length||o.some((function(e){return"string"!=typeof e})))throw new Error("The value of `"+r+"` property must be an Array and each item could only be a hex string, e.g.: FF0000");var a=n[r];o[0]||(o[0]=a[0]),1!==o.length&&o[1]||(o=[o[0]]).push(a[1]),o=o.slice(0,2)}else if("string"!=typeof o)throw new Error("The value of `"+r+"` property must be a hex string, e.g.: FF0000");t[r]=o}else t[r]=n[r]}s(t)},i.reset=function(){s(n)},i.tags={},Object.defineProperty?(Object.defineProperty(i.tags,"open",{get:function(){return o}}),Object.defineProperty(i.tags,"close",{get:function(){return a}})):(i.tags.open=o,i.tags.close=a),i.reset()},"../node_modules/babel-loader/lib/index.js??clonedRuleSet-1[0].rules[0].use!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=script&lang=js&":function(e,t,n){"use strict";n.r(t);var r=n("../node_modules/vue/dist/vue.runtime.esm.js"),o=n("./docs/UnicornLog.vue"),a=new r.default;Object.defineProperties(r.default.prototype,{$bus:{get:function(){return a}}}),t.default={name:"App",components:{UnicornLog:o.default}}},"../node_modules/babel-loader/lib/index.js??clonedRuleSet-1[0].rules[0].use!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/Nav.vue?vue&type=script&lang=js&":function(e,t,n){"use strict";n.r(t),t.default={name:"Nav",data:function(){return{links:{docs:"https://webdevnerdstuff.github.io/vue-unicorn-log/",github:"https://github.com/webdevnerdstuff/vue-unicorn-log",npm:"https://www.npmjs.com/package/vue-unicorn-log"}}}}},"../node_modules/babel-loader/lib/index.js??clonedRuleSet-1[0].rules[0].use!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/Arrays.vue?vue&type=script&lang=js&":function(e,t,n){"use strict";n.r(t);var r=n("../node_modules/vue/dist/vue.runtime.esm.js"),o=n("./plugins/UnicornLog.js"),a=n("../node_modules/vue-code-highlight/dist/vue-code-highlight.esm.js");r.default.use(o.default),t.default={name:"ArraysExample",components:{VueCodeHighlight:a.component},data:function(){return{}},methods:{simpleExample:function(){this.$unicornLog({text:"Hello World",array:["foo","bar"]})},objectArray:function(){this.$unicornLog({text:"Hello World",array:[{foo:"foo "},{bar:"bar "}]})},arraySpreadOperator:function(){this.$unicornLog({text:"Hello World",array:[].concat(["foo"],["bar"])})}}}},"../node_modules/babel-loader/lib/index.js??clonedRuleSet-1[0].rules[0].use!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/Disabled.vue?vue&type=script&lang=js&":function(e,t,n){"use strict";n.r(t);var r=n("../node_modules/vue/dist/vue.runtime.esm.js"),o=n("./plugins/UnicornLog.js"),a=n("../node_modules/vue-code-highlight/dist/vue-code-highlight.esm.js");r.default.use(o.default),t.default={name:"DisabledExample",components:{VueCodeHighlight:a.component},data:function(){return{isDisabled:!0}},methods:{simpleExample:function(){this.$unicornLog({text:"Hello World",disabled:this.isDisabled})}}}},"../node_modules/babel-loader/lib/index.js??clonedRuleSet-1[0].rules[0].use!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/LogPrefix.vue?vue&type=script&lang=js&":function(e,t,n){"use strict";n.r(t);var r=n("../node_modules/vue/dist/vue.runtime.esm.js"),o=n("./plugins/UnicornLog.js"),a=n("../node_modules/vue-code-highlight/dist/vue-code-highlight.esm.js");r.default.use(o.default),t.default={name:"LogPrefixExample",props:{isNameOption:{type:Boolean,default:!1}},components:{VueCodeHighlight:a.component},data:function(){return{logPrefix:"[Bunnies]:",withName:!0}},methods:{exampleName:function(){this.$unicornLog({text:"Hello World",logPrefix:this.withName,name:this.isNameOption?"Susan":"Bob"})},exampleNameDefault:function(){this.$unicornLog({text:"Hello World",logPrefix:this.withName})},simpleExample:function(){this.$unicornLog({text:"Hello World",logPrefix:this.logPrefix})}}}},"../node_modules/babel-loader/lib/index.js??clonedRuleSet-1[0].rules[0].use!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/Magical.vue?vue&type=script&lang=js&":function(e,t,n){"use strict";n.r(t);var r=n("../node_modules/vue/dist/vue.runtime.esm.js"),o=n("./plugins/UnicornLog.js"),a=n("../node_modules/vue-code-highlight/dist/vue-code-highlight.esm.js");r.default.use(o.default),t.default={name:"MagicalExample",components:{VueCodeHighlight:a.component},data:function(){return{magical:!0}},methods:{simpleExample:function(){this.$unicornLog({text:"Hello World",magical:this.magical})}}}},"../node_modules/babel-loader/lib/index.js??clonedRuleSet-1[0].rules[0].use!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/Objects.vue?vue&type=script&lang=js&":function(e,t,n){"use strict";n.r(t);var r=n("../node_modules/vue/dist/vue.runtime.esm.js"),o=n("./plugins/UnicornLog.js"),a=n("../node_modules/vue-code-highlight/dist/vue-code-highlight.esm.js");function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}r.default.use(o.default),t.default={name:"ObjectsExample",components:{VueCodeHighlight:a.component},data:function(){return{}},methods:{simpleExample:function(){this.$unicornLog({text:"Hello World",objects:{foo:"bar"}})},multipleObjects:function(){this.$unicornLog({text:"Hello World",objects:{foo:{foo:"foo "},bar:{bar:"bar "}}})},objectSpreadOperator:function(){this.$unicornLog({text:"Hello World",objects:s(s({},{foo:"foo"}),{bar:"bar"})})}}}},"../node_modules/babel-loader/lib/index.js??clonedRuleSet-1[0].rules[0].use!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/Simple.vue?vue&type=script&lang=js&":function(e,t,n){"use strict";n.r(t);var r=n("../node_modules/vue/dist/vue.runtime.esm.js"),o=n("./plugins/UnicornLog.js"),a=n("../node_modules/vue-code-highlight/dist/vue-code-highlight.esm.js");r.default.use(o.default),t.default={name:"SimpleExample",components:{VueCodeHighlight:a.component},data:function(){return{}},methods:{simpleExample:function(){this.$unicornLog()}}}},"../node_modules/babel-loader/lib/index.js??clonedRuleSet-1[0].rules[0].use!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/Styles.vue?vue&type=script&lang=js&":function(e,t,n){"use strict";n.r(t);var r=n("../node_modules/vue/dist/vue.runtime.esm.js"),o=n("./plugins/UnicornLog.js"),a=n("../node_modules/vue-code-highlight/dist/vue-code-highlight.esm.js");r.default.use(o.default),t.default={name:"StylesExample",components:{VueCodeHighlight:a.component},data:function(){return{defaultStyles:"color: DeepPink; font-size: 2rem;",magicalWord:"unicorn",magicalWords:["magic","magical","prism","psychedelic","rainbow","trippy","unicorn"]}},methods:{arrayExample:function(){this.$unicornLog({text:"Hello World",styles:["background: black","border: 1px dashed magenta","color: magenta","font-family: monospace","font-size: 2em","padding: 10px"]})},simpleExample:function(){this.$unicornLog({text:"Hello World",styles:this.defaultStyles})},wordExample:function(){this.$unicornLog({text:"Using the word ".concat(this.magicalWord),styles:this.magicalWord})}}}},"../node_modules/babel-loader/lib/index.js??clonedRuleSet-1[0].rules[0].use!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/Text.vue?vue&type=script&lang=js&":function(e,t,n){"use strict";n.r(t);var r=n("../node_modules/vue/dist/vue.runtime.esm.js"),o=n("./plugins/UnicornLog.js"),a=n("../node_modules/vue-code-highlight/dist/vue-code-highlight.esm.js");r.default.use(o.default),t.default={name:"TextExample",components:{VueCodeHighlight:a.component},data:function(){return{text:"Hello World"}},methods:{simpleExample:function(){return""!==this.text?(this.$unicornLog({text:this.text}),!1):(this.$unicornLog(),!1)}}}},"../node_modules/babel-loader/lib/index.js??clonedRuleSet-1[0].rules[0].use!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/Type.vue?vue&type=script&lang=js&":function(e,t,n){"use strict";n.r(t);var r=n("../node_modules/vue/dist/vue.runtime.esm.js"),o=n("./plugins/UnicornLog.js"),a=n("../node_modules/vue-code-highlight/dist/vue-code-highlight.esm.js");r.default.use(o.default),t.default={name:"TypeExample",components:{VueCodeHighlight:a.component},data:function(){return{logNote:"",logType:"log",types:["clear","debug","dir","error","group","groupCollapsed","groupEnd","info","log","table","trace","warn"]}},methods:{checkType:function(){this.logNote="";var e="\n\t\t\t".concat('\n\t\t\t\t<svg xmlns="http://www.w3.org/2000/svg" style="display: none;">\n\t\t\t\t\t<symbol id="info-fill" fill="currentColor" viewBox="0 0 16 16">\n\t\t\t\t\t\t<path d="M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16zm.93-9.412-1 4.705c-.07.34.029.533.304.533.194 0 .487-.07.686-.246l-.088.416c-.287.346-.92.598-1.465.598-.703 0-1.002-.422-.808-1.319l.738-3.468c.064-.293.006-.399-.287-.47l-.451-.081.082-.381 2.29-.287zM8 5.5a1 1 0 1 1 0-2 1 1 0 0 1 0 2z"/>\n\t\t\t\t\t</symbol>\n\t\t\t\t</svg>\n\t\t\t','\n\t\t\t <svg class="bi flex-shrink-0 me-2" width="24" height="24" role="img" aria-label="Info:"><use xlink:href="#info-fill"></use></svg>\n\t\t\t');return"dir"===this.logType||"table"===this.logType?(this.logNote="".concat(e,"<div>Console method <code>").concat(this.logType,"</code> will work, but does not support colors.</div>"),!1):"groupEnd"===this.logType&&(this.logNote="".concat(e,"<div><code>groupEnd</code> only works when used with <code>group</code> or <code>groupCollapsed</code><div>"),!1)},simpleExample:function(){return"dir"===this.logType?(this.$unicornLog({text:"Hello World",type:"dir",objects:{foo:"bar"}}),!1):"table"===this.logType||"debug"===this.logType?(this.$unicornLog({text:"Hello World",type:this.logType,array:[{foo:"foo"},{foo:"bar"}]}),!1):"group"===this.logType||"groupCollapsed"===this.logType?(this.$unicornLog({text:"".concat(this.logType),type:this.logType}),this.$unicornLog({text:"Foo",type:"log"}),this.$unicornLog({text:"Bar",type:"log"}),this.$unicornLog({type:"groupEnd",array:[{foo:"foo"},{foo:"bar"}]}),!1):(this.$unicornLog({text:"Hello World",type:this.logType}),!1)}}}},"../node_modules/babel-loader/lib/index.js??clonedRuleSet-1[0].rules[0].use!../node_modules/vue-loader/lib/index.js??vue-loader-options!./docs/UnicornLog.vue?vue&type=script&lang=js&":function(e,t,n){"use strict";n.r(t);var r=n("../node_modules/vue/dist/vue.runtime.esm.js"),o=n("./components/Nav.vue"),a=n("./components/examples/Arrays.vue"),i=n("./components/examples/Disabled.vue"),s=n("./components/examples/LogPrefix.vue"),l=n("./components/examples/Magical.vue"),c=n("./components/examples/Objects.vue"),u=n("./components/examples/Simple.vue"),d=n("./components/examples/Styles.vue"),p=n("./components/examples/Text.vue"),f=n("./components/examples/Type.vue"),v=n("./plugins/UnicornLog.js"),m=n("../node_modules/vue-code-highlight/dist/vue-code-highlight.esm.js");function g(e){return function(e){if(Array.isArray(e))return h(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return h(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return h(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function h(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}r.default.use(v.default),t.default={name:"UnicornLog",props:{},components:{ArraysExample:a.default,DisabledExample:i.default,LogPrefixExample:s.default,MagicalExample:l.default,Nav:o.default,ObjectsExamples:c.default,SimpleExample:u.default,StylesExample:d.default,TextExample:p.default,TypeExample:f.default,VueCodeHighlight:m.component},data:function(){return{copy:{array:"Used to include an array in the log.",defaultStyles:"Used to adjust the default styles.",disabled:"Disables the output of the log in the console. This works best when using an environment to conditionally set so it \t\t\t\t\t\t\t\t\t\twill log in development, but not on the production site.",logPrefix:"Prepends a string to to the output.",magical:"Adds a magical style to the output.",object:"Used to include objects in the log.",styles:"Sets the styles for the log.",text:"Used to include a string in the log.",type:"Specifies which console method should be used."},options:{boolean:'<span class="boolean-style">true<br />false</span>',styles:'<a href="https://developer.mozilla.org/en-US/docs/Web/API/console#styling_console_output" target="_blank"\t\t\t\t\t\t\t\t\t\t\t>Styling Console Output</a>',type:"\n\t\t\t\tclear\n\t\t\t\t<br />\n\t\t\t\tdebug\n\t\t\t\t<br />\n\t\t\t\tdir\n\t\t\t\t<br />\n\t\t\t\terror\n\t\t\t\t<br />\n\t\t\t\tgroup\n\t\t\t\t<br />\n\t\t\t\tgroupCollapsed\n\t\t\t\t<br />\n\t\t\t\tgroupEnd\n\t\t\t\t<br />\n\t\t\t\tinfo\n\t\t\t\t<br />\n\t\t\t\tlog\n\t\t\t\t<br />\n\t\t\t\ttable\n\t\t\t\t<br />\n\t\t\t\ttrace\n\t\t\t\t<br />\n\t\t\t\twarn\n\t\t\t"},rainbowLinearGradient:"linear-gradient(to right,\n\t\t\thsl(0, 100%, 50%),\n\t\t\thsl(39, 100%, 50%),\n\t\t\thsl(60, 100%, 50%),\n\t\t\thsl(120, 100%, 50%),\n\t\t\thsl(180, 100%, 50%),\n\t\t\thsl(240, 100%, 50%),\n\t\t\thsl(300, 100%, 50%),\n\t\t\thsl(360, 100%, 50%)\n\t\t)",testArrays:[["foo","bar"],["bar","foo"]],testObjects:[{foo:"foo",bar:"bar"},{fooTwo:"fooTwo",barTwo:"barTwo"}]}},mounted:function(){this.welcomeLog()},methods:{testingLogs:function(){var e=this.testArrays[0],t=this.testArrays[1],n=this.testObjects[0],r=this.testObjects[1];this.$unicornLog({array:[].concat(g(e),g(t),[["foobar"]]),logPrefix:!0,objects:{testObj1:n,testObj2:r,testObj3:{barThree:"barThree",fooThree:"fooThree"}},text:"Testing Log",type:"log"})},welcomeLog:function(){this.$unicornLog({text:"Vue Unicorn Log... It's magical!",styles:["background: ".concat(this.rainbowLinearGradient),"color: #f7f7f7","display: block",'font-family: "Helvetica", "Arial"',"font-size: 25px","font-weight: bold","margin: 5px 0","padding: 15px","text-align: center","text-shadow: 1px 1px 2px #000"],type:"log"})}}}},"./plugins/UnicornLog.js":function(e,t,n){"use strict";n.r(t);var r=n("./plugins/UnicornLogCore.js");function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var s={install:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e;e.prototype.$unicornLog||e.prototype.$uniLog||(this.options=a(a({},this.options),t),n.prototype.$unicornLog=function(t){return r.default.init(e,s.options,t),!1},n.prototype.$uniLog=function(t){return r.default.init(e,s.options,t),!1})},options:{defaultStyles:{},disabled:!1,logPrefix:!1,styles:"",type:"log"}};t.default=s},"./plugins/UnicornLogCore.js":function(e,t,n){"use strict";function r(e){return function(e){if(Array.isArray(e))return o(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return o(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return o(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function o(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function a(e){return a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a(e)}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}n.r(t);var c="linear-gradient(to right,\n\thsl(0, 100%, 50%),\n\thsl(39, 100%, 50%),\n\thsl(60, 100%, 50%),\n\thsl(120, 100%, 50%),\n\thsl(180, 100%, 50%),\n\thsl(240, 100%, 50%),\n\thsl(300, 100%, 50%),\n\thsl(360, 100%, 50%)\n)",u={errors:0,logOptions:{},name:"UnicornLog",output:null,pluginOptions:{},types:["clear","count","countReset","debug","dir","error","group","groupCollapsed","groupEnd","info","log","table","time","timeEnd","timeLog","trace","warn"],defaultStyles:{log:["background-color: black","border-image: ".concat(c," 1"),"border-style: solid","border-width: 4px","color: #fff","font-weight: normal","padding: 8px"],info:["background-color: hsla(225, 100%, 8%, 1)","box-shadow: 999px 0 0 hsla(225, 100%, 8%, 1)","color: hsla(225, 100%, 85%, 1)","display: block","padding: 2px"],goNuts:["background: ".concat(c),"color: #f7f7f7","display: block",'font-family: "Helvetica", "Arial"',"font-size: 15px","font-weight: bold","margin: 5px 0","padding: 10px","text-shadow: 1px 1px 2px #000"]},magicalStyleNames:["magic","magical","prism","psychedelic","rainbow","trippy","unicorn"],defaultOptions:{array:[],defaultStyles:{},disabled:!0,logPrefix:!1,magical:!1,name:"[UnicornLog]:",objects:{},styles:"",text:"🦄",type:"log"},init:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return!t.disabled&&!n.disabled&&(this.pluginOptions=t,this.logOptions=s(s(s({},this.defaultOptions),this.pluginOptions),n),this.defaultStyles=s(s(s({},this.defaultStyles),this.pluginOptions.defaultStyles),n.defaultStyles),Object.values(this.validateOptions).map((function(e){return"function"==typeof e&&e.call()})),Object.values(this.build).map((function(e){return"function"==typeof e&&e.call()})),this.errors||this.consoleOutput(this.logOptions.type),!1)},validateOptions:{type:function(){var e=u.logOptions.type;return!u.types.includes(e)&&(u.errors+=1,"dirXml"===e?(u.logger("console.dir() is not supported console method.","warn"),!1):(u.logger("console.".concat(e,"() is not supported at this time or is not a valid console method."),"warn"),!1))},styles:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:u.logOptions.styles;e instanceof Array||"object"!==a(e)&&!Number.isInteger(e)||u.logger('The "styles" option is not a String or an Array.',"error")},logPrefix:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:u.logOptions.logPrefix;("object"===a(e)||e instanceof Boolean)&&u.logger('The "logPrefix" option is not a string or boolean.',"error")},text:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:u.logOptions.text;"string"!=typeof e&&u.logger('The "text" option is not a string.',"error")},objects:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:u.logOptions.objects;(e instanceof Array||"string"==typeof e||Number.isInteger(e))&&u.logger('The "objects" option is not an object.',"error")},array:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:u.logOptions.array;e instanceof Array&&"string"!=typeof e&&!Number.isInteger(e)||u.logger('The "array" option is not an array.',"error")}},build:{prefix:function(){var e=u.logOptions;e.logPrefix&&("string"==typeof e.logPrefix?e.text="".concat(e.logPrefix," ").concat(e.text):e.text="".concat(e.name," ").concat(e.text))},styles:function(){var e=u.logOptions,t=e.styles;t=!1===t?"":"log"!==e.type&&"info"!==e.type||!u.magicalStyleNames.includes(e.styles)&&!e.magical?""!==t&&!0!==t||"info"!==e.type?t||u.defaultStyles.log.join(";"):u.defaultStyles.info.join(";"):u.defaultStyles.goNuts.join(";"),Array.isArray(t)&&(t=t.join(";")),e.styles=t},output:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:u.logOptions,t=["%c%s",e.styles];e.text&&t.push(e.text),e.array.length&&t.push(e.array),Object.keys(e.objects).length&&t.push(e.objects),u.output=t}},consoleDir:function(){var e={};return Object.keys(this.logOptions.objects).length&&(Object.keys(this.logOptions.array).length?e.objects=this.logOptions.objects:Object.assign(e,this.logOptions.objects)),Object.keys(this.logOptions.array).length&&(Object.keys(this.logOptions.objects).length?e.array=this.logOptions.array:Object.assign(e,this.logOptions.array)),Object.keys(e).length?(u.logger("console.dir() does not support colors.","info"),e):u.logger('console.dir() expects the "objects" and/or array option value to be set.',"error")},consoleTable:function(){return u.logger("console.table() does not support colors.","info"),this.logOptions.array},consoleMethodNotSupported:function(e){this.errors+=1,u.logger("console.".concat(e,"() does not support colors."),"info")},consoleOutput:function(e){var t;("dir"===e&&(this.output=[this.consoleDir()]),"table"===e&&(this.output=[this.consoleTable()]),"count"!==e&&"countReset"!==e&&"time"!==e&&"timeEnd"!==e&&"timeLog"!==e||(this.output=[this.consoleMethodNotSupported(e)]),this.errors)||(t=console)[e].apply(t,r(this.output))},logger:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"An error has occurred.",t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"log",n=t.charAt(0).toUpperCase()+t.slice(1),r="";return"error"===t&&(this.errors+=1),"info"===t&&(r=this.defaultStyles.info.join(";")),console[t]("%c%s",r,"[".concat(u.name," ").concat(n,"]: ").concat(e)),!1}};t.default=u},"../node_modules/css-loader/dist/cjs.js!../node_modules/vue-code-highlight/themes/prism-tomorrow.css":function(e,t,n){"use strict";n.r(t);var r=n("../node_modules/css-loader/dist/runtime/sourceMaps.js"),o=n.n(r),a=n("../node_modules/css-loader/dist/runtime/api.js"),i=n.n(a)()(o());i.push([e.id,'/**\n * prism.js tomorrow night eighties for JavaScript, CoffeeScript, CSS and HTML\n * Based on https://github.com/chriskempson/tomorrow-theme\n * @author Rose Pritchard\n */\n\ncode[class*="language-"],\npre[class*="language-"] {\n\tcolor: #ccc;\n\tbackground: none;\n\tfont-family: Consolas, Monaco, \'Andale Mono\', \'Ubuntu Mono\', monospace;\n\ttext-align: left;\n\twhite-space: pre;\n\tword-spacing: normal;\n\tword-break: normal;\n\tword-wrap: normal;\n\tline-height: 1.5;\n\n\t-moz-tab-size: 4;\n\t-o-tab-size: 4;\n\ttab-size: 4;\n\n\t-webkit-hyphens: none;\n\t-moz-hyphens: none;\n\t-ms-hyphens: none;\n\thyphens: none;\n\n}\n\n/* Code blocks */\npre[class*="language-"] {\n\tpadding: 1em;\n\tmargin: .5em 0;\n\toverflow: auto;\n}\n\n:not(pre) > code[class*="language-"],\npre[class*="language-"] {\n\tbackground: #2d2d2d;\n}\n\n/* Inline code */\n:not(pre) > code[class*="language-"] {\n\tpadding: .1em;\n\tborder-radius: .3em;\n\twhite-space: normal;\n}\n\n.token.comment,\n.token.block-comment,\n.token.prolog,\n.token.doctype,\n.token.cdata {\n\tcolor: #999;\n}\n\n.token.punctuation {\n\tcolor: #ccc;\n}\n\n.token.tag,\n.token.attr-name,\n.token.namespace,\n.token.deleted {\n\tcolor: #e2777a;\n}\n\n.token.function-name {\n\tcolor: #6196cc;\n}\n\n.token.boolean,\n.token.number,\n.token.function {\n\tcolor: #f08d49;\n}\n\n.token.property,\n.token.class-name,\n.token.constant,\n.token.symbol {\n\tcolor: #f8c555;\n}\n\n.token.selector,\n.token.important,\n.token.atrule,\n.token.keyword,\n.token.builtin {\n\tcolor: #cc99cd;\n}\n\n.token.string,\n.token.char,\n.token.attr-value,\n.token.regex,\n.token.variable {\n\tcolor: #7ec699;\n}\n\n.token.operator,\n.token.entity,\n.token.url {\n\tcolor: #67cdcc;\n}\n\n.token.important,\n.token.bold {\n\tfont-weight: bold;\n}\n.token.italic {\n\tfont-style: italic;\n}\n\n.token.entity {\n\tcursor: help;\n}\n\n.token.inserted {\n\tcolor: green;\n}\n',"",{version:3,sources:["webpack://./../node_modules/vue-code-highlight/themes/prism-tomorrow.css"],names:[],mappings:"AAAA;;;;EAIE;;AAEF;;CAEC,WAAW;CACX,gBAAgB;CAChB,sEAAsE;CACtE,gBAAgB;CAChB,gBAAgB;CAChB,oBAAoB;CACpB,kBAAkB;CAClB,iBAAiB;CACjB,gBAAgB;;CAEhB,gBAAgB;CAChB,cAAc;CACd,WAAW;;CAEX,qBAAqB;CACrB,kBAAkB;CAClB,iBAAiB;CACjB,aAAa;;AAEd;;AAEA,gBAAgB;AAChB;CACC,YAAY;CACZ,cAAc;CACd,cAAc;AACf;;AAEA;;CAEC,mBAAmB;AACpB;;AAEA,gBAAgB;AAChB;CACC,aAAa;CACb,mBAAmB;CACnB,mBAAmB;AACpB;;AAEA;;;;;CAKC,WAAW;AACZ;;AAEA;CACC,WAAW;AACZ;;AAEA;;;;CAIC,cAAc;AACf;;AAEA;CACC,cAAc;AACf;;AAEA;;;CAGC,cAAc;AACf;;AAEA;;;;CAIC,cAAc;AACf;;AAEA;;;;;CAKC,cAAc;AACf;;AAEA;;;;;CAKC,cAAc;AACf;;AAEA;;;CAGC,cAAc;AACf;;AAEA;;CAEC,iBAAiB;AAClB;AACA;CACC,kBAAkB;AACnB;;AAEA;CACC,YAAY;AACb;;AAEA;CACC,YAAY;AACb",sourcesContent:['/**\n * prism.js tomorrow night eighties for JavaScript, CoffeeScript, CSS and HTML\n * Based on https://github.com/chriskempson/tomorrow-theme\n * @author Rose Pritchard\n */\n\ncode[class*="language-"],\npre[class*="language-"] {\n\tcolor: #ccc;\n\tbackground: none;\n\tfont-family: Consolas, Monaco, \'Andale Mono\', \'Ubuntu Mono\', monospace;\n\ttext-align: left;\n\twhite-space: pre;\n\tword-spacing: normal;\n\tword-break: normal;\n\tword-wrap: normal;\n\tline-height: 1.5;\n\n\t-moz-tab-size: 4;\n\t-o-tab-size: 4;\n\ttab-size: 4;\n\n\t-webkit-hyphens: none;\n\t-moz-hyphens: none;\n\t-ms-hyphens: none;\n\thyphens: none;\n\n}\n\n/* Code blocks */\npre[class*="language-"] {\n\tpadding: 1em;\n\tmargin: .5em 0;\n\toverflow: auto;\n}\n\n:not(pre) > code[class*="language-"],\npre[class*="language-"] {\n\tbackground: #2d2d2d;\n}\n\n/* Inline code */\n:not(pre) > code[class*="language-"] {\n\tpadding: .1em;\n\tborder-radius: .3em;\n\twhite-space: normal;\n}\n\n.token.comment,\n.token.block-comment,\n.token.prolog,\n.token.doctype,\n.token.cdata {\n\tcolor: #999;\n}\n\n.token.punctuation {\n\tcolor: #ccc;\n}\n\n.token.tag,\n.token.attr-name,\n.token.namespace,\n.token.deleted {\n\tcolor: #e2777a;\n}\n\n.token.function-name {\n\tcolor: #6196cc;\n}\n\n.token.boolean,\n.token.number,\n.token.function {\n\tcolor: #f08d49;\n}\n\n.token.property,\n.token.class-name,\n.token.constant,\n.token.symbol {\n\tcolor: #f8c555;\n}\n\n.token.selector,\n.token.important,\n.token.atrule,\n.token.keyword,\n.token.builtin {\n\tcolor: #cc99cd;\n}\n\n.token.string,\n.token.char,\n.token.attr-value,\n.token.regex,\n.token.variable {\n\tcolor: #7ec699;\n}\n\n.token.operator,\n.token.entity,\n.token.url {\n\tcolor: #67cdcc;\n}\n\n.token.important,\n.token.bold {\n\tfont-weight: bold;\n}\n.token.italic {\n\tfont-style: italic;\n}\n\n.token.entity {\n\tcursor: help;\n}\n\n.token.inserted {\n\tcolor: green;\n}\n'],sourceRoot:""}]),t.default=i},"../node_modules/css-loader/dist/cjs.js!../node_modules/vue-code-highlight/themes/window.css":function(e,t,n){"use strict";n.r(t);var r=n("../node_modules/css-loader/dist/runtime/sourceMaps.js"),o=n.n(r),a=n("../node_modules/css-loader/dist/runtime/api.js"),i=n.n(a),s=n("../node_modules/css-loader/dist/runtime/getUrl.js"),l=n.n(s),c=new URL(n('data:image/svg+xml;utf8, <svg xmlns="http://www.w3.org/2000/svg" width="54" height="14" viewBox="0 0 54 14"><g fill="none" fillRule="evenodd" transform="translate%281 1%29"><circle cx="6" cy="6" r="6" fill="%23FF5F56" stroke="%23E0443E" strokeWidth=".5" /><circle cx="26" cy="6" r="6" fill="%23FFBD2E" stroke="%23DEA123" strokeWidth=".5" /><circle cx="46" cy="6" r="6" fill="%2327C93F" stroke="%231AAB29" strokeWidth=".5" /></g></svg>'),n.b),u=i()(o()),d=l()(c);u.push([e.id,'div pre[class*="language-"] {\n  display: inline-block;\n  width: 100%;\n  padding-right: 10em;\n  padding-top: 3rem;\n  border-radius: 6px;\n  background-image: url('+d+");\n  background-repeat: no-repeat;\n  background-position: 16px 16px;\n  box-shadow: 5px 5px 15px 0px rgba(50, 50, 50, 0.75);\n}\n","",{version:3,sources:["webpack://./../node_modules/vue-code-highlight/themes/window.css"],names:[],mappings:"AAAA;EACE,qBAAqB;EACrB,WAAW;EACX,mBAAmB;EACnB,iBAAiB;EACjB,kBAAkB;EAClB,yDAAuc;EACvc,4BAA4B;EAC5B,8BAA8B;EAC9B,mDAAmD;AACrD",sourcesContent:['div pre[class*="language-"] {\n  display: inline-block;\n  width: 100%;\n  padding-right: 10em;\n  padding-top: 3rem;\n  border-radius: 6px;\n  background-image: url(\'data:image/svg+xml;utf8, <svg xmlns="http://www.w3.org/2000/svg" width="54" height="14" viewBox="0 0 54 14"><g fill="none" fillRule="evenodd" transform="translate(1 1)"><circle cx="6" cy="6" r="6" fill="%23FF5F56" stroke="%23E0443E" strokeWidth=".5" /><circle cx="26" cy="6" r="6" fill="%23FFBD2E" stroke="%23DEA123" strokeWidth=".5" /><circle cx="46" cy="6" r="6" fill="%2327C93F" stroke="%231AAB29" strokeWidth=".5" /></g></svg>\');\n  background-repeat: no-repeat;\n  background-position: 16px 16px;\n  box-shadow: 5px 5px 15px 0px rgba(50, 50, 50, 0.75);\n}\n'],sourceRoot:""}]),t.default=u},"../node_modules/css-loader/dist/cjs.js!../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../node_modules/sass-loader/dist/cjs.js??clonedRuleSet-3[0].rules[0].use[2]!../node_modules/vue-loader/lib/index.js??vue-loader-options!./docs/UnicornLog.vue?vue&type=style&index=0&lang=scss&":function(e,t,n){"use strict";n.r(t);var r=n("../node_modules/css-loader/dist/runtime/sourceMaps.js"),o=n.n(r),a=n("../node_modules/css-loader/dist/runtime/api.js"),i=n.n(a),s=n("../node_modules/css-loader/dist/cjs.js!../node_modules/vue-code-highlight/themes/prism-tomorrow.css"),l=n("../node_modules/css-loader/dist/cjs.js!../node_modules/vue-code-highlight/themes/window.css"),c=i()(o());c.i(s.default),c.i(l.default),c.push([e.id,'html {\n  scroll-padding-top: 70px;\n}\nh1 {\n  font-family: "Henny Penny", cursive;\n  font-weight: bold;\n  font-size: 3em;\n}\nh2 {\n  font-family: "Indie Flower", cursive;\n}\nh2::after {\n  content: " ";\n  background-image: linear-gradient(to right, red, #ffa600, yellow, lime, aqua, blue, fuchsia, red);\n  border-radius: 5px;\n  display: block;\n  height: 2px;\n}\n.table tbody td pre {\n  background-color: #fafafa !important;\n  border-radius: 5px;\n  padding: 1rem;\n  tab-size: 2;\n}\n.option-type {\n  color: #7b1fa3 !important;\n  font-weight: 500;\n}\n.boolean-style {\n  color: blue !important;\n  font-weight: 500;\n}\n.rainbow-text {\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n  background-clip: text;\n  background-image: linear-gradient(to right, red, #ffa600, yellow, lime, aqua, blue, fuchsia, red);\n  border-radius: 5px;\n  color: transparent;\n  display: inline-block;\n  font-weight: bold;\n  height: 100%;\n  text-shadow: 0 2px 3px rgba(255, 255, 255, 0.3), 0 -1px 2px rgba(0, 0, 0, 0.2);\n}\n.rainbow-border {\n  background-color: #000;\n  border-image: linear-gradient(to right, red, #ffa600, yellow, lime, aqua, blue, fuchsia, red) 1;\n  border-style: solid;\n  border-width: 4px;\n  padding: 2rem;\n}',"",{version:3,sources:["webpack://./docs/UnicornLog.vue","webpack://./../UnicornLog.vue"],names:[],mappings:"AAmnBA;EACC,wBAAA;AChnBD;ADmnBA;EACC,mCAAA;EACA,iBAAA;EACA,cAAA;AChnBD;ADmnBA;EACC,oCAAA;AChnBD;ADknBC;EACC,YAAA;EACA,iGA3BiB;EA4BjB,kBAAA;EACA,cAAA;EACA,WAAA;AChnBF;ADunBG;EACC,oCAAA;EACA,kBAAA;EACA,aAAA;EACA,WAAA;ACpnBJ;AD0nBA;EACC,yBAAA;EACA,gBAAA;ACvnBD;AD0nBA;EACC,sBAAA;EACA,gBAAA;ACvnBD;AD0nBA;EACC,6BAAA;EACA,oCAAA;EACA,qBAAA;EACA,iGA7DkB;EA8DlB,kBAAA;EACA,kBAAA;EACA,qBAAA;EACA,iBAAA;EACA,YAAA;EACA,8EAAA;ACvnBD;AD0nBA;EACC,sBAAA;EACA,+FAAA;EACA,mBAAA;EACA,iBAAA;EACA,aAAA;ACvnBD",sourcesContent:["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n@import 'vue-code-highlight/themes/prism-tomorrow.css';\n@import 'vue-code-highlight/themes/window.css';\n\n$rainbow-gradient: linear-gradient(\n\tto right,\n\thsl(0, 100%, 50%),\n\thsl(39, 100%, 50%),\n\thsl(60, 100%, 50%),\n\thsl(120, 100%, 50%),\n\thsl(180, 100%, 50%),\n\thsl(240, 100%, 50%),\n\thsl(300, 100%, 50%),\n\thsl(0, 100%, 50%)\n);\n\nhtml {\n\tscroll-padding-top: 70px;\n}\n\nh1 {\n\tfont-family: 'Henny Penny', cursive;\n\tfont-weight: bold;\n\tfont-size: 3em;\n}\n\nh2 {\n\tfont-family: 'Indie Flower', cursive;\n\n\t&::after {\n\t\tcontent: ' ';\n\t\tbackground-image: $rainbow-gradient;\n\t\tborder-radius: 5px;\n\t\tdisplay: block;\n\t\theight: 2px;\n\t}\n}\n\n.table {\n\ttbody {\n\t\ttd {\n\t\t\tpre {\n\t\t\t\tbackground-color: #fafafa !important;\n\t\t\t\tborder-radius: 5px;\n\t\t\t\tpadding: 1rem;\n\t\t\t\ttab-size: 2;\n\t\t\t}\n\t\t}\n\t}\n}\n\n.option-type {\n\tcolor: hsl(282, 68%, 38%) !important;\n\tfont-weight: 500;\n}\n\n.boolean-style {\n\tcolor: hsl(240, 100%, 50%) !important;\n\tfont-weight: 500;\n}\n\n.rainbow-text {\n\t-webkit-background-clip: text;\n\t-webkit-text-fill-color: transparent;\n\tbackground-clip: text;\n\tbackground-image: $rainbow-gradient;\n\tborder-radius: 5px;\n\tcolor: transparent;\n\tdisplay: inline-block;\n\tfont-weight: bold;\n\theight: 100%;\n\ttext-shadow: 0 2px 3px rgba(255, 255, 255, 0.3), 0 -1px 2px rgba(0, 0, 0, 0.2);\n}\n\n.rainbow-border {\n\tbackground-color: #000;\n\tborder-image: $rainbow-gradient 1;\n\tborder-style: solid;\n\tborder-width: 4px;\n\tpadding: 2rem;\n}\n",'@import \'vue-code-highlight/themes/prism-tomorrow.css\';\n@import \'vue-code-highlight/themes/window.css\';\nhtml {\n  scroll-padding-top: 70px;\n}\n\nh1 {\n  font-family: "Henny Penny", cursive;\n  font-weight: bold;\n  font-size: 3em;\n}\n\nh2 {\n  font-family: "Indie Flower", cursive;\n}\nh2::after {\n  content: " ";\n  background-image: linear-gradient(to right, red, #ffa600, yellow, lime, aqua, blue, fuchsia, red);\n  border-radius: 5px;\n  display: block;\n  height: 2px;\n}\n\n.table tbody td pre {\n  background-color: #fafafa !important;\n  border-radius: 5px;\n  padding: 1rem;\n  tab-size: 2;\n}\n\n.option-type {\n  color: #7b1fa3 !important;\n  font-weight: 500;\n}\n\n.boolean-style {\n  color: blue !important;\n  font-weight: 500;\n}\n\n.rainbow-text {\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n  background-clip: text;\n  background-image: linear-gradient(to right, red, #ffa600, yellow, lime, aqua, blue, fuchsia, red);\n  border-radius: 5px;\n  color: transparent;\n  display: inline-block;\n  font-weight: bold;\n  height: 100%;\n  text-shadow: 0 2px 3px rgba(255, 255, 255, 0.3), 0 -1px 2px rgba(0, 0, 0, 0.2);\n}\n\n.rainbow-border {\n  background-color: #000;\n  border-image: linear-gradient(to right, red, #ffa600, yellow, lime, aqua, blue, fuchsia, red) 1;\n  border-style: solid;\n  border-width: 4px;\n  padding: 2rem;\n}'],sourceRoot:""}]),t.default=c},"../node_modules/css-loader/dist/runtime/api.js":function(e){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(i[l]=!0)}for(var c=0;c<e.length;c++){var u=[].concat(e[c]);r&&i[u[0]]||(void 0!==a&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=a),n&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=n):u[2]=n),o&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=o):u[4]="".concat(o)),t.push(u))}},t}},"../node_modules/css-loader/dist/runtime/getUrl.js":function(e){"use strict";e.exports=function(e,t){return t||(t={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),t.hash&&(e+=t.hash),/["'() \t\n]|(%20)/.test(e)||t.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},"../node_modules/css-loader/dist/runtime/sourceMaps.js":function(e){"use strict";e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */"),i=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[t].concat(i).concat([a]).join("\n")}return[t].join("\n")}},"../node_modules/events/events.js":function(e){"use strict";var t,n="object"==typeof Reflect?Reflect:null,r=n&&"function"==typeof n.apply?n.apply:function(e,t,n){return Function.prototype.apply.call(e,t,n)};t=n&&"function"==typeof n.ownKeys?n.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var o=Number.isNaN||function(e){return e!=e};function a(){a.init.call(this)}e.exports=a,e.exports.once=function(e,t){return new Promise((function(n,r){function o(n){e.removeListener(t,a),r(n)}function a(){"function"==typeof e.removeListener&&e.removeListener("error",o),n([].slice.call(arguments))}m(e,t,a,{once:!0}),"error"!==t&&function(e,t,n){"function"==typeof e.on&&m(e,"error",t,n)}(e,o,{once:!0})}))},a.EventEmitter=a,a.prototype._events=void 0,a.prototype._eventsCount=0,a.prototype._maxListeners=void 0;var i=10;function s(e){if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e)}function l(e){return void 0===e._maxListeners?a.defaultMaxListeners:e._maxListeners}function c(e,t,n,r){var o,a,i,c;if(s(n),void 0===(a=e._events)?(a=e._events=Object.create(null),e._eventsCount=0):(void 0!==a.newListener&&(e.emit("newListener",t,n.listener?n.listener:n),a=e._events),i=a[t]),void 0===i)i=a[t]=n,++e._eventsCount;else if("function"==typeof i?i=a[t]=r?[n,i]:[i,n]:r?i.unshift(n):i.push(n),(o=l(e))>0&&i.length>o&&!i.warned){i.warned=!0;var u=new Error("Possible EventEmitter memory leak detected. "+i.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");u.name="MaxListenersExceededWarning",u.emitter=e,u.type=t,u.count=i.length,c=u,console&&console.warn&&console.warn(c)}return e}function u(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function d(e,t,n){var r={fired:!1,wrapFn:void 0,target:e,type:t,listener:n},o=u.bind(r);return o.listener=n,r.wrapFn=o,o}function p(e,t,n){var r=e._events;if(void 0===r)return[];var o=r[t];return void 0===o?[]:"function"==typeof o?n?[o.listener||o]:[o]:n?function(e){for(var t=new Array(e.length),n=0;n<t.length;++n)t[n]=e[n].listener||e[n];return t}(o):v(o,o.length)}function f(e){var t=this._events;if(void 0!==t){var n=t[e];if("function"==typeof n)return 1;if(void 0!==n)return n.length}return 0}function v(e,t){for(var n=new Array(t),r=0;r<t;++r)n[r]=e[r];return n}function m(e,t,n,r){if("function"==typeof e.on)r.once?e.once(t,n):e.on(t,n);else{if("function"!=typeof e.addEventListener)throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof e);e.addEventListener(t,(function o(a){r.once&&e.removeEventListener(t,o),n(a)}))}}Object.defineProperty(a,"defaultMaxListeners",{enumerable:!0,get:function(){return i},set:function(e){if("number"!=typeof e||e<0||o(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");i=e}}),a.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},a.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||o(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},a.prototype.getMaxListeners=function(){return l(this)},a.prototype.emit=function(e){for(var t=[],n=1;n<arguments.length;n++)t.push(arguments[n]);var o="error"===e,a=this._events;if(void 0!==a)o=o&&void 0===a.error;else if(!o)return!1;if(o){var i;if(t.length>0&&(i=t[0]),i instanceof Error)throw i;var s=new Error("Unhandled error."+(i?" ("+i.message+")":""));throw s.context=i,s}var l=a[e];if(void 0===l)return!1;if("function"==typeof l)r(l,this,t);else{var c=l.length,u=v(l,c);for(n=0;n<c;++n)r(u[n],this,t)}return!0},a.prototype.addListener=function(e,t){return c(this,e,t,!1)},a.prototype.on=a.prototype.addListener,a.prototype.prependListener=function(e,t){return c(this,e,t,!0)},a.prototype.once=function(e,t){return s(t),this.on(e,d(this,e,t)),this},a.prototype.prependOnceListener=function(e,t){return s(t),this.prependListener(e,d(this,e,t)),this},a.prototype.removeListener=function(e,t){var n,r,o,a,i;if(s(t),void 0===(r=this._events))return this;if(void 0===(n=r[e]))return this;if(n===t||n.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete r[e],r.removeListener&&this.emit("removeListener",e,n.listener||t));else if("function"!=typeof n){for(o=-1,a=n.length-1;a>=0;a--)if(n[a]===t||n[a].listener===t){i=n[a].listener,o=a;break}if(o<0)return this;0===o?n.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(n,o),1===n.length&&(r[e]=n[0]),void 0!==r.removeListener&&this.emit("removeListener",e,i||t)}return this},a.prototype.off=a.prototype.removeListener,a.prototype.removeAllListeners=function(e){var t,n,r;if(void 0===(n=this._events))return this;if(void 0===n.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==n[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete n[e]),this;if(0===arguments.length){var o,a=Object.keys(n);for(r=0;r<a.length;++r)"removeListener"!==(o=a[r])&&this.removeAllListeners(o);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=n[e]))this.removeListener(e,t);else if(void 0!==t)for(r=t.length-1;r>=0;r--)this.removeListener(e,t[r]);return this},a.prototype.listeners=function(e){return p(this,e,!0)},a.prototype.rawListeners=function(e){return p(this,e,!1)},a.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):f.call(e,t)},a.prototype.listenerCount=f,a.prototype.eventNames=function(){return this._eventsCount>0?t(this._events):[]}},"../node_modules/html-entities/lib/index.js":function(e,t,n){"use strict";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},r.apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0});var o=n("../node_modules/html-entities/lib/named-references.js"),a=n("../node_modules/html-entities/lib/numeric-unicode-map.js"),i=n("../node_modules/html-entities/lib/surrogate-pairs.js"),s=r(r({},o.namedReferences),{all:o.namedReferences.html5}),l={specialChars:/[<>'"&]/g,nonAscii:/(?:[<>'"&\u0080-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/g,nonAsciiPrintable:/(?:[<>'"&\x01-\x08\x11-\x15\x17-\x1F\x7f-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/g,extensive:/(?:[\x01-\x0c\x0e-\x1f\x21-\x2c\x2e-\x2f\x3a-\x40\x5b-\x60\x7b-\x7d\x7f-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/g},c={mode:"specialChars",level:"all",numeric:"decimal"};t.encode=function(e,t){var n=void 0===(u=(a=void 0===t?c:t).mode)?"specialChars":u,r=void 0===(v=a.numeric)?"decimal":v,o=a.level;if(!e)return"";var a,u,d=l[n],p=s[void 0===o?"all":o].characters,f="hexadecimal"===r;if(d.lastIndex=0,a=d.exec(e)){u="";var v=0;do{v!==a.index&&(u+=e.substring(v,a.index));var m=p[o=a[0]];if(!m){var g=o.length>1?i.getCodePoint(o,0):o.charCodeAt(0);m=(f?"&#x"+g.toString(16):"&#"+g)+";"}u+=m,v=a.index+o.length}while(a=d.exec(e));v!==e.length&&(u+=e.substring(v))}else u=e;return u};var u={scope:"body",level:"all"},d=/&(?:#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+);/g,p=/&(?:#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+)[;=]?/g,f={xml:{strict:d,attribute:p,body:o.bodyRegExps.xml},html4:{strict:d,attribute:p,body:o.bodyRegExps.html4},html5:{strict:d,attribute:p,body:o.bodyRegExps.html5}},v=r(r({},f),{all:f.html5}),m=String.fromCharCode,g=m(65533),h={level:"all"};t.decodeEntity=function(e,t){var n=void 0===(r=(void 0===t?h:t).level)?"all":r;if(!e)return"";var r=e,o=(e[e.length-1],s[n].entities[e]);if(o)r=o;else if("&"===e[0]&&"#"===e[1]){var l=e[2],c="x"==l||"X"==l?parseInt(e.substr(3),16):parseInt(e.substr(2));r=c>=1114111?g:c>65535?i.fromCodePoint(c):m(a.numericUnicodeMap[c]||c)}return r},t.decode=function(e,t){var n=void 0===t?u:t,r=n.level,o=void 0===r?"all":r,l=n.scope,c=void 0===l?"xml"===o?"strict":"body":l;if(!e)return"";var d=v[o][c],p=s[o].entities,f="attribute"===c,h="strict"===c;d.lastIndex=0;var b,y=d.exec(e);if(y){b="";var _=0;do{_!==y.index&&(b+=e.substring(_,y.index));var x=y[0],w=x,A=x[x.length-1];if(f&&"="===A)w=x;else if(h&&";"!==A)w=x;else{var C=p[x];if(C)w=C;else if("&"===x[0]&&"#"===x[1]){var k=x[2],j="x"==k||"X"==k?parseInt(x.substr(3),16):parseInt(x.substr(2));w=j>=1114111?g:j>65535?i.fromCodePoint(j):m(a.numericUnicodeMap[j]||j)}}b+=w,_=y.index+x.length}while(y=d.exec(e));_!==e.length&&(b+=e.substring(_))}else b=e;return b}},"../node_modules/html-entities/lib/named-references.js":function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.bodyRegExps={xml:/&(?:#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+);?/g,html4:/&(?:nbsp|iexcl|cent|pound|curren|yen|brvbar|sect|uml|copy|ordf|laquo|not|shy|reg|macr|deg|plusmn|sup2|sup3|acute|micro|para|middot|cedil|sup1|ordm|raquo|frac14|frac12|frac34|iquest|Agrave|Aacute|Acirc|Atilde|Auml|Aring|AElig|Ccedil|Egrave|Eacute|Ecirc|Euml|Igrave|Iacute|Icirc|Iuml|ETH|Ntilde|Ograve|Oacute|Ocirc|Otilde|Ouml|times|Oslash|Ugrave|Uacute|Ucirc|Uuml|Yacute|THORN|szlig|agrave|aacute|acirc|atilde|auml|aring|aelig|ccedil|egrave|eacute|ecirc|euml|igrave|iacute|icirc|iuml|eth|ntilde|ograve|oacute|ocirc|otilde|ouml|divide|oslash|ugrave|uacute|ucirc|uuml|yacute|thorn|yuml|quot|amp|lt|gt|#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+);?/g,html5:/&(?:AElig|AMP|Aacute|Acirc|Agrave|Aring|Atilde|Auml|COPY|Ccedil|ETH|Eacute|Ecirc|Egrave|Euml|GT|Iacute|Icirc|Igrave|Iuml|LT|Ntilde|Oacute|Ocirc|Ograve|Oslash|Otilde|Ouml|QUOT|REG|THORN|Uacute|Ucirc|Ugrave|Uuml|Yacute|aacute|acirc|acute|aelig|agrave|amp|aring|atilde|auml|brvbar|ccedil|cedil|cent|copy|curren|deg|divide|eacute|ecirc|egrave|eth|euml|frac12|frac14|frac34|gt|iacute|icirc|iexcl|igrave|iquest|iuml|laquo|lt|macr|micro|middot|nbsp|not|ntilde|oacute|ocirc|ograve|ordf|ordm|oslash|otilde|ouml|para|plusmn|pound|quot|raquo|reg|sect|shy|sup1|sup2|sup3|szlig|thorn|times|uacute|ucirc|ugrave|uml|uuml|yacute|yen|yuml|#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+);?/g},t.namedReferences={xml:{entities:{"&lt;":"<","&gt;":">","&quot;":'"',"&apos;":"'","&amp;":"&"},characters:{"<":"&lt;",">":"&gt;",'"':"&quot;","'":"&apos;","&":"&amp;"}},html4:{entities:{"&apos;":"'","&nbsp":" ","&nbsp;":" ","&iexcl":"¡","&iexcl;":"¡","&cent":"¢","&cent;":"¢","&pound":"£","&pound;":"£","&curren":"¤","&curren;":"¤","&yen":"¥","&yen;":"¥","&brvbar":"¦","&brvbar;":"¦","&sect":"§","&sect;":"§","&uml":"¨","&uml;":"¨","&copy":"©","&copy;":"©","&ordf":"ª","&ordf;":"ª","&laquo":"«","&laquo;":"«","&not":"¬","&not;":"¬","&shy":"­","&shy;":"­","&reg":"®","&reg;":"®","&macr":"¯","&macr;":"¯","&deg":"°","&deg;":"°","&plusmn":"±","&plusmn;":"±","&sup2":"²","&sup2;":"²","&sup3":"³","&sup3;":"³","&acute":"´","&acute;":"´","&micro":"µ","&micro;":"µ","&para":"¶","&para;":"¶","&middot":"·","&middot;":"·","&cedil":"¸","&cedil;":"¸","&sup1":"¹","&sup1;":"¹","&ordm":"º","&ordm;":"º","&raquo":"»","&raquo;":"»","&frac14":"¼","&frac14;":"¼","&frac12":"½","&frac12;":"½","&frac34":"¾","&frac34;":"¾","&iquest":"¿","&iquest;":"¿","&Agrave":"À","&Agrave;":"À","&Aacute":"Á","&Aacute;":"Á","&Acirc":"Â","&Acirc;":"Â","&Atilde":"Ã","&Atilde;":"Ã","&Auml":"Ä","&Auml;":"Ä","&Aring":"Å","&Aring;":"Å","&AElig":"Æ","&AElig;":"Æ","&Ccedil":"Ç","&Ccedil;":"Ç","&Egrave":"È","&Egrave;":"È","&Eacute":"É","&Eacute;":"É","&Ecirc":"Ê","&Ecirc;":"Ê","&Euml":"Ë","&Euml;":"Ë","&Igrave":"Ì","&Igrave;":"Ì","&Iacute":"Í","&Iacute;":"Í","&Icirc":"Î","&Icirc;":"Î","&Iuml":"Ï","&Iuml;":"Ï","&ETH":"Ð","&ETH;":"Ð","&Ntilde":"Ñ","&Ntilde;":"Ñ","&Ograve":"Ò","&Ograve;":"Ò","&Oacute":"Ó","&Oacute;":"Ó","&Ocirc":"Ô","&Ocirc;":"Ô","&Otilde":"Õ","&Otilde;":"Õ","&Ouml":"Ö","&Ouml;":"Ö","&times":"×","&times;":"×","&Oslash":"Ø","&Oslash;":"Ø","&Ugrave":"Ù","&Ugrave;":"Ù","&Uacute":"Ú","&Uacute;":"Ú","&Ucirc":"Û","&Ucirc;":"Û","&Uuml":"Ü","&Uuml;":"Ü","&Yacute":"Ý","&Yacute;":"Ý","&THORN":"Þ","&THORN;":"Þ","&szlig":"ß","&szlig;":"ß","&agrave":"à","&agrave;":"à","&aacute":"á","&aacute;":"á","&acirc":"â","&acirc;":"â","&atilde":"ã","&atilde;":"ã","&auml":"ä","&auml;":"ä","&aring":"å","&aring;":"å","&aelig":"æ","&aelig;":"æ","&ccedil":"ç","&ccedil;":"ç","&egrave":"è","&egrave;":"è","&eacute":"é","&eacute;":"é","&ecirc":"ê","&ecirc;":"ê","&euml":"ë","&euml;":"ë","&igrave":"ì","&igrave;":"ì","&iacute":"í","&iacute;":"í","&icirc":"î","&icirc;":"î","&iuml":"ï","&iuml;":"ï","&eth":"ð","&eth;":"ð","&ntilde":"ñ","&ntilde;":"ñ","&ograve":"ò","&ograve;":"ò","&oacute":"ó","&oacute;":"ó","&ocirc":"ô","&ocirc;":"ô","&otilde":"õ","&otilde;":"õ","&ouml":"ö","&ouml;":"ö","&divide":"÷","&divide;":"÷","&oslash":"ø","&oslash;":"ø","&ugrave":"ù","&ugrave;":"ù","&uacute":"ú","&uacute;":"ú","&ucirc":"û","&ucirc;":"û","&uuml":"ü","&uuml;":"ü","&yacute":"ý","&yacute;":"ý","&thorn":"þ","&thorn;":"þ","&yuml":"ÿ","&yuml;":"ÿ","&quot":'"',"&quot;":'"',"&amp":"&","&amp;":"&","&lt":"<","&lt;":"<","&gt":">","&gt;":">","&OElig;":"Œ","&oelig;":"œ","&Scaron;":"Š","&scaron;":"š","&Yuml;":"Ÿ","&circ;":"ˆ","&tilde;":"˜","&ensp;":" ","&emsp;":" ","&thinsp;":" ","&zwnj;":"‌","&zwj;":"‍","&lrm;":"‎","&rlm;":"‏","&ndash;":"–","&mdash;":"—","&lsquo;":"‘","&rsquo;":"’","&sbquo;":"‚","&ldquo;":"“","&rdquo;":"”","&bdquo;":"„","&dagger;":"†","&Dagger;":"‡","&permil;":"‰","&lsaquo;":"‹","&rsaquo;":"›","&euro;":"€","&fnof;":"ƒ","&Alpha;":"Α","&Beta;":"Β","&Gamma;":"Γ","&Delta;":"Δ","&Epsilon;":"Ε","&Zeta;":"Ζ","&Eta;":"Η","&Theta;":"Θ","&Iota;":"Ι","&Kappa;":"Κ","&Lambda;":"Λ","&Mu;":"Μ","&Nu;":"Ν","&Xi;":"Ξ","&Omicron;":"Ο","&Pi;":"Π","&Rho;":"Ρ","&Sigma;":"Σ","&Tau;":"Τ","&Upsilon;":"Υ","&Phi;":"Φ","&Chi;":"Χ","&Psi;":"Ψ","&Omega;":"Ω","&alpha;":"α","&beta;":"β","&gamma;":"γ","&delta;":"δ","&epsilon;":"ε","&zeta;":"ζ","&eta;":"η","&theta;":"θ","&iota;":"ι","&kappa;":"κ","&lambda;":"λ","&mu;":"μ","&nu;":"ν","&xi;":"ξ","&omicron;":"ο","&pi;":"π","&rho;":"ρ","&sigmaf;":"ς","&sigma;":"σ","&tau;":"τ","&upsilon;":"υ","&phi;":"φ","&chi;":"χ","&psi;":"ψ","&omega;":"ω","&thetasym;":"ϑ","&upsih;":"ϒ","&piv;":"ϖ","&bull;":"•","&hellip;":"…","&prime;":"′","&Prime;":"″","&oline;":"‾","&frasl;":"⁄","&weierp;":"℘","&image;":"ℑ","&real;":"ℜ","&trade;":"™","&alefsym;":"ℵ","&larr;":"←","&uarr;":"↑","&rarr;":"→","&darr;":"↓","&harr;":"↔","&crarr;":"↵","&lArr;":"⇐","&uArr;":"⇑","&rArr;":"⇒","&dArr;":"⇓","&hArr;":"⇔","&forall;":"∀","&part;":"∂","&exist;":"∃","&empty;":"∅","&nabla;":"∇","&isin;":"∈","&notin;":"∉","&ni;":"∋","&prod;":"∏","&sum;":"∑","&minus;":"−","&lowast;":"∗","&radic;":"√","&prop;":"∝","&infin;":"∞","&ang;":"∠","&and;":"∧","&or;":"∨","&cap;":"∩","&cup;":"∪","&int;":"∫","&there4;":"∴","&sim;":"∼","&cong;":"≅","&asymp;":"≈","&ne;":"≠","&equiv;":"≡","&le;":"≤","&ge;":"≥","&sub;":"⊂","&sup;":"⊃","&nsub;":"⊄","&sube;":"⊆","&supe;":"⊇","&oplus;":"⊕","&otimes;":"⊗","&perp;":"⊥","&sdot;":"⋅","&lceil;":"⌈","&rceil;":"⌉","&lfloor;":"⌊","&rfloor;":"⌋","&lang;":"〈","&rang;":"〉","&loz;":"◊","&spades;":"♠","&clubs;":"♣","&hearts;":"♥","&diams;":"♦"},characters:{"'":"&apos;"," ":"&nbsp;","¡":"&iexcl;","¢":"&cent;","£":"&pound;","¤":"&curren;","¥":"&yen;","¦":"&brvbar;","§":"&sect;","¨":"&uml;","©":"&copy;","ª":"&ordf;","«":"&laquo;","¬":"&not;","­":"&shy;","®":"&reg;","¯":"&macr;","°":"&deg;","±":"&plusmn;","²":"&sup2;","³":"&sup3;","´":"&acute;","µ":"&micro;","¶":"&para;","·":"&middot;","¸":"&cedil;","¹":"&sup1;","º":"&ordm;","»":"&raquo;","¼":"&frac14;","½":"&frac12;","¾":"&frac34;","¿":"&iquest;","À":"&Agrave;","Á":"&Aacute;","Â":"&Acirc;","Ã":"&Atilde;","Ä":"&Auml;","Å":"&Aring;","Æ":"&AElig;","Ç":"&Ccedil;","È":"&Egrave;","É":"&Eacute;","Ê":"&Ecirc;","Ë":"&Euml;","Ì":"&Igrave;","Í":"&Iacute;","Î":"&Icirc;","Ï":"&Iuml;","Ð":"&ETH;","Ñ":"&Ntilde;","Ò":"&Ograve;","Ó":"&Oacute;","Ô":"&Ocirc;","Õ":"&Otilde;","Ö":"&Ouml;","×":"&times;","Ø":"&Oslash;","Ù":"&Ugrave;","Ú":"&Uacute;","Û":"&Ucirc;","Ü":"&Uuml;","Ý":"&Yacute;","Þ":"&THORN;","ß":"&szlig;","à":"&agrave;","á":"&aacute;","â":"&acirc;","ã":"&atilde;","ä":"&auml;","å":"&aring;","æ":"&aelig;","ç":"&ccedil;","è":"&egrave;","é":"&eacute;","ê":"&ecirc;","ë":"&euml;","ì":"&igrave;","í":"&iacute;","î":"&icirc;","ï":"&iuml;","ð":"&eth;","ñ":"&ntilde;","ò":"&ograve;","ó":"&oacute;","ô":"&ocirc;","õ":"&otilde;","ö":"&ouml;","÷":"&divide;","ø":"&oslash;","ù":"&ugrave;","ú":"&uacute;","û":"&ucirc;","ü":"&uuml;","ý":"&yacute;","þ":"&thorn;","ÿ":"&yuml;",'"':"&quot;","&":"&amp;","<":"&lt;",">":"&gt;","Œ":"&OElig;","œ":"&oelig;","Š":"&Scaron;","š":"&scaron;","Ÿ":"&Yuml;","ˆ":"&circ;","˜":"&tilde;"," ":"&ensp;"," ":"&emsp;"," ":"&thinsp;","‌":"&zwnj;","‍":"&zwj;","‎":"&lrm;","‏":"&rlm;","–":"&ndash;","—":"&mdash;","‘":"&lsquo;","’":"&rsquo;","‚":"&sbquo;","“":"&ldquo;","”":"&rdquo;","„":"&bdquo;","†":"&dagger;","‡":"&Dagger;","‰":"&permil;","‹":"&lsaquo;","›":"&rsaquo;","€":"&euro;","ƒ":"&fnof;","Α":"&Alpha;","Β":"&Beta;","Γ":"&Gamma;","Δ":"&Delta;","Ε":"&Epsilon;","Ζ":"&Zeta;","Η":"&Eta;","Θ":"&Theta;","Ι":"&Iota;","Κ":"&Kappa;","Λ":"&Lambda;","Μ":"&Mu;","Ν":"&Nu;","Ξ":"&Xi;","Ο":"&Omicron;","Π":"&Pi;","Ρ":"&Rho;","Σ":"&Sigma;","Τ":"&Tau;","Υ":"&Upsilon;","Φ":"&Phi;","Χ":"&Chi;","Ψ":"&Psi;","Ω":"&Omega;","α":"&alpha;","β":"&beta;","γ":"&gamma;","δ":"&delta;","ε":"&epsilon;","ζ":"&zeta;","η":"&eta;","θ":"&theta;","ι":"&iota;","κ":"&kappa;","λ":"&lambda;","μ":"&mu;","ν":"&nu;","ξ":"&xi;","ο":"&omicron;","π":"&pi;","ρ":"&rho;","ς":"&sigmaf;","σ":"&sigma;","τ":"&tau;","υ":"&upsilon;","φ":"&phi;","χ":"&chi;","ψ":"&psi;","ω":"&omega;","ϑ":"&thetasym;","ϒ":"&upsih;","ϖ":"&piv;","•":"&bull;","…":"&hellip;","′":"&prime;","″":"&Prime;","‾":"&oline;","⁄":"&frasl;","℘":"&weierp;","ℑ":"&image;","ℜ":"&real;","™":"&trade;","ℵ":"&alefsym;","←":"&larr;","↑":"&uarr;","→":"&rarr;","↓":"&darr;","↔":"&harr;","↵":"&crarr;","⇐":"&lArr;","⇑":"&uArr;","⇒":"&rArr;","⇓":"&dArr;","⇔":"&hArr;","∀":"&forall;","∂":"&part;","∃":"&exist;","∅":"&empty;","∇":"&nabla;","∈":"&isin;","∉":"&notin;","∋":"&ni;","∏":"&prod;","∑":"&sum;","−":"&minus;","∗":"&lowast;","√":"&radic;","∝":"&prop;","∞":"&infin;","∠":"&ang;","∧":"&and;","∨":"&or;","∩":"&cap;","∪":"&cup;","∫":"&int;","∴":"&there4;","∼":"&sim;","≅":"&cong;","≈":"&asymp;","≠":"&ne;","≡":"&equiv;","≤":"&le;","≥":"&ge;","⊂":"&sub;","⊃":"&sup;","⊄":"&nsub;","⊆":"&sube;","⊇":"&supe;","⊕":"&oplus;","⊗":"&otimes;","⊥":"&perp;","⋅":"&sdot;","⌈":"&lceil;","⌉":"&rceil;","⌊":"&lfloor;","⌋":"&rfloor;","〈":"&lang;","〉":"&rang;","◊":"&loz;","♠":"&spades;","♣":"&clubs;","♥":"&hearts;","♦":"&diams;"}},html5:{entities:{"&AElig":"Æ","&AElig;":"Æ","&AMP":"&","&AMP;":"&","&Aacute":"Á","&Aacute;":"Á","&Abreve;":"Ă","&Acirc":"Â","&Acirc;":"Â","&Acy;":"А","&Afr;":"𝔄","&Agrave":"À","&Agrave;":"À","&Alpha;":"Α","&Amacr;":"Ā","&And;":"⩓","&Aogon;":"Ą","&Aopf;":"𝔸","&ApplyFunction;":"⁡","&Aring":"Å","&Aring;":"Å","&Ascr;":"𝒜","&Assign;":"≔","&Atilde":"Ã","&Atilde;":"Ã","&Auml":"Ä","&Auml;":"Ä","&Backslash;":"∖","&Barv;":"⫧","&Barwed;":"⌆","&Bcy;":"Б","&Because;":"∵","&Bernoullis;":"ℬ","&Beta;":"Β","&Bfr;":"𝔅","&Bopf;":"𝔹","&Breve;":"˘","&Bscr;":"ℬ","&Bumpeq;":"≎","&CHcy;":"Ч","&COPY":"©","&COPY;":"©","&Cacute;":"Ć","&Cap;":"⋒","&CapitalDifferentialD;":"ⅅ","&Cayleys;":"ℭ","&Ccaron;":"Č","&Ccedil":"Ç","&Ccedil;":"Ç","&Ccirc;":"Ĉ","&Cconint;":"∰","&Cdot;":"Ċ","&Cedilla;":"¸","&CenterDot;":"·","&Cfr;":"ℭ","&Chi;":"Χ","&CircleDot;":"⊙","&CircleMinus;":"⊖","&CirclePlus;":"⊕","&CircleTimes;":"⊗","&ClockwiseContourIntegral;":"∲","&CloseCurlyDoubleQuote;":"”","&CloseCurlyQuote;":"’","&Colon;":"∷","&Colone;":"⩴","&Congruent;":"≡","&Conint;":"∯","&ContourIntegral;":"∮","&Copf;":"ℂ","&Coproduct;":"∐","&CounterClockwiseContourIntegral;":"∳","&Cross;":"⨯","&Cscr;":"𝒞","&Cup;":"⋓","&CupCap;":"≍","&DD;":"ⅅ","&DDotrahd;":"⤑","&DJcy;":"Ђ","&DScy;":"Ѕ","&DZcy;":"Џ","&Dagger;":"‡","&Darr;":"↡","&Dashv;":"⫤","&Dcaron;":"Ď","&Dcy;":"Д","&Del;":"∇","&Delta;":"Δ","&Dfr;":"𝔇","&DiacriticalAcute;":"´","&DiacriticalDot;":"˙","&DiacriticalDoubleAcute;":"˝","&DiacriticalGrave;":"`","&DiacriticalTilde;":"˜","&Diamond;":"⋄","&DifferentialD;":"ⅆ","&Dopf;":"𝔻","&Dot;":"¨","&DotDot;":"⃜","&DotEqual;":"≐","&DoubleContourIntegral;":"∯","&DoubleDot;":"¨","&DoubleDownArrow;":"⇓","&DoubleLeftArrow;":"⇐","&DoubleLeftRightArrow;":"⇔","&DoubleLeftTee;":"⫤","&DoubleLongLeftArrow;":"⟸","&DoubleLongLeftRightArrow;":"⟺","&DoubleLongRightArrow;":"⟹","&DoubleRightArrow;":"⇒","&DoubleRightTee;":"⊨","&DoubleUpArrow;":"⇑","&DoubleUpDownArrow;":"⇕","&DoubleVerticalBar;":"∥","&DownArrow;":"↓","&DownArrowBar;":"⤓","&DownArrowUpArrow;":"⇵","&DownBreve;":"̑","&DownLeftRightVector;":"⥐","&DownLeftTeeVector;":"⥞","&DownLeftVector;":"↽","&DownLeftVectorBar;":"⥖","&DownRightTeeVector;":"⥟","&DownRightVector;":"⇁","&DownRightVectorBar;":"⥗","&DownTee;":"⊤","&DownTeeArrow;":"↧","&Downarrow;":"⇓","&Dscr;":"𝒟","&Dstrok;":"Đ","&ENG;":"Ŋ","&ETH":"Ð","&ETH;":"Ð","&Eacute":"É","&Eacute;":"É","&Ecaron;":"Ě","&Ecirc":"Ê","&Ecirc;":"Ê","&Ecy;":"Э","&Edot;":"Ė","&Efr;":"𝔈","&Egrave":"È","&Egrave;":"È","&Element;":"∈","&Emacr;":"Ē","&EmptySmallSquare;":"◻","&EmptyVerySmallSquare;":"▫","&Eogon;":"Ę","&Eopf;":"𝔼","&Epsilon;":"Ε","&Equal;":"⩵","&EqualTilde;":"≂","&Equilibrium;":"⇌","&Escr;":"ℰ","&Esim;":"⩳","&Eta;":"Η","&Euml":"Ë","&Euml;":"Ë","&Exists;":"∃","&ExponentialE;":"ⅇ","&Fcy;":"Ф","&Ffr;":"𝔉","&FilledSmallSquare;":"◼","&FilledVerySmallSquare;":"▪","&Fopf;":"𝔽","&ForAll;":"∀","&Fouriertrf;":"ℱ","&Fscr;":"ℱ","&GJcy;":"Ѓ","&GT":">","&GT;":">","&Gamma;":"Γ","&Gammad;":"Ϝ","&Gbreve;":"Ğ","&Gcedil;":"Ģ","&Gcirc;":"Ĝ","&Gcy;":"Г","&Gdot;":"Ġ","&Gfr;":"𝔊","&Gg;":"⋙","&Gopf;":"𝔾","&GreaterEqual;":"≥","&GreaterEqualLess;":"⋛","&GreaterFullEqual;":"≧","&GreaterGreater;":"⪢","&GreaterLess;":"≷","&GreaterSlantEqual;":"⩾","&GreaterTilde;":"≳","&Gscr;":"𝒢","&Gt;":"≫","&HARDcy;":"Ъ","&Hacek;":"ˇ","&Hat;":"^","&Hcirc;":"Ĥ","&Hfr;":"ℌ","&HilbertSpace;":"ℋ","&Hopf;":"ℍ","&HorizontalLine;":"─","&Hscr;":"ℋ","&Hstrok;":"Ħ","&HumpDownHump;":"≎","&HumpEqual;":"≏","&IEcy;":"Е","&IJlig;":"Ĳ","&IOcy;":"Ё","&Iacute":"Í","&Iacute;":"Í","&Icirc":"Î","&Icirc;":"Î","&Icy;":"И","&Idot;":"İ","&Ifr;":"ℑ","&Igrave":"Ì","&Igrave;":"Ì","&Im;":"ℑ","&Imacr;":"Ī","&ImaginaryI;":"ⅈ","&Implies;":"⇒","&Int;":"∬","&Integral;":"∫","&Intersection;":"⋂","&InvisibleComma;":"⁣","&InvisibleTimes;":"⁢","&Iogon;":"Į","&Iopf;":"𝕀","&Iota;":"Ι","&Iscr;":"ℐ","&Itilde;":"Ĩ","&Iukcy;":"І","&Iuml":"Ï","&Iuml;":"Ï","&Jcirc;":"Ĵ","&Jcy;":"Й","&Jfr;":"𝔍","&Jopf;":"𝕁","&Jscr;":"𝒥","&Jsercy;":"Ј","&Jukcy;":"Є","&KHcy;":"Х","&KJcy;":"Ќ","&Kappa;":"Κ","&Kcedil;":"Ķ","&Kcy;":"К","&Kfr;":"𝔎","&Kopf;":"𝕂","&Kscr;":"𝒦","&LJcy;":"Љ","&LT":"<","&LT;":"<","&Lacute;":"Ĺ","&Lambda;":"Λ","&Lang;":"⟪","&Laplacetrf;":"ℒ","&Larr;":"↞","&Lcaron;":"Ľ","&Lcedil;":"Ļ","&Lcy;":"Л","&LeftAngleBracket;":"⟨","&LeftArrow;":"←","&LeftArrowBar;":"⇤","&LeftArrowRightArrow;":"⇆","&LeftCeiling;":"⌈","&LeftDoubleBracket;":"⟦","&LeftDownTeeVector;":"⥡","&LeftDownVector;":"⇃","&LeftDownVectorBar;":"⥙","&LeftFloor;":"⌊","&LeftRightArrow;":"↔","&LeftRightVector;":"⥎","&LeftTee;":"⊣","&LeftTeeArrow;":"↤","&LeftTeeVector;":"⥚","&LeftTriangle;":"⊲","&LeftTriangleBar;":"⧏","&LeftTriangleEqual;":"⊴","&LeftUpDownVector;":"⥑","&LeftUpTeeVector;":"⥠","&LeftUpVector;":"↿","&LeftUpVectorBar;":"⥘","&LeftVector;":"↼","&LeftVectorBar;":"⥒","&Leftarrow;":"⇐","&Leftrightarrow;":"⇔","&LessEqualGreater;":"⋚","&LessFullEqual;":"≦","&LessGreater;":"≶","&LessLess;":"⪡","&LessSlantEqual;":"⩽","&LessTilde;":"≲","&Lfr;":"𝔏","&Ll;":"⋘","&Lleftarrow;":"⇚","&Lmidot;":"Ŀ","&LongLeftArrow;":"⟵","&LongLeftRightArrow;":"⟷","&LongRightArrow;":"⟶","&Longleftarrow;":"⟸","&Longleftrightarrow;":"⟺","&Longrightarrow;":"⟹","&Lopf;":"𝕃","&LowerLeftArrow;":"↙","&LowerRightArrow;":"↘","&Lscr;":"ℒ","&Lsh;":"↰","&Lstrok;":"Ł","&Lt;":"≪","&Map;":"⤅","&Mcy;":"М","&MediumSpace;":" ","&Mellintrf;":"ℳ","&Mfr;":"𝔐","&MinusPlus;":"∓","&Mopf;":"𝕄","&Mscr;":"ℳ","&Mu;":"Μ","&NJcy;":"Њ","&Nacute;":"Ń","&Ncaron;":"Ň","&Ncedil;":"Ņ","&Ncy;":"Н","&NegativeMediumSpace;":"​","&NegativeThickSpace;":"​","&NegativeThinSpace;":"​","&NegativeVeryThinSpace;":"​","&NestedGreaterGreater;":"≫","&NestedLessLess;":"≪","&NewLine;":"\n","&Nfr;":"𝔑","&NoBreak;":"⁠","&NonBreakingSpace;":" ","&Nopf;":"ℕ","&Not;":"⫬","&NotCongruent;":"≢","&NotCupCap;":"≭","&NotDoubleVerticalBar;":"∦","&NotElement;":"∉","&NotEqual;":"≠","&NotEqualTilde;":"≂̸","&NotExists;":"∄","&NotGreater;":"≯","&NotGreaterEqual;":"≱","&NotGreaterFullEqual;":"≧̸","&NotGreaterGreater;":"≫̸","&NotGreaterLess;":"≹","&NotGreaterSlantEqual;":"⩾̸","&NotGreaterTilde;":"≵","&NotHumpDownHump;":"≎̸","&NotHumpEqual;":"≏̸","&NotLeftTriangle;":"⋪","&NotLeftTriangleBar;":"⧏̸","&NotLeftTriangleEqual;":"⋬","&NotLess;":"≮","&NotLessEqual;":"≰","&NotLessGreater;":"≸","&NotLessLess;":"≪̸","&NotLessSlantEqual;":"⩽̸","&NotLessTilde;":"≴","&NotNestedGreaterGreater;":"⪢̸","&NotNestedLessLess;":"⪡̸","&NotPrecedes;":"⊀","&NotPrecedesEqual;":"⪯̸","&NotPrecedesSlantEqual;":"⋠","&NotReverseElement;":"∌","&NotRightTriangle;":"⋫","&NotRightTriangleBar;":"⧐̸","&NotRightTriangleEqual;":"⋭","&NotSquareSubset;":"⊏̸","&NotSquareSubsetEqual;":"⋢","&NotSquareSuperset;":"⊐̸","&NotSquareSupersetEqual;":"⋣","&NotSubset;":"⊂⃒","&NotSubsetEqual;":"⊈","&NotSucceeds;":"⊁","&NotSucceedsEqual;":"⪰̸","&NotSucceedsSlantEqual;":"⋡","&NotSucceedsTilde;":"≿̸","&NotSuperset;":"⊃⃒","&NotSupersetEqual;":"⊉","&NotTilde;":"≁","&NotTildeEqual;":"≄","&NotTildeFullEqual;":"≇","&NotTildeTilde;":"≉","&NotVerticalBar;":"∤","&Nscr;":"𝒩","&Ntilde":"Ñ","&Ntilde;":"Ñ","&Nu;":"Ν","&OElig;":"Œ","&Oacute":"Ó","&Oacute;":"Ó","&Ocirc":"Ô","&Ocirc;":"Ô","&Ocy;":"О","&Odblac;":"Ő","&Ofr;":"𝔒","&Ograve":"Ò","&Ograve;":"Ò","&Omacr;":"Ō","&Omega;":"Ω","&Omicron;":"Ο","&Oopf;":"𝕆","&OpenCurlyDoubleQuote;":"“","&OpenCurlyQuote;":"‘","&Or;":"⩔","&Oscr;":"𝒪","&Oslash":"Ø","&Oslash;":"Ø","&Otilde":"Õ","&Otilde;":"Õ","&Otimes;":"⨷","&Ouml":"Ö","&Ouml;":"Ö","&OverBar;":"‾","&OverBrace;":"⏞","&OverBracket;":"⎴","&OverParenthesis;":"⏜","&PartialD;":"∂","&Pcy;":"П","&Pfr;":"𝔓","&Phi;":"Φ","&Pi;":"Π","&PlusMinus;":"±","&Poincareplane;":"ℌ","&Popf;":"ℙ","&Pr;":"⪻","&Precedes;":"≺","&PrecedesEqual;":"⪯","&PrecedesSlantEqual;":"≼","&PrecedesTilde;":"≾","&Prime;":"″","&Product;":"∏","&Proportion;":"∷","&Proportional;":"∝","&Pscr;":"𝒫","&Psi;":"Ψ","&QUOT":'"',"&QUOT;":'"',"&Qfr;":"𝔔","&Qopf;":"ℚ","&Qscr;":"𝒬","&RBarr;":"⤐","&REG":"®","&REG;":"®","&Racute;":"Ŕ","&Rang;":"⟫","&Rarr;":"↠","&Rarrtl;":"⤖","&Rcaron;":"Ř","&Rcedil;":"Ŗ","&Rcy;":"Р","&Re;":"ℜ","&ReverseElement;":"∋","&ReverseEquilibrium;":"⇋","&ReverseUpEquilibrium;":"⥯","&Rfr;":"ℜ","&Rho;":"Ρ","&RightAngleBracket;":"⟩","&RightArrow;":"→","&RightArrowBar;":"⇥","&RightArrowLeftArrow;":"⇄","&RightCeiling;":"⌉","&RightDoubleBracket;":"⟧","&RightDownTeeVector;":"⥝","&RightDownVector;":"⇂","&RightDownVectorBar;":"⥕","&RightFloor;":"⌋","&RightTee;":"⊢","&RightTeeArrow;":"↦","&RightTeeVector;":"⥛","&RightTriangle;":"⊳","&RightTriangleBar;":"⧐","&RightTriangleEqual;":"⊵","&RightUpDownVector;":"⥏","&RightUpTeeVector;":"⥜","&RightUpVector;":"↾","&RightUpVectorBar;":"⥔","&RightVector;":"⇀","&RightVectorBar;":"⥓","&Rightarrow;":"⇒","&Ropf;":"ℝ","&RoundImplies;":"⥰","&Rrightarrow;":"⇛","&Rscr;":"ℛ","&Rsh;":"↱","&RuleDelayed;":"⧴","&SHCHcy;":"Щ","&SHcy;":"Ш","&SOFTcy;":"Ь","&Sacute;":"Ś","&Sc;":"⪼","&Scaron;":"Š","&Scedil;":"Ş","&Scirc;":"Ŝ","&Scy;":"С","&Sfr;":"𝔖","&ShortDownArrow;":"↓","&ShortLeftArrow;":"←","&ShortRightArrow;":"→","&ShortUpArrow;":"↑","&Sigma;":"Σ","&SmallCircle;":"∘","&Sopf;":"𝕊","&Sqrt;":"√","&Square;":"□","&SquareIntersection;":"⊓","&SquareSubset;":"⊏","&SquareSubsetEqual;":"⊑","&SquareSuperset;":"⊐","&SquareSupersetEqual;":"⊒","&SquareUnion;":"⊔","&Sscr;":"𝒮","&Star;":"⋆","&Sub;":"⋐","&Subset;":"⋐","&SubsetEqual;":"⊆","&Succeeds;":"≻","&SucceedsEqual;":"⪰","&SucceedsSlantEqual;":"≽","&SucceedsTilde;":"≿","&SuchThat;":"∋","&Sum;":"∑","&Sup;":"⋑","&Superset;":"⊃","&SupersetEqual;":"⊇","&Supset;":"⋑","&THORN":"Þ","&THORN;":"Þ","&TRADE;":"™","&TSHcy;":"Ћ","&TScy;":"Ц","&Tab;":"\t","&Tau;":"Τ","&Tcaron;":"Ť","&Tcedil;":"Ţ","&Tcy;":"Т","&Tfr;":"𝔗","&Therefore;":"∴","&Theta;":"Θ","&ThickSpace;":"  ","&ThinSpace;":" ","&Tilde;":"∼","&TildeEqual;":"≃","&TildeFullEqual;":"≅","&TildeTilde;":"≈","&Topf;":"𝕋","&TripleDot;":"⃛","&Tscr;":"𝒯","&Tstrok;":"Ŧ","&Uacute":"Ú","&Uacute;":"Ú","&Uarr;":"↟","&Uarrocir;":"⥉","&Ubrcy;":"Ў","&Ubreve;":"Ŭ","&Ucirc":"Û","&Ucirc;":"Û","&Ucy;":"У","&Udblac;":"Ű","&Ufr;":"𝔘","&Ugrave":"Ù","&Ugrave;":"Ù","&Umacr;":"Ū","&UnderBar;":"_","&UnderBrace;":"⏟","&UnderBracket;":"⎵","&UnderParenthesis;":"⏝","&Union;":"⋃","&UnionPlus;":"⊎","&Uogon;":"Ų","&Uopf;":"𝕌","&UpArrow;":"↑","&UpArrowBar;":"⤒","&UpArrowDownArrow;":"⇅","&UpDownArrow;":"↕","&UpEquilibrium;":"⥮","&UpTee;":"⊥","&UpTeeArrow;":"↥","&Uparrow;":"⇑","&Updownarrow;":"⇕","&UpperLeftArrow;":"↖","&UpperRightArrow;":"↗","&Upsi;":"ϒ","&Upsilon;":"Υ","&Uring;":"Ů","&Uscr;":"𝒰","&Utilde;":"Ũ","&Uuml":"Ü","&Uuml;":"Ü","&VDash;":"⊫","&Vbar;":"⫫","&Vcy;":"В","&Vdash;":"⊩","&Vdashl;":"⫦","&Vee;":"⋁","&Verbar;":"‖","&Vert;":"‖","&VerticalBar;":"∣","&VerticalLine;":"|","&VerticalSeparator;":"❘","&VerticalTilde;":"≀","&VeryThinSpace;":" ","&Vfr;":"𝔙","&Vopf;":"𝕍","&Vscr;":"𝒱","&Vvdash;":"⊪","&Wcirc;":"Ŵ","&Wedge;":"⋀","&Wfr;":"𝔚","&Wopf;":"𝕎","&Wscr;":"𝒲","&Xfr;":"𝔛","&Xi;":"Ξ","&Xopf;":"𝕏","&Xscr;":"𝒳","&YAcy;":"Я","&YIcy;":"Ї","&YUcy;":"Ю","&Yacute":"Ý","&Yacute;":"Ý","&Ycirc;":"Ŷ","&Ycy;":"Ы","&Yfr;":"𝔜","&Yopf;":"𝕐","&Yscr;":"𝒴","&Yuml;":"Ÿ","&ZHcy;":"Ж","&Zacute;":"Ź","&Zcaron;":"Ž","&Zcy;":"З","&Zdot;":"Ż","&ZeroWidthSpace;":"​","&Zeta;":"Ζ","&Zfr;":"ℨ","&Zopf;":"ℤ","&Zscr;":"𝒵","&aacute":"á","&aacute;":"á","&abreve;":"ă","&ac;":"∾","&acE;":"∾̳","&acd;":"∿","&acirc":"â","&acirc;":"â","&acute":"´","&acute;":"´","&acy;":"а","&aelig":"æ","&aelig;":"æ","&af;":"⁡","&afr;":"𝔞","&agrave":"à","&agrave;":"à","&alefsym;":"ℵ","&aleph;":"ℵ","&alpha;":"α","&amacr;":"ā","&amalg;":"⨿","&amp":"&","&amp;":"&","&and;":"∧","&andand;":"⩕","&andd;":"⩜","&andslope;":"⩘","&andv;":"⩚","&ang;":"∠","&ange;":"⦤","&angle;":"∠","&angmsd;":"∡","&angmsdaa;":"⦨","&angmsdab;":"⦩","&angmsdac;":"⦪","&angmsdad;":"⦫","&angmsdae;":"⦬","&angmsdaf;":"⦭","&angmsdag;":"⦮","&angmsdah;":"⦯","&angrt;":"∟","&angrtvb;":"⊾","&angrtvbd;":"⦝","&angsph;":"∢","&angst;":"Å","&angzarr;":"⍼","&aogon;":"ą","&aopf;":"𝕒","&ap;":"≈","&apE;":"⩰","&apacir;":"⩯","&ape;":"≊","&apid;":"≋","&apos;":"'","&approx;":"≈","&approxeq;":"≊","&aring":"å","&aring;":"å","&ascr;":"𝒶","&ast;":"*","&asymp;":"≈","&asympeq;":"≍","&atilde":"ã","&atilde;":"ã","&auml":"ä","&auml;":"ä","&awconint;":"∳","&awint;":"⨑","&bNot;":"⫭","&backcong;":"≌","&backepsilon;":"϶","&backprime;":"‵","&backsim;":"∽","&backsimeq;":"⋍","&barvee;":"⊽","&barwed;":"⌅","&barwedge;":"⌅","&bbrk;":"⎵","&bbrktbrk;":"⎶","&bcong;":"≌","&bcy;":"б","&bdquo;":"„","&becaus;":"∵","&because;":"∵","&bemptyv;":"⦰","&bepsi;":"϶","&bernou;":"ℬ","&beta;":"β","&beth;":"ℶ","&between;":"≬","&bfr;":"𝔟","&bigcap;":"⋂","&bigcirc;":"◯","&bigcup;":"⋃","&bigodot;":"⨀","&bigoplus;":"⨁","&bigotimes;":"⨂","&bigsqcup;":"⨆","&bigstar;":"★","&bigtriangledown;":"▽","&bigtriangleup;":"△","&biguplus;":"⨄","&bigvee;":"⋁","&bigwedge;":"⋀","&bkarow;":"⤍","&blacklozenge;":"⧫","&blacksquare;":"▪","&blacktriangle;":"▴","&blacktriangledown;":"▾","&blacktriangleleft;":"◂","&blacktriangleright;":"▸","&blank;":"␣","&blk12;":"▒","&blk14;":"░","&blk34;":"▓","&block;":"█","&bne;":"=⃥","&bnequiv;":"≡⃥","&bnot;":"⌐","&bopf;":"𝕓","&bot;":"⊥","&bottom;":"⊥","&bowtie;":"⋈","&boxDL;":"╗","&boxDR;":"╔","&boxDl;":"╖","&boxDr;":"╓","&boxH;":"═","&boxHD;":"╦","&boxHU;":"╩","&boxHd;":"╤","&boxHu;":"╧","&boxUL;":"╝","&boxUR;":"╚","&boxUl;":"╜","&boxUr;":"╙","&boxV;":"║","&boxVH;":"╬","&boxVL;":"╣","&boxVR;":"╠","&boxVh;":"╫","&boxVl;":"╢","&boxVr;":"╟","&boxbox;":"⧉","&boxdL;":"╕","&boxdR;":"╒","&boxdl;":"┐","&boxdr;":"┌","&boxh;":"─","&boxhD;":"╥","&boxhU;":"╨","&boxhd;":"┬","&boxhu;":"┴","&boxminus;":"⊟","&boxplus;":"⊞","&boxtimes;":"⊠","&boxuL;":"╛","&boxuR;":"╘","&boxul;":"┘","&boxur;":"└","&boxv;":"│","&boxvH;":"╪","&boxvL;":"╡","&boxvR;":"╞","&boxvh;":"┼","&boxvl;":"┤","&boxvr;":"├","&bprime;":"‵","&breve;":"˘","&brvbar":"¦","&brvbar;":"¦","&bscr;":"𝒷","&bsemi;":"⁏","&bsim;":"∽","&bsime;":"⋍","&bsol;":"\\","&bsolb;":"⧅","&bsolhsub;":"⟈","&bull;":"•","&bullet;":"•","&bump;":"≎","&bumpE;":"⪮","&bumpe;":"≏","&bumpeq;":"≏","&cacute;":"ć","&cap;":"∩","&capand;":"⩄","&capbrcup;":"⩉","&capcap;":"⩋","&capcup;":"⩇","&capdot;":"⩀","&caps;":"∩︀","&caret;":"⁁","&caron;":"ˇ","&ccaps;":"⩍","&ccaron;":"č","&ccedil":"ç","&ccedil;":"ç","&ccirc;":"ĉ","&ccups;":"⩌","&ccupssm;":"⩐","&cdot;":"ċ","&cedil":"¸","&cedil;":"¸","&cemptyv;":"⦲","&cent":"¢","&cent;":"¢","&centerdot;":"·","&cfr;":"𝔠","&chcy;":"ч","&check;":"✓","&checkmark;":"✓","&chi;":"χ","&cir;":"○","&cirE;":"⧃","&circ;":"ˆ","&circeq;":"≗","&circlearrowleft;":"↺","&circlearrowright;":"↻","&circledR;":"®","&circledS;":"Ⓢ","&circledast;":"⊛","&circledcirc;":"⊚","&circleddash;":"⊝","&cire;":"≗","&cirfnint;":"⨐","&cirmid;":"⫯","&cirscir;":"⧂","&clubs;":"♣","&clubsuit;":"♣","&colon;":":","&colone;":"≔","&coloneq;":"≔","&comma;":",","&commat;":"@","&comp;":"∁","&compfn;":"∘","&complement;":"∁","&complexes;":"ℂ","&cong;":"≅","&congdot;":"⩭","&conint;":"∮","&copf;":"𝕔","&coprod;":"∐","&copy":"©","&copy;":"©","&copysr;":"℗","&crarr;":"↵","&cross;":"✗","&cscr;":"𝒸","&csub;":"⫏","&csube;":"⫑","&csup;":"⫐","&csupe;":"⫒","&ctdot;":"⋯","&cudarrl;":"⤸","&cudarrr;":"⤵","&cuepr;":"⋞","&cuesc;":"⋟","&cularr;":"↶","&cularrp;":"⤽","&cup;":"∪","&cupbrcap;":"⩈","&cupcap;":"⩆","&cupcup;":"⩊","&cupdot;":"⊍","&cupor;":"⩅","&cups;":"∪︀","&curarr;":"↷","&curarrm;":"⤼","&curlyeqprec;":"⋞","&curlyeqsucc;":"⋟","&curlyvee;":"⋎","&curlywedge;":"⋏","&curren":"¤","&curren;":"¤","&curvearrowleft;":"↶","&curvearrowright;":"↷","&cuvee;":"⋎","&cuwed;":"⋏","&cwconint;":"∲","&cwint;":"∱","&cylcty;":"⌭","&dArr;":"⇓","&dHar;":"⥥","&dagger;":"†","&daleth;":"ℸ","&darr;":"↓","&dash;":"‐","&dashv;":"⊣","&dbkarow;":"⤏","&dblac;":"˝","&dcaron;":"ď","&dcy;":"д","&dd;":"ⅆ","&ddagger;":"‡","&ddarr;":"⇊","&ddotseq;":"⩷","&deg":"°","&deg;":"°","&delta;":"δ","&demptyv;":"⦱","&dfisht;":"⥿","&dfr;":"𝔡","&dharl;":"⇃","&dharr;":"⇂","&diam;":"⋄","&diamond;":"⋄","&diamondsuit;":"♦","&diams;":"♦","&die;":"¨","&digamma;":"ϝ","&disin;":"⋲","&div;":"÷","&divide":"÷","&divide;":"÷","&divideontimes;":"⋇","&divonx;":"⋇","&djcy;":"ђ","&dlcorn;":"⌞","&dlcrop;":"⌍","&dollar;":"$","&dopf;":"𝕕","&dot;":"˙","&doteq;":"≐","&doteqdot;":"≑","&dotminus;":"∸","&dotplus;":"∔","&dotsquare;":"⊡","&doublebarwedge;":"⌆","&downarrow;":"↓","&downdownarrows;":"⇊","&downharpoonleft;":"⇃","&downharpoonright;":"⇂","&drbkarow;":"⤐","&drcorn;":"⌟","&drcrop;":"⌌","&dscr;":"𝒹","&dscy;":"ѕ","&dsol;":"⧶","&dstrok;":"đ","&dtdot;":"⋱","&dtri;":"▿","&dtrif;":"▾","&duarr;":"⇵","&duhar;":"⥯","&dwangle;":"⦦","&dzcy;":"џ","&dzigrarr;":"⟿","&eDDot;":"⩷","&eDot;":"≑","&eacute":"é","&eacute;":"é","&easter;":"⩮","&ecaron;":"ě","&ecir;":"≖","&ecirc":"ê","&ecirc;":"ê","&ecolon;":"≕","&ecy;":"э","&edot;":"ė","&ee;":"ⅇ","&efDot;":"≒","&efr;":"𝔢","&eg;":"⪚","&egrave":"è","&egrave;":"è","&egs;":"⪖","&egsdot;":"⪘","&el;":"⪙","&elinters;":"⏧","&ell;":"ℓ","&els;":"⪕","&elsdot;":"⪗","&emacr;":"ē","&empty;":"∅","&emptyset;":"∅","&emptyv;":"∅","&emsp13;":" ","&emsp14;":" ","&emsp;":" ","&eng;":"ŋ","&ensp;":" ","&eogon;":"ę","&eopf;":"𝕖","&epar;":"⋕","&eparsl;":"⧣","&eplus;":"⩱","&epsi;":"ε","&epsilon;":"ε","&epsiv;":"ϵ","&eqcirc;":"≖","&eqcolon;":"≕","&eqsim;":"≂","&eqslantgtr;":"⪖","&eqslantless;":"⪕","&equals;":"=","&equest;":"≟","&equiv;":"≡","&equivDD;":"⩸","&eqvparsl;":"⧥","&erDot;":"≓","&erarr;":"⥱","&escr;":"ℯ","&esdot;":"≐","&esim;":"≂","&eta;":"η","&eth":"ð","&eth;":"ð","&euml":"ë","&euml;":"ë","&euro;":"€","&excl;":"!","&exist;":"∃","&expectation;":"ℰ","&exponentiale;":"ⅇ","&fallingdotseq;":"≒","&fcy;":"ф","&female;":"♀","&ffilig;":"ﬃ","&fflig;":"ﬀ","&ffllig;":"ﬄ","&ffr;":"𝔣","&filig;":"ﬁ","&fjlig;":"fj","&flat;":"♭","&fllig;":"ﬂ","&fltns;":"▱","&fnof;":"ƒ","&fopf;":"𝕗","&forall;":"∀","&fork;":"⋔","&forkv;":"⫙","&fpartint;":"⨍","&frac12":"½","&frac12;":"½","&frac13;":"⅓","&frac14":"¼","&frac14;":"¼","&frac15;":"⅕","&frac16;":"⅙","&frac18;":"⅛","&frac23;":"⅔","&frac25;":"⅖","&frac34":"¾","&frac34;":"¾","&frac35;":"⅗","&frac38;":"⅜","&frac45;":"⅘","&frac56;":"⅚","&frac58;":"⅝","&frac78;":"⅞","&frasl;":"⁄","&frown;":"⌢","&fscr;":"𝒻","&gE;":"≧","&gEl;":"⪌","&gacute;":"ǵ","&gamma;":"γ","&gammad;":"ϝ","&gap;":"⪆","&gbreve;":"ğ","&gcirc;":"ĝ","&gcy;":"г","&gdot;":"ġ","&ge;":"≥","&gel;":"⋛","&geq;":"≥","&geqq;":"≧","&geqslant;":"⩾","&ges;":"⩾","&gescc;":"⪩","&gesdot;":"⪀","&gesdoto;":"⪂","&gesdotol;":"⪄","&gesl;":"⋛︀","&gesles;":"⪔","&gfr;":"𝔤","&gg;":"≫","&ggg;":"⋙","&gimel;":"ℷ","&gjcy;":"ѓ","&gl;":"≷","&glE;":"⪒","&gla;":"⪥","&glj;":"⪤","&gnE;":"≩","&gnap;":"⪊","&gnapprox;":"⪊","&gne;":"⪈","&gneq;":"⪈","&gneqq;":"≩","&gnsim;":"⋧","&gopf;":"𝕘","&grave;":"`","&gscr;":"ℊ","&gsim;":"≳","&gsime;":"⪎","&gsiml;":"⪐","&gt":">","&gt;":">","&gtcc;":"⪧","&gtcir;":"⩺","&gtdot;":"⋗","&gtlPar;":"⦕","&gtquest;":"⩼","&gtrapprox;":"⪆","&gtrarr;":"⥸","&gtrdot;":"⋗","&gtreqless;":"⋛","&gtreqqless;":"⪌","&gtrless;":"≷","&gtrsim;":"≳","&gvertneqq;":"≩︀","&gvnE;":"≩︀","&hArr;":"⇔","&hairsp;":" ","&half;":"½","&hamilt;":"ℋ","&hardcy;":"ъ","&harr;":"↔","&harrcir;":"⥈","&harrw;":"↭","&hbar;":"ℏ","&hcirc;":"ĥ","&hearts;":"♥","&heartsuit;":"♥","&hellip;":"…","&hercon;":"⊹","&hfr;":"𝔥","&hksearow;":"⤥","&hkswarow;":"⤦","&hoarr;":"⇿","&homtht;":"∻","&hookleftarrow;":"↩","&hookrightarrow;":"↪","&hopf;":"𝕙","&horbar;":"―","&hscr;":"𝒽","&hslash;":"ℏ","&hstrok;":"ħ","&hybull;":"⁃","&hyphen;":"‐","&iacute":"í","&iacute;":"í","&ic;":"⁣","&icirc":"î","&icirc;":"î","&icy;":"и","&iecy;":"е","&iexcl":"¡","&iexcl;":"¡","&iff;":"⇔","&ifr;":"𝔦","&igrave":"ì","&igrave;":"ì","&ii;":"ⅈ","&iiiint;":"⨌","&iiint;":"∭","&iinfin;":"⧜","&iiota;":"℩","&ijlig;":"ĳ","&imacr;":"ī","&image;":"ℑ","&imagline;":"ℐ","&imagpart;":"ℑ","&imath;":"ı","&imof;":"⊷","&imped;":"Ƶ","&in;":"∈","&incare;":"℅","&infin;":"∞","&infintie;":"⧝","&inodot;":"ı","&int;":"∫","&intcal;":"⊺","&integers;":"ℤ","&intercal;":"⊺","&intlarhk;":"⨗","&intprod;":"⨼","&iocy;":"ё","&iogon;":"į","&iopf;":"𝕚","&iota;":"ι","&iprod;":"⨼","&iquest":"¿","&iquest;":"¿","&iscr;":"𝒾","&isin;":"∈","&isinE;":"⋹","&isindot;":"⋵","&isins;":"⋴","&isinsv;":"⋳","&isinv;":"∈","&it;":"⁢","&itilde;":"ĩ","&iukcy;":"і","&iuml":"ï","&iuml;":"ï","&jcirc;":"ĵ","&jcy;":"й","&jfr;":"𝔧","&jmath;":"ȷ","&jopf;":"𝕛","&jscr;":"𝒿","&jsercy;":"ј","&jukcy;":"є","&kappa;":"κ","&kappav;":"ϰ","&kcedil;":"ķ","&kcy;":"к","&kfr;":"𝔨","&kgreen;":"ĸ","&khcy;":"х","&kjcy;":"ќ","&kopf;":"𝕜","&kscr;":"𝓀","&lAarr;":"⇚","&lArr;":"⇐","&lAtail;":"⤛","&lBarr;":"⤎","&lE;":"≦","&lEg;":"⪋","&lHar;":"⥢","&lacute;":"ĺ","&laemptyv;":"⦴","&lagran;":"ℒ","&lambda;":"λ","&lang;":"⟨","&langd;":"⦑","&langle;":"⟨","&lap;":"⪅","&laquo":"«","&laquo;":"«","&larr;":"←","&larrb;":"⇤","&larrbfs;":"⤟","&larrfs;":"⤝","&larrhk;":"↩","&larrlp;":"↫","&larrpl;":"⤹","&larrsim;":"⥳","&larrtl;":"↢","&lat;":"⪫","&latail;":"⤙","&late;":"⪭","&lates;":"⪭︀","&lbarr;":"⤌","&lbbrk;":"❲","&lbrace;":"{","&lbrack;":"[","&lbrke;":"⦋","&lbrksld;":"⦏","&lbrkslu;":"⦍","&lcaron;":"ľ","&lcedil;":"ļ","&lceil;":"⌈","&lcub;":"{","&lcy;":"л","&ldca;":"⤶","&ldquo;":"“","&ldquor;":"„","&ldrdhar;":"⥧","&ldrushar;":"⥋","&ldsh;":"↲","&le;":"≤","&leftarrow;":"←","&leftarrowtail;":"↢","&leftharpoondown;":"↽","&leftharpoonup;":"↼","&leftleftarrows;":"⇇","&leftrightarrow;":"↔","&leftrightarrows;":"⇆","&leftrightharpoons;":"⇋","&leftrightsquigarrow;":"↭","&leftthreetimes;":"⋋","&leg;":"⋚","&leq;":"≤","&leqq;":"≦","&leqslant;":"⩽","&les;":"⩽","&lescc;":"⪨","&lesdot;":"⩿","&lesdoto;":"⪁","&lesdotor;":"⪃","&lesg;":"⋚︀","&lesges;":"⪓","&lessapprox;":"⪅","&lessdot;":"⋖","&lesseqgtr;":"⋚","&lesseqqgtr;":"⪋","&lessgtr;":"≶","&lesssim;":"≲","&lfisht;":"⥼","&lfloor;":"⌊","&lfr;":"𝔩","&lg;":"≶","&lgE;":"⪑","&lhard;":"↽","&lharu;":"↼","&lharul;":"⥪","&lhblk;":"▄","&ljcy;":"љ","&ll;":"≪","&llarr;":"⇇","&llcorner;":"⌞","&llhard;":"⥫","&lltri;":"◺","&lmidot;":"ŀ","&lmoust;":"⎰","&lmoustache;":"⎰","&lnE;":"≨","&lnap;":"⪉","&lnapprox;":"⪉","&lne;":"⪇","&lneq;":"⪇","&lneqq;":"≨","&lnsim;":"⋦","&loang;":"⟬","&loarr;":"⇽","&lobrk;":"⟦","&longleftarrow;":"⟵","&longleftrightarrow;":"⟷","&longmapsto;":"⟼","&longrightarrow;":"⟶","&looparrowleft;":"↫","&looparrowright;":"↬","&lopar;":"⦅","&lopf;":"𝕝","&loplus;":"⨭","&lotimes;":"⨴","&lowast;":"∗","&lowbar;":"_","&loz;":"◊","&lozenge;":"◊","&lozf;":"⧫","&lpar;":"(","&lparlt;":"⦓","&lrarr;":"⇆","&lrcorner;":"⌟","&lrhar;":"⇋","&lrhard;":"⥭","&lrm;":"‎","&lrtri;":"⊿","&lsaquo;":"‹","&lscr;":"𝓁","&lsh;":"↰","&lsim;":"≲","&lsime;":"⪍","&lsimg;":"⪏","&lsqb;":"[","&lsquo;":"‘","&lsquor;":"‚","&lstrok;":"ł","&lt":"<","&lt;":"<","&ltcc;":"⪦","&ltcir;":"⩹","&ltdot;":"⋖","&lthree;":"⋋","&ltimes;":"⋉","&ltlarr;":"⥶","&ltquest;":"⩻","&ltrPar;":"⦖","&ltri;":"◃","&ltrie;":"⊴","&ltrif;":"◂","&lurdshar;":"⥊","&luruhar;":"⥦","&lvertneqq;":"≨︀","&lvnE;":"≨︀","&mDDot;":"∺","&macr":"¯","&macr;":"¯","&male;":"♂","&malt;":"✠","&maltese;":"✠","&map;":"↦","&mapsto;":"↦","&mapstodown;":"↧","&mapstoleft;":"↤","&mapstoup;":"↥","&marker;":"▮","&mcomma;":"⨩","&mcy;":"м","&mdash;":"—","&measuredangle;":"∡","&mfr;":"𝔪","&mho;":"℧","&micro":"µ","&micro;":"µ","&mid;":"∣","&midast;":"*","&midcir;":"⫰","&middot":"·","&middot;":"·","&minus;":"−","&minusb;":"⊟","&minusd;":"∸","&minusdu;":"⨪","&mlcp;":"⫛","&mldr;":"…","&mnplus;":"∓","&models;":"⊧","&mopf;":"𝕞","&mp;":"∓","&mscr;":"𝓂","&mstpos;":"∾","&mu;":"μ","&multimap;":"⊸","&mumap;":"⊸","&nGg;":"⋙̸","&nGt;":"≫⃒","&nGtv;":"≫̸","&nLeftarrow;":"⇍","&nLeftrightarrow;":"⇎","&nLl;":"⋘̸","&nLt;":"≪⃒","&nLtv;":"≪̸","&nRightarrow;":"⇏","&nVDash;":"⊯","&nVdash;":"⊮","&nabla;":"∇","&nacute;":"ń","&nang;":"∠⃒","&nap;":"≉","&napE;":"⩰̸","&napid;":"≋̸","&napos;":"ŉ","&napprox;":"≉","&natur;":"♮","&natural;":"♮","&naturals;":"ℕ","&nbsp":" ","&nbsp;":" ","&nbump;":"≎̸","&nbumpe;":"≏̸","&ncap;":"⩃","&ncaron;":"ň","&ncedil;":"ņ","&ncong;":"≇","&ncongdot;":"⩭̸","&ncup;":"⩂","&ncy;":"н","&ndash;":"–","&ne;":"≠","&neArr;":"⇗","&nearhk;":"⤤","&nearr;":"↗","&nearrow;":"↗","&nedot;":"≐̸","&nequiv;":"≢","&nesear;":"⤨","&nesim;":"≂̸","&nexist;":"∄","&nexists;":"∄","&nfr;":"𝔫","&ngE;":"≧̸","&nge;":"≱","&ngeq;":"≱","&ngeqq;":"≧̸","&ngeqslant;":"⩾̸","&nges;":"⩾̸","&ngsim;":"≵","&ngt;":"≯","&ngtr;":"≯","&nhArr;":"⇎","&nharr;":"↮","&nhpar;":"⫲","&ni;":"∋","&nis;":"⋼","&nisd;":"⋺","&niv;":"∋","&njcy;":"њ","&nlArr;":"⇍","&nlE;":"≦̸","&nlarr;":"↚","&nldr;":"‥","&nle;":"≰","&nleftarrow;":"↚","&nleftrightarrow;":"↮","&nleq;":"≰","&nleqq;":"≦̸","&nleqslant;":"⩽̸","&nles;":"⩽̸","&nless;":"≮","&nlsim;":"≴","&nlt;":"≮","&nltri;":"⋪","&nltrie;":"⋬","&nmid;":"∤","&nopf;":"𝕟","&not":"¬","&not;":"¬","&notin;":"∉","&notinE;":"⋹̸","&notindot;":"⋵̸","&notinva;":"∉","&notinvb;":"⋷","&notinvc;":"⋶","&notni;":"∌","&notniva;":"∌","&notnivb;":"⋾","&notnivc;":"⋽","&npar;":"∦","&nparallel;":"∦","&nparsl;":"⫽⃥","&npart;":"∂̸","&npolint;":"⨔","&npr;":"⊀","&nprcue;":"⋠","&npre;":"⪯̸","&nprec;":"⊀","&npreceq;":"⪯̸","&nrArr;":"⇏","&nrarr;":"↛","&nrarrc;":"⤳̸","&nrarrw;":"↝̸","&nrightarrow;":"↛","&nrtri;":"⋫","&nrtrie;":"⋭","&nsc;":"⊁","&nsccue;":"⋡","&nsce;":"⪰̸","&nscr;":"𝓃","&nshortmid;":"∤","&nshortparallel;":"∦","&nsim;":"≁","&nsime;":"≄","&nsimeq;":"≄","&nsmid;":"∤","&nspar;":"∦","&nsqsube;":"⋢","&nsqsupe;":"⋣","&nsub;":"⊄","&nsubE;":"⫅̸","&nsube;":"⊈","&nsubset;":"⊂⃒","&nsubseteq;":"⊈","&nsubseteqq;":"⫅̸","&nsucc;":"⊁","&nsucceq;":"⪰̸","&nsup;":"⊅","&nsupE;":"⫆̸","&nsupe;":"⊉","&nsupset;":"⊃⃒","&nsupseteq;":"⊉","&nsupseteqq;":"⫆̸","&ntgl;":"≹","&ntilde":"ñ","&ntilde;":"ñ","&ntlg;":"≸","&ntriangleleft;":"⋪","&ntrianglelefteq;":"⋬","&ntriangleright;":"⋫","&ntrianglerighteq;":"⋭","&nu;":"ν","&num;":"#","&numero;":"№","&numsp;":" ","&nvDash;":"⊭","&nvHarr;":"⤄","&nvap;":"≍⃒","&nvdash;":"⊬","&nvge;":"≥⃒","&nvgt;":">⃒","&nvinfin;":"⧞","&nvlArr;":"⤂","&nvle;":"≤⃒","&nvlt;":"<⃒","&nvltrie;":"⊴⃒","&nvrArr;":"⤃","&nvrtrie;":"⊵⃒","&nvsim;":"∼⃒","&nwArr;":"⇖","&nwarhk;":"⤣","&nwarr;":"↖","&nwarrow;":"↖","&nwnear;":"⤧","&oS;":"Ⓢ","&oacute":"ó","&oacute;":"ó","&oast;":"⊛","&ocir;":"⊚","&ocirc":"ô","&ocirc;":"ô","&ocy;":"о","&odash;":"⊝","&odblac;":"ő","&odiv;":"⨸","&odot;":"⊙","&odsold;":"⦼","&oelig;":"œ","&ofcir;":"⦿","&ofr;":"𝔬","&ogon;":"˛","&ograve":"ò","&ograve;":"ò","&ogt;":"⧁","&ohbar;":"⦵","&ohm;":"Ω","&oint;":"∮","&olarr;":"↺","&olcir;":"⦾","&olcross;":"⦻","&oline;":"‾","&olt;":"⧀","&omacr;":"ō","&omega;":"ω","&omicron;":"ο","&omid;":"⦶","&ominus;":"⊖","&oopf;":"𝕠","&opar;":"⦷","&operp;":"⦹","&oplus;":"⊕","&or;":"∨","&orarr;":"↻","&ord;":"⩝","&order;":"ℴ","&orderof;":"ℴ","&ordf":"ª","&ordf;":"ª","&ordm":"º","&ordm;":"º","&origof;":"⊶","&oror;":"⩖","&orslope;":"⩗","&orv;":"⩛","&oscr;":"ℴ","&oslash":"ø","&oslash;":"ø","&osol;":"⊘","&otilde":"õ","&otilde;":"õ","&otimes;":"⊗","&otimesas;":"⨶","&ouml":"ö","&ouml;":"ö","&ovbar;":"⌽","&par;":"∥","&para":"¶","&para;":"¶","&parallel;":"∥","&parsim;":"⫳","&parsl;":"⫽","&part;":"∂","&pcy;":"п","&percnt;":"%","&period;":".","&permil;":"‰","&perp;":"⊥","&pertenk;":"‱","&pfr;":"𝔭","&phi;":"φ","&phiv;":"ϕ","&phmmat;":"ℳ","&phone;":"☎","&pi;":"π","&pitchfork;":"⋔","&piv;":"ϖ","&planck;":"ℏ","&planckh;":"ℎ","&plankv;":"ℏ","&plus;":"+","&plusacir;":"⨣","&plusb;":"⊞","&pluscir;":"⨢","&plusdo;":"∔","&plusdu;":"⨥","&pluse;":"⩲","&plusmn":"±","&plusmn;":"±","&plussim;":"⨦","&plustwo;":"⨧","&pm;":"±","&pointint;":"⨕","&popf;":"𝕡","&pound":"£","&pound;":"£","&pr;":"≺","&prE;":"⪳","&prap;":"⪷","&prcue;":"≼","&pre;":"⪯","&prec;":"≺","&precapprox;":"⪷","&preccurlyeq;":"≼","&preceq;":"⪯","&precnapprox;":"⪹","&precneqq;":"⪵","&precnsim;":"⋨","&precsim;":"≾","&prime;":"′","&primes;":"ℙ","&prnE;":"⪵","&prnap;":"⪹","&prnsim;":"⋨","&prod;":"∏","&profalar;":"⌮","&profline;":"⌒","&profsurf;":"⌓","&prop;":"∝","&propto;":"∝","&prsim;":"≾","&prurel;":"⊰","&pscr;":"𝓅","&psi;":"ψ","&puncsp;":" ","&qfr;":"𝔮","&qint;":"⨌","&qopf;":"𝕢","&qprime;":"⁗","&qscr;":"𝓆","&quaternions;":"ℍ","&quatint;":"⨖","&quest;":"?","&questeq;":"≟","&quot":'"',"&quot;":'"',"&rAarr;":"⇛","&rArr;":"⇒","&rAtail;":"⤜","&rBarr;":"⤏","&rHar;":"⥤","&race;":"∽̱","&racute;":"ŕ","&radic;":"√","&raemptyv;":"⦳","&rang;":"⟩","&rangd;":"⦒","&range;":"⦥","&rangle;":"⟩","&raquo":"»","&raquo;":"»","&rarr;":"→","&rarrap;":"⥵","&rarrb;":"⇥","&rarrbfs;":"⤠","&rarrc;":"⤳","&rarrfs;":"⤞","&rarrhk;":"↪","&rarrlp;":"↬","&rarrpl;":"⥅","&rarrsim;":"⥴","&rarrtl;":"↣","&rarrw;":"↝","&ratail;":"⤚","&ratio;":"∶","&rationals;":"ℚ","&rbarr;":"⤍","&rbbrk;":"❳","&rbrace;":"}","&rbrack;":"]","&rbrke;":"⦌","&rbrksld;":"⦎","&rbrkslu;":"⦐","&rcaron;":"ř","&rcedil;":"ŗ","&rceil;":"⌉","&rcub;":"}","&rcy;":"р","&rdca;":"⤷","&rdldhar;":"⥩","&rdquo;":"”","&rdquor;":"”","&rdsh;":"↳","&real;":"ℜ","&realine;":"ℛ","&realpart;":"ℜ","&reals;":"ℝ","&rect;":"▭","&reg":"®","&reg;":"®","&rfisht;":"⥽","&rfloor;":"⌋","&rfr;":"𝔯","&rhard;":"⇁","&rharu;":"⇀","&rharul;":"⥬","&rho;":"ρ","&rhov;":"ϱ","&rightarrow;":"→","&rightarrowtail;":"↣","&rightharpoondown;":"⇁","&rightharpoonup;":"⇀","&rightleftarrows;":"⇄","&rightleftharpoons;":"⇌","&rightrightarrows;":"⇉","&rightsquigarrow;":"↝","&rightthreetimes;":"⋌","&ring;":"˚","&risingdotseq;":"≓","&rlarr;":"⇄","&rlhar;":"⇌","&rlm;":"‏","&rmoust;":"⎱","&rmoustache;":"⎱","&rnmid;":"⫮","&roang;":"⟭","&roarr;":"⇾","&robrk;":"⟧","&ropar;":"⦆","&ropf;":"𝕣","&roplus;":"⨮","&rotimes;":"⨵","&rpar;":")","&rpargt;":"⦔","&rppolint;":"⨒","&rrarr;":"⇉","&rsaquo;":"›","&rscr;":"𝓇","&rsh;":"↱","&rsqb;":"]","&rsquo;":"’","&rsquor;":"’","&rthree;":"⋌","&rtimes;":"⋊","&rtri;":"▹","&rtrie;":"⊵","&rtrif;":"▸","&rtriltri;":"⧎","&ruluhar;":"⥨","&rx;":"℞","&sacute;":"ś","&sbquo;":"‚","&sc;":"≻","&scE;":"⪴","&scap;":"⪸","&scaron;":"š","&sccue;":"≽","&sce;":"⪰","&scedil;":"ş","&scirc;":"ŝ","&scnE;":"⪶","&scnap;":"⪺","&scnsim;":"⋩","&scpolint;":"⨓","&scsim;":"≿","&scy;":"с","&sdot;":"⋅","&sdotb;":"⊡","&sdote;":"⩦","&seArr;":"⇘","&searhk;":"⤥","&searr;":"↘","&searrow;":"↘","&sect":"§","&sect;":"§","&semi;":";","&seswar;":"⤩","&setminus;":"∖","&setmn;":"∖","&sext;":"✶","&sfr;":"𝔰","&sfrown;":"⌢","&sharp;":"♯","&shchcy;":"щ","&shcy;":"ш","&shortmid;":"∣","&shortparallel;":"∥","&shy":"­","&shy;":"­","&sigma;":"σ","&sigmaf;":"ς","&sigmav;":"ς","&sim;":"∼","&simdot;":"⩪","&sime;":"≃","&simeq;":"≃","&simg;":"⪞","&simgE;":"⪠","&siml;":"⪝","&simlE;":"⪟","&simne;":"≆","&simplus;":"⨤","&simrarr;":"⥲","&slarr;":"←","&smallsetminus;":"∖","&smashp;":"⨳","&smeparsl;":"⧤","&smid;":"∣","&smile;":"⌣","&smt;":"⪪","&smte;":"⪬","&smtes;":"⪬︀","&softcy;":"ь","&sol;":"/","&solb;":"⧄","&solbar;":"⌿","&sopf;":"𝕤","&spades;":"♠","&spadesuit;":"♠","&spar;":"∥","&sqcap;":"⊓","&sqcaps;":"⊓︀","&sqcup;":"⊔","&sqcups;":"⊔︀","&sqsub;":"⊏","&sqsube;":"⊑","&sqsubset;":"⊏","&sqsubseteq;":"⊑","&sqsup;":"⊐","&sqsupe;":"⊒","&sqsupset;":"⊐","&sqsupseteq;":"⊒","&squ;":"□","&square;":"□","&squarf;":"▪","&squf;":"▪","&srarr;":"→","&sscr;":"𝓈","&ssetmn;":"∖","&ssmile;":"⌣","&sstarf;":"⋆","&star;":"☆","&starf;":"★","&straightepsilon;":"ϵ","&straightphi;":"ϕ","&strns;":"¯","&sub;":"⊂","&subE;":"⫅","&subdot;":"⪽","&sube;":"⊆","&subedot;":"⫃","&submult;":"⫁","&subnE;":"⫋","&subne;":"⊊","&subplus;":"⪿","&subrarr;":"⥹","&subset;":"⊂","&subseteq;":"⊆","&subseteqq;":"⫅","&subsetneq;":"⊊","&subsetneqq;":"⫋","&subsim;":"⫇","&subsub;":"⫕","&subsup;":"⫓","&succ;":"≻","&succapprox;":"⪸","&succcurlyeq;":"≽","&succeq;":"⪰","&succnapprox;":"⪺","&succneqq;":"⪶","&succnsim;":"⋩","&succsim;":"≿","&sum;":"∑","&sung;":"♪","&sup1":"¹","&sup1;":"¹","&sup2":"²","&sup2;":"²","&sup3":"³","&sup3;":"³","&sup;":"⊃","&supE;":"⫆","&supdot;":"⪾","&supdsub;":"⫘","&supe;":"⊇","&supedot;":"⫄","&suphsol;":"⟉","&suphsub;":"⫗","&suplarr;":"⥻","&supmult;":"⫂","&supnE;":"⫌","&supne;":"⊋","&supplus;":"⫀","&supset;":"⊃","&supseteq;":"⊇","&supseteqq;":"⫆","&supsetneq;":"⊋","&supsetneqq;":"⫌","&supsim;":"⫈","&supsub;":"⫔","&supsup;":"⫖","&swArr;":"⇙","&swarhk;":"⤦","&swarr;":"↙","&swarrow;":"↙","&swnwar;":"⤪","&szlig":"ß","&szlig;":"ß","&target;":"⌖","&tau;":"τ","&tbrk;":"⎴","&tcaron;":"ť","&tcedil;":"ţ","&tcy;":"т","&tdot;":"⃛","&telrec;":"⌕","&tfr;":"𝔱","&there4;":"∴","&therefore;":"∴","&theta;":"θ","&thetasym;":"ϑ","&thetav;":"ϑ","&thickapprox;":"≈","&thicksim;":"∼","&thinsp;":" ","&thkap;":"≈","&thksim;":"∼","&thorn":"þ","&thorn;":"þ","&tilde;":"˜","&times":"×","&times;":"×","&timesb;":"⊠","&timesbar;":"⨱","&timesd;":"⨰","&tint;":"∭","&toea;":"⤨","&top;":"⊤","&topbot;":"⌶","&topcir;":"⫱","&topf;":"𝕥","&topfork;":"⫚","&tosa;":"⤩","&tprime;":"‴","&trade;":"™","&triangle;":"▵","&triangledown;":"▿","&triangleleft;":"◃","&trianglelefteq;":"⊴","&triangleq;":"≜","&triangleright;":"▹","&trianglerighteq;":"⊵","&tridot;":"◬","&trie;":"≜","&triminus;":"⨺","&triplus;":"⨹","&trisb;":"⧍","&tritime;":"⨻","&trpezium;":"⏢","&tscr;":"𝓉","&tscy;":"ц","&tshcy;":"ћ","&tstrok;":"ŧ","&twixt;":"≬","&twoheadleftarrow;":"↞","&twoheadrightarrow;":"↠","&uArr;":"⇑","&uHar;":"⥣","&uacute":"ú","&uacute;":"ú","&uarr;":"↑","&ubrcy;":"ў","&ubreve;":"ŭ","&ucirc":"û","&ucirc;":"û","&ucy;":"у","&udarr;":"⇅","&udblac;":"ű","&udhar;":"⥮","&ufisht;":"⥾","&ufr;":"𝔲","&ugrave":"ù","&ugrave;":"ù","&uharl;":"↿","&uharr;":"↾","&uhblk;":"▀","&ulcorn;":"⌜","&ulcorner;":"⌜","&ulcrop;":"⌏","&ultri;":"◸","&umacr;":"ū","&uml":"¨","&uml;":"¨","&uogon;":"ų","&uopf;":"𝕦","&uparrow;":"↑","&updownarrow;":"↕","&upharpoonleft;":"↿","&upharpoonright;":"↾","&uplus;":"⊎","&upsi;":"υ","&upsih;":"ϒ","&upsilon;":"υ","&upuparrows;":"⇈","&urcorn;":"⌝","&urcorner;":"⌝","&urcrop;":"⌎","&uring;":"ů","&urtri;":"◹","&uscr;":"𝓊","&utdot;":"⋰","&utilde;":"ũ","&utri;":"▵","&utrif;":"▴","&uuarr;":"⇈","&uuml":"ü","&uuml;":"ü","&uwangle;":"⦧","&vArr;":"⇕","&vBar;":"⫨","&vBarv;":"⫩","&vDash;":"⊨","&vangrt;":"⦜","&varepsilon;":"ϵ","&varkappa;":"ϰ","&varnothing;":"∅","&varphi;":"ϕ","&varpi;":"ϖ","&varpropto;":"∝","&varr;":"↕","&varrho;":"ϱ","&varsigma;":"ς","&varsubsetneq;":"⊊︀","&varsubsetneqq;":"⫋︀","&varsupsetneq;":"⊋︀","&varsupsetneqq;":"⫌︀","&vartheta;":"ϑ","&vartriangleleft;":"⊲","&vartriangleright;":"⊳","&vcy;":"в","&vdash;":"⊢","&vee;":"∨","&veebar;":"⊻","&veeeq;":"≚","&vellip;":"⋮","&verbar;":"|","&vert;":"|","&vfr;":"𝔳","&vltri;":"⊲","&vnsub;":"⊂⃒","&vnsup;":"⊃⃒","&vopf;":"𝕧","&vprop;":"∝","&vrtri;":"⊳","&vscr;":"𝓋","&vsubnE;":"⫋︀","&vsubne;":"⊊︀","&vsupnE;":"⫌︀","&vsupne;":"⊋︀","&vzigzag;":"⦚","&wcirc;":"ŵ","&wedbar;":"⩟","&wedge;":"∧","&wedgeq;":"≙","&weierp;":"℘","&wfr;":"𝔴","&wopf;":"𝕨","&wp;":"℘","&wr;":"≀","&wreath;":"≀","&wscr;":"𝓌","&xcap;":"⋂","&xcirc;":"◯","&xcup;":"⋃","&xdtri;":"▽","&xfr;":"𝔵","&xhArr;":"⟺","&xharr;":"⟷","&xi;":"ξ","&xlArr;":"⟸","&xlarr;":"⟵","&xmap;":"⟼","&xnis;":"⋻","&xodot;":"⨀","&xopf;":"𝕩","&xoplus;":"⨁","&xotime;":"⨂","&xrArr;":"⟹","&xrarr;":"⟶","&xscr;":"𝓍","&xsqcup;":"⨆","&xuplus;":"⨄","&xutri;":"△","&xvee;":"⋁","&xwedge;":"⋀","&yacute":"ý","&yacute;":"ý","&yacy;":"я","&ycirc;":"ŷ","&ycy;":"ы","&yen":"¥","&yen;":"¥","&yfr;":"𝔶","&yicy;":"ї","&yopf;":"𝕪","&yscr;":"𝓎","&yucy;":"ю","&yuml":"ÿ","&yuml;":"ÿ","&zacute;":"ź","&zcaron;":"ž","&zcy;":"з","&zdot;":"ż","&zeetrf;":"ℨ","&zeta;":"ζ","&zfr;":"𝔷","&zhcy;":"ж","&zigrarr;":"⇝","&zopf;":"𝕫","&zscr;":"𝓏","&zwj;":"‍","&zwnj;":"‌"},characters:{"Æ":"&AElig;","&":"&amp;","Á":"&Aacute;","Ă":"&Abreve;","Â":"&Acirc;","А":"&Acy;","𝔄":"&Afr;","À":"&Agrave;","Α":"&Alpha;","Ā":"&Amacr;","⩓":"&And;","Ą":"&Aogon;","𝔸":"&Aopf;","⁡":"&af;","Å":"&angst;","𝒜":"&Ascr;","≔":"&coloneq;","Ã":"&Atilde;","Ä":"&Auml;","∖":"&ssetmn;","⫧":"&Barv;","⌆":"&doublebarwedge;","Б":"&Bcy;","∵":"&because;","ℬ":"&bernou;","Β":"&Beta;","𝔅":"&Bfr;","𝔹":"&Bopf;","˘":"&breve;","≎":"&bump;","Ч":"&CHcy;","©":"&copy;","Ć":"&Cacute;","⋒":"&Cap;","ⅅ":"&DD;","ℭ":"&Cfr;","Č":"&Ccaron;","Ç":"&Ccedil;","Ĉ":"&Ccirc;","∰":"&Cconint;","Ċ":"&Cdot;","¸":"&cedil;","·":"&middot;","Χ":"&Chi;","⊙":"&odot;","⊖":"&ominus;","⊕":"&oplus;","⊗":"&otimes;","∲":"&cwconint;","”":"&rdquor;","’":"&rsquor;","∷":"&Proportion;","⩴":"&Colone;","≡":"&equiv;","∯":"&DoubleContourIntegral;","∮":"&oint;","ℂ":"&complexes;","∐":"&coprod;","∳":"&awconint;","⨯":"&Cross;","𝒞":"&Cscr;","⋓":"&Cup;","≍":"&asympeq;","⤑":"&DDotrahd;","Ђ":"&DJcy;","Ѕ":"&DScy;","Џ":"&DZcy;","‡":"&ddagger;","↡":"&Darr;","⫤":"&DoubleLeftTee;","Ď":"&Dcaron;","Д":"&Dcy;","∇":"&nabla;","Δ":"&Delta;","𝔇":"&Dfr;","´":"&acute;","˙":"&dot;","˝":"&dblac;","`":"&grave;","˜":"&tilde;","⋄":"&diamond;","ⅆ":"&dd;","𝔻":"&Dopf;","¨":"&uml;","⃜":"&DotDot;","≐":"&esdot;","⇓":"&dArr;","⇐":"&lArr;","⇔":"&iff;","⟸":"&xlArr;","⟺":"&xhArr;","⟹":"&xrArr;","⇒":"&rArr;","⊨":"&vDash;","⇑":"&uArr;","⇕":"&vArr;","∥":"&spar;","↓":"&downarrow;","⤓":"&DownArrowBar;","⇵":"&duarr;","̑":"&DownBreve;","⥐":"&DownLeftRightVector;","⥞":"&DownLeftTeeVector;","↽":"&lhard;","⥖":"&DownLeftVectorBar;","⥟":"&DownRightTeeVector;","⇁":"&rightharpoondown;","⥗":"&DownRightVectorBar;","⊤":"&top;","↧":"&mapstodown;","𝒟":"&Dscr;","Đ":"&Dstrok;","Ŋ":"&ENG;","Ð":"&ETH;","É":"&Eacute;","Ě":"&Ecaron;","Ê":"&Ecirc;","Э":"&Ecy;","Ė":"&Edot;","𝔈":"&Efr;","È":"&Egrave;","∈":"&isinv;","Ē":"&Emacr;","◻":"&EmptySmallSquare;","▫":"&EmptyVerySmallSquare;","Ę":"&Eogon;","𝔼":"&Eopf;","Ε":"&Epsilon;","⩵":"&Equal;","≂":"&esim;","⇌":"&rlhar;","ℰ":"&expectation;","⩳":"&Esim;","Η":"&Eta;","Ë":"&Euml;","∃":"&exist;","ⅇ":"&exponentiale;","Ф":"&Fcy;","𝔉":"&Ffr;","◼":"&FilledSmallSquare;","▪":"&squf;","𝔽":"&Fopf;","∀":"&forall;","ℱ":"&Fscr;","Ѓ":"&GJcy;",">":"&gt;","Γ":"&Gamma;","Ϝ":"&Gammad;","Ğ":"&Gbreve;","Ģ":"&Gcedil;","Ĝ":"&Gcirc;","Г":"&Gcy;","Ġ":"&Gdot;","𝔊":"&Gfr;","⋙":"&ggg;","𝔾":"&Gopf;","≥":"&geq;","⋛":"&gtreqless;","≧":"&geqq;","⪢":"&GreaterGreater;","≷":"&gtrless;","⩾":"&ges;","≳":"&gtrsim;","𝒢":"&Gscr;","≫":"&gg;","Ъ":"&HARDcy;","ˇ":"&caron;","^":"&Hat;","Ĥ":"&Hcirc;","ℌ":"&Poincareplane;","ℋ":"&hamilt;","ℍ":"&quaternions;","─":"&boxh;","Ħ":"&Hstrok;","≏":"&bumpeq;","Е":"&IEcy;","Ĳ":"&IJlig;","Ё":"&IOcy;","Í":"&Iacute;","Î":"&Icirc;","И":"&Icy;","İ":"&Idot;","ℑ":"&imagpart;","Ì":"&Igrave;","Ī":"&Imacr;","ⅈ":"&ii;","∬":"&Int;","∫":"&int;","⋂":"&xcap;","⁣":"&ic;","⁢":"&it;","Į":"&Iogon;","𝕀":"&Iopf;","Ι":"&Iota;","ℐ":"&imagline;","Ĩ":"&Itilde;","І":"&Iukcy;","Ï":"&Iuml;","Ĵ":"&Jcirc;","Й":"&Jcy;","𝔍":"&Jfr;","𝕁":"&Jopf;","𝒥":"&Jscr;","Ј":"&Jsercy;","Є":"&Jukcy;","Х":"&KHcy;","Ќ":"&KJcy;","Κ":"&Kappa;","Ķ":"&Kcedil;","К":"&Kcy;","𝔎":"&Kfr;","𝕂":"&Kopf;","𝒦":"&Kscr;","Љ":"&LJcy;","<":"&lt;","Ĺ":"&Lacute;","Λ":"&Lambda;","⟪":"&Lang;","ℒ":"&lagran;","↞":"&twoheadleftarrow;","Ľ":"&Lcaron;","Ļ":"&Lcedil;","Л":"&Lcy;","⟨":"&langle;","←":"&slarr;","⇤":"&larrb;","⇆":"&lrarr;","⌈":"&lceil;","⟦":"&lobrk;","⥡":"&LeftDownTeeVector;","⇃":"&downharpoonleft;","⥙":"&LeftDownVectorBar;","⌊":"&lfloor;","↔":"&leftrightarrow;","⥎":"&LeftRightVector;","⊣":"&dashv;","↤":"&mapstoleft;","⥚":"&LeftTeeVector;","⊲":"&vltri;","⧏":"&LeftTriangleBar;","⊴":"&trianglelefteq;","⥑":"&LeftUpDownVector;","⥠":"&LeftUpTeeVector;","↿":"&upharpoonleft;","⥘":"&LeftUpVectorBar;","↼":"&lharu;","⥒":"&LeftVectorBar;","⋚":"&lesseqgtr;","≦":"&leqq;","≶":"&lg;","⪡":"&LessLess;","⩽":"&les;","≲":"&lsim;","𝔏":"&Lfr;","⋘":"&Ll;","⇚":"&lAarr;","Ŀ":"&Lmidot;","⟵":"&xlarr;","⟷":"&xharr;","⟶":"&xrarr;","𝕃":"&Lopf;","↙":"&swarrow;","↘":"&searrow;","↰":"&lsh;","Ł":"&Lstrok;","≪":"&ll;","⤅":"&Map;","М":"&Mcy;"," ":"&MediumSpace;","ℳ":"&phmmat;","𝔐":"&Mfr;","∓":"&mp;","𝕄":"&Mopf;","Μ":"&Mu;","Њ":"&NJcy;","Ń":"&Nacute;","Ň":"&Ncaron;","Ņ":"&Ncedil;","Н":"&Ncy;","​":"&ZeroWidthSpace;","\n":"&NewLine;","𝔑":"&Nfr;","⁠":"&NoBreak;"," ":"&nbsp;","ℕ":"&naturals;","⫬":"&Not;","≢":"&nequiv;","≭":"&NotCupCap;","∦":"&nspar;","∉":"&notinva;","≠":"&ne;","≂̸":"&nesim;","∄":"&nexists;","≯":"&ngtr;","≱":"&ngeq;","≧̸":"&ngeqq;","≫̸":"&nGtv;","≹":"&ntgl;","⩾̸":"&nges;","≵":"&ngsim;","≎̸":"&nbump;","≏̸":"&nbumpe;","⋪":"&ntriangleleft;","⧏̸":"&NotLeftTriangleBar;","⋬":"&ntrianglelefteq;","≮":"&nlt;","≰":"&nleq;","≸":"&ntlg;","≪̸":"&nLtv;","⩽̸":"&nles;","≴":"&nlsim;","⪢̸":"&NotNestedGreaterGreater;","⪡̸":"&NotNestedLessLess;","⊀":"&nprec;","⪯̸":"&npreceq;","⋠":"&nprcue;","∌":"&notniva;","⋫":"&ntriangleright;","⧐̸":"&NotRightTriangleBar;","⋭":"&ntrianglerighteq;","⊏̸":"&NotSquareSubset;","⋢":"&nsqsube;","⊐̸":"&NotSquareSuperset;","⋣":"&nsqsupe;","⊂⃒":"&vnsub;","⊈":"&nsubseteq;","⊁":"&nsucc;","⪰̸":"&nsucceq;","⋡":"&nsccue;","≿̸":"&NotSucceedsTilde;","⊃⃒":"&vnsup;","⊉":"&nsupseteq;","≁":"&nsim;","≄":"&nsimeq;","≇":"&ncong;","≉":"&napprox;","∤":"&nsmid;","𝒩":"&Nscr;","Ñ":"&Ntilde;","Ν":"&Nu;","Œ":"&OElig;","Ó":"&Oacute;","Ô":"&Ocirc;","О":"&Ocy;","Ő":"&Odblac;","𝔒":"&Ofr;","Ò":"&Ograve;","Ō":"&Omacr;","Ω":"&ohm;","Ο":"&Omicron;","𝕆":"&Oopf;","“":"&ldquo;","‘":"&lsquo;","⩔":"&Or;","𝒪":"&Oscr;","Ø":"&Oslash;","Õ":"&Otilde;","⨷":"&Otimes;","Ö":"&Ouml;","‾":"&oline;","⏞":"&OverBrace;","⎴":"&tbrk;","⏜":"&OverParenthesis;","∂":"&part;","П":"&Pcy;","𝔓":"&Pfr;","Φ":"&Phi;","Π":"&Pi;","±":"&pm;","ℙ":"&primes;","⪻":"&Pr;","≺":"&prec;","⪯":"&preceq;","≼":"&preccurlyeq;","≾":"&prsim;","″":"&Prime;","∏":"&prod;","∝":"&vprop;","𝒫":"&Pscr;","Ψ":"&Psi;",'"':"&quot;","𝔔":"&Qfr;","ℚ":"&rationals;","𝒬":"&Qscr;","⤐":"&drbkarow;","®":"&reg;","Ŕ":"&Racute;","⟫":"&Rang;","↠":"&twoheadrightarrow;","⤖":"&Rarrtl;","Ř":"&Rcaron;","Ŗ":"&Rcedil;","Р":"&Rcy;","ℜ":"&realpart;","∋":"&niv;","⇋":"&lrhar;","⥯":"&duhar;","Ρ":"&Rho;","⟩":"&rangle;","→":"&srarr;","⇥":"&rarrb;","⇄":"&rlarr;","⌉":"&rceil;","⟧":"&robrk;","⥝":"&RightDownTeeVector;","⇂":"&downharpoonright;","⥕":"&RightDownVectorBar;","⌋":"&rfloor;","⊢":"&vdash;","↦":"&mapsto;","⥛":"&RightTeeVector;","⊳":"&vrtri;","⧐":"&RightTriangleBar;","⊵":"&trianglerighteq;","⥏":"&RightUpDownVector;","⥜":"&RightUpTeeVector;","↾":"&upharpoonright;","⥔":"&RightUpVectorBar;","⇀":"&rightharpoonup;","⥓":"&RightVectorBar;","ℝ":"&reals;","⥰":"&RoundImplies;","⇛":"&rAarr;","ℛ":"&realine;","↱":"&rsh;","⧴":"&RuleDelayed;","Щ":"&SHCHcy;","Ш":"&SHcy;","Ь":"&SOFTcy;","Ś":"&Sacute;","⪼":"&Sc;","Š":"&Scaron;","Ş":"&Scedil;","Ŝ":"&Scirc;","С":"&Scy;","𝔖":"&Sfr;","↑":"&uparrow;","Σ":"&Sigma;","∘":"&compfn;","𝕊":"&Sopf;","√":"&radic;","□":"&square;","⊓":"&sqcap;","⊏":"&sqsubset;","⊑":"&sqsubseteq;","⊐":"&sqsupset;","⊒":"&sqsupseteq;","⊔":"&sqcup;","𝒮":"&Sscr;","⋆":"&sstarf;","⋐":"&Subset;","⊆":"&subseteq;","≻":"&succ;","⪰":"&succeq;","≽":"&succcurlyeq;","≿":"&succsim;","∑":"&sum;","⋑":"&Supset;","⊃":"&supset;","⊇":"&supseteq;","Þ":"&THORN;","™":"&trade;","Ћ":"&TSHcy;","Ц":"&TScy;","\t":"&Tab;","Τ":"&Tau;","Ť":"&Tcaron;","Ţ":"&Tcedil;","Т":"&Tcy;","𝔗":"&Tfr;","∴":"&therefore;","Θ":"&Theta;","  ":"&ThickSpace;"," ":"&thinsp;","∼":"&thksim;","≃":"&simeq;","≅":"&cong;","≈":"&thkap;","𝕋":"&Topf;","⃛":"&tdot;","𝒯":"&Tscr;","Ŧ":"&Tstrok;","Ú":"&Uacute;","↟":"&Uarr;","⥉":"&Uarrocir;","Ў":"&Ubrcy;","Ŭ":"&Ubreve;","Û":"&Ucirc;","У":"&Ucy;","Ű":"&Udblac;","𝔘":"&Ufr;","Ù":"&Ugrave;","Ū":"&Umacr;",_:"&lowbar;","⏟":"&UnderBrace;","⎵":"&bbrk;","⏝":"&UnderParenthesis;","⋃":"&xcup;","⊎":"&uplus;","Ų":"&Uogon;","𝕌":"&Uopf;","⤒":"&UpArrowBar;","⇅":"&udarr;","↕":"&varr;","⥮":"&udhar;","⊥":"&perp;","↥":"&mapstoup;","↖":"&nwarrow;","↗":"&nearrow;","ϒ":"&upsih;","Υ":"&Upsilon;","Ů":"&Uring;","𝒰":"&Uscr;","Ũ":"&Utilde;","Ü":"&Uuml;","⊫":"&VDash;","⫫":"&Vbar;","В":"&Vcy;","⊩":"&Vdash;","⫦":"&Vdashl;","⋁":"&xvee;","‖":"&Vert;","∣":"&smid;","|":"&vert;","❘":"&VerticalSeparator;","≀":"&wreath;"," ":"&hairsp;","𝔙":"&Vfr;","𝕍":"&Vopf;","𝒱":"&Vscr;","⊪":"&Vvdash;","Ŵ":"&Wcirc;","⋀":"&xwedge;","𝔚":"&Wfr;","𝕎":"&Wopf;","𝒲":"&Wscr;","𝔛":"&Xfr;","Ξ":"&Xi;","𝕏":"&Xopf;","𝒳":"&Xscr;","Я":"&YAcy;","Ї":"&YIcy;","Ю":"&YUcy;","Ý":"&Yacute;","Ŷ":"&Ycirc;","Ы":"&Ycy;","𝔜":"&Yfr;","𝕐":"&Yopf;","𝒴":"&Yscr;","Ÿ":"&Yuml;","Ж":"&ZHcy;","Ź":"&Zacute;","Ž":"&Zcaron;","З":"&Zcy;","Ż":"&Zdot;","Ζ":"&Zeta;","ℨ":"&zeetrf;","ℤ":"&integers;","𝒵":"&Zscr;","á":"&aacute;","ă":"&abreve;","∾":"&mstpos;","∾̳":"&acE;","∿":"&acd;","â":"&acirc;","а":"&acy;","æ":"&aelig;","𝔞":"&afr;","à":"&agrave;","ℵ":"&aleph;","α":"&alpha;","ā":"&amacr;","⨿":"&amalg;","∧":"&wedge;","⩕":"&andand;","⩜":"&andd;","⩘":"&andslope;","⩚":"&andv;","∠":"&angle;","⦤":"&ange;","∡":"&measuredangle;","⦨":"&angmsdaa;","⦩":"&angmsdab;","⦪":"&angmsdac;","⦫":"&angmsdad;","⦬":"&angmsdae;","⦭":"&angmsdaf;","⦮":"&angmsdag;","⦯":"&angmsdah;","∟":"&angrt;","⊾":"&angrtvb;","⦝":"&angrtvbd;","∢":"&angsph;","⍼":"&angzarr;","ą":"&aogon;","𝕒":"&aopf;","⩰":"&apE;","⩯":"&apacir;","≊":"&approxeq;","≋":"&apid;","'":"&apos;","å":"&aring;","𝒶":"&ascr;","*":"&midast;","ã":"&atilde;","ä":"&auml;","⨑":"&awint;","⫭":"&bNot;","≌":"&bcong;","϶":"&bepsi;","‵":"&bprime;","∽":"&bsim;","⋍":"&bsime;","⊽":"&barvee;","⌅":"&barwedge;","⎶":"&bbrktbrk;","б":"&bcy;","„":"&ldquor;","⦰":"&bemptyv;","β":"&beta;","ℶ":"&beth;","≬":"&twixt;","𝔟":"&bfr;","◯":"&xcirc;","⨀":"&xodot;","⨁":"&xoplus;","⨂":"&xotime;","⨆":"&xsqcup;","★":"&starf;","▽":"&xdtri;","△":"&xutri;","⨄":"&xuplus;","⤍":"&rbarr;","⧫":"&lozf;","▴":"&utrif;","▾":"&dtrif;","◂":"&ltrif;","▸":"&rtrif;","␣":"&blank;","▒":"&blk12;","░":"&blk14;","▓":"&blk34;","█":"&block;","=⃥":"&bne;","≡⃥":"&bnequiv;","⌐":"&bnot;","𝕓":"&bopf;","⋈":"&bowtie;","╗":"&boxDL;","╔":"&boxDR;","╖":"&boxDl;","╓":"&boxDr;","═":"&boxH;","╦":"&boxHD;","╩":"&boxHU;","╤":"&boxHd;","╧":"&boxHu;","╝":"&boxUL;","╚":"&boxUR;","╜":"&boxUl;","╙":"&boxUr;","║":"&boxV;","╬":"&boxVH;","╣":"&boxVL;","╠":"&boxVR;","╫":"&boxVh;","╢":"&boxVl;","╟":"&boxVr;","⧉":"&boxbox;","╕":"&boxdL;","╒":"&boxdR;","┐":"&boxdl;","┌":"&boxdr;","╥":"&boxhD;","╨":"&boxhU;","┬":"&boxhd;","┴":"&boxhu;","⊟":"&minusb;","⊞":"&plusb;","⊠":"&timesb;","╛":"&boxuL;","╘":"&boxuR;","┘":"&boxul;","└":"&boxur;","│":"&boxv;","╪":"&boxvH;","╡":"&boxvL;","╞":"&boxvR;","┼":"&boxvh;","┤":"&boxvl;","├":"&boxvr;","¦":"&brvbar;","𝒷":"&bscr;","⁏":"&bsemi;","\\":"&bsol;","⧅":"&bsolb;","⟈":"&bsolhsub;","•":"&bullet;","⪮":"&bumpE;","ć":"&cacute;","∩":"&cap;","⩄":"&capand;","⩉":"&capbrcup;","⩋":"&capcap;","⩇":"&capcup;","⩀":"&capdot;","∩︀":"&caps;","⁁":"&caret;","⩍":"&ccaps;","č":"&ccaron;","ç":"&ccedil;","ĉ":"&ccirc;","⩌":"&ccups;","⩐":"&ccupssm;","ċ":"&cdot;","⦲":"&cemptyv;","¢":"&cent;","𝔠":"&cfr;","ч":"&chcy;","✓":"&checkmark;","χ":"&chi;","○":"&cir;","⧃":"&cirE;","ˆ":"&circ;","≗":"&cire;","↺":"&olarr;","↻":"&orarr;","Ⓢ":"&oS;","⊛":"&oast;","⊚":"&ocir;","⊝":"&odash;","⨐":"&cirfnint;","⫯":"&cirmid;","⧂":"&cirscir;","♣":"&clubsuit;",":":"&colon;",",":"&comma;","@":"&commat;","∁":"&complement;","⩭":"&congdot;","𝕔":"&copf;","℗":"&copysr;","↵":"&crarr;","✗":"&cross;","𝒸":"&cscr;","⫏":"&csub;","⫑":"&csube;","⫐":"&csup;","⫒":"&csupe;","⋯":"&ctdot;","⤸":"&cudarrl;","⤵":"&cudarrr;","⋞":"&curlyeqprec;","⋟":"&curlyeqsucc;","↶":"&curvearrowleft;","⤽":"&cularrp;","∪":"&cup;","⩈":"&cupbrcap;","⩆":"&cupcap;","⩊":"&cupcup;","⊍":"&cupdot;","⩅":"&cupor;","∪︀":"&cups;","↷":"&curvearrowright;","⤼":"&curarrm;","⋎":"&cuvee;","⋏":"&cuwed;","¤":"&curren;","∱":"&cwint;","⌭":"&cylcty;","⥥":"&dHar;","†":"&dagger;","ℸ":"&daleth;","‐":"&hyphen;","⤏":"&rBarr;","ď":"&dcaron;","д":"&dcy;","⇊":"&downdownarrows;","⩷":"&eDDot;","°":"&deg;","δ":"&delta;","⦱":"&demptyv;","⥿":"&dfisht;","𝔡":"&dfr;","♦":"&diams;","ϝ":"&gammad;","⋲":"&disin;","÷":"&divide;","⋇":"&divonx;","ђ":"&djcy;","⌞":"&llcorner;","⌍":"&dlcrop;",$:"&dollar;","𝕕":"&dopf;","≑":"&eDot;","∸":"&minusd;","∔":"&plusdo;","⊡":"&sdotb;","⌟":"&lrcorner;","⌌":"&drcrop;","𝒹":"&dscr;","ѕ":"&dscy;","⧶":"&dsol;","đ":"&dstrok;","⋱":"&dtdot;","▿":"&triangledown;","⦦":"&dwangle;","џ":"&dzcy;","⟿":"&dzigrarr;","é":"&eacute;","⩮":"&easter;","ě":"&ecaron;","≖":"&eqcirc;","ê":"&ecirc;","≕":"&eqcolon;","э":"&ecy;","ė":"&edot;","≒":"&fallingdotseq;","𝔢":"&efr;","⪚":"&eg;","è":"&egrave;","⪖":"&eqslantgtr;","⪘":"&egsdot;","⪙":"&el;","⏧":"&elinters;","ℓ":"&ell;","⪕":"&eqslantless;","⪗":"&elsdot;","ē":"&emacr;","∅":"&varnothing;"," ":"&emsp13;"," ":"&emsp14;"," ":"&emsp;","ŋ":"&eng;"," ":"&ensp;","ę":"&eogon;","𝕖":"&eopf;","⋕":"&epar;","⧣":"&eparsl;","⩱":"&eplus;","ε":"&epsilon;","ϵ":"&varepsilon;","=":"&equals;","≟":"&questeq;","⩸":"&equivDD;","⧥":"&eqvparsl;","≓":"&risingdotseq;","⥱":"&erarr;","ℯ":"&escr;","η":"&eta;","ð":"&eth;","ë":"&euml;","€":"&euro;","!":"&excl;","ф":"&fcy;","♀":"&female;","ﬃ":"&ffilig;","ﬀ":"&fflig;","ﬄ":"&ffllig;","𝔣":"&ffr;","ﬁ":"&filig;",fj:"&fjlig;","♭":"&flat;","ﬂ":"&fllig;","▱":"&fltns;","ƒ":"&fnof;","𝕗":"&fopf;","⋔":"&pitchfork;","⫙":"&forkv;","⨍":"&fpartint;","½":"&half;","⅓":"&frac13;","¼":"&frac14;","⅕":"&frac15;","⅙":"&frac16;","⅛":"&frac18;","⅔":"&frac23;","⅖":"&frac25;","¾":"&frac34;","⅗":"&frac35;","⅜":"&frac38;","⅘":"&frac45;","⅚":"&frac56;","⅝":"&frac58;","⅞":"&frac78;","⁄":"&frasl;","⌢":"&sfrown;","𝒻":"&fscr;","⪌":"&gtreqqless;","ǵ":"&gacute;","γ":"&gamma;","⪆":"&gtrapprox;","ğ":"&gbreve;","ĝ":"&gcirc;","г":"&gcy;","ġ":"&gdot;","⪩":"&gescc;","⪀":"&gesdot;","⪂":"&gesdoto;","⪄":"&gesdotol;","⋛︀":"&gesl;","⪔":"&gesles;","𝔤":"&gfr;","ℷ":"&gimel;","ѓ":"&gjcy;","⪒":"&glE;","⪥":"&gla;","⪤":"&glj;","≩":"&gneqq;","⪊":"&gnapprox;","⪈":"&gneq;","⋧":"&gnsim;","𝕘":"&gopf;","ℊ":"&gscr;","⪎":"&gsime;","⪐":"&gsiml;","⪧":"&gtcc;","⩺":"&gtcir;","⋗":"&gtrdot;","⦕":"&gtlPar;","⩼":"&gtquest;","⥸":"&gtrarr;","≩︀":"&gvnE;","ъ":"&hardcy;","⥈":"&harrcir;","↭":"&leftrightsquigarrow;","ℏ":"&plankv;","ĥ":"&hcirc;","♥":"&heartsuit;","…":"&mldr;","⊹":"&hercon;","𝔥":"&hfr;","⤥":"&searhk;","⤦":"&swarhk;","⇿":"&hoarr;","∻":"&homtht;","↩":"&larrhk;","↪":"&rarrhk;","𝕙":"&hopf;","―":"&horbar;","𝒽":"&hscr;","ħ":"&hstrok;","⁃":"&hybull;","í":"&iacute;","î":"&icirc;","и":"&icy;","е":"&iecy;","¡":"&iexcl;","𝔦":"&ifr;","ì":"&igrave;","⨌":"&qint;","∭":"&tint;","⧜":"&iinfin;","℩":"&iiota;","ĳ":"&ijlig;","ī":"&imacr;","ı":"&inodot;","⊷":"&imof;","Ƶ":"&imped;","℅":"&incare;","∞":"&infin;","⧝":"&infintie;","⊺":"&intercal;","⨗":"&intlarhk;","⨼":"&iprod;","ё":"&iocy;","į":"&iogon;","𝕚":"&iopf;","ι":"&iota;","¿":"&iquest;","𝒾":"&iscr;","⋹":"&isinE;","⋵":"&isindot;","⋴":"&isins;","⋳":"&isinsv;","ĩ":"&itilde;","і":"&iukcy;","ï":"&iuml;","ĵ":"&jcirc;","й":"&jcy;","𝔧":"&jfr;","ȷ":"&jmath;","𝕛":"&jopf;","𝒿":"&jscr;","ј":"&jsercy;","є":"&jukcy;","κ":"&kappa;","ϰ":"&varkappa;","ķ":"&kcedil;","к":"&kcy;","𝔨":"&kfr;","ĸ":"&kgreen;","х":"&khcy;","ќ":"&kjcy;","𝕜":"&kopf;","𝓀":"&kscr;","⤛":"&lAtail;","⤎":"&lBarr;","⪋":"&lesseqqgtr;","⥢":"&lHar;","ĺ":"&lacute;","⦴":"&laemptyv;","λ":"&lambda;","⦑":"&langd;","⪅":"&lessapprox;","«":"&laquo;","⤟":"&larrbfs;","⤝":"&larrfs;","↫":"&looparrowleft;","⤹":"&larrpl;","⥳":"&larrsim;","↢":"&leftarrowtail;","⪫":"&lat;","⤙":"&latail;","⪭":"&late;","⪭︀":"&lates;","⤌":"&lbarr;","❲":"&lbbrk;","{":"&lcub;","[":"&lsqb;","⦋":"&lbrke;","⦏":"&lbrksld;","⦍":"&lbrkslu;","ľ":"&lcaron;","ļ":"&lcedil;","л":"&lcy;","⤶":"&ldca;","⥧":"&ldrdhar;","⥋":"&ldrushar;","↲":"&ldsh;","≤":"&leq;","⇇":"&llarr;","⋋":"&lthree;","⪨":"&lescc;","⩿":"&lesdot;","⪁":"&lesdoto;","⪃":"&lesdotor;","⋚︀":"&lesg;","⪓":"&lesges;","⋖":"&ltdot;","⥼":"&lfisht;","𝔩":"&lfr;","⪑":"&lgE;","⥪":"&lharul;","▄":"&lhblk;","љ":"&ljcy;","⥫":"&llhard;","◺":"&lltri;","ŀ":"&lmidot;","⎰":"&lmoustache;","≨":"&lneqq;","⪉":"&lnapprox;","⪇":"&lneq;","⋦":"&lnsim;","⟬":"&loang;","⇽":"&loarr;","⟼":"&xmap;","↬":"&rarrlp;","⦅":"&lopar;","𝕝":"&lopf;","⨭":"&loplus;","⨴":"&lotimes;","∗":"&lowast;","◊":"&lozenge;","(":"&lpar;","⦓":"&lparlt;","⥭":"&lrhard;","‎":"&lrm;","⊿":"&lrtri;","‹":"&lsaquo;","𝓁":"&lscr;","⪍":"&lsime;","⪏":"&lsimg;","‚":"&sbquo;","ł":"&lstrok;","⪦":"&ltcc;","⩹":"&ltcir;","⋉":"&ltimes;","⥶":"&ltlarr;","⩻":"&ltquest;","⦖":"&ltrPar;","◃":"&triangleleft;","⥊":"&lurdshar;","⥦":"&luruhar;","≨︀":"&lvnE;","∺":"&mDDot;","¯":"&strns;","♂":"&male;","✠":"&maltese;","▮":"&marker;","⨩":"&mcomma;","м":"&mcy;","—":"&mdash;","𝔪":"&mfr;","℧":"&mho;","µ":"&micro;","⫰":"&midcir;","−":"&minus;","⨪":"&minusdu;","⫛":"&mlcp;","⊧":"&models;","𝕞":"&mopf;","𝓂":"&mscr;","μ":"&mu;","⊸":"&mumap;","⋙̸":"&nGg;","≫⃒":"&nGt;","⇍":"&nlArr;","⇎":"&nhArr;","⋘̸":"&nLl;","≪⃒":"&nLt;","⇏":"&nrArr;","⊯":"&nVDash;","⊮":"&nVdash;","ń":"&nacute;","∠⃒":"&nang;","⩰̸":"&napE;","≋̸":"&napid;","ŉ":"&napos;","♮":"&natural;","⩃":"&ncap;","ň":"&ncaron;","ņ":"&ncedil;","⩭̸":"&ncongdot;","⩂":"&ncup;","н":"&ncy;","–":"&ndash;","⇗":"&neArr;","⤤":"&nearhk;","≐̸":"&nedot;","⤨":"&toea;","𝔫":"&nfr;","↮":"&nleftrightarrow;","⫲":"&nhpar;","⋼":"&nis;","⋺":"&nisd;","њ":"&njcy;","≦̸":"&nleqq;","↚":"&nleftarrow;","‥":"&nldr;","𝕟":"&nopf;","¬":"&not;","⋹̸":"&notinE;","⋵̸":"&notindot;","⋷":"&notinvb;","⋶":"&notinvc;","⋾":"&notnivb;","⋽":"&notnivc;","⫽⃥":"&nparsl;","∂̸":"&npart;","⨔":"&npolint;","↛":"&nrightarrow;","⤳̸":"&nrarrc;","↝̸":"&nrarrw;","𝓃":"&nscr;","⊄":"&nsub;","⫅̸":"&nsubseteqq;","⊅":"&nsup;","⫆̸":"&nsupseteqq;","ñ":"&ntilde;","ν":"&nu;","#":"&num;","№":"&numero;"," ":"&numsp;","⊭":"&nvDash;","⤄":"&nvHarr;","≍⃒":"&nvap;","⊬":"&nvdash;","≥⃒":"&nvge;",">⃒":"&nvgt;","⧞":"&nvinfin;","⤂":"&nvlArr;","≤⃒":"&nvle;","<⃒":"&nvlt;","⊴⃒":"&nvltrie;","⤃":"&nvrArr;","⊵⃒":"&nvrtrie;","∼⃒":"&nvsim;","⇖":"&nwArr;","⤣":"&nwarhk;","⤧":"&nwnear;","ó":"&oacute;","ô":"&ocirc;","о":"&ocy;","ő":"&odblac;","⨸":"&odiv;","⦼":"&odsold;","œ":"&oelig;","⦿":"&ofcir;","𝔬":"&ofr;","˛":"&ogon;","ò":"&ograve;","⧁":"&ogt;","⦵":"&ohbar;","⦾":"&olcir;","⦻":"&olcross;","⧀":"&olt;","ō":"&omacr;","ω":"&omega;","ο":"&omicron;","⦶":"&omid;","𝕠":"&oopf;","⦷":"&opar;","⦹":"&operp;","∨":"&vee;","⩝":"&ord;","ℴ":"&oscr;","ª":"&ordf;","º":"&ordm;","⊶":"&origof;","⩖":"&oror;","⩗":"&orslope;","⩛":"&orv;","ø":"&oslash;","⊘":"&osol;","õ":"&otilde;","⨶":"&otimesas;","ö":"&ouml;","⌽":"&ovbar;","¶":"&para;","⫳":"&parsim;","⫽":"&parsl;","п":"&pcy;","%":"&percnt;",".":"&period;","‰":"&permil;","‱":"&pertenk;","𝔭":"&pfr;","φ":"&phi;","ϕ":"&varphi;","☎":"&phone;","π":"&pi;","ϖ":"&varpi;","ℎ":"&planckh;","+":"&plus;","⨣":"&plusacir;","⨢":"&pluscir;","⨥":"&plusdu;","⩲":"&pluse;","⨦":"&plussim;","⨧":"&plustwo;","⨕":"&pointint;","𝕡":"&popf;","£":"&pound;","⪳":"&prE;","⪷":"&precapprox;","⪹":"&prnap;","⪵":"&prnE;","⋨":"&prnsim;","′":"&prime;","⌮":"&profalar;","⌒":"&profline;","⌓":"&profsurf;","⊰":"&prurel;","𝓅":"&pscr;","ψ":"&psi;"," ":"&puncsp;","𝔮":"&qfr;","𝕢":"&qopf;","⁗":"&qprime;","𝓆":"&qscr;","⨖":"&quatint;","?":"&quest;","⤜":"&rAtail;","⥤":"&rHar;","∽̱":"&race;","ŕ":"&racute;","⦳":"&raemptyv;","⦒":"&rangd;","⦥":"&range;","»":"&raquo;","⥵":"&rarrap;","⤠":"&rarrbfs;","⤳":"&rarrc;","⤞":"&rarrfs;","⥅":"&rarrpl;","⥴":"&rarrsim;","↣":"&rightarrowtail;","↝":"&rightsquigarrow;","⤚":"&ratail;","∶":"&ratio;","❳":"&rbbrk;","}":"&rcub;","]":"&rsqb;","⦌":"&rbrke;","⦎":"&rbrksld;","⦐":"&rbrkslu;","ř":"&rcaron;","ŗ":"&rcedil;","р":"&rcy;","⤷":"&rdca;","⥩":"&rdldhar;","↳":"&rdsh;","▭":"&rect;","⥽":"&rfisht;","𝔯":"&rfr;","⥬":"&rharul;","ρ":"&rho;","ϱ":"&varrho;","⇉":"&rrarr;","⋌":"&rthree;","˚":"&ring;","‏":"&rlm;","⎱":"&rmoustache;","⫮":"&rnmid;","⟭":"&roang;","⇾":"&roarr;","⦆":"&ropar;","𝕣":"&ropf;","⨮":"&roplus;","⨵":"&rotimes;",")":"&rpar;","⦔":"&rpargt;","⨒":"&rppolint;","›":"&rsaquo;","𝓇":"&rscr;","⋊":"&rtimes;","▹":"&triangleright;","⧎":"&rtriltri;","⥨":"&ruluhar;","℞":"&rx;","ś":"&sacute;","⪴":"&scE;","⪸":"&succapprox;","š":"&scaron;","ş":"&scedil;","ŝ":"&scirc;","⪶":"&succneqq;","⪺":"&succnapprox;","⋩":"&succnsim;","⨓":"&scpolint;","с":"&scy;","⋅":"&sdot;","⩦":"&sdote;","⇘":"&seArr;","§":"&sect;",";":"&semi;","⤩":"&tosa;","✶":"&sext;","𝔰":"&sfr;","♯":"&sharp;","щ":"&shchcy;","ш":"&shcy;","­":"&shy;","σ":"&sigma;","ς":"&varsigma;","⩪":"&simdot;","⪞":"&simg;","⪠":"&simgE;","⪝":"&siml;","⪟":"&simlE;","≆":"&simne;","⨤":"&simplus;","⥲":"&simrarr;","⨳":"&smashp;","⧤":"&smeparsl;","⌣":"&ssmile;","⪪":"&smt;","⪬":"&smte;","⪬︀":"&smtes;","ь":"&softcy;","/":"&sol;","⧄":"&solb;","⌿":"&solbar;","𝕤":"&sopf;","♠":"&spadesuit;","⊓︀":"&sqcaps;","⊔︀":"&sqcups;","𝓈":"&sscr;","☆":"&star;","⊂":"&subset;","⫅":"&subseteqq;","⪽":"&subdot;","⫃":"&subedot;","⫁":"&submult;","⫋":"&subsetneqq;","⊊":"&subsetneq;","⪿":"&subplus;","⥹":"&subrarr;","⫇":"&subsim;","⫕":"&subsub;","⫓":"&subsup;","♪":"&sung;","¹":"&sup1;","²":"&sup2;","³":"&sup3;","⫆":"&supseteqq;","⪾":"&supdot;","⫘":"&supdsub;","⫄":"&supedot;","⟉":"&suphsol;","⫗":"&suphsub;","⥻":"&suplarr;","⫂":"&supmult;","⫌":"&supsetneqq;","⊋":"&supsetneq;","⫀":"&supplus;","⫈":"&supsim;","⫔":"&supsub;","⫖":"&supsup;","⇙":"&swArr;","⤪":"&swnwar;","ß":"&szlig;","⌖":"&target;","τ":"&tau;","ť":"&tcaron;","ţ":"&tcedil;","т":"&tcy;","⌕":"&telrec;","𝔱":"&tfr;","θ":"&theta;","ϑ":"&vartheta;","þ":"&thorn;","×":"&times;","⨱":"&timesbar;","⨰":"&timesd;","⌶":"&topbot;","⫱":"&topcir;","𝕥":"&topf;","⫚":"&topfork;","‴":"&tprime;","▵":"&utri;","≜":"&trie;","◬":"&tridot;","⨺":"&triminus;","⨹":"&triplus;","⧍":"&trisb;","⨻":"&tritime;","⏢":"&trpezium;","𝓉":"&tscr;","ц":"&tscy;","ћ":"&tshcy;","ŧ":"&tstrok;","⥣":"&uHar;","ú":"&uacute;","ў":"&ubrcy;","ŭ":"&ubreve;","û":"&ucirc;","у":"&ucy;","ű":"&udblac;","⥾":"&ufisht;","𝔲":"&ufr;","ù":"&ugrave;","▀":"&uhblk;","⌜":"&ulcorner;","⌏":"&ulcrop;","◸":"&ultri;","ū":"&umacr;","ų":"&uogon;","𝕦":"&uopf;","υ":"&upsilon;","⇈":"&uuarr;","⌝":"&urcorner;","⌎":"&urcrop;","ů":"&uring;","◹":"&urtri;","𝓊":"&uscr;","⋰":"&utdot;","ũ":"&utilde;","ü":"&uuml;","⦧":"&uwangle;","⫨":"&vBar;","⫩":"&vBarv;","⦜":"&vangrt;","⊊︀":"&vsubne;","⫋︀":"&vsubnE;","⊋︀":"&vsupne;","⫌︀":"&vsupnE;","в":"&vcy;","⊻":"&veebar;","≚":"&veeeq;","⋮":"&vellip;","𝔳":"&vfr;","𝕧":"&vopf;","𝓋":"&vscr;","⦚":"&vzigzag;","ŵ":"&wcirc;","⩟":"&wedbar;","≙":"&wedgeq;","℘":"&wp;","𝔴":"&wfr;","𝕨":"&wopf;","𝓌":"&wscr;","𝔵":"&xfr;","ξ":"&xi;","⋻":"&xnis;","𝕩":"&xopf;","𝓍":"&xscr;","ý":"&yacute;","я":"&yacy;","ŷ":"&ycirc;","ы":"&ycy;","¥":"&yen;","𝔶":"&yfr;","ї":"&yicy;","𝕪":"&yopf;","𝓎":"&yscr;","ю":"&yucy;","ÿ":"&yuml;","ź":"&zacute;","ž":"&zcaron;","з":"&zcy;","ż":"&zdot;","ζ":"&zeta;","𝔷":"&zfr;","ж":"&zhcy;","⇝":"&zigrarr;","𝕫":"&zopf;","𝓏":"&zscr;","‍":"&zwj;","‌":"&zwnj;"}}}},"../node_modules/html-entities/lib/numeric-unicode-map.js":function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.numericUnicodeMap={0:65533,128:8364,130:8218,131:402,132:8222,133:8230,134:8224,135:8225,136:710,137:8240,138:352,139:8249,140:338,142:381,145:8216,146:8217,147:8220,148:8221,149:8226,150:8211,151:8212,152:732,153:8482,154:353,155:8250,156:339,158:382,159:376}},"../node_modules/html-entities/lib/surrogate-pairs.js":function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.fromCodePoint=String.fromCodePoint||function(e){return String.fromCharCode(Math.floor((e-65536)/1024)+55296,(e-65536)%1024+56320)},t.getCodePoint=String.prototype.codePointAt?function(e,t){return e.codePointAt(t)}:function(e,t){return 1024*(e.charCodeAt(t)-55296)+e.charCodeAt(t+1)-56320+65536},t.highSurrogateFrom=55296,t.highSurrogateTo=56319},"../node_modules/vue-code-highlight/dist/vue-code-highlight.esm.js":function(e,t,n){"use strict";n.r(t),n.d(t,{component:function(){return c}}),e=n.hmd(e);var r,o,a,i,s={},l=(r=/\blang(?:uage)?-([\w-]+)\b/i,o=0,a=s.Prism={manual:s.Prism&&s.Prism.manual,disableWorkerMessageHandler:s.Prism&&s.Prism.disableWorkerMessageHandler,util:{encode:function(e){return e instanceof i?new i(e.type,a.util.encode(e.content),e.alias):"Array"===a.util.type(e)?e.map(a.util.encode):e.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/\u00a0/g," ")},type:function(e){return Object.prototype.toString.call(e).match(/\[object (\w+)\]/)[1]},objId:function(e){return e.__id||Object.defineProperty(e,"__id",{value:++o}),e.__id},clone:function(e,t){var n=a.util.type(e);switch(t=t||{},n){case"Object":if(t[a.util.objId(e)])return t[a.util.objId(e)];for(var r in o={},t[a.util.objId(e)]=o,e)e.hasOwnProperty(r)&&(o[r]=a.util.clone(e[r],t));return o;case"Array":if(t[a.util.objId(e)])return t[a.util.objId(e)];var o=[];return t[a.util.objId(e)]=o,e.forEach((function(e,n){o[n]=a.util.clone(e,t)})),o}return e}},languages:{extend:function(e,t){var n=a.util.clone(a.languages[e]);for(var r in t)n[r]=t[r];return n},insertBefore:function(e,t,n,r){var o=(r=r||a.languages)[e];if(2==arguments.length){for(var i in n=arguments[1])n.hasOwnProperty(i)&&(o[i]=n[i]);return o}var s={};for(var l in o)if(o.hasOwnProperty(l)){if(l==t)for(var i in n)n.hasOwnProperty(i)&&(s[i]=n[i]);s[l]=o[l]}return a.languages.DFS(a.languages,(function(t,n){n===r[e]&&t!=e&&(this[t]=s)})),r[e]=s},DFS:function(e,t,n,r){for(var o in r=r||{},e)e.hasOwnProperty(o)&&(t.call(e,o,e[o],n||o),"Object"!==a.util.type(e[o])||r[a.util.objId(e[o])]?"Array"!==a.util.type(e[o])||r[a.util.objId(e[o])]||(r[a.util.objId(e[o])]=!0,a.languages.DFS(e[o],t,o,r)):(r[a.util.objId(e[o])]=!0,a.languages.DFS(e[o],t,null,r)))}},plugins:{},highlightAll:function(e,t){a.highlightAllUnder(document,e,t)},highlightAllUnder:function(e,t,n){var r={callback:n,selector:'code[class*="language-"], [class*="language-"] code, code[class*="lang-"], [class*="lang-"] code'};a.hooks.run("before-highlightall",r);for(var o,i=r.elements||e.querySelectorAll(r.selector),s=0;o=i[s++];)a.highlightElement(o,!0===t,r.callback)},highlightElement:function(e,t,n){for(var o,i,l=e;l&&!r.test(l.className);)l=l.parentNode;l&&(o=(l.className.match(r)||[,""])[1].toLowerCase(),i=a.languages[o]),e.className=e.className.replace(r,"").replace(/\s+/g," ")+" language-"+o,e.parentNode&&(l=e.parentNode,/pre/i.test(l.nodeName)&&(l.className=l.className.replace(r,"").replace(/\s+/g," ")+" language-"+o));var c={element:e,language:o,grammar:i,code:e.textContent};if(a.hooks.run("before-sanity-check",c),!c.code||!c.grammar)return c.code&&(a.hooks.run("before-highlight",c),c.element.textContent=c.code,a.hooks.run("after-highlight",c)),void a.hooks.run("complete",c);if(a.hooks.run("before-highlight",c),t&&s.Worker){var u=new Worker(a.filename);u.onmessage=function(e){c.highlightedCode=e.data,a.hooks.run("before-insert",c),c.element.innerHTML=c.highlightedCode,n&&n.call(c.element),a.hooks.run("after-highlight",c),a.hooks.run("complete",c)},u.postMessage(JSON.stringify({language:c.language,code:c.code,immediateClose:!0}))}else c.highlightedCode=a.highlight(c.code,c.grammar,c.language),a.hooks.run("before-insert",c),c.element.innerHTML=c.highlightedCode,n&&n.call(e),a.hooks.run("after-highlight",c),a.hooks.run("complete",c)},highlight:function(e,t,n){var r={code:e,grammar:t,language:n};return a.hooks.run("before-tokenize",r),r.tokens=a.tokenize(r.code,r.grammar),a.hooks.run("after-tokenize",r),i.stringify(a.util.encode(r.tokens),r.language)},matchGrammar:function(e,t,n,r,o,i,s){var l=a.Token;for(var c in n)if(n.hasOwnProperty(c)&&n[c]){if(c==s)return;var u=n[c];u="Array"===a.util.type(u)?u:[u];for(var d=0;d<u.length;++d){var p=u[d],f=p.inside,v=!!p.lookbehind,m=!!p.greedy,g=0,h=p.alias;if(m&&!p.pattern.global){var b=p.pattern.toString().match(/[imuy]*$/)[0];p.pattern=RegExp(p.pattern.source,b+"g")}p=p.pattern||p;for(var y=r,_=o;y<t.length;_+=t[y].length,++y){var x=t[y];if(t.length>e.length)return;if(!(x instanceof l)){if(m&&y!=t.length-1){if(p.lastIndex=_,!(E=p.exec(e)))break;for(var w=E.index+(v?E[1].length:0),A=E.index+E[0].length,C=y,k=_,j=t.length;C<j&&(k<A||!t[C].type&&!t[C-1].greedy);++C)w>=(k+=t[C].length)&&(++y,_=k);if(t[y]instanceof l)continue;S=C-y,x=e.slice(_,k),E.index-=_}else{p.lastIndex=0;var E=p.exec(x),S=1}if(E){v&&(g=E[1]?E[1].length:0),A=(w=E.index+g)+(E=E[0].slice(g)).length;var O=x.slice(0,w),L=x.slice(A),q=[y,S];O&&(++y,_+=O.length,q.push(O));var D=new l(c,f?a.tokenize(E,f):E,h,E,m);if(q.push(D),L&&q.push(L),Array.prototype.splice.apply(t,q),1!=S&&a.matchGrammar(e,t,n,y,_,!0,c),i)break}else if(i)break}}}}},tokenize:function(e,t,n){var r=[e],o=t.rest;if(o){for(var i in o)t[i]=o[i];delete t.rest}return a.matchGrammar(e,r,t,0,0,!1),r},hooks:{all:{},add:function(e,t){var n=a.hooks.all;n[e]=n[e]||[],n[e].push(t)},run:function(e,t){var n=a.hooks.all[e];if(n&&n.length)for(var r,o=0;r=n[o++];)r(t)}}},(i=a.Token=function(e,t,n,r,o){this.type=e,this.content=t,this.alias=n,this.length=0|(r||"").length,this.greedy=!!o}).stringify=function(e,t,n){if("string"==typeof e)return e;if("Array"===a.util.type(e))return e.map((function(n){return i.stringify(n,t,e)})).join("");var r={type:e.type,content:i.stringify(e.content,t,n),tag:"span",classes:["token",e.type],attributes:{},language:t,parent:n};if(e.alias){var o="Array"===a.util.type(e.alias)?e.alias:[e.alias];Array.prototype.push.apply(r.classes,o)}a.hooks.run("wrap",r);var s=Object.keys(r.attributes).map((function(e){return e+'="'+(r.attributes[e]||"").replace(/"/g,"&quot;")+'"'})).join(" ");return"<"+r.tag+' class="'+r.classes.join(" ")+'"'+(s?" "+s:"")+">"+r.content+"</"+r.tag+">"},s.document?s.Prism:s.addEventListener?(a.disableWorkerMessageHandler||s.addEventListener("message",(function(e){var t=JSON.parse(e.data),n=t.language,r=t.code,o=t.immediateClose;s.postMessage(a.highlight(r,a.languages[n],n)),o&&s.close()}),!1),s.Prism):s.Prism);e.exports&&(e.exports=l),void 0!==n.g&&(n.g.Prism=l),l.languages.markup={comment:/<!--[\s\S]*?-->/,prolog:/<\?[\s\S]+?\?>/,doctype:/<!DOCTYPE[\s\S]+?>/i,cdata:/<!\[CDATA\[[\s\S]*?]]>/i,tag:{pattern:/<\/?(?!\d)[^\s>\/=$<%]+(?:\s+[^\s>\/=]+(?:=(?:("|')(?:\\[\s\S]|(?!\1)[^\\])*\1|[^\s'">=]+))?)*\s*\/?>/i,greedy:!0,inside:{tag:{pattern:/^<\/?[^\s>\/]+/i,inside:{punctuation:/^<\/?/,namespace:/^[^\s>\/:]+:/}},"attr-value":{pattern:/=(?:("|')(?:\\[\s\S]|(?!\1)[^\\])*\1|[^\s'">=]+)/i,inside:{punctuation:[/^=/,{pattern:/(^|[^\\])["']/,lookbehind:!0}]}},punctuation:/\/?>/,"attr-name":{pattern:/[^\s>\/]+/,inside:{namespace:/^[^\s>\/:]+:/}}}},entity:/&#?[\da-z]{1,8};/i},l.languages.markup.tag.inside["attr-value"].inside.entity=l.languages.markup.entity,l.hooks.add("wrap",(function(e){"entity"===e.type&&(e.attributes.title=e.content.replace(/&amp;/,"&"))})),l.languages.xml=l.languages.markup,l.languages.html=l.languages.markup,l.languages.mathml=l.languages.markup,l.languages.svg=l.languages.markup,l.languages.css={comment:/\/\*[\s\S]*?\*\//,atrule:{pattern:/@[\w-]+?.*?(?:;|(?=\s*\{))/i,inside:{rule:/@[\w-]+/}},url:/url\((?:(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1|.*?)\)/i,selector:/[^{}\s][^{};]*?(?=\s*\{)/,string:{pattern:/("|')(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,greedy:!0},property:/[-_a-z\xA0-\uFFFF][-\w\xA0-\uFFFF]*(?=\s*:)/i,important:/\B!important\b/i,function:/[-a-z0-9]+(?=\()/i,punctuation:/[(){};:]/},l.languages.css.atrule.inside.rest=l.languages.css,l.languages.markup&&(l.languages.insertBefore("markup","tag",{style:{pattern:/(<style[\s\S]*?>)[\s\S]*?(?=<\/style>)/i,lookbehind:!0,inside:l.languages.css,alias:"language-css",greedy:!0}}),l.languages.insertBefore("inside","attr-value",{"style-attr":{pattern:/\s*style=("|')(?:\\[\s\S]|(?!\1)[^\\])*\1/i,inside:{"attr-name":{pattern:/^\s*style/i,inside:l.languages.markup.tag.inside},punctuation:/^\s*=\s*['"]|['"]\s*$/,"attr-value":{pattern:/.+/i,inside:l.languages.css}},alias:"language-css"}},l.languages.markup.tag)),l.languages.clike={comment:[{pattern:/(^|[^\\])\/\*[\s\S]*?(?:\*\/|$)/,lookbehind:!0},{pattern:/(^|[^\\:])\/\/.*/,lookbehind:!0,greedy:!0}],string:{pattern:/(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,greedy:!0},"class-name":{pattern:/((?:\b(?:class|interface|extends|implements|trait|instanceof|new)\s+)|(?:catch\s+\())[\w.\\]+/i,lookbehind:!0,inside:{punctuation:/[.\\]/}},keyword:/\b(?:if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\b/,boolean:/\b(?:true|false)\b/,function:/[a-z0-9_]+(?=\()/i,number:/\b0x[\da-f]+\b|(?:\b\d+\.?\d*|\B\.\d+)(?:e[+-]?\d+)?/i,operator:/--?|\+\+?|!=?=?|<=?|>=?|==?=?|&&?|\|\|?|\?|\*|\/|~|\^|%/,punctuation:/[{}[\];(),.:]/},l.languages.javascript=l.languages.extend("clike",{keyword:/\b(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|var|void|while|with|yield)\b/,number:/\b(?:0[xX][\dA-Fa-f]+|0[bB][01]+|0[oO][0-7]+|NaN|Infinity)\b|(?:\b\d+\.?\d*|\B\.\d+)(?:[Ee][+-]?\d+)?/,function:/[_$a-z\xA0-\uFFFF][$\w\xA0-\uFFFF]*(?=\s*\()/i,operator:/-[-=]?|\+[+=]?|!=?=?|<<?=?|>>?>?=?|=(?:==?|>)?|&[&=]?|\|[|=]?|\*\*?=?|\/=?|~|\^=?|%=?|\?|\.{3}/}),l.languages.insertBefore("javascript","keyword",{regex:{pattern:/((?:^|[^$\w\xA0-\uFFFF."'\])\s])\s*)\/(\[[^\]\r\n]+]|\\.|[^/\\\[\r\n])+\/[gimyu]{0,5}(?=\s*($|[\r\n,.;})\]]))/,lookbehind:!0,greedy:!0},"function-variable":{pattern:/[_$a-z\xA0-\uFFFF][$\w\xA0-\uFFFF]*(?=\s*=\s*(?:function\b|(?:\([^()]*\)|[_$a-z\xA0-\uFFFF][$\w\xA0-\uFFFF]*)\s*=>))/i,alias:"function"},constant:/\b[A-Z][A-Z\d_]*\b/}),l.languages.insertBefore("javascript","string",{"template-string":{pattern:/`(?:\\[\s\S]|\${[^}]+}|[^\\`])*`/,greedy:!0,inside:{interpolation:{pattern:/\${[^}]+}/,inside:{"interpolation-punctuation":{pattern:/^\${|}$/,alias:"punctuation"},rest:null}},string:/[\s\S]+/}}}),l.languages.javascript["template-string"].inside.interpolation.inside.rest=l.languages.javascript,l.languages.markup&&l.languages.insertBefore("markup","tag",{script:{pattern:/(<script[\s\S]*?>)[\s\S]*?(?=<\/script>)/i,lookbehind:!0,inside:l.languages.javascript,alias:"language-javascript",greedy:!0}}),l.languages.js=l.languages.javascript,function(){if("undefined"!=typeof document){var e=document.head||document.getElementsByTagName("head")[0],t=document.createElement("style");t.type="text/css",t.styleSheet?t.styleSheet.cssText="":t.appendChild(document.createTextNode("")),e.appendChild(t)}}();var c={render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{ref:"codeBlock"},[n("pre",{class:e.languageClass},[n("code",[e._t("default")],2)])])},staticRenderFns:[],name:"code-highlight",props:{language:{type:String,default:"javascript"}},computed:{languageClass:function(){return"language-"+this.language}},mounted:function(){l.highlightAllUnder(this.$refs.codeBlock)},beforeUpdate:function(){if(this.$slots.default[0].text){var e=this.$slots.default[0].text.replace(/^[\r\n\s]*|[\r\n\s]*$/g,"");this.$el.querySelector("code").textContent=e,l.highlightAllUnder(this.$refs.codeBlock)}}};function u(e){l.highlightAllUnder(e)}function d(e){d.installed||(d.installed=!0,e.directive("highlight",u))}var p={install:d},f=null;"undefined"!=typeof window?f=window.Vue:void 0!==n.g&&(f=n.g.Vue),f&&f.use(p),t.default=d},"./App.vue":function(e,t,n){"use strict";n.r(t);var r=n("./App.vue?vue&type=template&id=472cff63&"),o=n("./App.vue?vue&type=script&lang=js&"),a=(0,n("../node_modules/vue-loader/lib/runtime/componentNormalizer.js").default)(o.default,r.render,r.staticRenderFns,!1,null,null,null);a.options.__file="App.vue",t.default=a.exports},"./components/Nav.vue":function(e,t,n){"use strict";n.r(t);var r=n("./components/Nav.vue?vue&type=template&id=738fae98&"),o=n("./components/Nav.vue?vue&type=script&lang=js&"),a=(0,n("../node_modules/vue-loader/lib/runtime/componentNormalizer.js").default)(o.default,r.render,r.staticRenderFns,!1,null,null,null);a.options.__file="components/Nav.vue",t.default=a.exports},"./components/examples/Arrays.vue":function(e,t,n){"use strict";n.r(t);var r=n("./components/examples/Arrays.vue?vue&type=template&id=3807c975&"),o=n("./components/examples/Arrays.vue?vue&type=script&lang=js&"),a=(0,n("../node_modules/vue-loader/lib/runtime/componentNormalizer.js").default)(o.default,r.render,r.staticRenderFns,!1,null,null,null);a.options.__file="components/examples/Arrays.vue",t.default=a.exports},"./components/examples/Disabled.vue":function(e,t,n){"use strict";n.r(t);var r=n("./components/examples/Disabled.vue?vue&type=template&id=8c74c612&"),o=n("./components/examples/Disabled.vue?vue&type=script&lang=js&"),a=(0,n("../node_modules/vue-loader/lib/runtime/componentNormalizer.js").default)(o.default,r.render,r.staticRenderFns,!1,null,null,null);a.options.__file="components/examples/Disabled.vue",t.default=a.exports},"./components/examples/LogPrefix.vue":function(e,t,n){"use strict";n.r(t);var r=n("./components/examples/LogPrefix.vue?vue&type=template&id=c7d315ea&"),o=n("./components/examples/LogPrefix.vue?vue&type=script&lang=js&"),a=(0,n("../node_modules/vue-loader/lib/runtime/componentNormalizer.js").default)(o.default,r.render,r.staticRenderFns,!1,null,null,null);a.options.__file="components/examples/LogPrefix.vue",t.default=a.exports},"./components/examples/Magical.vue":function(e,t,n){"use strict";n.r(t);var r=n("./components/examples/Magical.vue?vue&type=template&id=78aae226&"),o=n("./components/examples/Magical.vue?vue&type=script&lang=js&"),a=(0,n("../node_modules/vue-loader/lib/runtime/componentNormalizer.js").default)(o.default,r.render,r.staticRenderFns,!1,null,null,null);a.options.__file="components/examples/Magical.vue",t.default=a.exports},"./components/examples/Objects.vue":function(e,t,n){"use strict";n.r(t);var r=n("./components/examples/Objects.vue?vue&type=template&id=1fd4b769&"),o=n("./components/examples/Objects.vue?vue&type=script&lang=js&"),a=(0,n("../node_modules/vue-loader/lib/runtime/componentNormalizer.js").default)(o.default,r.render,r.staticRenderFns,!1,null,null,null);a.options.__file="components/examples/Objects.vue",t.default=a.exports},"./components/examples/Simple.vue":function(e,t,n){"use strict";n.r(t);var r=n("./components/examples/Simple.vue?vue&type=template&id=29ed25ed&"),o=n("./components/examples/Simple.vue?vue&type=script&lang=js&"),a=(0,n("../node_modules/vue-loader/lib/runtime/componentNormalizer.js").default)(o.default,r.render,r.staticRenderFns,!1,null,null,null);a.options.__file="components/examples/Simple.vue",t.default=a.exports},"./components/examples/Styles.vue":function(e,t,n){"use strict";n.r(t);var r=n("./components/examples/Styles.vue?vue&type=template&id=eeb315c6&"),o=n("./components/examples/Styles.vue?vue&type=script&lang=js&"),a=(0,n("../node_modules/vue-loader/lib/runtime/componentNormalizer.js").default)(o.default,r.render,r.staticRenderFns,!1,null,null,null);a.options.__file="components/examples/Styles.vue",t.default=a.exports},"./components/examples/Text.vue":function(e,t,n){"use strict";n.r(t);var r=n("./components/examples/Text.vue?vue&type=template&id=013f50a8&"),o=n("./components/examples/Text.vue?vue&type=script&lang=js&"),a=(0,n("../node_modules/vue-loader/lib/runtime/componentNormalizer.js").default)(o.default,r.render,r.staticRenderFns,!1,null,null,null);a.options.__file="components/examples/Text.vue",t.default=a.exports},"./components/examples/Type.vue":function(e,t,n){"use strict";n.r(t);var r=n("./components/examples/Type.vue?vue&type=template&id=14c1cc35&"),o=n("./components/examples/Type.vue?vue&type=script&lang=js&"),a=(0,n("../node_modules/vue-loader/lib/runtime/componentNormalizer.js").default)(o.default,r.render,r.staticRenderFns,!1,null,null,null);a.options.__file="components/examples/Type.vue",t.default=a.exports},"./docs/UnicornLog.vue":function(e,t,n){"use strict";n.r(t);var r=n("./docs/UnicornLog.vue?vue&type=template&id=92ac123c&"),o=n("./docs/UnicornLog.vue?vue&type=script&lang=js&"),a=(n("./docs/UnicornLog.vue?vue&type=style&index=0&lang=scss&"),(0,n("../node_modules/vue-loader/lib/runtime/componentNormalizer.js").default)(o.default,r.render,r.staticRenderFns,!1,null,null,null));a.options.__file="docs/UnicornLog.vue",t.default=a.exports},"./App.vue?vue&type=script&lang=js&":function(e,t,n){"use strict";n.r(t);var r=n("../node_modules/babel-loader/lib/index.js??clonedRuleSet-1[0].rules[0].use!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=script&lang=js&");t.default=r.default},"./components/Nav.vue?vue&type=script&lang=js&":function(e,t,n){"use strict";n.r(t);var r=n("../node_modules/babel-loader/lib/index.js??clonedRuleSet-1[0].rules[0].use!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/Nav.vue?vue&type=script&lang=js&");t.default=r.default},"./components/examples/Arrays.vue?vue&type=script&lang=js&":function(e,t,n){"use strict";n.r(t);var r=n("../node_modules/babel-loader/lib/index.js??clonedRuleSet-1[0].rules[0].use!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/Arrays.vue?vue&type=script&lang=js&");t.default=r.default},"./components/examples/Disabled.vue?vue&type=script&lang=js&":function(e,t,n){"use strict";n.r(t);var r=n("../node_modules/babel-loader/lib/index.js??clonedRuleSet-1[0].rules[0].use!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/Disabled.vue?vue&type=script&lang=js&");t.default=r.default},"./components/examples/LogPrefix.vue?vue&type=script&lang=js&":function(e,t,n){"use strict";n.r(t);var r=n("../node_modules/babel-loader/lib/index.js??clonedRuleSet-1[0].rules[0].use!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/LogPrefix.vue?vue&type=script&lang=js&");t.default=r.default},"./components/examples/Magical.vue?vue&type=script&lang=js&":function(e,t,n){"use strict";n.r(t);var r=n("../node_modules/babel-loader/lib/index.js??clonedRuleSet-1[0].rules[0].use!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/Magical.vue?vue&type=script&lang=js&");t.default=r.default},"./components/examples/Objects.vue?vue&type=script&lang=js&":function(e,t,n){"use strict";n.r(t);var r=n("../node_modules/babel-loader/lib/index.js??clonedRuleSet-1[0].rules[0].use!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/Objects.vue?vue&type=script&lang=js&");t.default=r.default},"./components/examples/Simple.vue?vue&type=script&lang=js&":function(e,t,n){"use strict";n.r(t);var r=n("../node_modules/babel-loader/lib/index.js??clonedRuleSet-1[0].rules[0].use!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/Simple.vue?vue&type=script&lang=js&");t.default=r.default},"./components/examples/Styles.vue?vue&type=script&lang=js&":function(e,t,n){"use strict";n.r(t);var r=n("../node_modules/babel-loader/lib/index.js??clonedRuleSet-1[0].rules[0].use!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/Styles.vue?vue&type=script&lang=js&");t.default=r.default},"./components/examples/Text.vue?vue&type=script&lang=js&":function(e,t,n){"use strict";n.r(t);var r=n("../node_modules/babel-loader/lib/index.js??clonedRuleSet-1[0].rules[0].use!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/Text.vue?vue&type=script&lang=js&");t.default=r.default},"./components/examples/Type.vue?vue&type=script&lang=js&":function(e,t,n){"use strict";n.r(t);var r=n("../node_modules/babel-loader/lib/index.js??clonedRuleSet-1[0].rules[0].use!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/Type.vue?vue&type=script&lang=js&");t.default=r.default},"./docs/UnicornLog.vue?vue&type=script&lang=js&":function(e,t,n){"use strict";n.r(t);var r=n("../node_modules/babel-loader/lib/index.js??clonedRuleSet-1[0].rules[0].use!../node_modules/vue-loader/lib/index.js??vue-loader-options!./docs/UnicornLog.vue?vue&type=script&lang=js&");t.default=r.default},"./App.vue?vue&type=template&id=472cff63&":function(e,t,n){"use strict";n.r(t),n.d(t,{render:function(){return r.render},staticRenderFns:function(){return r.staticRenderFns}});var r=n("../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=template&id=472cff63&")},"./components/Nav.vue?vue&type=template&id=738fae98&":function(e,t,n){"use strict";n.r(t),n.d(t,{render:function(){return r.render},staticRenderFns:function(){return r.staticRenderFns}});var r=n("../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/Nav.vue?vue&type=template&id=738fae98&")},"./components/examples/Arrays.vue?vue&type=template&id=3807c975&":function(e,t,n){"use strict";n.r(t),n.d(t,{render:function(){return r.render},staticRenderFns:function(){return r.staticRenderFns}});var r=n("../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/Arrays.vue?vue&type=template&id=3807c975&")},"./components/examples/Disabled.vue?vue&type=template&id=8c74c612&":function(e,t,n){"use strict";n.r(t),n.d(t,{render:function(){return r.render},staticRenderFns:function(){return r.staticRenderFns}});var r=n("../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/Disabled.vue?vue&type=template&id=8c74c612&")},"./components/examples/LogPrefix.vue?vue&type=template&id=c7d315ea&":function(e,t,n){"use strict";n.r(t),n.d(t,{render:function(){return r.render},staticRenderFns:function(){return r.staticRenderFns}});var r=n("../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/LogPrefix.vue?vue&type=template&id=c7d315ea&")},"./components/examples/Magical.vue?vue&type=template&id=78aae226&":function(e,t,n){"use strict";n.r(t),n.d(t,{render:function(){return r.render},staticRenderFns:function(){return r.staticRenderFns}});var r=n("../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/Magical.vue?vue&type=template&id=78aae226&")},"./components/examples/Objects.vue?vue&type=template&id=1fd4b769&":function(e,t,n){"use strict";n.r(t),n.d(t,{render:function(){return r.render},staticRenderFns:function(){return r.staticRenderFns}});var r=n("../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/Objects.vue?vue&type=template&id=1fd4b769&")},"./components/examples/Simple.vue?vue&type=template&id=29ed25ed&":function(e,t,n){"use strict";n.r(t),n.d(t,{render:function(){return r.render},staticRenderFns:function(){return r.staticRenderFns}});var r=n("../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/Simple.vue?vue&type=template&id=29ed25ed&")},"./components/examples/Styles.vue?vue&type=template&id=eeb315c6&":function(e,t,n){"use strict";n.r(t),n.d(t,{render:function(){return r.render},staticRenderFns:function(){return r.staticRenderFns}});var r=n("../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/Styles.vue?vue&type=template&id=eeb315c6&")},"./components/examples/Text.vue?vue&type=template&id=013f50a8&":function(e,t,n){"use strict";n.r(t),n.d(t,{render:function(){return r.render},staticRenderFns:function(){return r.staticRenderFns}});var r=n("../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/Text.vue?vue&type=template&id=013f50a8&")},"./components/examples/Type.vue?vue&type=template&id=14c1cc35&":function(e,t,n){"use strict";n.r(t),n.d(t,{render:function(){return r.render},staticRenderFns:function(){return r.staticRenderFns}});var r=n("../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/Type.vue?vue&type=template&id=14c1cc35&")},"./docs/UnicornLog.vue?vue&type=template&id=92ac123c&":function(e,t,n){"use strict";n.r(t),n.d(t,{render:function(){return r.render},staticRenderFns:function(){return r.staticRenderFns}});var r=n("../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../node_modules/vue-loader/lib/index.js??vue-loader-options!./docs/UnicornLog.vue?vue&type=template&id=92ac123c&")},"./docs/UnicornLog.vue?vue&type=style&index=0&lang=scss&":function(e,t,n){"use strict";n.r(t);var r=n("../node_modules/vue-style-loader/index.js!../node_modules/css-loader/dist/cjs.js!../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../node_modules/sass-loader/dist/cjs.js??clonedRuleSet-3[0].rules[0].use[2]!../node_modules/vue-loader/lib/index.js??vue-loader-options!./docs/UnicornLog.vue?vue&type=style&index=0&lang=scss&"),o={};for(var a in r)"default"!==a&&(o[a]=function(e){return r[e]}.bind(0,a));n.d(t,o)},"../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=template&id=472cff63&":function(e,t,n){"use strict";n.r(t),n.d(t,{render:function(){return r},staticRenderFns:function(){return o}});var r=function(){var e=this.$createElement,t=this._self._c||e;return t("div",[t("UnicornLog")],1)},o=[];r._withStripped=!0},"../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/Nav.vue?vue&type=template&id=738fae98&":function(e,t,n){"use strict";n.r(t),n.d(t,{render:function(){return r},staticRenderFns:function(){return o}});var r=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("nav",{staticClass:"navbar sticky-top navbar-expand-lg navbar-dark bg-dark mb-5"},[n("div",{staticClass:"container"},[n("a",{staticClass:"navbar-brand",attrs:{href:e.links.docs}},[e._v("🦄 Vue UnicornLog")]),e._v(" "),e._m(0),e._v(" "),n("div",{staticClass:"collapse navbar-collapse",attrs:{id:"navbarSupportedContent"}},[n("ul",{staticClass:"navbar-nav me-auto mb-2 mb-lg-0"},[n("li",{staticClass:"nav-item"},[n("a",{staticClass:"nav-link active",attrs:{"aria-current":"page",href:e.links.docs}},[e._v("\n\t\t\t\t\t\tHome\n\t\t\t\t\t")])]),e._v(" "),e._m(1),e._v(" "),e._m(2)]),e._v(" "),n("div",{staticClass:"d-flex"},[n("ul",{staticClass:"navbar-nav me-auto mb-2 mb-lg-0"},[n("li",{staticClass:"nav-item"},[n("a",{staticClass:"nav-link",attrs:{href:e.links.github}},[e._v("GitHub")])]),e._v(" "),n("li",{staticClass:"nav-item"},[n("a",{staticClass:"nav-link",attrs:{href:e.links.npm}},[e._v("NPM Package")])])])])])])])},o=[function(){var e=this.$createElement,t=this._self._c||e;return t("button",{staticClass:"navbar-toggler",attrs:{type:"button","data-bs-toggle":"collapse","data-bs-target":"#navbarSupportedContent","aria-controls":"navbarSupportedContent","aria-expanded":"false","aria-label":"Toggle navigation"}},[t("span",{staticClass:"navbar-toggler-icon"})])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("li",{staticClass:"nav-item dropdown"},[n("a",{staticClass:"nav-link dropdown-toggle",attrs:{href:"#",id:"docs-dropdown",role:"button","data-bs-toggle":"dropdown","aria-expanded":"false"}},[e._v("\n\t\t\t\t\t\tDocs\n\t\t\t\t\t")]),e._v(" "),n("ul",{staticClass:"dropdown-menu dropdown-menu-dark",attrs:{"aria-labelledby":"docs-dropdown"}},[n("li",[n("a",{staticClass:"dropdown-item",attrs:{href:"#ul-installation"}},[e._v("\n\t\t\t\t\t\t\t\tInstallation\n\t\t\t\t\t\t\t")])]),e._v(" "),n("li",[n("a",{staticClass:"dropdown-item",attrs:{href:"#ul-usage"}},[e._v("Usage")])]),e._v(" "),n("li",[n("hr",{staticClass:"dropdown-divider"})]),e._v(" "),n("li",[n("h6",{staticClass:"dropdown-header"},[e._v("Options")])]),e._v(" "),n("li",[n("a",{staticClass:"dropdown-item",attrs:{href:"#ul-plugin-options"}},[e._v("\n\t\t\t\t\t\t\t\tPlugin Options\n\t\t\t\t\t\t\t")])]),e._v(" "),n("li",[n("a",{staticClass:"dropdown-item",attrs:{href:"#ul-log-options"}},[e._v("Log Options")])]),e._v(" "),n("li",[n("hr",{staticClass:"dropdown-divider"})]),e._v(" "),n("li",[n("h6",{staticClass:"dropdown-header"},[e._v("Methods")])]),e._v(" "),n("li",[n("a",{staticClass:"dropdown-item",attrs:{href:"#ul-instance-methods"}},[e._v("\n\t\t\t\t\t\t\t\tInstance Methods\n\t\t\t\t\t\t\t")])]),e._v(" "),n("li",[n("a",{staticClass:"dropdown-item",attrs:{href:"#ul-console-methods"}},[e._v("\n\t\t\t\t\t\t\t\tConsole Methods\n\t\t\t\t\t\t\t")])]),e._v(" "),n("li",[n("hr",{staticClass:"dropdown-divider"})]),e._v(" "),n("li",[n("a",{staticClass:"dropdown-item",attrs:{href:"#ul-examples"}},[e._v("Examples")])])])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("li",{staticClass:"nav-item dropdown"},[n("a",{staticClass:"nav-link dropdown-toggle",attrs:{href:"#",id:"examples-dropdown",role:"button","data-bs-toggle":"dropdown","aria-expanded":"false"}},[e._v("\n\t\t\t\t\t\tExamples\n\t\t\t\t\t")]),e._v(" "),n("ul",{staticClass:"dropdown-menu dropdown-menu-dark",attrs:{"aria-labelledby":"examples-dropdown"}},[n("li",[n("a",{staticClass:"dropdown-item",attrs:{href:"#simple-examples"}},[e._v("Simple")])]),e._v(" "),n("li",[n("h6",{staticClass:"dropdown-header"},[e._v("Options")])]),e._v(" "),n("li",[n("a",{staticClass:"dropdown-item",attrs:{href:"#text-examples"}},[e._v("text")])]),e._v(" "),n("li",[n("a",{staticClass:"dropdown-item",attrs:{href:"#type-examples"}},[e._v("type")])]),e._v(" "),n("li",[n("a",{staticClass:"dropdown-item",attrs:{href:"#styles-examples"}},[e._v("styles")])]),e._v(" "),n("li",[n("a",{staticClass:"dropdown-item",attrs:{href:"#disabled-examples"}},[e._v("disabled")])]),e._v(" "),n("li",[n("a",{staticClass:"dropdown-item",attrs:{href:"#logPrefix-examples"}},[e._v("\n\t\t\t\t\t\t\t\tlogPrefix\n\t\t\t\t\t\t\t")])]),e._v(" "),n("li",[n("a",{staticClass:"dropdown-item",attrs:{href:"#magical-examples"}},[e._v("magical")])]),e._v(" "),n("li",[n("a",{staticClass:"dropdown-item",attrs:{href:"#name-examples"}},[e._v("name")])]),e._v(" "),n("li",[n("a",{staticClass:"dropdown-item",attrs:{href:"#objects-examples"}},[e._v("objects")])]),e._v(" "),n("li",[n("a",{staticClass:"dropdown-item",attrs:{href:"#array-examples"}},[e._v("array")])])])])}];r._withStripped=!0},"../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/Arrays.vue?vue&type=template&id=3807c975&":function(e,t,n){"use strict";n.r(t),n.d(t,{render:function(){return r},staticRenderFns:function(){return o}});var r=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",[e._m(0),e._v(" "),n("div",{staticClass:"row mb-4",attrs:{id:"array-simple-example"}},[e._m(1),e._v(" "),n("div",{staticClass:"col-xl-4 col-6 d-flex align-items-center justify-content-end"},[n("button",{staticClass:"btn btn-outline-primary btn-sm",attrs:{type:"button"},on:{click:e.simpleExample}},[e._v("\n\t\t\t\t\tRun\n\t\t\t\t")])]),e._v(" "),n("div",{staticClass:"col-xl-8 col-lg-12"},[n("vue-code-highlight",{attrs:{language:"js"}},[n("pre",[e._v("this.$unicornLog({\n\ttext: 'Hello World',\n\tarray: ['foo', 'bar'],\n});\n\t\t\t\t\t\t")])])],1)]),e._v(" "),n("div",{staticClass:"row mb-4",attrs:{id:"array-objects-example"}},[e._m(2),e._v(" "),n("div",{staticClass:"col-xl-4 col-6 d-flex align-items-center justify-content-end"},[n("button",{staticClass:"btn btn-outline-primary btn-sm",attrs:{type:"button"},on:{click:e.objectArray}},[e._v("\n\t\t\t\t\tRun\n\t\t\t\t")])]),e._v(" "),n("div",{staticClass:"col-xl-8 col-lg-12"},[n("vue-code-highlight",{attrs:{language:"js"}},[n("pre",[e._v("const foo = { foo: 'foo ' };\nconst bar = { bar: 'bar ' };\n\nthis.$unicornLog({\n\ttext: 'Hello World',\n\tarray: [foo, bar],\n});\n\t\t\t\t\t\t")])])],1)]),e._v(" "),n("div",{staticClass:"row mb-4",attrs:{id:"array-spread-example"}},[e._m(3),e._v(" "),n("div",{staticClass:"col-xl-4 col-6 d-flex align-items-center justify-content-end"},[n("button",{staticClass:"btn btn-outline-primary btn-sm",attrs:{type:"button"},on:{click:e.arraySpreadOperator}},[e._v("\n\t\t\t\t\tRun\n\t\t\t\t")])]),e._v(" "),n("div",{staticClass:"col-xl-8 col-lg-12"},[n("vue-code-highlight",{attrs:{language:"js"}},[n("pre",[e._v("const foo = ['foo'];\nconst bar = ['bar'];\n\nthis.$unicornLog({\n\ttext: 'Hello World',\n\tarray: [...foo, ...bar],\n});\n\t\t\t\t\t\t")])])],1)])])},o=[function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"row mb-2"},[n("div",{staticClass:"col-12"},[n("h5",{staticClass:"my-0"},[n("code",[e._v("array")])])])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"col-xl-4 col-6 d-flex align-items-center"},[n("h6",{staticClass:"my-0"},[e._v("Single array")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"col-xl-4 col-6 d-flex align-items-center"},[n("h6",{staticClass:"my-0"},[e._v("Using an array of objects")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"col-xl-4 col-6 d-flex align-items-center"},[n("h6",{staticClass:"my-0"},[e._v("Using array spread Operator")])])}];r._withStripped=!0},"../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/Disabled.vue?vue&type=template&id=8c74c612&":function(e,t,n){"use strict";n.r(t),n.d(t,{render:function(){return r},staticRenderFns:function(){return o}});var r=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",[e._m(0),e._v(" "),n("div",{staticClass:"row mb-4",attrs:{id:"disabled-simple-example"}},[n("div",{staticClass:"col-xl-4 col-6 d-flex align-items-center"},[n("div",{staticClass:"form-check form-switch"},[n("input",{directives:[{name:"model",rawName:"v-model",value:e.isDisabled,expression:"isDisabled"}],staticClass:"form-check-input",attrs:{type:"checkbox",role:"switch",checked:""},domProps:{checked:Array.isArray(e.isDisabled)?e._i(e.isDisabled,null)>-1:e.isDisabled},on:{change:function(t){var n=e.isDisabled,r=t.target,o=!!r.checked;if(Array.isArray(n)){var a=e._i(n,null);r.checked?a<0&&(e.isDisabled=n.concat([null])):a>-1&&(e.isDisabled=n.slice(0,a).concat(n.slice(a+1)))}else e.isDisabled=o}}}),e._v(" "),n("label",{staticClass:"form-check-label"},[e._v("disabled =\n\t\t\t\t\t\t"),n("span",{staticClass:"boolean-style"},[e._v(e._s(e.isDisabled))])])])]),e._v(" "),n("div",{staticClass:"col-xl-4 col-6 d-flex align-items-center justify-content-end"},[n("button",{staticClass:"btn btn-outline-primary btn-sm",attrs:{type:"button"},on:{click:e.simpleExample}},[e._v("\n\t\t\t\t\tRun\n\t\t\t\t")])]),e._v(" "),n("div",{staticClass:"col-xl-8 col-lg-12"},[n("vue-code-highlight",{attrs:{language:"js"}},[n("pre",[e._v("this.$unicornLog({\n\ttext: 'Hello World',\n\tdisabled: true,\n});\n\t\t\t\t\t\t")])])],1)]),e._v(" "),n("div",{staticClass:"row mb-4",attrs:{id:"disabled-conditional-example"}},[e._m(1),e._v(" "),n("div",{staticClass:"col-xl-8 col-lg-12"},[n("vue-code-highlight",{attrs:{language:"js"}},[n("pre",[e._v("this.$unicornLog({\n\ttext: 'Hello World',\n\tdisabled: process.env.UNICORN_LOG !== 'true',\n});\n\t\t\t\t\t\t")])])],1)])])},o=[function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"row mb-2"},[n("div",{staticClass:"col-12"},[n("h5",{staticClass:"my-0"},[n("code",[e._v("disabled")])])])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"col-12"},[n("h6",{staticClass:"my-0"},[e._v("Using an .env variable")]),e._v(" "),n("div",{staticClass:"fst-italic"},[e._v("\n\t\t\t\t\tConditionally set so it will log in development, but not on the\n\t\t\t\t\tproduction site.\n\t\t\t\t")])])}];r._withStripped=!0},"../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/LogPrefix.vue?vue&type=template&id=c7d315ea&":function(e,t,n){"use strict";n.r(t),n.d(t,{render:function(){return r},staticRenderFns:function(){return o}});var r=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",[n("div",{staticClass:"row mb-2"},[n("div",{staticClass:"col-12"},[n("h5",{staticClass:"my-0"},[n("code",[e._v(e._s(e.isNameOption?"name":"logPrefix"))])])])]),e._v(" "),e.isNameOption?e._e():n("div",{staticClass:"row mb-4",attrs:{id:"logPrefix-simple-example"}},[n("div",{staticClass:"col-xl-4 col-6 d-flex align-items-center"},[n("input",{directives:[{name:"model",rawName:"v-model",value:e.logPrefix,expression:"logPrefix"}],staticClass:"form-control",attrs:{type:"text",value:"[Bunnies]:",placeholder:"[Bunnies]:"},domProps:{value:e.logPrefix},on:{input:function(t){t.target.composing||(e.logPrefix=t.target.value)}}})]),e._v(" "),n("div",{staticClass:"col-xl-4 col-6 d-flex align-items-center justify-content-end"},[n("button",{staticClass:"btn btn-outline-primary btn-sm",attrs:{type:"button"},on:{click:e.simpleExample}},[e._v("\n\t\t\t\t\tRun\n\t\t\t\t")])]),e._v(" "),n("div",{staticClass:"col-xl-8 col-lg-12"},[n("vue-code-highlight",{attrs:{language:"js"}},[n("pre",[e._v("this.$unicornLog({\n\ttext: 'Hello World',\n\tlogPrefix: '[Bunnies]:',\n});\n\t\t\t\t\t\t")])])],1)]),e._v(" "),e.isNameOption?e._e():n("div",{staticClass:"row mb-4",attrs:{id:"name-default-example"}},[e._m(0),e._v(" "),n("div",{staticClass:"col-xl-4 col-6 d-flex align-items-center"},[n("div",{staticClass:"form-check form-switch"},[n("input",{directives:[{name:"model",rawName:"v-model",value:e.withName,expression:"withName"}],staticClass:"form-check-input",attrs:{type:"checkbox",role:"switch",checked:""},domProps:{checked:Array.isArray(e.withName)?e._i(e.withName,null)>-1:e.withName},on:{change:function(t){var n=e.withName,r=t.target,o=!!r.checked;if(Array.isArray(n)){var a=e._i(n,null);r.checked?a<0&&(e.withName=n.concat([null])):a>-1&&(e.withName=n.slice(0,a).concat(n.slice(a+1)))}else e.withName=o}}}),e._v(" "),n("label",{staticClass:"form-check-label"},[e._v("logPrefix option =\n\t\t\t\t\t\t"),n("span",{staticClass:"boolean-style"},[e._v(e._s(e.withName))]),e._v(" with default\n\t\t\t\t\t\t"),n("code",[e._v("name")]),e._v(" option\n\t\t\t\t\t")])])]),e._v(" "),n("div",{staticClass:"col-xl-4 col-6 d-flex align-items-center justify-content-end"},[n("button",{staticClass:"btn btn-outline-primary btn-sm",attrs:{type:"button"},on:{click:e.exampleNameDefault}},[e._v("\n\t\t\t\t\tRun\n\t\t\t\t")])]),e._v(" "),n("div",{staticClass:"col-xl-8 col-lg-12"},[n("vue-code-highlight",{attrs:{language:"js"}},[n("pre",[e._v("this.$unicornLog({\n\ttext: 'Hello World',\n\tlogPrefix: true,\n});\n\t\t\t\t\t\t")])])],1)]),e._v(" "),n("div",{staticClass:"row mb-4",attrs:{id:"name-example"}},[n("div",{staticClass:"col-xl-4 col-6 d-flex align-items-center"},[n("div",{staticClass:"form-check form-switch"},[n("input",{directives:[{name:"model",rawName:"v-model",value:e.withName,expression:"withName"}],staticClass:"form-check-input",attrs:{type:"checkbox",role:"switch",checked:""},domProps:{checked:Array.isArray(e.withName)?e._i(e.withName,null)>-1:e.withName},on:{change:function(t){var n=e.withName,r=t.target,o=!!r.checked;if(Array.isArray(n)){var a=e._i(n,null);r.checked?a<0&&(e.withName=n.concat([null])):a>-1&&(e.withName=n.slice(0,a).concat(n.slice(a+1)))}else e.withName=o}}}),e._v(" "),n("label",{staticClass:"form-check-label"},[e._v("logPrefix = "),n("span",{staticClass:"boolean-style"},[e._v(e._s(e.withName))]),e._v(" with\n\t\t\t\t\t\t"),n("code",[e._v("name")]),e._v(" option set\n\t\t\t\t\t")])])]),e._v(" "),n("div",{staticClass:"col-xl-4 col-6 d-flex align-items-center justify-content-end"},[n("button",{staticClass:"btn btn-outline-primary btn-sm",attrs:{type:"button"},on:{click:e.exampleName}},[e._v("\n\t\t\t\t\tRun\n\t\t\t\t")])]),e._v(" "),n("div",{staticClass:"col-xl-8 col-lg-12"},[n("vue-code-highlight",{attrs:{language:"js"}},[n("pre",[e._v("this.$unicornLog({\n\ttext: 'Hello World',\n\tlogPrefix: true,\n\tname: '"+e._s(e.isNameOption?"Susan":"Bob")+"',\n});\n\t\t\t\t\t\t")])])],1)])])},o=[function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"col-12 mb-2"},[e._v("\n\t\t\t\tIf "),n("code",[e._v("logPrefix")]),e._v(" option is set as a\n\t\t\t\t"),n("span",{staticClass:"option-type"},[e._v("Boolean")]),e._v(" of\n\t\t\t\t"),n("span",{staticClass:"boolean-style"},[e._v("true")]),e._v(", it will use the\n\t\t\t\t"),n("code",[e._v("name")]),e._v(" option for the prefix.\n\t\t\t")])}];r._withStripped=!0},"../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/Magical.vue?vue&type=template&id=78aae226&":function(e,t,n){"use strict";n.r(t),n.d(t,{render:function(){return r},staticRenderFns:function(){return o}});var r=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",[e._m(0),e._v(" "),n("div",{staticClass:"row mb-4",attrs:{id:"magical-simple-example"}},[n("div",{staticClass:"col-xl-4 col-6 d-flex align-items-center"},[n("div",{staticClass:"form-check form-switch"},[n("input",{directives:[{name:"model",rawName:"v-model",value:e.magical,expression:"magical"}],staticClass:"form-check-input",attrs:{type:"checkbox",role:"switch",checked:""},domProps:{checked:Array.isArray(e.magical)?e._i(e.magical,null)>-1:e.magical},on:{change:function(t){var n=e.magical,r=t.target,o=!!r.checked;if(Array.isArray(n)){var a=e._i(n,null);r.checked?a<0&&(e.magical=n.concat([null])):a>-1&&(e.magical=n.slice(0,a).concat(n.slice(a+1)))}else e.magical=o}}}),e._v(" "),n("label",{staticClass:"form-check-label"},[e._v("magical =\n\t\t\t\t\t\t"),n("span",{staticClass:"boolean-style"},[e._v(e._s(e.magical))])])])]),e._v(" "),n("div",{staticClass:"col-xl-4 col-6 d-flex align-items-center justify-content-end"},[n("button",{staticClass:"btn btn-outline-primary btn-sm",attrs:{type:"button"},on:{click:e.simpleExample}},[e._v("\n\t\t\t\t\tRun\n\t\t\t\t")])]),e._v(" "),n("div",{staticClass:"col-xl-8 col-lg-12"},[n("vue-code-highlight",{attrs:{language:"js"}},[n("pre",[e._v("this.$unicornLog({\n\ttext: 'Hello World',\n\tmagical: true,\n});\n\t\t\t\t\t\t")])])],1)])])},o=[function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"row mb-2"},[n("div",{staticClass:"col-12"},[n("h5",{staticClass:"my-0"},[n("code",[e._v("magical")])])])])}];r._withStripped=!0},"../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/Objects.vue?vue&type=template&id=1fd4b769&":function(e,t,n){"use strict";n.r(t),n.d(t,{render:function(){return r},staticRenderFns:function(){return o}});var r=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",[e._m(0),e._v(" "),n("div",{staticClass:"row mb-4",attrs:{id:"objects-simple-example"}},[e._m(1),e._v(" "),n("div",{staticClass:"col-xl-4 col-6 d-flex align-items-center justify-content-end"},[n("button",{staticClass:"btn btn-outline-primary btn-sm",attrs:{type:"button"},on:{click:e.simpleExample}},[e._v("\n\t\t\t\t\tRun\n\t\t\t\t")])]),e._v(" "),n("div",{staticClass:"col-xl-8 col-lg-12"},[n("vue-code-highlight",{attrs:{language:"js"}},[n("pre",[e._v("this.$unicornLog({\n\ttext: 'Hello World',\n\tobjects: { foo: 'bar' },\n});\n\t\t\t\t\t\t")])])],1)]),e._v(" "),n("div",{staticClass:"row mb-4",attrs:{id:"objects-multiple-example"}},[e._m(2),e._v(" "),n("div",{staticClass:"col-xl-4 col-6 d-flex align-items-center justify-content-end"},[n("button",{staticClass:"btn btn-outline-primary btn-sm",attrs:{type:"button"},on:{click:e.multipleObjects}},[e._v("\n\t\t\t\t\tRun\n\t\t\t\t")])]),e._v(" "),n("div",{staticClass:"col-xl-8 col-lg-12"},[n("vue-code-highlight",{attrs:{language:"js"}},[n("pre",[e._v("const foo = { foo: 'foo ' };\nconst bar = { bar: 'bar ' };\n\nthis.$unicornLog({\n\ttext: 'Hello World',\n\tobjects: { foo, bar },\n});\n\t\t\t\t\t\t")])])],1)]),e._v(" "),n("div",{staticClass:"row mb-4",attrs:{id:"objects-spread-example"}},[e._m(3),e._v(" "),n("div",{staticClass:"col-xl-4 col-6 d-flex align-items-center justify-content-end"},[n("button",{staticClass:"btn btn-outline-primary btn-sm",attrs:{type:"button"},on:{click:e.objectSpreadOperator}},[e._v("\n\t\t\t\t\tRun\n\t\t\t\t")])]),e._v(" "),n("div",{staticClass:"col-xl-8 col-lg-12"},[n("vue-code-highlight",{attrs:{language:"js"}},[n("pre",[e._v("const foo = { foo: 'foo ' };\nconst bar = { bar: 'bar ' };\n\nthis.$unicornLog({\n\ttext: 'Hello World',\n\tobjects: { ...foo, ...bar },\n});\n\t\t\t\t\t\t")])])],1)])])},o=[function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"row mb-2"},[n("div",{staticClass:"col-12"},[n("h5",{staticClass:"my-0"},[n("code",[e._v("objects")])])])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"col-xl-4 col-6 d-flex align-items-center"},[n("h6",{staticClass:"my-0"},[e._v("Single object")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"col-xl-4 col-6 d-flex align-items-center"},[n("h6",{staticClass:"my-0"},[e._v("Multiple objects")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"col-xl-4 col-6 d-flex align-items-center"},[n("h6",{staticClass:"my-0"},[e._v("Using object spread Operator")])])}];r._withStripped=!0},"../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/Simple.vue?vue&type=template&id=29ed25ed&":function(e,t,n){"use strict";n.r(t),n.d(t,{render:function(){return r},staticRenderFns:function(){return o}});var r=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",[n("div",{staticClass:"row mb-4"},[e._m(0),e._v(" "),n("div",{staticClass:"col-xl-4 col-6 d-flex justify-content-end"},[n("button",{staticClass:"btn btn-outline-primary btn-sm",attrs:{type:"button"},on:{click:e.simpleExample}},[e._v("\n\t\t\t\t\tRun\n\t\t\t\t")])]),e._v(" "),n("div",{staticClass:"col-xl-8 col-lg-12"},[n("vue-code-highlight",{attrs:{language:"js"}},[n("pre",[e._v("this.$unicornLog();\n\t\t\t\t\t\t")])])],1)])])},o=[function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"col-xl-4 col-6 d-flex align-items-center"},[n("h5",{staticClass:"my-0"},[e._v("Simple Example")])])}];r._withStripped=!0},"../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/Styles.vue?vue&type=template&id=eeb315c6&":function(e,t,n){"use strict";n.r(t),n.d(t,{render:function(){return r},staticRenderFns:function(){return o}});var r=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",[e._m(0),e._v(" "),n("div",{staticClass:"row mb-4",attrs:{id:"defaultStyles-simple-example"}},[n("div",{staticClass:"col-xl-4 col-6 d-flex align-items-center"},[n("div",{staticClass:"col-xl-8 col-lg-12 mt-2"},[n("input",{directives:[{name:"model",rawName:"v-model",value:e.defaultStyles,expression:"defaultStyles"}],staticClass:"form-control",attrs:{type:"text",value:"[Bunnies]:",placeholder:"[Bunnies]:"},domProps:{value:e.defaultStyles},on:{input:function(t){t.target.composing||(e.defaultStyles=t.target.value)}}})])]),e._v(" "),n("div",{staticClass:"col-xl-4 col-6 d-flex align-items-center justify-content-end"},[n("button",{staticClass:"btn btn-outline-primary btn-sm",attrs:{type:"button"},on:{click:e.simpleExample}},[e._v("\n\t\t\t\t\tRun\n\t\t\t\t")])]),e._v(" "),n("div",{staticClass:"col-xl-8 col-lg-12"},[n("vue-code-highlight",{attrs:{language:"js"}},[n("pre",[e._v("this.$unicornLog({\n\ttext: 'Hello World',\n\tstyles: '"+e._s(this.defaultStyles)+"',\n});\n\t\t\t\t\t\t")])])],1)]),e._v(" "),n("div",{staticClass:"row mb-4",attrs:{id:"defaultStyles-simple-example"}},[e._m(1),e._v(" "),n("div",{staticClass:"col-xl-4 col-6 d-flex align-items-center justify-content-end"},[n("button",{staticClass:"btn btn-outline-primary btn-sm",attrs:{type:"button"},on:{click:e.arrayExample}},[e._v("\n\t\t\t\t\tRun\n\t\t\t\t")])]),e._v(" "),n("div",{staticClass:"col-xl-8 col-lg-12"},[n("vue-code-highlight",{attrs:{language:"js"}},[n("pre",[e._v("this.$unicornLog({\n\ttext: 'Hello World',\n\tstyles: [\n\t\t'background: black',\n\t\t'border: 1px dashed magenta',\n\t\t'color: magenta',\n\t\t'font-family: monospace',\n\t\t'font-size: 2em',\n\t\t'padding: 10px',\n\t],\n});\n\t\t\t\t\t\t")])])],1)]),e._v(" "),e._m(2),e._v(" "),n("div",{staticClass:"row mb-4",attrs:{id:"defaultStyles-word-example"}},[n("div",{staticClass:"col-xl-4 col-6 d-flex align-items-center"},[n("div",{staticClass:"col-xl-8 col-lg-12 mt-2"},[n("select",{directives:[{name:"model",rawName:"v-model",value:e.magicalWord,expression:"magicalWord"}],staticClass:"form-select",on:{change:function(t){var n=Array.prototype.filter.call(t.target.options,(function(e){return e.selected})).map((function(e){return"_value"in e?e._value:e.value}));e.magicalWord=t.target.multiple?n:n[0]}}},e._l(e.magicalWords,(function(t){return n("option",{key:t},[e._v(e._s(t))])})),0)])]),e._v(" "),n("div",{staticClass:"col-xl-4 col-6 d-flex align-items-center justify-content-end"},[n("button",{staticClass:"btn btn-outline-primary btn-sm",attrs:{type:"button"},on:{click:e.wordExample}},[e._v("\n\t\t\t\t\tRun\n\t\t\t\t")])]),e._v(" "),n("div",{staticClass:"col-xl-8 col-lg-12"},[n("vue-code-highlight",{attrs:{language:"js"}},[n("pre",[e._v("this.$unicornLog({\n\ttext: 'Hello World',\n\tstyles: '"+e._s(this.magicalWord)+"',\n});\n\t\t\t\t\t\t")])])],1)])])},o=[function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"row mb-2"},[n("div",{staticClass:"col-12"},[n("h5",{staticClass:"my-0"},[n("code",[e._v("styles")])])]),e._v(" "),n("div",{staticClass:"col-xl-8 col-lg-12"},[e._v("\n\t\t\t\tFor a list of the different available styles, refer to the\n\t\t\t\t"),n("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/API/console#styling_console_output",target:"_blank"}},[e._v("Web APIs MDN Styling Console Output\n\t\t\t\t")]),e._v("\n\t\t\t\tdeveloper documentation. Depending on the browser, some styles may not\n\t\t\t\twork.\n\t\t\t")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"col-xl-4 col-6 d-flex align-items-center"},[n("div",{staticClass:"col-xl-8 col-lg-12"},[n("h6",{staticClass:"my-0"},[e._v("Using an Array.")])])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"row mb-2",attrs:{id:"defaultStyles-word-example"}},[n("div",{staticClass:"col-xl-8 col-lg-12"},[e._v("\n\t\t\t\tYou can also set the "),n("code",[e._v("style")]),e._v(" option to a magical word to make\n\t\t\t\tthe magic happen. This can also be set with the\n\t\t\t\t"),n("code",[e._v("magical")]),e._v(" option to "),n("span",{staticClass:"boolean-style"},[e._v("true")]),e._v(".\n\t\t\t")])])}];r._withStripped=!0},"../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/Text.vue?vue&type=template&id=013f50a8&":function(e,t,n){"use strict";n.r(t),n.d(t,{render:function(){return r},staticRenderFns:function(){return o}});var r=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",[e._m(0),e._v(" "),n("div",{staticClass:"row mb-4",attrs:{id:"text-simple-example"}},[n("div",{staticClass:"col-xl-4 col-6 d-flex align-items-center"},[n("div",{staticClass:"col-xl-8 col-lg-12 mt-2"},[n("input",{directives:[{name:"model",rawName:"v-model",value:e.text,expression:"text"}],staticClass:"form-control",attrs:{type:"text",value:"[Bunnies]:",placeholder:"[Bunnies]:"},domProps:{value:e.text},on:{input:function(t){t.target.composing||(e.text=t.target.value)}}})])]),e._v(" "),n("div",{staticClass:"col-xl-4 col-6 d-flex align-items-center justify-content-end"},[n("button",{staticClass:"btn btn-outline-primary btn-sm",attrs:{type:"button"},on:{click:e.simpleExample}},[e._v("\n\t\t\t\t\tRun\n\t\t\t\t")])]),e._v(" "),n("div",{staticClass:"col-xl-8 col-lg-12"},[n("vue-code-highlight",{attrs:{language:"js"}},[n("pre",[e._v("this.$unicornLog({\n\ttext: 'Hello World',\n});\n\t\t\t\t\t\t")])])],1)])])},o=[function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"row mb-2"},[n("div",{staticClass:"col-12"},[n("h5",{staticClass:"my-0"},[n("code",[e._v("text")])])])])}];r._withStripped=!0},"../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../node_modules/vue-loader/lib/index.js??vue-loader-options!./components/examples/Type.vue?vue&type=template&id=14c1cc35&":function(e,t,n){"use strict";n.r(t),n.d(t,{render:function(){return r},staticRenderFns:function(){return o}});var r=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",[e._m(0),e._v(" "),n("div",{staticClass:"row mb-4",attrs:{id:"defaultStyles-simple-example"}},[n("div",{staticClass:"col-xl-4 col-6 d-flex align-items-center"},[n("div",{staticClass:"col-xl-8 col-lg-12 mt-2"},[n("select",{directives:[{name:"model",rawName:"v-model",value:e.logType,expression:"logType"}],staticClass:"form-select",on:{change:[function(t){var n=Array.prototype.filter.call(t.target.options,(function(e){return e.selected})).map((function(e){return"_value"in e?e._value:e.value}));e.logType=t.target.multiple?n:n[0]},e.checkType]}},e._l(e.types,(function(t){return n("option",{key:t},[e._v(e._s(t))])})),0)])]),e._v(" "),n("div",{staticClass:"col-xl-4 col-6 d-flex align-items-center justify-content-end"},[n("button",{staticClass:"btn btn-outline-primary btn-sm",attrs:{type:"button",disabled:"groupEnd"===this.logType},on:{click:e.simpleExample}},[e._v("\n\t\t\t\t\tRun\n\t\t\t\t")])]),e._v(" "),e.logNote?n("div",{staticClass:"col-xl-8 col-lg-12 my-2"},[n("div",{staticClass:"alert alert-primary d-flex align-items-center mb-0",attrs:{role:"alert"},domProps:{innerHTML:e._s(e.logNote)}})]):e._e(),e._v(" "),n("div",{staticClass:"col-xl-8 col-lg-12"},[n("vue-code-highlight",{attrs:{language:"js"}},[n("pre",[e._v("this.$unicornLog({\n\ttext: 'Hello World',\n\ttype: 'log',\n});\n\t\t\t\t\t\t")])])],1)])])},o=[function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"row mb-2"},[n("div",{staticClass:"col-12"},[n("h5",{staticClass:"my-0"},[n("code",[e._v("type")])])])])}];r._withStripped=!0},"../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../node_modules/vue-loader/lib/index.js??vue-loader-options!./docs/UnicornLog.vue?vue&type=template&id=92ac123c&":function(e,t,n){"use strict";n.r(t),n.d(t,{render:function(){return r},staticRenderFns:function(){return o}});var r=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",[n("Nav"),e._v(" "),e._m(0),e._v(" "),n("div",{staticClass:"container"},[n("div",{staticClass:"row mb-5",attrs:{id:"ul-installation"}},[e._m(1),e._v(" "),n("div",{staticClass:"col-xl-8 col-lg-12"},[n("vue-code-highlight",{attrs:{language:"shell"}},[n("pre",[e._v("npm i -D vue-unicorn-log\n\t\t\t\t\t\t")])])],1)]),e._v(" "),n("div",{staticClass:"row mb-5",attrs:{id:"ul-usage"}},[e._m(2),e._v(" "),n("div",{staticClass:"col-xl-8 col-lg-12"},[n("vue-code-highlight",{attrs:{language:"js"}},[n("pre",[e._v("import Vue from 'vue';\nimport UnicornLog from 'vue-unicorn-log';\n\nVue.use(UnicornLog);\n\t\t\t\t\t\t\t\t")])])],1)]),e._v(" "),n("div",{staticClass:"row mb-5",attrs:{id:"ul-plugin-options"}},[e._m(3),e._v(" "),n("div",{staticClass:"col-12 mb-3"},[n("div",{staticClass:"table-responsive"},[n("table",{staticClass:"table table-striped table-bordered"},[e._m(4),e._v(" "),n("tbody",[n("tr",[n("td",{attrs:{valign:"top"}},[e._v("defaultStyles")]),e._v(" "),n("td",{staticClass:"option-type",attrs:{valign:"top"}},[e._v("Object")]),e._v(" "),e._m(5),e._v(" "),e._m(6),e._v(" "),n("td",{attrs:{valign:"top"}},[e._v(e._s(e.copy.defaultStyles))])]),e._v(" "),n("tr",[n("td",{attrs:{valign:"top"}},[e._v("disabled")]),e._v(" "),n("td",{staticClass:"option-type",attrs:{valign:"top"}},[e._v("Boolean")]),e._v(" "),n("td",{staticClass:"boolean-style",attrs:{valign:"top"}},[e._v("false")]),e._v(" "),n("td",{attrs:{valign:"top"},domProps:{innerHTML:e._s(e.options.boolean)}}),e._v(" "),n("td",{attrs:{valign:"top"}},[e._v(e._s(e.copy.disabled))])]),e._v(" "),n("tr",[n("td",{attrs:{valign:"top"}},[e._v("logPrefix")]),e._v(" "),n("td",{staticClass:"option-type",attrs:{valign:"top"}},[e._v("Boolean | String")]),e._v(" "),n("td",{staticClass:"boolean-style",attrs:{valign:"top"}},[e._v("false")]),e._v(" "),n("td",{attrs:{valign:"top"}},[e._v("-")]),e._v(" "),n("td",{attrs:{valign:"top"}},[e._v(e._s(e.copy.logPrefix))])]),e._v(" "),n("tr",[n("td",{attrs:{valign:"top"}},[e._v("styles")]),e._v(" "),n("td",{staticClass:"option-type",attrs:{valign:"top"}},[e._v("String | Array")]),e._v(" "),n("td",{attrs:{valign:"top"}},[e._v("-")]),e._v(" "),n("td",{attrs:{valign:"top"},domProps:{innerHTML:e._s(e.options.styles)}}),e._v(" "),n("td",{attrs:{valign:"top"}},[e._v(e._s(e.copy.styles))])]),e._v(" "),n("tr",[n("td",{attrs:{valign:"top"}},[e._v("type")]),e._v(" "),n("td",{staticClass:"option-type",attrs:{valign:"top"}},[e._v("String")]),e._v(" "),n("td",{attrs:{valign:"top"}},[e._v("log")]),e._v(" "),n("td",{attrs:{valign:"top"},domProps:{innerHTML:e._s(e.options.type)}}),e._v(" "),n("td",{attrs:{valign:"top"}},[e._v(e._s(e.copy.type))])])])])])]),e._v(" "),e._m(7),e._v(" "),n("div",{staticClass:"col-xl-8 col-lg-12"},[n("vue-code-highlight",{attrs:{language:"js"}},[n("pre",[e._v("import Vue from 'vue';\nimport UnicornLog from 'vue-unicorn-log';\n\nVue.use(UnicornLog, {\n  defaultStyles: {},\n  disabled: process.env.UNICORN_LOG !== 'true',\n  logPrefix: '[OMG LOOK HERE!]',\n  styles: 'font-weight: bold;',\n  type: 'info'\n});\n\t\t\t\t\t\t\t\t")])])],1),e._v(" "),n("div",{staticClass:"col-12"},[n("svg",{staticStyle:{display:"none"},attrs:{xmlns:"http://www.w3.org/2000/svg"}},[n("symbol",{attrs:{id:"exclamation-triangle-fill",fill:"currentColor",viewBox:"0 0 16 16"}},[n("path",{attrs:{d:"M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"}})])]),e._v(" "),n("div",{staticClass:"alert alert-primary d-flex align-items-center my-2",attrs:{role:"alert"}},[n("svg",{staticClass:"bi flex-shrink-0 me-2",attrs:{width:"24",height:"24",role:"img","aria-label":"Info:"}},[n("use",{attrs:{"xlink:href":"#exclamation-triangle-fill"}})]),e._v(" "),e._m(8)])])]),e._v(" "),n("div",{staticClass:"row mb-5",attrs:{id:"ul-log-options"}},[e._m(9),e._v(" "),n("div",{staticClass:"col-lg-12"},[n("div",{staticClass:"table-responsive"},[n("table",{staticClass:"table table-striped table-bordered"},[e._m(10),e._v(" "),n("tbody",[n("tr",[n("td",{attrs:{valign:"top"}},[e._v("array")]),e._v(" "),n("td",{staticClass:"option-type",attrs:{valign:"top"}},[e._v("Array")]),e._v(" "),e._m(11),e._v(" "),n("td",{attrs:{valign:"top"}},[e._v("-")]),e._v(" "),n("td",{attrs:{valign:"top"}},[e._v(e._s(e.copy.array))])]),e._v(" "),n("tr",[n("td",{attrs:{valign:"top"}},[e._v("disabled")]),e._v(" "),n("td",{staticClass:"option-type",attrs:{valign:"top"}},[e._v("Boolean")]),e._v(" "),n("td",{staticClass:"boolean-style",attrs:{valign:"top"}},[e._v("false")]),e._v(" "),n("td",{attrs:{valign:"top"},domProps:{innerHTML:e._s(e.options.boolean)}}),e._v(" "),n("td",{attrs:{valign:"top"}},[e._v(e._s(e.copy.disabled))])]),e._v(" "),n("tr",[n("td",{attrs:{valign:"top"}},[e._v("logPrefix")]),e._v(" "),n("td",{staticClass:"option-type",attrs:{valign:"top"}},[e._v("Boolean | String")]),e._v(" "),n("td",{staticClass:"boolean-style",attrs:{valign:"top"}},[e._v("false")]),e._v(" "),n("td",{attrs:{valign:"top"}},[e._v("-")]),e._v(" "),n("td",{attrs:{valign:"top"}},[e._v(e._s(e.copy.logPrefix))])]),e._v(" "),n("tr",[n("td",{attrs:{valign:"top"}},[e._v("magical")]),e._v(" "),n("td",{staticClass:"option-type",attrs:{valign:"top"}},[e._v("Boolean")]),e._v(" "),n("td",{staticClass:"boolean-style",attrs:{valign:"top"}},[e._v("false")]),e._v(" "),n("td",{attrs:{valign:"top"},domProps:{innerHTML:e._s(e.options.boolean)}}),e._v(" "),n("td",{attrs:{valign:"top"}},[e._v(e._s(e.copy.magical))])]),e._v(" "),e._m(12),e._v(" "),n("tr",[n("td",{attrs:{valign:"top"}},[e._v("objects")]),e._v(" "),n("td",{staticClass:"option-type",attrs:{valign:"top"}},[e._v("Object")]),e._v(" "),e._m(13),e._v(" "),n("td",{attrs:{valign:"top"}},[e._v("-")]),e._v(" "),n("td",{attrs:{valign:"top"}},[e._v(e._s(e.copy.object))])]),e._v(" "),n("tr",[n("td",{attrs:{valign:"top"}},[e._v("styles")]),e._v(" "),n("td",{staticClass:"option-type",attrs:{valign:"top"}},[e._v("String | Array")]),e._v(" "),n("td",{attrs:{valign:"top"}},[e._v("-")]),e._v(" "),n("td",{attrs:{valign:"top"},domProps:{innerHTML:e._s(e.options.styles)}}),e._v(" "),n("td",{attrs:{valign:"top"}},[e._v(e._s(e.copy.styles))])]),e._v(" "),n("tr",[n("td",{attrs:{valign:"top"}},[e._v("text")]),e._v(" "),n("td",{staticClass:"option-type",attrs:{valign:"top"}},[e._v("String")]),e._v(" "),n("td",{attrs:{valign:"top"}},[e._v("🦄")]),e._v(" "),n("td",{attrs:{valign:"top"}},[e._v("-")]),e._v(" "),n("td",{attrs:{valign:"top"}},[e._v(e._s(e.copy.text))])]),e._v(" "),n("tr",[n("td",{attrs:{valign:"top"}},[e._v("type")]),e._v(" "),n("td",{staticClass:"option-type",attrs:{valign:"top"}},[e._v("String")]),e._v(" "),n("td",{attrs:{valign:"top"}},[e._v("log")]),e._v(" "),n("td",{attrs:{valign:"top"},domProps:{innerHTML:e._s(e.options.type)}}),e._v(" "),n("td",{attrs:{valign:"top"}},[e._v(e._s(e.copy.type))])])])])])])]),e._v(" "),e._m(14),e._v(" "),e._m(15),e._v(" "),n("div",{staticClass:"mb-5",attrs:{id:"ul-examples"}},[e._m(16),e._v(" "),n("SimpleExample",{attrs:{id:"simple-examples"}}),e._v(" "),n("TextExample",{attrs:{id:"text-examples"}}),e._v(" "),n("TypeExample",{attrs:{id:"type-examples"}}),e._v(" "),n("StylesExample",{attrs:{id:"styles-examples"}}),e._v(" "),n("DisabledExample",{attrs:{id:"disabled-examples"}}),e._v(" "),n("LogPrefixExample",{attrs:{id:"logPrefix-examples"}}),e._v(" "),n("MagicalExample",{attrs:{id:"magical-examples"}}),e._v(" "),n("LogPrefixExample",{attrs:{id:"name-examples",isNameOption:!0}}),e._v(" "),n("ObjectsExamples",{attrs:{id:"objects-examples"}}),e._v(" "),n("ArraysExample",{attrs:{id:"array-examples"}})],1),e._v(" "),e._m(17),e._v(" "),e._m(18),e._v(" "),e._m(19),e._v(" "),e._m(20)])],1)},o=[function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"container mb-5"},[n("div",{staticClass:"row mb-3"},[n("div",{staticClass:"col-12 text-center"},[n("h1",{staticClass:"rainbow-text"},[e._v("Vue Unicorn Log")])])]),e._v(" "),n("div",{staticClass:"row"},[n("div",{staticClass:"col-12 mb-4"},[n("h3",{staticClass:"text-center mb-4"},[e._v("\n\t\t\t\t\t\tA "),n("span",{staticClass:"rainbow-text"},[e._v("magical")]),e._v(" 🦄 plugin to make\n\t\t\t\t\t\tcoloring the console output easier and more flexible.\n\t\t\t\t\t")]),e._v(" "),n("p",[e._v("\n\t\t\t\t\t\tSometimes when building your application/site you don't want to see\n\t\t\t\t\t\tyour linter complaining about using console functions. This helps to\n\t\t\t\t\t\tkeep your linter happy so you can concentrate on writing bug free\n\t\t\t\t\t\tmagical code.\n\t\t\t\t\t")]),e._v(" "),n("p",[e._v("\n\t\t\t\t\t\tIt also has the ability to run the console functions depending on\n\t\t\t\t\t\tenvironment variables so you can keep your production site's console\n\t\t\t\t\t\tquiet.\n\t\t\t\t\t")])]),e._v(" "),n("div",{staticClass:"col-12"},[n("h5",[e._v("Demo")])]),e._v(" "),n("div",{staticClass:"col-12"},[e._v('\n\t\t\t\t\tOpen DevTools and click on the "Console" tab and try out some\n\t\t\t\t\t'),n("a",{attrs:{href:"#ul-examples"}},[e._v("Examples")]),e._v(".\n\t\t\t\t")])])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"col-12"},[n("h2",[e._v("Installation")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"col-12"},[n("h2",[e._v("Usage")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"col-12 mb-3"},[n("h2",[e._v("Plugin Options")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("thead",[n("tr",[n("th",[e._v("Name")]),e._v(" "),n("th",[e._v("Type")]),e._v(" "),n("th",[e._v("Default")]),e._v(" "),n("th",[e._v("Options")]),e._v(" "),n("th",[e._v("Description")])])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("td",{attrs:{valign:"top"}},[n("code",[n("pre",[e._v("const rainbowLinearGradient = `linear-gradient(to right,\n\thsl(0, 100%, 50%),\n\thsl(60, 100%, 50%),\n\thsl(120, 100%, 50%),\n\thsl(180, 100%, 50%),\n\thsl(240, 100%, 50%),\n\thsl(300, 100%, 50%),\n\thsl(360, 100%, 50%)\n)`;\n\ndefaultStyles: {\n\tlog: [\n\t\t'background-color: black',\n\t\t`border-image: ${rainbowLinearGradient} 1`,\n\t\t'border-style: solid',\n\t\t'border-width: 4px',\n\t\t'color: #fff',\n\t\t'font-weight: normal',\n\t\t'padding: 8px',\n\t],\n\tinfo: [\n\t\t'background-color: hsla(225, 100%, 8%, 1)',\n\t\t'box-shadow: 999px 0 0 hsla(225, 100%, 8%, 1)',\n\t\t'color: hsla(225, 100%, 85%, 1)',\n\t\t'display: block',\n\t\t'padding: 2px',\n\t],\n}")])])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("td",{attrs:{valign:"top"}},[n("code",[n("pre",[e._v("{\n\tlog: [],\n\tinfo: [],\n}")])])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"col-12"},[n("h5",[e._v("Overriding the plugin default options")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",[e._v("\n\t\t\t\t\t\t\tIt is recommended to set the "),n("code",[e._v("disabled")]),e._v(" option to use a\n\t\t\t\t\t\t\t"),n("span",{staticClass:"fst-italic"},[e._v(".env")]),e._v(" variable when possible. This\n\t\t\t\t\t\t\tway you will not have your logs exposed to the public when on a\n\t\t\t\t\t\t\tproduction site.\n\t\t\t\t\t\t")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"col-12 mb-3"},[n("h2",[e._v("Log Options")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("thead",[n("tr",[n("th",[e._v("Name")]),e._v(" "),n("th",[e._v("Type")]),e._v(" "),n("th",[e._v("Default")]),e._v(" "),n("th",[e._v("Options")]),e._v(" "),n("th",[e._v("Description")])])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("td",{attrs:{valign:"top"}},[n("code",[e._v("[]")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("tr",[n("td",{attrs:{valign:"top"}},[e._v("name")]),e._v(" "),n("td",{staticClass:"option-type",attrs:{valign:"top"}},[e._v("String")]),e._v(" "),n("td",{attrs:{valign:"top"}},[e._v("[UnicornLog]:")]),e._v(" "),n("td",{attrs:{valign:"top"}},[e._v("-")]),e._v(" "),n("td",{attrs:{valign:"top"}},[e._v("\n\t\t\t\t\t\t\t\t\t\tIf "),n("code",[e._v("logPrefix")]),e._v(" option is set as a\n\t\t\t\t\t\t\t\t\t\t"),n("span",{staticClass:"option-type"},[e._v("Boolean")]),e._v(" of\n\t\t\t\t\t\t\t\t\t\t"),n("span",{staticClass:"boolean-style"},[e._v("true")]),e._v(", it will use the\n\t\t\t\t\t\t\t\t\t\t"),n("code",[e._v("name")]),e._v(" option for the prefix.\n\t\t\t\t\t\t\t\t\t")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("td",{attrs:{valign:"top"}},[n("code",[e._v("{}")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"row mb-5",attrs:{id:"ul-instance-methods"}},[n("div",{staticClass:"col-12"},[n("h2",[e._v("Instance Methods")])]),e._v(" "),n("div",{staticClass:"col-12"},[e._v("\n\t\t\t\t\tThere are two instance methods available to use:\n\t\t\t\t\t"),n("br"),e._v(" "),n("code",[e._v("$unicornLog")]),e._v(" "),n("br"),e._v(" "),n("code",[e._v("$uniLog")])])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"row mb-5",attrs:{id:"ul-console-methods"}},[n("div",{staticClass:"col-12"},[n("h2",[e._v("Console Methods")])]),e._v(" "),n("div",{staticClass:"col-12"},[e._v("\n\t\t\t\t\tFor a description of the different log methods, refer to the\n\t\t\t\t\t"),n("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/API/console",target:"_blank"}},[e._v("Web APIs MDN")]),e._v("\n\t\t\t\t\tdeveloper documentation for console.\n\t\t\t\t")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"row"},[n("div",{staticClass:"col-12 mb-3"},[n("h2",[e._v("Examples")]),e._v(" "),n("p",{staticClass:"fst-italic"},[e._v('\n\t\t\t\t\t\t\tOpen DevTools and click on the "Console" tab to view example\n\t\t\t\t\t\t\tresults.\n\t\t\t\t\t\t')])])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"row mb-5",attrs:{id:"ul-dependencies"}},[n("div",{staticClass:"col-12"},[n("h2",[e._v("Dependencies")])]),e._v(" "),n("div",{staticClass:"col-xl-8 col-lg-12"},[n("a",{attrs:{href:"https://v2.vuejs.org/",target:"_blank"}},[e._v("Vue 2")])])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"row mb-5",attrs:{id:"ul-change-log"}},[n("div",{staticClass:"col-12"},[n("h2",[e._v("Change Log")])]),e._v(" "),n("div",{staticClass:"col-12"},[n("a",{attrs:{href:"https://github.com/webdevnerdstuff/vue-unicorn-log/blob/master/CHANGELOG.md",target:"_blank"}},[e._v("CHANGELOG.md")])])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"row mb-5",attrs:{id:"ul-license"}},[n("div",{staticClass:"col-12"},[n("h2",[e._v("License")])]),e._v(" "),n("div",{staticClass:"col-12"},[n("p",[e._v("\n\t\t\t\t\t\tCopyright © 2022 WebDevNerdStuff\n\t\t\t\t\t\t"),n("br"),e._v("\n\t\t\t\t\t\tLicensed under the MIT license.\n\t\t\t\t\t")]),e._v(" "),n("p",[n("a",{attrs:{href:"https://github.com/webdevnerdstuff/vue-unicorn-log/blob/master/LICENSE.md",target:"_blank"}},[e._v("\n\t\t\t\t\t\t\tLICENSE.md\n\t\t\t\t\t\t")])])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"row mb-5"},[t("div",{staticClass:"col-12 text-center"},[t("img",{attrs:{src:"images/vue-unicorn-log-social.jpg",alt:"Vue Unicorn Log by @WebDevNerdStuff"}})])])}];r._withStripped=!0},"../node_modules/vue-loader/lib/runtime/componentNormalizer.js":function(e,t,n){"use strict";function r(e,t,n,r,o,a,i,s){var l,c="function"==typeof e?e.options:e;if(t&&(c.render=t,c.staticRenderFns=n,c._compiled=!0),r&&(c.functional=!0),a&&(c._scopeId="data-v-"+a),i?(l=function(e){(e=e||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(e=__VUE_SSR_CONTEXT__),o&&o.call(this,e),e&&e._registeredComponents&&e._registeredComponents.add(i)},c._ssrRegister=l):o&&(l=s?function(){o.call(this,(c.functional?this.parent:this).$root.$options.shadowRoot)}:o),l)if(c.functional){c._injectStyles=l;var u=c.render;c.render=function(e,t){return l.call(t),u(e,t)}}else{var d=c.beforeCreate;c.beforeCreate=d?[].concat(d,l):[l]}return{exports:e,options:c}}n.r(t),n.d(t,{default:function(){return r}})},"../node_modules/vue-style-loader/index.js!../node_modules/css-loader/dist/cjs.js!../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../node_modules/sass-loader/dist/cjs.js??clonedRuleSet-3[0].rules[0].use[2]!../node_modules/vue-loader/lib/index.js??vue-loader-options!./docs/UnicornLog.vue?vue&type=style&index=0&lang=scss&":function(e,t,n){var r=n("../node_modules/css-loader/dist/cjs.js!../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../node_modules/sass-loader/dist/cjs.js??clonedRuleSet-3[0].rules[0].use[2]!../node_modules/vue-loader/lib/index.js??vue-loader-options!./docs/UnicornLog.vue?vue&type=style&index=0&lang=scss&");r.__esModule&&(r=r.default),"string"==typeof r&&(r=[[e.id,r,""]]),r.locals&&(e.exports=r.locals);(0,n("../node_modules/vue-style-loader/lib/addStylesClient.js").default)("1ef731c9",r,!1,{})},"../node_modules/vue-style-loader/lib/addStylesClient.js":function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return v}});var r=n("../node_modules/vue-style-loader/lib/listToStyles.js"),o="undefined"!=typeof document;if("undefined"!=typeof DEBUG&&DEBUG&&!o)throw new Error("vue-style-loader cannot be used in a non-browser environment. Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.");var a={},i=o&&(document.head||document.getElementsByTagName("head")[0]),s=null,l=0,c=!1,u=function(){},d=null,p="data-vue-ssr-id",f="undefined"!=typeof navigator&&/msie [6-9]\b/.test(navigator.userAgent.toLowerCase());function v(e,t,n,o){c=n,d=o||{};var i=(0,r.default)(e,t);return m(i),function(t){for(var n=[],o=0;o<i.length;o++){var s=i[o];(l=a[s.id]).refs--,n.push(l)}t?m(i=(0,r.default)(e,t)):i=[];for(o=0;o<n.length;o++){var l;if(0===(l=n[o]).refs){for(var c=0;c<l.parts.length;c++)l.parts[c]();delete a[l.id]}}}}function m(e){for(var t=0;t<e.length;t++){var n=e[t],r=a[n.id];if(r){r.refs++;for(var o=0;o<r.parts.length;o++)r.parts[o](n.parts[o]);for(;o<n.parts.length;o++)r.parts.push(h(n.parts[o]));r.parts.length>n.parts.length&&(r.parts.length=n.parts.length)}else{var i=[];for(o=0;o<n.parts.length;o++)i.push(h(n.parts[o]));a[n.id]={id:n.id,refs:1,parts:i}}}}function g(){var e=document.createElement("style");return e.type="text/css",i.appendChild(e),e}function h(e){var t,n,r=document.querySelector("style["+p+'~="'+e.id+'"]');if(r){if(c)return u;r.parentNode.removeChild(r)}if(f){var o=l++;r=s||(s=g()),t=_.bind(null,r,o,!1),n=_.bind(null,r,o,!0)}else r=g(),t=x.bind(null,r),n=function(){r.parentNode.removeChild(r)};return t(e),function(r){if(r){if(r.css===e.css&&r.media===e.media&&r.sourceMap===e.sourceMap)return;t(e=r)}else n()}}var b,y=(b=[],function(e,t){return b[e]=t,b.filter(Boolean).join("\n")});function _(e,t,n,r){var o=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=y(t,o);else{var a=document.createTextNode(o),i=e.childNodes;i[t]&&e.removeChild(i[t]),i.length?e.insertBefore(a,i[t]):e.appendChild(a)}}function x(e,t){var n=t.css,r=t.media,o=t.sourceMap;if(r&&e.setAttribute("media",r),d.ssrId&&e.setAttribute(p,t.id),o&&(n+="\n/*# sourceURL="+o.sources[0]+" */",n+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */"),e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}},"../node_modules/vue-style-loader/lib/listToStyles.js":function(e,t,n){"use strict";function r(e,t){for(var n=[],r={},o=0;o<t.length;o++){var a=t[o],i=a[0],s={id:e+":"+o,css:a[1],media:a[2],sourceMap:a[3]};r[i]?r[i].parts.push(s):n.push(r[i]={id:i,parts:[s]})}return n}n.r(t),n.d(t,{default:function(){return r}})},"../node_modules/vue/dist/vue.runtime.esm.js":function(e,t,n){"use strict";n.r(t);var r=Object.freeze({});function o(e){return null==e}function a(e){return null!=e}function i(e){return!0===e}function s(e){return"string"==typeof e||"number"==typeof e||"symbol"==typeof e||"boolean"==typeof e}function l(e){return null!==e&&"object"==typeof e}var c=Object.prototype.toString;function u(e){return c.call(e).slice(8,-1)}function d(e){return"[object Object]"===c.call(e)}function p(e){return"[object RegExp]"===c.call(e)}function f(e){var t=parseFloat(String(e));return t>=0&&Math.floor(t)===t&&isFinite(e)}function v(e){return a(e)&&"function"==typeof e.then&&"function"==typeof e.catch}function m(e){return null==e?"":Array.isArray(e)||d(e)&&e.toString===c?JSON.stringify(e,null,2):String(e)}function g(e){var t=parseFloat(e);return isNaN(t)?e:t}function h(e,t){for(var n=Object.create(null),r=e.split(","),o=0;o<r.length;o++)n[r[o]]=!0;return t?function(e){return n[e.toLowerCase()]}:function(e){return n[e]}}var b=h("slot,component",!0),y=h("key,ref,slot,slot-scope,is");function _(e,t){if(e.length){var n=e.indexOf(t);if(n>-1)return e.splice(n,1)}}var x=Object.prototype.hasOwnProperty;function w(e,t){return x.call(e,t)}function A(e){var t=Object.create(null);return function(n){return t[n]||(t[n]=e(n))}}var C=/-(\w)/g,k=A((function(e){return e.replace(C,(function(e,t){return t?t.toUpperCase():""}))})),j=A((function(e){return e.charAt(0).toUpperCase()+e.slice(1)})),E=/\B([A-Z])/g,S=A((function(e){return e.replace(E,"-$1").toLowerCase()}));var O=Function.prototype.bind?function(e,t){return e.bind(t)}:function(e,t){function n(n){var r=arguments.length;return r?r>1?e.apply(t,arguments):e.call(t,n):e.call(t)}return n._length=e.length,n};function L(e,t){t=t||0;for(var n=e.length-t,r=new Array(n);n--;)r[n]=e[n+t];return r}function q(e,t){for(var n in t)e[n]=t[n];return e}function D(e){for(var t={},n=0;n<e.length;n++)e[n]&&q(t,e[n]);return t}function T(e,t,n){}var $=function(e,t,n){return!1},N=function(e){return e};function R(e,t){if(e===t)return!0;var n=l(e),r=l(t);if(!n||!r)return!n&&!r&&String(e)===String(t);try{var o=Array.isArray(e),a=Array.isArray(t);if(o&&a)return e.length===t.length&&e.every((function(e,n){return R(e,t[n])}));if(e instanceof Date&&t instanceof Date)return e.getTime()===t.getTime();if(o||a)return!1;var i=Object.keys(e),s=Object.keys(t);return i.length===s.length&&i.every((function(n){return R(e[n],t[n])}))}catch(e){return!1}}function P(e,t){for(var n=0;n<e.length;n++)if(R(e[n],t))return n;return-1}function F(e){var t=!1;return function(){t||(t=!0,e.apply(this,arguments))}}var B="data-server-rendered",U=["component","directive","filter"],I=["beforeCreate","created","beforeMount","mounted","beforeUpdate","updated","beforeDestroy","destroyed","activated","deactivated","errorCaptured","serverPrefetch"],M={optionMergeStrategies:Object.create(null),silent:!1,productionTip:!0,devtools:!0,performance:!1,errorHandler:null,warnHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:$,isReservedAttr:$,isUnknownElement:$,getTagNamespace:T,parsePlatformTagName:N,mustUseProp:$,async:!0,_lifecycleHooks:I},H=/a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;function V(e){var t=(e+"").charCodeAt(0);return 36===t||95===t}function z(e,t,n,r){Object.defineProperty(e,t,{value:n,enumerable:!!r,writable:!0,configurable:!0})}var W=new RegExp("[^"+H.source+".$_\\d]");var G,Y="__proto__"in{},Z="undefined"!=typeof window,J="undefined"!=typeof WXEnvironment&&!!WXEnvironment.platform,K=J&&WXEnvironment.platform.toLowerCase(),X=Z&&window.navigator.userAgent.toLowerCase(),Q=X&&/msie|trident/.test(X),ee=X&&X.indexOf("msie 9.0")>0,te=X&&X.indexOf("edge/")>0,ne=(X&&X.indexOf("android"),X&&/iphone|ipad|ipod|ios/.test(X)||"ios"===K),re=(X&&/chrome\/\d+/.test(X),X&&/phantomjs/.test(X),X&&X.match(/firefox\/(\d+)/)),oe={}.watch,ae=!1;if(Z)try{var ie={};Object.defineProperty(ie,"passive",{get:function(){ae=!0}}),window.addEventListener("test-passive",null,ie)}catch(e){}var se=function(){return void 0===G&&(G=!Z&&!J&&void 0!==n.g&&(n.g.process&&"server"===n.g.process.env.VUE_ENV)),G},le=Z&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__;function ce(e){return"function"==typeof e&&/native code/.test(e.toString())}var ue,de="undefined"!=typeof Symbol&&ce(Symbol)&&"undefined"!=typeof Reflect&&ce(Reflect.ownKeys);ue="undefined"!=typeof Set&&ce(Set)?Set:function(){function e(){this.set=Object.create(null)}return e.prototype.has=function(e){return!0===this.set[e]},e.prototype.add=function(e){this.set[e]=!0},e.prototype.clear=function(){this.set=Object.create(null)},e}();var pe=T,fe=T,ve=T,me=T,ge="undefined"!=typeof console,he=/(?:^|[-_])(\w)/g;pe=function(e,t){var n=t?ve(t):"";M.warnHandler?M.warnHandler.call(null,e,t,n):ge&&!M.silent&&console.error("[Vue warn]: "+e+n)},fe=function(e,t){ge&&!M.silent&&console.warn("[Vue tip]: "+e+(t?ve(t):""))},me=function(e,t){if(e.$root===e)return"<Root>";var n="function"==typeof e&&null!=e.cid?e.options:e._isVue?e.$options||e.constructor.options:e,r=n.name||n._componentTag,o=n.__file;if(!r&&o){var a=o.match(/([^/\\]+)\.vue$/);r=a&&a[1]}return(r?"<"+(r.replace(he,(function(e){return e.toUpperCase()})).replace(/[-_]/g,"")+">"):"<Anonymous>")+(o&&!1!==t?" at "+o:"")};ve=function(e){if(e._isVue&&e.$parent){for(var t=[],n=0;e;){if(t.length>0){var r=t[t.length-1];if(r.constructor===e.constructor){n++,e=e.$parent;continue}n>0&&(t[t.length-1]=[r,n],n=0)}t.push(e),e=e.$parent}return"\n\nfound in\n\n"+t.map((function(e,t){return""+(0===t?"---\x3e ":function(e,t){for(var n="";t;)t%2==1&&(n+=e),t>1&&(e+=e),t>>=1;return n}(" ",5+2*t))+(Array.isArray(e)?me(e[0])+"... ("+e[1]+" recursive calls)":me(e))})).join("\n")}return"\n\n(found in "+me(e)+")"};var be=0,ye=function(){this.id=be++,this.subs=[]};ye.prototype.addSub=function(e){this.subs.push(e)},ye.prototype.removeSub=function(e){_(this.subs,e)},ye.prototype.depend=function(){ye.target&&ye.target.addDep(this)},ye.prototype.notify=function(){var e=this.subs.slice();M.async||e.sort((function(e,t){return e.id-t.id}));for(var t=0,n=e.length;t<n;t++)e[t].update()},ye.target=null;var _e=[];function xe(e){_e.push(e),ye.target=e}function we(){_e.pop(),ye.target=_e[_e.length-1]}var Ae=function(e,t,n,r,o,a,i,s){this.tag=e,this.data=t,this.children=n,this.text=r,this.elm=o,this.ns=void 0,this.context=a,this.fnContext=void 0,this.fnOptions=void 0,this.fnScopeId=void 0,this.key=t&&t.key,this.componentOptions=i,this.componentInstance=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1,this.asyncFactory=s,this.asyncMeta=void 0,this.isAsyncPlaceholder=!1},Ce={child:{configurable:!0}};Ce.child.get=function(){return this.componentInstance},Object.defineProperties(Ae.prototype,Ce);var ke=function(e){void 0===e&&(e="");var t=new Ae;return t.text=e,t.isComment=!0,t};function je(e){return new Ae(void 0,void 0,void 0,String(e))}function Ee(e){var t=new Ae(e.tag,e.data,e.children&&e.children.slice(),e.text,e.elm,e.context,e.componentOptions,e.asyncFactory);return t.ns=e.ns,t.isStatic=e.isStatic,t.key=e.key,t.isComment=e.isComment,t.fnContext=e.fnContext,t.fnOptions=e.fnOptions,t.fnScopeId=e.fnScopeId,t.asyncMeta=e.asyncMeta,t.isCloned=!0,t}var Se=Array.prototype,Oe=Object.create(Se);["push","pop","shift","unshift","splice","sort","reverse"].forEach((function(e){var t=Se[e];z(Oe,e,(function(){for(var n=[],r=arguments.length;r--;)n[r]=arguments[r];var o,a=t.apply(this,n),i=this.__ob__;switch(e){case"push":case"unshift":o=n;break;case"splice":o=n.slice(2)}return o&&i.observeArray(o),i.dep.notify(),a}))}));var Le=Object.getOwnPropertyNames(Oe),qe=!0;function De(e){qe=e}var Te=function(e){this.value=e,this.dep=new ye,this.vmCount=0,z(e,"__ob__",this),Array.isArray(e)?(Y?function(e,t){e.__proto__=t}(e,Oe):function(e,t,n){for(var r=0,o=n.length;r<o;r++){var a=n[r];z(e,a,t[a])}}(e,Oe,Le),this.observeArray(e)):this.walk(e)};function $e(e,t){var n;if(l(e)&&!(e instanceof Ae))return w(e,"__ob__")&&e.__ob__ instanceof Te?n=e.__ob__:qe&&!se()&&(Array.isArray(e)||d(e))&&Object.isExtensible(e)&&!e._isVue&&(n=new Te(e)),t&&n&&n.vmCount++,n}function Ne(e,t,n,r,o){var a=new ye,i=Object.getOwnPropertyDescriptor(e,t);if(!i||!1!==i.configurable){var s=i&&i.get,l=i&&i.set;s&&!l||2!==arguments.length||(n=e[t]);var c=!o&&$e(n);Object.defineProperty(e,t,{enumerable:!0,configurable:!0,get:function(){var t=s?s.call(e):n;return ye.target&&(a.depend(),c&&(c.dep.depend(),Array.isArray(t)&&Fe(t))),t},set:function(t){var i=s?s.call(e):n;t===i||t!=t&&i!=i||(r&&r(),s&&!l||(l?l.call(e,t):n=t,c=!o&&$e(t),a.notify()))}})}}function Re(e,t,n){if((o(e)||s(e))&&pe("Cannot set reactive property on undefined, null, or primitive value: "+e),Array.isArray(e)&&f(t))return e.length=Math.max(e.length,t),e.splice(t,1,n),n;if(t in e&&!(t in Object.prototype))return e[t]=n,n;var r=e.__ob__;return e._isVue||r&&r.vmCount?(pe("Avoid adding reactive properties to a Vue instance or its root $data at runtime - declare it upfront in the data option."),n):r?(Ne(r.value,t,n),r.dep.notify(),n):(e[t]=n,n)}function Pe(e,t){if((o(e)||s(e))&&pe("Cannot delete reactive property on undefined, null, or primitive value: "+e),Array.isArray(e)&&f(t))e.splice(t,1);else{var n=e.__ob__;e._isVue||n&&n.vmCount?pe("Avoid deleting properties on a Vue instance or its root $data - just set it to null."):w(e,t)&&(delete e[t],n&&n.dep.notify())}}function Fe(e){for(var t=void 0,n=0,r=e.length;n<r;n++)(t=e[n])&&t.__ob__&&t.__ob__.dep.depend(),Array.isArray(t)&&Fe(t)}Te.prototype.walk=function(e){for(var t=Object.keys(e),n=0;n<t.length;n++)Ne(e,t[n])},Te.prototype.observeArray=function(e){for(var t=0,n=e.length;t<n;t++)$e(e[t])};var Be=M.optionMergeStrategies;function Ue(e,t){if(!t)return e;for(var n,r,o,a=de?Reflect.ownKeys(t):Object.keys(t),i=0;i<a.length;i++)"__ob__"!==(n=a[i])&&(r=e[n],o=t[n],w(e,n)?r!==o&&d(r)&&d(o)&&Ue(r,o):Re(e,n,o));return e}function Ie(e,t,n){return n?function(){var r="function"==typeof t?t.call(n,n):t,o="function"==typeof e?e.call(n,n):e;return r?Ue(r,o):o}:t?e?function(){return Ue("function"==typeof t?t.call(this,this):t,"function"==typeof e?e.call(this,this):e)}:t:e}function Me(e,t){var n=t?e?e.concat(t):Array.isArray(t)?t:[t]:e;return n?function(e){for(var t=[],n=0;n<e.length;n++)-1===t.indexOf(e[n])&&t.push(e[n]);return t}(n):n}function He(e,t,n,r){var o=Object.create(e||null);return t?(We(r,t,n),q(o,t)):o}Be.el=Be.propsData=function(e,t,n,r){return n||pe('option "'+r+'" can only be used during instance creation with the `new` keyword.'),Ve(e,t)},Be.data=function(e,t,n){return n?Ie(e,t,n):t&&"function"!=typeof t?(pe('The "data" option should be a function that returns a per-instance value in component definitions.',n),e):Ie(e,t)},I.forEach((function(e){Be[e]=Me})),U.forEach((function(e){Be[e+"s"]=He})),Be.watch=function(e,t,n,r){if(e===oe&&(e=void 0),t===oe&&(t=void 0),!t)return Object.create(e||null);if(We(r,t,n),!e)return t;var o={};for(var a in q(o,e),t){var i=o[a],s=t[a];i&&!Array.isArray(i)&&(i=[i]),o[a]=i?i.concat(s):Array.isArray(s)?s:[s]}return o},Be.props=Be.methods=Be.inject=Be.computed=function(e,t,n,r){if(t&&We(r,t,n),!e)return t;var o=Object.create(null);return q(o,e),t&&q(o,t),o},Be.provide=Ie;var Ve=function(e,t){return void 0===t?e:t};function ze(e){new RegExp("^[a-zA-Z][\\-\\.0-9_"+H.source+"]*$").test(e)||pe('Invalid component name: "'+e+'". Component names should conform to valid custom element name in html5 specification.'),(b(e)||M.isReservedTag(e))&&pe("Do not use built-in or reserved HTML elements as component id: "+e)}function We(e,t,n){d(t)||pe('Invalid value for option "'+e+'": expected an Object, but got '+u(t)+".",n)}function Ge(e,t,n){if(function(e){for(var t in e.components)ze(t)}(t),"function"==typeof t&&(t=t.options),function(e,t){var n=e.props;if(n){var r,o,a={};if(Array.isArray(n))for(r=n.length;r--;)"string"==typeof(o=n[r])?a[k(o)]={type:null}:pe("props must be strings when using array syntax.");else if(d(n))for(var i in n)o=n[i],a[k(i)]=d(o)?o:{type:o};else pe('Invalid value for option "props": expected an Array or an Object, but got '+u(n)+".",t);e.props=a}}(t,n),function(e,t){var n=e.inject;if(n){var r=e.inject={};if(Array.isArray(n))for(var o=0;o<n.length;o++)r[n[o]]={from:n[o]};else if(d(n))for(var a in n){var i=n[a];r[a]=d(i)?q({from:a},i):{from:i}}else pe('Invalid value for option "inject": expected an Array or an Object, but got '+u(n)+".",t)}}(t,n),function(e){var t=e.directives;if(t)for(var n in t){var r=t[n];"function"==typeof r&&(t[n]={bind:r,update:r})}}(t),!t._base&&(t.extends&&(e=Ge(e,t.extends,n)),t.mixins))for(var r=0,o=t.mixins.length;r<o;r++)e=Ge(e,t.mixins[r],n);var a,i={};for(a in e)s(a);for(a in t)w(e,a)||s(a);function s(r){var o=Be[r]||Ve;i[r]=o(e[r],t[r],n,r)}return i}function Ye(e,t,n,r){if("string"==typeof n){var o=e[t];if(w(o,n))return o[n];var a=k(n);if(w(o,a))return o[a];var i=j(a);if(w(o,i))return o[i];var s=o[n]||o[a]||o[i];return r&&!s&&pe("Failed to resolve "+t.slice(0,-1)+": "+n,e),s}}function Ze(e,t,n,r){var o=t[e],a=!w(n,e),i=n[e],s=tt(Boolean,o.type);if(s>-1)if(a&&!w(o,"default"))i=!1;else if(""===i||i===S(e)){var c=tt(String,o.type);(c<0||s<c)&&(i=!0)}if(void 0===i){i=function(e,t,n){if(!w(t,"default"))return;var r=t.default;l(r)&&pe('Invalid default value for prop "'+n+'": Props with type Object/Array must use a factory function to return the default value.',e);if(e&&e.$options.propsData&&void 0===e.$options.propsData[n]&&void 0!==e._props[n])return e._props[n];return"function"==typeof r&&"Function"!==Qe(t.type)?r.call(e):r}(r,o,e);var d=qe;De(!0),$e(i),De(d)}return function(e,t,n,r,o){if(e.required&&o)return void pe('Missing required prop: "'+t+'"',r);if(null==n&&!e.required)return;var a=e.type,i=!a||!0===a,s=[];if(a){Array.isArray(a)||(a=[a]);for(var l=0;l<a.length&&!i;l++){var c=Ke(n,a[l],r);s.push(c.expectedType||""),i=c.valid}}var d=s.some((function(e){return e}));if(!i&&d)return void pe(function(e,t,n){var r='Invalid prop: type check failed for prop "'+e+'". Expected '+n.map(j).join(", "),o=n[0],a=u(t);1===n.length&&ot(o)&&ot(typeof t)&&!function(){var e=[],t=arguments.length;for(;t--;)e[t]=arguments[t];return e.some((function(e){return"boolean"===e.toLowerCase()}))}(o,a)&&(r+=" with value "+nt(t,o));r+=", got "+a+" ",ot(a)&&(r+="with value "+nt(t,a)+".");return r}(t,n,s),r);var p=e.validator;p&&(p(n)||pe('Invalid prop: custom validator check failed for prop "'+t+'".',r))}(o,e,i,r,a),i}var Je=/^(String|Number|Boolean|Function|Symbol|BigInt)$/;function Ke(e,t,n){var r,o=Qe(t);if(Je.test(o)){var a=typeof e;(r=a===o.toLowerCase())||"object"!==a||(r=e instanceof t)}else if("Object"===o)r=d(e);else if("Array"===o)r=Array.isArray(e);else try{r=e instanceof t}catch(e){pe('Invalid prop type: "'+String(t)+'" is not a constructor',n),r=!1}return{valid:r,expectedType:o}}var Xe=/^\s*function (\w+)/;function Qe(e){var t=e&&e.toString().match(Xe);return t?t[1]:""}function et(e,t){return Qe(e)===Qe(t)}function tt(e,t){if(!Array.isArray(t))return et(t,e)?0:-1;for(var n=0,r=t.length;n<r;n++)if(et(t[n],e))return n;return-1}function nt(e,t){return"String"===t?'"'+e+'"':"Number"===t?""+Number(e):""+e}var rt=["string","number","boolean"];function ot(e){return rt.some((function(t){return e.toLowerCase()===t}))}function at(e,t,n){xe();try{if(t)for(var r=t;r=r.$parent;){var o=r.$options.errorCaptured;if(o)for(var a=0;a<o.length;a++)try{if(!1===o[a].call(r,e,t,n))return}catch(e){st(e,r,"errorCaptured hook")}}st(e,t,n)}finally{we()}}function it(e,t,n,r,o){var a;try{(a=n?e.apply(t,n):e.call(t))&&!a._isVue&&v(a)&&!a._handled&&(a.catch((function(e){return at(e,r,o+" (Promise/async)")})),a._handled=!0)}catch(e){at(e,r,o)}return a}function st(e,t,n){if(M.errorHandler)try{return M.errorHandler.call(null,e,t,n)}catch(t){t!==e&&lt(t,null,"config.errorHandler")}lt(e,t,n)}function lt(e,t,n){if(pe("Error in "+n+': "'+e.toString()+'"',t),!Z&&!J||"undefined"==typeof console)throw e;console.error(e)}var ct,ut,dt=!1,pt=[],ft=!1;function vt(){ft=!1;var e=pt.slice(0);pt.length=0;for(var t=0;t<e.length;t++)e[t]()}if("undefined"!=typeof Promise&&ce(Promise)){var mt=Promise.resolve();ct=function(){mt.then(vt),ne&&setTimeout(T)},dt=!0}else if(Q||"undefined"==typeof MutationObserver||!ce(MutationObserver)&&"[object MutationObserverConstructor]"!==MutationObserver.toString())ct="undefined"!=typeof setImmediate&&ce(setImmediate)?function(){setImmediate(vt)}:function(){setTimeout(vt,0)};else{var gt=1,ht=new MutationObserver(vt),bt=document.createTextNode(String(gt));ht.observe(bt,{characterData:!0}),ct=function(){gt=(gt+1)%2,bt.data=String(gt)},dt=!0}function yt(e,t){var n;if(pt.push((function(){if(e)try{e.call(t)}catch(e){at(e,t,"nextTick")}else n&&n(t)})),ft||(ft=!0,ct()),!e&&"undefined"!=typeof Promise)return new Promise((function(e){n=e}))}var _t=h("Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,BigInt,require"),xt=function(e,t){pe('Property or method "'+t+'" is not defined on the instance but referenced during render. Make sure that this property is reactive, either in the data option, or for class-based components, by initializing the property. See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.',e)},wt=function(e,t){pe('Property "'+t+'" must be accessed with "$data.'+t+'" because properties starting with "$" or "_" are not proxied in the Vue instance to prevent conflicts with Vue internals. See: https://vuejs.org/v2/api/#data',e)},At="undefined"!=typeof Proxy&&ce(Proxy);if(At){var Ct=h("stop,prevent,self,ctrl,shift,alt,meta,exact");M.keyCodes=new Proxy(M.keyCodes,{set:function(e,t,n){return Ct(t)?(pe("Avoid overwriting built-in modifier in config.keyCodes: ."+t),!1):(e[t]=n,!0)}})}var kt={has:function(e,t){var n=t in e,r=_t(t)||"string"==typeof t&&"_"===t.charAt(0)&&!(t in e.$data);return n||r||(t in e.$data?wt(e,t):xt(e,t)),n||!r}},jt={get:function(e,t){return"string"!=typeof t||t in e||(t in e.$data?wt(e,t):xt(e,t)),e[t]}};ut=function(e){if(At){var t=e.$options,n=t.render&&t.render._withStripped?jt:kt;e._renderProxy=new Proxy(e,n)}else e._renderProxy=e};var Et,St,Ot=new ue;function Lt(e){qt(e,Ot),Ot.clear()}function qt(e,t){var n,r,o=Array.isArray(e);if(!(!o&&!l(e)||Object.isFrozen(e)||e instanceof Ae)){if(e.__ob__){var a=e.__ob__.dep.id;if(t.has(a))return;t.add(a)}if(o)for(n=e.length;n--;)qt(e[n],t);else for(n=(r=Object.keys(e)).length;n--;)qt(e[r[n]],t)}}var Dt=Z&&window.performance;Dt&&Dt.mark&&Dt.measure&&Dt.clearMarks&&Dt.clearMeasures&&(Et=function(e){return Dt.mark(e)},St=function(e,t,n){Dt.measure(e,t,n),Dt.clearMarks(t),Dt.clearMarks(n)});var Tt=A((function(e){var t="&"===e.charAt(0),n="~"===(e=t?e.slice(1):e).charAt(0),r="!"===(e=n?e.slice(1):e).charAt(0);return{name:e=r?e.slice(1):e,once:n,capture:r,passive:t}}));function $t(e,t){function n(){var e=arguments,r=n.fns;if(!Array.isArray(r))return it(r,null,arguments,t,"v-on handler");for(var o=r.slice(),a=0;a<o.length;a++)it(o[a],null,e,t,"v-on handler")}return n.fns=e,n}function Nt(e,t,n,r,a,s){var l,c,u,d;for(l in e)c=e[l],u=t[l],d=Tt(l),o(c)?pe('Invalid handler for event "'+d.name+'": got '+String(c),s):o(u)?(o(c.fns)&&(c=e[l]=$t(c,s)),i(d.once)&&(c=e[l]=a(d.name,c,d.capture)),n(d.name,c,d.capture,d.passive,d.params)):c!==u&&(u.fns=c,e[l]=u);for(l in t)o(e[l])&&r((d=Tt(l)).name,t[l],d.capture)}function Rt(e,t,n){var r;e instanceof Ae&&(e=e.data.hook||(e.data.hook={}));var s=e[t];function l(){n.apply(this,arguments),_(r.fns,l)}o(s)?r=$t([l]):a(s.fns)&&i(s.merged)?(r=s).fns.push(l):r=$t([s,l]),r.merged=!0,e[t]=r}function Pt(e,t,n,r,o){if(a(t)){if(w(t,n))return e[n]=t[n],o||delete t[n],!0;if(w(t,r))return e[n]=t[r],o||delete t[r],!0}return!1}function Ft(e){return s(e)?[je(e)]:Array.isArray(e)?Ut(e):void 0}function Bt(e){return a(e)&&a(e.text)&&!1===e.isComment}function Ut(e,t){var n,r,l,c,u=[];for(n=0;n<e.length;n++)o(r=e[n])||"boolean"==typeof r||(c=u[l=u.length-1],Array.isArray(r)?r.length>0&&(Bt((r=Ut(r,(t||"")+"_"+n))[0])&&Bt(c)&&(u[l]=je(c.text+r[0].text),r.shift()),u.push.apply(u,r)):s(r)?Bt(c)?u[l]=je(c.text+r):""!==r&&u.push(je(r)):Bt(r)&&Bt(c)?u[l]=je(c.text+r.text):(i(e._isVList)&&a(r.tag)&&o(r.key)&&a(t)&&(r.key="__vlist"+t+"_"+n+"__"),u.push(r)));return u}function It(e,t){if(e){for(var n=Object.create(null),r=de?Reflect.ownKeys(e):Object.keys(e),o=0;o<r.length;o++){var a=r[o];if("__ob__"!==a){for(var i=e[a].from,s=t;s;){if(s._provided&&w(s._provided,i)){n[a]=s._provided[i];break}s=s.$parent}if(!s)if("default"in e[a]){var l=e[a].default;n[a]="function"==typeof l?l.call(t):l}else pe('Injection "'+a+'" not found',t)}}return n}}function Mt(e,t){if(!e||!e.length)return{};for(var n={},r=0,o=e.length;r<o;r++){var a=e[r],i=a.data;if(i&&i.attrs&&i.attrs.slot&&delete i.attrs.slot,a.context!==t&&a.fnContext!==t||!i||null==i.slot)(n.default||(n.default=[])).push(a);else{var s=i.slot,l=n[s]||(n[s]=[]);"template"===a.tag?l.push.apply(l,a.children||[]):l.push(a)}}for(var c in n)n[c].every(Ht)&&delete n[c];return n}function Ht(e){return e.isComment&&!e.asyncFactory||" "===e.text}function Vt(e){return e.isComment&&e.asyncFactory}function zt(e,t,n){var o,a=Object.keys(t).length>0,i=e?!!e.$stable:!a,s=e&&e.$key;if(e){if(e._normalized)return e._normalized;if(i&&n&&n!==r&&s===n.$key&&!a&&!n.$hasNormal)return n;for(var l in o={},e)e[l]&&"$"!==l[0]&&(o[l]=Wt(t,l,e[l]))}else o={};for(var c in t)c in o||(o[c]=Gt(t,c));return e&&Object.isExtensible(e)&&(e._normalized=o),z(o,"$stable",i),z(o,"$key",s),z(o,"$hasNormal",a),o}function Wt(e,t,n){var r=function(){var e=arguments.length?n.apply(null,arguments):n({}),t=(e=e&&"object"==typeof e&&!Array.isArray(e)?[e]:Ft(e))&&e[0];return e&&(!t||1===e.length&&t.isComment&&!Vt(t))?void 0:e};return n.proxy&&Object.defineProperty(e,t,{get:r,enumerable:!0,configurable:!0}),r}function Gt(e,t){return function(){return e[t]}}function Yt(e,t){var n,r,o,i,s;if(Array.isArray(e)||"string"==typeof e)for(n=new Array(e.length),r=0,o=e.length;r<o;r++)n[r]=t(e[r],r);else if("number"==typeof e)for(n=new Array(e),r=0;r<e;r++)n[r]=t(r+1,r);else if(l(e))if(de&&e[Symbol.iterator]){n=[];for(var c=e[Symbol.iterator](),u=c.next();!u.done;)n.push(t(u.value,n.length)),u=c.next()}else for(i=Object.keys(e),n=new Array(i.length),r=0,o=i.length;r<o;r++)s=i[r],n[r]=t(e[s],s,r);return a(n)||(n=[]),n._isVList=!0,n}function Zt(e,t,n,r){var o,a=this.$scopedSlots[e];a?(n=n||{},r&&(l(r)||pe("slot v-bind without argument expects an Object",this),n=q(q({},r),n)),o=a(n)||("function"==typeof t?t():t)):o=this.$slots[e]||("function"==typeof t?t():t);var i=n&&n.slot;return i?this.$createElement("template",{slot:i},o):o}function Jt(e){return Ye(this.$options,"filters",e,!0)||N}function Kt(e,t){return Array.isArray(e)?-1===e.indexOf(t):e!==t}function Xt(e,t,n,r,o){var a=M.keyCodes[t]||n;return o&&r&&!M.keyCodes[t]?Kt(o,r):a?Kt(a,e):r?S(r)!==t:void 0===e}function Qt(e,t,n,r,o){if(n)if(l(n)){var a;Array.isArray(n)&&(n=D(n));var i=function(i){if("class"===i||"style"===i||y(i))a=e;else{var s=e.attrs&&e.attrs.type;a=r||M.mustUseProp(t,s,i)?e.domProps||(e.domProps={}):e.attrs||(e.attrs={})}var l=k(i),c=S(i);l in a||c in a||(a[i]=n[i],o&&((e.on||(e.on={}))["update:"+i]=function(e){n[i]=e}))};for(var s in n)i(s)}else pe("v-bind without argument expects an Object or Array value",this);return e}function en(e,t){var n=this._staticTrees||(this._staticTrees=[]),r=n[e];return r&&!t||nn(r=n[e]=this.$options.staticRenderFns[e].call(this._renderProxy,null,this),"__static__"+e,!1),r}function tn(e,t,n){return nn(e,"__once__"+t+(n?"_"+n:""),!0),e}function nn(e,t,n){if(Array.isArray(e))for(var r=0;r<e.length;r++)e[r]&&"string"!=typeof e[r]&&rn(e[r],t+"_"+r,n);else rn(e,t,n)}function rn(e,t,n){e.isStatic=!0,e.key=t,e.isOnce=n}function on(e,t){if(t)if(d(t)){var n=e.on=e.on?q({},e.on):{};for(var r in t){var o=n[r],a=t[r];n[r]=o?[].concat(o,a):a}}else pe("v-on without argument expects an Object value",this);return e}function an(e,t,n,r){t=t||{$stable:!n};for(var o=0;o<e.length;o++){var a=e[o];Array.isArray(a)?an(a,t,n):a&&(a.proxy&&(a.fn.proxy=!0),t[a.key]=a.fn)}return r&&(t.$key=r),t}function sn(e,t){for(var n=0;n<t.length;n+=2){var r=t[n];"string"==typeof r&&r?e[t[n]]=t[n+1]:""!==r&&null!==r&&pe("Invalid value for dynamic directive argument (expected string or null): "+r,this)}return e}function ln(e,t){return"string"==typeof e?t+e:e}function cn(e){e._o=tn,e._n=g,e._s=m,e._l=Yt,e._t=Zt,e._q=R,e._i=P,e._m=en,e._f=Jt,e._k=Xt,e._b=Qt,e._v=je,e._e=ke,e._u=an,e._g=on,e._d=sn,e._p=ln}function un(e,t,n,o,a){var s,l=this,c=a.options;w(o,"_uid")?(s=Object.create(o))._original=o:(s=o,o=o._original);var u=i(c._compiled),d=!u;this.data=e,this.props=t,this.children=n,this.parent=o,this.listeners=e.on||r,this.injections=It(c.inject,o),this.slots=function(){return l.$slots||zt(e.scopedSlots,l.$slots=Mt(n,o)),l.$slots},Object.defineProperty(this,"scopedSlots",{enumerable:!0,get:function(){return zt(e.scopedSlots,this.slots())}}),u&&(this.$options=c,this.$slots=this.slots(),this.$scopedSlots=zt(e.scopedSlots,this.$slots)),c._scopeId?this._c=function(e,t,n,r){var a=hn(s,e,t,n,r,d);return a&&!Array.isArray(a)&&(a.fnScopeId=c._scopeId,a.fnContext=o),a}:this._c=function(e,t,n,r){return hn(s,e,t,n,r,d)}}function dn(e,t,n,r,o){var a=Ee(e);return a.fnContext=n,a.fnOptions=r,(a.devtoolsMeta=a.devtoolsMeta||{}).renderContext=o,t.slot&&((a.data||(a.data={})).slot=t.slot),a}function pn(e,t){for(var n in t)e[k(n)]=t[n]}cn(un.prototype);var fn={init:function(e,t){if(e.componentInstance&&!e.componentInstance._isDestroyed&&e.data.keepAlive){var n=e;fn.prepatch(n,n)}else{(e.componentInstance=function(e,t){var n={_isComponent:!0,_parentVnode:e,parent:t},r=e.data.inlineTemplate;a(r)&&(n.render=r.render,n.staticRenderFns=r.staticRenderFns);return new e.componentOptions.Ctor(n)}(e,En)).$mount(t?e.elm:void 0,t)}},prepatch:function(e,t){var n=t.componentOptions;!function(e,t,n,o,a){Sn=!0;var i=o.data.scopedSlots,s=e.$scopedSlots,l=!!(i&&!i.$stable||s!==r&&!s.$stable||i&&e.$scopedSlots.$key!==i.$key||!i&&e.$scopedSlots.$key),c=!!(a||e.$options._renderChildren||l);e.$options._parentVnode=o,e.$vnode=o,e._vnode&&(e._vnode.parent=o);if(e.$options._renderChildren=a,e.$attrs=o.data.attrs||r,e.$listeners=n||r,t&&e.$options.props){De(!1);for(var u=e._props,d=e.$options._propKeys||[],p=0;p<d.length;p++){var f=d[p],v=e.$options.props;u[f]=Ze(f,v,t,e)}De(!0),e.$options.propsData=t}n=n||r;var m=e.$options._parentListeners;e.$options._parentListeners=n,jn(e,n,m),c&&(e.$slots=Mt(a,o.context),e.$forceUpdate());Sn=!1}(t.componentInstance=e.componentInstance,n.propsData,n.listeners,t,n.children)},insert:function(e){var t,n=e.context,r=e.componentInstance;r._isMounted||(r._isMounted=!0,Tn(r,"mounted")),e.data.keepAlive&&(n._isMounted?((t=r)._inactive=!1,Nn.push(t)):qn(r,!0))},destroy:function(e){var t=e.componentInstance;t._isDestroyed||(e.data.keepAlive?Dn(t,!0):t.$destroy())}},vn=Object.keys(fn);function mn(e,t,n,s,c){if(!o(e)){var u=n.$options._base;if(l(e)&&(e=u.extend(e)),"function"==typeof e){var d;if(o(e.cid)&&(e=function(e,t){if(i(e.error)&&a(e.errorComp))return e.errorComp;if(a(e.resolved))return e.resolved;var n=_n;n&&a(e.owners)&&-1===e.owners.indexOf(n)&&e.owners.push(n);if(i(e.loading)&&a(e.loadingComp))return e.loadingComp;if(n&&!a(e.owners)){var r=e.owners=[n],s=!0,c=null,u=null;n.$on("hook:destroyed",(function(){return _(r,n)}));var d=function(e){for(var t=0,n=r.length;t<n;t++)r[t].$forceUpdate();e&&(r.length=0,null!==c&&(clearTimeout(c),c=null),null!==u&&(clearTimeout(u),u=null))},p=F((function(n){e.resolved=xn(n,t),s?r.length=0:d(!0)})),f=F((function(t){pe("Failed to resolve async component: "+String(e)+(t?"\nReason: "+t:"")),a(e.errorComp)&&(e.error=!0,d(!0))})),m=e(p,f);return l(m)&&(v(m)?o(e.resolved)&&m.then(p,f):v(m.component)&&(m.component.then(p,f),a(m.error)&&(e.errorComp=xn(m.error,t)),a(m.loading)&&(e.loadingComp=xn(m.loading,t),0===m.delay?e.loading=!0:c=setTimeout((function(){c=null,o(e.resolved)&&o(e.error)&&(e.loading=!0,d(!1))}),m.delay||200)),a(m.timeout)&&(u=setTimeout((function(){u=null,o(e.resolved)&&f("timeout ("+m.timeout+"ms)")}),m.timeout)))),s=!1,e.loading?e.loadingComp:e.resolved}}(d=e,u),void 0===e))return function(e,t,n,r,o){var a=ke();return a.asyncFactory=e,a.asyncMeta={data:t,context:n,children:r,tag:o},a}(d,t,n,s,c);t=t||{},nr(e),a(t.model)&&function(e,t){var n=e.model&&e.model.prop||"value",r=e.model&&e.model.event||"input";(t.attrs||(t.attrs={}))[n]=t.model.value;var o=t.on||(t.on={}),i=o[r],s=t.model.callback;a(i)?(Array.isArray(i)?-1===i.indexOf(s):i!==s)&&(o[r]=[s].concat(i)):o[r]=s}(e.options,t);var p=function(e,t,n){var r=t.options.props;if(!o(r)){var i={},s=e.attrs,l=e.props;if(a(s)||a(l))for(var c in r){var u=S(c),d=c.toLowerCase();c!==d&&s&&w(s,d)&&fe('Prop "'+d+'" is passed to component '+me(n||t)+', but the declared prop name is "'+c+'". Note that HTML attributes are case-insensitive and camelCased props need to use their kebab-case equivalents when using in-DOM templates. You should probably use "'+u+'" instead of "'+c+'".'),Pt(i,l,c,u,!0)||Pt(i,s,c,u,!1)}return i}}(t,e,c);if(i(e.options.functional))return function(e,t,n,o,i){var s=e.options,l={},c=s.props;if(a(c))for(var u in c)l[u]=Ze(u,c,t||r);else a(n.attrs)&&pn(l,n.attrs),a(n.props)&&pn(l,n.props);var d=new un(n,l,i,o,e),p=s.render.call(null,d._c,d);if(p instanceof Ae)return dn(p,n,d.parent,s,d);if(Array.isArray(p)){for(var f=Ft(p)||[],v=new Array(f.length),m=0;m<f.length;m++)v[m]=dn(f[m],n,d.parent,s,d);return v}}(e,p,t,n,s);var f=t.on;if(t.on=t.nativeOn,i(e.options.abstract)){var m=t.slot;t={},m&&(t.slot=m)}!function(e){for(var t=e.hook||(e.hook={}),n=0;n<vn.length;n++){var r=vn[n],o=t[r],a=fn[r];o===a||o&&o._merged||(t[r]=o?gn(a,o):a)}}(t);var g=e.options.name||c;return new Ae("vue-component-"+e.cid+(g?"-"+g:""),t,void 0,void 0,void 0,n,{Ctor:e,propsData:p,listeners:f,tag:c,children:s},d)}pe("Invalid Component definition: "+String(e),n)}}function gn(e,t){var n=function(n,r){e(n,r),t(n,r)};return n._merged=!0,n}function hn(e,t,n,r,o,c){return(Array.isArray(n)||s(n))&&(o=r,r=n,n=void 0),i(c)&&(o=2),function(e,t,n,r,o){if(a(n)&&a(n.__ob__))return pe("Avoid using observed data object as vnode data: "+JSON.stringify(n)+"\nAlways create fresh vnode data objects in each render!",e),ke();a(n)&&a(n.is)&&(t=n.is);if(!t)return ke();a(n)&&a(n.key)&&!s(n.key)&&pe("Avoid using non-primitive value as key, use string/number value instead.",e);Array.isArray(r)&&"function"==typeof r[0]&&((n=n||{}).scopedSlots={default:r[0]},r.length=0);2===o?r=Ft(r):1===o&&(r=function(e){for(var t=0;t<e.length;t++)if(Array.isArray(e[t]))return Array.prototype.concat.apply([],e);return e}(r));var i,c;if("string"==typeof t){var u;c=e.$vnode&&e.$vnode.ns||M.getTagNamespace(t),M.isReservedTag(t)?(a(n)&&a(n.nativeOn)&&"component"!==n.tag&&pe("The .native modifier for v-on is only valid on components but it was used on <"+t+">.",e),i=new Ae(M.parsePlatformTagName(t),n,r,void 0,void 0,e)):i=n&&n.pre||!a(u=Ye(e.$options,"components",t))?new Ae(t,n,r,void 0,void 0,e):mn(u,n,e,r,t)}else i=mn(t,n,e,r);return Array.isArray(i)?i:a(i)?(a(c)&&bn(i,c),a(n)&&function(e){l(e.style)&&Lt(e.style);l(e.class)&&Lt(e.class)}(n),i):ke()}(e,t,n,r,o)}function bn(e,t,n){if(e.ns=t,"foreignObject"===e.tag&&(t=void 0,n=!0),a(e.children))for(var r=0,s=e.children.length;r<s;r++){var l=e.children[r];a(l.tag)&&(o(l.ns)||i(n)&&"svg"!==l.tag)&&bn(l,t,n)}}var yn,_n=null;function xn(e,t){return(e.__esModule||de&&"Module"===e[Symbol.toStringTag])&&(e=e.default),l(e)?t.extend(e):e}function wn(e){if(Array.isArray(e))for(var t=0;t<e.length;t++){var n=e[t];if(a(n)&&(a(n.componentOptions)||Vt(n)))return n}}function An(e,t){yn.$on(e,t)}function Cn(e,t){yn.$off(e,t)}function kn(e,t){var n=yn;return function r(){var o=t.apply(null,arguments);null!==o&&n.$off(e,r)}}function jn(e,t,n){yn=e,Nt(t,n||{},An,Cn,kn,e),yn=void 0}var En=null,Sn=!1;function On(e){var t=En;return En=e,function(){En=t}}function Ln(e){for(;e&&(e=e.$parent);)if(e._inactive)return!0;return!1}function qn(e,t){if(t){if(e._directInactive=!1,Ln(e))return}else if(e._directInactive)return;if(e._inactive||null===e._inactive){e._inactive=!1;for(var n=0;n<e.$children.length;n++)qn(e.$children[n]);Tn(e,"activated")}}function Dn(e,t){if(!(t&&(e._directInactive=!0,Ln(e))||e._inactive)){e._inactive=!0;for(var n=0;n<e.$children.length;n++)Dn(e.$children[n]);Tn(e,"deactivated")}}function Tn(e,t){xe();var n=e.$options[t],r=t+" hook";if(n)for(var o=0,a=n.length;o<a;o++)it(n[o],e,null,e,r);e._hasHookEvent&&e.$emit("hook:"+t),we()}var $n=[],Nn=[],Rn={},Pn={},Fn=!1,Bn=!1,Un=0;var In=0,Mn=Date.now;if(Z&&!Q){var Hn=window.performance;Hn&&"function"==typeof Hn.now&&Mn()>document.createEvent("Event").timeStamp&&(Mn=function(){return Hn.now()})}function Vn(){var e,t;for(In=Mn(),Bn=!0,$n.sort((function(e,t){return e.id-t.id})),Un=0;Un<$n.length;Un++)if((e=$n[Un]).before&&e.before(),t=e.id,Rn[t]=null,e.run(),null!=Rn[t]&&(Pn[t]=(Pn[t]||0)+1,Pn[t]>100)){pe("You may have an infinite update loop "+(e.user?'in watcher with expression "'+e.expression+'"':"in a component render function."),e.vm);break}var n=Nn.slice(),r=$n.slice();Un=$n.length=Nn.length=0,Rn={},Pn={},Fn=Bn=!1,function(e){for(var t=0;t<e.length;t++)e[t]._inactive=!0,qn(e[t],!0)}(n),function(e){var t=e.length;for(;t--;){var n=e[t],r=n.vm;r._watcher===n&&r._isMounted&&!r._isDestroyed&&Tn(r,"updated")}}(r),le&&M.devtools&&le.emit("flush")}var zn=0,Wn=function(e,t,n,r,o){this.vm=e,o&&(e._watcher=this),e._watchers.push(this),r?(this.deep=!!r.deep,this.user=!!r.user,this.lazy=!!r.lazy,this.sync=!!r.sync,this.before=r.before):this.deep=this.user=this.lazy=this.sync=!1,this.cb=n,this.id=++zn,this.active=!0,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new ue,this.newDepIds=new ue,this.expression=t.toString(),"function"==typeof t?this.getter=t:(this.getter=function(e){if(!W.test(e)){var t=e.split(".");return function(e){for(var n=0;n<t.length;n++){if(!e)return;e=e[t[n]]}return e}}}(t),this.getter||(this.getter=T,pe('Failed watching path: "'+t+'" Watcher only accepts simple dot-delimited paths. For full control, use a function instead.',e))),this.value=this.lazy?void 0:this.get()};Wn.prototype.get=function(){var e;xe(this);var t=this.vm;try{e=this.getter.call(t,t)}catch(e){if(!this.user)throw e;at(e,t,'getter for watcher "'+this.expression+'"')}finally{this.deep&&Lt(e),we(),this.cleanupDeps()}return e},Wn.prototype.addDep=function(e){var t=e.id;this.newDepIds.has(t)||(this.newDepIds.add(t),this.newDeps.push(e),this.depIds.has(t)||e.addSub(this))},Wn.prototype.cleanupDeps=function(){for(var e=this.deps.length;e--;){var t=this.deps[e];this.newDepIds.has(t.id)||t.removeSub(this)}var n=this.depIds;this.depIds=this.newDepIds,this.newDepIds=n,this.newDepIds.clear(),n=this.deps,this.deps=this.newDeps,this.newDeps=n,this.newDeps.length=0},Wn.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():function(e){var t=e.id;if(null==Rn[t]){if(Rn[t]=!0,Bn){for(var n=$n.length-1;n>Un&&$n[n].id>e.id;)n--;$n.splice(n+1,0,e)}else $n.push(e);if(!Fn){if(Fn=!0,!M.async)return void Vn();yt(Vn)}}}(this)},Wn.prototype.run=function(){if(this.active){var e=this.get();if(e!==this.value||l(e)||this.deep){var t=this.value;if(this.value=e,this.user){var n='callback for watcher "'+this.expression+'"';it(this.cb,this.vm,[e,t],this.vm,n)}else this.cb.call(this.vm,e,t)}}},Wn.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},Wn.prototype.depend=function(){for(var e=this.deps.length;e--;)this.deps[e].depend()},Wn.prototype.teardown=function(){if(this.active){this.vm._isBeingDestroyed||_(this.vm._watchers,this);for(var e=this.deps.length;e--;)this.deps[e].removeSub(this);this.active=!1}};var Gn={enumerable:!0,configurable:!0,get:T,set:T};function Yn(e,t,n){Gn.get=function(){return this[t][n]},Gn.set=function(e){this[t][n]=e},Object.defineProperty(e,n,Gn)}function Zn(e){e._watchers=[];var t=e.$options;t.props&&function(e,t){var n=e.$options.propsData||{},r=e._props={},o=e.$options._propKeys=[],a=!e.$parent;a||De(!1);var i=function(i){o.push(i);var s=Ze(i,t,n,e),l=S(i);(y(l)||M.isReservedAttr(l))&&pe('"'+l+'" is a reserved attribute and cannot be used as component prop.',e),Ne(r,i,s,(function(){a||Sn||pe("Avoid mutating a prop directly since the value will be overwritten whenever the parent component re-renders. Instead, use a data or computed property based on the prop's value. Prop being mutated: \""+i+'"',e)})),i in e||Yn(e,"_props",i)};for(var s in t)i(s);De(!0)}(e,t.props),t.methods&&function(e,t){var n=e.$options.props;for(var r in t)"function"!=typeof t[r]&&pe('Method "'+r+'" has type "'+typeof t[r]+'" in the component definition. Did you reference the function correctly?',e),n&&w(n,r)&&pe('Method "'+r+'" has already been defined as a prop.',e),r in e&&V(r)&&pe('Method "'+r+'" conflicts with an existing Vue instance method. Avoid defining component methods that start with _ or $.'),e[r]="function"!=typeof t[r]?T:O(t[r],e)}(e,t.methods),t.data?function(e){var t=e.$options.data;d(t=e._data="function"==typeof t?function(e,t){xe();try{return e.call(t,t)}catch(e){return at(e,t,"data()"),{}}finally{we()}}(t,e):t||{})||(t={},pe("data functions should return an object:\nhttps://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function",e));var n=Object.keys(t),r=e.$options.props,o=e.$options.methods,a=n.length;for(;a--;){var i=n[a];o&&w(o,i)&&pe('Method "'+i+'" has already been defined as a data property.',e),r&&w(r,i)?pe('The data property "'+i+'" is already declared as a prop. Use prop default value instead.',e):V(i)||Yn(e,"_data",i)}$e(t,!0)}(e):$e(e._data={},!0),t.computed&&function(e,t){var n=e._computedWatchers=Object.create(null),r=se();for(var o in t){var a=t[o],i="function"==typeof a?a:a.get;null==i&&pe('Getter is missing for computed property "'+o+'".',e),r||(n[o]=new Wn(e,i||T,T,Jn)),o in e?o in e.$data?pe('The computed property "'+o+'" is already defined in data.',e):e.$options.props&&o in e.$options.props?pe('The computed property "'+o+'" is already defined as a prop.',e):e.$options.methods&&o in e.$options.methods&&pe('The computed property "'+o+'" is already defined as a method.',e):Kn(e,o,a)}}(e,t.computed),t.watch&&t.watch!==oe&&function(e,t){for(var n in t){var r=t[n];if(Array.isArray(r))for(var o=0;o<r.length;o++)er(e,n,r[o]);else er(e,n,r)}}(e,t.watch)}var Jn={lazy:!0};function Kn(e,t,n){var r=!se();"function"==typeof n?(Gn.get=r?Xn(t):Qn(n),Gn.set=T):(Gn.get=n.get?r&&!1!==n.cache?Xn(t):Qn(n.get):T,Gn.set=n.set||T),Gn.set===T&&(Gn.set=function(){pe('Computed property "'+t+'" was assigned to but it has no setter.',this)}),Object.defineProperty(e,t,Gn)}function Xn(e){return function(){var t=this._computedWatchers&&this._computedWatchers[e];if(t)return t.dirty&&t.evaluate(),ye.target&&t.depend(),t.value}}function Qn(e){return function(){return e.call(this,this)}}function er(e,t,n,r){return d(n)&&(r=n,n=n.handler),"string"==typeof n&&(n=e[n]),e.$watch(t,n,r)}var tr=0;function nr(e){var t=e.options;if(e.super){var n=nr(e.super);if(n!==e.superOptions){e.superOptions=n;var r=function(e){var t,n=e.options,r=e.sealedOptions;for(var o in n)n[o]!==r[o]&&(t||(t={}),t[o]=n[o]);return t}(e);r&&q(e.extendOptions,r),(t=e.options=Ge(n,e.extendOptions)).name&&(t.components[t.name]=e)}}return t}function rr(e){this instanceof rr||pe("Vue is a constructor and should be called with the `new` keyword"),this._init(e)}function or(e){e.cid=0;var t=1;e.extend=function(e){e=e||{};var n=this,r=n.cid,o=e._Ctor||(e._Ctor={});if(o[r])return o[r];var a=e.name||n.options.name;a&&ze(a);var i=function(e){this._init(e)};return(i.prototype=Object.create(n.prototype)).constructor=i,i.cid=t++,i.options=Ge(n.options,e),i.super=n,i.options.props&&function(e){var t=e.options.props;for(var n in t)Yn(e.prototype,"_props",n)}(i),i.options.computed&&function(e){var t=e.options.computed;for(var n in t)Kn(e.prototype,n,t[n])}(i),i.extend=n.extend,i.mixin=n.mixin,i.use=n.use,U.forEach((function(e){i[e]=n[e]})),a&&(i.options.components[a]=i),i.superOptions=n.options,i.extendOptions=e,i.sealedOptions=q({},i.options),o[r]=i,i}}function ar(e){return e&&(e.Ctor.options.name||e.tag)}function ir(e,t){return Array.isArray(e)?e.indexOf(t)>-1:"string"==typeof e?e.split(",").indexOf(t)>-1:!!p(e)&&e.test(t)}function sr(e,t){var n=e.cache,r=e.keys,o=e._vnode;for(var a in n){var i=n[a];if(i){var s=i.name;s&&!t(s)&&lr(n,a,r,o)}}}function lr(e,t,n,r){var o=e[t];!o||r&&o.tag===r.tag||o.componentInstance.$destroy(),e[t]=null,_(n,t)}!function(e){e.prototype._init=function(e){var t,n,o=this;o._uid=tr++,M.performance&&Et&&(t="vue-perf-start:"+o._uid,n="vue-perf-end:"+o._uid,Et(t)),o._isVue=!0,e&&e._isComponent?function(e,t){var n=e.$options=Object.create(e.constructor.options),r=t._parentVnode;n.parent=t.parent,n._parentVnode=r;var o=r.componentOptions;n.propsData=o.propsData,n._parentListeners=o.listeners,n._renderChildren=o.children,n._componentTag=o.tag,t.render&&(n.render=t.render,n.staticRenderFns=t.staticRenderFns)}(o,e):o.$options=Ge(nr(o.constructor),e||{},o),ut(o),o._self=o,function(e){var t=e.$options,n=t.parent;if(n&&!t.abstract){for(;n.$options.abstract&&n.$parent;)n=n.$parent;n.$children.push(e)}e.$parent=n,e.$root=n?n.$root:e,e.$children=[],e.$refs={},e._watcher=null,e._inactive=null,e._directInactive=!1,e._isMounted=!1,e._isDestroyed=!1,e._isBeingDestroyed=!1}(o),function(e){e._events=Object.create(null),e._hasHookEvent=!1;var t=e.$options._parentListeners;t&&jn(e,t)}(o),function(e){e._vnode=null,e._staticTrees=null;var t=e.$options,n=e.$vnode=t._parentVnode,o=n&&n.context;e.$slots=Mt(t._renderChildren,o),e.$scopedSlots=r,e._c=function(t,n,r,o){return hn(e,t,n,r,o,!1)},e.$createElement=function(t,n,r,o){return hn(e,t,n,r,o,!0)};var a=n&&n.data;Ne(e,"$attrs",a&&a.attrs||r,(function(){!Sn&&pe("$attrs is readonly.",e)}),!0),Ne(e,"$listeners",t._parentListeners||r,(function(){!Sn&&pe("$listeners is readonly.",e)}),!0)}(o),Tn(o,"beforeCreate"),function(e){var t=It(e.$options.inject,e);t&&(De(!1),Object.keys(t).forEach((function(n){Ne(e,n,t[n],(function(){pe('Avoid mutating an injected value directly since the changes will be overwritten whenever the provided component re-renders. injection being mutated: "'+n+'"',e)}))})),De(!0))}(o),Zn(o),function(e){var t=e.$options.provide;t&&(e._provided="function"==typeof t?t.call(e):t)}(o),Tn(o,"created"),M.performance&&Et&&(o._name=me(o,!1),Et(n),St("vue "+o._name+" init",t,n)),o.$options.el&&o.$mount(o.$options.el)}}(rr),function(e){var t={get:function(){return this._data}},n={get:function(){return this._props}};t.set=function(){pe("Avoid replacing instance root $data. Use nested data properties instead.",this)},n.set=function(){pe("$props is readonly.",this)},Object.defineProperty(e.prototype,"$data",t),Object.defineProperty(e.prototype,"$props",n),e.prototype.$set=Re,e.prototype.$delete=Pe,e.prototype.$watch=function(e,t,n){var r=this;if(d(t))return er(r,e,t,n);(n=n||{}).user=!0;var o=new Wn(r,e,t,n);if(n.immediate){var a='callback for immediate watcher "'+o.expression+'"';xe(),it(t,r,[o.value],r,a),we()}return function(){o.teardown()}}}(rr),function(e){var t=/^hook:/;e.prototype.$on=function(e,n){var r=this;if(Array.isArray(e))for(var o=0,a=e.length;o<a;o++)r.$on(e[o],n);else(r._events[e]||(r._events[e]=[])).push(n),t.test(e)&&(r._hasHookEvent=!0);return r},e.prototype.$once=function(e,t){var n=this;function r(){n.$off(e,r),t.apply(n,arguments)}return r.fn=t,n.$on(e,r),n},e.prototype.$off=function(e,t){var n=this;if(!arguments.length)return n._events=Object.create(null),n;if(Array.isArray(e)){for(var r=0,o=e.length;r<o;r++)n.$off(e[r],t);return n}var a,i=n._events[e];if(!i)return n;if(!t)return n._events[e]=null,n;for(var s=i.length;s--;)if((a=i[s])===t||a.fn===t){i.splice(s,1);break}return n},e.prototype.$emit=function(e){var t=this,n=e.toLowerCase();n!==e&&t._events[n]&&fe('Event "'+n+'" is emitted in component '+me(t)+' but the handler is registered for "'+e+'". Note that HTML attributes are case-insensitive and you cannot use v-on to listen to camelCase events when using in-DOM templates. You should probably use "'+S(e)+'" instead of "'+e+'".');var r=t._events[e];if(r){r=r.length>1?L(r):r;for(var o=L(arguments,1),a='event handler for "'+e+'"',i=0,s=r.length;i<s;i++)it(r[i],t,o,t,a)}return t}}(rr),function(e){e.prototype._update=function(e,t){var n=this,r=n.$el,o=n._vnode,a=On(n);n._vnode=e,n.$el=o?n.__patch__(o,e):n.__patch__(n.$el,e,t,!1),a(),r&&(r.__vue__=null),n.$el&&(n.$el.__vue__=n),n.$vnode&&n.$parent&&n.$vnode===n.$parent._vnode&&(n.$parent.$el=n.$el)},e.prototype.$forceUpdate=function(){this._watcher&&this._watcher.update()},e.prototype.$destroy=function(){var e=this;if(!e._isBeingDestroyed){Tn(e,"beforeDestroy"),e._isBeingDestroyed=!0;var t=e.$parent;!t||t._isBeingDestroyed||e.$options.abstract||_(t.$children,e),e._watcher&&e._watcher.teardown();for(var n=e._watchers.length;n--;)e._watchers[n].teardown();e._data.__ob__&&e._data.__ob__.vmCount--,e._isDestroyed=!0,e.__patch__(e._vnode,null),Tn(e,"destroyed"),e.$off(),e.$el&&(e.$el.__vue__=null),e.$vnode&&(e.$vnode.parent=null)}}}(rr),function(e){cn(e.prototype),e.prototype.$nextTick=function(e){return yt(e,this)},e.prototype._render=function(){var e,t=this,n=t.$options,r=n.render,o=n._parentVnode;o&&(t.$scopedSlots=zt(o.data.scopedSlots,t.$slots,t.$scopedSlots)),t.$vnode=o;try{_n=t,e=r.call(t._renderProxy,t.$createElement)}catch(n){if(at(n,t,"render"),t.$options.renderError)try{e=t.$options.renderError.call(t._renderProxy,t.$createElement,n)}catch(n){at(n,t,"renderError"),e=t._vnode}else e=t._vnode}finally{_n=null}return Array.isArray(e)&&1===e.length&&(e=e[0]),e instanceof Ae||(Array.isArray(e)&&pe("Multiple root nodes returned from render function. Render function should return a single root node.",t),e=ke()),e.parent=o,e}}(rr);var cr=[String,RegExp,Array],ur={name:"keep-alive",abstract:!0,props:{include:cr,exclude:cr,max:[String,Number]},methods:{cacheVNode:function(){var e=this,t=e.cache,n=e.keys,r=e.vnodeToCache,o=e.keyToCache;if(r){var a=r.tag,i=r.componentInstance,s=r.componentOptions;t[o]={name:ar(s),tag:a,componentInstance:i},n.push(o),this.max&&n.length>parseInt(this.max)&&lr(t,n[0],n,this._vnode),this.vnodeToCache=null}}},created:function(){this.cache=Object.create(null),this.keys=[]},destroyed:function(){for(var e in this.cache)lr(this.cache,e,this.keys)},mounted:function(){var e=this;this.cacheVNode(),this.$watch("include",(function(t){sr(e,(function(e){return ir(t,e)}))})),this.$watch("exclude",(function(t){sr(e,(function(e){return!ir(t,e)}))}))},updated:function(){this.cacheVNode()},render:function(){var e=this.$slots.default,t=wn(e),n=t&&t.componentOptions;if(n){var r=ar(n),o=this.include,a=this.exclude;if(o&&(!r||!ir(o,r))||a&&r&&ir(a,r))return t;var i=this.cache,s=this.keys,l=null==t.key?n.Ctor.cid+(n.tag?"::"+n.tag:""):t.key;i[l]?(t.componentInstance=i[l].componentInstance,_(s,l),s.push(l)):(this.vnodeToCache=t,this.keyToCache=l),t.data.keepAlive=!0}return t||e&&e[0]}},dr={KeepAlive:ur};!function(e){var t={get:function(){return M},set:function(){pe("Do not replace the Vue.config object, set individual fields instead.")}};Object.defineProperty(e,"config",t),e.util={warn:pe,extend:q,mergeOptions:Ge,defineReactive:Ne},e.set=Re,e.delete=Pe,e.nextTick=yt,e.observable=function(e){return $e(e),e},e.options=Object.create(null),U.forEach((function(t){e.options[t+"s"]=Object.create(null)})),e.options._base=e,q(e.options.components,dr),function(e){e.use=function(e){var t=this._installedPlugins||(this._installedPlugins=[]);if(t.indexOf(e)>-1)return this;var n=L(arguments,1);return n.unshift(this),"function"==typeof e.install?e.install.apply(e,n):"function"==typeof e&&e.apply(null,n),t.push(e),this}}(e),function(e){e.mixin=function(e){return this.options=Ge(this.options,e),this}}(e),or(e),function(e){U.forEach((function(t){e[t]=function(e,n){return n?("component"===t&&ze(e),"component"===t&&d(n)&&(n.name=n.name||e,n=this.options._base.extend(n)),"directive"===t&&"function"==typeof n&&(n={bind:n,update:n}),this.options[t+"s"][e]=n,n):this.options[t+"s"][e]}}))}(e)}(rr),Object.defineProperty(rr.prototype,"$isServer",{get:se}),Object.defineProperty(rr.prototype,"$ssrContext",{get:function(){return this.$vnode&&this.$vnode.ssrContext}}),Object.defineProperty(rr,"FunctionalRenderContext",{value:un}),rr.version="2.6.14";var pr=h("style,class"),fr=h("input,textarea,option,select,progress"),vr=h("contenteditable,draggable,spellcheck"),mr=h("events,caret,typing,plaintext-only"),gr=h("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,truespeed,typemustmatch,visible"),hr="http://www.w3.org/1999/xlink",br=function(e){return":"===e.charAt(5)&&"xlink"===e.slice(0,5)},yr=function(e){return br(e)?e.slice(6,e.length):""},_r=function(e){return null==e||!1===e};function xr(e){for(var t=e.data,n=e,r=e;a(r.componentInstance);)(r=r.componentInstance._vnode)&&r.data&&(t=wr(r.data,t));for(;a(n=n.parent);)n&&n.data&&(t=wr(t,n.data));return function(e,t){if(a(e)||a(t))return Ar(e,Cr(t));return""}(t.staticClass,t.class)}function wr(e,t){return{staticClass:Ar(e.staticClass,t.staticClass),class:a(e.class)?[e.class,t.class]:t.class}}function Ar(e,t){return e?t?e+" "+t:e:t||""}function Cr(e){return Array.isArray(e)?function(e){for(var t,n="",r=0,o=e.length;r<o;r++)a(t=Cr(e[r]))&&""!==t&&(n&&(n+=" "),n+=t);return n}(e):l(e)?function(e){var t="";for(var n in e)e[n]&&(t&&(t+=" "),t+=n);return t}(e):"string"==typeof e?e:""}var kr={svg:"http://www.w3.org/2000/svg",math:"http://www.w3.org/1998/Math/MathML"},jr=h("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot"),Er=h("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignobject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view",!0),Sr=function(e){return jr(e)||Er(e)};var Or=Object.create(null);var Lr=h("text,number,password,search,email,tel,url");var qr=Object.freeze({createElement:function(e,t){var n=document.createElement(e);return"select"!==e||t.data&&t.data.attrs&&void 0!==t.data.attrs.multiple&&n.setAttribute("multiple","multiple"),n},createElementNS:function(e,t){return document.createElementNS(kr[e],t)},createTextNode:function(e){return document.createTextNode(e)},createComment:function(e){return document.createComment(e)},insertBefore:function(e,t,n){e.insertBefore(t,n)},removeChild:function(e,t){e.removeChild(t)},appendChild:function(e,t){e.appendChild(t)},parentNode:function(e){return e.parentNode},nextSibling:function(e){return e.nextSibling},tagName:function(e){return e.tagName},setTextContent:function(e,t){e.textContent=t},setStyleScope:function(e,t){e.setAttribute(t,"")}}),Dr={create:function(e,t){Tr(t)},update:function(e,t){e.data.ref!==t.data.ref&&(Tr(e,!0),Tr(t))},destroy:function(e){Tr(e,!0)}};function Tr(e,t){var n=e.data.ref;if(a(n)){var r=e.context,o=e.componentInstance||e.elm,i=r.$refs;t?Array.isArray(i[n])?_(i[n],o):i[n]===o&&(i[n]=void 0):e.data.refInFor?Array.isArray(i[n])?i[n].indexOf(o)<0&&i[n].push(o):i[n]=[o]:i[n]=o}}var $r=new Ae("",{},[]),Nr=["create","activate","update","remove","destroy"];function Rr(e,t){return e.key===t.key&&e.asyncFactory===t.asyncFactory&&(e.tag===t.tag&&e.isComment===t.isComment&&a(e.data)===a(t.data)&&function(e,t){if("input"!==e.tag)return!0;var n,r=a(n=e.data)&&a(n=n.attrs)&&n.type,o=a(n=t.data)&&a(n=n.attrs)&&n.type;return r===o||Lr(r)&&Lr(o)}(e,t)||i(e.isAsyncPlaceholder)&&o(t.asyncFactory.error))}function Pr(e,t,n){var r,o,i={};for(r=t;r<=n;++r)a(o=e[r].key)&&(i[o]=r);return i}var Fr={create:Br,update:Br,destroy:function(e){Br(e,$r)}};function Br(e,t){(e.data.directives||t.data.directives)&&function(e,t){var n,r,o,a=e===$r,i=t===$r,s=Ir(e.data.directives,e.context),l=Ir(t.data.directives,t.context),c=[],u=[];for(n in l)r=s[n],o=l[n],r?(o.oldValue=r.value,o.oldArg=r.arg,Hr(o,"update",t,e),o.def&&o.def.componentUpdated&&u.push(o)):(Hr(o,"bind",t,e),o.def&&o.def.inserted&&c.push(o));if(c.length){var d=function(){for(var n=0;n<c.length;n++)Hr(c[n],"inserted",t,e)};a?Rt(t,"insert",d):d()}u.length&&Rt(t,"postpatch",(function(){for(var n=0;n<u.length;n++)Hr(u[n],"componentUpdated",t,e)}));if(!a)for(n in s)l[n]||Hr(s[n],"unbind",e,e,i)}(e,t)}var Ur=Object.create(null);function Ir(e,t){var n,r,o=Object.create(null);if(!e)return o;for(n=0;n<e.length;n++)(r=e[n]).modifiers||(r.modifiers=Ur),o[Mr(r)]=r,r.def=Ye(t.$options,"directives",r.name,!0);return o}function Mr(e){return e.rawName||e.name+"."+Object.keys(e.modifiers||{}).join(".")}function Hr(e,t,n,r,o){var a=e.def&&e.def[t];if(a)try{a(n.elm,e,n,r,o)}catch(r){at(r,n.context,"directive "+e.name+" "+t+" hook")}}var Vr=[Dr,Fr];function zr(e,t){var n=t.componentOptions;if(!(a(n)&&!1===n.Ctor.options.inheritAttrs||o(e.data.attrs)&&o(t.data.attrs))){var r,i,s=t.elm,l=e.data.attrs||{},c=t.data.attrs||{};for(r in a(c.__ob__)&&(c=t.data.attrs=q({},c)),c)i=c[r],l[r]!==i&&Wr(s,r,i,t.data.pre);for(r in(Q||te)&&c.value!==l.value&&Wr(s,"value",c.value),l)o(c[r])&&(br(r)?s.removeAttributeNS(hr,yr(r)):vr(r)||s.removeAttribute(r))}}function Wr(e,t,n,r){r||e.tagName.indexOf("-")>-1?Gr(e,t,n):gr(t)?_r(n)?e.removeAttribute(t):(n="allowfullscreen"===t&&"EMBED"===e.tagName?"true":t,e.setAttribute(t,n)):vr(t)?e.setAttribute(t,function(e,t){return _r(t)||"false"===t?"false":"contenteditable"===e&&mr(t)?t:"true"}(t,n)):br(t)?_r(n)?e.removeAttributeNS(hr,yr(t)):e.setAttributeNS(hr,t,n):Gr(e,t,n)}function Gr(e,t,n){if(_r(n))e.removeAttribute(t);else{if(Q&&!ee&&"TEXTAREA"===e.tagName&&"placeholder"===t&&""!==n&&!e.__ieph){var r=function(t){t.stopImmediatePropagation(),e.removeEventListener("input",r)};e.addEventListener("input",r),e.__ieph=!0}e.setAttribute(t,n)}}var Yr={create:zr,update:zr};function Zr(e,t){var n=t.elm,r=t.data,i=e.data;if(!(o(r.staticClass)&&o(r.class)&&(o(i)||o(i.staticClass)&&o(i.class)))){var s=xr(t),l=n._transitionClasses;a(l)&&(s=Ar(s,Cr(l))),s!==n._prevClass&&(n.setAttribute("class",s),n._prevClass=s)}}var Jr,Kr={create:Zr,update:Zr};function Xr(e,t,n){var r=Jr;return function o(){var a=t.apply(null,arguments);null!==a&&to(e,o,n,r)}}var Qr=dt&&!(re&&Number(re[1])<=53);function eo(e,t,n,r){if(Qr){var o=In,a=t;t=a._wrapper=function(e){if(e.target===e.currentTarget||e.timeStamp>=o||e.timeStamp<=0||e.target.ownerDocument!==document)return a.apply(this,arguments)}}Jr.addEventListener(e,t,ae?{capture:n,passive:r}:n)}function to(e,t,n,r){(r||Jr).removeEventListener(e,t._wrapper||t,n)}function no(e,t){if(!o(e.data.on)||!o(t.data.on)){var n=t.data.on||{},r=e.data.on||{};Jr=t.elm,function(e){if(a(e.__r)){var t=Q?"change":"input";e[t]=[].concat(e.__r,e[t]||[]),delete e.__r}a(e.__c)&&(e.change=[].concat(e.__c,e.change||[]),delete e.__c)}(n),Nt(n,r,eo,to,Xr,t.context),Jr=void 0}}var ro,oo={create:no,update:no};function ao(e,t){if(!o(e.data.domProps)||!o(t.data.domProps)){var n,r,i=t.elm,s=e.data.domProps||{},l=t.data.domProps||{};for(n in a(l.__ob__)&&(l=t.data.domProps=q({},l)),s)n in l||(i[n]="");for(n in l){if(r=l[n],"textContent"===n||"innerHTML"===n){if(t.children&&(t.children.length=0),r===s[n])continue;1===i.childNodes.length&&i.removeChild(i.childNodes[0])}if("value"===n&&"PROGRESS"!==i.tagName){i._value=r;var c=o(r)?"":String(r);io(i,c)&&(i.value=c)}else if("innerHTML"===n&&Er(i.tagName)&&o(i.innerHTML)){(ro=ro||document.createElement("div")).innerHTML="<svg>"+r+"</svg>";for(var u=ro.firstChild;i.firstChild;)i.removeChild(i.firstChild);for(;u.firstChild;)i.appendChild(u.firstChild)}else if(r!==s[n])try{i[n]=r}catch(e){}}}}function io(e,t){return!e.composing&&("OPTION"===e.tagName||function(e,t){var n=!0;try{n=document.activeElement!==e}catch(e){}return n&&e.value!==t}(e,t)||function(e,t){var n=e.value,r=e._vModifiers;if(a(r)){if(r.number)return g(n)!==g(t);if(r.trim)return n.trim()!==t.trim()}return n!==t}(e,t))}var so={create:ao,update:ao},lo=A((function(e){var t={},n=/:(.+)/;return e.split(/;(?![^(]*\))/g).forEach((function(e){if(e){var r=e.split(n);r.length>1&&(t[r[0].trim()]=r[1].trim())}})),t}));function co(e){var t=uo(e.style);return e.staticStyle?q(e.staticStyle,t):t}function uo(e){return Array.isArray(e)?D(e):"string"==typeof e?lo(e):e}var po,fo=/^--/,vo=/\s*!important$/,mo=function(e,t,n){if(fo.test(t))e.style.setProperty(t,n);else if(vo.test(n))e.style.setProperty(S(t),n.replace(vo,""),"important");else{var r=ho(t);if(Array.isArray(n))for(var o=0,a=n.length;o<a;o++)e.style[r]=n[o];else e.style[r]=n}},go=["Webkit","Moz","ms"],ho=A((function(e){if(po=po||document.createElement("div").style,"filter"!==(e=k(e))&&e in po)return e;for(var t=e.charAt(0).toUpperCase()+e.slice(1),n=0;n<go.length;n++){var r=go[n]+t;if(r in po)return r}}));function bo(e,t){var n=t.data,r=e.data;if(!(o(n.staticStyle)&&o(n.style)&&o(r.staticStyle)&&o(r.style))){var i,s,l=t.elm,c=r.staticStyle,u=r.normalizedStyle||r.style||{},d=c||u,p=uo(t.data.style)||{};t.data.normalizedStyle=a(p.__ob__)?q({},p):p;var f=function(e,t){var n,r={};if(t)for(var o=e;o.componentInstance;)(o=o.componentInstance._vnode)&&o.data&&(n=co(o.data))&&q(r,n);(n=co(e.data))&&q(r,n);for(var a=e;a=a.parent;)a.data&&(n=co(a.data))&&q(r,n);return r}(t,!0);for(s in d)o(f[s])&&mo(l,s,"");for(s in f)(i=f[s])!==d[s]&&mo(l,s,null==i?"":i)}}var yo={create:bo,update:bo},_o=/\s+/;function xo(e,t){if(t&&(t=t.trim()))if(e.classList)t.indexOf(" ")>-1?t.split(_o).forEach((function(t){return e.classList.add(t)})):e.classList.add(t);else{var n=" "+(e.getAttribute("class")||"")+" ";n.indexOf(" "+t+" ")<0&&e.setAttribute("class",(n+t).trim())}}function wo(e,t){if(t&&(t=t.trim()))if(e.classList)t.indexOf(" ")>-1?t.split(_o).forEach((function(t){return e.classList.remove(t)})):e.classList.remove(t),e.classList.length||e.removeAttribute("class");else{for(var n=" "+(e.getAttribute("class")||"")+" ",r=" "+t+" ";n.indexOf(r)>=0;)n=n.replace(r," ");(n=n.trim())?e.setAttribute("class",n):e.removeAttribute("class")}}function Ao(e){if(e){if("object"==typeof e){var t={};return!1!==e.css&&q(t,Co(e.name||"v")),q(t,e),t}return"string"==typeof e?Co(e):void 0}}var Co=A((function(e){return{enterClass:e+"-enter",enterToClass:e+"-enter-to",enterActiveClass:e+"-enter-active",leaveClass:e+"-leave",leaveToClass:e+"-leave-to",leaveActiveClass:e+"-leave-active"}})),ko=Z&&!ee,jo="transition",Eo="animation",So="transition",Oo="transitionend",Lo="animation",qo="animationend";ko&&(void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend&&(So="WebkitTransition",Oo="webkitTransitionEnd"),void 0===window.onanimationend&&void 0!==window.onwebkitanimationend&&(Lo="WebkitAnimation",qo="webkitAnimationEnd"));var Do=Z?window.requestAnimationFrame?window.requestAnimationFrame.bind(window):setTimeout:function(e){return e()};function To(e){Do((function(){Do(e)}))}function $o(e,t){var n=e._transitionClasses||(e._transitionClasses=[]);n.indexOf(t)<0&&(n.push(t),xo(e,t))}function No(e,t){e._transitionClasses&&_(e._transitionClasses,t),wo(e,t)}function Ro(e,t,n){var r=Fo(e,t),o=r.type,a=r.timeout,i=r.propCount;if(!o)return n();var s=o===jo?Oo:qo,l=0,c=function(){e.removeEventListener(s,u),n()},u=function(t){t.target===e&&++l>=i&&c()};setTimeout((function(){l<i&&c()}),a+1),e.addEventListener(s,u)}var Po=/\b(transform|all)(,|$)/;function Fo(e,t){var n,r=window.getComputedStyle(e),o=(r[So+"Delay"]||"").split(", "),a=(r[So+"Duration"]||"").split(", "),i=Bo(o,a),s=(r[Lo+"Delay"]||"").split(", "),l=(r[Lo+"Duration"]||"").split(", "),c=Bo(s,l),u=0,d=0;return t===jo?i>0&&(n=jo,u=i,d=a.length):t===Eo?c>0&&(n=Eo,u=c,d=l.length):d=(n=(u=Math.max(i,c))>0?i>c?jo:Eo:null)?n===jo?a.length:l.length:0,{type:n,timeout:u,propCount:d,hasTransform:n===jo&&Po.test(r[So+"Property"])}}function Bo(e,t){for(;e.length<t.length;)e=e.concat(e);return Math.max.apply(null,t.map((function(t,n){return Uo(t)+Uo(e[n])})))}function Uo(e){return 1e3*Number(e.slice(0,-1).replace(",","."))}function Io(e,t){var n=e.elm;a(n._leaveCb)&&(n._leaveCb.cancelled=!0,n._leaveCb());var r=Ao(e.data.transition);if(!o(r)&&!a(n._enterCb)&&1===n.nodeType){for(var i=r.css,s=r.type,c=r.enterClass,u=r.enterToClass,d=r.enterActiveClass,p=r.appearClass,f=r.appearToClass,v=r.appearActiveClass,m=r.beforeEnter,h=r.enter,b=r.afterEnter,y=r.enterCancelled,_=r.beforeAppear,x=r.appear,w=r.afterAppear,A=r.appearCancelled,C=r.duration,k=En,j=En.$vnode;j&&j.parent;)k=j.context,j=j.parent;var E=!k._isMounted||!e.isRootInsert;if(!E||x||""===x){var S=E&&p?p:c,O=E&&v?v:d,L=E&&f?f:u,q=E&&_||m,D=E&&"function"==typeof x?x:h,T=E&&w||b,$=E&&A||y,N=g(l(C)?C.enter:C);null!=N&&Ho(N,"enter",e);var R=!1!==i&&!ee,P=zo(D),B=n._enterCb=F((function(){R&&(No(n,L),No(n,O)),B.cancelled?(R&&No(n,S),$&&$(n)):T&&T(n),n._enterCb=null}));e.data.show||Rt(e,"insert",(function(){var t=n.parentNode,r=t&&t._pending&&t._pending[e.key];r&&r.tag===e.tag&&r.elm._leaveCb&&r.elm._leaveCb(),D&&D(n,B)})),q&&q(n),R&&($o(n,S),$o(n,O),To((function(){No(n,S),B.cancelled||($o(n,L),P||(Vo(N)?setTimeout(B,N):Ro(n,s,B)))}))),e.data.show&&(t&&t(),D&&D(n,B)),R||P||B()}}}function Mo(e,t){var n=e.elm;a(n._enterCb)&&(n._enterCb.cancelled=!0,n._enterCb());var r=Ao(e.data.transition);if(o(r)||1!==n.nodeType)return t();if(!a(n._leaveCb)){var i=r.css,s=r.type,c=r.leaveClass,u=r.leaveToClass,d=r.leaveActiveClass,p=r.beforeLeave,f=r.leave,v=r.afterLeave,m=r.leaveCancelled,h=r.delayLeave,b=r.duration,y=!1!==i&&!ee,_=zo(f),x=g(l(b)?b.leave:b);a(x)&&Ho(x,"leave",e);var w=n._leaveCb=F((function(){n.parentNode&&n.parentNode._pending&&(n.parentNode._pending[e.key]=null),y&&(No(n,u),No(n,d)),w.cancelled?(y&&No(n,c),m&&m(n)):(t(),v&&v(n)),n._leaveCb=null}));h?h(A):A()}function A(){w.cancelled||(!e.data.show&&n.parentNode&&((n.parentNode._pending||(n.parentNode._pending={}))[e.key]=e),p&&p(n),y&&($o(n,c),$o(n,d),To((function(){No(n,c),w.cancelled||($o(n,u),_||(Vo(x)?setTimeout(w,x):Ro(n,s,w)))}))),f&&f(n,w),y||_||w())}}function Ho(e,t,n){"number"!=typeof e?pe("<transition> explicit "+t+" duration is not a valid number - got "+JSON.stringify(e)+".",n.context):isNaN(e)&&pe("<transition> explicit "+t+" duration is NaN - the duration expression might be incorrect.",n.context)}function Vo(e){return"number"==typeof e&&!isNaN(e)}function zo(e){if(o(e))return!1;var t=e.fns;return a(t)?zo(Array.isArray(t)?t[0]:t):(e._length||e.length)>1}function Wo(e,t){!0!==t.data.show&&Io(t)}var Go=function(e){var t,n,r={},l=e.modules,c=e.nodeOps;for(t=0;t<Nr.length;++t)for(r[Nr[t]]=[],n=0;n<l.length;++n)a(l[n][Nr[t]])&&r[Nr[t]].push(l[n][Nr[t]]);function u(e){var t=c.parentNode(e);a(t)&&c.removeChild(t,e)}function d(e,t){return!t&&!e.ns&&!(M.ignoredElements.length&&M.ignoredElements.some((function(t){return p(t)?t.test(e.tag):t===e.tag})))&&M.isUnknownElement(e.tag)}var f=0;function v(e,t,n,o,s,l,u){if(a(e.elm)&&a(l)&&(e=l[u]=Ee(e)),e.isRootInsert=!s,!function(e,t,n,o){var s=e.data;if(a(s)){var l=a(e.componentInstance)&&s.keepAlive;if(a(s=s.hook)&&a(s=s.init)&&s(e,!1),a(e.componentInstance))return m(e,t),g(n,e.elm,o),i(l)&&function(e,t,n,o){var i,s=e;for(;s.componentInstance;)if(a(i=(s=s.componentInstance._vnode).data)&&a(i=i.transition)){for(i=0;i<r.activate.length;++i)r.activate[i]($r,s);t.push(s);break}g(n,e.elm,o)}(e,t,n,o),!0}}(e,t,n,o)){var p=e.data,v=e.children,h=e.tag;a(h)?(p&&p.pre&&f++,d(e,f)&&pe("Unknown custom element: <"+h+'> - did you register the component correctly? For recursive components, make sure to provide the "name" option.',e.context),e.elm=e.ns?c.createElementNS(e.ns,h):c.createElement(h,e),x(e),b(e,v,t),a(p)&&_(e,t),g(n,e.elm,o),p&&p.pre&&f--):i(e.isComment)?(e.elm=c.createComment(e.text),g(n,e.elm,o)):(e.elm=c.createTextNode(e.text),g(n,e.elm,o))}}function m(e,t){a(e.data.pendingInsert)&&(t.push.apply(t,e.data.pendingInsert),e.data.pendingInsert=null),e.elm=e.componentInstance.$el,y(e)?(_(e,t),x(e)):(Tr(e),t.push(e))}function g(e,t,n){a(e)&&(a(n)?c.parentNode(n)===e&&c.insertBefore(e,t,n):c.appendChild(e,t))}function b(e,t,n){if(Array.isArray(t)){j(t);for(var r=0;r<t.length;++r)v(t[r],n,e.elm,null,!0,t,r)}else s(e.text)&&c.appendChild(e.elm,c.createTextNode(String(e.text)))}function y(e){for(;e.componentInstance;)e=e.componentInstance._vnode;return a(e.tag)}function _(e,n){for(var o=0;o<r.create.length;++o)r.create[o]($r,e);a(t=e.data.hook)&&(a(t.create)&&t.create($r,e),a(t.insert)&&n.push(e))}function x(e){var t;if(a(t=e.fnScopeId))c.setStyleScope(e.elm,t);else for(var n=e;n;)a(t=n.context)&&a(t=t.$options._scopeId)&&c.setStyleScope(e.elm,t),n=n.parent;a(t=En)&&t!==e.context&&t!==e.fnContext&&a(t=t.$options._scopeId)&&c.setStyleScope(e.elm,t)}function w(e,t,n,r,o,a){for(;r<=o;++r)v(n[r],a,e,t,!1,n,r)}function A(e){var t,n,o=e.data;if(a(o))for(a(t=o.hook)&&a(t=t.destroy)&&t(e),t=0;t<r.destroy.length;++t)r.destroy[t](e);if(a(t=e.children))for(n=0;n<e.children.length;++n)A(e.children[n])}function C(e,t,n){for(;t<=n;++t){var r=e[t];a(r)&&(a(r.tag)?(k(r),A(r)):u(r.elm))}}function k(e,t){if(a(t)||a(e.data)){var n,o=r.remove.length+1;for(a(t)?t.listeners+=o:t=function(e,t){function n(){0==--n.listeners&&u(e)}return n.listeners=t,n}(e.elm,o),a(n=e.componentInstance)&&a(n=n._vnode)&&a(n.data)&&k(n,t),n=0;n<r.remove.length;++n)r.remove[n](e,t);a(n=e.data.hook)&&a(n=n.remove)?n(e,t):t()}else u(e.elm)}function j(e){for(var t={},n=0;n<e.length;n++){var r=e[n],o=r.key;a(o)&&(t[o]?pe("Duplicate keys detected: '"+o+"'. This may cause an update error.",r.context):t[o]=!0)}}function E(e,t,n,r){for(var o=n;o<r;o++){var i=t[o];if(a(i)&&Rr(e,i))return o}}function S(e,t,n,s,l,u){if(e!==t){a(t.elm)&&a(s)&&(t=s[l]=Ee(t));var d=t.elm=e.elm;if(i(e.isAsyncPlaceholder))a(t.asyncFactory.resolved)?D(e.elm,t,n):t.isAsyncPlaceholder=!0;else if(i(t.isStatic)&&i(e.isStatic)&&t.key===e.key&&(i(t.isCloned)||i(t.isOnce)))t.componentInstance=e.componentInstance;else{var p,f=t.data;a(f)&&a(p=f.hook)&&a(p=p.prepatch)&&p(e,t);var m=e.children,g=t.children;if(a(f)&&y(t)){for(p=0;p<r.update.length;++p)r.update[p](e,t);a(p=f.hook)&&a(p=p.update)&&p(e,t)}o(t.text)?a(m)&&a(g)?m!==g&&function(e,t,n,r,i){var s,l,u,d=0,p=0,f=t.length-1,m=t[0],g=t[f],h=n.length-1,b=n[0],y=n[h],_=!i;for(j(n);d<=f&&p<=h;)o(m)?m=t[++d]:o(g)?g=t[--f]:Rr(m,b)?(S(m,b,r,n,p),m=t[++d],b=n[++p]):Rr(g,y)?(S(g,y,r,n,h),g=t[--f],y=n[--h]):Rr(m,y)?(S(m,y,r,n,h),_&&c.insertBefore(e,m.elm,c.nextSibling(g.elm)),m=t[++d],y=n[--h]):Rr(g,b)?(S(g,b,r,n,p),_&&c.insertBefore(e,g.elm,m.elm),g=t[--f],b=n[++p]):(o(s)&&(s=Pr(t,d,f)),o(l=a(b.key)?s[b.key]:E(b,t,d,f))?v(b,r,e,m.elm,!1,n,p):Rr(u=t[l],b)?(S(u,b,r,n,p),t[l]=void 0,_&&c.insertBefore(e,u.elm,m.elm)):v(b,r,e,m.elm,!1,n,p),b=n[++p]);d>f?w(e,o(n[h+1])?null:n[h+1].elm,n,p,h,r):p>h&&C(t,d,f)}(d,m,g,n,u):a(g)?(j(g),a(e.text)&&c.setTextContent(d,""),w(d,null,g,0,g.length-1,n)):a(m)?C(m,0,m.length-1):a(e.text)&&c.setTextContent(d,""):e.text!==t.text&&c.setTextContent(d,t.text),a(f)&&a(p=f.hook)&&a(p=p.postpatch)&&p(e,t)}}}function O(e,t,n){if(i(n)&&a(e.parent))e.parent.data.pendingInsert=t;else for(var r=0;r<t.length;++r)t[r].data.hook.insert(t[r])}var L=!1,q=h("attrs,class,staticClass,staticStyle,key");function D(e,t,n,r){var o,s=t.tag,l=t.data,c=t.children;if(r=r||l&&l.pre,t.elm=e,i(t.isComment)&&a(t.asyncFactory))return t.isAsyncPlaceholder=!0,!0;if(!function(e,t,n){return a(t.tag)?0===t.tag.indexOf("vue-component")||!d(t,n)&&t.tag.toLowerCase()===(e.tagName&&e.tagName.toLowerCase()):e.nodeType===(t.isComment?8:3)}(e,t,r))return!1;if(a(l)&&(a(o=l.hook)&&a(o=o.init)&&o(t,!0),a(o=t.componentInstance)))return m(t,n),!0;if(a(s)){if(a(c))if(e.hasChildNodes())if(a(o=l)&&a(o=o.domProps)&&a(o=o.innerHTML)){if(o!==e.innerHTML)return"undefined"==typeof console||L||(L=!0,console.warn("Parent: ",e),console.warn("server innerHTML: ",o),console.warn("client innerHTML: ",e.innerHTML)),!1}else{for(var u=!0,p=e.firstChild,f=0;f<c.length;f++){if(!p||!D(p,c[f],n,r)){u=!1;break}p=p.nextSibling}if(!u||p)return"undefined"==typeof console||L||(L=!0,console.warn("Parent: ",e),console.warn("Mismatching childNodes vs. VNodes: ",e.childNodes,c)),!1}else b(t,c,n);if(a(l)){var v=!1;for(var g in l)if(!q(g)){v=!0,_(t,n);break}!v&&l.class&&Lt(l.class)}}else e.data!==t.text&&(e.data=t.text);return!0}return function(e,t,n,s){if(!o(t)){var l,u=!1,d=[];if(o(e))u=!0,v(t,d);else{var p=a(e.nodeType);if(!p&&Rr(e,t))S(e,t,d,null,null,s);else{if(p){if(1===e.nodeType&&e.hasAttribute(B)&&(e.removeAttribute(B),n=!0),i(n)){if(D(e,t,d))return O(t,d,!0),e;pe("The client-side rendered virtual DOM tree is not matching server-rendered content. This is likely caused by incorrect HTML markup, for example nesting block-level elements inside <p>, or missing <tbody>. Bailing hydration and performing full client-side render.")}l=e,e=new Ae(c.tagName(l).toLowerCase(),{},[],void 0,l)}var f=e.elm,m=c.parentNode(f);if(v(t,d,f._leaveCb?null:m,c.nextSibling(f)),a(t.parent))for(var g=t.parent,h=y(t);g;){for(var b=0;b<r.destroy.length;++b)r.destroy[b](g);if(g.elm=t.elm,h){for(var _=0;_<r.create.length;++_)r.create[_]($r,g);var x=g.data.hook.insert;if(x.merged)for(var w=1;w<x.fns.length;w++)x.fns[w]()}else Tr(g);g=g.parent}a(m)?C([e],0,0):a(e.tag)&&A(e)}}return O(t,d,u),t.elm}a(e)&&A(e)}}({nodeOps:qr,modules:[Yr,Kr,oo,so,yo,Z?{create:Wo,activate:Wo,remove:function(e,t){!0!==e.data.show?Mo(e,t):t()}}:{}].concat(Vr)});ee&&document.addEventListener("selectionchange",(function(){var e=document.activeElement;e&&e.vmodel&&ta(e,"input")}));var Yo={inserted:function(e,t,n,r){"select"===n.tag?(r.elm&&!r.elm._vOptions?Rt(n,"postpatch",(function(){Yo.componentUpdated(e,t,n)})):Zo(e,t,n.context),e._vOptions=[].map.call(e.options,Xo)):("textarea"===n.tag||Lr(e.type))&&(e._vModifiers=t.modifiers,t.modifiers.lazy||(e.addEventListener("compositionstart",Qo),e.addEventListener("compositionend",ea),e.addEventListener("change",ea),ee&&(e.vmodel=!0)))},componentUpdated:function(e,t,n){if("select"===n.tag){Zo(e,t,n.context);var r=e._vOptions,o=e._vOptions=[].map.call(e.options,Xo);if(o.some((function(e,t){return!R(e,r[t])})))(e.multiple?t.value.some((function(e){return Ko(e,o)})):t.value!==t.oldValue&&Ko(t.value,o))&&ta(e,"change")}}};function Zo(e,t,n){Jo(e,t,n),(Q||te)&&setTimeout((function(){Jo(e,t,n)}),0)}function Jo(e,t,n){var r=t.value,o=e.multiple;if(!o||Array.isArray(r)){for(var a,i,s=0,l=e.options.length;s<l;s++)if(i=e.options[s],o)a=P(r,Xo(i))>-1,i.selected!==a&&(i.selected=a);else if(R(Xo(i),r))return void(e.selectedIndex!==s&&(e.selectedIndex=s));o||(e.selectedIndex=-1)}else pe('<select multiple v-model="'+t.expression+'"> expects an Array value for its binding, but got '+Object.prototype.toString.call(r).slice(8,-1),n)}function Ko(e,t){return t.every((function(t){return!R(t,e)}))}function Xo(e){return"_value"in e?e._value:e.value}function Qo(e){e.target.composing=!0}function ea(e){e.target.composing&&(e.target.composing=!1,ta(e.target,"input"))}function ta(e,t){var n=document.createEvent("HTMLEvents");n.initEvent(t,!0,!0),e.dispatchEvent(n)}function na(e){return!e.componentInstance||e.data&&e.data.transition?e:na(e.componentInstance._vnode)}var ra={bind:function(e,t,n){var r=t.value,o=(n=na(n)).data&&n.data.transition,a=e.__vOriginalDisplay="none"===e.style.display?"":e.style.display;r&&o?(n.data.show=!0,Io(n,(function(){e.style.display=a}))):e.style.display=r?a:"none"},update:function(e,t,n){var r=t.value;!r!=!t.oldValue&&((n=na(n)).data&&n.data.transition?(n.data.show=!0,r?Io(n,(function(){e.style.display=e.__vOriginalDisplay})):Mo(n,(function(){e.style.display="none"}))):e.style.display=r?e.__vOriginalDisplay:"none")},unbind:function(e,t,n,r,o){o||(e.style.display=e.__vOriginalDisplay)}},oa={model:Yo,show:ra},aa={name:String,appear:Boolean,css:Boolean,mode:String,type:String,enterClass:String,leaveClass:String,enterToClass:String,leaveToClass:String,enterActiveClass:String,leaveActiveClass:String,appearClass:String,appearActiveClass:String,appearToClass:String,duration:[Number,String,Object]};function ia(e){var t=e&&e.componentOptions;return t&&t.Ctor.options.abstract?ia(wn(t.children)):e}function sa(e){var t={},n=e.$options;for(var r in n.propsData)t[r]=e[r];var o=n._parentListeners;for(var a in o)t[k(a)]=o[a];return t}function la(e,t){if(/\d-keep-alive$/.test(t.tag))return e("keep-alive",{props:t.componentOptions.propsData})}var ca=function(e){return e.tag||Vt(e)},ua=function(e){return"show"===e.name},da={name:"transition",props:aa,abstract:!0,render:function(e){var t=this,n=this.$slots.default;if(n&&(n=n.filter(ca)).length){n.length>1&&pe("<transition> can only be used on a single element. Use <transition-group> for lists.",this.$parent);var r=this.mode;r&&"in-out"!==r&&"out-in"!==r&&pe("invalid <transition> mode: "+r,this.$parent);var o=n[0];if(function(e){for(;e=e.parent;)if(e.data.transition)return!0}(this.$vnode))return o;var a=ia(o);if(!a)return o;if(this._leaving)return la(e,o);var i="__transition-"+this._uid+"-";a.key=null==a.key?a.isComment?i+"comment":i+a.tag:s(a.key)?0===String(a.key).indexOf(i)?a.key:i+a.key:a.key;var l=(a.data||(a.data={})).transition=sa(this),c=this._vnode,u=ia(c);if(a.data.directives&&a.data.directives.some(ua)&&(a.data.show=!0),u&&u.data&&!function(e,t){return t.key===e.key&&t.tag===e.tag}(a,u)&&!Vt(u)&&(!u.componentInstance||!u.componentInstance._vnode.isComment)){var d=u.data.transition=q({},l);if("out-in"===r)return this._leaving=!0,Rt(d,"afterLeave",(function(){t._leaving=!1,t.$forceUpdate()})),la(e,o);if("in-out"===r){if(Vt(a))return c;var p,f=function(){p()};Rt(l,"afterEnter",f),Rt(l,"enterCancelled",f),Rt(d,"delayLeave",(function(e){p=e}))}}return o}}},pa=q({tag:String,moveClass:String},aa);delete pa.mode;var fa={props:pa,beforeMount:function(){var e=this,t=this._update;this._update=function(n,r){var o=On(e);e.__patch__(e._vnode,e.kept,!1,!0),e._vnode=e.kept,o(),t.call(e,n,r)}},render:function(e){for(var t=this.tag||this.$vnode.data.tag||"span",n=Object.create(null),r=this.prevChildren=this.children,o=this.$slots.default||[],a=this.children=[],i=sa(this),s=0;s<o.length;s++){var l=o[s];if(l.tag)if(null!=l.key&&0!==String(l.key).indexOf("__vlist"))a.push(l),n[l.key]=l,(l.data||(l.data={})).transition=i;else{var c=l.componentOptions,u=c?c.Ctor.options.name||c.tag||"":l.tag;pe("<transition-group> children must be keyed: <"+u+">")}}if(r){for(var d=[],p=[],f=0;f<r.length;f++){var v=r[f];v.data.transition=i,v.data.pos=v.elm.getBoundingClientRect(),n[v.key]?d.push(v):p.push(v)}this.kept=e(t,null,d),this.removed=p}return e(t,null,a)},updated:function(){var e=this.prevChildren,t=this.moveClass||(this.name||"v")+"-move";e.length&&this.hasMove(e[0].elm,t)&&(e.forEach(va),e.forEach(ma),e.forEach(ga),this._reflow=document.body.offsetHeight,e.forEach((function(e){if(e.data.moved){var n=e.elm,r=n.style;$o(n,t),r.transform=r.WebkitTransform=r.transitionDuration="",n.addEventListener(Oo,n._moveCb=function e(r){r&&r.target!==n||r&&!/transform$/.test(r.propertyName)||(n.removeEventListener(Oo,e),n._moveCb=null,No(n,t))})}})))},methods:{hasMove:function(e,t){if(!ko)return!1;if(this._hasMove)return this._hasMove;var n=e.cloneNode();e._transitionClasses&&e._transitionClasses.forEach((function(e){wo(n,e)})),xo(n,t),n.style.display="none",this.$el.appendChild(n);var r=Fo(n);return this.$el.removeChild(n),this._hasMove=r.hasTransform}}};function va(e){e.elm._moveCb&&e.elm._moveCb(),e.elm._enterCb&&e.elm._enterCb()}function ma(e){e.data.newPos=e.elm.getBoundingClientRect()}function ga(e){var t=e.data.pos,n=e.data.newPos,r=t.left-n.left,o=t.top-n.top;if(r||o){e.data.moved=!0;var a=e.elm.style;a.transform=a.WebkitTransform="translate("+r+"px,"+o+"px)",a.transitionDuration="0s"}}var ha={Transition:da,TransitionGroup:fa};rr.config.mustUseProp=function(e,t,n){return"value"===n&&fr(e)&&"button"!==t||"selected"===n&&"option"===e||"checked"===n&&"input"===e||"muted"===n&&"video"===e},rr.config.isReservedTag=Sr,rr.config.isReservedAttr=pr,rr.config.getTagNamespace=function(e){return Er(e)?"svg":"math"===e?"math":void 0},rr.config.isUnknownElement=function(e){if(!Z)return!0;if(Sr(e))return!1;if(e=e.toLowerCase(),null!=Or[e])return Or[e];var t=document.createElement(e);return e.indexOf("-")>-1?Or[e]=t.constructor===window.HTMLUnknownElement||t.constructor===window.HTMLElement:Or[e]=/HTMLUnknownElement/.test(t.toString())},q(rr.options.directives,oa),q(rr.options.components,ha),rr.prototype.__patch__=Z?Go:T,rr.prototype.$mount=function(e,t){return function(e,t,n){var r;return e.$el=t,e.$options.render||(e.$options.render=ke,e.$options.template&&"#"!==e.$options.template.charAt(0)||e.$options.el||t?pe("You are using the runtime-only build of Vue where the template compiler is not available. Either pre-compile the templates into render functions, or use the compiler-included build.",e):pe("Failed to mount component: template or render function not defined.",e)),Tn(e,"beforeMount"),r=M.performance&&Et?function(){var t=e._name,r=e._uid,o="vue-perf-start:"+r,a="vue-perf-end:"+r;Et(o);var i=e._render();Et(a),St("vue "+t+" render",o,a),Et(o),e._update(i,n),Et(a),St("vue "+t+" patch",o,a)}:function(){e._update(e._render(),n)},new Wn(e,r,T,{before:function(){e._isMounted&&!e._isDestroyed&&Tn(e,"beforeUpdate")}},!0),n=!1,null==e.$vnode&&(e._isMounted=!0,Tn(e,"mounted")),e}(this,e=e&&Z?function(e){if("string"==typeof e){return document.querySelector(e)||(pe("Cannot find element: "+e),document.createElement("div"))}return e}(e):void 0,t)},Z&&setTimeout((function(){M.devtools&&(le?le.emit("init",rr):console[console.info?"info":"log"]("Download the Vue Devtools extension for a better development experience:\nhttps://github.com/vuejs/vue-devtools")),!1!==M.productionTip&&"undefined"!=typeof console&&console[console.info?"info":"log"]("You are running Vue in development mode.\nMake sure to turn on production mode when deploying for production.\nSee more tips at https://vuejs.org/guide/deployment.html")}),0),t.default=rr},"../node_modules/webpack-dev-server/client/clients/WebSocketClient.js":function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return a}});var r=n("../node_modules/webpack-dev-server/client/utils/log.js");function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var a=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.client=new WebSocket(t),this.client.onerror=function(e){r.log.error(e)}}var t,n,a;return t=e,(n=[{key:"onOpen",value:function(e){this.client.onopen=e}},{key:"onClose",value:function(e){this.client.onclose=e}},{key:"onMessage",value:function(e){this.client.onmessage=function(t){e(t.data)}}}])&&o(t.prototype,n),a&&o(t,a),Object.defineProperty(t,"prototype",{writable:!1}),e}()},"../node_modules/webpack-dev-server/client/modules/logger/index.js":function(e,t){!function(){"use strict";var e={"./client-src/modules/logger/SyncBailHookFake.js":function(e){e.exports=function(){return{call:function(){}}}},"./node_modules/webpack/lib/logging/Logger.js":function(e,t){function n(e){return function(e){if(Array.isArray(e))return r(e)}(e)||function(e){if(void 0!==("undefined"!=typeof Symbol?Symbol:function(e){return e})&&null!=e[("undefined"!=typeof Symbol?Symbol:function(e){return e}).iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return r(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return r(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function r(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var a=Object.freeze({error:"error",warn:"warn",info:"info",log:"log",debug:"debug",trace:"trace",group:"group",groupCollapsed:"groupCollapsed",groupEnd:"groupEnd",profile:"profile",profileEnd:"profileEnd",time:"time",clear:"clear",status:"status"});t.LogType=a;var i=("undefined"!=typeof Symbol?Symbol:function(e){return e})("webpack logger raw log method"),s=("undefined"!=typeof Symbol?Symbol:function(e){return e})("webpack logger times"),l=("undefined"!=typeof Symbol?Symbol:function(e){return e})("webpack logger aggregated times"),c=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this[i]=t,this.getChildLogger=n}var t,r,c;return t=e,r=[{key:"error",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];this[i](a.error,t)}},{key:"warn",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];this[i](a.warn,t)}},{key:"info",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];this[i](a.info,t)}},{key:"log",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];this[i](a.log,t)}},{key:"debug",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];this[i](a.debug,t)}},{key:"assert",value:function(e){if(!e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];this[i](a.error,n)}}},{key:"trace",value:function(){this[i](a.trace,["Trace"])}},{key:"clear",value:function(){this[i](a.clear)}},{key:"status",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];this[i](a.status,t)}},{key:"group",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];this[i](a.group,t)}},{key:"groupCollapsed",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];this[i](a.groupCollapsed,t)}},{key:"groupEnd",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];this[i](a.groupEnd,t)}},{key:"profile",value:function(e){this[i](a.profile,[e])}},{key:"profileEnd",value:function(e){this[i](a.profileEnd,[e])}},{key:"time",value:function(e){this[s]=this[s]||new Map,this[s].set(e,process.hrtime())}},{key:"timeLog",value:function(e){var t=this[s]&&this[s].get(e);if(!t)throw new Error("No such label '".concat(e,"' for WebpackLogger.timeLog()"));var r=process.hrtime(t);this[i](a.time,[e].concat(n(r)))}},{key:"timeEnd",value:function(e){var t=this[s]&&this[s].get(e);if(!t)throw new Error("No such label '".concat(e,"' for WebpackLogger.timeEnd()"));var r=process.hrtime(t);this[s].delete(e),this[i](a.time,[e].concat(n(r)))}},{key:"timeAggregate",value:function(e){var t=this[s]&&this[s].get(e);if(!t)throw new Error("No such label '".concat(e,"' for WebpackLogger.timeAggregate()"));var n=process.hrtime(t);this[s].delete(e),this[l]=this[l]||new Map;var r=this[l].get(e);void 0!==r&&(n[1]+r[1]>1e9?(n[0]+=r[0]+1,n[1]=n[1]-1e9+r[1]):(n[0]+=r[0],n[1]+=r[1])),this[l].set(e,n)}},{key:"timeAggregateEnd",value:function(e){if(void 0!==this[l]){var t=this[l].get(e);void 0!==t&&(this[l].delete(e),this[i](a.time,[e].concat(n(t))))}}}],r&&o(t.prototype,r),c&&o(t,c),Object.defineProperty(t,"prototype",{writable:!1}),e}();t.Logger=c},"./node_modules/webpack/lib/logging/createConsoleLogger.js":function(e,t,n){function r(e){return function(e){if(Array.isArray(e))return o(e)}(e)||function(e){if(void 0!==("undefined"!=typeof Symbol?Symbol:function(e){return e})&&null!=e[("undefined"!=typeof Symbol?Symbol:function(e){return e}).iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return o(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return o(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function o(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var a=n("./node_modules/webpack/lib/logging/Logger.js").LogType,i=function(e){if("string"==typeof e){var t=new RegExp("[\\\\/]".concat(e.replace(/[-[\]{}()*+?.\\^$|]/g,"\\$&"),"([\\\\/]|$|!|\\?)"));return function(e){return t.test(e)}}return e&&"object"==typeof e&&"function"==typeof e.test?function(t){return e.test(t)}:"function"==typeof e?e:"boolean"==typeof e?function(){return e}:void 0},s={none:6,false:6,error:5,warn:4,info:3,log:2,true:2,verbose:1};e.exports=function(e){var t=e.level,n=void 0===t?"info":t,o=e.debug,l=void 0!==o&&o,c=e.console,u="boolean"==typeof l?[function(){return l}]:[].concat(l).map(i),d=s["".concat(n)]||0;return function(e,t,n){var o=function(){return Array.isArray(n)?n.length>0&&"string"==typeof n[0]?["[".concat(e,"] ").concat(n[0])].concat(r(n.slice(1))):["[".concat(e,"]")].concat(r(n)):[]},i=u.some((function(t){return t(e)}));switch(t){case a.debug:if(!i)return;"function"==typeof c.debug?c.debug.apply(c,r(o())):c.log.apply(c,r(o()));break;case a.log:if(!i&&d>s.log)return;c.log.apply(c,r(o()));break;case a.info:if(!i&&d>s.info)return;c.info.apply(c,r(o()));break;case a.warn:if(!i&&d>s.warn)return;c.warn.apply(c,r(o()));break;case a.error:if(!i&&d>s.error)return;c.error.apply(c,r(o()));break;case a.trace:if(!i)return;c.trace();break;case a.groupCollapsed:if(!i&&d>s.log)return;if(!i&&d>s.verbose){"function"==typeof c.groupCollapsed?c.groupCollapsed.apply(c,r(o())):c.log.apply(c,r(o()));break}case a.group:if(!i&&d>s.log)return;"function"==typeof c.group?c.group.apply(c,r(o())):c.log.apply(c,r(o()));break;case a.groupEnd:if(!i&&d>s.log)return;"function"==typeof c.groupEnd&&c.groupEnd();break;case a.time:if(!i&&d>s.log)return;var l=1e3*n[1]+n[2]/1e6,p="[".concat(e,"] ").concat(n[0],": ").concat(l," ms");"function"==typeof c.logTime?c.logTime(p):c.log(p);break;case a.profile:"function"==typeof c.profile&&c.profile.apply(c,r(o()));break;case a.profileEnd:"function"==typeof c.profileEnd&&c.profileEnd.apply(c,r(o()));break;case a.clear:if(!i&&d>s.log)return;"function"==typeof c.clear&&c.clear();break;case a.status:if(!i&&d>s.info)return;"function"==typeof c.status?0===n.length?c.status():c.status.apply(c,r(o())):0!==n.length&&c.info.apply(c,r(o()));break;default:throw new Error("Unexpected LogType ".concat(t))}}}},"./node_modules/webpack/lib/logging/runtime.js":function(e,t,n){function r(){return r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},r.apply(this,arguments)}var o=n("./client-src/modules/logger/SyncBailHookFake.js"),a=n("./node_modules/webpack/lib/logging/Logger.js").Logger,i=n("./node_modules/webpack/lib/logging/createConsoleLogger.js"),s={level:"info",debug:!1,console:console},l=i(s);t.getLogger=function(e){return new a((function(n,r){void 0===t.hooks.log.call(e,n,r)&&l(e,n,r)}),(function(n){return t.getLogger("".concat(e,"/").concat(n))}))},t.configureDefaultLogger=function(e){r(s,e),l=i(s)},t.hooks={log:new o(["origin","type","args"])}}},n={};function r(t){var o=n[t];if(void 0!==o)return o.exports;var a=n[t]={exports:{}};return e[t](a,a.exports,r),a.exports}r.d=function(e,t){for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var o={};!function(){r.r(o),r.d(o,{default:function(){return e}});var e=r("./node_modules/webpack/lib/logging/runtime.js")}();var a=t;for(var i in o)a[i]=o[i];o.__esModule&&Object.defineProperty(a,"__esModule",{value:!0})}()},"../node_modules/webpack-dev-server/client/modules/strip-ansi/index.js":function(e,t){!function(){"use strict";var e={"./node_modules/strip-ansi/index.js":function(e,t,n){n.r(t),n.d(t,{default:function(){return o}});var r=n("./node_modules/strip-ansi/node_modules/ansi-regex/index.js");function o(e){if("string"!=typeof e)throw new TypeError("Expected a `string`, got `".concat(typeof e,"`"));return e.replace((0,r.default)(),"")}},"./node_modules/strip-ansi/node_modules/ansi-regex/index.js":function(e,t,n){function r(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.onlyFirst,n=void 0!==t&&t,r=["[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)","(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-ntqry=><~]))"].join("|");return new RegExp(r,n?void 0:"g")}n.r(t),n.d(t,{default:function(){return r}})}},n={};function r(t){var o=n[t];if(void 0!==o)return o.exports;var a=n[t]={exports:{}};return e[t](a,a.exports,r),a.exports}r.d=function(e,t){for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var o={};!function(){r.r(o);var e=r("./node_modules/strip-ansi/index.js");o.default=e.default}();var a=t;for(var i in o)a[i]=o[i];o.__esModule&&Object.defineProperty(a,"__esModule",{value:!0})}()},"../node_modules/webpack-dev-server/client/overlay.js":function(e,t,n){"use strict";n.r(t),n.d(t,{formatProblem:function(){return p},hide:function(){return d},show:function(){return f}});var r,o,a=n("../node_modules/ansi-html-community/index.js"),i=n.n(a),s=n("../node_modules/html-entities/lib/index.js"),l={reset:["transparent","transparent"],black:"181818",red:"E36049",green:"B3CB74",yellow:"FFD080",blue:"7CAFC2",magenta:"7FACCA",cyan:"C3C2EF",lightgrey:"EBE7E3",darkgrey:"6D7891"},c=[];function u(e){o?e(o):(c.push(e),r||((r=document.createElement("iframe")).id="webpack-dev-server-client-overlay",r.src="about:blank",r.style.position="fixed",r.style.left=0,r.style.top=0,r.style.right=0,r.style.bottom=0,r.style.width="100vw",r.style.height="100vh",r.style.border="none",r.style.zIndex=9999999999,r.onload=function(){(o=r.contentDocument.createElement("div")).id="webpack-dev-server-client-overlay-div",o.style.position="fixed",o.style.boxSizing="border-box",o.style.left=0,o.style.top=0,o.style.right=0,o.style.bottom=0,o.style.width="100vw",o.style.height="100vh",o.style.backgroundColor="rgba(0, 0, 0, 0.85)",o.style.color="#E8E8E8",o.style.fontFamily="Menlo, Consolas, monospace",o.style.fontSize="large",o.style.padding="2rem",o.style.lineHeight="1.2",o.style.whiteSpace="pre-wrap",o.style.overflow="auto";var e=document.createElement("span");e.innerText="Compiled with problems:";var t=document.createElement("button");t.innerText="X",t.style.background="transparent",t.style.border="none",t.style.fontSize="20px",t.style.fontWeight="bold",t.style.color="white",t.style.cursor="pointer",t.style.cssFloat="right",t.style.styleFloat="right",t.addEventListener("click",(function(){d()})),o.appendChild(e),o.appendChild(t),o.appendChild(document.createElement("br")),o.appendChild(document.createElement("br")),r.contentDocument.body.appendChild(o),c.forEach((function(e){e(o)})),c=[],r.onload=null},document.body.appendChild(r)))}function d(){r&&(document.body.removeChild(r),r=null,o=null)}function p(e,t){var n="warning"===e?"WARNING":"ERROR",r="";if("string"==typeof t)r+=t;else{var o=t.file||"",a=t.moduleName?-1!==t.moduleName.indexOf("!")?"".concat(t.moduleName.replace(/^(\s|\S)*!/,"")," (").concat(t.moduleName,")"):"".concat(t.moduleName):"",i=t.loc;n+="".concat(a||o?" in ".concat(a?"".concat(a).concat(o?" (".concat(o,")"):""):o).concat(i?" ".concat(i):""):""),r+=t.message||""}return{header:n,body:r}}function f(e,t){u((function(){t.forEach((function(t){var n=document.createElement("div"),r=document.createElement("span"),a=p(e,t),c=a.header,u=a.body;r.innerText=c,r.style.color="#".concat(l.red);var d=i()((0,s.encode)(u)),f=document.createElement("div");f.innerHTML=d,n.appendChild(r),n.appendChild(document.createElement("br")),n.appendChild(document.createElement("br")),n.appendChild(f),n.appendChild(document.createElement("br")),n.appendChild(document.createElement("br")),o.appendChild(n)}))}))}i().setColors(l)},"../node_modules/webpack-dev-server/client/socket.js":function(e,t,n){"use strict";n.r(t);var r=n("../node_modules/webpack-dev-server/client/clients/WebSocketClient.js"),o=n("../node_modules/webpack-dev-server/client/utils/log.js"),a=n("../node_modules/webpack-dev-server/client/clients/WebSocketClient.js"),i=void 0!==a?void 0!==a.default?a.default:a:r.default,s=0,l=10,c=null,u=function(e,t,n){(c=new i(e)).onOpen((function(){s=0,void 0!==n&&(l=n)})),c.onClose((function(){if(0===s&&t.close(),c=null,s<l){var r=1e3*Math.pow(2,s)+100*Math.random();s+=1,o.log.info("Trying to reconnect..."),setTimeout((function(){u(e,t,n)}),r)}})),c.onMessage((function(e){var n=JSON.parse(e);t[n.type]&&t[n.type](n.data,n.params)}))};t.default=u},"../node_modules/webpack-dev-server/client/utils/createSocketURL.js":function(e,t,n){"use strict";n.r(t),t.default=function(e){var t=e.hostname,n="0.0.0.0"===t||"::"===t||"[::]"===t;n&&self.location.hostname&&0===self.location.protocol.indexOf("http")&&(t=self.location.hostname);var r=e.protocol||self.location.protocol;("auto:"===r||t&&n&&"https:"===self.location.protocol)&&(r=self.location.protocol),r=r.replace(/^(?:http|.+-extension|file)/i,"ws");var o="";e.username&&(o=e.username,e.password&&(o=o.concat(":",e.password)));var a=(t||self.location.hostname||"localhost").replace(/^\[(.*)\]$/,"$1"),i=e.port;i&&"0"!==i||(i=self.location.port);var s="/ws";return e.pathname&&!e.fromCurrentScript&&(s=e.pathname),function(e){var t=e.protocol||"";t&&":"!==t.substr(-1)&&(t+=":");var n=e.auth||"";n&&(n=(n=encodeURIComponent(n)).replace(/%3A/i,":"),n+="@");var r="";e.hostname&&(r=n+(-1===e.hostname.indexOf(":")?e.hostname:"[".concat(e.hostname,"]")),e.port&&(r+=":".concat(e.port)));var o=e.pathname||"";e.slashes?(r="//".concat(r||""),o&&"/"!==o.charAt(0)&&(o="/".concat(o))):r||(r="");var a=e.search||"";a&&"?"!==a.charAt(0)&&(a="?".concat(a));var i=e.hash||"";return i&&"#"!==i.charAt(0)&&(i="#".concat(i)),o=o.replace(/[?#]/g,(function(e){return encodeURIComponent(e)})),a=a.replace("#","%23"),"".concat(t).concat(r).concat(o).concat(a).concat(i)}({protocol:r,auth:o,hostname:a,port:i,pathname:s,slashes:!0})}},"../node_modules/webpack-dev-server/client/utils/getCurrentScriptSource.js":function(e,t,n){"use strict";n.r(t),t.default=function(){if(document.currentScript)return document.currentScript.getAttribute("src");var e=document.scripts||[],t=Array.prototype.filter.call(e,(function(e){return e.getAttribute("src")}));if(t.length>0)return t[t.length-1].getAttribute("src");throw new Error("[webpack-dev-server] Failed to get current script source.")}},"../node_modules/webpack-dev-server/client/utils/log.js":function(e,t,n){"use strict";n.r(t),n.d(t,{log:function(){return i},setLogLevel:function(){return a}});var r=n("../node_modules/webpack-dev-server/client/modules/logger/index.js"),o=n.n(r);function a(e){o().configureDefaultLogger({level:e})}a("info");var i=o().getLogger("webpack-dev-server")},"../node_modules/webpack-dev-server/client/utils/parseURL.js":function(e,t,n){"use strict";n.r(t);var r=n("../node_modules/webpack-dev-server/client/utils/getCurrentScriptSource.js");t.default=function(e){var t={};if("string"==typeof e&&""!==e)for(var n=e.substr(1).split("&"),o=0;o<n.length;o++){var a=n[o].split("=");t[a[0]]=decodeURIComponent(a[1])}else{var i,s=(0,r.default)();try{i=new URL(s,self.location.href)}catch(e){}i&&((t=i).fromCurrentScript=!0)}return t}},"../node_modules/webpack-dev-server/client/utils/reloadApp.js":function(e,t,n){"use strict";n.r(t);var r=n("../node_modules/webpack/hot/emitter.js"),o=n.n(r),a=n("../node_modules/webpack-dev-server/client/utils/log.js");t.default=function(e,t){var n=e.hot,r=e.liveReload;if(!t.isUnloading){var i=t.currentHash,s=t.previousHash;if(!(i.indexOf(s)>=0)){var l=self.location.search.toLowerCase(),c=-1===l.indexOf("webpack-dev-server-hot=false"),u=-1===l.indexOf("webpack-dev-server-live-reload=false");if(n&&c)a.log.info("App hot update..."),o().emit("webpackHotUpdate",t.currentHash),"undefined"!=typeof self&&self.window&&self.postMessage("webpackHotUpdate".concat(t.currentHash),"*");else if(r&&u)var d=self,p=self.setInterval((function(){("about:"!==d.location.protocol||(d=d.parent).parent===d)&&f(d,p)}))}}function f(e,t){clearInterval(t),a.log.info("App updated. Reloading..."),e.location.reload()}}},"../node_modules/webpack-dev-server/client/utils/sendMessage.js":function(e,t,n){"use strict";n.r(t),t.default=function(e,t){"undefined"==typeof self||"undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope||self.postMessage({type:"webpack".concat(e),data:t},"*")}},"../node_modules/webpack/hot/emitter.js":function(e,t,n){var r=n("../node_modules/events/events.js");e.exports=new r},"../node_modules/webpack/hot/log.js":function(e){var t="info";function n(){}function r(e){return"info"===t&&"info"===e||["info","warning"].indexOf(t)>=0&&"warning"===e||["info","warning","error"].indexOf(t)>=0&&"error"===e}function o(e){return function(t,n){r(t)&&e(n)}}e.exports=function(e,t){r(e)&&("info"===e?console.log(t):"warning"===e?console.warn(t):"error"===e&&console.error(t))};var a=console.group||n,i=console.groupCollapsed||n,s=console.groupEnd||n;e.exports.group=o(a),e.exports.groupCollapsed=o(i),e.exports.groupEnd=o(s),e.exports.setLogLevel=function(e){t=e},e.exports.formatError=function(e){var t=e.message,n=e.stack;return n?n.indexOf(t)<0?t+"\n"+n:n:t}},'data:image/svg+xml;utf8, <svg xmlns="http://www.w3.org/2000/svg" width="54" height="14" viewBox="0 0 54 14"><g fill="none" fillRule="evenodd" transform="translate%281 1%29"><circle cx="6" cy="6" r="6" fill="%23FF5F56" stroke="%23E0443E" strokeWidth=".5" /><circle cx="26" cy="6" r="6" fill="%23FFBD2E" stroke="%23DEA123" strokeWidth=".5" /><circle cx="46" cy="6" r="6" fill="%2327C93F" stroke="%231AAB29" strokeWidth=".5" /></g></svg>':function(e){"use strict";e.exports='data:image/svg+xml;utf8, <svg xmlns="http://www.w3.org/2000/svg" width="54" height="14" viewBox="0 0 54 14"><g fill="none" fillRule="evenodd" transform="translate%281 1%29"><circle cx="6" cy="6" r="6" fill="%23FF5F56" stroke="%23E0443E" strokeWidth=".5" /><circle cx="26" cy="6" r="6" fill="%23FFBD2E" stroke="%23DEA123" strokeWidth=".5" /><circle cx="46" cy="6" r="6" fill="%2327C93F" stroke="%231AAB29" strokeWidth=".5" /></g></svg>'}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var a=t[r]={id:r,loaded:!1,exports:{}};return e[r].call(a.exports,a,a.exports,n),a.loaded=!0,a.exports}n.m=e,n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,{a:t}),t},n.d=function(e,t){for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.h=function(){return"a343818c1119ade7b404"},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.hmd=function(e){return(e=Object.create(e)).children||(e.children=[]),Object.defineProperty(e,"exports",{enumerable:!0,set:function(){throw new Error("ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: "+e.id)}}),e},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.b=document.baseURI||self.location.href;var r={};return function(){"use strict";n.r({});var e=n("../node_modules/webpack/hot/log.js"),t=n.n(e),r=n("../node_modules/webpack-dev-server/client/modules/strip-ansi/index.js"),o=n.n(r),a=n("../node_modules/webpack-dev-server/client/utils/parseURL.js"),i=n("../node_modules/webpack-dev-server/client/socket.js"),s=n("../node_modules/webpack-dev-server/client/overlay.js"),l=n("../node_modules/webpack-dev-server/client/utils/log.js"),c=n("../node_modules/webpack-dev-server/client/utils/sendMessage.js"),u=n("../node_modules/webpack-dev-server/client/utils/reloadApp.js"),d=n("../node_modules/webpack-dev-server/client/utils/createSocketURL.js"),p={isUnloading:!1,currentHash:n.h()},f={hot:!1,liveReload:!1,progress:!1,overlay:!1},v=(0,a.default)("?protocol=ws%3A&hostname=0.0.0.0&port=8080&pathname=%2Fws&logging=none&reconnect=10");function m(e){t().setLogLevel("verbose"===e||"log"===e?"info":e),(0,l.setLogLevel)(e)}"true"===v.hot&&(f.hot=!0,l.log.info("Hot Module Replacement enabled.")),"true"===v["live-reload"]&&(f.liveReload=!0,l.log.info("Live Reloading enabled.")),v.logging&&(f.logging=v.logging),void 0!==v.reconnect&&(f.reconnect=Number(v.reconnect)),f.logging&&m(f.logging),self.addEventListener("beforeunload",(function(){p.isUnloading=!0}));var g={hot:function(){"false"!==v.hot&&(f.hot=!0,l.log.info("Hot Module Replacement enabled."))},liveReload:function(){"false"!==v["live-reload"]&&(f.liveReload=!0,l.log.info("Live Reloading enabled."))},invalid:function(){l.log.info("App updated. Recompiling..."),f.overlay&&(0,s.hide)(),(0,c.default)("Invalid")},hash:function(e){p.previousHash=p.currentHash,p.currentHash=e},logging:m,overlay:function(e){"undefined"!=typeof document&&(f.overlay=e)},reconnect:function(e){"false"!==v.reconnect&&(f.reconnect=e)},progress:function(e){f.progress=e},"progress-update":function(e){f.progress&&l.log.info("".concat(e.pluginName?"[".concat(e.pluginName,"] "):"").concat(e.percent,"% - ").concat(e.msg,".")),(0,c.default)("Progress",e)},"still-ok":function(){l.log.info("Nothing changed."),f.overlay&&(0,s.hide)(),(0,c.default)("StillOk")},ok:function(){(0,c.default)("Ok"),f.overlay&&(0,s.hide)(),(0,u.default)(f,p)},"content-changed":function(e){l.log.info("".concat(e?'"'.concat(e,'"'):"Content"," from static directory was changed. Reloading...")),self.location.reload()},"static-changed":function(e){l.log.info("".concat(e?'"'.concat(e,'"'):"Content"," from static directory was changed. Reloading...")),self.location.reload()},warnings:function(e,t){l.log.warn("Warnings while compiling.");var n=e.map((function(e){var t=(0,s.formatProblem)("warning",e),n=t.header,r=t.body;return"".concat(n,"\n").concat(o()(r))}));(0,c.default)("Warnings",n);for(var r=0;r<n.length;r++)l.log.warn(n[r]);("boolean"==typeof f.overlay?f.overlay:f.overlay&&f.overlay.warnings)&&(0,s.show)("warning",e),t&&t.preventReloading||(0,u.default)(f,p)},errors:function(e){l.log.error("Errors while compiling. Reload prevented.");var t=e.map((function(e){var t=(0,s.formatProblem)("error",e),n=t.header,r=t.body;return"".concat(n,"\n").concat(o()(r))}));(0,c.default)("Errors",t);for(var n=0;n<t.length;n++)l.log.error(t[n]);("boolean"==typeof f.overlay?f.overlay:f.overlay&&f.overlay.errors)&&(0,s.show)("error",e)},error:function(e){l.log.error(e)},close:function(){l.log.info("Disconnected!"),f.overlay&&(0,s.hide)(),(0,c.default)("Close")}},h=(0,d.default)(v);(0,i.default)(h,g,f.reconnect)}(),function(){"use strict";n.r(r);var e=n("../node_modules/vue/dist/vue.runtime.esm.js"),t=n("./App.vue");e.default.config.productionTip=!1,new e.default({render:function(e){return e(t.default)}}).$mount("#app")}(),r}()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,